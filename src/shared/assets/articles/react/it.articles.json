[{"key": "Installazione", "values": [{"key": "Primi Passi", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Questa pagina offre una panoramica sulla documentazione di React e sulle risorse correlate.</p>\n<p><strong>React</strong> \u00e8 una libreria JavaScript per lo sviluppo d\u2019interfacce utente. Impara cos\u2019\u00e8 React cominciando dalla <a class=\"external-link\" href=\"https://it.reactjs.org//\">nostra homepage</a> o <a class=\"external-link\" href=\"https://it.reactjs.org//tutorial/tutorial.html\">dal tutorial</a>.</p>\n\n<ul>\n<li><a href=\"/react/getting-started#try-react\">Prova React</a></li>\n<li><a href=\"/react/getting-started#learn-react\">Impara React</a></li>\n<li><a href=\"/react/getting-started#staying-informed\">Rimanere Aggiornati</a></li>\n<li><a href=\"/react/getting-started#versioned-documentation\">Documentazione Versionata</a></li>\n<li><a href=\"/react/getting-started#something-missing\">Manca Qualcosa?</a></li>\n</ul>\n<h2 id=\"try-react\"><a class=\"anchor\" href=\"/react/getting-started#try-react\"></a>Prova React </h2>\n<p>React \u00e8 stato progettato sin dal principio per la sua graduale adozione, per questo <strong>puoi utilizzare quel poco o quel tanto di React di cui hai bisogno.</strong> Se vuoi avere un assaggio di React, aggiungere un po\u2019 di interattivit\u00e0 ad una semplice pagina HTML, o se vuoi cominciare lo sviluppo di un\u2019intera app complessa basata su React, i link in questa sezione ti aiuteranno nei primi passi.</p>\n<h3 id=\"online-playgrounds\"><a class=\"anchor\" href=\"/react/getting-started#online-playgrounds\"></a>Online Playgrounds </h3>\n<p>Se ti interessa giocare con il codice React, puoi utilizzare uno dei \u201cParchi Giochi\u201d disponibili online. Prova un template \u201cHello World\u201d su <a class=\"external-link\" href=\"https://it.reactjs.org//redirect-to-codepen/hello-world\">CodePen</a>, <a class=\"external-link\" href=\"https://codesandbox.io/s/new\">CodeSandbox</a>, o <a class=\"external-link\" href=\"https://stackblitz.com/fork/react\">Stackblitz</a>.</p>\n<p>Se invece preferisci utilizzare il tuo editor di testo, puoi <a class=\"external-link\" href=\"https://raw.githubusercontent.com/reactjs/reactjs.org/main/static/html/single-file-example.html\">scaricare questo file HTML</a>, modificarlo ed aprirlo nel tuo browser dal tuo filesystem. Dato che viene eseguita una lenta trasformazione del codice a runtime, raccomandiamo l\u2019uso di questa modalit\u00e0 solo per semplici demo.</p>\n<h3 id=\"add-react-to-a-website\"><a class=\"anchor\" href=\"/react/getting-started#add-react-to-a-website\"></a>Aggiungere React ad un Sito </h3>\n<p>Puoi <a href=\"/react/add-react-to-a-website\">aggiungere React ad una pagina HTML in un minuto</a>. Potrai a quel punto espandere la sua presenza o mantenerlo confinato in pochi widgets isolati.</p>\n<h3 id=\"create-a-new-react-app\"><a class=\"anchor\" href=\"/react/getting-started#create-a-new-react-app\"></a>Creare una Nuova App React </h3>\n<p>Quando si deve incominciare un nuovo progetto React, una <a href=\"/react/add-react-to-a-website\">semplice pagina HTML con script tags</a> potrebbe ancora essere la migliore opzione. Richiede solo un minuto per il setup!</p>\n<p>Man mano che la tua applicazione cresce, potresti voler considerare un setup pi\u00f9 integrato. Esistono diverse toolchains JavaScript che raccomandiamo per lo sviluppo di applicazioni pi\u00f9 complesse. Ognuna di esse pu\u00f2 funzionare con poche impostazioni oppure senza dover impostare nulla permettendoti di ottenere tutti i vantaggi del ricco ecosistema di React. <a href=\"/react/create-a-new-react-app\">Impara come.</a></p>\n<h2 id=\"learn-react\"><a class=\"anchor\" href=\"/react/getting-started#learn-react\"></a>Impara React </h2>\n<p>Le persone che si avvicinano a React hanno background e stili di apprendimento differenti. A prescindere dal fatto che tu preferisca un approccio pi\u00f9 teorico o pratico, speriamo che questa sezione ti sia di aiuto.</p>\n<ul>\n<li>Se preferisci <strong>imparare facendo</strong>, inizia dal nostro <a class=\"external-link\" href=\"https://it.reactjs.org//tutorial/tutorial.html\">tutorial pratico</a>.</li>\n<li>Se preferisci <strong>imparare i concetti passo passo</strong>, inizia dalla nostra <a href=\"/react/hello-world\">guida ai concetti principali</a>.</li>\n</ul>\n<p>Come ogni nuova tecnologia, anche React ha una curva di apprendimento. Con la pratica ed un po\u2019 di pazienza, lo imparerai fino in fondo, <em>garantito</em>.</p>\n<h3 id=\"first-examples\"><a class=\"anchor\" href=\"/react/getting-started#first-examples\"></a>Primi Esempi </h3>\n<p>L\u2019<a class=\"external-link\" href=\"https://it.reactjs.org//\">Homepage di React</a> contiene alcuni piccoli esempi di codice, affiancati da un editor in tempo reale. Anche se non sai nulla riguardo React, prova a cambiare qualcosa nel codice per vedere che effetto ha nel risultato.</p>\n<h3 id=\"react-for-beginners\"><a class=\"anchor\" href=\"/react/getting-started#react-for-beginners\"></a>React per i Principianti </h3>\n<p>Se ritieni che la documentazione di React vada troppo veloce per i tuoi gusti, dai uno sguardo a questa <a class=\"external-link\" href=\"https://www.taniarascia.com/getting-started-with-react/\">panoramica di React scritta da Tania Rascia</a>. Essa d\u00e0 una introduzione sui concetti di React pi\u00f9 importanti in modo dettagliato e semplice. Quando hai finito, prova di nuovo con la nostra documentazione!</p>\n<h3 id=\"react-for-designers\"><a class=\"anchor\" href=\"/react/getting-started#react-for-designers\"></a>React per i Designers </h3>\n<p>Se hai un background in design, <a class=\"external-link\" href=\"https://reactfordesigners.com/\">queste risorse</a> sono un ottimo punto di partenza.</p>\n<h3 id=\"javascript-resources\"><a class=\"anchor\" href=\"/react/getting-started#javascript-resources\"></a>Risorse JavaScript </h3>\n<p>La documentazione di React assume un po\u2019 di familiarit\u00e0 con la programmazione nel linguaggio JavaScript. Non hai bisogno di essere un esperto, ma \u00e8 pi\u00f9 difficile imparare React e JavaScript contemporaneamente.</p>\n<p>Ti raccomandiamo di dare un\u2019occhiata a <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">questa panoramica su JavaScript</a> per verificare il tuo livello di conoscenza. Ti richieder\u00e0 tra 30 minuti ed un\u2019ora per completarla ma alla fine ti sentirai pi\u00f9 confidente nell\u2019apprendimento di React.</p>\n<div class=\"blockquote\">\n<strong>Suggerimento</strong>\n<p>Ogni qual volta troverai che qualche concetto in JavaScript non ti sia chiaro, <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript\">MDN</a> e <a class=\"external-link\" href=\"https://javascript.info/\">javascript.info</a> sono degli ottimi siti da visitare. Esistono anche <a class=\"external-link\" href=\"https://it.reactjs.org//community/support.html\">forum di supporto della comunit\u00e0</a> dove puoi chiedere aiuto.</p>\n</div>\n<h3 id=\"practical-tutorial\"><a class=\"anchor\" href=\"/react/getting-started#practical-tutorial\"></a>Tutorial Pratico </h3>\n<p>Se preferisci <strong>imparare facendo,</strong> d\u00e0 uno sguardo al nostro <a class=\"external-link\" href=\"https://it.reactjs.org//tutorial/tutorial.html\">tutorial pratico</a>. In esso, sviluppiamo un gioco tic-tac-toe (tris) in React. Potresti avere la tentazione di non seguire il tutorial perch\u00e9 normalmente non sviluppi giochi \u2014 ma dagli una possibilit\u00e0. Le tecniche che imparerai nel tutorial sono fondamentali per la costruzione di <em>ogni</em> app in React, impararle ti dar\u00e0 una comprensione molto pi\u00f9 profonda.</p>\n<h3 id=\"step-by-step-guide\"><a class=\"anchor\" href=\"/react/getting-started#step-by-step-guide\"></a>Guide Passo-Passo </h3>\n<p>Se preferisci <strong>imparare i concetti passo dopo passo,</strong> la nostra <a href=\"/react/hello-world\">guida ai concetti principali</a> \u00e8 il posto migliore per cominciare. Ogni nuovo capitolo in essa si basa sui concetti introdotti nei capitoli precedenti facendo s\u00ec che non ti perderai nulla via via che prosegui.</p>\n<h3 id=\"thinking-in-react\"><a class=\"anchor\" href=\"/react/getting-started#thinking-in-react\"></a>Pensare in React </h3>\n<p>Molti utilizzatori di React danno molto credito alla lettura di <a href=\"/react/thinking-in-react\">Pensare in React</a> come il momento in cui hanno \u201cfatto pace\u201d con React. Probabilmente si tratta della pi\u00f9 vecchia guida a React ma \u00e8 ancora del tutto rilevante.</p>\n<h3 id=\"recommended-courses\"><a class=\"anchor\" href=\"/react/getting-started#recommended-courses\"></a>Corsi Raccomandati </h3>\n<p>Alcuni talvolta trovano che libri di terze parti e videocorsi siano di maggiore aiuto rispetto alla documentazione ufficiale. Manteniamo <a class=\"external-link\" href=\"https://it.reactjs.org//community/courses.html\">una lista delle risorse comunemente raccomandate</a>, alcune delle quali sono gratuite.</p>\n<h3 id=\"advanced-concepts\"><a class=\"anchor\" href=\"/react/getting-started#advanced-concepts\"></a>Concetti Avanzati </h3>\n<p>Una volta che hai imparato i <a href=\"/react/hello-world\">concetti principali</a> ed utilizzato React per un po\u2019, potrai trovare interessanti alcuni temi pi\u00f9 avanzati. Questa sezione ti introdurr\u00e0 alle funzioni pi\u00f9 potenti ma meno utilizzate in React come <a href=\"/react/context\">context</a> e <a href=\"/react/refs-and-the-dom\">refs</a>.</p>\n<h3 id=\"api-reference\"><a class=\"anchor\" href=\"/react/getting-started#api-reference\"></a>API di Riferimento </h3>\n<p>Questa sezione della documentazione \u00e8 utile quando devi imparare in dettaglio una specifica API di React. Ad esempio, <a href=\"/react/react-component\">l\u2019API di riferimento di <code class=\"language-javascript\">React.Component</code></a> offre dettagli su come funziona <code class=\"language-javascript\">setState()</code> e su per cosa e come, i vari metodi di lifecycle, possono essere utilizzati.</p>\n<h3 id=\"glossary-and-faq\"><a class=\"anchor\" href=\"/react/getting-started#glossary-and-faq\"></a>Glossario e FAQ </h3>\n<p>Il <a href=\"/react/glossary\">glossario</a> contiene una panoramica dei temini pi\u00f9 comuni che troverai nella documentazione di React. Esiste anche una sezione con le FAQ (domande frequenti) dove potrai trovare brevi domande e risposte riguardo i temi pi\u00f9 comuni, inclusi <a href=\"/react/faq-ajax\">creare richieste AJAX</a>, <a href=\"/react/faq-state\">stato dei componenti</a> e <a href=\"/react/faq-structure\">struttura dei file</a>.</p>\n<h2 id=\"staying-informed\"><a class=\"anchor\" href=\"/react/getting-started#staying-informed\"></a>Rimanere Aggiornati </h2>\n<p>Il <a class=\"external-link\" href=\"https://it.reactjs.org//blog/\">blog di React</a> \u00e8 la fonte ufficiale per gli aggiornamenti dal team di React. Ogni annuncio importante, incluse note di rilascio o di obsolescenza, verranno postate qui inizialmente.</p>\n<p>Puoi inoltre seguire l\u2019<a class=\"external-link\" href=\"https://twitter.com/reactjs\">account @reactjs</a> su Twitter, ma non ti perderai nulla di essenziale leggendo solo il blog.</p>\n<p>Non tutte le release di React meritano un blog post, potrai comunque trovare la lista dei cambiamenti per ogni release nel file <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CHANGELOG.md\"><code class=\"language-javascript\">CHANGELOG.md</code> nella repository di React</a>, oltre che nella pagina <a class=\"external-link\" href=\"https://github.com/facebook/react/releases\">Releases</a>.</p>\n<h2 id=\"versioned-documentation\"><a class=\"anchor\" href=\"/react/getting-started#versioned-documentation\"></a>Documentazione Versionata </h2>\n<p>Questa documentazione riflette sempre l\u2019ultima versione stabile di React. A partire da React 16, puoi trovare le vecchie versioni della documentazione in una  <a class=\"external-link\" href=\"https://it.reactjs.org//versions\">pagina separata</a>. Nota che la documentazione per le versioni precedenti viene salvata al momento del rilascio, non riceve pi\u00f9 aggiornamenti in seguito.</p>\n<h2 id=\"something-missing\"><a class=\"anchor\" href=\"/react/getting-started#something-missing\"></a>Manca Qualcosa? </h2>\n<p>Se ritieni che la documentazione abbia delle lacune, oppure se trovi che alcune parti non siano chiare, per favore <a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/issues/new\">crea una issue nel repository della documentazione </a> con i tuoi suggerimenti, oppure invia un tweet all\u2019account <a class=\"external-link\" href=\"https://twitter.com/reactjs\">@reactjs</a>. Adoriamo ricevere feedback!</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/getting-started.md\">Edit this page</a></p></div></article>", "path": "/react/getting-started", "nav": ["/react", "/react/add-react-to-a-website"]}, {"key": "Aggiungere React Ad Un Sito", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Utilizza React quel poco o quel tanto che ti basta.</p>\n<p>React \u00e8 stato progettato fin dall\u2019inizio per essere adottato gradualmente e <strong>puoi utilizzarlo quel poco o quel tanto che ti basta</strong>. Forse devi solamente aggiungere un \u201cpizzico di interattivit\u00e0\u201d a una pagina esistente. I componenti React sono un ottimo modo per farlo.</p>\n<p>La maggior parte dei siti non sono applicazioni single-page e non hanno bisogno di esserlo. Prova ad utilizzare React in una piccola parte del tuo sito, con <strong>poche righe di codice e nessuno strumento di build</strong>. In seguito, puoi espandere gradualmente la sua presenza, oppure puoi mantenerlo confinato ad alcuni widget dinamici.</p>\n\n<ul>\n<li><a href=\"/react/add-react-to-a-website#add-react-in-one-minute\">Aggiungi React in Un Minuto</a></li>\n<li><a href=\"/react/add-react-to-a-website#optional-try-react-with-jsx\">Opzionale: Prova React con JSX</a> (non \u00e8 necessario alcun bundler!)</li>\n</ul>\n<h2 id=\"add-react-in-one-minute\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#add-react-in-one-minute\"></a>Aggiungi React in Un Minuto </h2>\n<p>In questa sezione, ti mostreremo come aggiungere un componente React ad una pagina HTML esistente. Per allenarti, puoi utilizzare il tuo sito oppure creare una pagina HTML vuota di prova.</p>\n<p>Non ci saranno requisiti di installazione da soddisfare o strumenti complicati da utilizzare \u2014 <strong>per completare questa sezione, ti servono solamente una connessione a internet e un minuto del tuo tempo.</strong></p>\n<p>Opzionale: <a class=\"external-link\" href=\"https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/87f0b6f34238595b44308acfb86df6ea43669c08.zip\">Scarica l\u2019esempio completo (2KB zippato)</a></p>\n<h3 id=\"step-1-add-a-dom-container-to-the-html\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#step-1-add-a-dom-container-to-the-html\"></a>Passo 1: Aggiungi un Contenitore DOM all\u2019HTML </h3>\n<p>Per prima cosa, apri la pagina HTML che vuoi modificare. Aggiungi un tag <code class=\"language-javascript\">&lt;div&gt;</code> vuoto per contrassegnare il punto in cui vuoi visualizzare qualcosa con React. Ad esempio:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token comment\">&lt;!-- ... HTML esistente ... --&gt;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>contenitore_bottone_like<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"token comment\">&lt;!-- ... HTML esistente ... --&gt;</span></code></pre></div>\n<p>Abbiamo assegnato a questo <code class=\"language-javascript\">&lt;div&gt;</code> un attributo HTML <code class=\"language-javascript\">id</code> univoco. Questo ci consentir\u00e0 pi\u00f9 tardi di trovarlo con il codice JavaScript e di visualizzare un componente React al suo interno.</p>\n<div class=\"blockquote\">\n<strong>Consiglio</strong>\n<p>Puoi posizionare un <code class=\"language-javascript\">&lt;div&gt;</code> \u201ccontenitore\u201d come questo <strong>ovunque</strong> all\u2019interno del tag <code class=\"language-javascript\">&lt;body&gt;</code>. Puoi inserire tutti i contenitori DOM indipendenti di cui hai bisogno in una pagina. Solitamente vengono lasciati vuoti \u2014 React sostituirebbe comunque qualsiasi cosa si trovasse all\u2019interno dei contenitori DOM.</p>\n</div>\n<h3 id=\"step-2-add-the-script-tags\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#step-2-add-the-script-tags\"></a>Passo 2: Aggiungi i Tag Script </h3>\n<p>Successivamente, aggiungi questi tre tag <code class=\"language-javascript\">&lt;script&gt;</code> alla pagina HTML, subito prima del tag di chiusura <code class=\"language-javascript\">&lt;/body&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\">  <span class=\"token comment\">&lt;!-- ... altro HTML ... --&gt;</span>\n\n  <span class=\"token comment\">&lt;!-- Carica React. --&gt;</span>\n  <span class=\"token comment\">&lt;!-- Nota: quando rilasci il codice in produzione, sostituisci \"development.js\" con \"production.min.js\". --&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@18/umd/react.development.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@18/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n  <span class=\"token comment\">&lt;!-- Carica il nostro componente React. --&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bottone_like.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>I primi due tag caricano React. Il terzo carica il codice del tuo componente.</p>\n<h3 id=\"step-3-create-a-react-component\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#step-3-create-a-react-component\"></a>Passo 3: Crea un Componente React </h3>\n<p>Crea un file chiamato <code class=\"language-javascript\">bottone_like.js</code> accanto alla tua pagina HTML.</p>\n<p>Apri questo <strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js\">codice iniziale</a></strong> e incollalo nel file appena creato.</p>\n<div class=\"blockquote\">\n<strong>Consiglio</strong>\n<p>Questo codice definisce un componente React chiamato <code class=\"language-javascript\">LikeButton</code> (bottone \u201cMi Piace\u201d). Non preoccuparti se non lo capisci subito \u2014 illustreremo i concetti fondamentali di React nel <a class=\"external-link\" href=\"https://it.reactjs.org//tutorial/tutorial.html\">tutorial \u201cmani in pasta\u201d</a> e nella <a href=\"/react/hello-world\">guida ai concetti fondamentali</a>. Per ora, limitiamoci a fare in modo che il componente venga mostrato sullo schermo!</p>\n</div>\n<p>Dopo il <strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js\">codice iniziale</a></strong>, aggiungi due linee in fondo a <code class=\"language-javascript\">like_button.js</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// ... il codice iniziale che hai incollato ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> domContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#like_button_container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>domContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>LikeButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Queste due linee di codice servono a trovare il <code class=\"language-javascript\">&lt;div&gt;</code> che abbiamo aggiunto al nostro HTML nel passo 1 e a visualizzare il nostro componente React del bottone \u201cMi Piace\u201d al suo interno.</p>\n<h3 id=\"thats-it\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#thats-it\"></a>Tutto qua! </h3>\n<p>Non c\u2019\u00e8 nessun passo 4. <strong>Hai appena aggiunto il primo componente React al tuo sito internet!</strong></p>\n<p>Leggi le sezioni successive per avere pi\u00f9 consigli su come integrare React.</p>\n<p><strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605\">Guarda il codice completo dell\u2019esempio</a></strong></p>\n<p><strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/87f0b6f34238595b44308acfb86df6ea43669c08.zip\">Scarica l\u2019esempio completo (2KB zippato)</a></strong></p>\n<h3 id=\"tip-reuse-a-component\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#tip-reuse-a-component\"></a>Consiglio: Riutilizza i Componenti </h3>\n<p>Di solito, vorrai visualizzare i componenti React in pi\u00f9 punti nella pagina HTML. Ecco un esempio che visualizza il bottone \u201cMi Piace\u201d tre volte e gli passa alcuni dati:</p>\n<p><a class=\"external-link\" href=\"https://gist.github.com/gaearon/faa67b76a6c47adbab04f739cba7ceda\">Guarda il codice completo dell\u2019esempio</a></p>\n<p><a class=\"external-link\" href=\"https://gist.github.com/gaearon/faa67b76a6c47adbab04f739cba7ceda/archive/279839cb9891bd41802ebebc5365e9dec08eeb9f.zip\">Scarica l\u2019esempio completo (2KB zippato)</a></p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Questa strategia \u00e8 utile soprattutto quando le parti della pagina realizzate con React sono isolate l\u2019una dall\u2019altra. All\u2019interno del codice React, \u00e8 pi\u00f9 semplice invece utilizzare la <a href=\"/react/components-and-props#composing-components\">composizione di componenti</a>.</p>\n</div>\n<h3 id=\"tip-minify-javascript-for-production\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#tip-minify-javascript-for-production\"></a>Consiglio: Minimizza il JavaScript per la Produzione </h3>\n<p>Prima di rilasciare il tuo sito in produzione, ricordati che il codice JavaScript non minimizzato pu\u00f2 rallentare significativamente la pagina per i tuoi utenti.</p>\n<p>Se minimizzi gi\u00e0 gli script dell\u2019applicazione, <strong>il tuo sito sar\u00e0 pronto per la produzione</strong> se ti assicuri che l\u2019HTML rilasciato carichi le versioni degli script di React che finiscono con <code class=\"language-javascript\">production.min.js</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@18/umd/react.production.min.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@18/umd/react-dom.production.min.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Se invece non hai gi\u00e0 un passaggio di minimizzazione dei tuoi script, <a class=\"external-link\" href=\"https://gist.github.com/gaearon/42a2ffa41b8319948f9be4076286e1f3\">ecco un modo per introdurlo</a>.</p>\n<h2 id=\"optional-try-react-with-jsx\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#optional-try-react-with-jsx\"></a>Opzionale: Prova React con JSX </h2>\n<p>Negli esempi precedenti, abbiamo utilizzato solamente caratteristiche supportate nativamente dai browser. Ecco perch\u00e9 abbiamo utilizzato una funzione JavaScript per dire a React cosa visualizzare:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createElement<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Mostra un &lt;button&gt; \"Mi Piace\"</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">piaciuto</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Mi Piace'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tuttavia, React offre anche la possibilit\u00e0 di utilizzare <a href=\"/react/introducing-jsx\">JSX</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Mostra un &lt;button&gt; \"Mi Piace\"</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">piaciuto</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    Mi Piace\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Questi due frammenti di codice sono equivalenti. Anche se <strong>JSX \u00e8 <a href=\"/react/react-without-jsx\">completamente opzionale</a></strong>, molte persone trovano che sia utile per scrivere il codice della UI \u2014 non solo con React ma anche con altre librerie!</p>\n<p>Puoi fare esperimenti con JSX utilizzando <a class=\"external-link\" href=\"https://babeljs.io/en/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=DwIwrgLhD2B2AEcDCAbAlgYwNYF4DeAFAJTw4B88EAFmgM4B0tAphAMoQCGETBe86WJgBMAXJQBOYJvAC-RGWQBQ8FfAAyaQYuAB6cFDhkgA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=7.15.7\">questo convertitore online</a>.</p>\n<h3 id=\"quickly-try-jsx\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#quickly-try-jsx\"></a>Prova JSX Velocemente </h3>\n<p>Il modo pi\u00f9 veloce di sperimentare JSX nel tuo progetto \u00e8 aggiungere questo tag <code class=\"language-javascript\">&lt;script&gt;</code> alla tua pagina:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/babel-standalone@6/babel.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Ora puoi utilizzare JSX in qualsiasi tag <code class=\"language-javascript\">&lt;script&gt;</code> aggiungendovi l\u2019attributo <code class=\"language-javascript\">type=\"text/babel\"</code>. Questo \u00e8 <a class=\"external-link\" href=\"https://raw.githubusercontent.com/reactjs/reactjs.org/main/static/html/single-file-example.html\">un file HTML di esempio con JSX</a> che puoi scaricare ed utilizzare per i tuoi esperimenti.</p>\n<p>Questo approccio va bene per imparare e creare demo semplici. Tuttavia, rende lento il tuo sito e <strong>non \u00e8 adatto per la produzione</strong>. Quando sei pronto ad andare oltre, rimuovi questo nuovo tag <code class=\"language-javascript\">&lt;script&gt;</code> e gli attributi <code class=\"language-javascript\">type=\"text/babel\"</code> che avevi aggiunto. Al loro posto, nella prossima sezione configurerai un preprocessore che convertir\u00e0 tutti i tuoi tag <code class=\"language-javascript\">&lt;script&gt;</code> automaticamente.</p>\n<h3 id=\"add-jsx-to-a-project\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#add-jsx-to-a-project\"></a>Aggiungere JSX a un Progetto </h3>\n<p>Aggiungere JSX a un progetto non richiede strumenti complicati come un bundler (\u201cimpacchettatore\u201d) o un server di sviluppo. Essenzialmente, aggiungere JSX <strong>\u00e8 molto simile ad aggiungere un preprocessore CSS.</strong> L\u2019unico requisito \u00e8 installare <a class=\"external-link\" href=\"https://nodejs.org/\">Node.js</a> nel tuo computer.</p>\n<p>Naviga nella cartella del tuo progetto con il terminale e incolla questi due comandi:</p>\n<ol>\n<li><strong>Passo 1:</strong> Esegui <code class=\"language-javascript\">npm init -y</code> (se fallisce, <a class=\"external-link\" href=\"https://gist.github.com/gaearon/246f6380610e262f8a648e3e51cad40d\">questa \u00e8 una correzione</a>)</li>\n<li><strong>Passo 2:</strong> Esegui <code class=\"language-javascript\">npm install babel-cli@6 babel-preset-react-app@3</code></li>\n</ol>\n<div class=\"blockquote\">\n<strong>Consiglio</strong>\n<p>Stiamo <strong>utilizzando npm solamente per installare un preprocessore JSX;</strong> non ne avrai bisogno per tutto il resto. React e il codice applicativo possono essere lasciati nella forma attuale di tag <code class=\"language-javascript\">&lt;script&gt;</code>, senza modifiche.</p>\n</div>\n<p>Congratulazioni! Hai appena aggiunto un <strong>setup JSX pronto per la produzione</strong> al tuo progetto.</p>\n<h3 id=\"run-jsx-preprocessor\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#run-jsx-preprocessor\"></a>Eseguire il Preprocessore JSX </h3>\n<p>Crea una cartella chiamata <code class=\"language-javascript\">src</code> ed esegui questo comando dal terminale:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-console\"><code class=\"language-javascript\">npx babel --watch src --out-dir . --presets react-app/prod</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">npx</code> non \u00e8 un errore di battitura \u2014 \u00e8 un <a class=\"external-link\" href=\"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\">esecutore di pacchetti incluso in npm 5.2+</a>.</p>\n<p>Se vedi un messaggio di errore che recita qualcosa di simile a \u201cYou have mistakenly installed the <code class=\"language-javascript\">babel</code> package\u201d (\u201cHai installato accidentalmente il pacchetto <code class=\"language-javascript\">babel</code>\u201d), potresti aver saltato <a href=\"/react/add-react-to-a-website#add-jsx-to-a-project\">il passo precedente</a>. Eseguilo adesso nella stessa cartella e poi ritenta.</p>\n</div>\n<p>Non aspettare che il comando termini \u2014 questo comando avvia un watcher (\u201cosservatore\u201d) automatico per JSX.</p>\n<p>Se ora crei un file chiamato <code class=\"language-javascript\">src/bottone_like.js</code> con questo <strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/c8e112dc74ac44aac4f673f2c39d19d1/raw/09b951c86c1bf1116af741fa4664511f2f179f0a/like_button.js\">codice JSX iniziale</a></strong>, il watcher creer\u00e0 un file <code class=\"language-javascript\">bottone_like.js</code> preprocessato contenente il codice JavaScript adatto al browser. Quando modifichi il file sorgente con JSX, la trasformazione verr\u00e0 ri-eseguita automaticamente.</p>\n<p>Come bonus, questo ti consente anche di utilizzare le caratteristiche della sintassi moderna JavaScript come le classi senza preoccuparti di rompere i vecchi browser. Lo strumento che abbiamo appena utilizzato si chiama Babel, puoi saperne di pi\u00f9 dalla <a class=\"external-link\" href=\"https://babeljs.io/docs/en/babel-cli/\">sua documentazione</a> (in inglese).</p>\n<p>Se ti accorgi di trovarti bene con gli strumenti di build e vuoi che facciano pi\u00f9 cose per te, <a href=\"/react/create-a-new-react-app\">la prossima sezione</a> descrive alcune delle pi\u00f9 popolari e semplici \u201ctoolchains\u201d (combinazioni di strumenti). In caso contrario \u2014 nessun problema, quei tag <code class=\"language-javascript\">&lt;script&gt;</code> andranno benissimo!</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/add-react-to-a-website.md\">Edit this page</a></p></div></article>", "path": "/react/add-react-to-a-website", "nav": ["/react/getting-started", "/react/create-a-new-react-app"]}, {"key": "Creare una Nuova App React", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Utilizza una toolchain integrata per avere la migliore esperienza utente e di sviluppo.</p>\n<p>Questa pagina descrive alcune toolchains popolari di React che ti aiuteranno per compiti come:</p>\n<ul>\n<li>Scalare su molti file e componenti.</li>\n<li>Utilizzare librerie di terze parti importate da npm.</li>\n<li>Individuare subito errori comuni.</li>\n<li>Visualizzare in tempo reale l\u2019effetto delle modifiche al codice JavaScript e CSS durante lo sviluppo.</li>\n<li>Ottimizzare l\u2019output per la produzione.</li>\n</ul>\n<p>Le toolchains raccomandate in questa pagina <strong>non hanno bisogno di una configurazione per essere utilizzate</strong>.</p>\n<h2 id=\"you-might-not-need-a-toolchain\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#you-might-not-need-a-toolchain\"></a>Potresti Non Avere Bisogno di una Toolchain </h2>\n<p>Se non hai a che fare con i problemi descritti sopra o non ti senti a tuo agio ad utilizzare questi strumenti JavaScript, considera se <a href=\"/react/add-react-to-a-website\">aggiungere React come un semplice tag <code class=\"language-javascript\">&lt;script&gt;</code> a una pagina HTML</a>, opzionalmente <a href=\"/react/add-react-to-a-website#optional-try-react-with-jsx\">utilizzando JSX</a>.</p>\n<p>Questo \u00e8 anche <strong>il modo pi\u00f9 semplice di integrare React in un sito esistente.</strong> Puoi sempre aggiungere una toolchain pi\u00f9 estesa in seguito se trovi che sia utile!</p>\n<h2 id=\"recommended-toolchains\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#recommended-toolchains\"></a>Toolchains Raccomandate </h2>\n<p>Il team di React raccomanda prima di tutto queste soluzioni:</p>\n<ul>\n<li>Se stai <strong>imparando React</strong> o <strong>creando una nuova applicazione <a href=\"/react/glossary#single-page-application\">single-page</a>,</strong> utilizza <a href=\"/react/create-a-new-react-app#create-react-app\">Create React App</a>.</li>\n<li>Se stai realizzando un <strong>sito renderizzato lato server con Node.js,</strong> prova <a href=\"/react/create-a-new-react-app#nextjs\">Next.js</a>.</li>\n<li>Se stai realizzando un <strong>sito orientato al contenuto statico,</strong> prova <a href=\"/react/create-a-new-react-app#gatsby\">Gatsby</a>.</li>\n<li>Se stai realizzando una <strong>libreria di componenti</strong> o <strong>integrando una base di codice preesistente</strong>, prova con le <a href=\"/react/create-a-new-react-app#more-flexible-toolchains\">Toolchains Pi\u00f9 Flessibili</a>.</li>\n</ul>\n<h3 id=\"create-react-app\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#create-react-app\"></a>Create React App </h3>\n<p><a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a> \u00e8 un ambiente confortevole per <strong>imparare React</strong>, ed \u00e8 il modo migliore per iniziare a costruire <strong>una nuova applicazione <a href=\"/react/glossary#single-page-application\">single-page</a></strong> in React.</p>\n<p>Si occupa di configurare il tuo ambiente di sviluppo in modo da poter utilizzare le caratteristiche pi\u00f9 recenti di JavaScript, fornisce un\u2019ottima esperienza di sviluppo e ottimizza la tua applicazione per la produzione. Avrai bisogno di avere installato <a class=\"external-link\" href=\"https://nodejs.org/en/\">Node &gt;= 14.0.0 and npm &gt;= 5.6</a> nella tua macchina. Per creare un progetto, esegui:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\">npx create-react-app mia-app\n<span class=\"token builtin class-name\">cd</span> mia-app\n<span class=\"token function\">npm</span> start</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">npx</code> nella prima riga non \u00e8 un errore di battitura \u2014 \u00e8 <a class=\"external-link\" href=\"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\">un esecutore di pacchetti incluso in npm 5.2+</a>.</p>\n</div>\n<p>Create React App non gestisce la logica di backend o i database; crea soltanto una catena di build per il frontend, quindi puoi utilizzarlo con qualsiasi backend. Al suo interno utilizza <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a> e <a class=\"external-link\" href=\"https://webpack.js.org/\">webpack</a>, ma non hai bisogno di sapere nulla a tal riguardo.</p>\n<p>Quando sei pronto a rilasciare in produzione, esegui il comando <code class=\"language-javascript\">npm run build</code> e verr\u00e0 creata una build ottimizzata della tua applicazione nella cartella <code class=\"language-javascript\">build</code>. Puoi sapere di pi\u00f9 su Create React App <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app#create-react-app--\">leggendo il README</a> e la <a class=\"external-link\" href=\"https://facebook.github.io/create-react-app/\">Guida per gli Utenti</a>.</p>\n<h3 id=\"nextjs\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#nextjs\"></a>Next.js </h3>\n<p><a class=\"external-link\" href=\"https://nextjs.org/\">Next.js</a> \u00e8 un framework popolare e leggero per le <strong>applicazioni statiche e renderizzate lato server</strong> realizzate con React. Include di serie <strong>soluzioni per il routing e l\u2019applicazione degli stili</strong>, e assume che tu stia utilizzando <a class=\"external-link\" href=\"https://nodejs.org/\">Node.js</a> come ambiente server.</p>\n<p>Impara ad utilizzare Next.js seguendo <a class=\"external-link\" href=\"https://nextjs.org/learn/\">la sua guida ufficiale</a>.</p>\n<h3 id=\"gatsby\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#gatsby\"></a>Gatsby </h3>\n<p><a class=\"external-link\" href=\"https://www.gatsbyjs.org/\">Gatsby</a> \u00e8 il miglior modo di creare <strong>siti statici</strong> con React. Ti consente di utilizzare componenti React, ma il suo output \u00e8 costituito interamente da codice HTML e CSS pre-renderizzato, in modo da garantire tempi di caricamento i pi\u00f9 rapidi possibile.</p>\n<p>Impara ad utilizzare Gatsby dalla <a class=\"external-link\" href=\"https://www.gatsbyjs.org/docs/\">sua guida ufficiale</a> e da questa <a class=\"external-link\" href=\"https://www.gatsbyjs.org/docs/gatsby-starters/\">galleria di kit di partenza</a>.</p>\n<h3 id=\"more-flexible-toolchains\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#more-flexible-toolchains\"></a>Toolchains Pi\u00f9 Flessibili </h3>\n<p>Le toolchains seguenti offrono pi\u00f9 scelta e flessibilit\u00e0. Le raccomandiamo per gli utenti pi\u00f9 esperti:</p>\n<ul>\n<li><strong><a class=\"external-link\" href=\"https://neutrinojs.org/\">Neutrino</a></strong> combina la potenza di <a class=\"external-link\" href=\"https://webpack.js.org/\">webpack</a> con la semplicit\u00e0 dei presets, e include un preset per le <a class=\"external-link\" href=\"https://neutrinojs.org/packages/react/\">applicazioni React</a> e per i <a class=\"external-link\" href=\"https://neutrinojs.org/packages/react-components/\">componenti React</a>.</li>\n<li><strong><a class=\"external-link\" href=\"https://nx.dev/react\">Nx</a></strong> \u00e8 uno strumento che permette lo sviluppo di monorepo full-stack, con supporto integrato per React, Next.js, <a class=\"external-link\" href=\"https://expressjs.com/\">Express</a>, ed altro.</li>\n<li><strong><a class=\"external-link\" href=\"https://parceljs.org/\">Parcel</a></strong> \u00e8 un builder di applicazioni rapido e senza configurazioni che <a class=\"external-link\" href=\"https://parceljs.org/recipes/react/\">funziona con React</a>.</li>\n<li><strong><a class=\"external-link\" href=\"https://github.com/jaredpalmer/razzle\">Razzle</a></strong> \u00e8 un framework di renderizzazione lato server che non ha bisogno di configurazioni, ma offre pi\u00f9 flessibilit\u00e0 di Next.js.</li>\n</ul>\n<h2 id=\"creating-a-toolchain-from-scratch\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#creating-a-toolchain-from-scratch\"></a>Creare una Toolchain da Zero </h2>\n<p>Una toolchain JavaScript di build tipicamente comprende i seguenti strumenti:</p>\n<ul>\n<li>Un <strong>gestore di pacchetti</strong>, come <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a> o <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>. Ti consente di trarre vantaggio da un vasto ecosistema di pacchetti di terze parti, occupandosi della loro installazione e aggiornamento.</li>\n<li>Un <strong>bundler</strong>, come <a class=\"external-link\" href=\"https://webpack.js.org/\">webpack</a> o <a class=\"external-link\" href=\"https://parceljs.org/\">Parcel</a>. Ti consente di scrivere codice modulare e racchiuderlo in piccoli pacchetti per ottimizzare i tempi di caricamento.</li>\n<li>Un <strong>compilatore</strong> come <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a>. Ti consente di scrivere codice JavaScript moderno che funziona anche nei vecchi browser.</li>\n</ul>\n<p>Se preferisci realizzare la tua toolchain JavaScript da zero, <a class=\"external-link\" href=\"https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658\">leggi questa guida</a> in cui alcune delle funzionalit\u00e0 di Create React App vengono ricreate.</p>\n<p>Non dimenticarti di controllare che la tua toolchain personalizzata <a href=\"/react/optimizing-performance#use-the-production-build\">sia impostata correttamente per la produzione</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/create-a-new-react-app.md\">Edit this page</a></p></div></article>", "path": "/react/create-a-new-react-app", "nav": ["/react/add-react-to-a-website", "/react/cdn-links"]}, {"key": "Collegamenti a CDN", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Sia React che ReactDOM sono disponibili su una CDN.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@18/umd/react.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@18/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Le versioni di cui sopra sono intese solo per ambienti di sviluppo, e non sono adatte per ambienti di produzione. Le versioni minificate e ottimizzate di produzione di React sono disponibili ai seguenti link:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@18/umd/react.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@18/umd/react-dom.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Per caricare una versione specifica di <code class=\"language-javascript\">react</code> e <code class=\"language-javascript\">react-dom</code>, sostituisci <code class=\"language-javascript\">18</code> con il numero di versione desiderato.</p>\n<h3 id=\"why-the-crossorigin-attribute\"><a class=\"anchor\" href=\"/react/cdn-links#why-the-crossorigin-attribute\"></a>Perch\u00e9 l\u2019attributo <code class=\"language-javascript\">crossorigin</code>? </h3>\n<p>Se servi React da una CDN, consigliamo di settare l\u2019attributo <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\"><code class=\"language-javascript\">crossorigin</code></a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Consigliamo anche di verificare che la CDN che stai usando abbia settato l\u2019header HTTP <code class=\"language-javascript\">Access-Control-Allow-Origin: *</code>:</p>\n<p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/89baed0a6540f29e954065ce04661048/13ae7/cdn-cors-header.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/89baed0a6540f29e954065ce04661048/13ae7/cdn-cors-header.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>Questo consente una migliore <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2017/07/26/error-handling-in-react-16.html\">esperienza nella gestione degli errori</a> in React 16 e successivi.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/cdn-links.md\">Edit this page</a></p></div></article>", "path": "/react/cdn-links", "nav": ["/react/create-a-new-react-app", "/react/release-channels"]}, {"key": "Canali di Rilascio", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React relies on a thriving open source community to file bug reports, open pull requests, and <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs\">submit RFCs</a>. To encourage feedback we sometimes share special builds of React that include unreleased features.</p>\n<div class=\"blockquote\">\n<strong>This document will be most relevant to developers who work on frameworks, libraries, or developer tooling. Developers who use React primarily to build user-facing applications should not need to worry about our prerelease channels.</strong>\n</div>\n<p>Each of React\u2019s release channels is designed for a distinct use case:</p>\n<ul>\n<li><a href=\"/react/release-channels#latest-channel\"><strong>Latest</strong></a> is for stable, semver React releases. It\u2019s what you get when you install React from npm. This is the channel you\u2019re already using today. <strong>Use this for all user-facing React applications.</strong></li>\n<li><a href=\"/react/release-channels#next-channel\"><strong>Next</strong></a> tracks the main branch of the React source code repository. Think of these as release candidates for the next minor semver release. Use this for integration testing between React and third party projects.</li>\n<li><a href=\"/react/release-channels#experimental-channel\"><strong>Experimental</strong></a> includes experimental APIs and features that aren\u2019t available in the stable releases. These also track the main branch, but with additional feature flags turned on. Use this to try out upcoming features before they are released.</li>\n</ul>\n<p>All releases are published to npm, but only Latest uses <a href=\"/react/faq-versioning\">semantic versioning</a>. Prereleases (those in the Next and Experimental channels) have versions generated from a hash of their contents and the commit date, e.g. <code class=\"language-javascript\">0.0.0-68053d940-20210623</code> for Next and <code class=\"language-javascript\">0.0.0-experimental-68053d940-20210623</code> for Experimental.</p>\n<p><strong>The only officially supported release channel for user-facing applications is Latest</strong>. Next and Experimental releases are provided for testing purposes only, and we provide no guarantees that behavior won\u2019t change between releases. They do not follow the semver protocol that we use for releases from Latest.</p>\n<p>By publishing prereleases to the same registry that we use for stable releases, we are able to take advantage of the many tools that support the npm workflow, like <a class=\"external-link\" href=\"https://unpkg.com\">unpkg</a> and <a class=\"external-link\" href=\"https://codesandbox.io\">CodeSandbox</a>.</p>\n<h3 id=\"latest-channel\"><a class=\"anchor\" href=\"/react/release-channels#latest-channel\"></a>Latest Channel </h3>\n<p>Latest is the channel used for stable React releases. It corresponds to the <code class=\"language-javascript\">latest</code> tag on npm. It is the recommended channel for all React apps that are shipped to real users.</p>\n<p><strong>If you\u2019re not sure which channel you should use, it\u2019s Latest.</strong> If you\u2019re a React developer, this is what you\u2019re already using.</p>\n<p>You can expect updates to Latest to be extremely stable. Versions follow the semantic versioning scheme. Learn more about our commitment to stability and incremental migration in our <a href=\"/react/faq-versioning\">versioning policy</a>.</p>\n<h3 id=\"next-channel\"><a class=\"anchor\" href=\"/react/release-channels#next-channel\"></a>Next Channel </h3>\n<p>The Next channel is a prerelease channel that tracks the main branch of the React repository. We use prereleases in the Next channel as release candidates for the Latest channel. You can think of Next as a superset of Latest that is updated more frequently.</p>\n<p>The degree of change between the most recent Next release and the most recent Latest release is approximately the same as you would find between two minor semver releases. However, <strong>the Next channel does not conform to semantic versioning.</strong> You should expect occasional breaking changes between successive releases in the Next channel.</p>\n<p><strong>Do not use prereleases in user-facing applications.</strong></p>\n<p>Releases in Next are published with the <code class=\"language-javascript\">next</code> tag on npm. Versions are generated from a hash of the build\u2019s contents and the commit date, e.g. <code class=\"language-javascript\">0.0.0-68053d940-20210623</code>.</p>\n<h4 id=\"using-the-next-channel-for-integration-testing\"><a class=\"anchor\" href=\"/react/release-channels#using-the-next-channel-for-integration-testing\"></a>Using the Next Channel for Integration Testing </h4>\n<p>The Next channel is designed to support integration testing between React and other projects.</p>\n<p>All changes to React go through extensive internal testing before they are released to the public. However, there are a myriad of environments and configurations used throughout the React ecosystem, and it\u2019s not possible for us to test against every single one.</p>\n<p>If you\u2019re the author of a third party React framework, library, developer tool, or similar infrastructure-type project, you can help us keep React stable for your users and the entire React community by periodically running your test suite against the most recent changes. If you\u2019re interested, follow these steps:</p>\n<ul>\n<li>Set up a cron job using your preferred continuous integration platform. Cron jobs are supported by both <a class=\"external-link\" href=\"https://circleci.com/docs/2.0/triggers/#scheduled-builds\">CircleCI</a> and <a class=\"external-link\" href=\"https://docs.travis-ci.com/user/cron-jobs/\">Travis CI</a>.</li>\n<li>\n<p>In the cron job, update your React packages to the most recent React release in the Next channel, using <code class=\"language-javascript\">next</code> tag on npm. Using the npm cli:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-console\"><code class=\"language-javascript\">npm update react@next react-dom@next</code></pre></div>\n<p>Or yarn:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-console\"><code class=\"language-javascript\">yarn upgrade react@next react-dom@next</code></pre></div>\n</li>\n<li>Run your test suite against the updated packages.</li>\n<li>If everything passes, great! You can expect that your project will work with the next minor React release.</li>\n<li>If something breaks unexpectedly, please let us know by <a class=\"external-link\" href=\"https://github.com/facebook/react/issues\">filing an issue</a>.</li>\n</ul>\n<p>A project that uses this workflow is Next.js. (No pun intended! Seriously!) You can refer to their <a class=\"external-link\" href=\"https://github.com/zeit/next.js/blob/c0a1c0f93966fe33edd93fb53e5fafb0dcd80a9e/.circleci/config.yml\">CircleCI configuration</a> as an example.</p>\n<h3 id=\"experimental-channel\"><a class=\"anchor\" href=\"/react/release-channels#experimental-channel\"></a>Experimental Channel </h3>\n<p>Like Next, the Experimental channel is a prerelease channel that tracks the main branch of the React repository. Unlike Next, Experimental releases include additional features and APIs that are not ready for wider release.</p>\n<p>Usually, an update to Next is accompanied by a corresponding update to Experimental. They are based on the same source revision, but are built using a different set of feature flags.</p>\n<p>Experimental releases may be significantly different than releases to Next and Latest. <strong>Do not use Experimental releases in user-facing applications.</strong> You should expect frequent breaking changes between releases in the Experimental channel.</p>\n<p>Releases in Experimental are published with the <code class=\"language-javascript\">experimental</code> tag on npm. Versions are generated from a hash of the build\u2019s contents and the commit date, e.g. <code class=\"language-javascript\">0.0.0-experimental-68053d940-20210623</code>.</p>\n<h4 id=\"what-goes-into-an-experimental-release\"><a class=\"anchor\" href=\"/react/release-channels#what-goes-into-an-experimental-release\"></a>What Goes Into an Experimental Release? </h4>\n<p>Experimental features are ones that are not ready to be released to the wider public, and may change drastically before they are finalized. Some experiments may never be finalized \u2014 the reason we have experiments is to test the viability of proposed changes.</p>\n<p>For example, if the Experimental channel had existed when we announced Hooks, we would have released Hooks to the Experimental channel weeks before they were available in Latest.</p>\n<p>You may find it valuable to run integration tests against Experimental. This is up to you. However, be advised that Experimental is even less stable than Next. <strong>We do not guarantee any stability between Experimental releases.</strong></p>\n<h4 id=\"how-can-i-learn-more-about-experimental-features\"><a class=\"anchor\" href=\"/react/release-channels#how-can-i-learn-more-about-experimental-features\"></a>How Can I Learn More About Experimental Features? </h4>\n<p>Experimental features may or may not be documented. Usually, experiments aren\u2019t documented until they are close to shipping in Next or Latest.</p>\n<p>If a feature is not documented, they may be accompanied by an <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs\">RFC</a>.</p>\n<p>We will post to the <a class=\"external-link\" href=\"https://it.reactjs.org//blog\">React blog</a> when we\u2019re ready to announce new experiments, but that doesn\u2019t mean we will publicize every experiment.</p>\n<p>You can always refer to our public GitHub repository\u2019s <a class=\"external-link\" href=\"https://github.com/facebook/react/commits/main\">history</a> for a comprehensive list of changes.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/release-channels.md\">Edit this page</a></p></div></article>", "path": "/react/release-channels", "nav": ["/react/cdn-links", "/react/hello-world"]}]}, {"key": "Concetti Chiave", "values": [{"key": "1. Hello World", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Il pi\u00f9 semplice esempio di React \u00e8 questo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Questo codice mostra un\u2019intestazione con scritto \u201cHello, world!\u201d nella pagina.</p>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/rrpgNB?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Clicca sul link in alto per aprire un editor online. Sentiti libero di effettuare modifiche e osservare come esse influenzano l\u2019output. La maggior parte delle pagine in questa guida avr\u00e0 esempi modificabili come questo.</p>\n<h2 id=\"how-to-read-this-guide\"><a class=\"anchor\" href=\"/react/hello-world#how-to-read-this-guide\"></a>Come leggere questa Guida </h2>\n<p>In questa guida, esamineremo i mattoni con cui si costruiscono le applicazioni con React: elementi e componenti. Una volta padroneggiati, potrai creare applicazioni complesse a partire da piccole parti riutilizzabili.</p>\n<div class=\"blockquote\">\n<strong>Consiglio</strong>\n<p>Questa guida \u00e8 indirizzata a chi preferisce <strong>apprendere i concetti un passo alla volta</strong>. Se preferisci mettere subito le mani in pasta, dai un\u2019occhiata al nostro <a class=\"external-link\" href=\"https://it.reactjs.org//tutorial/tutorial.html\">tutorial pratico</a>. Questa guida e il tutorial sono complementari.</p>\n</div>\n<p>Questo \u00e8 il primo capitolo di una guida che illustra passo dopo passo tutti i principali concetti di React. Puoi trovare una lista di tutti i capitoli nel menu di navigazione a lato. Se stai leggendo questa pagina da un dispositivo mobile, puoi accedere al menu di navigazione premendo il bottone nell\u2019angolo in basso a destra dello schermo.</p>\n<p>Ogni capitolo di questa guida si fonda sulle nozioni introdotte nei capitoli precedenti. <strong>Puoi imparare la maggior parte di quello che c\u2019\u00e8 da sapere su React leggendo i capitoli dei \u201cConcetti fondamentali\u201d della guida, nell\u2019ordine in cui appaiono nel menu di navigazione.</strong> Per esempio, <a href=\"/react/introducing-jsx\">\u201cIntroduzione al JSX\u201d</a> \u00e8 il prossimo capitolo.</p>\n<h2 id=\"knowledge-level-assumptions\"><a class=\"anchor\" href=\"/react/hello-world#knowledge-level-assumptions\"></a>Conoscenze di base </h2>\n<p>React \u00e8 una libreria JavaScript, quindi assumeremo che tu possieda una conoscenza base del linguaggio JavaScript. <strong>Se non ti senti sicuro, ti raccomandiamo di <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">seguire un tutorial JavaScript</a> per verificare il tuo livello di preparazione</strong> e consentirti di seguire questa guida senza perderti. Il tutorial dovrebbe richiedere da 30 a 60 minuti, ma ti eviter\u00e0 la difficolt\u00e0 di dover apprendere React e JavaScript contemporaneamente.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>Talvolta, questa guida utilizza negli esempi la sintassi JavaScript introdotta pi\u00f9 di recente. Se non hai programmato in JavaScript negli ultimi anni, <a class=\"external-link\" href=\"https://gist.github.com/gaearon/683e676101005de0add59e8bb345340c\">questi tre punti</a> dovrebbero esserti sufficienti per incominciare.</p>\n</div>\n<h2 id=\"lets-get-started\"><a class=\"anchor\" href=\"/react/hello-world#lets-get-started\"></a>Iniziamo! </h2>\n<p>Continua a scorrere verso il basso e troverai il link al <a href=\"/react/introducing-jsx\">prossimo capitolo di questa guida</a> subito prima il footer del sito.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/hello-world.md\">Edit this page</a></p></div></article>", "path": "/react/hello-world", "nav": ["/react/release-channels", "/react/introducing-jsx"]}, {"key": "2. Introduzione a JSX", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Considera questa dichiarazione di variabile:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Questa strana sintassi con i tag non \u00e8 n\u00e9 una stringa n\u00e9 HTML.</p>\n<p>\u00c8 chiamata JSX, ed \u00e8 un\u2019estensione della sintassi JavaScript. Ti raccomandiamo di utilizzarla con React per descrivere l\u2019aspetto che dovrebbe avere la UI (<em>User Interface</em>, o interfaccia utente). JSX ti potrebbe ricordare un linguaggio di template, ma usufruisce di tutta la potenza del JavaScript.</p>\n<p>JSX produce \u201celementi React\u201d. Studieremo il modo in cui gli elementi vengono renderizzati nel DOM nella <a href=\"/react/rendering-elements\">prossima sezione</a>. Qui sotto troverai le nozioni fondamentali di JSX, sufficienti per iniziare ad utilizzarlo.</p>\n<h3 id=\"why-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#why-jsx\"></a>Perch\u00e9 JSX? </h3>\n<p>React riconosce il fatto che la logica di renderizzazione \u00e8 per sua stessa natura accoppiata con le altre logiche che governano la UI: la gestione degli eventi, il cambiamento dello stato nel tempo, la preparazione dei dati per la visualizzazione.</p>\n<p>Invece di separare artificialmente le <em>tecnologie</em> inserendo il codice di markup e la logica in file separati, React <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Principio_di_singola_responsabilit%C3%A0\">separa le <em>responsabilit\u00e0</em></a> utilizzando unit\u00e0 debolmente accoppiate chiamate \u201ccomponenti\u201d che contengono entrambi. Torneremo a parlare dei componenti in una <a href=\"/react/components-and-props\">sezione successiva</a>. Se non ti senti ancora a tuo agio ad inserire codice di markup nel JavaScript, <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\">questa presentazione</a> dovrebbe riuscire a convincerti.</p>\n<p>React <a href=\"/react/react-without-jsx\">non obbliga</a> ad utilizzare JSX, ma la maggior parte delle persone lo trovano utile come aiuto visuale quando lavorano con la UI all\u2019interno del codice JavaScript. Inoltre, JSX consente a React di mostrare messaggi di errore e di avvertimento pi\u00f9 efficaci.</p>\n<p>Detto questo, incominciamo!</p>\n<h3 id=\"embedding-expressions-in-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#embedding-expressions-in-jsx\"></a>Incorporare espressioni in JSX </h3>\n<p>Nell\u2019esempio in basso, dichiariamo una variabile chiamata <code class=\"language-javascript\">name</code> e poi la utilizziamo all\u2019interno di JSX racchiudendola in parentesi graffe:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Giuseppe Verdi'</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Puoi inserire qualsiasi <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\">espressione JavaScript</a> all\u2019interno delle parentesi graffe in JSX. Ad esempio, <code class=\"language-javascript\">2 + 2</code>, <code class=\"language-javascript\">user.firstName</code> o <code class=\"language-javascript\">formatName(user)</code> sono tutte espressioni JavaScript valide.</p>\n<p>Nell\u2019esempio in basso, includiamo il risultato della chiamata ad una funzione JavaScript, <code class=\"language-javascript\">formatName(user)</code>, in un elemento <code class=\"language-javascript\">&lt;h1&gt;</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Giuseppe'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Verdi'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    Hello, </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span></span><span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/PGEjdG?editors=1010\">Provalo su CodePen</a></strong></p>\n<p>Abbiamo suddiviso il codice JSX su pi\u00f9 linee per renderlo pi\u00f9 leggibile. Sebbene non sia obbligatorio, se segui questa pratica ti consigliamo di racchiudere il codice in parentesi per evitare i problemi che possono derivare dall\u2019<a class=\"external-link\" href=\"https://stackoverflow.com/q/2846283\">inserimento automatico dei punto e virgola</a>.</p>\n<h3 id=\"jsx-is-an-expression-too\"><a class=\"anchor\" href=\"/react/introducing-jsx#jsx-is-an-expression-too\"></a>JSX \u00e8 un\u2019Espressione </h3>\n<p>Dopo la compilazione, le espressioni JSX diventano normali chiamate a funzioni JavaScript che producono oggetti JavaScript.</p>\n<p>Questo significa che puoi utilizzare JSX all\u2019interno di istruzioni <code class=\"language-javascript\">if</code> e cicli <code class=\"language-javascript\">for</code>, assegnarlo a variabili, utilizzarlo come argomento di una funzione e restituirlo come risultato di una funzione:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getGreeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, Stranger.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"specifying-attributes-with-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#specifying-attributes-with-jsx\"></a>Specificare gli Attributi con JSX </h3>\n<p>Puoi utilizzare le virgolette per valorizzare gli attributi con una stringa:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.reactjs.org<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> link </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Puoi anche utilizzare le parentesi graffe per includere un\u2019espressione JavaScript in un attributo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>img</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Non aggiungere le virgolette attorno alle parentesi graffe quando includi un\u2019espressione JavaScript in un attributo. Dovresti utilizzare o le virgolette (per le stringhe) o le parentesi graffe (per le espressioni), ma mai entrambe nello stesso attributo.</p>\n<div class=\"blockquote\">\n<strong>Attenzione:</strong>\n<p>Dal momento che JSX \u00e8 pi\u00f9 vicino al JavaScript che all\u2019HTML, React DOM utilizza la convenzione <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Notazione_a_cammello\"><code class=\"language-javascript\">camelCase</code></a> nell\u2019assegnare il nome agli attributi, invece che quella utilizzata normalmente nell\u2019HTML, e modifica il nome di alcuni attributi.</p>\n<p>Ad esempio, <code class=\"language-javascript\">class</code> diventa <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/API/Element/className\"><code class=\"language-javascript\">className</code></a> in JSX e <code class=\"language-javascript\">tabindex</code> diventa <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex\"><code class=\"language-javascript\">tabIndex</code></a>.</p>\n</div>\n<h3 id=\"specifying-children-with-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#specifying-children-with-jsx\"></a>Specificare Figli in JSX </h3>\n<p>Se un tag \u00e8 vuoto, puoi chiuderlo immediatamente con <code class=\"language-javascript\">/&gt;</code>, come in XML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I tag JSX possono contenere figli:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Good to see you here.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"jsx-prevents-injection-attacks\"><a class=\"anchor\" href=\"/react/introducing-jsx#jsx-prevents-injection-attacks\"></a>JSX Previene gli Attacchi di Iniezione del Codice </h3>\n<p>Utilizzare l\u2019input degli utenti in JSX \u00e8 sicuro:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>contenutoPotenzialmentePericoloso<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Questo \u00e8 sicuro:</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>React DOM effettua automaticamente l\u2019<a class=\"external-link\" href=\"https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html\">escape</a> di qualsiasi valore inserito in JSX prima di renderizzarlo. In questo modo, garantisce che non sia possibile iniettare nulla che non sia esplicitamente scritto nella tua applicazione. Ogni cosa \u00e8 convertita in stringa prima di essere renderizzata. Questo aiuta a prevenire gli attacchi <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Cross-site_scripting\">XSS (cross-site-scripting)</a>.</p>\n<h3 id=\"jsx-represents-objects\"><a class=\"anchor\" href=\"/react/introducing-jsx#jsx-represents-objects\"></a>JSX Rappresenta Oggetti </h3>\n<p>Babel compila JSX in chiamate a <code class=\"language-javascript\">React.createElement()</code>.</p>\n<p>Questi due esempi sono identici:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    Hello, world!\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'greeting'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Hello, world!'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">React.createElement()</code> effettua alcuni controlli per aiutarti a scrivere codice senza bug, ma fondamentalmente crea un oggetto come questo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Nota: questa struttura \u00e8 semplificata</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'greeting'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello, world!'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Questi oggetti sono chiamati \u201celementi React\u201d. Puoi pensare a loro come a descrizioni di ci\u00f2 che vuoi vedere sullo schermo. React legge questi oggetti e li utilizza per costruire il DOM e tenerlo aggiornato.</p>\n<p>Esploreremo la renderizzazione degli elementi React nel DOM nella <a href=\"/react/rendering-elements\">prossima sezione</a>.</p>\n<div class=\"blockquote\">\n<strong>Consiglio:</strong>\n<p>Ti raccomandiamo di <a class=\"external-link\" href=\"https://babeljs.io/docs/en/next/editors\">indicare \u201cBabel\u201d come linguaggio</a> nel tuo editor preferito, in modo che il codice ES6 ed il codice JSX siano entrambi evidenziati correttamente.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/introducing-jsx.md\">Edit this page</a></p></div></article>", "path": "/react/introducing-jsx", "nav": ["/react/hello-world", "/react/rendering-elements"]}, {"key": "3. Renderizzare Elementi", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Gli elementi sono i pi\u00f9 piccoli tra i vari mattoni costituenti apps scritte in React.</p>\n<p>Un elemento descrive cosa vuoi vedere sullo schermo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Contrariamente agli elementi <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/API/Document_Object_Model\">DOM</a> del browser, gli elementi React sono oggetti semplici e per questo pi\u00f9 veloci da creare. Il DOM di React tiene cura di aggiornare il DOM del browser per essere consistente con gli elementi React.</p>\n<div class=\"blockquote\">\n<strong>Nota bene:</strong>\n<p>Potresti ritrovarti a confondere gli elementi con un concetto pi\u00f9 ampiamente utilizzato: i \u201ccomponenti\u201d. Introdurremo i componenti nella <a href=\"/react/components-and-props\">prossima sezione</a>. Gli elementi sono ci\u00f2 di cui i componenti \u201csono fatti\u201d, per questo ti consigliamo di proseguire alla lettura di questa sezione prima di proseguire.</p>\n</div>\n<h2 id=\"rendering-an-element-into-the-dom\"><a class=\"anchor\" href=\"/react/rendering-elements#rendering-an-element-into-the-dom\"></a>Renderizzare un Elemento nel DOM </h2>\n<p>Supponiamo di avere un <code class=\"language-javascript\">&lt;div&gt;</code> da qualche parte nel tuo file HTML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Lo chiameremo nodo DOM \u201cradice\u201d (o root) in quanto ogni cosa al suo interno verr\u00e0 gestita dal DOM di React.</p>\n<p>Applicazioni costruite solo con React di solito hanno un solo nodo DOM radice. Se stai integrando React all\u2019interno di apps esistenti, potresti avere pi\u00f9 elementi DOM radice isolati, dipende dai casi.</p>\n<p>Per renderizzare un elemento React, passa l\u2019elemento DOM a  <a href=\"/react/react-dom-client#createroot\"><code class=\"language-javascript\">ReactDOM.createRoot()</code></a>, successivamente passa l\u2019elemento React a <code class=\"language-javascript\">root.render()</code>:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ZpvBNJ?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Ci\u00f2 visualizzer\u00e0 \u201cHello, world\u201d nella pagina.</p>\n<h2 id=\"updating-the-rendered-element\"><a class=\"anchor\" href=\"/react/rendering-elements#updating-the-rendered-element\"></a>Aggiornare un Elemento Renderizzato </h2>\n<p>Gli elementi React sono <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Immutable_object\">immutabili</a>. Una volta creato un elemento, non puoi cambiare i suoi figli o attributi. Un elemento \u00e8 come un singolo fotogramma di un film: rappresenta la UI (interfaccia utente) ad un certo punto nel tempo.</p>\n<p>Con la conoscenza che abbiamo fino a questo punto, l\u2019unico modo per aggiornare l\u2019UI \u00e8 quello di creare un nuovo elemento e di passarlo a <code class=\"language-javascript\">root.render()</code>.</p>\n<p>Prendiamo in considerazione il prossimo esempio, nel quale abbiamo un orologio:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwoJZk?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Chiama <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">root.render()</code></a> ogni secondo da una callback <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\"><code class=\"language-javascript\">setInterval()</code></a>.</p>\n<div class=\"blockquote\">\n<strong>Nota bene:</strong>\n<p>In pratica, la maggioranza delle applicazioni React chiamano <code class=\"language-javascript\">root.render()</code> solo una volta. Nelle sezioni successive impareremo che questo codice viene incapsulato in <a href=\"/react/state-and-lifecycle\">componenti stateful</a>.</p>\n<p>Ti raccomandiamo di non saltare questi argomenti man mano che li incontriamo in quanto essi si basano l\u2019uno sull\u2019altro.</p>\n</div>\n<h2 id=\"react-only-updates-whats-necessary\"><a class=\"anchor\" href=\"/react/rendering-elements#react-only-updates-whats-necessary\"></a>React Aggiorna Solo Quanto Necessario </h2>\n<p>Il DOM di React confronta l\u2019elemento ed i suoi figli con il precedente, applicando solo gli aggiornamenti al DOM del browser necessari a renderlo consistente con lo stato desiderato.</p>\n<p>Puoi verificare questo fatto ispezionando <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwoJZk?editors=1010\">l\u2019ultimo esempio</a> usando i developer tools:</p>\n<p><a class=\"external-link\" href=\"https://it.reactjs.org//c158617ed7cc0eac8f58330e49e48224/granular-dom-updates.gif\">Image link</a></p>\n<p>Anche se abbiamo creato un elemento che descrive l\u2019intero albero della UI ad ogni tick (ogni qual volta la callback viene richiamata, nell\u2019esempio, ogni secondo), solo il nodo testo il quale contenuto \u00e8 stato modificato viene aggiornato dal DOM di React.</p>\n<p>Nella nostra esperienza, pensare a come la UI deve essere rappresentata in ogni momento piuttosto che pensare a come alterarla nel tempo, elimina una intera classe di bugs.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/rendering-elements.md\">Edit this page</a></p></div></article>", "path": "/react/rendering-elements", "nav": ["/react/introducing-jsx", "/react/components-and-props"]}, {"key": "4. Componenti e Props", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>I Componenti ti permettono di suddividere la UI (<em>User Interface</em>, o interfaccia utente) in parti indipendenti, riutilizzabili e di pensare ad ognuna di esse in modo isolato. Questa pagina offre una introduzione al concetto dei componenti. Puoi trovare invece informazioni dettagliate nella <a href=\"/react/react-component\">API di riferimento dei componenti</a>.</p>\n<p>Concettualmente, i componenti sono come funzioni JavaScript: accettano in input dati arbitrari (sotto il nome di \u201cprops\u201d) e ritornano elementi React che descrivono cosa dovrebbe apparire sullo schermo.</p>\n<h2 id=\"function-and-class-components\"><a class=\"anchor\" href=\"/react/components-and-props#function-and-class-components\"></a>Funzioni e Classi Componente </h2>\n<p>Il modo pi\u00f9 semplice di definire un componente \u00e8 quello di scrivere una funzione JavaScript:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Ciao</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Questa funzione \u00e8 un componente React valido in quanto accetta un oggetto parametro contenente dati sotto forma di una singola \u201cprops\u201d (che prende il nome da \u201cproperties\u201d in inglese, ossia \u201cpropriet\u00e0\u201d) che \u00e8 un oggetto parametro avente dati al suo interno e ritorna un elemento React. Chiameremo questo tipo di componenti \u201ccomponenti funzione\u201d perch\u00e9 sono letteralmente funzioni JavaScript.</p>\n<p>Puoi anche usare una <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Classes\">classe ES6</a> per definire un componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ciao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I due componenti appena visti sono equivalenti dal punto di vista di React.</p>\n<p>Le Classi e i Componenti Funzione hanno funzionalit\u00e0 aggiuntive che verranno discusse in dettaglio nelle <a href=\"/react/state-and-lifecycle\">prossime sezioni</a>.</p>\n<h2 id=\"rendering-a-component\"><a class=\"anchor\" href=\"/react/components-and-props#rendering-a-component\"></a>Renderizzare un Componente </h2>\n<p>In precedenza, abbiamo incontrato elementi React che rappresentano tags DOM:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> elemento <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Comunque, gli elementi possono rappresentare anche componenti definiti dall\u2019utente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> elemento <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Ciao</span></span> <span class=\"token attr-name\">nome</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Quando React incontra un elemento che rappresenta un componente definito dall\u2019utente, passa gli attributi JSX ed i figli a questo componente come un singolo oggetto. Tale oggetto prende il nome di \u201cprops\u201d.</p>\n<p>Ad esempio, il codice seguente renderizza il messaggio \u201cCiao, Sara\u201d nella pagina:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Ciao</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> elemento <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Ciao</span></span> <span class=\"token attr-name\">nome</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>elemento<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/YGYmEG?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Ricapitoliamo cosa succede nell\u2019esempio:</p>\n<ol>\n<li>Richiamiamo <code class=\"language-javascript\">root.render()</code> con l\u2019elemento <code class=\"language-javascript\">&lt;Ciao nome=\"Sara\" /&gt;</code>.</li>\n<li>React chiama a sua volta il componente <code class=\"language-javascript\">Ciao</code> con <code class=\"language-javascript\">{nome: 'Sara'}</code> passato in input come props.</li>\n<li>Il nostro componente <code class=\"language-javascript\">Ciao</code> ritorna un elemento <code class=\"language-javascript\">&lt;h1&gt;Ciao, Sara&lt;/h1&gt;</code> come risultato.</li>\n<li>React DOM aggiorna efficientemente il DOM per far s\u00ec che contenga <code class=\"language-javascript\">&lt;h1&gt;Ciao, Sara&lt;/h1&gt;</code>.</li>\n</ol>\n<div class=\"blockquote\">\n<strong>Nota Bene: Ricordati di chiamare i tuoi componenti con la prima lettera in maiuscolo.</strong>\n<p>React tratta i componenti che iniziano con una lettera minuscola come normali tags DOM. per esempio, <code class=\"language-javascript\">&lt;div /&gt;</code> rappresenta un tag HTML div,  <code class=\"language-javascript\">&lt;Ciao /&gt;</code> rappresenta invece un componente e richiede <code class=\"language-javascript\">Ciao</code> all\u2019interno dello <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\">scope</a>.</p>\n<p>Per saperne di pi\u00f9 riguardo questa convenzione, leggi <a href=\"/react/jsx-in-depth#user-defined-components-must-be-capitalized\">JSX In Dettaglio</a>.</p>\n</div>\n<h2 id=\"composing-components\"><a class=\"anchor\" href=\"/react/components-and-props#composing-components\"></a>Comporre Componenti </h2>\n<p>I componenti possono far riferimento ad altri componenti nel loro output. Ci\u00f2 permette di utilizzare la stessa astrazione ad ogni livello di dettaglio. Un bottone, un form, una finestra di dialogo, una schermata: nelle applicazioni React, tutte queste cose di solito sono espresse come componenti.</p>\n<p>Per esempio, possiamo creare un componente <code class=\"language-javascript\">App</code> che renderizza <code class=\"language-javascript\">Ciao</code> tante volte:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Ciao</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Ciao</span></span> <span class=\"token attr-name\">nome</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Ciao</span></span> <span class=\"token attr-name\">nome</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Cahal<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Ciao</span></span> <span class=\"token attr-name\">nome</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Edite<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/KgQKPr?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Normalmente, le nuove applicazioni React hanno un singolo componente chiamato <code class=\"language-javascript\">App</code> al livello pi\u00f9 alto che racchiude tutti gli altri componenti. Ad ogni modo, quando si va ad integrare React in una applicazione gi\u00e0 esistente, \u00e8 bene partire dal livello pi\u00f9 basso e da piccoli componenti come ad esempio <code class=\"language-javascript\">Bottone</code> procedendo da l\u00ec fino alla cima della gerarchia della vista.</p>\n<h2 id=\"extracting-components\"><a class=\"anchor\" href=\"/react/components-and-props#extracting-components\"></a>Estrarre Componenti </h2>\n<p>Non aver paura di suddividere i componenti in componenti pi\u00f9 piccoli.</p>\n<p>Ad esempio, considera questo componente <code class=\"language-javascript\">Commento</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Commento</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Commento<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>InfoUtente<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Avatar<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>autore<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>autore<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>InfoUtente-nome<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>autore<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Commento-testo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>testo<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Commento-data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/VKQwEo?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Esso accetta come props: <code class=\"language-javascript\">autore</code> (un oggetto), <code class=\"language-javascript\">testo</code> (una stringa) e <code class=\"language-javascript\">data</code> (sotto forma di oggetto <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a>) al fine di renderizzare un commento in un sito di social media, come Facebook.</p>\n<p>Un componente scritto in quel modo, con codice molto annidato, \u00e8 difficile da modificare. Per lo stesso motivo, non si possono riutilizzare con facilit\u00e0 parti dello stesso. Procediamo quindi ad estrarre qualche componente.</p>\n<p>Per cominciare, estraiamo <code class=\"language-javascript\">Avatar</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Avatar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Avatar<span class=\"token punctuation\">\"</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>utente<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>utente<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">Avatar</code> non ha bisogno di sapere che viene renderizzato all\u2019interno di un <code class=\"language-javascript\">Commento</code>. Ecco perch\u00e9 abbiamo dato alla sua prop un nome pi\u00f9 generico: <code class=\"language-javascript\">utente</code> al posto di <code class=\"language-javascript\">autore</code>.</p>\n<p>Consigliamo di dare il nome alle props dal punto di vista del componente piuttosto che dal contesto in cui viene usato.</p>\n<p>Adesso possiamo semplificare un po\u2019 il componente <code class=\"language-javascript\">Commento</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Commento</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Commento<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>InfoUtente<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">utente</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>autore<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>InfoUtente-nome<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>autore<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Commento-testo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>testo<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Commento-data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Andiamo ora ad estrarre il componente <code class=\"language-javascript\">InfoUtente</code> che renderizza un <code class=\"language-javascript\">Avatar</code> vicino al nome dell\u2019utente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">InfoUtente</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>InfoUtente<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">utente</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>utente<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>InfoUtente-nome<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>utente<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ci\u00f2 ci permette di semplificare <code class=\"language-javascript\">Commento</code> ancora di pi\u00f9:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Commento</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Commento<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InfoUtente</span></span> <span class=\"token attr-name\">utente</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>autore<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Commento-testo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>testo<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Commento-data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/rrJNJY?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Estrarre componenti pu\u00f2 sembrare un\u2019attivit\u00e0 pesante ma avere una tavolozza di componenti riutilizzabili ripaga molto bene nelle applicazioni pi\u00f9 complesse. Una buona regola da tenere a mente \u00e8 che se una parte della tua UI viene usata diverse volte (<code class=\"language-javascript\">Bottone</code>, <code class=\"language-javascript\">Pannello</code>, <code class=\"language-javascript\">Avatar</code>) o se \u00e8 abbastanza complessa di per s\u00e9 (<code class=\"language-javascript\">App</code>, <code class=\"language-javascript\">StoriaFeed</code>, <code class=\"language-javascript\">Commento</code>), allora questi componenti sono buoni candidati per essere estratti come componenti separati.</p>\n<h2 id=\"props-are-read-only\"><a class=\"anchor\" href=\"/react/components-and-props#props-are-read-only\"></a>Le Props Sono in Sola Lettura </h2>\n<p>Ogni volta che dichiari un componente <a href=\"/react/components-and-props#function-and-class-components\">come funzione o classe</a>, non deve mai modificare le proprie props. Considera la funzione <code class=\"language-javascript\">somma</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">somma</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Funzioni di questo tipo vengono chiamate <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Pure_function\">\u201cpure\u201d</a> perch\u00e9 non provano a cambiare i propri dati in input, ritornano sempre lo stesso risultato a partire dagli stessi dati in ingresso.</p>\n<p>Al contrario, la funzione seguente \u00e8 impura in quanto altera gli input:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">preleva</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">conto<span class=\"token punctuation\">,</span> ammontare</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  conto<span class=\"token punctuation\">.</span>totale <span class=\"token operator\">-=</span> ammontare<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React \u00e8 abbastanza flessibile ma ha una sola regola molto importante:</p>\n<p><strong>Tutti i componenti React devono comportarsi come funzioni pure rispetto alle proprie props.</strong></p>\n<p>Ovviamente, le UI delle applicazioni sono dinamiche e cambiano nel tempo. Nella <a href=\"/react/state-and-lifecycle\">prossima sezione</a>, introdurremo il nuovo concetto di \u201cstato\u201d. Lo stato permette ai componenti React di modificare il loro output nel tempo in seguito ad azioni dell\u2019utente, risposte dalla rete (API) e qualsiasi altra cosa possa far renderizzare un output diverso di volta in volta, ci\u00f2 avviene senza violare questa regola molto importante.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/components-and-props.md\">Edit this page</a></p></div></article>", "path": "/react/components-and-props", "nav": ["/react/rendering-elements", "/react/state-and-lifecycle"]}, {"key": "5. State e Lifecycle", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Questa pagina introduce il concetto di <em>state</em> (stato) e <em>lifecycle</em> (ciclo di vita) in un componente React. Puoi trovare un <a href=\"/react/react-component\">riferimento dettagliato alle API dei componenti qui</a>.</p>\n<p>Considera l\u2019esempio dell\u2019orologio di <a href=\"/react/rendering-elements#updating-the-rendered-element\">una delle sezioni precedenti</a>. In <a href=\"/react/rendering-elements#rendering-an-element-into-the-dom\">Renderizzare Elementi</a>, abbiamo appreso solamente un modo per aggiornare la UI. Chiamiamo <code class=\"language-javascript\">root.render()</code> per cambiare l\u2019output renderizzato:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, mondo!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sono le </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwoJZk?editors=0010\"><strong>Prova su CodePen</strong></a></p>\n<p>In questa sezione, apprenderemo come rendere il componente <code class=\"language-javascript\">Clock</code> davvero riutilizzabile ed incapsulato. Esso si occuper\u00e0 di impostare il proprio timer e di aggiornarsi ogni secondo.</p>\n<p>Possiamo iniziare incapsulando l\u2019aspetto dell\u2019orologio:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, mondo!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sono le </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token attr-name\">date</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/dpdoYR?editors=0010\"><strong>Prova su CodePen</strong></a></p>\n<p>Tuttavia, manca un requisito fondamentale: il fatto che <code class=\"language-javascript\">Clock</code> imposti un timer ed aggiorni la propria UI ogni secondo dovrebbe essere un dettaglio implementativo di <code class=\"language-javascript\">Clock</code>.</p>\n<p>Idealmente, vorremmo scrivere il seguente codice una volta sola, ed ottenere che <code class=\"language-javascript\">Clock</code> si aggiorni da solo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Per implementare ci\u00f2, abbiamo bisogno di aggiungere uno \u201cstato\u201d al componente <code class=\"language-javascript\">Clock</code>.</p>\n<p>Lo state (o stato) \u00e8 simile alle props, ma \u00e8 privato e completamente controllato dal componente.</p>\n<h2 id=\"converting-a-function-to-a-class\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#converting-a-function-to-a-class\"></a>Convertire una Funzione in una Classe </h2>\n<p>Puoi convertire un componente funzione come <code class=\"language-javascript\">Clock</code> in una classe in cinque passaggi:</p>\n<ol>\n<li>Crea una <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Classes\">classe ES6</a>, con lo stesso nome, che estende <code class=\"language-javascript\">React.Component</code>.</li>\n<li>Aggiungi un singolo metodo vuoto chiamato <code class=\"language-javascript\">render()</code>.</li>\n<li>Sposta il corpo della funzione all\u2019interno del metodo <code class=\"language-javascript\">render()</code>.</li>\n<li>Sostituisci <code class=\"language-javascript\">props</code> con <code class=\"language-javascript\">this.props</code> nel corpo del metodo <code class=\"language-javascript\">render()</code>.</li>\n<li>Rimuovi la dichiarazione della funzione rimasta vuota.</li>\n</ol>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, mondo!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sono le </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/zKRGpo?editors=0010\"><strong>Prova su CodePen</strong></a></p>\n<p><code class=\"language-javascript\">Clock</code> \u00e8 ora definito da una classe, invece che da una funzione.</p>\n<p>Il metodo <code class=\"language-javascript\">render</code> viene invocato ogni volta che si verifica un aggiornamento, ma finch\u00e9 renderizziamo <code class=\"language-javascript\">&lt;Clock /&gt;</code> nello stesso nodo del DOM, verr\u00e0 utilizzata un\u2019unica istanza della classe <code class=\"language-javascript\">Clock</code>. Questo ci consente di utilizzare funzionalit\u00e0 aggiuntive come il local state e i metodi del lifecycle del componente.</p>\n<h2 id=\"adding-local-state-to-a-class\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#adding-local-state-to-a-class\"></a>Aggiungere il Local State ad una Classe </h2>\n<p>Sposteremo <code class=\"language-javascript\">date</code> dalle props allo state in tre passaggi:</p>\n<ol>\n<li>Sostituisci <code class=\"language-javascript\">this.props.date</code> con <code class=\"language-javascript\">this.state.date</code> nel metodo <code class=\"language-javascript\">render()</code>:</li>\n</ol>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, mondo!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sono le </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>Aggiungi un <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Classes#Costruttore\">costruttore di classe</a> che assegna il valore iniziale di <code class=\"language-javascript\">this.state</code>:</li>\n</ol>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, mondo!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sono le </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nota come passiamo <code class=\"language-javascript\">props</code> al costruttore di base:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>I componenti classe dovrebbero sempre chiamare il costruttore base passando <code class=\"language-javascript\">props</code> come argomento.</p>\n<ol>\n<li>Rimuovi la prop <code class=\"language-javascript\">date</code> dall\u2019elemento <code class=\"language-javascript\">&lt;Clock /&gt;</code>:</li>\n</ol>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In seguito ci occuperemo di aggiungere la parte di codice relativa al timer all\u2019interno del componente stesso.</p>\n<p>Il risultato dovrebbe avere questo aspetto:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, mondo!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sono le </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/KgQpJd?editors=0010\"><strong>Prova su CodePen</strong></a></p>\n<p>Adesso, faremo in modo che <code class=\"language-javascript\">Clock</code> imposti il proprio timer e si aggiorni ogni secondo.</p>\n<h2 id=\"adding-lifecycle-methods-to-a-class\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#adding-lifecycle-methods-to-a-class\"></a>Aggiungere Metodi di Lifecycle ad una Classe </h2>\n<p>Nelle applicazioni con molti componenti, \u00e8 molto importante rilasciare le risorse occupate dai componenti quando questi vengono distrutti.</p>\n<p>Nel nostro caso, vogliamo <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\">impostare un timer</a> ogni volta che <code class=\"language-javascript\">Clock</code> \u00e8 renderizzato nel DOM per la prima volta. Questo \u00e8 definito \u201cmounting\u201d (\u201cmontaggio\u201d) in React.</p>\n<p>Vogliamo anche <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval\">cancellare il timer</a> ogni volta che il DOM prodotto da <code class=\"language-javascript\">Clock</code> viene rimosso. Questo \u00e8 definito \u201cunmounting\u201d (\u201csmontaggio\u201d) in React.</p>\n<p>Possiamo dichiarare alcuni metodi speciali nel componente classe per eseguire del codice quando il componente viene montato e smontato:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, mondo!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sono le </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Questi metodi sono chiamati \u201cmetodi del lifecycle\u201d (metodi del ciclo di vita).</p>\n<p>Il metodo <code class=\"language-javascript\">componentDidMount()</code> viene eseguito dopo che l\u2019output del componente \u00e8 stato renderizzato nel DOM. \u00c8 un buon punto in cui impostare un timer:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token number\">1000</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nota come salviamo l\u2019ID del timer direttamente in <code class=\"language-javascript\">this</code> (<code class=\"language-javascript\">this.timerID</code>).</p>\n<p>Mentre <code class=\"language-javascript\">this.props</code> viene impostato da React stesso e <code class=\"language-javascript\">this.state</code> ha un significato speciale, sei libero di aggiungere altri campi alla classe se hai bisogno di salvare qualcosa che non partecipa al flusso dei dati (come l\u2019ID di un timer).</p>\n<p>Ci occuperemo di cancellare il timer nel metodo del lifecycle <code class=\"language-javascript\">componentWillUnmount()</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Infine, implementeremo un metodo chiamato <code class=\"language-javascript\">tick()</code> che verr\u00e0 invocato dal componente <code class=\"language-javascript\">Clock</code> ogni secondo.</p>\n<p>Il nuovo metodo utilizzer\u00e0 <code class=\"language-javascript\">this.setState()</code> per pianificare gli aggiornamenti al local state del componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1000</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, mondo!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sono le </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/amqdNA?editors=0010\"><strong>Prova su CodePen</strong></a></p>\n<p>In questo modo l\u2019orologio scatta ogni secondo.</p>\n<p>Ricapitoliamo velocemente quello che sta succedendo e l\u2019ordine con cui i metodi sono invocati:</p>\n<ol>\n<li>Quando <code class=\"language-javascript\">&lt;Clock /&gt;</code> viene passato a <code class=\"language-javascript\">root.render()</code>, React invoca il costruttore del componente <code class=\"language-javascript\">Clock</code>. Dal momento che <code class=\"language-javascript\">Clock</code> ha bisogno di mostrare l\u2019ora corrente, inizializza <code class=\"language-javascript\">this.state</code> con un oggetto che include l\u2019ora corrente. In seguito, aggiorneremo questo state.</li>\n<li>In seguito, React invoca il metodo <code class=\"language-javascript\">render()</code> del componente <code class=\"language-javascript\">Clock</code>. Questo \u00e8 il modo in cui React apprende cosa dovrebbe essere visualizzato sullo schermo. React si occupa di aggiornare il DOM in modo da farlo corrispondere all\u2019output della renderizzazione di <code class=\"language-javascript\">Clock</code>.</li>\n<li>Quando l\u2019output della renderizzazione di <code class=\"language-javascript\">Clock</code> viene inserito nel DOM, React invoca il metodo del lifecycle <code class=\"language-javascript\">componentDidMount()</code>. Al suo interno, il componente <code class=\"language-javascript\">Clock</code> chiede al browser di impostare un timer con cui invocare il metodo <code class=\"language-javascript\">tick()</code> del componente una volta al secondo.</li>\n<li>Ogni secondo, il browser invoca il metodo <code class=\"language-javascript\">tick()</code>. Al suo interno, il componente <code class=\"language-javascript\">Clock</code> pianifica un aggiornamento della UI invocando <code class=\"language-javascript\">setState()</code> con un oggetto che contiene la nuova ora corrente. Grazie alla chiamata a <code class=\"language-javascript\">setState()</code>, React viene informato del fatto che lo state \u00e8 cambiato e invoca di nuovo il metodo <code class=\"language-javascript\">render()</code> per sapere che cosa deve essere mostrato sullo schermo. Questa volta, <code class=\"language-javascript\">this.state.date</code> nel metodo <code class=\"language-javascript\">render()</code> avr\u00e0 un valore differente, di conseguenza l\u2019output della renderizzazione includer\u00e0 l\u2019orario aggiornato. React aggiorna il DOM di conseguenza.</li>\n<li>Se il componente <code class=\"language-javascript\">Clock</code> dovesse mai essere rimosso dal DOM, React invocherebbe il metodo del lifecycle <code class=\"language-javascript\">componentWillUnmount()</code> ed il timer verrebbe cancellato.</li>\n</ol>\n<h2 id=\"using-state-correctly\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#using-state-correctly\"></a>Utilizzare Correttamente lo Stato </h2>\n<p>Ci sono tre cose che devi sapere a proposito di <code class=\"language-javascript\">setState()</code>.</p>\n<h3 id=\"do-not-modify-state-directly\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#do-not-modify-state-directly\"></a>Non Modificare lo Stato Direttamente </h3>\n<p>Per esempio, questo codice non farebbe ri-renderizzare un componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Sbagliato</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comment <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Devi invece utilizzare <code class=\"language-javascript\">setState()</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Giusto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>L\u2019unico punto in cui puoi assegnare direttamente un valore a <code class=\"language-javascript\">this.state</code> \u00e8 nel costruttore.</p>\n<h3 id=\"state-updates-may-be-asynchronous\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#state-updates-may-be-asynchronous\"></a>Gli Aggiornamenti di Stato Potrebbero Essere Asincroni </h3>\n<p>React potrebbe accorpare pi\u00f9 chiamate a <code class=\"language-javascript\">setState()</code> in un unico aggiornamento per migliorare la performance.</p>\n<p>Poich\u00e9 <code class=\"language-javascript\">this.props</code> e <code class=\"language-javascript\">this.state</code> potrebbero essere aggiornate in modo asincrono, non dovresti basarti sul loro valore per calcolare lo stato successivo.</p>\n<p>Ad esempio, questo codice potrebbe non riuscire ad aggiornare correttamente il contatore:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Sbagliato</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Per effettuare correttamente questa operazione, bisogna utilizzare una seconda forma di <code class=\"language-javascript\">setState()</code> che accetta in input una funzione invece che un oggetto. Quella funzione ricever\u00e0 come primo argomento lo stato precedente e come secondo argomento le propriet\u00e0, aggiornate al momento in cui l\u2019aggiornamento di stato \u00e8 applicato:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Giusto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>increment\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Qui abbiamo utilizzato una <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Functions_and_function_scope/Arrow_functions\">arrow function</a>, ma puoi utilizzare anche una funzione tradizionale:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Giusto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>increment\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"state-updates-are-merged\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#state-updates-are-merged\"></a>Gli Aggiornamenti di Stato Vengono Applicati Tramite Merge </h3>\n<p>Quando chiami <code class=\"language-javascript\">setState()</code>, React effettua il merge dell\u2019oggetto che fornisci nello state corrente.</p>\n<p>Ad esempio, il tuo state potrebbe contenere molte variabili indipendenti:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>A questo punto puoi aggiornarle indipendentemente con invocazioni separate del metodo <code class=\"language-javascript\">setState()</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>posts</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fetchComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>comments</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quello che viene effettuato \u00e8 uno <a class=\"external-link\" href=\"https://stackoverflow.com/questions/42731453/deep-and-shallow-merge-in-javascript\">\u201cshallow merge\u201d</a>, quindi <code class=\"language-javascript\">this.setState({comments})</code> lascia intatto <code class=\"language-javascript\">this.state.posts</code>, ma sostituisce completamente <code class=\"language-javascript\">this.state.comments</code>.</p>\n<h2 id=\"the-data-flows-down\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#the-data-flows-down\"></a>I Dati Fluiscono Verso il Basso </h2>\n<p>N\u00e9 i componenti genitori n\u00e9 i componenti figli possono sapere se un certo componente \u00e8 \u201cstateful\u201d o \u201cstateless\u201d (cio\u00e8 se \u00e8 dotato o meno di stato) e non dovrebbero preoccuparsi del fatto di essere definiti come funzione o come classe.</p>\n<p>Questa \u00e8 la ragione per cui lo stato \u00e8 spesso definito locale o incapsulato. Esso non \u00e8 accessibile a nessun componente a parte quello a cui appartiene.</p>\n<p>Un componente potrebbe decidere di passare il suo stato ai componenti figli sotto forma di props:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FormattedDate</span></span> <span class=\"token attr-name\">date</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Il componente <code class=\"language-javascript\">FormattedDate</code> riceve <code class=\"language-javascript\">date</code> nelle sue props e non pu\u00f2 sapere se viene dallo state di <code class=\"language-javascript\">Clock</code>, dalle propriet\u00e0 di <code class=\"language-javascript\">Clock</code> o se \u00e8 stato inserito a mano:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FormattedDate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sono le </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/zKRqNB?editors=0010\"><strong>Prova su CodePen</strong></a></p>\n<p>Questo \u00e8 spesso definito flusso di dati \u201ctop-down\u201d (dall\u2019alto verso il basso) o \u201cunidirezionale\u201d. In questo paradigma, lo stato \u00e8 sempre posseduto da uno specifico componente, e tutti i dati o la UI derivati da quello stato possono influenzare solamente i componenti \u201cpi\u00f9 in basso\u201d nell\u2019albero.</p>\n<p>Se immagini un albero di componenti come una cascata di props, puoi pensare allo stato di ciascun componente come a una sorgente d\u2019acqua aggiuntiva che si unisce alla cascata in un punto qualsiasi e flusice verso il basso insieme al resto dell\u2019acqua.</p>\n<p>Per mostrare che tutti i componenti sono davvero isolati, possiamo creare un componente <code class=\"language-javascript\">App</code> che renderizza tre <code class=\"language-javascript\">&lt;Clock&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/vXdGmd?editors=0010\"><strong>Prova su CodePen</strong></a></p>\n<p>Ciascun <code class=\"language-javascript\">Clock</code> imposta il proprio timer e si aggiorna indipendentemente dagli altri.</p>\n<p>Nelle applicazioni React, il fatto che un componente sia stateful o stateless \u00e8 considerato un dettaglio implementativo di quel componente, che potrebbe cambiare nel tempo. Puoi utilizzare componenti stateless all\u2019interno di componenti stateful, e viceversa.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/state-and-lifecycle.md\">Edit this page</a></p></div></article>", "path": "/react/state-and-lifecycle", "nav": ["/react/components-and-props", "/react/handling-events"]}, {"key": "6. Gestione degli Eventi", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>La gestione degli eventi negli elementi React \u00e8 molto simile alla gestione degli eventi negli elementi DOM. Vi sono alcune differenze sintattiche:</p>\n<ul>\n<li>Gli eventi React vengono dichiarati utilizzando camelCase, anzich\u00e9 in minuscolo.</li>\n<li>In JSX, il gestore di eventi (<em>event handler</em>) viene passato come funzione, piuttosto che stringa.</li>\n</ul>\n<p>Per esempio, l\u2019HTML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">attivaLasers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n  Attiva Lasers\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>\u00e8 leggermente diverso in React:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>attivaLasers<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">  Attiva Lasers</span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Un\u2019altra differenza \u00e8 che, in React, non \u00e8 possibile ritornare <code class=\"language-javascript\">false</code> per impedire il comportamento predefinito. Devi chiamare <code class=\"language-javascript\">preventDefault</code> esplicitamente. Ad esempio, in un semplice codice HTML per impedire il comportamento predefinito del form nel submit, potresti scrivere:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onsubmit</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hai cliccato Invia.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Invia<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>In React, invece sarebbe:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hai cliccato Invia.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Invia</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In questo esempio, il parametro <code class=\"language-javascript\">e</code> \u00e8 un evento sintetico (<em>synthetic event</em>). React definisce questi eventi sintetici in base alle <a class=\"external-link\" href=\"https://www.w3.org/TR/DOM-Level-3-Events/\">specifiche W3C</a>, quindi non hai bisogno di preoccuparti della compatibilit\u00e0 tra browser. Gli eventi React non funzionano esattamente allo stesso modo degli eventi nativi. Consulta la guida di riferimento <a href=\"/react/events\"><code class=\"language-javascript\">SyntheticEvent</code></a> per saperne di pi\u00f9.</p>\n<p>Usando React, in generale, non dovresti aver bisogno di chiamare <code class=\"language-javascript\">addEventListener</code> per aggiungere listeners ad un elemento DOM dopo la sua creazione. Invece, basta fornire un listener quando l\u2019elemento \u00e8 inizialmente renderizzato.</p>\n<p>Quando definisci un componente usando una <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Classes\">classe ES6</a>, un pattern comune \u00e8 usare un metodo della classe come gestore di eventi. Ad esempio, questo componente <code class=\"language-javascript\">Interruttore</code> renderizza un pulsante che consente all\u2019utente di alternare gli stati \u201cAcceso\u201d e \u201cSpento\u201d:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Interruttore</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">acceso</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Necessario per accedere al corretto valore di `this` all'interno della callback</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">acceso</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>prevState<span class=\"token punctuation\">.</span>acceso</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>acceso <span class=\"token operator\">?</span> <span class=\"token string\">'Acceso'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Spento'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQACzTkWUCbgC0MAG4NacAPQBGYgn5CQEtgA8C02iKjMajTUhAAeFhDUACCCwC8AHRAAJ1JSWgCAPmdtNzVwkGNZeUVyFXVNHX0SOzpHKQgRFFJA2g8AJRhMErBgkQ8AckCKjFo6gG4_cnzC4rKm2gARAHkAWQ9q0lqGvuUWCbaOjowoNDg4DwBJB0DAgFdaWiKYDxgzenk18sqCAGEJwvJND2AOjw97OFpd5qKAChRglBwACUTxerw8cB2HECfwBwPa5HBHlo0ggcAIHzQ9A8PiemAw8FIiGRuxg_ARYNe2m0HgAcjACas0IEIKQPNCPPiYGxGpyoG8io19my1GgoIcPG4PAADFFo6V8qB1CT0QLkNlsKDLN5iqAAI0wWEpyNR6MSChg10U2BxJrRljkFqtEGwBD1ph-cvhYP4C0RHnNsGd2B-IOe_teXoxMFoAGVaFiYD9MdifOEPD9w0jXlyyMSAIQpwi50iCY38IFAhGvX3kMGNeQwGFh41CnZqjPG17OPV7A6IijBrA-YBRwOW61YfjhLvg0emjEJ-gEEseAD89QAghhGaQ6h5iXVYxxGHva9mPFFe8LyDOIx4qz6OrWOpdmkNhgQGzyfmDnJtVV2YVeW0cIy39WYMB2ERNAIfBaAAUVgGDGAAIQAT3WFgfgaEIWiBDpH0oIx-CAA\">Prova su CodeSandbox</a></strong></p>\n<p>Fai attenzione al valore di <code class=\"language-javascript\">this</code> nelle callback JSX. In JavaScript, i metodi delle classi non sono <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_objects/Function/bind\">associati</a> (<em>bound</em>) di default. Se dimentichi di applicare <code class=\"language-javascript\">bind</code> a <code class=\"language-javascript\">this.handleClick</code> e di passarlo a <code class=\"language-javascript\">onClick</code>, <code class=\"language-javascript\">this</code> sar\u00e0 <code class=\"language-javascript\">undefined</code> quando la funzione verr\u00e0 effettivamente chiamata.</p>\n<p>Questo non \u00e8 un comportamento specifico in React: \u00e8 parte di <a class=\"external-link\" href=\"https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/\">come funzionano le funzioni in JavaScript</a>. In generale, se ti riferisci ad un metodo senza <code class=\"language-javascript\">()</code> dopo di esso, per esempio <code class=\"language-javascript\">onClick = {this.handleClick}</code>, potresti aver bisogno di applicare <code class=\"language-javascript\">bind</code> a quel metodo.</p>\n<p>Se usare la chiamata al metodo <code class=\"language-javascript\">bind</code> ti sembra troppo, ci sono due alternative a disposizione. Puoi usare la sintassi <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_instance_fields\">propriet\u00e0 pubbliche delle classi</a>, per associare correttamente le callback:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggingButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// This syntax ensures `this` is bound within handleClick.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Clicca qui</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Questa sintassi \u00e8 abilitata nelle impostazioni predefinite di <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>.</p>\n<p>Se non stai usando la sintassi delle propriet\u00e0 delle classi, \u00e8 possibile utilizzare una <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">funzione a freccia</a> all\u2019interno della callback:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggingButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Il valore di `this` \u00e8: '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Questa sintassi garantisce che `this` sia associato correttamente all'interno di handleClick</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        Clicca qui</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Il problema con questa sintassi \u00e8 che viene creata una callback diversa ogni volta che <code class=\"language-javascript\">LoggingButton</code> viene renderizzato. Nella maggior parte dei casi, non vi sono problemi. Tuttavia, se questa callback viene passata come prop a componenti inferiori, tali componenti potrebbero eseguire un ulteriore re-renderizzamento. In generale, vi consigliamo di utilizzare <code class=\"language-javascript\">bind</code> nel costruttore o la sintassi delle propriet\u00e0 pubbliche nelle classi, per evitare questo tipo di problema di prestazioni.</p>\n<h2 id=\"passing-arguments-to-event-handlers\"><a class=\"anchor\" href=\"/react/handling-events#passing-arguments-to-event-handlers\"></a>Passare Argomenti ai Gestori di Eventi </h2>\n<p>All\u2019interno di un ciclo, \u00e8 comune avere l\u2019esigenza di passare un parametro aggiuntivo ad un gestore di eventi. Ad esempio, avendo <code class=\"language-javascript\">id</code> come l\u2019identificativo della riga, le seguenti dichiarazioni sarebbero entrambe valide:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRow</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Elimina riga</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRow</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Elimina riga</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Le due linee di codice precedenti sono equivalenti e utilizzano le <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Functions_and_function_scope/Arrow_functions\">funzioni a freccia</a> e <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"><code class=\"language-javascript\">Function.prototype.bind</code></a> rispettivamente.</p>\n<p>In entrambi i casi, l\u2019argomento <code class=\"language-javascript\">e</code>, che rappresenta l\u2019evento React, verr\u00e0 passato come secondo argomento dopo l\u2019ID. Con la funzione a freccia, devi passarlo esplicitamente, mentre con <code class=\"language-javascript\">bind</code> qualsiasi altro argomento viene passato automaticamente.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/handling-events.md\">Edit this page</a></p></div></article>", "path": "/react/handling-events", "nav": ["/react/state-and-lifecycle", "/react/conditional-rendering"]}, {"key": "7. Renderizzazione Condizionale", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>In React, puoi creare componenti distinti che incapsulano il funzionamento di cui hai bisogno. Quindi, puoi renderizzarne solo alcuni, a seconda dello stato della tua applicazione.</p>\n<p>La renderizzazione condizionale in React funziona nello stesso modo in cui funzionano le condizioni in JavaScript. Puoi perci\u00f2 usare operatori come <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"><code class=\"language-javascript\">if</code></a> o l\u2019<a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/Operator_Condizionale\">operatore condizionale</a> per creare elementi che rappresentano lo stato corrente cosicch\u00e9 React possa aggiornare la UI di conseguenza.</p>\n<p>Considera i due componenti:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">BenvenutoUtente</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Bentornato/a!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">BenvenutoOspite</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Autenticati, per favore</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Creiamo un componente <code class=\"language-javascript\">Benvenuto</code> che visualizza l\u2019uno o l\u2019altro dei componenti appena visti a seconda del fatto che l\u2019utente sia autenticato o meno:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Benvenuto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> utenteAutenticato <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>utenteAutenticato<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>utenteAutenticato<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BenvenutoUtente</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BenvenutoOspite</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prova a cambiare in utenteAutenticato={true}:</span>\n<span class=\"gatsby-highlight-code-line\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Benvenuto</span></span> <span class=\"token attr-name\">utenteAutenticato</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://it.reactjs.org//redirect-to-codepen/conditional-rendering/1\"><b>Prova su CodePen</b></a></p>\n<p>Questo esempio renderizza un messaggio di benvenuto diverso a seconda del valore della prop <code class=\"language-javascript\">utenteAutenticato</code>.</p>\n<h3 id=\"element-variables\"><a class=\"anchor\" href=\"/react/conditional-rendering#element-variables\"></a>Variabili Elemento </h3>\n<p>Le variabili possono contenere elementi. Ci\u00f2 ti permette di renderizzare condizionatamente parti del componente mentre il resto dell\u2019output non cambia.</p>\n<p>Considera questi due nuovi componenti che rappresentano bottoni di Logout e Login:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">BottoneLogin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Login</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">BottoneLogout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Logout</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nell\u2019esempio di seguito, creeremo un <a href=\"/react/state-and-lifecycle#adding-local-state-to-a-class\">componente stateful</a> chiamato <code class=\"language-javascript\">ControlloLogin</code>.</p>\n<p>Esso renderizzer\u00e0 <code class=\"language-javascript\">&lt;BottoneLogin /&gt;</code> o <code class=\"language-javascript\">&lt;BottoneLogout /&gt;</code> a seconda del suo stato corrente. Renderizzer\u00e0 inoltre il componente <code class=\"language-javascript\">&lt;Benvenuto /&gt;</code> dell\u2019esempio precedente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ControlloLogin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLoginClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLogoutClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">utenteAutenticato</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleLoginClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">utenteAutenticato</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleLogoutClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">utenteAutenticato</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> utenteAutenticato <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>utenteAutenticato<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> bottone<span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>utenteAutenticato<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      bottone <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BottoneLogout</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      bottone <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BottoneLogin</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Benvenuto</span></span> <span class=\"token attr-name\">utenteAutenticato</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>utenteAutenticato<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>bottone<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ControlloLogin</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://it.reactjs.org//redirect-to-codepen/conditional-rendering/2\"><b>Prova su CodePen</b></a></p>\n<p>Anche se dichiarare una variabile ed usare una condizione con <code class=\"language-javascript\">if</code> \u00e8 un buon modo per renderizzare condizionatamente un componente, a volte \u00e8 preferibile usare una sintassi pi\u00f9 corta. Esistono diversi modi per definire condizioni <em>inline</em> (ossia nella stessa riga), diamo uno sguardo.</p>\n<h3 id=\"inline-if-with-logical--operator\"><a class=\"anchor\" href=\"/react/conditional-rendering#inline-if-with-logical--operator\"></a>Condizione If Inline con Operatore Logico &amp;&amp; </h3>\n<p>Puoi <a href=\"/react/introducing-jsx#embedding-expressions-in-jsx\">incorporare espressioni in JSX</a> racchiudendole in parentesi graffe. Lo stesso vale per l\u2019operatore logico JavaScript <code class=\"language-javascript\">&amp;&amp;</code> che pu\u00f2 tornare utile quando vogliamo includere un elemento condizionatamente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">CasellaDiPosta</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> messaggiNonLetti <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>messaggiNonLetti<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>messaggiNonLetti<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          Hai </span><span class=\"token punctuation\">{</span>messaggiNonLetti<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> messaggi non letti.</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> messaggi <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Re: React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Re:Re: React'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CasellaDiPosta</span></span> <span class=\"token attr-name\">messaggiNonLetti</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>messaggi<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://it.reactjs.org//redirect-to-codepen/conditional-rendering/3\"><b>Prova su CodePen</b></a></p>\n<p>Funziona perch\u00e9 in JavaScript, <code class=\"language-javascript\">true &amp;&amp; espressione</code> si risolve sempre in <code class=\"language-javascript\">espressione</code>, mentre <code class=\"language-javascript\">false &amp;&amp; espressione</code> si risolve sempre in <code class=\"language-javascript\">false</code>.</p>\n<p>Per questo, se la condizione \u00e8 <code class=\"language-javascript\">true</code>, l\u2019elemento dopo <code class=\"language-javascript\">&amp;&amp;</code> verr\u00e0 renderizzato. Se invece \u00e8 <code class=\"language-javascript\">false</code>, React lo ignorer\u00e0.</p>\n<p>Tieni presente che ritornare una espressione <code class=\"language-javascript\">falsy</code> far\u00e0 in modo che l\u2019elemento che segue <code class=\"language-javascript\">&amp;&amp;</code> venga scartato ma ritorner\u00e0 l\u2019espressione falsy. Nell\u2019esempio di sotto, <code class=\"language-javascript\">&lt;div&gt;0&lt;/div&gt;</code> verr\u00e0 ritornato dal metodo render.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>count <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Messaggi: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"inline-if-else-with-conditional-operator\"><a class=\"anchor\" href=\"/react/conditional-rendering#inline-if-else-with-conditional-operator\"></a>Condizioni If-Else Inline con Operatore Condizionale </h3>\n<p>Un altro metodo per renderizzare condizionatamente elementi inline \u00e8 quello di usare l\u2019operatore condizionale JavaScript <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/Operator_Condizionale\"><code class=\"language-javascript\">condizione ? true : false</code></a>.</p>\n<p>Nell\u2019esempio di seguito, lo useremo per renderizzare condizionatamente un breve blocco di testo.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> utenteAutenticato <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>utenteAutenticato<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      L'utente \u00e8 &lt;b&gt;{utenteAutenticato ? 'attualmente' : 'non'}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> autenticato.</span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pu\u00f2 essere usato anche per espressioni pi\u00f9 lunghe anche se diventa meno ovvio capire cosa sta succedendo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> utenteAutenticato <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>utenteAutenticato<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>utenteAutenticato <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span></span>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BottoneLogout</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span></span>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BottoneLogin</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Proprio come in JavaScript, sta a te scegliere lo stile pi\u00f9 appropriato a seconda di cosa tu ed il tuo team ritenete pi\u00f9 leggibile. Inoltre, ricorda che se le condizioni diventano troppo complesse, potrebbe essere un segnale del fatto che probabilmente \u00e8 bene <a href=\"/react/components-and-props#extracting-components\">estrarre un componente</a>.</p>\n<h3 id=\"preventing-component-from-rendering\"><a class=\"anchor\" href=\"/react/conditional-rendering#preventing-component-from-rendering\"></a>Prevenire la Renderizzazione di un Componente </h3>\n<p>In alcuni rari casi potresti volere che un componente sia nascosto anche se viene renderizzato da un altro componente. Per ottenere questo risultato devi ritornare <code class=\"language-javascript\">null</code> al posto del suo output di renderizzazione.</p>\n<p>Nell\u2019esempio di seguito, il componente <code class=\"language-javascript\">&lt;MessaggioAvviso /&gt;</code> viene renderizzato a seconda del valore della prop chiamata <code class=\"language-javascript\">attenzione</code>. Se il valore della prop \u00e8 <code class=\"language-javascript\">false</code>, il componente non viene renderizzato:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MessaggioAvviso</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>attenzione<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Attenzione!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pagina</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mostraAvviso</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleToggleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleToggleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">mostraAvviso</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>mostraAvviso<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessaggioAvviso</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">attenzione</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>mostraAvviso<span class=\"token punctuation\">}</span></span></span>        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>mostraAvviso <span class=\"token operator\">?</span> <span class=\"token string\">'Nascondi'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Mostra'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pagina</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://it.reactjs.org//redirect-to-codepen/conditional-rendering/4\"><b>Prova su CodePen</b></a></p>\n<p>Ritornando <code class=\"language-javascript\">null</code> dal metodo <code class=\"language-javascript\">render</code> di un componente, non modifica il comportamento dei metodi di lifecycle del componente. Ad esempio <code class=\"language-javascript\">componentDidUpdate</code> viene ancora chiamato.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/conditional-rendering.md\">Edit this page</a></p></div></article>", "path": "/react/conditional-rendering", "nav": ["/react/handling-events", "/react/lists-and-keys"]}, {"key": "8. Liste e Chiavi", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Prima di iniziare, rivediamo come trasformare le liste in JavaScript.</p>\n<p>Nel codice qui sotto, usiamo la funzione <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"language-javascript\">map()</code></a> per prendere un array di <code class=\"language-javascript\">numeri</code> e raddoppiarne i valori. Assegniamo il nuovo array restituito da <code class=\"language-javascript\">map()</code> alla variabile <code class=\"language-javascript\">lista</code> e lo stampiamo a console:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numeri <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> lista <span class=\"token operator\">=</span> numeri<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> numero <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lista<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Questo codice mostra <code class=\"language-javascript\">[2, 4, 6, 8, 10]</code> nella console.</p>\n<p>Trasformare array in liste di <a href=\"/react/rendering-elements\">elementi</a> con React \u00e8 quasi identico.</p>\n<h3 id=\"rendering-multiple-components\"><a class=\"anchor\" href=\"/react/lists-and-keys#rendering-multiple-components\"></a>Renderizzare Liste di Componenti </h3>\n<p>Puoi creare liste di elementi e <a href=\"/react/introducing-jsx#embedding-expressions-in-jsx\">usarle in JSX</a> usando le parentesi graffe <code class=\"language-javascript\">{}</code>.</p>\n<p>Di seguito, eseguiamo un ciclo sull\u2019array <code class=\"language-javascript\">numeri</code> usando la funzione JavaScript <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"language-javascript\">map()</code></a>. Ritorniamo un elemento <code class=\"language-javascript\">&lt;li&gt;</code> per ogni elemento dell\u2019array. Infine, assegniamo l\u2019array risultante a <code class=\"language-javascript\">lista</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numeri <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> lista <span class=\"token operator\">=</span> numeri<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Includiamo l\u2019intero array <code class=\"language-javascript\">lista</code> all\u2019interno di un elemento <code class=\"language-javascript\">&lt;ul&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>lista<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQUCHFpwAtGnIsFWGAE84AegCMxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgAdEAAnUlJaIIA-F213D0iQYxk5RWVVdS09A3s6JyQTERRSYNovACUYTFKwUJEvAHJgyoxaeoBuAPIIQuLSiqqAEQB5AFkvGtI6xubaBRZJ9s7OhzkvcgBXERhgiC8_LwBtXUEvACYTgGYTgBYTgFYAXQ7uClXk2jQ9tc3tiAIxFAACg2W1Ce0iXhcMkiwBB21I_Bi0IAlM9Ov0WsMRgQmiptoDOl5IesoDD3mhEdoSZFBISvPMMD9GAR8LQAKKwLaMABCGgAkixAY0wq1kZ1UZ1EkYgA\">Prova su CodeSandbox</a></strong></p>\n<p>Questo codice visualizza un elenco puntato di numeri da 1 a 5.</p>\n<h3 id=\"basic-list-component\"><a class=\"anchor\" href=\"/react/lists-and-keys#basic-list-component\"></a>Semplice Componente Lista </h3>\n<p>\u00c8 comune voler renderizzare liste all\u2019interno di un <a href=\"/react/components-and-props\">componente</a>.</p>\n<p>Possiamo rifattorizzare l\u2019esempio precedente in un componente che accetta un array di <code class=\"language-javascript\">numeri</code> e produce un elenco di elementi.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListaNumeri</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numeri <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numeri<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> lista <span class=\"token operator\">=</span> numeri<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>lista<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numeri <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListaNumeri</span></span> <span class=\"token attr-name\">numbers</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numeri<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Quando esegui questo codice, appare un <em>warning</em> che una chiave (<code class=\"language-javascript\">key</code>) deve essere fornita per gli elementi della lista. Una \u201cchiave\u201d \u00e8 una prop speciale di tipo stringa che devi includere quando crei liste di elementi. Discuteremo perch\u00e9 \u00e8 importante nella prossima sezione.</p>\n<p>Assegniamo una <code class=\"language-javascript\">key</code> ai nostri elementi della lista all\u2019interno di <code class=\"language-javascript\">numeri.map()</code> e risolviamo il problema della chiave mancante.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListaNumeri</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numeri <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numeri<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> lista <span class=\"token operator\">=</span> numeri<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>lista<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQUCHFpwAtGnIsFWGAE84AegBMxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgAdEAAnUlJaIIA-F213D0iQYxk5RWVVdS09A3s6JyQTERRSYNovACUYTFKwUJEvAHJgyoxaeoBuAPIIQuLSiqqAEQB5AFkvGtI6xubaBRZJ9s7OsABXbloICi8AGVlaNAA5FZEYYIgAChRQlDgASi9gTq8vBzkvcmPTiC8_LyvSG4ED4nM4dcjPV6lZL7H7vT5nAhiFDnYGnUg_SJec5PZ5eFwyLwZPzAVGhAi0UgAZVoZ3IuHOt34kRJ8NI_BiMkiONutzBzyatBWwXBLhWUGZ0LQ7O0YsiYP4S24FDepO-vwA2gBGQReXQ6gDMOoALDqAKwAXTB_RawxGBCaKlO2PBeN2ckO8O-quJqv4Xm0kUEOPmGE-jAI-FoAFFYCdGAAhDQASRY50aYVat06vM6iSMQA\">Prova su CodeSandbox</a></strong></p>\n<h2 id=\"keys\"><a class=\"anchor\" href=\"/react/lists-and-keys#keys\"></a>Chiavi </h2>\n<p>Le chiavi aiutano React a identificare quali elementi sono stati aggiornati, aggiunti o rimossi. Le chiavi dovrebbero essere fornite agli elementi all\u2019interno dell\u2019array per dare agli elementi un\u2019identit\u00e0 stabile:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numeri <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lista <span class=\"token operator\">=</span> numeri<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Il modo migliore per scegliere una chiave \u00e8 utilizzare una stringa che identifichi univocamente un elemento della lista tra i suoi elementi adiacenti (<em>siblings</em>). L\u2019esempio pi\u00f9 comune \u00e8 usare gli identificativi dei tuoi dati come chiavi:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> listaArticoli <span class=\"token operator\">=</span> articoli<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">articolo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>testo<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Quando non disponi di identificativi stabili per gli elementi da renderizzare, puoi assegnare l\u2019indice dell\u2019elemento corrente alla chiave come ultima scelta:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> listaArticoli <span class=\"token operator\">=</span> articoli<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">articolo<span class=\"token punctuation\">,</span> indice</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Fallo solo se gli elementi non hanno identificativi stabili</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>indice<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>testo<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Non consigliamo di utilizzare gli indici per le chiavi se l\u2019ordine degli elementi potrebbe cambiare. Potrebbe avere un impatto negativo sulle prestazioni e causare problemi con lo stato dei componenti. Leggi l\u2019articolo di Robin Pokorny per una <a class=\"external-link\" href=\"https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/\">spiegazione approfondita sugli impatti negativi dell\u2019uso di un indice come chiave</a>. React utilizza gli indici come chiavi se non assegni esplicitamente una chiave per renderizzare gli elementi.</p>\n<p>Qui trovi una <a href=\"/react/reconciliation#recursing-on-children\">spiegazione approfondita sul perch\u00e9 le chiavi sono necessarie</a> se vuoi saperne di pi\u00f9.</p>\n<h3 id=\"extracting-components-with-keys\"><a class=\"anchor\" href=\"/react/lists-and-keys#extracting-components-with-keys\"></a>Estrarre Componenti con Chiavi </h3>\n<p>Le chiavi hanno senso solo nel contesto dell\u2019array circostante.</p>\n<p>Per esempio, se <a href=\"/react/components-and-props#extracting-components\">estrai</a> un componente <code class=\"language-javascript\">Numero</code>, dovresti mantenere la chiave sugli elementi <code class=\"language-javascript\">&lt;Numero /&gt;</code> nell\u2019array piuttosto che su l\u2019elemento <code class=\"language-javascript\">&lt;li&gt;</code> nel <code class=\"language-javascript\">Numero</code> stesso.</p>\n<p><strong>Esempio: Errato Utilizzo della Chiave</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Numero</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> valore <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>valore<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Sbagliato! Non \u00e8 necessario specificare la chiave qui:</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>valore<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>valore<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ListaNumeri</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numeri <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numeri<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> lista <span class=\"token operator\">=</span> numeri<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Sbagliato! La chiave deve essere stata specificata qui:</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Numero</span></span> <span class=\"token attr-name\">valore</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>lista<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Esempio: Corretto Utilizzo della Chiave</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Numero</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Corretto! Non \u00e8 necessario specificare la chiave qui:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>valore<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ListaNumeri</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numeri <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numeri<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> lista <span class=\"token operator\">=</span> numeri<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Corretto! La chiave deve essere specificata all'interno dell'array.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Numero</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">valore</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>lista<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQUCHFpwAtGnIsFWGAE84AegDMxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgAdEAAnUlJaIIA-F213D0iQYxk5RWVVdS09A3s6JyQTERRSYNovACUYTFKwUJEvAHJgyoxaeoBuAPIIQuLSiqqAEQB5AFkvGtI6xubaBRZJ9s7OsABXbloICi8AORWRGFCAChRQlDgASi9gTq8vbW0vAGFiptpaUgBCHa2AC69yGAYeBwNDBTZeOAcHiQDCgmBeKBoLwYSwQNAeeEARxWEEQNy8rxWwXIXhcMkiwBOpDOBA8aCgxRg_Bi5I65H4S3Iq3WmxJABlZLQ0Lt9mDjqcLld8Q45P89gcIF4_F4qTTyPKwWzbjLSskhUq5aKIAQxChDurRaQlZEvId8bd7k8XjA3p8vHykSi0RivGwfcCDvDIYCIDC0Pr6VB6hJ6MSrWwoFHQcE0BoCPbSSKDlaMn5gBbswR3gBlWhg8i4Q7nfheOkMpp5guhGvaSL487nLUEl1EkkuFZQCl6tDM7QDyJsjnkTo6w0Kg0AbQAjIIvAAmVe6VcAFlXAFYALps_otYYjAhNFQHO0k0kCuTCjWKpsQRtPluRQT4-YYeWMAj4LQACisD7IwABCGgAJIsIcjRhK05ydJ2nSJEYQA\">Prova su CodeSandbox</a></strong></p>\n<p>\u00c8 buona regola ricordarsi che gli elementi all\u2019interno della chiamata <code class=\"language-javascript\">map()</code> hanno bisogno di chiavi.</p>\n<h3 id=\"keys-must-only-be-unique-among-siblings\"><a class=\"anchor\" href=\"/react/lists-and-keys#keys-must-only-be-unique-among-siblings\"></a>Le Chiavi Devono Essere Uniche Tra Gli Elementi Adiacenti </h3>\n<p>Chiavi usate all\u2019interno degli array dovrebbero essere uniche tra gli elementi adiacenti. Tuttavia, non hanno bisogno di essere uniche a livello globale. Possiamo usare le stesse chiavi quando creiamo due array diversi:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Blog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> sidebar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>articoli<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">articolo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>titolo<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> contenuto <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>articoli<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">articolo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>titolo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>testo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>sidebar<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>contenuto<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> articoli <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">titolo</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ciao Mondo'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">testo</span><span class=\"token operator\">:</span> <span class=\"token string\">'Benvenuto in imparando React!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">titolo</span><span class=\"token operator\">:</span> <span class=\"token string\">'Installazione'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">testo</span><span class=\"token operator\">:</span> <span class=\"token string\">'Puoi installare React usando npm.'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Blog</span></span> <span class=\"token attr-name\">articoli</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>articoli<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQUCHFpwAtGnIsFWGAE84AegAsxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgAdEAAnUlJaIIA-F213D0iQYxk5RWVVdS09A3s6JyQTERRSYNovACUYTFKwUJEvAHJgyoxaeoBuAPIIQuLSiqqAEQB5AFkvGtI6xubaBRZJ9s7OsABXbloICi8AIShSXAAKFFCUOABKL2BOry8HOS84XxgAIzRgrz8vA-ubrxcVqCRH6_S7HUinAhvDY0GQEMQoA5QiAw0gfSJfYEgv4yLwZPzAJEogi-fiRAklZGkPYEDa0KmkfgxGRA8hYrxnM78TExAEsm5nDqs24Ue4OejkFZ0j5eMEQwlUiBwtAI-V7NEYoU3NyeXGafGq0jElikzFaywAZjJBppEDpe0Z2gtfKxLhQVopRPocgZMTd3NinmdHMFNyatBWwVZ301fzizpBwEebFewS5MbN7208d-wDFDElDP9cZ-As6ac6d1Kqog0oA2j8rjHfIgvABGQSY2n0lv1ADCEDQqJGFHm9Q7Ma9dJ72wYHnzUokPkKbzSqP6LQAhGOfkIG5jm14AEzjkFdvY9gCS5DkaCgUDQAC9NuQYNuJ_Apw0AAorUg1iQ3nebwwOUMxeCscCrl45AoCIBBvjcu7kAAuoK660MMIwEE0KgwME0Zars-xeNW-oegq_BeFmJ5ePMGArCITgEPgtAAKKwIxjDbBoF4sAcjRhK0ZydKWlBGPwQA\">Prova su CodeSandbox</a></strong></p>\n<p>Le chiavi servono a React come suggerimento, ma non vengono passate ai componenti. Se hai bisogno di quel valore nel tuo componente, passalo come prop esplicitamente con un nome diverso:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> contenuto <span class=\"token operator\">=</span> articoli<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">articolo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Articolo</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span></span>    <span class=\"token attr-name\">titolo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>articolo<span class=\"token punctuation\">.</span>titolo<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In questo esempio, il componente <code class=\"language-javascript\">Articolo</code> pu\u00f2 leggere<code class=\"language-javascript\">props.id</code>, ma non <code class=\"language-javascript\">props.key</code>.</p>\n<h3 id=\"embedding-map-in-jsx\"><a class=\"anchor\" href=\"/react/lists-and-keys#embedding-map-in-jsx\"></a>Incorporare map() in JSX </h3>\n<p>Nell\u2019esempio di prima abbiamo dichiarato una variabile separata <code class=\"language-javascript\">lista</code> e l\u2019abbiamo usata nel codice JSX:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListaNumeri</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numeri <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numeri<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> lista <span class=\"token operator\">=</span> numeri<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Numero</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">            <span class=\"token attr-name\">valore</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>lista<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JSX consente di <a href=\"/react/introducing-jsx#embedding-expressions-in-jsx\">incorporare qualsiasi espressione</a> in parentesi graffe in modo da poter scrivere direttamente il risultato di <code class=\"language-javascript\">map()</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListaNumeri</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numeri <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numeri<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>numeri<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Numero</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">                <span class=\"token attr-name\">valore</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numero<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQUCHFpwAtGnIsFWGAE84AegCsxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgAdEAAnUlJaIIA-F213D0iQYxk5RWVVdS09A3s6JyQTERRSYNovACUYTFKwUJEvAHJgyoxaeoBuAPIIQuLSiqqAEQB5AFkvGtI6xubaBRZJ9s7OsABXbloICi8AORWRGFCAChRQlDgASi9gTq8vJtoV4PIvFxlI4BPSM4IPNChimD8GJvDrkfhLcirdabZ4AGVktDQu32wQgx1OFyuNy8DjkXnIewOEC8fi8n2-BJREFBt3uj2eh2xtxcKygkSZtyulKJBDEKEO3NCJMiXkZz05EpcyIOpC8GT8wEFpAItFIAGVaKjyLhDud-F5fv8mgqlfrtOzxRLznqOTFWRbbudQeDyJ1caVBcTSQBtACMgi8ACYAwBmAMAFgDugAuqD-i1hiMCE0VAcxcz4XIkYTUficxATfmzZFBNj5hhCYwCPhaABRWD7RgAIQ0AEkWIdGmFWudOk7OokjEA\">Prova su CodeSandbox</a></strong></p>\n<p>A volte questo codice risulta pi\u00f9 chiaro, ma questa alternativa pu\u00f2 anche essere abusata. Come in JavaScript, spetta a te decidere se vale la pena estrarre una variabile per ragioni di leggibilit\u00e0 del codice. Tieni presente che se vi sono troppi elementi <em>nested</em> (ovvero: annidati) nel corpo <code class=\"language-javascript\">map()</code>, potrebbe essere arrivato il momento di <a href=\"/react/components-and-props#extracting-components\">estrarre un componente</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/lists-and-keys.md\">Edit this page</a></p></div></article>", "path": "/react/lists-and-keys", "nav": ["/react/conditional-rendering", "/react/forms"]}, {"key": "9. Forms", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Gli elementi HTML <code class=\"language-javascript\">form</code> funzionano in un modo differente rispetto agli altri elementi DOM in React, la motivazione sta nel fatto che gli elementi form mantengono naturalmente uno stato interno. Ad esempio, questo form in puro HTML accetta un singolo nome:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    Nome:\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nome<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Questo form si comporta come di consueto, facendo navigare l\u2019utente in una nuova pagina quando viene inviato. In React, se vuoi avere lo stesso comportamento, non c\u2019\u00e8 bisogno di fare alcuna modifica. Ad ogni modo, potrebbe essere pi\u00f9 conveniente avere una funzione JavaScript che gestisce l\u2019invio del form e che ha accesso ai dati inseriti dall\u2019utente. La tecnica standard con cui si pu\u00f2 ottenere ci\u00f2 prende il nome di \u201ccomponenti controllati\u201d.</p>\n<h2 id=\"controlled-components\"><a class=\"anchor\" href=\"/react/forms#controlled-components\"></a>Componenti Controllati </h2>\n<p>In HTML, gli elementi di un form come <code class=\"language-javascript\">&lt;input&gt;</code>, <code class=\"language-javascript\">&lt;textarea&gt;</code> e <code class=\"language-javascript\">&lt;select&gt;</code> mantengono tipicamente il proprio stato e lo aggiornano in base all\u2019input dell\u2019utente. In React, lo stato mutabile viene tipicamente mantenuto nella propriet\u00e0 <code class=\"language-javascript\">state</code> dei componenti e viene poi aggiornato solo mediante <a href=\"/react/react-component#setstate\"><code class=\"language-javascript\">setState()</code></a>.</p>\n<p>Possiamo combinare le due cose rendendo lo <em>state</em> in React la \u201csingola fonte attendibile\u201d (<a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Single_source_of_truth\">SSOT</a>). Possiamo poi fare in modo che il componente React che renderizza il form controlli anche cosa succede all\u2019interno del form in risposta agli input dell\u2019utente. In un form, un elemento di input il cui valore \u00e8 controllato da React in questo modo viene chiamato \u201ccomponente controllato\u201d.</p>\n<p>Ad esempio, se vogliamo far s\u00ec che l\u2019esempio precedente registri il nome inserito, possiamo riscrivere il form sotto forma di componente controllato:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FormNome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E\\' stato inserito un nome: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Nome:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqJwpAE4i4AegCMxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgA6IGaVK13APksKNra-IBpgsvLKqiZ05kiaIiiytPYASjCYKWCeIvYA5DIZGLR5ANyu5BCJyWlFtAAiAPIAsvbZpLkFdQC0LB1lFRhQaHBw9gBiEQByHTD2MNr05Cxj6ZkEAMIdSeTm9sAV9vamcLQyAK7FsgAUKJ4ocACU-4dH9nDnHDK390_l5G97LQ9BA4ARTmh6PZnPtbGgoOcYIh8nl-P9XkdgaD9GhlrANnpcfhoUCQWDCXiYASiYQAEZaa5Yv4Y0nYiksWAAZXOtJEEBSMKZOMp3N5_II9OWjLJj3-R34FVe7PxFPw1xgtnMzwOALeQrgMFonNokJg12AcIRSPmmsYBBNMnwtAIlsR_FlrwV5CVuI5MFFfNo6tttG1LPhMBkQfcAFE8u8TbRSI5yAaZPzk-cAeRZsj3PYANSssEQ-gu-GIj26o4a8wEO61xj1GBgNDnKBBqvyxW6wrLSPXMPV-yFWjnGQA64so6WcJyewUAP85zAIXK_08wP8XzTt6WYa0mBQHfDwFHGYiJG7wGWCQoc4-U9nzEATw4bhA9EW7mvZ9dMBXfVE0If8vWfZ8KGpch8EAslhT9KD8DA8CjgUE8UICA8j3Q8Db3Ie8UloN8APcD4xR8EB7H_D8lwo-w0N3AI5xEHCji7ewvS9Co1mKJpmgIPs2G-V5LEmOQLzmNDBFePoMHOS87SdGNYAU2gACEXwASRYa4Ci8EpHgqKtQnUIA\">Prova su CodeSandbox</a></strong></p>\n<p>Dato che l\u2019attributo <code class=\"language-javascript\">value</code> viene impostato nel nostro elemento form, il valore visualizzato sar\u00e0 sempre <code class=\"language-javascript\">this.state.value</code>, rendendo lo stato in React l\u2019unica fonte di dati attendibile. Dato che la funzione <code class=\"language-javascript\">handleChange</code> viene eseguita ad ogni battitura per aggiornare lo stato di React, il valore visualizzato verr\u00e0 aggiornato man mano che l\u2019utente preme i tasti.</p>\n<p>Con un componente controllato, il valore dell\u2019input viene sempre controllato dallo stato di React. Anche se ci\u00f2 comporta la battitura di pi\u00f9 codice, permette il passaggio del valore anche ad altri elementi della UI, o di resettarlo da altri <em>event handlers</em>.</p>\n<h2 id=\"the-textarea-tag\"><a class=\"anchor\" href=\"/react/forms#the-textarea-tag\"></a>Il Tag Textarea </h2>\n<p>In HTML, l\u2019elemento <code class=\"language-javascript\">&lt;textarea&gt;</code> definisce il testo in esso contenuto con i suoi elementi figli:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span><span class=\"token punctuation\">&gt;</span></span>\n  Nel mezzo del cammin di nostra vita\n  mi ritrovai per una selva oscura\n  ch\u00e9 la diritta via era smarrita.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>In React, invece, <code class=\"language-javascript\">&lt;textarea&gt;</code> utilizza l\u2019attributo <code class=\"language-javascript\">value</code>. Per questo, un form che utilizza una <code class=\"language-javascript\">&lt;textarea&gt;</code> pu\u00f2 essere scritto in modo molto simile a come verrebbe scritto se utilizzasse un semplice input di una sola riga:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FormTema</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'Per favore scrivi un tema riguardo il tuo elemento DOM preferito.'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Un tema \u00e8 stato inviato: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Tema:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nota come <code class=\"language-javascript\">this.state.value</code> viene inizializzato nel costruttore, cos\u00eccche la casella di testo \u00e8 inizializzata con del testo al suo interno.</p>\n<h2 id=\"the-select-tag\"><a class=\"anchor\" href=\"/react/forms#the-select-tag\"></a>Il Tag Select </h2>\n<p>In HTML, <code class=\"language-javascript\">&lt;select&gt;</code> crea una lista a discesa. Per esempio, questo HTML crea una lista a discesa di gusti:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pompelmo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Pompelmo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>limone<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Limone<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">selected</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cocco<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cocco<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mango<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Mango<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Nota come l\u2019opzione Cocco venga preselezionata grazie all\u2019attributo <code class=\"language-javascript\">selected</code>. React, piuttosto che usare l\u2019attributo <code class=\"language-javascript\">selected</code>, usa l\u2019attributo <code class=\"language-javascript\">value</code> dell\u2019elemento radice <code class=\"language-javascript\">select</code>. Ci\u00f2 facilita le cose in un componente controllato in quanto bisogna aggiornare lo stato in un posto solo. Ad esempio:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FormGusti</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'cocco'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Il tuo gusto preferito \u00e8: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Seleziona il tuo gusto preferito:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span></span>            <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pompelmo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Pompelmo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>limone<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Limone</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cocco<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Cocco</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mango<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Mango</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqJwpAE4i4AegBMxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgA6IGaVK13APksKNra-IBpgsvLKqiZ05kiaIiiytPYASjCYKWCeIvYA5DIZGLR5ANyu5BCJyWlFtAAiAPIAsvbZpLkFdQC0LB1lFRhQaHBw9gBiEQDiAK5wtBD2MNr05Cxj6ZkEAMIdSeTm9sAV9vam8zIzxbIAFCieKHAAlEcnp_ZwMxwydw_P5eR3vZaHoIHACPM0PR7M4jrY0FAZjBEPkaBgaHl-AC3qcQWD9Gg1rBtnpCfgYcDQeDSUSYCSyYQAEZaG54_44yn4mksWAAZRmjJEEBSsLZBNp_MFwoIzLWrKpTwBp34FTe3OJNPwNxgtnML2OgPeYrgMFovNoUJgN2A8MRyKWusYBAtMnwtAItqR_EVbxV5DVhJ5MElQto2sdtH1HIRMBkYbyAEkoMCZqR7Lg5rQ0_cYGBY8K0wALlF5ewAak54Mh9A9CKRPsNpx15gIOYj9VzaBmUDDDeVqsNhTWsZuUcb9kKtBmMkBNw5p0s4Tk9goIeFzmAYvVwYFof4vnn70sw0ZMCgB_HQNOvLPMAAXhAKGhHMmp2mM_Ns4U8zIC4hD0ClgmrAxQAVenowBuxoWjWEF-leCEruQ9LkPgUFUuKQYofg-5gYBpAoAsFD2BBbggEkiRniIpB-AACnsVGkAEBFEeQF6IVelgsY-gKke4UBVBQMB-AAMoJBzMYRPHsRxR7ccRfEgGiNB-Ls6JMQo8lsXhclSQpdaQe4YioTRIC-M0ZIaVpMkcQEwEwMUNmcQoJ5nk5gESCgMwpLQACeHBkZ8Uo-CAJEGWRa4hfYCjufYARLiITl9vYfp-hUmzFE0zQEEObA_G8liTHIszzIsMWCG8fQYDMIgtm6ACisC1YwABCvkJiwNwFF4JRPBUDahOoQA\">Prova su CodeSandbox</a></strong></p>\n<p>Ricapitolando, ci\u00f2 fa s\u00ec che <code class=\"language-javascript\">&lt;input type=\"text\"&gt;</code>, <code class=\"language-javascript\">&lt;textarea&gt;</code> e <code class=\"language-javascript\">&lt;select&gt;</code> funzionino in modo molto simile - tutti accettano un attributo <code class=\"language-javascript\">value</code> che puoi utilizzare per implementare un componente controllato.</p>\n<div class=\"blockquote\">\n<strong>Nota bene</strong>\n<p>Puoi passare un array nell\u2019attributo <code class=\"language-javascript\">value</code>, permettendoti di selezionare opzioni multiple in un tag <code class=\"language-javascript\">select</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">multiple</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n</div>\n<h2 id=\"the-file-input-tag\"><a class=\"anchor\" href=\"/react/forms#the-file-input-tag\"></a>Il Tag Input File </h2>\n<p>In HTML, un <code class=\"language-javascript\">&lt;input type=\"file\"&gt;</code> permette all\u2019utente di selezionare uno o pi\u00f9 file da disco e di inviarli al server o manipolarli in JavaScript mediante le <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications\">File API</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Dato che il suo valore \u00e8 in sola-lettura, \u00e8 un componente <strong>non controllato</strong> in React. Riprenderemo il discorso riguardo questo ed altri componenti non controllati <a href=\"/react/uncontrolled-components#the-file-input-tag\">in seguito</a>.</p>\n<h2 id=\"handling-multiple-inputs\"><a class=\"anchor\" href=\"/react/forms#handling-multiple-inputs\"></a>Gestione di Input Multipli </h2>\n<p>Quando devi gestire diversi elementi <code class=\"language-javascript\">input</code>, puoi aggiungere un attributo <code class=\"language-javascript\">name</code> ad ognuno di essi e far s\u00ec che la funzione handler controlli cosa fare in base al valore di <code class=\"language-javascript\">event.target.name</code>.</p>\n<p>Ad esempio:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Prenotazione</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">presente</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">numeroOspiti</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleInputChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleInputChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'checkbox'</span> <span class=\"token operator\">?</span> target<span class=\"token punctuation\">.</span>checked <span class=\"token operator\">:</span> target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Sar\u00e0 presente:</span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n            <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>presente<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>presente<span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">            <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange<span class=\"token punctuation\">}</span></span></span>          <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Numero di ospiti:</span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n            <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>numeroOspiti<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>numeroOspiti<span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">            <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange<span class=\"token punctuation\">}</span></span></span>          <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqJwpAE4i4AegDMxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgA6IGaVK13APksKNra-IBpgsvLKqiZ05kiaIiiytPYASjCYKWCeIvYA5DIZGLR5ANyu5BCJyWlFtAAiAPIAsvbZpLkFdQC0LB1lFRhQaHBw9gAKheTeaABeEBQw9jDa9OQsY-mZBADCHUnk5vbAFfb2pnC0MgCuxbIAFCieKHAAlMenZ_Zw1xwyj883uVyF97LQ9BA4ARLmh6PZnB8QaD7E94OYYIgwTcYIJPqDyNcRDBPI04CgILQIJiAEy4pFnfjAvFgiFQvRodawACS5BQ11oO3Z5Hw8JZkP0HJY3N5_MFHPwBAARlp7syzuDIczXsCGRVPkKpTAeXyBUL8PcYLZzO8TvTzhRLmC0DJ8CkEZbzARaM7XTqvhcUrY0FBrks3Hb1T6YLQCOQ0ET4c4EXlUXB0Xk1V8APxOl3RggYPQwbAwFiZs6Y715mNBkMwP1nAP2OMJhFV12x-P1vV2jVQtO0ADK3vo91tyPsAG0WzAALqY2uhumg_jaz78HtnKZsf425mFWjXGQg1UR-yWcJyXzl8_DRUwKDXs-gwfOgAHKMKabMiBvZ0sEgmn-Xwzm4ICpui7jAeqACeHBgYWxZYIqpDaFBz7IohJYuMAfbQiOhAQWYG4YaCFBysKMDOLhrISpyRoyqa8owCRE6ggoT5seeCh3g-nFsZYioyPYHE3pYvGPsBAByhLEqQ9g2PYpBkhSVLAQBjHQc2XZgQSRIkiplLoVxoK0HBVHuHp94yMZJlnIuVE0eKML0LGskGeSlKsXZSnkBR-DUXhBrSia_kscBokYQEEn8aCASXiIsX2GuSIkSRFRbMUTTNAQ27Eqe_6TAwMzzIsIm-MuCmkBgsmMAQroAKKwESjAAEIwVyLD3AUXglK8FQpaE6hAA\">Prova su CodeSandbox</a></strong></p>\n<p>Nota come abbiamo utilizzato la sintassi ES6 <a class=\"external-link\" href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names\"><em>computed property name</em> (\u201cnome propriet\u00e0 calcolato\u201d)</a> per aggiornare la rispettiva chiave nello stato a seconda dell\u2019attributo <code class=\"language-javascript\">name</code> dell\u2019input:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Il che in ES5 corrisponde al codice:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> statoParziale <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">statoParziale<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>statoParziale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Inoltre, dato che <code class=\"language-javascript\">setState()</code> <a href=\"/react/state-and-lifecycle#state-updates-are-merged\">unisce uno stato parziale nello stato corrente</a> automaticamente, dobbiamo chiamarla con le sole parti modificate.</p>\n<h2 id=\"controlled-input-null-value\"><a class=\"anchor\" href=\"/react/forms#controlled-input-null-value\"></a>Valore Null in Input Controllati </h2>\n<p>Specificare la prop <code class=\"language-javascript\">value</code> in un <a href=\"/react/forms#controlled-components\">componente controllato</a> fa s\u00ec che l\u2019utente possa cambiare l\u2019input solo quando lo desideri. Se hai specificato un <code class=\"language-javascript\">value</code> ma l\u2019input \u00e8 ancora editabile, potresti aver accidentalmente impostato <code class=\"language-javascript\">value</code> come <code class=\"language-javascript\">undefined</code> o <code class=\"language-javascript\">null</code>.</p>\n<p>Il codice seguente lo dimostra. (L\u2019input \u00e8 inizialmente bloccato ma diventa editabile dopo un secondo)</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>mountNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ciao<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>mountNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"alternatives-to-controlled-components\"><a class=\"anchor\" href=\"/react/forms#alternatives-to-controlled-components\"></a>Alternative ai Componenti Controllati </h2>\n<p>Utilizzare componenti controllati pu\u00f2 sembrare laborioso a volte, soprattutto perch\u00e9 \u00e8 necessario scrivere un <em>event handler</em> per ogni modo in cui i tuoi dati possono cambiare e perch\u00e9 si deve collegare lo stato di tutti gli input a quello di un componente React. Il tutto diventa particolarmente noioso quando bisogna convertire progetti preesistenti in React, o integrare un\u2019applicazione React con una libreria non-React. In queste situazioni, si potrebbe ricorrere ai <a href=\"/react/uncontrolled-components\">componenti non controllati</a>, una tecnica alternativa per implementare forms ed i relativi campi di input.</p>\n<h2 id=\"fully-fledged-solutions\"><a class=\"anchor\" href=\"/react/forms#fully-fledged-solutions\"></a>Soluzioni Chiavi In Mano </h2>\n<p>Se stai cercando una soluzione che include la validazione dei dati, il tener traccia dei campi visitati e la sottomissione del form, <a class=\"external-link\" href=\"https://jaredpalmer.com/formik\">Formik</a> \u00e8 una delle scelte popolari. Comunque, si basa sugli stessi principi dei componenti controllati e della gestione dello stato \u2014 ecco perch\u00e9 \u00e8 bene essere familiari con questi concetti.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/forms.md\">Edit this page</a></p></div></article>", "path": "/react/forms", "nav": ["/react/lists-and-keys", "/react/lifting-state-up"]}, {"key": "10. Spostare lo stato", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Spesso, l\u2019aggiornamento di diversi componenti dipende dagli stessi dati. Raccomandiamo di spostare lo stato condiviso in alto nella gerarchia fino al loro antenato pi\u00f9 vicino. Vediamo come questo avviene in pratica.</p>\n<p>In questa sezione creeremo un calcolatore della temperatura che calcola se l\u2019acqua bolle ad una data temperatura.</p>\n<p>Iniziamo con un componente chiamato <code class=\"language-javascript\">VerdettoEbollizione</code>. Questo, accetta la temperatura tramite la prop <code class=\"language-javascript\">celsius</code> e ritorna che sia sufficiente a far bollire l\u2019acqua o no:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">VerdettoEbollizione</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>celsius <span class=\"token operator\">&gt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">L'acqua bollirebbe.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">L'acqua non bollirebbe.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Successivamente, creiamo un componente chiamato <code class=\"language-javascript\">Calcolatore</code>. Esso renderizza un <code class=\"language-javascript\">&lt;input&gt;</code> che permette di inserire la temperatura e mantiene il suo valore in <code class=\"language-javascript\">this.state.temperatura</code>.</p>\n<p>Inoltre, restituisce <code class=\"language-javascript\">VerdettoEbollizione</code> per il valore di input corrente.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calcolatore</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperatura</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperatura</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperatura <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperatura<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Inserisci la temperatura in gradi Celsius:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperatura<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">VerdettoEbollizione</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">celsius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>temperatura<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQUCGFoTcAWji009RQFcUAegCMxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgAdEAAnUlJaIIA-F213D0iQYxk5BWVVdS09A3s6JyQTERRSYNovACUYTFKwUJEvAHJgyoxaeoBuAPIIQuLSiqqAEQB5AFkvGtI6xubaRRZJ9s7OsA1ueQovADUYYLZaWlIAUQAjUigZAC8IChgAChRQlDgASi9gTq8fMC97x7gCDAwKBwCAaOBeSJ-Ly6AAMMNe73In0-TVoGmCSJcKEiABl6pgAI4aNBeU7nCBNY7HQgxbEdJFefgfLyo9GY7F4wnErzkDZkmSU6kEWmRelM8idDBQNBwcEAYTQUBo0oOTS8MDM9HILHB_RaBDlkyK5Ccb2ZDhUwQ0LWKv1ITwRzM-cC0OztDvpyK8tEsEH-ljQ2tgcoD5HwXihPr9VkDLGDofwBGOpluUZenuRaYIKjUMAjb3ohR2anRaEQDXq_Az4uZobjMBDgfwtxgjoZnyzcBgtAAyuk7sBCxxgiWR-XCKpgvhaAQPIqNDB-M9q0sGU1tW6216LaUh8W0SP853-wQ9yOD2gMyju2yfk7kS5IECdd3IvevS5YPhtW_217kQAkuQXbBH6PBeNK3owEW56lj4SK4CO7heHKQIgmCiDvg-2hfpwv7_g-EgoBoER_gRc5QAufiDtBw6jmg4oEV6FCNmGMDUVmdbxk2i5YZ82i_nxXguNsuzdgcJxnJc1wmkJnyAsCoJwNR6DBF2ABiUCkGoqa0fupbPIxTECVhMRPlAL60PhyLLsy4o1uQeq0MMIwEOubDBLczIuAqSpnGoxR5gJgjMvMGAaCITgENOhywJFjAAEIAJ4ASwtyNGErTPJ0tmUEY_BAA\">Prova su CodeSandbox</a></strong></p>\n<h2 id=\"adding-a-second-input\"><a class=\"anchor\" href=\"/react/lifting-state-up#adding-a-second-input\"></a>Aggiunta di un secondo input </h2>\n<p>Il nostro nuovo requisito \u00e8 che, oltre a un input in gradi Celsius, forniamo un input in gradi Fahrenheit e l\u2019aggiornamento dei due deve essere sincronizzato.</p>\n<p>Possiamo iniziare estraendo un componente <code class=\"language-javascript\">InputTemperatura</code> da <code class=\"language-javascript\">Calcolatore</code>. Aggiungiamo una nuova prop <code class=\"language-javascript\">scala</code> ad esso che pu\u00f2 essere <code class=\"language-javascript\">\"c\"</code> o <code class=\"language-javascript\">\"f\"</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token string\">'Celsius'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">f</span><span class=\"token operator\">:</span> <span class=\"token string\">'Fahrenheit'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">InputTemperatura</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperatura</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperatura</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> temperatura <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperatura<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> scala <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>scala<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Inserisci la temperatura in gradi </span><span class=\"token punctuation\">{</span>scale<span class=\"token punctuation\">[</span>scala<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperatura<span class=\"token punctuation\">}</span></span>\n               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ora possiamo cambiare il <code class=\"language-javascript\">Calcolatore</code> per renderizzare due input di temperatura separati:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calcolatore</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InputTemperatura</span></span> <span class=\"token attr-name\">scala</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InputTemperatura</span></span> <span class=\"token attr-name\">scala</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>f<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQUCGFoTcAWji009RQFcUAegBMxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgAdEAAnUlJaIIA-F213D0iQYxk5BWVVdS09A3s6JyQTERRSYNovACUYTFKwUJEvAHJgyoxaeoBuAPIIQuLSiqqAEQB5AFkvGtI6xubaRRZJ9s7OhxUvOAw0WC8_L2BOry8MRAaAYRgoOAgNOHrBffHj-oAxNEsm8ksYCFa78n4O8jLKBoOBwLwASXIKA0tAAKjBCjBgmoNMivDAzPRyCwwf0WgQTpMiuQnLt7itaMENC1igAKFChFBwACUZPIBwOcC0SPpjJZAI5XlolggcCsaGxsBOlgl-G2QpFYplkpg0tlhAARqZacLRcyBRzdWKVGoYPLgPREcjaKi0I96v97vwluyvMqWFLlfhaTBWXtXQcjQQ4DBaABldIwWkWhEca2246EVTBfC0AgeTYaGD8fVOl0Hd5sYK0v33A4UoWxpEotE7IMm-gES1xmtoA3liirdabNDyoMM0hM4MbYHtrxNG3Bdm0ssclyQc440ORWeClywfDYlcBwUcyEh4KinheYGVq2tnzs3DI9y7buwADa97QAF1-IhV3PtBvONvd3OJGhCId3_DMoCzPwY3PSc0GdEDdwoNVyHwSCg3dT11Tg_8Dm0P9dxiBcoCXWg8IOXNXTguCgRBMETk2GhgVoYozQxLEcXKGYCSJChSX9AtOB5UsdwnVFp0_NxPFI_DISA-FoNtNYRzQQIQAwIIvFwz8DhcGSYTklsYMUnsVLAdTNPgmI4ik8iDkol08VoYYRgIQseXuFw6KgBi1GYjTIl-A55gwDQRCcAhUwAUVgULGAAIQAT3BFhaUaMJWmZTpyMSIwgA\">Prova su CodeSandbox</a></strong></p>\n<p>Ora abbiamo due input, ma quando si inserisce la temperatura in uno di essi, l\u2019altro non si aggiorna. Questo non soddisfa il nostro requisito: vogliamo mantenerli sincronizzati.</p>\n<p>Inoltre, non possiamo mostrare <code class=\"language-javascript\">VerdettoEbollizione</code> da <code class=\"language-javascript\">Calcolatore</code>. Il <code class=\"language-javascript\">Calcolatore</code> non conosce la temperatura corrente perch\u00e9 \u00e8 nascosta all\u2019interno di <code class=\"language-javascript\">InputTemperatura</code>.</p>\n<h2 id=\"writing-conversion-functions\"><a class=\"anchor\" href=\"/react/lifting-state-up#writing-conversion-functions\"></a>Scrittura Delle Funzioni Di Conversione </h2>\n<p>Innanzitutto, scriviamo due funzioni per convertire da Celsius a Fahrenheit e viceversa:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toCelsius</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fahrenheit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">toFahrenheit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">celsius</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>celsius <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Queste due funzioni convertono i numeri. Scriviamo un\u2019altra funzione che accetta come argomenti una stringa <code class=\"language-javascript\">temperatura</code> e una funzione <code class=\"language-javascript\">converti</code>, e restituisce una stringa. La useremo per calcolare il valore di un input basato su un altro.</p>\n<p>La funzione restituisce una stringa vuota per una <code class=\"language-javascript\">temperatura</code> non valida e arrotonda l\u2019output alla terza cifra decimale:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">conversione</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temperatura<span class=\"token punctuation\">,</span> converti</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>temperatura<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token function\">converti</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rounded <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> rounded<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ad esempio, <code class=\"language-javascript\">conversione('abc', toCelsius)</code> restituisce una stringa vuota, e <code class=\"language-javascript\">conversione('10 .22', toFahrenheit)</code> restituisce <code class=\"language-javascript\">'50.396'</code>.</p>\n<h2 id=\"lifting-state-up\"><a class=\"anchor\" href=\"/react/lifting-state-up#lifting-state-up\"></a>Spostare lo stato \u201cin alto\u201d </h2>\n<p>Attualmente, entrambi i componenti <code class=\"language-javascript\">InputTemperatura</code> mantengono in modo indipendente i loro valori nello stato locale:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputTemperatura</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperatura</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperatura</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperatura <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperatura<span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// ...  </span></code></pre></div>\n<p>Tuttavia, vogliamo che i valori di questi due input siano sincronizzati tra loro. Quando aggiorniamo l\u2019input Celsius, l\u2019input Fahrenheit dovrebbe aggiornare la temperatura convertita e viceversa.</p>\n<p>In React, la condivisione dello stato si ottiene spostandolo verso il pi\u00f9 vicino antenato comune dei componenti che ne hanno bisogno. Questo processo viene detto \u201cspostare lo stato verso l\u2019alto\u201d (<em>lifting state up</em>). Rimuoviamo lo stato locale da <code class=\"language-javascript\">InputTemperatura</code> e invece lo spostiamo nel <code class=\"language-javascript\">Calcolatore</code>.</p>\n<p>Se il <code class=\"language-javascript\">Calcolatore</code> possiede lo stato condiviso, diventa la \u201cunica fonte di verit\u00e0\u201d per la temperatura corrente in entrambi gli input. Pu\u00f2 istruire entrambi ad avere valori coerenti l\u2019uno con l\u2019altro. Poich\u00e9 le props di entrambi i componenti <code class=\"language-javascript\">InputTemperatura</code> provengono dallo stesso componente <code class=\"language-javascript\">Calcolatore</code> padre, i due input saranno sempre sincronizzati.</p>\n<p>Vediamo come funziona passo dopo passo.</p>\n<p>Per prima cosa sostituiremo <code class=\"language-javascript\">this.state.temperatura</code> con <code class=\"language-javascript\">this.props.temperatura</code> nel componente <code class=\"language-javascript\">InputTemperatura</code>. Per ora, facciamo finta che <code class=\"language-javascript\">this.props.temperatura</code> esista gi\u00e0, anche se dovremo successivamente passarla dal <code class=\"language-javascript\">Calcolatore</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Prima: const temperatura = this.state.temperatura;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperatura <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>temperatura<span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Sappiamo gi\u00e0 che <a href=\"/react/components-and-props#props-are-read-only\">le props sono in sola lettura</a>. Quando <code class=\"language-javascript\">temperatura</code> era nello stato locale, <code class=\"language-javascript\">InputTemperatura</code> poteva semplicemente chiamare <code class=\"language-javascript\">this.setState()</code> per cambiarla. Tuttavia, ora che la <code class=\"language-javascript\">temperatura</code> viene come prop dal componente genitore, <code class=\"language-javascript\">InputTemperatura</code> non ha alcun controllo su di esso.</p>\n<p>In React, questo \u00e8 solitamente risolto rendendo un componente \u201ccontrollato\u201d. Proprio come nel DOM, <code class=\"language-javascript\">&lt;input&gt;</code> accetta sia una prop <code class=\"language-javascript\">value</code> che una prop <code class=\"language-javascript\">onChange</code>, quindi il componente personalizzato <code class=\"language-javascript\">InputTemperatura</code> accetta sia la prop <code class=\"language-javascript\">temperatura</code> che <code class=\"language-javascript\">onChangeTemperatura</code> dal suo <code class=\"language-javascript\">Calcolatore</code> padre.</p>\n<p>Ora, quando <code class=\"language-javascript\">InputTemperatura</code> vuole aggiornare la sua temperatura, chiama <code class=\"language-javascript\">this.props.onChangeTemperatura</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Prima: this.setState({temperatura: e.target.value});</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChangeTemperatura</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// ...</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Non vi \u00e8 alcun significato speciale nei nomi delle props <code class=\"language-javascript\">temperatura</code> o <code class=\"language-javascript\">onChangeTemperatura</code> nei componenti personalizzati. Avremmo potuto chiamarle in qualsiasi altro modo, come chiamarle <code class=\"language-javascript\">value</code> e <code class=\"language-javascript\">onChange</code>, come da convenzione comune.</p>\n</div>\n<p>La prop <code class=\"language-javascript\">onChangeTemperatura</code> viene fornita insieme alla prop <code class=\"language-javascript\">temperatura</code> dal componente padre <code class=\"language-javascript\">Calcolatore</code>. Gestir\u00e0 i cambiamenti nel proprio stato locale, ri-renderizzando poi gli input con i nuovi valori. A breve, vedremo la nuova implementazione di <code class=\"language-javascript\">Calcolatore</code>.</p>\n<p>Prima di immergerti nei cambiamenti del <code class=\"language-javascript\">Calcolatore</code>, ricapitoliamo le modifiche al componente <code class=\"language-javascript\">InputTemperatura</code>. Abbiamo rimosso lo stato locale e invece di leggere <code class=\"language-javascript\">this.state.temperatura</code>, ora leggiamo <code class=\"language-javascript\">this.props.temperatura</code>. Invece di chiamare <code class=\"language-javascript\">this.setState()</code> quando vogliamo apportare una modifica, ora chiamiamo <code class=\"language-javascript\">this.props.onChangeTemperatura()</code>, che sar\u00e0 fornita dal <code class=\"language-javascript\">Calcolatore</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputTemperatura</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChangeTemperatura</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperatura <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>temperatura<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">const</span> scala <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>scala<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Inserisci la temperatura in </span><span class=\"token punctuation\">{</span>scale<span class=\"token punctuation\">[</span>scala<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperatura<span class=\"token punctuation\">}</span></span>\n               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ora passiamo al componente <code class=\"language-javascript\">Calcolatore</code>.</p>\n<p>Memorizzeremo <code class=\"language-javascript\">temperatura</code> e <code class=\"language-javascript\">scale</code> dall\u2019input corrente nel suo stato locale. Questo \u00e8 lo stato che abbiamo \u201cspostato su\u201d dagli input, e servir\u00e0 da \u201cunica fonte di verit\u00e0\u201d per entrambi. \u00c8 la rappresentazione minima di tutti i dati di cui dobbiamo essere a conoscenza per renderizzare entrambi gli input.</p>\n<p>Ad esempio, se inseriamo 37 nell\u2019input Celsius, lo stato del componente <code class=\"language-javascript\">Calcolatore</code> \u00e8:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">temperatura</span><span class=\"token operator\">:</span> <span class=\"token string\">'37'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">scala</span><span class=\"token operator\">:</span> <span class=\"token string\">'c'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se in seguito modifichiamo il campo in Fahrenheit come 212, lo stato del <code class=\"language-javascript\">Calcolatore</code> \u00e8:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">temperatura</span><span class=\"token operator\">:</span> <span class=\"token string\">'212'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">scala</span><span class=\"token operator\">:</span> <span class=\"token string\">'f'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Avremmo potuto memorizzare il valore di entrambi gli input, ma non \u00e8 necessario. \u00c8 sufficiente memorizzare il valore dell\u2019input modificato pi\u00f9 recentemente e la scala che rappresenta. Possiamo quindi dedurre il valore dell\u2019altro input basato sulle sole <code class=\"language-javascript\">temperatura</code> e <code class=\"language-javascript\">scala</code> correnti.</p>\n<p>Gli input rimangono sincronizzati perch\u00e9 i loro valori sono calcolati dallo stesso stato:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calcolatore</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChangeCelsius <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChangeCelsius</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChangeFahrenheit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChangeFahrenheit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperatura</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">scala</span><span class=\"token operator\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChangeCelsius</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temperatura</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">scala</span><span class=\"token operator\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> temperatura<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChangeFahrenheit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temperatura</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">scala</span><span class=\"token operator\">:</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> temperatura<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> scala <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>scala<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperatura <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperatura<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> celsius <span class=\"token operator\">=</span> scala <span class=\"token operator\">===</span> <span class=\"token string\">'f'</span> <span class=\"token operator\">?</span> <span class=\"token function\">conversione</span><span class=\"token punctuation\">(</span>temperatura<span class=\"token punctuation\">,</span> toCelsius<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> temperatura<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> fahrenheit <span class=\"token operator\">=</span> scala <span class=\"token operator\">===</span> <span class=\"token string\">'c'</span> <span class=\"token operator\">?</span> <span class=\"token function\">conversione</span><span class=\"token punctuation\">(</span>temperatura<span class=\"token punctuation\">,</span> toFahrenheit<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> temperatura<span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InputTemperatura</span></span>\n          <span class=\"token attr-name\">scala</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">temperatura</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>celsius<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onChangeTemperatura</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChangeCelsius<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InputTemperatura</span></span>\n          <span class=\"token attr-name\">scala</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>f<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">temperatura</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fahrenheit<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onChangeTemperatura</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChangeFahrenheit<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">VerdettoEbollizione</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">celsius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQUCGFoTcAWji009RQFcUAegDMxBPyEgJbAB4EAFrRFRmNRgyZSAPCwgA3AAQQWAXgAdEAAnUlJaIIA-F213D0iQYxk5BWVVdS09A3s6JyQTERRSYNovACUYTFKwUJEvAHJgyoxaeoBuAPIIQuLSiqqAEQB5AFkvGtI6xubaRRZJ9s7OhxUvOAw0WC8_L2BOry8MRAaAYRgoOAgNOHrBffHj-oAxNEsm8ksYCFa78n4O8idMAabjyCheWikM4XK5wAAUYFe70-3wAlLt7k1aBpguQvHCEUiGCjSoovLoAEzogBUXgArOjtF4AJwA_hLcjA0EQcGQl5vYlfWhwjDnS7XdF7PFeLE4vEisWwry05mM-leADU5IpbI5XJaPLxDg8MGClwoMDh9EKprUOLQgkOFBNJQgkvuK1KEhQGlKO3QZpgTygpDUVpgNuCdqjqIBB1k-IAchoRAAjU0ECBwRNoRNw72-1Hu6UHWW4hqLaXs6WerykX0-v1O8gu-T58iN2MeiirUIgtgsbZeEZqSwEPvkFhw-u0RvKrwARgADCu1cuV3GZTBseWJwOCJCAMq0YIKOFdv56kEG8EANVNbFokIAoqnSFAZAAvQ2WlChFBwMW8ZgPif6kABBCijC1xeJEOzrkBBxbjueIuCgkQADL1JgACOGhoF4b4fhATSpumBAxOhm7VqW25yl4aGYdhGB4QR5DgkRMikeRlGRLqgLcFAaBwHAXgAJIdr6AAqEYcFGO4ETAZj0JOon9C0BAnJMRTkE4GI1j2J4aC0xRwmBAGIQccBaKaZn_oBm4HLQlhZlYaCTrAJyWO5-BDs5rneR5MBeT5hCpqYVouQ59zVvcgUsJ5gX4HCMCWRCUUEOZcAEBQIXkPgMmRtGaApQeaDBPgtAEB4mwaKl1EcrRk62WltbWnJxV-RlWUHrJtoKY5zarOsmwETs_nZT1I1CYNZbyvcSEMZA5wsHA26RAti0MbA-CThtJZbQcElrae6wQF4QkQn18n2j4eLANNMAANrTWgAC6_CIJti0xDtnD7YdBwuAWEQHYdNVQHVfjAO1_X2jRgMHLlSUwNDE1uUFeX4Ajh3aADW0xMtUCretm0Xgc1axYJwmiScmw0EJkJNF4Skqat5QzJp2kWow-kHJ6wTGUzdngYBfNIdZckixZg3o_FiWhdC4qieNGXy8FKNK7CBDhZOcLfelWZk7LavuQlGuhfyyJCl1AVmwr-VBkSHxCjrEUGxNxubejKhqDAQ4w9dxWPLcawbEJjwYPU_wxY1Xjq1jwWKtc4ZFQpaU-9ux5-3CD3h2gkeh7DN1Rvw5NeFTBwJyjVuCt8qcden4tORla20Nn9C569jxgEXQcKWXDUCU1bDBOezdDaUr229lvv0AQr2DW1_e3arrlz4QxfFUvhmHMnKsG9PfjHw0vcGwcAD8zYuuaukN3DUaOpCWsSufXjHFvA2bbWiICi73zbEPvnbYJ96hRzflfY0ppb6Wk_vaJ-pBa7_1oKiN-H8V5RgBJtOa-IDZuE8PjQ6LgJKNkKo3e0b8rL50CCADAQRKFXTTvaaGUFlY40BsjUKZCH5oDRqbTGmt97sMWnjN-xDJK0G4SXNADDXo0LAPQsGW04FRmhr_a23xhFbU4Y7KRxU-F2wEZbZ2JItEHFEUooG95giPhfJxCA34LQMNYbCaGAY1rBlDMKFxEozFeAsUQ2IBCvZVk6FTdStBhgjHHJwWy9wXB0ygAzNQxR_Z41-AceYGAUxOAIJVZ8sARBOAAEIAE8xJTkaGEVoqDyAXkSEYIAA\">Prova su CodeSandbox</a></strong></p>\n<p>Ora <code class=\"language-javascript\">this.state.temperatura</code> e <code class=\"language-javascript\">this.state.scala</code> in <code class=\"language-javascript\">Calcolatore</code> si aggiornano indipendentemente dall\u2019input che si modifica. Uno degli input ottiene il valore cos\u00ec com\u2019\u00e8, quindi qualsiasi input dell\u2019utente viene mantenuto e l\u2019altro valore di input viene sempre ricalcolato in base ad esso.</p>\n<p>Ricapitoliamo cosa succede quando modifichi un input:</p>\n<ul>\n<li>React chiama la funzione specificata come <code class=\"language-javascript\">onChange</code> sul DOM <code class=\"language-javascript\">&lt;input&gt;</code>. Nel nostro caso, questo \u00e8 il metodo <code class=\"language-javascript\">handleChange</code> nel componente <code class=\"language-javascript\">InputTemperatura</code>.</li>\n<li>Il metodo <code class=\"language-javascript\">handleChange</code> nel componente <code class=\"language-javascript\">InputTemperatura</code> chiama <code class=\"language-javascript\">this.props.onChangeTemperatura()</code> con il nuovo valore desiderato. Le sue props, tra cui <code class=\"language-javascript\">onChangeTemperatura</code>, sono fornite dal suo componente principale, il <code class=\"language-javascript\">Calcolatore</code>.</li>\n<li>Quando il <code class=\"language-javascript\">Calcolatore</code> renderizza, esso determina che <code class=\"language-javascript\">onChangeTemperatura</code> del <code class=\"language-javascript\">InputTemperatura</code> in Celsius sia il metodo <code class=\"language-javascript\">handleChangeCelsius</code> di <code class=\"language-javascript\">Calcolatore</code>, e <code class=\"language-javascript\">onChangeTemperatura</code> del <code class=\"language-javascript\">InputTemperatura</code> in Fahrenheit sia il metodo <code class=\"language-javascript\">handleChangeFahrenheit</code> di <code class=\"language-javascript\">Calcolatore</code>. Quindi uno di questi due metodi <code class=\"language-javascript\">Calcolatore</code> viene chiamato a seconda di quale input viene modificato.</li>\n<li>All\u2019interno di questi metodi, il componente <code class=\"language-javascript\">Calcolatore</code> chiede a React di eseguire nuovamente la renderizzazione chiamando<code class=\"language-javascript\">this.setState()</code> con il nuovo valore inserito e la scala attuale dell\u2019input appena modificato.</li>\n<li>React chiama il metodo <code class=\"language-javascript\">render</code> del componente <code class=\"language-javascript\">Calcolatore</code> per sapere come l\u2019interfaccia utente dovrebbe apparire. I valori di entrambi gli input vengono ricalcolati in base alla temperatura corrente e alla scala attiva. La conversione della temperatura viene eseguita qui.</li>\n<li>React chiama i metodi <code class=\"language-javascript\">render</code> dei singoli componenti <code class=\"language-javascript\">InputTemperatura</code> con le nuove props passate dal <code class=\"language-javascript\">Calcolatore</code>. Vengono a conoscenza di come dovrebbe essere la loro UI.</li>\n<li>React chiama il metodo <code class=\"language-javascript\">render</code> del componente <code class=\"language-javascript\">VerdettoEbollizione</code>, passando la temperatura in Celsius come sue props.</li>\n<li>React DOM aggiorna il DOM con il verdetto di ebollizione e abbina i valori di input desiderati. L\u2019input appena modificato riceve il suo valore corrente e l\u2019altro input viene aggiornato con la temperatura dopo la conversione.</li>\n</ul>\n<p>Ogni aggiornamento passa attraverso gli stessi passaggi in modo che gli input rimangano sincronizzati.</p>\n<h2 id=\"lessons-learned\"><a class=\"anchor\" href=\"/react/lifting-state-up#lessons-learned\"></a>Lezioni Apprese </h2>\n<p>Tutti i dati che cambiano in un\u2019applicazione React dovrebbero avere una \u201cunica fonte di verit\u00e0\u201d. Di solito, lo stato viene prima aggiunto al componente che ne ha bisogno per il rendering. Quindi, se anche altri componenti ne hanno bisogno, puoi spostarlo fino al loro antenato pi\u00f9 vicino. Invece di provare a sincronizzare lo stato tra diversi componenti, dovresti affidarti sul <a href=\"/react/state-and-lifecycle#the-data-flows-down\">flusso di dati top-down</a>.</p>\n<p>Spostare lo stato in alto nella gerarchia implica la scrittura di un codice pi\u00f9 \u201cstandard\u201d rispetto all\u2019approccio <em>two-way binding</em> (a doppio senso), ma come vantaggio, trovare e isolare i bug risulta meno laborioso. Poich\u00e9 ogni stato \u201cvive\u201d in alcuni componenti e solo quel componente pu\u00f2 cambiarlo, la fonte di bugs viene notevolmente ridotta. Inoltre, \u00e8 possibile implementare qualsiasi logica personalizzata per validare o trasformare l\u2019input dell\u2019utente.</p>\n<p>Se qualcosa pu\u00f2 essere derivato da props o stato, probabilmente non dovrebbe essere nello stato. Ad esempio, invece di memorizzare sia <code class=\"language-javascript\">valoreCelsius</code> che <code class=\"language-javascript\">valoreFahrenheit</code>, memorizziamo solo l\u2019ultima <code class=\"language-javascript\">temperatura</code> modificata e la sua <code class=\"language-javascript\">scala</code>. Il valore dell\u2019altro input pu\u00f2 sempre essere calcolato da loro nel metodo <code class=\"language-javascript\">render()</code>. Questo ci consente di cancellare o applicare l\u2019arrotondamento all\u2019altro campo senza perdere precisione nell\u2019input dell\u2019utente.</p>\n<p>Quando vedi qualcosa di sbagliato nell\u2019interfaccia utente, puoi utilizzare <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-devtools\">React Developer Tools</a> per ispezionare le props e spostarti nell\u2019albero finch\u00e9 non si trova il componente responsabile dell\u2019aggiornamento dello stato. Questo ti permette di tracciare i bug alla loro fonte:</p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//ef94afc3447d75cdc245c77efb0d63be/react-devtools-state.gif\">Image link</a></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/lifting-state-up.md\">Edit this page</a></p></div></article>", "path": "/react/lifting-state-up", "nav": ["/react/forms", "/react/composition-vs-inheritance"]}, {"key": "11. Composizione vs Ereditarit\u00e0", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React ha un potente modello di composizione, raccomandiamo che lo si usi in alternativa all\u2019ereditariet\u00e0 per riutilizzare codice tra componenti.</p>\n<p>In questa sezione, considereremo alcuni problemi nei quali gli sviluppatori che sono ancora agli inizi in React utilizzano l\u2019ereditariet\u00e0, mostreremo come si possa invece risolverli con la composizione.</p>\n<h2 id=\"containment\"><a class=\"anchor\" href=\"/react/composition-vs-inheritance#containment\"></a>Contenimento </h2>\n<p>Esistono componenti che si comportano da contenitori per altri componenti, non possono quindi sapere a priori quali componenti avranno come figli. Si pensi ad esempio a <code class=\"language-javascript\">Sidebar</code> (barra laterale) oppure <code class=\"language-javascript\">Dialog</code> (finestra di dialogo) che rappresentano \u201cscatole\u201d generiche.</p>\n<p>Raccomandiamo che questi componenti facciano uso della prop speciale <code class=\"language-javascript\">children</code> per passare elementi figli direttamente nell\u2019output:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">BordoFigo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'BordoFigo BordoFigo-'</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>colore<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ci\u00f2 permette di passare componenti figli arbitrariamente annidandoli nel codice JSX:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FinestraBenvenuto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BordoFigo</span></span> <span class=\"token attr-name\">colore</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Finestra-titolo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Benvenuto/a!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Finestra-messaggio<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        Ti ringraziamo per questa tua visita nella nostra</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        nave spaziale!</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">BordoFigo</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQNESlJwItCBQC0ANzgqJACxgAnRWm4wA9AEZiCfkJAS2ADwLbaIqMxqMGTKQB4WENQACCBYAXgAdED1SUlpIgD4fE381eJAbGTkFJVUNLXJdA1ojDFMLEnc6LyRbWVI9WkCAJRhMRrBokUCAcj1WjFpugG5w8gg6hub-2gARAHkAWUCO0i7e6ZUWVeHR8blJ7oJzAgw4OB3yUbAAV24c8kCAIXqtgDEIXFIAChRolDgAJSBYCjQKBPq0a56B5fUFgwJ-AKBDBQNBnAByaBEMFCwG6zz0bw-pCeL1I70-Km6gQA1IFfqR_idSFB6jB-PE4fDgQymRhtNAWH1yPwuQjkgFOQ9AgCRiLRldbgNlA93uR4LQ9GhHgw1AxrrRvkCQdKIVCYWKfASiZ9kSy2REQAAjKDXGAJMVgnzaMzI1EYrE4yJqjValRKQ2shI68h68gG0gmNAAQiSPql3K9KD9aLgmOxjpDcE1aBU2LOeFwyg90szgQAKhBwRJcFqAF4QLEkjh6QIARzdxbQgUhw7UEGyw_VUFRgXI8hLnvh5DQesCcHQHbQsGTS6SKAz8KS1vJxMPstGosu5BabXmCwIwrYelh0p8RZLMbjCcCJnigjhLYMGubFGAIfBaAAUVgUDaEeABPABJFgvl6GJBgBUYL0oDJViyRQVXUTQdH0QxjGOU4EGQaQqkYGoCBPCkSRNbl0BYfxyFwRBAjMAAGFB7B4_j7DlbknRefRuL4gT1xZEI5SvUYGLJJiVBdN1gTFcTCX0FQaFZPRuPUmAFIVcgCA_MMI3tTTa0CMQ9CrchuN40T4TAOgVDALFoHg7i4CMTQ4FIsBTOvCyJFDUtywC3Aq2YsUPMYFQFDbGBuNRRz9AU9JrCAA\">Prova su CodeSandbox</a></strong></p>\n<p>Il contenuto del tag JSX <code class=\"language-javascript\">&lt;BordoFigo&gt;</code> viene passato nel componente <code class=\"language-javascript\">BordoFigo</code> come prop <code class=\"language-javascript\">children</code>. Dato che <code class=\"language-javascript\">BordoFigo</code> renderizza <code class=\"language-javascript\">{props.children}</code> all\u2019interno di un <code class=\"language-javascript\">&lt;div&gt;</code>, gli elementi passati appaiono nell\u2019output finale.</p>\n<p>Anche se si tratta di un approccio meno comune, a volte potresti ritrovarti ad aver bisogno di pi\u00f9 di un \u201cbuco\u201d all\u2019interno di un componente. In questi casi potresti creare una tua convenzione invece di ricorrere all\u2019uso di <code class=\"language-javascript\">children</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Pannello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Pannello<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Pannello-sinistra<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>sinistra<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Pannello-destra<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>destra<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pannello</span></span> <span class=\"token attr-name\">sinistra</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Contatti</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">destra</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Chat</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQNESlJwItCBQC0ANzgqJACxgAnRWm4wA9ACZiCfkJAS2ADwLbaIqMxqMGTKQB4WENQACCBYAXgAdED1SUlpIgD4fE381eJAbGTkFJVUNLXJdA1ojDFMLEnc6LyRbWVI9WkCAJRhMRrBokUCAcj1WjFpugG5w8gg6hub-2gARAHkAWUCO0i7e6ZUWVeHR8blJ7oJzAgw4OB3yUbAAV24c8kCAYTo0WiUACgBKQOBRwMC-rRrnoHn4AoEMFA0GcAHJoEQwCIgZ6MV5KSKBEzxEbkfijK63AbKB6PbSvL4_P4AmBAkGBMFBSHQuBwhFI0mvDFYnF4y7kG53YmBAAKRnIMCgUFI7xQ0RQcG-vwe1NpD3eVP-DIhUNh8MRkVF5HFktICQ1_3pKW1zNZ-pAhuNUpUCjGcFoejQZuVFotwFlpHlBBdEDdHt5Ps1yQC8XNmqtTN1bINYolTrYoc9IHifrlcAI6fdaH4SRSMe99KjqSpnx5-P5hPugQAgigUBSlf9AcC1eafA7U6RAsGM6FgD4UcU3hBMfF-IECx7R-OyY0sXOsdXa3yWm15gsCH1yGw9O8fC2UDPBPPSBhrgjGAR8LQAKKwe-0ABCAE8AJIsd69DEgyfDWozpMImTyIoxLqJoOj6IYxjHKcCDINIVSMDUziuFeABGpAsF-V4AMTRLElLlgA7iEtDaIggQAIwAAxMQApDiPq6BAuDOPRzFsVuowEP2JoUT61EsLRfEsex5pcTxtDSQJoy8kJIlOsOhZiRaYBSq89GwGAtAcRaElSYEADMynlvJvGMTJgnkMJKYmps8BaR2Ol6YpgSGcZ5pmXRgQAOzWZxMDcXZ_GybidYEBOaLTp5_yBUpMXhZFPnRUMgTmrhmBYLg0S3CwBmZbhUDXDAjnxSu2kpTRQXZXJEUKWlOV5QVRWkCV9EoBIWA8uk1hAA\">Prova su CodeSandbox</a></strong></p>\n<p>Gli elementi React <code class=\"language-javascript\">&lt;Contatti /&gt;</code> e <code class=\"language-javascript\">&lt;Chat /&gt;</code> sono dei semplici oggetti, quindi puoi passarli come props esattamente come faresti con altri dati. Questo approccio potrebbe ricordarti il concetto di \u201cslots\u201d in altre librerie, ma non ci sono limitazioni su cosa puoi passare come props in React.</p>\n<h2 id=\"specialization\"><a class=\"anchor\" href=\"/react/composition-vs-inheritance#specialization\"></a>Specializzazioni </h2>\n<p>A volte pensiamo ai componenti come se fossero \u201ccasi speciali\u201d di altri componenti. Ad esempio, potremmo dire che <code class=\"language-javascript\">FinestraBenvenuto</code> \u00e8 una specializzazione di <code class=\"language-javascript\">Finestra</code>.</p>\n<p>In React, ci\u00f2 si ottiene mediante composizione, dove componenti pi\u00f9 \u201cspecifici\u201d renderizzano la versione pi\u00f9 \u201cgenerica\u201d configurandola mediante props:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Finestra</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BordoFigo</span></span> <span class=\"token attr-name\">colore</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Finestra-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>titolo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Finestra-messaggio<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messaggio<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">BordoFigo</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FinestraBenvenuto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Finestra</span></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">titolo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Benvenuto/a!<span class=\"token punctuation\">\"</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">messaggio</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Ti ringraziamo per questa tua visita nella nostra</span>      nave spaziale!<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQNESlJwItCBQC0ANzgqJACxgAnRWm4wA9AGZiCfkJAS2ADwLbaIqMxqMGTKQB4WENQACCBYAXgAdED1SUlpIgD4fE381eJAbGTkFJVUNLXJdA1ojDFMLEnc6LyRbWVI9WkCAJRhMRrBokUCAcj1WjFpugG5w8gg6hub-2gARAHkAWUCO0i7e6ZUWVeHR8blJ7oJzAgw4OB3yUbAAV24c8kCAIXqtgDEIXFIAChRolDgAJSBYCjQKBPq0a56B5fUFgwJ-AKBDBQNBnAByaBEMFCwG6zz0bw-pCeL1I70-Km6gQA1IFfqR_idSFB6jB-PE4fDgQymRhtNAWH1yPwuQjkgFOQ9AgCRiLRldbgNlA93uR4LQ9Ggfn9AcC4RCoTCxT4CUTPsiWWyIiAAEZQa4wBJisE-bQARmRqIxWJxkTVGq1KiUtCtCWAvLgBBDVv4SQ9Uu5rpQXrRcEx2JtAbgmrQKmxZzwuGUzulSZ5uoIBbgReUorL8KSKETjZMZvJxJbstG9cVdxVgWzuceDDUDGuoa-QJB0sN0MCsIbPiHWpdgRjrJtI_IY_IE9IJjQAEJImvq7XSDaACoQcESXBagBeECxJI4ekCAEdHTm0Ovrn-agQNkf7qlAqKBOQ8i5mu5BoGOgRwOgz5oLAJ4gGKJhdnKvbkC0bTzAsBDCmweiLq6K5oNuu77oEWGCHCWwYNc2KMAQ-C0AAorArG0I8ACeACSLBfL0MSDACozdpQGSrFkigquomg6PohjGMcpwIMg0hVIwNQEO2FIkjO3LoCw_jkLgiCBO6AAMKD2DZ9n2HK3K2i8-jWXZDmISyIQ4Qq5AGWSRkqPajr6g27mEvoKg0KyejWeFMABZcQWUcGihWpF3JiHoxbkNZtmufCYB0CoYBYtA_HWTW5CaHAqlgKlowEBl564MWxlimVjAqAoj4wNZqL5foOHpNYQA\">Prova su CodeSandbox</a></strong></p>\n<p>La composizione funziona ugualmente bene per i componenti definiti come classi:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Finestra</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BordoFigo</span></span> <span class=\"token attr-name\">colore</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Finestra-titolo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>titolo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Finestra-messaggio<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messaggio<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">BordoFigo</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FinestraRegistrazione</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSignUp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSignUp</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">login</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Finestra</span></span>\n        <span class=\"token attr-name\">titolo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Programma di Esplorazione di Marte<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">messaggio</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Qual<span class=\"token punctuation\">'</span>\u00e8 il tuo nome?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSignUp<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          Registrami!</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Finestra</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">login</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleSignUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Benvenuto/a a bordo, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>login<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codesandbox.io/api/v1/sandboxes/define?parameters=N4IgZglgNgpgziAXKADgQwMYGs0HMYB0AVnAPYB2SoGFALjObVSACYwoNvkYTxUC-AGhABbNBEqIQNESlJwItCBQC0ANzgqJACxgAnRWm4wA9ABZiCfkJAS2ADwLbaIqMxqMGTKQB4WENQACCBYAXgAdED1SUlpIgD4fE381eJAbGTkFJVUNLXJdA1ojDFMLEnc6LyRbWVI9WkCAJRhMRrBokUCAcj1WjFpugG5w8gg6hub-2gARAHkAWUCO0i7e6ZUWVeHR8blJ7oJzAgw4OB3yUbAAV24c8kCAIXqtgDEIXFIAChRolDgAJSBYCjQKBPq0a56B5fUFgwJ-AKBDBQNBnAByaBEMFCwG6zz0bw-pCeL1I70-Km6gQA1IFfqR_idSFB6jB-PE4fDgQymRhtNAWH1yPwuQjkgFOQ9AgCRiLRldbgNlA93uR4LQ9Ggfn9AcC4RCoTCxT4CUTPsiWWyIiAAEZQa4wBJisE-bQARmRqIxWJxkTVGq1KiUtCtCWAvLgBBDVv4SQ9Uu5rpQXrRcEx2JtAbgmrQKmxZzwuGUzulSZ5uoIBbgReUorL8KSKETSYjlf5guF9e5STN5OJLdlo3roxRacC2dzLWLOa1AC8VTBAjB7PRyCw4FM2gQAMKrOTqxj66UeWfXAb1HWMvUghtwa4cPRX_5Dhu0AVR7RGFiwHdf8j4IEoSBO-ECft-v7_vgBC2nYXygYCcrcghTgQTAADKHzkAAqimwEof-P4YVhuEwXBCGvshH4EDmaD0EBwKssW5CID03T8EhgQjtKwpsE-QK3tyhrQoEsINq6k5ai68IxqyNoAArRLgWoiGIgT-IEACicAoKy86LupECBAsaANE6IDSWC1a1qQNoAIrXGgUDdAAF8EUAgdcJLkKsMAAPyluWroSCg1xxOJSZqE5jq4ihtH0AQTESN2QVghQf5GPgsXUYRkGZeylmBCYLblj4tphaGDzpVAEDYNlYGoeusCYbgOEoByhVgtOYG5iIEAAISFUk5W0JVJWNiYkloONlFcQq0q5TAGUATAXwwAJYpxTAtDocU9BfMASUscu0amfgtAEFFDrsrN3FgotLVtV8G0Nk5-i0F8AAGjwMGoDBhaQJhoIEwO2mSgiBAAJMAcV7YQR38P1n23cO80tG08wLAQvH6GJEkSIGaDdbOaALhQS7FYIcJbBg1zYowBDnZpsD07QjwAJ4AJIsF8vQxIMAKjK-6TCJk8iKCq6iaDo-iGMYxynAgyDSFUjA1AQfYUiSgnwugLD-ABrHugADCg9iBCbZucWCYOEvoRum-bZA1SwcrcRrZJayo9qOse3K23xKg0HprE-zAbvzQQU3BooVp-_CYh6MxrHG9byx0CoYBYtA7OsTW5CaHAstgBHlzkFHBMk_m8A1rgxba2KYAZwoc4wKxqJJ_obvpNYQA\">Prova su CodeSandbox</a></strong></p>\n<h2 id=\"so-what-about-inheritance\"><a class=\"anchor\" href=\"/react/composition-vs-inheritance#so-what-about-inheritance\"></a>E per quanto riguarda l\u2019ereditariet\u00e0? </h2>\n<p>In Facebook, usiamo React in migliaia di componenti ma non abbiamo mai avuto alcun caso in cui sarebbe raccomandabile utilizzare gerarchie di ereditariet\u00e0 per i componenti.</p>\n<p>Le props e la composizione ti offrono tutta la flessibilit\u00e0 di cui hai bisogno per personalizzare l\u2019aspetto ed il comportamento di un componente in modo esplicito e sicuro. Ricorda che i componenti possono accettare props arbitrarie, inclusi valori primitivi, elementi React o funzioni.</p>\n<p>Se vuoi riutilizzare le funzionalit\u00e0 non strettamente legate alla UI tra componenti, suggeriamo di estrarre tali logiche all\u2019interno di un modulo JavaScript separato. I componenti potranno quindi importarlo ed utilizzare quella funzione, oggetto o una classe di cui hanno bisogno, senza dover estendere tale modulo.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/composition-vs-inheritance.md\">Edit this page</a></p></div></article>", "path": "/react/composition-vs-inheritance", "nav": ["/react/lifting-state-up", "/react/thinking-in-react"]}, {"key": "12. Pensare in React", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React \u00e8, secondo noi, il miglior modo per sviluppare applicazioni web complesse e performanti in JavaScript. Ha <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Scalabilit%C3%A0\">scalato</a> molto bene per noi in Facebook ed Instagram.</p>\n<p>Una delle caratteristiche migliori di React \u00e8 il modo in cui ti permette di pensare alle applicazioni mentre le sviluppi. In questo documento, ti guideremo nel processo di costruzione di una tabella di prodotti con funzionalit\u00e0 di ricerca usando React.</p>\n<h2 id=\"start-with-a-mock\"><a class=\"anchor\" href=\"/react/thinking-in-react#start-with-a-mock\"></a>Comincia Con Una Bozza </h2>\n<p>Immaginiamo di avere gi\u00e0 a disposizione una API JSON e che il nostro designer ci abbia fornito una bozza come questa:</p>\n<p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/27a69cddf45ff5e561e6326e7426c294/d4770/thinking-in-react-mock.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/27a69cddf45ff5e561e6326e7426c294/d4770/thinking-in-react-mock.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>La nostra API JSON ritorna dati in questa forma:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">[\n  {categoria: \"Attrezzatura Sportiva\", prezzo: \"$49.99\", disponibile: true, nome: \"Palla da calcio\"},\n  {categoria: \"Attrezzatura Sportiva\", prezzo: \"$9.99\", disponibile: true, nome: \"Palla da tennis\"},\n  {categoria: \"Attrezzatura Sportiva\", prezzo: \"$29.99\", disponibile: false, nome: \"Palla da canestro\"},\n  {categoria: \"Elettronica\", prezzo: \"$99.99\", disponibile: true, nome: \"iPod Touch\"},\n  {categoria: \"Elettronica\", prezzo: \"$399.99\", disponibile: false, nome: \"iPhone 5\"},\n  {categoria: \"Elettronica\", prezzo: \"$199.99\", disponibile: true, nome: \"Nexus 7\"}\n];</code></pre></div>\n<h2 id=\"step-1-break-the-ui-into-a-component-hierarchy\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-1-break-the-ui-into-a-component-hierarchy\"></a>Passo 1: Scomponi La UI In Una Gerarchia Di Componenti </h2>\n<p>La prima cosa da fare \u00e8 disegnare rettangoli attorno ad ogni componente (e sotto-componente) presente nella bozza e di dare un nome ad ognuno di essi. Se stai lavorando con un designer, probabilmente qualche passo in questa direzione \u00e8 stato gi\u00e0 fatto, consultatevi! I nomi dei livelli in Photoshop usati dai designers potrebbero dare nome anche ai tuoi componenti React!</p>\n<p>Ma come fare a sapere cosa deve essere un componente a se stante? Usa le stesse tecniche che usi per decidere se devi creare una nuova funzione od un oggetto. Una di queste tecniche \u00e8 il <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Principio_di_singola_responsabilit%C3%A0\">principio di singola responsabilit\u00e0</a>, che dice che un componente dovrebbe idealmente occuparsi di una cosa soltanto. Nel caso in cui un componente diventi troppo grande e complesso, dovrebbe essere decomposto in sotto-componenti pi\u00f9 piccoli e semplici.</p>\n<p>Dato che ti ritroverai spesso a dover presentare all\u2019utente dei modelli dati JSON, noterai che se tali modelli sono stati definiti correttamente, la tua UI (e di conseguenza la struttura della gerarchia dei tuoi componenti) corrisponderanno. Ci\u00f2 avviene perch\u00e9 entrambe tendono ad aderire alla stessa <em>architettura dell\u2019informazione</em>. Separa la tua UI in componenti, dove ognuno di essi corrisponde ad una parte del modello dati.</p>\n<p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/9381f09e609723a8bb6e4ba1a7713b46/90cbd/thinking-in-react-components.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/9381f09e609723a8bb6e4ba1a7713b46/90cbd/thinking-in-react-components.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>Abbiamo identificato cinque componenti nella nostra applicazione. In corsivo, la parte del modello dati rappresentata da ogni componente. I numeri nell\u2019immagine corrispondono ai numeri di seguito.</p>\n<ol>\n<li><strong><code class=\"language-javascript\">TabellaProdottiRicercabile</code> (arancione):</strong> contiene l\u2019intero esempio</li>\n<li><strong><code class=\"language-javascript\">BarraRicerca</code> (blu):</strong> riceve tutti gli <em>input dell\u2019utente</em></li>\n<li><strong><code class=\"language-javascript\">TabellaProdotti</code> (verde):</strong> visualizza e filtra la <em>lista dei prodotti</em> a seconda dell\u2019<em>input dell\u2019utente</em></li>\n<li><strong><code class=\"language-javascript\">RigaCategoriaProdotti</code> (turchese):</strong> visualizza una testata per ogni <em>categoria</em></li>\n<li><strong><code class=\"language-javascript\">RigaProdotto</code> (rosso):</strong> visualizza una riga per ogni <em>prodotto</em></li>\n</ol>\n<p>Se dai un\u2019occhiata a <code class=\"language-javascript\">TabellaProdotti</code>, noterai che la testata della tabella (contenente le etichette \u201cNome\u201d e \u201cPrezzo\u201d) non rappresenta un componente a se stante. Si tratta di una questione soggettiva, e ci sono argomenti validi in entrambi i sensi. In questo esempio, l\u2019abbiamo lasciata come parte di <code class=\"language-javascript\">TabellaProdotti</code> perch\u00e9 fa parte della renderizzazione della <em>lista dei prodotti</em> che \u00e8 una responsabilit\u00e0 di <code class=\"language-javascript\">TabellaProdotti</code>. Comunque, qualora questa testata dovesse diventare complessa (per esempio se volessimo aggiungere la gestione dell\u2019ordinamento per colonna), avrebbe sicuramente senso creare un suo proprio componente <code class=\"language-javascript\">TestataTabellaProdotti</code>.</p>\n<p>Adesso che abbiamo identificato i componenti nella nostra bozza, ordiniamoli gerarchicamente. I componenti che appaiono all\u2019interno di un altro componente nella bozza, devono essere loro figli nella gerarchia:</p>\n<ul>\n<li>\n<p><code class=\"language-javascript\">TabellaProdottiRicercabile</code></p>\n<ul>\n<li><code class=\"language-javascript\">BarraRicerca</code></li>\n<li>\n<p><code class=\"language-javascript\">TabellaProdotti</code></p>\n<ul>\n<li><code class=\"language-javascript\">RigaCategoriaProdotti</code></li>\n<li><code class=\"language-javascript\">RigaProdotto</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"step-2-build-a-static-version-in-react\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-2-build-a-static-version-in-react\"></a>Passo 2: Sviluppa Una Versione Statica in React </h2>\n<p><iframe class=\"embedded-codesandbox\"></iframe></p>\n<p>Adesso che hai la gerarchia dei componenti, \u00e8 ora di implementare la tua applicazione. Il modo pi\u00f9 facile \u00e8 quello di sviluppare una versione che riceve dati dal modello e renderizza la UI senza alcuna interattivit\u00e0. \u00c8 bene mantenere separati questi processi perch\u00e9 implementare una versione statica richiede la scrittura di molto codice non complesso, aggiungere interattivit\u00e0, al contrario, richiede di spremersi le meningi e la scrittura di poco codice. Vediamo perch\u00e9.</p>\n<p>Per costruire una versione statica della tua applicazione che renderizza il tuo modello dati, devi implementare componenti che riutilizzano altri componenti e passano dati usando <em>props</em>. Le <em>props</em> sono un modo di passare dati da genitore a figlio. Se sei familiare con il concetto di <em>state</em>, <strong>evita di utilizzarlo del tutto</strong> nella costruzione di una versione statica. Lo stato (nella forma della propriet\u00e0 <code class=\"language-javascript\">state</code>) \u00e8 riservato all\u2019interattivit\u00e0, ovvero, dato che cambiano nel tempo. Dato che si tratta di una versione statica, non ne abbiamo bisogno.</p>\n<p>Puoi cominciare partendo dall\u2019alto (top-down) o dal basso (bottom-up). Il che significa che puoi cominciare con l\u2019implementazione dei componenti pi\u00f9 un alto nella gerarchia (per esempio cominciando da <code class=\"language-javascript\">TabellaProdottiRicercabile</code>) o con quelli pi\u00f9 in basso al suo interno (<code class=\"language-javascript\">RigaProdotto</code>). Nei casi pi\u00f9 semplici, \u00e8 meglio preferire l\u2019approccio top-down, nei progetti pi\u00f9 grandi, \u00e8 pi\u00f9 facile l\u2019approccio bottom-up e la contestuale scrittura di test man mano che si implementa.</p>\n<p>Alla fine di questo passo, avrai una libreria di componenti riutilizzabili che renderizza il tuo modello dati. I componenti avranno solo metodi <code class=\"language-javascript\">render()</code> dati che \u00e8 una versione statica dell\u2019applicazione. Il componente al vertice della gerarchia (<code class=\"language-javascript\">TabellaProdottiRicercabile</code>) ricever\u00e0 il tuo modello dati come prop. Qualora tu cambiassi il modello dati sottostante, richiamando <code class=\"language-javascript\">root.render()</code> di nuovo, la UI verr\u00e0 aggiornata. Vedrai come la UI si aggiorna al fine di individuare i necessari cambiamenti dato che quanto sta accadendo non \u00e8 per nulla complicato. Il <strong>flusso dati monodirezionale</strong> di React (noto anche come <em>one-way binding</em>) mantiene ogni cosa modulare e veloce.</p>\n<p>Fai riferimento alla <a href=\"/react/getting-started\">Documentazione</a> se hai bisogno di aiuto nell\u2019esecuzione di questo passo.</p>\n<h3 id=\"a-brief-interlude-props-vs-state\"><a class=\"anchor\" href=\"/react/thinking-in-react#a-brief-interlude-props-vs-state\"></a>Un Breve Intervallo: Props vs State </h3>\n<p>Esistono due tipi di \u201cmodello\u201d dati in React: props e state. \u00c8 importante capire la distinzione tra le due cose; sfoglia <a href=\"/react/state-and-lifecycle\">la documentazione ufficiale di React</a> nel caso avessi dubbi.\nPuoi leggere inoltre <a href=\"/react/faq-state#what-is-the-difference-between-state-and-props\">FAQ: What is the difference between state and props?</a></p>\n<h2 id=\"step-3-identify-the-minimal-but-complete-representation-of-ui-state\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-3-identify-the-minimal-but-complete-representation-of-ui-state\"></a>Passo 3: Identifica la Minima (ma completa) Rappresentazione dello Stato della UI </h2>\n<p>Per rendere la tua UI interattiva, devi fare in modo che sia possibile alterare il modello dati sottostante. React rende ci\u00f2 possibile grazie all\u2019uso di <strong>state</strong>.</p>\n<p>Al fine di implementare l\u2019applicazione correttamente, devi innanzitutto pensare alla minima parte di stato mutabile del quale la tua applicazione ha bisogno. La chiave qui \u00e8 <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY: <em>Don\u2019t Repeat Yourself</em></a>. Individua la minima rappresentazione di stato richiesta dall\u2019applicazione e calcola tutto il resto al bisogno. Ad esempio, se stai costruendo una \u201cLista delle cose da fare\u201d; mantieni solo l\u2019array degli elementi della lista; non mantenere una variabile separata nello stato per il conteggio, utilizza semplicemente la propriet\u00e0 <code class=\"language-javascript\">length</code> dell\u2019array.</p>\n<p>Pensa a tutte le parti di dati nell\u2019applicazione d\u2019esempio. Abbiamo:</p>\n<ul>\n<li>La lista originale dei prodotti</li>\n<li>Il testo di ricerca inserito dall\u2019utente</li>\n<li>Il valore della checkbox</li>\n<li>La lista filtrata dei prodotti</li>\n</ul>\n<p>Vediamoli uno alla volta al fine di individuare quali rappresentano stato. Poniti tre domande per ognuno:</p>\n<ol>\n<li>Viene ricevuto da un genitore via props? In tal caso, probabilmente non si tratta di stato.</li>\n<li>Rimane invariato nel tempo? Se si, probabilmente non si tratta di stato.</li>\n<li>Puoi derivarlo in base ad altre parti di state o props nel tuo componente? Se \u00e8 cos\u00ec, non \u00e8 stato.</li>\n</ol>\n<p>La lista originale dei prodotti viene ricevuta come props, non si tratta quindi di stato. Il testo di ricerca e la checkbox sembrano far parte dello stato dato che cambiano nel tempo e non possono essere derivati da nulla. Infine, la lista filtrata dei prodotti non fa parte dello stato visto che pi\u00f2 essere derivata dalla lista originale dei prodotti, dal testo di ricerca e dal valore della checkbox.</p>\n<p>Infine, quindi, il nostro stato \u00e8:</p>\n<ul>\n<li>Il testo di ricerca inserito dall\u2019utente</li>\n<li>Il valore della checkbox</li>\n</ul>\n<h2 id=\"step-4-identify-where-your-state-should-live\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-4-identify-where-your-state-should-live\"></a>Passo 4: Identifica Dove Posizionare Il tuo Stato </h2>\n<p><iframe class=\"embedded-codesandbox\"></iframe></p>\n<p>OK, abbiamo individuato la minima rappresentazione di stato dell\u2019applicazione. Adesso, dobbiamo trovare quale componente muta, o <em>possiede</em>, questo stato.</p>\n<p>Ricorda: React \u00e8 del tutto basato sul concetto di flusso dati unidirezionale dall\u2019alto verso il basso nella gerarchia dei componenti. Pu\u00f2 non risultare immediatamente chiaro quale componente deve mantenere quale parte di stato. <strong>Questa \u00e8 la parte pi\u00f9 complicata da capire per chi \u00e8 agli inizi,</strong> segui questi passi come linea guida:</p>\n<p>Per ogni parte di stato nella tua applicazione:</p>\n<ul>\n<li>Identifica ogni componente che renderizza qualcosa in base a quello stato.</li>\n<li>Identifica un componente proprietario comune (un singolo componente al di sopra di tutti i componenti che richiedono quello stato nella gerarchia).</li>\n<li>Lo stato dovr\u00e0 risiedere nel proprietario comune oppure in un altro componente pi\u00f9 in alto nella gerarchia.</li>\n<li>Se non riesci ad individuare facilmente il componente che sensatamente dovrebbe mantenere lo stato, crea un nuovo componente per fare ci\u00f2 e posizionalo da qualche parte nella gerarchia al di sopra del componente proprietario comune.</li>\n</ul>\n<p>Applichiamo questa strategia nella nostra applicazione:</p>\n<ul>\n<li><code class=\"language-javascript\">TabellaProdotti</code> ha bisogno di filtrare la lista dei prodotti in base allo stato e <code class=\"language-javascript\">BarraRicerca</code> deve visualizzare il testo di ricerca e lo stato della checkbox.</li>\n<li>Il componente proprietario comune \u00e8 <code class=\"language-javascript\">TabellaProdottiRicercabile</code>.</li>\n<li>Concettualmente possiamo dire che ha senso mantenere il testo di ricerca e lo stato della checkbox all\u2019interno di <code class=\"language-javascript\">TabellaProdottiRicercabile</code></li>\n</ul>\n<p>Bene, abbiamo deciso che il nostro stato vive in <code class=\"language-javascript\">TabellaProdottiRicercabile</code>. Prima di tutto, aggiungi una propriet\u00e0 d\u2019istanza <code class=\"language-javascript\">this.state = {testoRicerca: '', soloDisponibili: false}</code> nel <code class=\"language-javascript\">constructor</code> di <code class=\"language-javascript\">TabellaProdottiRicercabile</code>  al fine di riflettere lo stato iniziale della tua applicazione. Poi, passa <code class=\"language-javascript\">testoRicerca</code> e <code class=\"language-javascript\">soloDisponibili</code> a <code class=\"language-javascript\">TabellaProdotti</code> e <code class=\"language-javascript\">BarraRicerca</code> come prop. Infine, usa queste props per filtrare le righe in <code class=\"language-javascript\">TabellaProdotti</code> e impostare i valori nel form in <code class=\"language-javascript\">BarraRicerca</code>.</p>\n<p>Puoi cominciare a vedere come si comporta l\u2019applicazione: imposta <code class=\"language-javascript\">testoRicerca</code> a <code class=\"language-javascript\">\"Palla\"</code> e aggiornala. Vedrai che la tabella dati \u00e8 stata aggiornata correttamente.</p>\n<h2 id=\"step-5-add-inverse-data-flow\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-5-add-inverse-data-flow\"></a>Passo 5: Invertire il Flusso Dati </h2>\n<p><iframe class=\"embedded-codesandbox\"></iframe></p>\n<p>Fino ad ora, abbiamo implementato una applicazione che renderizza correttamente con props e state che fluiscono in basso nella gerarchia. Adesso \u00e8 il momento di supportare il flusso inverso: dobbiamo fare in modo che i componenti form pi\u00f9 in basso nella gerarchia, possano aggiornare lo stato in <code class=\"language-javascript\">TabellaProdottiRicercabile</code>.</p>\n<p>React rende questo flusso dati esplicito in modo da facilitare la comprensione del funzionamento del programma, tuttavia richiede la scrittura di un po\u2019 pi\u00f9 codice rispetto ad altre soluzioni con flusso dati bidirezionale (<em>two-way data binding</em>).</p>\n<p>Se provi a scrivere qualcosa o a selezionare la casella nella precedente versione (passo 4), noterai che React ignora completamente il tuo input. Si tratta di un fatto intenzionale, abbiamo infatti impostato la prop <code class=\"language-javascript\">value</code> dell\u2019<code class=\"language-javascript\">input</code> per essere sempre uguale allo <code class=\"language-javascript\">state</code> che riceve da da <code class=\"language-javascript\">TabellaProdottiRicercabile</code>.</p>\n<p>Proviamo a pensare a cosa vogliamo far s\u00ec che avvenga. Vogliamo fare in modo che a seconda di come l\u2019utente alteri il form, lo stato verr\u00e0 alterato di conseguenza. Dato che i componenti possono alterare solamente il proprio stato, <code class=\"language-javascript\">TabellaProdottiRicercabile</code> passer\u00e0 <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Callback\">callbacks</a> a <code class=\"language-javascript\">BarraRicerca</code> che verranno invocate ogni qual volta lo stato deve essere aggiornato. Possiamo utilizzare l\u2019evento <code class=\"language-javascript\">onChange</code> degli input per ricevere tale notifica. Le callbacks passate da <code class=\"language-javascript\">TabellaProdottiRicercabile</code> chiameranno <code class=\"language-javascript\">setState()</code> facendo s\u00ec che la applicazione venga aggiornata.</p>\n<h2 id=\"and-thats-it\"><a class=\"anchor\" href=\"/react/thinking-in-react#and-thats-it\"></a>\u00c8 Tutto </h2>\n<p>Speriamo che adesso tu abbia un\u2019idea su come pensare all\u2019implementazione di componenti ed applicazioni in React. Anche se pu\u00f2 sembrare che tu abbia bisogno di scrivere pi\u00f9 codice di quanto tu sia abituato/a, ricorda che tale codice viene molto pi\u00f9 letto che scritto, ed \u00e8 meno difficile da comprendere grazie alla modularit\u00e0 e al fatto che \u00e8 molto esplicito negli intenti. Non appena comincerai a costruire grandi librerie di componenti, apprezzerai queste caratteristiche ancor di pi\u00f9, inoltre, grazie al riutilizzo del codice, alla fine ti ritroverai a scrivere meno righe di codice. :)</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/thinking-in-react.md\">Edit this page</a></p></div></article>", "path": "/react/thinking-in-react", "nav": ["/react/composition-vs-inheritance", "/react/accessibility"]}]}, {"key": "Guide Avanzate", "values": [{"key": "Accessibilit\u00e0", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h2 id=\"why-accessibility\"><a class=\"anchor\" href=\"/react/accessibility#why-accessibility\"></a>Perch\u00e9 usare l\u2019accessibilit\u00e0? </h2>\n<p>L\u2019accessibilit\u00e0 su web (spesso indicata anche con <a class=\"external-link\" href=\"https://en.wiktionary.org/wiki/a11y\"><strong>a11y</strong></a>) \u00e8 il processo attraverso il quale si creano applicazioni che siano fruibili da chiunque. L\u2019accessibilit\u00e0 \u00e8 necessaria per permettere a tutte quelle tecnologie di assistenza di interpretare le pagine web.</p>\n<p>React fornisce il pieno supporto per la creazione di siti web accessibili, spesso semplicemente utilizzando HTML nel modo standard.</p>\n<h2 id=\"standards-and-guidelines\"><a class=\"anchor\" href=\"/react/accessibility#standards-and-guidelines\"></a>Standards e linee guida </h2>\n<h3 id=\"wcag\"><a class=\"anchor\" href=\"/react/accessibility#wcag\"></a>WCAG </h3>\n<p>L\u2019acronimo WCAG sta per <a class=\"external-link\" href=\"https://www.w3.org/WAI/intro/wcag\">Web Content Accessibility Guidelines</a> e fornisce linee guida per la creazione di pagine web accessibili.</p>\n<p>La seguente lista fornisce un\u2019anteprima:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.wuhcag.com/wcag-checklist/\">WCAG checklist dal sito Wuhcag</a></li>\n<li><a class=\"external-link\" href=\"https://webaim.org/standards/wcag/checklist\">WCAG checklist dal sito WebAIM</a></li>\n<li><a class=\"external-link\" href=\"https://a11yproject.com/checklist.html\">Checklist from The A11Y Project</a></li>\n</ul>\n<h3 id=\"wai-aria\"><a class=\"anchor\" href=\"/react/accessibility#wai-aria\"></a>WAI-ARIA </h3>\n<p>Il documento <a class=\"external-link\" href=\"https://www.w3.org/WAI/intro/aria\">sull\u2019iniziativa del web accessibile - Accessible Rich Internet Applications</a> contiene tecniche per costruire widget JavaScript accessibili.</p>\n<p>Tutti gli attributi HTML <code class=\"language-javascript\">aria-*</code> sono pienamente supportati in JSX. Mentre la maggior parte delle propriet\u00e0 e attributi in React sono camelCase, gli attributi <code class=\"language-javascript\">aria-*</code> sono separati da trattino (-, notazione anche nota come kebab-case, lisp-case ecc.) dal momento che sono elementi HTML.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">aria-label</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>labelText<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">aria-required</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></span>  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onchangeHandler<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<h2 id=\"semantic-html\"><a class=\"anchor\" href=\"/react/accessibility#semantic-html\"></a>HTML semantico </h2>\n<p>L\u2019HTML semantico costituisce la base per l\u2019accessibilit\u00e0 in un\u2019applicazione web. Usare diversi elementi HTML per rafforzare il significato dell\u2019informazione nel vostro sito, spesso pu\u00f2 portare ad avere accessibilit\u00e0 gratis.</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">MDN HTML elements reference</a></li>\n</ul>\n<p>Alcune volte spezziamo la semantica di HTML quando inseriamo elementi come <code class=\"language-javascript\">&lt;div&gt;</code> all\u2019interno di JSX solo per fare in modo che il nostro codice funzioni, specialmente quando lavoriamo con le liste  (<code class=\"language-javascript\">&lt;ol&gt;</code>, <code class=\"language-javascript\">&lt;ul&gt;</code> e <code class=\"language-javascript\">&lt;dl&gt;</code>) e tabelle <code class=\"language-javascript\">&lt;table&gt;</code>.\nIn questi casi possiamo usare i <a href=\"/react/fragments\">Fragments di React</a> per raggruppare pi\u00f9 elementi insieme.</p>\n<p>Ad esempio, diamo uno sguardo al seguente codice</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Fragment <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">item</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>\u00e8 possibile mappare la collezione di elementi semplicemente all\u2019interno di fragments, vedi il codice seguente, come faresti con qualsiasi altro tipo di elemento</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// Fragments should also have a `key` prop when mapping collections</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">&gt;</span></span></span>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando non si ha bisogno delle props all\u2019interno del tag Fragment \u00e8 anche possibile utilizzare la sua <a href=\"/react/fragments#short-syntax\">notazione abbreviata</a>, naturalmente se \u00e8 supportata:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Per maggiori informazioni fai riferimento alla documentazione sui <a href=\"/react/fragments\">Fragments di React</a>.</p>\n<h2 id=\"accessible-forms\"><a class=\"anchor\" href=\"/react/accessibility#accessible-forms\"></a>Form accessibili </h2>\n<h3 id=\"labeling\"><a class=\"anchor\" href=\"/react/accessibility#labeling\"></a>Labeling </h3>\n<p>Ogni elemento di un form, come ad esempio <code class=\"language-javascript\">&lt;input&gt;</code> e <code class=\"language-javascript\">&lt;textarea&gt;</code>, necessita di essere etichettato come accessibile. \u00c9 necessario mettere label descrittive, dato che queste vengono processate dai lettori di schermi.</p>\n<p>Le seguenti risorse mostrano come raggiungere tale scopo:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/WAI/tutorials/forms/labels/\">W3C mostra come etichettare elementi</a></li>\n<li><a class=\"external-link\" href=\"https://webaim.org/techniques/forms/controls\">WebAIM mostra come etichettare elementi</a></li>\n<li><a class=\"external-link\" href=\"https://www.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/\">La Paciello Group spiega come mettere nomi accessibili</a></li>\n</ul>\n<p>Sebbene tutte queste pratiche standard possano essere utilizzate in React, tieni presente che l\u2019attributo <code class=\"language-javascript\">for</code> in JSX viene scritto come <code class=\"language-javascript\">htmlFor</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>namedInput<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Name:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>namedInput<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<h3 id=\"notifying-the-user-of-errors\"><a class=\"anchor\" href=\"/react/accessibility#notifying-the-user-of-errors\"></a>Notifica degli errori all\u2019utente </h3>\n<p>Gli errori devono essere compresi da tutti gli utenti. Le seguenti risorse mostrano come esporre testi di errore ai lettori di schermo:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/WAI/tutorials/forms/notifications/\">La W3C mostra le notifiche utente</a></li>\n<li><a class=\"external-link\" href=\"https://webaim.org/techniques/formvalidation/\">La WebAIM guarda alla validazione dei form</a></li>\n</ul>\n<h2 id=\"focus-control\"><a class=\"anchor\" href=\"/react/accessibility#focus-control\"></a>Focus Control </h2>\n<p>Assicurati che la tua applicazione web sia totalmente utilizzabile tramite tastiera:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/techniques/keyboard/\">La WebAIM parla di accessibilit\u00e0 tramite tastiera</a></li>\n</ul>\n<h3 id=\"keyboard-focus-and-focus-outline\"><a class=\"anchor\" href=\"/react/accessibility#keyboard-focus-and-focus-outline\"></a>Keyboard focus and focus outline </h3>\n<p>Il focus della tastiera fa riferimento all\u2019elemento del DOM selezionato per accettare un input. \u00c9 semplicemente riconoscibile come un contorno sul campo di input come quello che si vede nell\u2019immagine seguente:</p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/dec0e6bcc1f882baf76ebc860d4f04e5/4fcfe/keyboard-focus.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/dec0e6bcc1f882baf76ebc860d4f04e5/4fcfe/keyboard-focus.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>\u00c9 consigliabile usare il CSS per rimuovere questo contorno, ad esempio con <code class=\"language-javascript\">outline: 0</code>, se e solo se verr\u00e0 rimpiazzato con un contorno in uno stile diverso.</p>\n<h3 id=\"mechanisms-to-skip-to-desired-content\"><a class=\"anchor\" href=\"/react/accessibility#mechanisms-to-skip-to-desired-content\"></a>Meccanismi per spostarsi sui diversi contenuti </h3>\n<p>Fornisci all\u2019utente un meccanismo per saltare da una sezione all\u2019altra dell\u2019applicazione in quanto questo aiuta a velocizzare le operazioni di navigazione tramite tastiera.</p>\n<p>Skiplinks o i Skip Navigation Links sono link di navigazione nascosti che diventano visibili solo quando l\u2019utente interagisce con la pagina web. Sono molto facili da implementare utilizzando ancore interne alla pagina e un po\u2019 di stile:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/techniques/skipnav/\">WebAIM - Skip Navigation Links</a></li>\n</ul>\n<p>Utilizza elementi di riferimento e ruoli, come ad esempio <code class=\"language-javascript\">&lt;main&gt;</code> e <code class=\"language-javascript\">&lt;aside&gt;</code>, per creare delle regioni, all\u2019interno della pagina, per permettere all\u2019utente di navigare da una sezione all\u2019altra.</p>\n<p>Per avere maggiori informazioni sull\u2019uso di questi elementi per aumentare l\u2019accessibilit\u00e0 si consiglia questa lettura:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.scottohara.me/blog/2018/03/03/landmarks.html\">Punti di riferimento accessibili</a></li>\n</ul>\n<h3 id=\"programmatically-managing-focus\"><a class=\"anchor\" href=\"/react/accessibility#programmatically-managing-focus\"></a>Gestione del focus in modo programmatico </h3>\n<p>Un\u2019applicazione React modifica continuamente il DOM durante la sua esecuzione, quindi qualche volte \u00e8 possibile che il focus della tastiera venga perso oppure si trovi su un elemento diverso da quello che ci si aspettava. Per correggere questo comportamento errato \u00e8 necessario intervenire programmaticamente, ad esempio resettando il focus della tastiera sul bottone che ha aperto una finestra modale dopo che \u00e8 stata chiusa.</p>\n<p>MDN Web Docs descrive come creare dei <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets\">widget JavaScript navigabili da tastiera</a>.</p>\n<p>Per fare il focus in React \u00e8 possibile utilizzare le <a href=\"/react/refs-and-the-dom\">Refs degli elementi del DOM</a>.</p>\n<p>Per prima cosa \u00e8 necessario creare un ref ad un elemento attraverso il JSX di un componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Create a ref to store the textInput DOM element</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Use the `ref` callback to store a reference to the text input DOM</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// element in an instance field (for example, this.textInput).</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span></span>      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Una volta creato il ref all\u2019elemento \u00e8 possibile fare il focus ovunque sul proprio componente quando necessario:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Explicitly focus the text input using the raw DOM API</span>\n  <span class=\"token comment\">// Note: we're accessing \"current\" to get the DOM node</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Qualche volta un componente padre necessita di fare focus su un elemento di un componente figlio. E\u2019 possibile raggiungere questo scopo <a href=\"/react/refs-and-the-dom#exposing-dom-refs-to-parent-components\">esponendo il refs del DOM al componente padre</a> attraverso delle speciali prop, nel componente figlio, che inoltra il ref ai nodi figli.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomTextInput</span></span> <span class=\"token attr-name\">inputRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Now you can set focus when required.</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Quando usiamo degli <a href=\"/react/higher-order-components\">HOC</a> per estendere il comportamento dei componenti, \u00e8 raccomandabile di <a href=\"/react/forwarding-refs\">inoltrare i ref</a> al componente \u201cwrappato\u201d usando la funzione di React <code class=\"language-javascript\">forwardRef</code>. Se un componente, di tipo HOC, di terze parti non implementata l\u2019inoltro del ref, il pattern spiegato precedentemente pu\u00f2 essere usato come seconda alternativa.</p>\n<p>Un buon esempio di gestione del focus \u00e8 <a class=\"external-link\" href=\"https://github.com/davidtheclark/react-aria-modal\">react-aria-modal</a>. Questo \u00e8 un esempio di piena accessibilit\u00e0 di una finestra modale. Non solo mette il focus iniziale sul bottone cancel\n(prevenendo un\u2019attivazione accidentale dell\u2019azione di successo) ma \u201cimprigiona\u201d il focus all\u2019interno della finestra modale e lo rimette sull\u2019elemento che inizialmente ha causato l\u2019apertura della modale.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Sebbene questa sia una caratteristica di accessibilit\u00e0 molto importante, \u00e8 anche una tecnica che dovrebbe essere usata con giudizio. Usala per aggiustare il focus della tastiera quando \u00e8 rotto piuttosto che cercare di anticipare le mosse dell\u2019utente</p>\n</div>\n<h2 id=\"mouse-and-pointer-events\"><a class=\"anchor\" href=\"/react/accessibility#mouse-and-pointer-events\"></a>Eventi del mouse e di altri dispositivi di puntamento </h2>\n<p>Assicurati che tutte le funzionalit\u00e0 accessibili da mouse siano anche accessibili utilizzando solamente la tastiera. Dipendere solamente da elementi di puntamento porta gli utenti che utilizzano solo la tastiera a non utilizzare la tua applicazione.</p>\n<p>Per mostrare questo comportamento diamo uno sguardo a questo esempio di accessibilit\u00e0 rotta causata da un evento di click. Questo pattern viene chiamato \u201cclick esterno\u201d e si riferisce all\u2019utente che pu\u00f2 chiudere un popover semplicemente facendo click al di fuori dell\u2019elemento.</p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//5523b05b22210c5a2fa0bd1f01339cb3/outerclick-with-mouse.gif\">Image link</a>\n<p>Tipicamente viene implementato mettendo un evento di <code class=\"language-javascript\">click</code> sull\u2019oggetto <code class=\"language-javascript\">window</code> che chiude il popover:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OuterClickExample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClickOutsideHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>currentState<span class=\"token punctuation\">.</span>isOpen\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onClickOutsideHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Select an option</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Questo pu\u00f2 funzionare bene per gli utenti che usano strumenti di puntamento, come ad esempio un mouse, ma utilizzando solamente la tastiera porta ad una rottura della funzionalit\u00e0 quando ci spostiamo sul successivo elemento col pulsante di Tab, in quanto l\u2019oggetto <code class=\"language-javascript\">window</code> non ricever\u00e0 mai l\u2019evento di <code class=\"language-javascript\">click</code>. Questo errato comportamento pu\u00f2 portare a nascondere una certa funzionalit\u00e0 dell\u2019applicazione e di conseguenza ad un allontamento degli utenti.</p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//eca0ca825c8c5e2aa609cee72ef47e27/outerclick-with-keyboard.gif\">Image link</a>\n<p>La stessa funzionalit\u00e0 pu\u00f2 essere ottenuta semplicemente utilizzando in modo appropriato eventi come <code class=\"language-javascript\">onBlur</code> e <code class=\"language-javascript\">onFocus</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlurExample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onBlurHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onBlurHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFocusHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onFocusHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>currentState<span class=\"token punctuation\">.</span>isOpen\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// We close the popover on the next tick by using setTimeout.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// This is necessary because we need to first check if</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// another child of the element has received focus as</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// the blur event fires prior to the new focus event.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onBlurHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// If a child receives focus, do not close the popover.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onFocusHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// React assists us by bubbling the blur and</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// focus events to the parent.</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onBlur</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onBlurHandler<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">           <span class=\"token attr-name\">onFocus</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFocusHandler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler<span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">aria-haspopup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">aria-expanded</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Select an option</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Il codice appena visto mostra come esporre la funzionalit\u00e0 sia per utenti che usano strumenti di puntamento sia per utenti che usano la tastiera. Nota anche che \u00e8 stata aggiunta la props <code class=\"language-javascript\">aria-*</code> per fornire supporto agli utenti che utilizzano i lettori di schermo. Per semplicit\u00e0 l\u2019evento della tastiera per abilitare l\u2019interazione con il popover tramite <code class=\"language-javascript\">tasti freccia</code> non \u00e8 stato implementato.</p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//28ce2067489843caf05fe7ce22494542/blur-popover-close.gif\">Image link</a>\n<p>Questo \u00e8 solo un esempio di molti casi dove dipendere solamente da dispositivi di puntamento e eventi del mouse portano ad una rottura delle funzionalit\u00e0 per gli utenti che utilizzano la tastiera. Testare sempre con la tastiera evidenzia immediatamente eventuali problemi che dovranno essere corretti utilizzando eventi della tastiera.</p>\n<h2 id=\"more-complex-widgets\"><a class=\"anchor\" href=\"/react/accessibility#more-complex-widgets\"></a>Widget pi\u00f9 complessi </h2>\n<p>Una pi\u00f9 complessa esperienza utente non significa avere meno accessibilit\u00e0. L\u2019accessibilit\u00e0 si ottiene pi\u00f9 facilmente scrivendo HTML, ma anche i widget pi\u00f9 complessi possono essere resi accessibili.</p>\n<p>E\u2019 richiesta una conoscenza di <a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria/#roles\">ARIA Roles</a> cos\u00ec come <a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria/#states_and_properties\">ARIA States and Properties</a>.\nQuesti sono strumenti con attributi HTML che sono pienamente supportati in JSX e che ti permettono di costruire componenti React completamente accessibili.</p>\n<p>Ogni tipo di widget ha uno specifico pattern e gli utenti si aspettano che funzioni in un determinato modo;</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria-practices/#aria_ex\">WAI-ARIA Authoring Practices - Design Patterns and Widgets</a></li>\n<li><a class=\"external-link\" href=\"https://heydonworks.com/article/practical-aria-examples/\">Heydon Pickering - ARIA Examples</a></li>\n<li><a class=\"external-link\" href=\"https://inclusive-components.design/\">Inclusive Components</a></li>\n</ul>\n<h2 id=\"other-points-for-consideration\"><a class=\"anchor\" href=\"/react/accessibility#other-points-for-consideration\"></a>Altri punti da tenere in considerazione </h2>\n<h3 id=\"setting-the-language\"><a class=\"anchor\" href=\"/react/accessibility#setting-the-language\"></a>Impostazioni della lingua </h3>\n<p>Scrivete in un linguaggio naturale i testi delle pagine in modo tale che i lettori di schermo possono effettuare le corrette impostazioni della voce:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/techniques/screenreader/#language\">WebAIM - Document Language</a></li>\n</ul>\n<h3 id=\"setting-the-document-title\"><a class=\"anchor\" href=\"/react/accessibility#setting-the-document-title\"></a>Impostazioni del titolo del documento </h3>\n<p>Imposta il <code class=\"language-javascript\">&lt;title&gt;</code> del documento in modo che descriva in modo corretto il contenuto della pagina in quanto questo garantisce che l\u2019utente rimanga sempre consapevole del contenuto della pagina in cui si trova:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-title.html\">WCAG - Capire come utilizzare il <code class=\"language-javascript\">title</code></a></li>\n</ul>\n<p>Per farlo in React basta semplicemente usare il <a class=\"external-link\" href=\"https://github.com/gaearon/react-document-title\">componente Document Title</a>.</p>\n<h3 id=\"color-contrast\"><a class=\"anchor\" href=\"/react/accessibility#color-contrast\"></a>Contrasto di colore </h3>\n<p>Assicuratevi che tutti i testi leggibili sul vostro sito abbiamo colori adatti in modo tale da rimanere sempre visibili anche ad utenti con carenze visive:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html\">WCAG - Capire il contrasto</a></li>\n<li><a class=\"external-link\" href=\"https://www.smashingmagazine.com/2014/10/color-contrast-tips-and-tools-for-accessibility/\">Tutto sul contrasto dei colori e perch\u00e9 dovresti ripensarlo</a></li>\n<li><a class=\"external-link\" href=\"https://a11yproject.com/posts/what-is-color-contrast/\">A11yProject - Cosa \u00e8 il contrasto di colore</a></li>\n</ul>\n<p>Pu\u00f2 risultare molto noioso calcolare tutte le combinazioni di colori per tutti i casi, per questo motivo \u00e8 possibile <a class=\"external-link\" href=\"https://colorable.jxnblk.com/\">calcolare l\u2019intera palette di colori accessibili con Colorable</a>.</p>\n<p>Entrambi gli strumenti menzionati prima (aXe e WAVE) includono test sul contrasto dei colori.</p>\n<p>Se vuoi estendere per conto tuo il test sul contrasto dei colori puoi utilizzare i seguenti strumenti:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/resources/contrastchecker/\">WebAIM - Color Contrast Checker</a></li>\n<li><a class=\"external-link\" href=\"https://www.paciellogroup.com/resources/contrastanalyser/\">The Paciello Group - Color Contrast Analyzer</a></li>\n</ul>\n<h2 id=\"development-and-testing-tools\"><a class=\"anchor\" href=\"/react/accessibility#development-and-testing-tools\"></a>Strumenti di sviluppo e test </h2>\n<p>Ci sono numerosi strumenti che possono essere utilizzati e che ti \u201cassistono\u201d nella creazione di applicazioni web accessibili.</p>\n<h3 id=\"the-keyboard\"><a class=\"anchor\" href=\"/react/accessibility#the-keyboard\"></a>La tastiera </h3>\n<p>Il test pi\u00f9 facile da fare, e anche quello pi\u00f9 importante, \u00e8 di navigare tutta l\u2019applicazione utilizzando esclusivamente la tastiera. Fai questi passi:</p>\n<ol>\n<li>Scollega il mouse.</li>\n<li>Usa i tasti di <code class=\"language-javascript\">Tab</code> e <code class=\"language-javascript\">Shift+Tab</code> per la navigazione.</li>\n<li>Utilizza il tasto di <code class=\"language-javascript\">Enter</code> per interagire con gli elementi.</li>\n<li>Quando richiesto utilizza i tasti freccia per interagire con elementi come ad esempio i men\u00f9 a tendina.</li>\n</ol>\n<h3 id=\"development-assistance\"><a class=\"anchor\" href=\"/react/accessibility#development-assistance\"></a>Assistenza durante lo sviluppo </h3>\n<p>E\u2019 possibile accedere a delle funzionalit\u00e0 di accessibilit\u00e0 direttamente tramite il codice JSX. Spesso i controlli intellisense sono gi\u00e0 forniti negli IDE che supportano JSX per i ruoli, gli stati e le propriet\u00e0 ARIA. Abbiamo anche accesso al seguente strumento:</p>\n<h4 id=\"eslint-plugin-jsx-a11y\"><a class=\"anchor\" href=\"/react/accessibility#eslint-plugin-jsx-a11y\"></a>eslint-plugin-jsx-a11y </h4>\n<p>Il plugin <a class=\"external-link\" href=\"https://github.com/evcohen/eslint-plugin-jsx-a11y\">eslint-plugin-jsx-a11y</a> ESLint fornisce feedback riguardo a problemi di accessibilit\u00e0 all\u2019interno del codice JSX. Molti IDE permettono di integrare queste funzionalit\u00e0 direttamente all\u2019interno del tool di analisi del codice e analisi del codice sorgente.</p>\n<p><a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a> ha il suo plugin per l\u2019accessibilit\u00e0 con un set di regole gi\u00e0 attivate. Se volete abilitare maggiori regole, potete creare un file <code class=\"language-javascript\">.eslintrc</code>, nella cartella principale del progetto, con il seguente contenuto:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsxon\"><code class=\"language-javascript\">{\n  \"extends\": [\"react-app\", \"plugin:jsx-a11y/recommended\"],\n  \"plugins\": [\"jsx-a11y\"]\n}</code></pre></div>\n<h3 id=\"testing-accessibility-in-the-browser\"><a class=\"anchor\" href=\"/react/accessibility#testing-accessibility-in-the-browser\"></a>Testare l\u2019accessibilit\u00e0 all\u2019interno del browser </h3>\n<p>Esistono numerosi tool che eseguono verifiche di accessibilit\u00e0 sulla pagine web nel tuo browser. Utilizza uno di questo in combinazione con altri strumenti qua menzionati, in quanto questi testano solamente l\u2019accessibilit\u00e0 \u201ctecnica\u201d del tuo codice HTML.</p>\n<h4 id=\"axe-axe-core-and-react-axe\"><a class=\"anchor\" href=\"/react/accessibility#axe-axe-core-and-react-axe\"></a>aXe, aXe-core e react-axe </h4>\n<p>Deque Systems offre <a class=\"external-link\" href=\"https://github.com/dequelabs/axe-core\">aXe-core</a> per test di accessibilit\u00e0 end-to-end automatizzati. Questo modulo include alcune integrazioni per Selenium.</p>\n<p><a class=\"external-link\" href=\"https://www.deque.com/products/axe/\">L\u2019Accessibility Engine</a> (abbreviato con aXe), \u00e8 un\u2019estensione per il proprio browser costruita con <code class=\"language-javascript\">aXe-core</code>.</p>\n<p>Puoi anche usare il modulo <a class=\"external-link\" href=\"https://github.com/dequelabs/axe-core-npm/tree/develop/packages/react\">@axe-core/react</a> per vedere errori e problemi vari di accessibilit\u00e0 direttamente nella console in fase di sviluppo e debug.</p>\n<h4 id=\"webaim-wave\"><a class=\"anchor\" href=\"/react/accessibility#webaim-wave\"></a>WebAIM WAVE </h4>\n<p>Il <a class=\"external-link\" href=\"https://wave.webaim.org/extension/\">Web Accessibility Evaluation Tool</a> \u00e8 un\u2019altra estensione per il browser riguardante l\u2019accessibilit\u00e0.</p>\n<h4 id=\"accessibility-inspectors-and-the-accessibility-tree\"><a class=\"anchor\" href=\"/react/accessibility#accessibility-inspectors-and-the-accessibility-tree\"></a>Ispezionare l\u2019accessibilit\u00e0 e l\u2019albero di accessibilit\u00e0</h4>\n<p><a class=\"external-link\" href=\"https://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/\">L\u2019albero dell\u2019accessibilit\u00e0</a> \u00e8 un sottoinsieme dell\u2019albero del DOM che contiene tutti gli oggetti accessibili da ogni elemento del DOM che deve essere esposto a tecnologie di assistenza come ad esempio i lettori di schermo.</p>\n<p>In alcuni browser \u00e8 possibile accedere ad informazioni di accessibilit\u00e0 per ogni elemento nell\u2019albero dell\u2019accessibilit\u00e0:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector\">Utilizzo del controllo di accessibilit\u00e0 in Firefox</a></li>\n<li><a class=\"external-link\" href=\"https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#pane\">Utilizzo del controllo di accessibilit\u00e0 in Chrome</a></li>\n<li><a class=\"external-link\" href=\"https://developer.apple.com/library/content/documentation/Accessibility/Conceptual/AccessibilityMacOSX/OSXAXTestingApps.html\">Utilizzo del controllo di accessibilit\u00e0 in Safari</a></li>\n</ul>\n<h3 id=\"screen-readers\"><a class=\"anchor\" href=\"/react/accessibility#screen-readers\"></a>Lettori di schermo </h3>\n<p>I test utilizzando i lettori di schermo devono essere parte integrante dei test di accessibilit\u00e0.</p>\n<p>Tieni presente che la combinazione browser/ lettore di schermo \u00e8 molto importante. E\u2019 raccomandabile testare la propria applicazione nel browser che meglio si accoppia con il lettore di schermo scelto.</p>\n<h3 id=\"commonly-used-screen-readers\"><a class=\"anchor\" href=\"/react/accessibility#commonly-used-screen-readers\"></a>Lettori di schermo utilizzati pi\u00f9 di frequente </h3>\n<h4 id=\"nvda-in-firefox\"><a class=\"anchor\" href=\"/react/accessibility#nvda-in-firefox\"></a>NVDA in Firefox </h4>\n<p><a class=\"external-link\" href=\"https://www.nvaccess.org/\">NonVisual Desktop Access</a> (abbreviato con NVDA) \u00e8 un lettore di schermo open source per Windows molto utilizzato.</p>\n<p>Segui le seguenti guide per ottenere il massimo da questo strumento:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/articles/nvda/\">WebAIM - Using NVDA to Evaluate Web Accessibility</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/nvda-keyboard-shortcuts\">Deque - NVDA Keyboard Shortcuts</a></li>\n</ul>\n<h4 id=\"voiceover-in-safari\"><a class=\"anchor\" href=\"/react/accessibility#voiceover-in-safari\"></a>VoiceOver in Safari </h4>\n<p>VoiceOver \u00e8 un lettore di schermo integrato in tutti i sistemi Apple.</p>\n<p>Fai riferimento a queste guide per sapere come attivarlo e come usarlo al meglio:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/articles/voiceover/\">WebAIM - Utilizzo di VoiceOver per la valutazione dell\u2019accessibilit\u00e0 web</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/voiceover-keyboard-shortcuts\">Deque - Shortcuts di VoiceOver per OS X</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/voiceover-ios-shortcuts\">Deque - Shortcuts di VoiceOver per iOS</a></li>\n</ul>\n<h4 id=\"jaws-in-internet-explorer\"><a class=\"anchor\" href=\"/react/accessibility#jaws-in-internet-explorer\"></a>JAWS in Internet Explorer </h4>\n<p><a class=\"external-link\" href=\"https://www.freedomscientific.com/Products/software/JAWS/\">Job Access With Speech</a> (abbreviato con JAWS), \u00e8 uno screen reader molto utilizzato su Windows.</p>\n<p>Fai riferimento a queste guide per sapere come ottenere il meglio da JAWS:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/articles/jaws/\">WebAIM - Using JAWS to Evaluate Web Accessibility</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/jaws-keyboard-shortcuts\">Deque - JAWS Keyboard Shortcuts</a></li>\n</ul>\n<h3 id=\"other-screen-readers\"><a class=\"anchor\" href=\"/react/accessibility#other-screen-readers\"></a>Altri lettori di schermo </h3>\n<h4 id=\"chromevox-in-google-chrome\"><a class=\"anchor\" href=\"/react/accessibility#chromevox-in-google-chrome\"></a>ChromeVox di Google Chrome </h4>\n<p><a class=\"external-link\" href=\"https://www.chromevox.com/\">ChromeVox</a> \u00e8 un lettore di schermo integrato in Chromebooks e disponibile anche come <a class=\"external-link\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en\">estensione</a> di Google Chrome.</p>\n<p>Fai riferimento a queste guide per sapere come ottenere il meglio da ChromeVox:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://support.google.com/chromebook/answer/7031755?hl=en\">Google Chromebook Help - Utilizzo del lettore di schermo integrato</a></li>\n<li><a class=\"external-link\" href=\"https://www.chromevox.com/keyboard_shortcuts.html\">ChromeVox - Guida alle Shortcuts</a></li>\n</ul></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/accessibility.md\">Edit this page</a></p></div></article>", "path": "/react/accessibility", "nav": ["/react/thinking-in-react", "/react/code-splitting"]}, {"key": "Code-Splitting", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h2 id=\"bundling\"><a class=\"anchor\" href=\"/react/code-splitting#bundling\"></a>Impacchettamento </h2>\n<p>Molte applicazioni React hanno i loro file \u201cimpacchettati\u201d usando strumenti come <a class=\"external-link\" href=\"https://webpack.js.org/\">Webpack</a>, <a class=\"external-link\" href=\"https://rollupjs.org/\">Rollup</a> oppure <a class=\"external-link\" href=\"http://browserify.org/\">Browserify</a>. Il processo di \u201cimpacchettamento\u201d avviene prendendo tutti i file importati e unendoli tutti in un unico file, chiamato \u201cbundle\u201d. Questo file pu\u00f2 essere poi incluso all\u2019interno della pagina web per caricare l\u2019intera applicazione tutta in una volta.</p>\n<h4 id=\"example\"><a class=\"anchor\" href=\"/react/code-splitting#example\"></a>Esempio </h4>\n<p><strong>App:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// app.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./math.js'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// math.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Bundle:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>I tuoi pacchetti avranno un aspetto molto diverso da questo.</p>\n</div>\n<p>Se state usando <a class=\"external-link\" href=\"https://create-react-app.dev/\">Create React App</a>, <a class=\"external-link\" href=\"https://nextjs.org/\">Next.js</a>, <a class=\"external-link\" href=\"https://www.gatsbyjs.org/\">Gatsby</a>, o qualche tool simile, potreste avere una configurazione di Webpack che effettua il processo d\u2019impacchettamento della tua applicazione.</p>\n<p>In caso contrario \u00e8 necessario impostare l\u2019impacchettamento dell\u2019applicazione manualmente. Ad esempio puoi seguire queste guide sulla documentazione di Webpack, <a class=\"external-link\" href=\"https://webpack.js.org/guides/installation/\">Installation</a> e <a class=\"external-link\" href=\"https://webpack.js.org/guides/getting-started/\">Getting Started</a>.</p>\n<h2 id=\"code-splitting\"><a class=\"anchor\" href=\"/react/code-splitting#code-splitting\"></a>Code Splitting </h2>\n<p>Il processo d\u2019impacchettamento va bene, ma se l\u2019applicazione cresce allora, di conseguenza, pure il bundle cresce, e questo specialmente se si includono librerie di terze parti. E\u2019 necessario prestare attenzione al codice che si include all\u2019interno del proprio bundle, in modo tale da non renderlo troppo pesante per non causare rallentamenti nella sua esecuzione.</p>\n<p>Per evitare di avere un bundle enorme, \u00e8 buona pratica iniziare a suddividere il proprio bundle. Il Code-Splitting (letteralmente \u201cspezzamento del codice\u201d) \u00e8 una funzionalit\u00e0 supportata da <a class=\"external-link\" href=\"https://webpack.js.org/guides/code-splitting/\">Webpack</a>, <a class=\"external-link\" href=\"https://rollupjs.org/guide/en/#code-splitting\">Rollup</a> e Browserify (attraverso <a class=\"external-link\" href=\"https://github.com/browserify/factor-bundle\">factor-bundle</a>)\ni quali creano molteplici bundle che possono essere caricati dinamicamente a tempo di esecuzione.</p>\n<p>Spezzare il codice della propria applicazione pu\u00f2 aiutare ad effettuare il \u201clazy-load (caricamento pigro)\u201d di funzionalit\u00e0 che sono necessarie in quel preciso istante, e questo processo pu\u00f2 incrementare di parecchio le performance della propria applicazione. Anche se non \u00e8 stato ridotto la quantit\u00e0 complessiva di codice dell\u2019applicazione, abbiamo evitato di caricare codice di cui l\u2019utente potrebbe non avere mai bisogno ed \u00e8 stata ridotta la quantit\u00e0 di codice necessaria durante il caricamento iniziale.</p>\n<h2 id=\"import\"><a class=\"anchor\" href=\"/react/code-splitting#import\"></a><code class=\"language-javascript\">import()</code> </h2>\n<p>Il miglior modo per introdurre il code splitting all\u2019interno dell\u2019applicazione \u00e8 attraverso la sintassi <code class=\"language-javascript\">import()</code>.</p>\n<p><strong>Prima:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./math'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Dopo:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./math\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">math</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Quando Webpack incontra questa sintassi, inizia automaticamente il code splitting dell\u2019applicazione. Se state utilizzando Create React App, questo \u00e8 gi\u00e0 automaticamente configurato per te e tu puoi <a class=\"external-link\" href=\"https://create-react-app.dev/docs/code-splitting/\">iniziare ad utilizzarlo</a> immediatamente. E\u2019 anche supportato da <a class=\"external-link\" href=\"https://nextjs.org/docs/advanced-features/dynamic-import\">Next.js</a>.</p>\n<p>Se state configurando Webpack autonomamente, probabilmente dovrai leggere la guida sul <a class=\"external-link\" href=\"https://webpack.js.org/guides/code-splitting/\">\u201ccode splitting\u201d di Webpack</a>. Il tuo webpack dovrebbe <a class=\"external-link\" href=\"https://gist.github.com/gaearon/ca6e803f5c604d37468b0091d9959269\">assomigliare a questo</a>.</p>\n<p>Quando usate <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a> dovete assicurarvi che esso possa effettuare il parsing degli import dinamici. Per fare questo avete bisogno di <a class=\"external-link\" href=\"https://classic.yarnpkg.com/en/package/@babel/plugin-syntax-dynamic-import\">@babel/plugin-syntax-dynamic-import</a>.</p>\n<h2 id=\"reactlazy\"><a class=\"anchor\" href=\"/react/code-splitting#reactlazy\"></a><code class=\"language-javascript\">React.lazy</code> </h2>\n<p>La funzione <code class=\"language-javascript\">React.lazy</code> ti permette di effettuare un import dinamico come se fosse un normale componente.</p>\n<p><strong>Prima:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> OtherComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Dopo:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>L\u2019istruzione sopra carica il pezzo di codice contenente il componente <code class=\"language-javascript\">OtherComponent</code> quando viene renderizzato per la prima volta.</p>\n<p>La funzione <code class=\"language-javascript\">React.lazy</code> prende in ingresso una funzione che, dinamicamente, chiama il metodo <code class=\"language-javascript\">import()</code>. Quello che viene restituito \u00e8 una <code class=\"language-javascript\">Promise</code> che si risolve in un modulo contente  l\u2019export di default del componente React.</p>\n<p>Il componente \u201cpigro\u201d viene poi renderizzato all\u2019interno di un componente <code class=\"language-javascript\">Suspense</code> il quale ci permette di mostrare dei contenuti di fallback (come ad esempio degli indicatori di caricamento) mentre stiamo aspettando che il componente sia completamente caricato.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La prop <code class=\"language-javascript\">fallback</code> accetta un qualsiasi elemento React che si vuole renderizzare nel mentre stiamo aspettando che il componente sia caricato. E\u2019 possibile mettere il componente <code class=\"language-javascript\">Suspense</code> ovunque sopra il componente da caricare in modo lazy. E\u2019 anche possibile circondare il componente da caricare in modo lazy col componente <code class=\"language-javascript\">Suspense</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> AnotherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./AnotherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnotherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"avoiding-fallbacks\"><a class=\"anchor\" href=\"/react/code-splitting#avoiding-fallbacks\"></a>Evitare fallbacks </h3>\n<p>Ogni componente pu\u00f2 essere sospeso a seguito di un rendering, anche componenti che erano gi\u00e0 visibili all\u2019utente. Per fare in modo che il contenuto dello schermo sia sempre consistente, se un componente gi\u00e0 visibile viene sospeso, React deve nascondere il suo albero fino al pi\u00f9 vicino <code class=\"language-javascript\">&lt;Suspense&gt;</code>. Comunque, dal punto di vista dell\u2019utente, ci\u00f2 pu\u00f2 creare confusione.</p>\n<p>Considera questo tab switcher:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Tabs <span class=\"token keyword\">from</span> <span class=\"token string\">'./Tabs'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Glimmer <span class=\"token keyword\">from</span> <span class=\"token string\">'./Glimmer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Comments <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Comments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Photos <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Photos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tab<span class=\"token punctuation\">,</span> setTab<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'photos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleTabSelect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTab</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tabs</span></span> <span class=\"token attr-name\">onTabSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleTabSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Glimmer</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>tab <span class=\"token operator\">===</span> <span class=\"token string\">'photos'</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Photos</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comments</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In questo esempio, se il tab viene cambiato da <code class=\"language-javascript\">'photos'</code> a <code class=\"language-javascript\">'comments'</code>, ma <code class=\"language-javascript\">Comments</code> viene sospeso, l\u2019utente vedr\u00e0 un glimmer. Ci\u00f2 si spiega col fatto che l\u2019utente non vuole pi\u00f9 vedere <code class=\"language-javascript\">Photos</code>, il componente <code class=\"language-javascript\">Comments</code> non \u00e8 ancora pronto per renderizzare nulla e React cerca di mantenere l\u2019esperienza utente consistente, per questo non ha scelta che mostrare il <code class=\"language-javascript\">Glimmer</code>.</p>\n<p>Ad ogni modo, a volte tale esperienza utente non \u00e8 desiderabile. In particolare, a volte \u00e8 meglio mostrare la vecchia UI mentre la nuova UI viene preparata. Puoi usare la nuova API <a href=\"/react/react-api#starttransition\"><code class=\"language-javascript\">startTransition</code></a> in questo caso:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleTabSelect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTab</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Qui, dici a React che settare il tab a <code class=\"language-javascript\">'comments'</code> non \u00e8 un aggiornamento importante, ma che si tratta di una <a href=\"/react/react-api#transitions\">transizione</a> che pu\u00f2 richiedere del tempo. React manterr\u00e0 quindi la vecchia UI al suo posto ed interattiva, mostrer\u00e0 <code class=\"language-javascript\">&lt;Comments /&gt;</code> quando sar\u00e0 pronto. Dai uno sguardo a <a href=\"/react/react-api#transitions\">Transizioni</a> per maggiori informazioni.</p>\n<h3 id=\"error-boundaries\"><a class=\"anchor\" href=\"/react/code-splitting#error-boundaries\"></a>Contenitori di Errori </h3>\n<p>Se altri moduli falliscono nel caricamente (ad esempio a causa di problemi di rete), verr\u00e0 sollevato un errore. Puoi gestire questi errori per mostrare un <a href=\"/react/error-boundaries\">Contenitore di Errori</a>. Una volta che \u00e8 stato creato il proprio contenitore di errori, \u00e8 possibile utilizzarlo ovunque sopra i componenti lazy per mostrare uno stato di errore quando ci sono errori di rete.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MyErrorBoundary <span class=\"token keyword\">from</span> <span class=\"token string\">'./MyErrorBoundary'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> AnotherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./AnotherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnotherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"route-based-code-splitting\"><a class=\"anchor\" href=\"/react/code-splitting#route-based-code-splitting\"></a>Code splitting basato su rotte </h2>\n<p>Decidere dove, nella propria app, introdurre il code splitting pu\u00f2 essere complicato. Assicurati di scegliere posti che divideranno i pacchetti in modo uniforme, senza diminuire l\u2019esperienza dell\u2019utente.</p>\n<p>Un buon posto per iniziare sono le rotte. La maggior parte delle persone sul Web \u00e8 abituata a caricare le transizioni di pagina che richiedono un po \u2018di tempo. Tendi anche a rieseguire il rendering dell\u2019intera pagina contemporaneamente, quindi \u00e8 improbabile che i tuoi utenti interagiscano contemporaneamente con altri elementi della pagina.</p>\n<p>Qui di seguito possiamo vedere un esempio code splitting, basato sulle rotte, utilizzando libreria come <a class=\"external-link\" href=\"https://reactrouter.com/\">React Router</a> con <code class=\"language-javascript\">React.lazy</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense<span class=\"token punctuation\">,</span> lazy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span> Routes<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Home <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/Home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> About <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/About'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Routes</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">element</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Home</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">element</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">About</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Routes</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"named-exports\"><a class=\"anchor\" href=\"/react/code-splitting#named-exports\"></a>Named Exports </h2>\n<p>Ad oggi <code class=\"language-javascript\">React.lazy</code> supporta solamente gli export di default. Se il modulo che vogliamo importare utilizza export nominali, possiamo creare un modulo intermedio che lo re-esporta come default. In questo modo ci assicuriamo  che il tree shaking continui a funzionare e che non vengano caricati componenti non utilizzati.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// ManyComponents.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MyUnusedComponent <span class=\"token operator\">=</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// MyComponent.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> MyComponent <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ManyComponents.js\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// MyApp.js</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> lazy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./MyComponent.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/code-splitting.md\">Edit this page</a></p></div></article>", "path": "/react/code-splitting", "nav": ["/react/accessibility", "/react/context"]}, {"key": "Context", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Context provides a way to pass data through the component tree without having to pass props down manually at every level.</p>\n<p>In a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.</p>\n<ul>\n<li><a href=\"/react/context#when-to-use-context\">When to Use Context</a></li>\n<li><a href=\"/react/context#before-you-use-context\">Before You Use Context</a></li>\n<li>\n<p><a href=\"/react/context#api\">API</a></p>\n<ul>\n<li><a href=\"/react/context#reactcreatecontext\">React.createContext</a></li>\n<li><a href=\"/react/context#contextprovider\">Context.Provider</a></li>\n<li><a href=\"/react/context#classcontexttype\">Class.contextType</a></li>\n<li><a href=\"/react/context#contextconsumer\">Context.Consumer</a></li>\n<li><a href=\"/react/context#contextdisplayname\">Context.displayName</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/context#examples\">Examples</a></p>\n<ul>\n<li><a href=\"/react/context#dynamic-context\">Dynamic Context</a></li>\n<li><a href=\"/react/context#updating-context-from-a-nested-component\">Updating Context from a Nested Component</a></li>\n<li><a href=\"/react/context#consuming-multiple-contexts\">Consuming Multiple Contexts</a></li>\n</ul>\n</li>\n<li><a href=\"/react/context#caveats\">Caveats</a></li>\n<li><a href=\"/react/context#legacy-api\">Legacy API</a></li>\n</ul>\n<h2 id=\"when-to-use-context\"><a class=\"anchor\" href=\"/react/context#when-to-use-context\"></a>When to Use Context </h2>\n<p>Context is designed to share data that can be considered \u201cglobal\u201d for a tree of React components, such as the current authenticated user, theme, or preferred language. For example, in the code below we manually thread through a \u201ctheme\u201d prop in order to style the Button component:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// The Toolbar component must take an extra \"theme\" prop</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// and pass it to the ThemedButton. This can become painful</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// if every single button in the app needs to know the theme</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// because it would have to be passed through all components.</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Using context, we can avoid passing props through intermediate elements:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Context lets us pass a value deep into the component tree</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// without explicitly threading it through every component.</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Create a context for the current theme (with \"light\" as the default).</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Use a Provider to pass the current theme to the tree below.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Any component can read it, no matter how deep it is.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// In this example, we're passing \"dark\" as the current value.</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// A component in the middle doesn't have to</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// pass the theme down explicitly anymore.</span></span><span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Assign a contextType to read the current theme context.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// React will find the closest theme Provider above and use its value.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// In this example, the current theme is \"dark\".</span></span>  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> ThemeContext<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h2 id=\"before-you-use-context\"><a class=\"anchor\" href=\"/react/context#before-you-use-context\"></a>Before You Use Context </h2>\n<p>Context is primarily used when some data needs to be accessible by <em>many</em> components at different nesting levels. Apply it sparingly because it makes component reuse more difficult.</p>\n<p><strong>If you only want to avoid passing some props through many levels, <a href=\"/react/composition-vs-inheritance\">component composition</a> is often a simpler solution than context.</strong></p>\n<p>For example, consider a <code class=\"language-javascript\">Page</code> component that passes a <code class=\"language-javascript\">user</code> and <code class=\"language-javascript\">avatarSize</code> prop several levels down so that deeply nested <code class=\"language-javascript\">Link</code> and <code class=\"language-javascript\">Avatar</code> components can read it:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... which renders ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... which renders ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavigationBar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... which renders ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>It might feel redundant to pass down the <code class=\"language-javascript\">user</code> and <code class=\"language-javascript\">avatarSize</code> props through many levels if in the end only the <code class=\"language-javascript\">Avatar</code> component really needs it. It\u2019s also annoying that whenever the <code class=\"language-javascript\">Avatar</code> component needs more props from the top, you have to add them at all the intermediate levels too.</p>\n<p>One way to solve this issue <strong>without context</strong> is to <a href=\"/react/composition-vs-inheritance#containment\">pass down the <code class=\"language-javascript\">Avatar</code> component itself</a> so that the intermediate components don\u2019t need to know about the <code class=\"language-javascript\">user</code> or <code class=\"language-javascript\">avatarSize</code> props:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> userLink <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span> <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>userLink<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Now, we have:</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... which renders ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span> <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... which renders ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavigationBar</span></span> <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... which renders ...</span>\n<span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>userLink<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this change, only the top-most Page component needs to know about the <code class=\"language-javascript\">Link</code> and <code class=\"language-javascript\">Avatar</code> components\u2019 use of <code class=\"language-javascript\">user</code> and <code class=\"language-javascript\">avatarSize</code>.</p>\n<p>This <em>inversion of control</em> can make your code cleaner in many cases by reducing the amount of props you need to pass through your application and giving more control to the root components. Such inversion, however, isn\u2019t the right choice in every case; moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want.</p>\n<p>You\u2019re not limited to a single child for a component. You may pass multiple children, or even have multiple separate \u201cslots\u201d for children, <a href=\"/react/composition-vs-inheritance#containment\">as documented here</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Feed</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> topBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavigationBar</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">NavigationBar</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span>\n      <span class=\"token attr-name\">topBar</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>topBar<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">content</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This pattern is sufficient for many cases when you need to decouple a child from its immediate parents. You can take it even further with <a href=\"/react/render-props\">render props</a> if the child needs to communicate with the parent before rendering.</p>\n<p>However, sometimes the same data needs to be accessible by many components in the tree, and at different nesting levels. Context lets you \u201cbroadcast\u201d such data, and changes to it, to all components below. Common examples where using context might be simpler than the alternatives include managing the current locale, theme, or a data cache.</p>\n<h2 id=\"api\"><a class=\"anchor\" href=\"/react/context#api\"></a>API </h2>\n<h3 id=\"reactcreatecontext\"><a class=\"anchor\" href=\"/react/context#reactcreatecontext\"></a><code class=\"language-javascript\">React.createContext</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Creates a Context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching <code class=\"language-javascript\">Provider</code> above it in the tree.</p>\n<p>The <code class=\"language-javascript\">defaultValue</code> argument is <strong>only</strong> used when a component does not have a matching Provider above it in the tree. This default value can be helpful for testing components in isolation without wrapping them. Note: passing <code class=\"language-javascript\">undefined</code> as a Provider value does not cause consuming components to use <code class=\"language-javascript\">defaultValue</code>.</p>\n<h3 id=\"contextprovider\"><a class=\"anchor\" href=\"/react/context#contextprovider\"></a><code class=\"language-javascript\">Context.Provider</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* some value */</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.</p>\n<p>The Provider component accepts a <code class=\"language-javascript\">value</code> prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.</p>\n<p>All consumers that are descendants of a Provider will re-render whenever the Provider\u2019s <code class=\"language-javascript\">value</code> prop changes. The propagation from Provider to its descendant consumers (including <a href=\"/react/context#classcontexttype\"><code class=\"language-javascript\">.contextType</code></a> and <a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a>) is not subject to the <code class=\"language-javascript\">shouldComponentUpdate</code> method, so the consumer is updated even when an ancestor component skips an update.</p>\n<p>Changes are determined by comparing the new and old values using the same algorithm as <a href=\"//developer.mozilla.org/en-US/react/Web/JavaScript/Reference/Global_Objects/Object/is#Description\"><code class=\"language-javascript\">Object.is</code></a>.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>The way changes are determined can cause some issues when passing objects as <code class=\"language-javascript\">value</code>: see <a href=\"/react/context#caveats\">Caveats</a>.</p>\n</div>\n<h3 id=\"classcontexttype\"><a class=\"anchor\" href=\"/react/context#classcontexttype\"></a><code class=\"language-javascript\">Class.contextType</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* perform a side-effect at mount using the value of MyContext */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* render something based on the value of MyContext */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nMyClass<span class=\"token punctuation\">.</span>contextType <span class=\"token operator\">=</span> MyContext<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-javascript\">contextType</code> property on a class can be assigned a Context object created by <a href=\"/react/context#reactcreatecontext\"><code class=\"language-javascript\">React.createContext()</code></a>. Using this property lets you consume the nearest current value of that Context type using <code class=\"language-javascript\">this.context</code>. You can reference this in any of the lifecycle methods including the render function.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>You can only subscribe to a single context using this API. If you need to read more than one see <a href=\"/react/context#consuming-multiple-contexts\">Consuming Multiple Contexts</a>.</p>\n<p>If you are using the experimental <a class=\"external-link\" href=\"https://babeljs.io/docs/plugins/transform-class-properties/\">public class fields syntax</a>, you can use a <strong>static</strong> class field to initialize your <code class=\"language-javascript\">contextType</code>.</p>\n</div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> MyContext<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* render something based on the value */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"contextconsumer\"><a class=\"anchor\" href=\"/react/context#contextconsumer\"></a><code class=\"language-javascript\">Context.Consumer</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">/* render something based on the context value */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>A React component that subscribes to context changes. Using this component lets you subscribe to a context within a <a href=\"/react/components-and-props#function-and-class-components\">function component</a>.</p>\n<p>Requires a <a href=\"/react/render-props#using-props-other-than-render\">function as a child</a>. The function receives the current context value and returns a React node. The <code class=\"language-javascript\">value</code> argument passed to the function will be equal to the <code class=\"language-javascript\">value</code> prop of the closest Provider for this context above in the tree. If there is no Provider for this context above, the <code class=\"language-javascript\">value</code> argument will be equal to the <code class=\"language-javascript\">defaultValue</code> that was passed to <code class=\"language-javascript\">createContext()</code>.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>For more information about the \u2018function as a child\u2019 pattern, see <a href=\"/react/render-props\">render props</a>.</p>\n</div>\n<h3 id=\"contextdisplayname\"><a class=\"anchor\" href=\"/react/context#contextdisplayname\"></a><code class=\"language-javascript\">Context.displayName</code> </h3>\n<p>Context object accepts a <code class=\"language-javascript\">displayName</code> string property. React DevTools uses this string to determine what to display for the context.</p>\n<p>For example, the following component will appear as MyDisplayName in the DevTools:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* some value */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">MyContext<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token string\">'MyDisplayName'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> // \"MyDisplayName.Provider\" in DevTools</span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> // \"MyDisplayName.Consumer\" in DevTools</span></code></pre></div>\n<h2 id=\"examples\"><a class=\"anchor\" href=\"/react/context#examples\"></a>Examples </h2>\n<h3 id=\"dynamic-context\"><a class=\"anchor\" href=\"/react/context#dynamic-context\"></a>Dynamic Context </h3>\n<p>A more complex example with dynamic values for the theme:</p>\n<p><strong>theme-context.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> themes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">light</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foreground</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000000'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">'#eeeeee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dark</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foreground</span><span class=\"token operator\">:</span> <span class=\"token string\">'#ffffff'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">'#222222'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  themes<span class=\"token punctuation\">.</span>dark <span class=\"token comment\">// default value</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n</div></p>\n<p><strong>themed-button.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> theme <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">ThemedButton<span class=\"token punctuation\">.</span>contextType <span class=\"token operator\">=</span> ThemeContext<span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemedButton<span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong>app.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">,</span> themes<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ThemedButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./themed-button'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// An intermediate component that uses the ThemedButton</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>changeTheme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      Change Theme</span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemedButton</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toggleTheme</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span>\n          state<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">===</span> themes<span class=\"token punctuation\">.</span>dark\n            <span class=\"token operator\">?</span> themes<span class=\"token punctuation\">.</span>light\n            <span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// The ThemedButton button inside the ThemeProvider</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// uses the theme from state while the one outside uses</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// the default dark theme</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token attr-name\">changeTheme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleTheme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Section</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Section</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Page</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<h3 id=\"updating-context-from-a-nested-component\"><a class=\"anchor\" href=\"/react/context#updating-context-from-a-nested-component\"></a>Updating Context from a Nested Component </h3>\n<p>It is often necessary to update the context from a component that is nested somewhere deeply in the component tree. In this case you can pass a function down through the context to allow consumers to update the context:</p>\n<p><strong>theme-context.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Make sure the shape of the default value passed to</span>\n<span class=\"token comment\">// createContext matches the shape that the consumers expect!</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">toggleTheme</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong>theme-toggler-button.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ThemeTogglerButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// The Theme Toggler Button receives not only the theme</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// but also a toggleTheme function from the context</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">,</span> toggleTheme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>toggleTheme<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Toggle Theme</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemeTogglerButton<span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong>app.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">,</span> themes<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ThemeTogglerButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-toggler-button'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toggleTheme</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span>\n          state<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">===</span> themes<span class=\"token punctuation\">.</span>dark\n            <span class=\"token operator\">?</span> themes<span class=\"token punctuation\">.</span>light\n            <span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// State also contains the updater function so it will</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// be passed down into the context provider</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">toggleTheme</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleTheme<span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// The entire state is passed to the provider</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeTogglerButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<h3 id=\"consuming-multiple-contexts\"><a class=\"anchor\" href=\"/react/context#consuming-multiple-contexts\"></a>Consuming Multiple Contexts </h3>\n<p>To keep context re-rendering fast, React needs to make each context consumer a separate node in the tree.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Theme context, default to light theme</span>\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Signed-in user context</span>\n<span class=\"token keyword\">const</span> UserContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Guest'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>signedInUser<span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// App component that provides initial context values</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>signedInUser<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UserContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Sidebar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// A component may consume multiple contexts</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">theme</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProfilePage</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UserContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>If two or more context values are often used together, you might want to consider creating your own render prop component that provides both.</p>\n<h2 id=\"caveats\"><a class=\"anchor\" href=\"/react/context#caveats\"></a>Caveats </h2>\n<p>Because context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider\u2019s parent re-renders. For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for <code class=\"language-javascript\">value</code>:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> <span class=\"token string\">'something'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>To get around this, lift the value into the parent\u2019s state:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> <span class=\"token string\">'something'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h2 id=\"legacy-api\"><a class=\"anchor\" href=\"/react/context#legacy-api\"></a>Legacy API </h2>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>React previously shipped with an experimental context API. The old API will be supported in all 16.x releases, but applications using it should migrate to the new version. The legacy API will be removed in a future major React version. Read the <a href=\"/react/legacy-context\">legacy context docs here</a>.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/context.md\">Edit this page</a></p></div></article>", "path": "/react/context", "nav": ["/react/code-splitting", "/react/error-boundaries"]}, {"key": "Contenitori di Errori", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>In passato, gli errori JavaScript all\u2019interno dei componenti causavano la corruzione dello stato interno di React e l\u2019<a class=\"external-link\" href=\"https://github.com/facebook/react/issues/4026\">emissione</a> di <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/8579\">errori</a> <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/6895\">criptici</a> nei rendering successivi. Questi errori erano sempre causati da un errore precedente nel codice dell\u2019applicazione, ma React non forniva nessun modo per poterli gestire correttamente nei componenti e non poteva ripristinarli.</p>\n<h2 id=\"introducing-error-boundaries\"><a class=\"anchor\" href=\"/react/error-boundaries#introducing-error-boundaries\"></a>Introduzione ai contenitori di errori </h2>\n<p>Un errore JavaScript in una qualche parte della UI non dovrebbe rompere l\u2019intera applicazione. Per risolvere questo problema, a partire dalla versione 16 di React, viene introdotto il concetto di \u201ccontenitore di errori (error boundary)\u201c.</p>\n<p>I contenitori di errori sono componenti React che <strong>catturano gli errori JavaScript in uno qualsiasi dei componenti figli nell\u2019albero dei componenti, loggano gli errori e mostrano, all\u2019utente, una UI di fallback</strong> anzich\u00e9 mostrare il componente che ha causato l\u2019errore. I contenitori di errore catturano gli errori durante il rendering, nei metodi del ciclo di vita di un componente e nei costruttori dell\u2019intero albero di componenti sottostante.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>I contenitori di errore non catturano gli errori di:</p>\n<ul>\n<li>Gestore di eventi (<a href=\"/react/error-boundaries#how-about-event-handlers\">approfondisci</a>)</li>\n<li>Codice asincrono (come ad esempio le callback <code class=\"language-javascript\">setTimeout</code> o <code class=\"language-javascript\">requestAnimationFrame</code>)</li>\n<li>Rendering lato server</li>\n<li>Errori sollevati all\u2019interno del contenitore stesso (piuttosto che nei suoi figli)</li>\n</ul>\n</div>\n<p>Un componente basato su classe diventa un contenitore di errori se definisce uno, o entrambi, i metodi del ciclo di vita <a href=\"/react/react-component#static-getderivedstatefromerror\"><code class=\"language-javascript\">static getDerivedStateFromError()</code></a> e <a href=\"/react/react-component#componentdidcatch\"><code class=\"language-javascript\">componentDidCatch()</code></a>. Utilizza <code class=\"language-javascript\">static getDerivedStateFromError()</code> per renderizzare una UI di fallback dopo che l\u2019errore \u00e8 stato sollevato. Utilizza <code class=\"language-javascript\">componentDidCatch()</code> per loggare informazioni sull\u2019errore.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Update state so the next render will show the fallback UI.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> errorInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// You can also log the error to an error reporting service</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">logErrorToMyService</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// You can render any custom fallback UI</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Something went wrong.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dopodich\u00e9 lo si pu\u00f2 utilizzare come un normalissimo componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyWidget</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>I contenitori di errore lavorano all\u2019incirca come il <code class=\"language-javascript\">catch {}</code> di JavaScript, ma sottoforma di componente. Solamente i componenti di tipo classe possono essere contenitori di errori. In pratica, nella maggioranza dei casi, si vuole scrivere un contenitore di errori una sola volta, per poi riutilizzarlo ovunque nell\u2019applicazione.</p>\n<p>Da notare che <strong>i contenitori di errori catturano gli errori solo nei componenti sottostanti nell\u2019albero dei componenti</strong>. Un contenitore di errori non pu\u00f2 catturare errori all\u2019interno di se stesso. Se un contenitore di errore fallisce mentre prova a renderizzare il messaggio di errore, l\u2019errore viene propagato sopra di lui al pi\u00f9 vicino contenitore di errori sopra di lui. Anche questo aspetto \u00e8 molto simile a come funzione il blocco <code class=\"language-javascript\">catch {}</code> di JavaScript.</p>\n<h2 id=\"live-demo\"><a class=\"anchor\" href=\"/react/error-boundaries#live-demo\"></a>Demo </h2>\n<p>Guarda <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/wqvxGa?editors=0010\">questo esempio di dichiarazione e utilizzo di un contenitore di errori</a>.</p>\n<h2 id=\"where-to-place-error-boundaries\"><a class=\"anchor\" href=\"/react/error-boundaries#where-to-place-error-boundaries\"></a>Dove si dichiarano i contenitori di errori? </h2>\n<p>La granularit\u00e0 dei contenitori di errori \u00e8 a discrezione dello sviluppatore. Potresti voler wrappare i componenti di rotte di primo livello facendo vedere un messaggio tipo \u201cQualcosa \u00e8 andato storto\u201d all\u2019utente proprio come i framework lato server, spesso, gestiscono i crash. Potresti anche voler wrappare singoli widget all\u2019interno di un contenitore di errori per proteggerli da crash che possono avvenire all\u2019interno dell\u2019applicazione.</p>\n<h2 id=\"new-behavior-for-uncaught-errors\"><a class=\"anchor\" href=\"/react/error-boundaries#new-behavior-for-uncaught-errors\"></a>Nuovi comportamenti per errori non rilevati </h2>\n<p>Questi cambiamenti hanno un\u2019importante implicazione. <strong>A partire dalla versione 16 di React, gli errori che non vengono catturati da nessun contenitore di errori, porteranno allo smontaggio dell\u2019intero albero dei componenti di React</strong>.</p>\n<p>Abbiamo discusso molto prima di prendere questa decisione ma, secondo la nostra esperienza \u00e8 peggio lasciare una UI rotta piuttosto che rimuoverla completamente. Ad esempio, in prodotti come Messenger, lasciare visibile una UI rotta pu\u00f2 portare qualcuno a mandare un messaggio alla persona sbagliata. In modo simile, in un\u2019applicazione di pagamenti \u00e8 peggiore mostrare un importo sbagliato piuttosto che non far vedere nulla.</p>\n<p>Questi cambiamenti significano che se migrate verso React 16 probabilmente scoprirete, all\u2019interno della vostra applicazione, dei crash che prima venivano ignorati. Aggiungere contenitori di errori vi aiuta a fornire una migliore user experience quando qualcosa va storto.</p>\n<p>Ad esempio Facebook Messenger wrappa il contenuto della barra laterale, del pannello informativo, delle conversazioni e dei messaggi di input in contenitori di errori separati. Se qualche componente in una delle precedenti aree si rompe, il resto dell\u2019applicazione rimane comunque interattiva.</p>\n<p>Vi incoraggiamo inoltre ad utilizzare dei servizi JavaScript di reportistica (o costruitene una personalizzata) cosicch\u00e9 da capire che tipo di eccezioni vengono sollevate in produzione, e che non vengono catturate, e fixarle.</p>\n<h2 id=\"component-stack-traces\"><a class=\"anchor\" href=\"/react/error-boundaries#component-stack-traces\"></a>Stack trace dei componenti </h2>\n<p>La versione 16 di React stampa tutti gli errori, che vengono sollevati durante il rendering, nella console degli sviluppatori, anche se l\u2019applicazione accidentamente li nasconde. Oltre al messaggio di errore, e allo stack JavaScript, React 16 fornisce anche lo stack trace dei componenti. Si pu\u00f2 vedere esattamente dove, nell\u2019albero dei componenti, sta l\u2019errore:</p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/f1276837b03821b43358d44c14072945/c3a47/error-boundaries-stack-trace.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/f1276837b03821b43358d44c14072945/1e088/error-boundaries-stack-trace.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>E\u2019 anche possibile vedere i nomi dei file e i numeri di linea nello stack trace del componente. Questo \u00e8 il comportamento di default nei progetti creati con <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>:</p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/45611d4fdbd152829b28ae2348d6dcba/6dd26/error-boundaries-stack-trace-line-numbers.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/45611d4fdbd152829b28ae2348d6dcba/1e088/error-boundaries-stack-trace-line-numbers.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Se avete creato l\u2019applicazione senza usare Create React App, potete usare <a class=\"external-link\" href=\"https://www.npmjs.com/package/@babel/plugin-transform-react-jsx-source\">questo plugin</a> da aggiungere, manualmente, alla configurazione Babel. Tieni presente che tutto ci\u00f2 vale solo per l\u2019ambiente di sviluppo e <strong>deve essere disabilitato in produzione</strong>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>I nomi dei componenti visualizzati nello stack trace dipendono dalla propriet\u00e0 <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code class=\"language-javascript\">Function.name</code></a>. Se fornite supporto a browser vecchi che non forniscono questa cosa nativamente (come ad esempio IE 11), potete prendere in considerazione di includere il polyfill <code class=\"language-javascript\">Function.name</code> all\u2019interno del bundle dell\u2019applicazione, come ad esempio <a class=\"external-link\" href=\"https://github.com/JamesMGreene/Function.name\"><code class=\"language-javascript\">function.name-polyfill</code></a>. Alternativamente possiamo, esplicitamente, settare la propriet\u00e0 <a href=\"/react/react-component#displayname\"><code class=\"language-javascript\">displayName</code></a> su tutti i componenti.</p>\n</div>\n<h2 id=\"how-about-trycatch\"><a class=\"anchor\" href=\"/react/error-boundaries#how-about-trycatch\"></a>Che dire di try/catch? </h2>\n<p><code class=\"language-javascript\">try</code> / <code class=\"language-javascript\">catch</code> \u00e8 ottimo ma funziona solo per codice imperativo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">showButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tuttavia i componenti di React sono molto dichiarativi e specificano cosa deve essere renderizzato:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>I contenitori di errore preservano la natura dichiarativa di React e si comportano esattamente come ci si aspetta. Ad esempio, anche se l\u2019errore capita nel metodo <code class=\"language-javascript\">componentDidUpdate</code>, causato da <code class=\"language-javascript\">setState</code> sollevato da qualche parte in profondit\u00e0 nell\u2019albero, continuer\u00e0 a propagare correttamente l\u2019errore al pi\u00f9 vicino contenitore di errori.</p>\n<h2 id=\"how-about-event-handlers\"><a class=\"anchor\" href=\"/react/error-boundaries#how-about-event-handlers\"></a>Che dire del gestore degli eventi? </h2>\n<p>I contenitori di errori <strong>non catturano</strong> gli errori all\u2019interno dei gestori degli eventi.</p>\n<p>React non ha necessit\u00e0 di contenitori di errori per i gestori degli eventi. A differenza dei metodi di render e dei metodi del ciclo di vita, i gestori degli eventi non si hanno durante il rendering. Quindi se questi lanciano un errore, React continua comunque a sapere cosa visualizzare sullo schermo.</p>\n<p>Se hai bisogno di catturare un errore all\u2019interno di un gestore degli eventi, utilizza il <code class=\"language-javascript\">try</code> / <code class=\"language-javascript\">catch</code> di JavaScript:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Do something that could throw</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Caught an error.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notate che l\u2019esempio di codice precedente mostra il regolare comportamento di JavaScript e non usa contenitori di errori.</p>\n<h2 id=\"naming-changes-from-react-15\"><a class=\"anchor\" href=\"/react/error-boundaries#naming-changes-from-react-15\"></a>Cambiamenti di nome a partire da React 15 </h2>\n<p>La versione 15 di React include un limitato supporto per i contenitori di errori sotto diversi nomi: <code class=\"language-javascript\">unstable_handleError</code>. Questo metodo non funziona pi\u00f9 e dovresti sostituirlo con <code class=\"language-javascript\">componentDidCatch</code> a partire dalla versione 16 beta.</p>\n<p>Per questi cambiamenti, viene fornito <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#error-boundaries\">codemod</a> che automaticamente migra il tuo codice.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/error-boundaries.md\">Edit this page</a></p></div></article>", "path": "/react/error-boundaries", "nav": ["/react/context", "/react/forwarding-refs"]}, {"key": "Inoltrare Refs", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>L\u2019inoltro delle ref \u00e8 una tecnica per passare automaticamente una <a href=\"/react/refs-and-the-dom\">ref</a> attraverso un componente ad uno dei suoi figli. Tipicamente questo non \u00e8 necessario per la maggior parte dei componenti dell\u2019applicazione. Pu\u00f2 comunque essere molto utile per alcuni tipi di componenti, specialmente per i componenti riusabili appartenenti alle librerie. Lo scenario pi\u00f9 comune \u00e8 descritto di seguito.</p>\n<h2 id=\"forwarding-refs-to-dom-components\"><a class=\"anchor\" href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\"></a>Inoltro delle refs ai componenti del DOM </h2>\n<p>Considera di avere un componente <code class=\"language-javascript\">FancyButton</code> che renderizza l\u2019elemento nativo del DOM <code class=\"language-javascript\">button</code>\n:<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>I componenti React nascondono i dettagli della loro implementazione, incluso il loro output renderizzato. Altri componenti che usano <code class=\"language-javascript\">FancyButton</code> <strong>solitamente non hanno bisogno di</strong> <a href=\"/react/refs-and-the-dom\">ottenere una ref</a> dell\u2019elemento interno del DOM <code class=\"language-javascript\">button</code>. Ci\u00f2 \u00e8 ottimo perch\u00e9 previene ai componenti di affidarsi troppo alla struttura DOM l\u2019uno dell\u2019altro.</p>\n<p>Sebbene questa incapsulazione sia desiderabile per componenti a livello applicativo come <code class=\"language-javascript\">FeedStory</code> o <code class=\"language-javascript\">Comment</code>, pu\u00f2 essere conveniente per componenti \u201cfoglia\u201d altamente riutilizzabili come <code class=\"language-javascript\">FancyButton</code> o <code class=\"language-javascript\">MyTextInput</code>. Questi componenti tendono ad essere utilizzati attraverso l\u2019applicazione in modo simile agli elementi del DOM <code class=\"language-javascript\">button</code> e <code class=\"language-javascript\">input</code> e l\u2019accesso ai loro nodi DOM pu\u00f2 essere inevitabile per la gestione di messa a fuoco, selezione, o animazioni. </p>\n<p><strong>L\u2019inoltro delle refs \u00e8 una feature opt-in che permette ad alcuni componenti di prendere le <code class=\"language-javascript\">ref</code> che ricevono e passarle in basso (in altre parole avanti) ai suoi figli.</strong></p>\n<p>Nell\u2019esempio seguente, <code class=\"language-javascript\">FancyButton</code> utilizza <code class=\"language-javascript\">React.forwardRef</code> per ottenere la <code class=\"language-javascript\">ref</code> passata, dopodich\u00e9 la passa all\u2019elemento del DOM <code class=\"language-javascript\">button</code> che la renderizza:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> FancyButton <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// You can now get a ref directly to the DOM button:</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyButton</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click me!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyButton</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>In questo modo i componenti che usano <code class=\"language-javascript\">FancyButton</code> possono ottenere una ref al nodo del DOM <code class=\"language-javascript\">button</code> e accedervi, se necessario, proprio come se utilizzassero l\u2019elemento del DOM <code class=\"language-javascript\">button</code> direttamente.</p>\n<p>Qui puoi trovare una spiegazione passo passo di quello che succede nel precedente esempio:</p>\n<ol>\n<li>Creiamo una <a href=\"/react/refs-and-the-dom\">ref React</a> chiamando <code class=\"language-javascript\">React.createRef</code> e assegnandola ad una variabile <code class=\"language-javascript\">ref</code>.</li>\n<li>Passiamo la nostra <code class=\"language-javascript\">ref</code> a <code class=\"language-javascript\">&lt;FancyButton ref={ref}&gt;</code> specificandola come un attributo JSX.</li>\n<li>React passa la <code class=\"language-javascript\">ref</code> alla funzione <code class=\"language-javascript\">(props, ref) =&gt; ...</code> all\u2019interno di <code class=\"language-javascript\">forwardRef</code> come secondo argomento.</li>\n<li>Passiamo questo argomento <code class=\"language-javascript\">ref</code> a <code class=\"language-javascript\">&lt;button ref={ref}&gt;</code> specificandolo come attributo JSX.</li>\n<li>Quando la ref \u00e8 attaccata, <code class=\"language-javascript\">ref.current</code> punter\u00e0 all\u2019elemento del DOM <code class=\"language-javascript\">button</code>.</li>\n</ol>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Il secondo argomento <code class=\"language-javascript\">ref</code> esiste solamente quando viene definito un componente con la chiamata <code class=\"language-javascript\">React.forwardRef</code>. I componenti di tipo classe e di tipo funzione non ricevono l\u2019argomento <code class=\"language-javascript\">ref</code> e la <code class=\"language-javascript\">ref</code> non \u00e8 disponibile nemmeno nelle props.</p>\n<p>L\u2019inoltro delle Ref non \u00e8 limitato ai componenti del DOM. Possiamo passare le refs anche ad istanze di componenti classe.</p>\n</div>\n<h2 id=\"note-for-component-library-maintainers\"><a class=\"anchor\" href=\"/react/forwarding-refs#note-for-component-library-maintainers\"></a>Nota per i mantenitori di librerie di componenti </h2>\n<p><strong>Quando inizi ad usare <code class=\"language-javascript\">forwardRef</code> nelle librerie di componenti, dovresti trattarlo come una breaking change e rilasciare una nuova versione della libreria.</strong> Questo perch\u00e9 la tua libreria probabilmente ha un comportamento diverso (ad esempio nel modo in cui le ref sono assegnate e i tipi che sono esportati), e questo pu\u00f2 rompere applicazioni e altre librerie che dipendono da questo vecchio comportamento.</p>\n<p>Applicare in modo condizionale le <code class=\"language-javascript\">React.forwardRef</code> quando esistono non \u00e8 raccomandato per alcune ragioni: cambiano il comportamento della tua libreria e possono rompere le applicazioni degli utenti quando questi aggiornano React.</p>\n<h2 id=\"forwarding-refs-in-higher-order-components\"><a class=\"anchor\" href=\"/react/forwarding-refs#forwarding-refs-in-higher-order-components\"></a>Inoltro delle refs in componenti di tipo higher-order </h2>\n<p>Questa tecnica pu\u00f2 anche essere particolarmente utile con <a href=\"/react/higher-order-components\">componenti di tipo higher-order</a> (conosciuti anche come HOC). Iniziamo con un esempio che logga le props di un componente in console:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'old props:'</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new props:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> LogProps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>L\u2019HOC \u201clogProps\u201d passa tutte le <code class=\"language-javascript\">props</code> attraverso il componente che lo contiene, in questo modo l\u2019output renderizzato sar\u00e0 il solito. Ad esempio possiamo usare l\u2019HOC per stampare tutte le props passate al componente <code class=\"language-javascript\">FancyButton</code>:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FancyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Rather than exporting FancyButton, we export LogProps.</span>\n<span class=\"token comment\">// It will render a FancyButton though.</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>FancyButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n</div></p>\n<p>C\u2019\u00e8 un avvertimento all\u2019esempio precedente: le refs non saranno passate attraverso di esso. Questo perch\u00e9 una <code class=\"language-javascript\">ref</code> non \u00e8 una prop. Come la <code class=\"language-javascript\">key</code>, \u00e8 maneggiata in modo diverso da React. Se vuoi aggiungere una ref ad un HOC, la ref dovr\u00e0 riferirsi ad un componente container pi\u00f9 esterno, non al componente che lo contiene.</p>\n<p>Questo significa che le refs per il nostro componente <code class=\"language-javascript\">FancyButton</code> saranno attaccate al componente <code class=\"language-javascript\">LogProps</code>:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> FancyButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./FancyButton'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// The FancyButton component we imported is the LogProps HOC.</span>\n<span class=\"token comment\">// Even though the rendered output will be the same,</span>\n<span class=\"token comment\">// Our ref will point to LogProps instead of the inner FancyButton component!</span>\n<span class=\"token comment\">// This means we can't call e.g. ref.current.focus()</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyButton</span></span>\n  <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Click Me<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">handleClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Fortunatamente possiamo passare le refs esplicitamente al componente interno <code class=\"language-javascript\">FancyButton</code> utilizzando le API <code class=\"language-javascript\">React.forwardRef</code>. <code class=\"language-javascript\">React.forwardRef</code> accetta una funzione di renderizzazione che riceve le <code class=\"language-javascript\">props</code> e le <code class=\"language-javascript\">ref</code> come parametri e le ritorna ad un nodo React. Ad esempio:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'old props:'</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new props:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>forwardedRef<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></span>\n      <span class=\"token comment\">// Assign the custom prop \"forwardedRef\" as a ref</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>forwardedRef<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Note the second param \"ref\" provided by React.forwardRef.</span>\n  <span class=\"token comment\">// We can pass it along to LogProps as a regular prop, e.g. \"forwardedRef\"</span>\n  <span class=\"token comment\">// And it can then be attached to the Component.</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h2 id=\"displaying-a-custom-name-in-devtools\"><a class=\"anchor\" href=\"/react/forwarding-refs#displaying-a-custom-name-in-devtools\"></a>Mostrare un nome custom negli strumenti dello sviluppatore </h2>\n<p><code class=\"language-javascript\">React.forwardRef</code> accetta una funzione di renderizzazione. Gli strumenti per gli sviluppatori di React utilizzano questa funzione per determinare cosa mostrare per l\u2019inoltro al componente.</p>\n<p>Ad esempio, il seguente componente apparir\u00e0 come \u201d<em>ForwardRef</em>\u201d negli strumenti per sviluppatori:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> WrappedComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Se assegni un nome alla funzione di renderizzazione, gli strumenti per sviluppatori includeranno anche il suo nome (ad esempio \u201d<em>ForwardRef(myFunction)</em>\u201c)</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> WrappedComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Puoi anche settare la propriet\u00e0 <code class=\"language-javascript\">displayName</code> della funzione per includere il componente che stai avvolgendo:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Give this component a more helpful display name in DevTools.</span>\n  <span class=\"token comment\">// e.g. \"ForwardRef(logProps(MyComponent))\"</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> Component<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> Component<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  forwardRef<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">logProps(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>forwardRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/forwarding-refs.md\">Edit this page</a></p></div></article>", "path": "/react/forwarding-refs", "nav": ["/react/error-boundaries", "/react/fragments"]}, {"key": "Frammenti", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Un modello comune in React \u00e8 di restituire molteplici elementi per un componente. I frammenti ti consentono di raggruppare una lista di figli senza aggiungere nodi extra al DOM.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildA</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildB</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildC</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>C\u2019\u00e8 anche una nuova <a href=\"/react/fragments#short-syntax\">sintassi breve</a> per dichiararli.</p>\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"/react/fragments#motivation\"></a>Motivazione </h2>\n<p>Un modello comune per un componente \u00e8 di restituire una lista di figli. Guarda questo esempio di una parte del codice React:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Table</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Columns</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">&lt;Columns /&gt;</code> avrebbe bisogno di restituire multipli elementi <code class=\"language-javascript\">&lt;td&gt;</code> in ordine per affinch\u00e8 l\u2019HTML renderizzato sia valido. Se un parente div \u00e8 stato usato dentro il <code class=\"language-javascript\">render()</code> di <code class=\"language-javascript\">&lt;Columns /&gt;</code>, l\u2019HTML risultante non sar\u00e0 valido.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>generer\u00e0 in <code class=\"language-javascript\">&lt;Table /&gt;</code> il seguente risultato:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>I frammenti risolvono questo problema.</p>\n<h2 id=\"usage\"><a class=\"anchor\" href=\"/react/fragments#usage\"></a>Utilizzo </h2>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>che dar\u00e0 in <code class=\"language-javascript\">&lt;Table /&gt;</code> un corretto risultato:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h3 id=\"short-syntax\"><a class=\"anchor\" href=\"/react/fragments#short-syntax\"></a>Sintassi Breve </h3>\n<p>C\u2019\u00e8 una nuova e breve sintassi che puoi usare per dichiarare i frammenti. Sembra come se avessimo dei tag vuoti:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Puoi utilizzare <code class=\"language-javascript\">&lt;&gt;&lt;/&gt;</code> allo stesso modo in cui hai utilizzato ogni altro elemento, ad eccezione che questa sintassi non supporta chiavi e attributi.</p>\n<h3 id=\"keyed-fragments\"><a class=\"anchor\" href=\"/react/fragments#keyed-fragments\"></a>Frammenti Chiave </h3>\n<p>I frammenti dichiarati con l\u2019esplicita sintassi <code class=\"language-javascript\">&lt;React.Fragment&gt;</code> possono avere chiavi. Un caso di utilizzo pu\u00f2 essere mappare una collezione su un array di frammenti \u2014 per esempio, per creare una lista di descrizioni:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// Without the `key`, React will fire a key warning</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">key</code> \u00e8 l\u2019unico attributo che pu\u00f2 essere accettato da <code class=\"language-javascript\">Fragment</code>. In futuro, potremo aggiungere un supporto per attributi aggiuntivi, come per i gestori di eventi.</p>\n<h3 id=\"live-demo\"><a class=\"anchor\" href=\"/react/fragments#live-demo\"></a>Dimostrazione dal vivo </h3>\n<p>Puoi provare la nuova sintassi del frammento JSX con questo <a class=\"external-link\" href=\"https://codepen.io/reactjs/pen/VrEbjE?editors=1000\">CodePen</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/fragments.md\">Edit this page</a></p></div></article>", "path": "/react/fragments", "nav": ["/react/forwarding-refs", "/react/higher-order-components"]}, {"key": "Componenti di Ordine Superiore", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>A higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React\u2019s compositional nature.</p>\n<p>Concretely, <strong>a higher-order component is a function that takes a component and returns a new component.</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">higherOrderComponent</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Whereas a component transforms props into UI, a higher-order component transforms a component into another component.</p>\n<p>HOCs are common in third-party React libraries, such as Redux\u2019s <a class=\"external-link\" href=\"https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#connect\"><code class=\"language-javascript\">connect</code></a> and Relay\u2019s <a class=\"external-link\" href=\"https://relay.dev/docs/v10.1.3/fragment-container/#createfragmentcontainer\"><code class=\"language-javascript\">createFragmentContainer</code></a>.</p>\n<p>In this document, we\u2019ll discuss why higher-order components are useful, and how to write your own.</p>\n<h2 id=\"use-hocs-for-cross-cutting-concerns\"><a class=\"anchor\" href=\"/react/higher-order-components#use-hocs-for-cross-cutting-concerns\"></a>Use HOCs For Cross-Cutting Concerns </h2>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>We previously recommended mixins as a way to handle cross-cutting concerns. We\u2019ve since realized that mixins create more trouble than they are worth. <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">Read more</a> about why we\u2019ve moved away from mixins and how you can transition your existing components.</p>\n</div>\n<p>Components are the primary unit of code reuse in React. However, you\u2019ll find that some patterns aren\u2019t a straightforward fit for traditional components.</p>\n<p>For example, say you have a <code class=\"language-javascript\">CommentList</code> component that subscribes to an external data source to render a list of comments:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// \"DataSource\" is some global data source</span>\n      <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Subscribe to changes</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Clean up listener</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Update component state whenever the data source changes</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">comment</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span></span> <span class=\"token attr-name\">comment</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Later, you write a component for subscribing to a single blog post, which follows a similar pattern:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPost</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">blogPost</span><span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">blogPost</span><span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TextBlock</span></span> <span class=\"token attr-name\">text</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>blogPost<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">CommentList</code> and <code class=\"language-javascript\">BlogPost</code> aren\u2019t identical \u2014 they call different methods on <code class=\"language-javascript\">DataSource</code>, and they render different output. But much of their implementation is the same:</p>\n<ul>\n<li>On mount, add a change listener to <code class=\"language-javascript\">DataSource</code>.</li>\n<li>Inside the listener, call <code class=\"language-javascript\">setState</code> whenever the data source changes.</li>\n<li>On unmount, remove the change listener.</li>\n</ul>\n<p>You can imagine that in a large app, this same pattern of subscribing to <code class=\"language-javascript\">DataSource</code> and calling <code class=\"language-javascript\">setState</code> will occur over and over again. We want an abstraction that allows us to define this logic in a single place and share it across many components. This is where higher-order components excel.</p>\n<p>We can write a function that creates components, like <code class=\"language-javascript\">CommentList</code> and <code class=\"language-javascript\">BlogPost</code>, that subscribe to <code class=\"language-javascript\">DataSource</code>. The function will accept as one of its arguments a child component that receives the subscribed data as a prop. Let\u2019s call the function <code class=\"language-javascript\">withSubscription</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> CommentListWithSubscription <span class=\"token operator\">=</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>\n  CommentList<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">DataSource</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> BlogPostWithSubscription <span class=\"token operator\">=</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>\n  BlogPost<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">DataSource<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The first parameter is the wrapped component. The second parameter retrieves the data we\u2019re interested in, given a <code class=\"language-javascript\">DataSource</code> and the current props.</p>\n<p>When <code class=\"language-javascript\">CommentListWithSubscription</code> and <code class=\"language-javascript\">BlogPostWithSubscription</code> are rendered, <code class=\"language-javascript\">CommentList</code> and <code class=\"language-javascript\">BlogPost</code> will be passed a <code class=\"language-javascript\">data</code> prop with the most current data retrieved from <code class=\"language-javascript\">DataSource</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// This function takes a component...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent<span class=\"token punctuation\">,</span> selectData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...and returns another component...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token function\">selectData</span><span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ... that takes care of the subscription...</span>\n      DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token function\">selectData</span><span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ... and renders the wrapped component with the fresh data!</span>\n      <span class=\"token comment\">// Notice that we pass through any additional props</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that a HOC doesn\u2019t modify the input component, nor does it use inheritance to copy its behavior. Rather, a HOC <em>composes</em> the original component by <em>wrapping</em> it in a container component. A HOC is a pure function with zero side-effects.</p>\n<p>And that\u2019s it! The wrapped component receives all the props of the container, along with a new prop, <code class=\"language-javascript\">data</code>, which it uses to render its output. The HOC isn\u2019t concerned with how or why the data is used, and the wrapped component isn\u2019t concerned with where the data came from.</p>\n<p>Because <code class=\"language-javascript\">withSubscription</code> is a normal function, you can add as many or as few arguments as you like. For example, you may want to make the name of the <code class=\"language-javascript\">data</code> prop configurable, to further isolate the HOC from the wrapped component. Or you could accept an argument that configures <code class=\"language-javascript\">shouldComponentUpdate</code>, or one that configures the data source. These are all possible because the HOC has full control over how the component is defined.</p>\n<p>Like components, the contract between <code class=\"language-javascript\">withSubscription</code> and the wrapped component is entirely props-based. This makes it easy to swap one HOC for a different one, as long as they provide the same props to the wrapped component. This may be useful if you change data-fetching libraries, for example.</p>\n<h2 id=\"dont-mutate-the-original-component-use-composition\"><a class=\"anchor\" href=\"/react/higher-order-components#dont-mutate-the-original-component-use-composition\"></a>Don\u2019t Mutate the Original Component. Use Composition. </h2>\n<p>Resist the temptation to modify a component\u2019s prototype (or otherwise mutate it) inside a HOC.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">InputComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">InputComponent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">componentDidUpdate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current props: '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Previous props: '</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// The fact that we're returning the original input is a hint that it has</span>\n  <span class=\"token comment\">// been mutated.</span>\n  <span class=\"token keyword\">return</span> InputComponent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// EnhancedComponent will log whenever props are received</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>InputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are a few problems with this. One is that the input component cannot be reused separately from the enhanced component. More crucially, if you apply another HOC to <code class=\"language-javascript\">EnhancedComponent</code> that <em>also</em> mutates <code class=\"language-javascript\">componentDidUpdate</code>, the first HOC\u2019s functionality will be overridden! This HOC also won\u2019t work with function components, which do not have lifecycle methods.</p>\n<p>Mutating HOCs are a leaky abstraction\u2014the consumer must know how they are implemented in order to avoid conflicts with other HOCs.</p>\n<p>Instead of mutation, HOCs should use composition, by wrapping the input component in a container component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current props: '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Previous props: '</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Wraps the input component in a container, without mutating it. Good!</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This HOC has the same functionality as the mutating version while avoiding the potential for clashes. It works equally well with class and function components. And because it\u2019s a pure function, it\u2019s composable with other HOCs, or even with itself.</p>\n<p>You may have noticed similarities between HOCs and a pattern called <strong>container components</strong>. Container components are part of a strategy of separating responsibility between high-level and low-level concerns. Containers manage things like subscriptions and state, and pass props to components that handle things like rendering UI. HOCs use containers as part of their implementation. You can think of HOCs as parameterized container component definitions.</p>\n<h2 id=\"convention-pass-unrelated-props-through-to-the-wrapped-component\"><a class=\"anchor\" href=\"/react/higher-order-components#convention-pass-unrelated-props-through-to-the-wrapped-component\"></a>Convention: Pass Unrelated Props Through to the Wrapped Component </h2>\n<p>HOCs add features to a component. They shouldn\u2019t drastically alter its contract. It\u2019s expected that the component returned from a HOC has a similar interface to the wrapped component.</p>\n<p>HOCs should pass through props that are unrelated to its specific concern. Most HOCs contain a render method that looks something like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Filter out extra props that are specific to this HOC and shouldn't be</span>\n  <span class=\"token comment\">// passed through</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> extraProp<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>passThroughProps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Inject props into the wrapped component. These are usually state values or</span>\n  <span class=\"token comment\">// instance methods.</span>\n  <span class=\"token keyword\">const</span> injectedProp <span class=\"token operator\">=</span> someStateOrInstanceMethod<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Pass props to wrapped component</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span>\n      <span class=\"token attr-name\">injectedProp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>injectedProp<span class=\"token punctuation\">}</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>passThroughProps<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This convention helps ensure that HOCs are as flexible and reusable as possible.</p>\n<h2 id=\"convention-maximizing-composability\"><a class=\"anchor\" href=\"/react/higher-order-components#convention-maximizing-composability\"></a>Convention: Maximizing Composability </h2>\n<p>Not all HOCs look the same. Sometimes they accept only a single argument, the wrapped component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> NavbarWithRouter <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>Navbar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Usually, HOCs accept additional arguments. In this example from Relay, a config object is used to specify a component\u2019s data dependencies:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> CommentWithRelay <span class=\"token operator\">=</span> Relay<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>Comment<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The most common signature for HOCs looks like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// React Redux's `connect`</span>\n<span class=\"token keyword\">const</span> ConnectedComment <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">,</span> commentActions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CommentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>What?!</em> If you break it apart, it\u2019s easier to see what\u2019s going on.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// connect is a function that returns another function</span>\n<span class=\"token keyword\">const</span> enhance <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentListSelector<span class=\"token punctuation\">,</span> commentListActions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The returned function is a HOC, which returns a component that is connected</span>\n<span class=\"token comment\">// to the Redux store</span>\n<span class=\"token keyword\">const</span> ConnectedComment <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>CommentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In other words, <code class=\"language-javascript\">connect</code> is a higher-order function that returns a higher-order component!</p>\n<p>This form may seem confusing or unnecessary, but it has a useful property. Single-argument HOCs like the one returned by the <code class=\"language-javascript\">connect</code> function have the signature <code class=\"language-javascript\">Component =&gt; Component</code>. Functions whose output type is the same as its input type are really easy to compose together.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Instead of doing this...</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ... you can use a function composition utility</span>\n<span class=\"token comment\">// compose(f, g, h) is the same as (...args) =&gt; f(g(h(...args)))</span>\n<span class=\"token keyword\">const</span> enhance <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// These are both single-argument HOCs</span>\n  withRouter<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span></code></pre></div>\n<p>(This same property also allows <code class=\"language-javascript\">connect</code> and other enhancer-style HOCs to be used as decorators, an experimental JavaScript proposal.)</p>\n<p>The <code class=\"language-javascript\">compose</code> utility function is provided by many third-party libraries including lodash (as <a class=\"external-link\" href=\"https://lodash.com/docs/#flowRight\"><code class=\"language-javascript\">lodash.flowRight</code></a>), <a class=\"external-link\" href=\"https://redux.js.org/api/compose\">Redux</a>, and <a class=\"external-link\" href=\"https://ramdajs.com/docs/#compose\">Ramda</a>.</p>\n<h2 id=\"convention-wrap-the-display-name-for-easy-debugging\"><a class=\"anchor\" href=\"/react/higher-order-components#convention-wrap-the-display-name-for-easy-debugging\"></a>Convention: Wrap the Display Name for Easy Debugging </h2>\n<p>The container components created by HOCs show up in the <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-devtools\">React Developer Tools</a> like any other component. To ease debugging, choose a display name that communicates that it\u2019s the result of a HOC.</p>\n<p>The most common technique is to wrap the display name of the wrapped component. So if your higher-order component is named <code class=\"language-javascript\">withSubscription</code>, and the wrapped component\u2019s display name is <code class=\"language-javascript\">CommentList</code>, use the display name <code class=\"language-javascript\">WithSubscription(CommentList)</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithSubscription</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span>\n  WithSubscription<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">WithSubscription(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> WithSubscription<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> WrappedComponent<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> WrappedComponent<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">'Component'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"caveats\"><a class=\"anchor\" href=\"/react/higher-order-components#caveats\"></a>Caveats </h2>\n<p>Higher-order components come with a few caveats that aren\u2019t immediately obvious if you\u2019re new to React.</p>\n<h3 id=\"dont-use-hocs-inside-the-render-method\"><a class=\"anchor\" href=\"/react/higher-order-components#dont-use-hocs-inside-the-render-method\"></a>Don\u2019t Use HOCs Inside the render Method </h3>\n<p>React\u2019s diffing algorithm (called <a href=\"/react/reconciliation\">Riconciliazione</a>) uses component identity to determine whether it should update the existing subtree or throw it away and mount a new one. If the component returned from <code class=\"language-javascript\">render</code> is identical (<code class=\"language-javascript\">===</code>) to the component from the previous render, React recursively updates the subtree by diffing it with the new one. If they\u2019re not equal, the previous subtree is unmounted completely.</p>\n<p>Normally, you shouldn\u2019t need to think about this. But it matters for HOCs because it means you can\u2019t apply a HOC to a component within the render method of a component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// A new version of EnhancedComponent is created on every render</span>\n  <span class=\"token comment\">// EnhancedComponent1 !== EnhancedComponent2</span>\n  <span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// That causes the entire subtree to unmount/remount each time!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EnhancedComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The problem here isn\u2019t just about performance \u2014 remounting a component causes the state of that component and all of its children to be lost.</p>\n<p>Instead, apply HOCs outside the component definition so that the resulting component is created only once. Then, its identity will be consistent across renders. This is usually what you want, anyway.</p>\n<p>In those rare cases where you need to apply a HOC dynamically, you can also do it inside a component\u2019s lifecycle methods or its constructor.</p>\n<h3 id=\"static-methods-must-be-copied-over\"><a class=\"anchor\" href=\"/react/higher-order-components#static-methods-must-be-copied-over\"></a>Static Methods Must Be Copied Over </h3>\n<p>Sometimes it\u2019s useful to define a static method on a React component. For example, Relay containers expose a static method <code class=\"language-javascript\">getFragment</code> to facilitate the composition of GraphQL fragments.</p>\n<p>When you apply a HOC to a component, though, the original component is wrapped with a container component. That means the new component does not have any of the static methods of the original component.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Define a static method</span>\nWrappedComponent<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">staticMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Now apply a HOC</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The enhanced component has no static method</span>\n<span class=\"token keyword\">typeof</span> EnhancedComponent<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>To solve this, you could copy the methods onto the container before returning it:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Must know exactly which method(s) to copy :(</span>\n  Enhance<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">=</span> WrappedComponent<span class=\"token punctuation\">.</span>staticMethod<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, this requires you to know exactly which methods need to be copied. You can use <a class=\"external-link\" href=\"https://github.com/mridgway/hoist-non-react-statics\">hoist-non-react-statics</a> to automatically copy all non-React static methods:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> hoistNonReactStatic <span class=\"token keyword\">from</span> <span class=\"token string\">'hoist-non-react-statics'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">hoistNonReactStatic</span><span class=\"token punctuation\">(</span>Enhance<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another possible solution is to export the static method separately from the component itself.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Instead of...</span>\nMyComponent<span class=\"token punctuation\">.</span>someFunction <span class=\"token operator\">=</span> someFunction<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> MyComponent<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...export the method separately...</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> someFunction <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...and in the consuming module, import both</span>\n<span class=\"token keyword\">import</span> MyComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> someFunction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./MyComponent.js'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"refs-arent-passed-through\"><a class=\"anchor\" href=\"/react/higher-order-components#refs-arent-passed-through\"></a>Refs Aren\u2019t Passed Through </h3>\n<p>While the convention for higher-order components is to pass through all props to the wrapped component, this does not work for refs. That\u2019s because <code class=\"language-javascript\">ref</code> is not really a prop \u2014 like <code class=\"language-javascript\">key</code>, it\u2019s handled specially by React. If you add a ref to an element whose component is the result of a HOC, the ref refers to an instance of the outermost container component, not the wrapped component.</p>\n<p>The solution for this problem is to use the <code class=\"language-javascript\">React.forwardRef</code> API (introduced with React 16.3). <a href=\"/react/forwarding-refs\">Learn more about it in the forwarding refs section</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/higher-order-components.md\">Edit this page</a></p></div></article>", "path": "/react/higher-order-components", "nav": ["/react/fragments", "/react/integrating-with-other-libraries"]}, {"key": "Integrazione Con Altre Librerie", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React can be used in any web application. It can be embedded in other applications and, with a little care, other applications can be embedded in React. This guide will examine some of the more common use cases, focusing on integration with <a class=\"external-link\" href=\"https://jquery.com/\">jQuery</a> and <a class=\"external-link\" href=\"https://backbonejs.org/\">Backbone</a>, but the same ideas can be applied to integrating components with any existing code.</p>\n<h2 id=\"integrating-with-dom-manipulation-plugins\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-dom-manipulation-plugins\"></a>Integrating with DOM Manipulation Plugins </h2>\n<p>React is unaware of changes made to the DOM outside of React. It determines updates based on its own internal representation, and if the same DOM nodes are manipulated by another library, React gets confused and has no way to recover.</p>\n<p>This does not mean it is impossible or even necessarily difficult to combine React with other ways of affecting the DOM, you just have to be mindful of what each is doing.</p>\n<p>The easiest way to avoid conflicts is to prevent the React component from updating. You can do this by rendering elements that React has no reason to update, like an empty <code class=\"language-javascript\">&lt;div /&gt;</code>.</p>\n<h3 id=\"how-to-approach-the-problem\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#how-to-approach-the-problem\"></a>How to Approach the Problem </h3>\n<p>To demonstrate this, let\u2019s sketch out a wrapper for a generic jQuery plugin.</p>\n<p>We will attach a <a href=\"/react/refs-and-the-dom\">ref</a> to the root DOM element. Inside <code class=\"language-javascript\">componentDidMount</code>, we will get a reference to it so we can pass it to the jQuery plugin.</p>\n<p>To prevent React from touching the DOM after mounting, we will return an empty <code class=\"language-javascript\">&lt;div /&gt;</code> from the <code class=\"language-javascript\">render()</code> method. The <code class=\"language-javascript\">&lt;div /&gt;</code> element has no properties or children, so React has no reason to update it, leaving the jQuery plugin free to manage that part of the DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SomePlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">somePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">somePlugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that we defined both <code class=\"language-javascript\">componentDidMount</code> and <code class=\"language-javascript\">componentWillUnmount</code> <a href=\"/react/react-component#the-component-lifecycle\">lifecycle methods</a>. Many jQuery plugins attach event listeners to the DOM so it\u2019s important to detach them in <code class=\"language-javascript\">componentWillUnmount</code>. If the plugin does not provide a method for cleanup, you will probably have to provide your own, remembering to remove any event listeners the plugin registered to prevent memory leaks.</p>\n<h3 id=\"integrating-with-jquery-chosen-plugin\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-jquery-chosen-plugin\"></a>Integrating with jQuery Chosen Plugin </h3>\n<p>For a more concrete example of these concepts, let\u2019s write a minimal wrapper for the plugin <a class=\"external-link\" href=\"https://harvesthq.github.io/chosen/\">Chosen</a>, which augments <code class=\"language-javascript\">&lt;select&gt;</code> inputs.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Just because it\u2019s possible, doesn\u2019t mean that it\u2019s the best approach for React apps. We encourage you to use React components when you can. React components are easier to reuse in React applications, and often provide more control over their behavior and appearance.</p>\n</div>\n<p>First, let\u2019s look at what Chosen does to the DOM.</p>\n<p>If you call it on a <code class=\"language-javascript\">&lt;select&gt;</code> DOM node, it reads the attributes off of the original DOM node, hides it with an inline style, and then appends a separate DOM node with its own visual representation right after the <code class=\"language-javascript\">&lt;select&gt;</code>. Then it fires jQuery events to notify us about the changes.</p>\n<p>Let\u2019s say that this is the API we\u2019re striving for with our <code class=\"language-javascript\">&lt;Chosen&gt;</code> wrapper React component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Chosen</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">vanilla</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">chocolate</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">strawberry</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Chosen</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We will implement it as an <a href=\"/react/uncontrolled-components\">uncontrolled component</a> for simplicity.</p>\n<p>First, we will create an empty component with a <code class=\"language-javascript\">render()</code> method where we return <code class=\"language-javascript\">&lt;select&gt;</code> wrapped in a <code class=\"language-javascript\">&lt;div&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chosen</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice how we wrapped <code class=\"language-javascript\">&lt;select&gt;</code> in an extra <code class=\"language-javascript\">&lt;div&gt;</code>. This is necessary because Chosen will append another DOM element right after the <code class=\"language-javascript\">&lt;select&gt;</code> node we passed to it. However, as far as React is concerned, <code class=\"language-javascript\">&lt;div&gt;</code> always only has a single child. This is how we ensure that React updates won\u2019t conflict with the extra DOM node appended by Chosen. It is important that if you modify the DOM outside of React flow, you must ensure React doesn\u2019t have a reason to touch those DOM nodes.</p>\n<p>Next, we will implement the lifecycle methods. We need to initialize Chosen with the ref to the <code class=\"language-javascript\">&lt;select&gt;</code> node in <code class=\"language-javascript\">componentDidMount</code>, and tear it down in <code class=\"language-javascript\">componentWillUnmount</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/qmqeQx?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n<p>Note that React assigns no special meaning to the <code class=\"language-javascript\">this.el</code> field. It only works because we have previously assigned this field from a <code class=\"language-javascript\">ref</code> in the <code class=\"language-javascript\">render()</code> method:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>This is enough to get our component to render, but we also want to be notified about the value changes. To do this, we will subscribe to the jQuery <code class=\"language-javascript\">change</code> event on the <code class=\"language-javascript\">&lt;select&gt;</code> managed by Chosen.</p>\n<p>We won\u2019t pass <code class=\"language-javascript\">this.props.onChange</code> directly to Chosen because component\u2019s props might change over time, and that includes event handlers. Instead, we will declare a <code class=\"language-javascript\">handleChange()</code> method that calls <code class=\"language-javascript\">this.props.onChange</code>, and subscribe it to the jQuery <code class=\"language-javascript\">change</code> event:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/bWgbeE?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n<p>Finally, there is one more thing left to do. In React, props can change over time. For example, the <code class=\"language-javascript\">&lt;Chosen&gt;</code> component can get different children if parent component\u2019s state changes. This means that at integration points it is important that we manually update the DOM in response to prop updates, since we no longer let React manage the DOM for us.</p>\n<p>Chosen\u2019s documentation suggests that we can use jQuery <code class=\"language-javascript\">trigger()</code> API to notify it about changes to the original DOM element. We will let React take care of updating <code class=\"language-javascript\">this.props.children</code> inside <code class=\"language-javascript\">&lt;select&gt;</code>, but we will also add a <code class=\"language-javascript\">componentDidUpdate()</code> lifecycle method that notifies Chosen about changes in the children list:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chosen:updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This way, Chosen will know to update its DOM element when the <code class=\"language-javascript\">&lt;select&gt;</code> children managed by React change.</p>\n<p>The complete implementation of the <code class=\"language-javascript\">Chosen</code> component looks like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chosen</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chosen:updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/xdgKOz?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n<h2 id=\"integrating-with-other-view-libraries\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-other-view-libraries\"></a>Integrating with Other View Libraries </h2>\n<p>React can be embedded into other applications thanks to the flexibility of <a href=\"/react/react-dom-client#createRoot\"><code class=\"language-javascript\">createRoot()</code></a>.</p>\n<p>Although React is commonly used at startup to load a single root React component into the DOM, <code class=\"language-javascript\">createRoot()</code> can also be called multiple times for independent parts of the UI which can be as small as a button, or as large as an app.</p>\n<p>In fact, this is exactly how React is used at Facebook. This lets us write applications in React piece by piece, and combine them with our existing server-generated templates and other client-side code.</p>\n<h3 id=\"replacing-string-based-rendering-with-react\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#replacing-string-based-rendering-with-react\"></a>Replacing String-Based Rendering with React </h3>\n<p>A common pattern in older web applications is to describe chunks of the DOM as a string and insert it into the DOM like so: <code class=\"language-javascript\">$el.html(htmlString)</code>. These points in a codebase are perfect for introducing React. Just rewrite the string based rendering as a React component.</p>\n<p>So the following jQuery implementation\u2026</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;button id=\"btn\"&gt;Say Hello&lt;/button&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>\u2026could be rewritten using a React component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Say Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>From here you could start moving more logic into the component and begin adopting more common React practices. For example, in components it is best not to rely on IDs because the same component can be rendered multiple times. Instead, we will use the <a href=\"/react/handling-events\">React event system</a> and register the click handler directly on the React <code class=\"language-javascript\">&lt;button&gt;</code> element:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Say Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/RVKbvW?editors=1010\"><strong>Try it on CodePen</strong></a></p>\n<p>You can have as many such isolated components as you like, and use <code class=\"language-javascript\">ReactDOM.createRoot()</code> to render them to different DOM containers. Gradually, as you convert more of your app to React, you will be able to combine them into larger components, and move some of the <code class=\"language-javascript\">ReactDOM.createRoot()</code> calls up the hierarchy.</p>\n<h3 id=\"embedding-react-in-a-backbone-view\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#embedding-react-in-a-backbone-view\"></a>Embedding React in a Backbone View </h3>\n<p><a class=\"external-link\" href=\"https://backbonejs.org/\">Backbone</a> views typically use HTML strings, or string-producing template functions, to create the content for their DOM elements. This process, too, can be replaced with rendering a React component.</p>\n<p>Below, we will create a Backbone view called <code class=\"language-javascript\">ParagraphView</code>. It will override Backbone\u2019s <code class=\"language-javascript\">render()</code> function to render a React <code class=\"language-javascript\">&lt;Paragraph&gt;</code> component into the DOM element provided by Backbone (<code class=\"language-javascript\">this.el</code>). Here, too, we are using <a href=\"/react/react-dom-client#createroot\"><code class=\"language-javascript\">ReactDOM.createRoot()</code></a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Paragraph</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ParagraphView <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactRoot <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactRoot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Paragraph</span></span> <span class=\"token attr-name\">text</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactRoot<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    Backbone<span class=\"token punctuation\">.</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gWgOYL?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n<p>It is important that we also call <code class=\"language-javascript\">root.unmount()</code> in the <code class=\"language-javascript\">remove</code> method so that React unregisters event handlers and other resources associated with the component tree when it is detached.</p>\n<p>When a component is removed <em>from within</em> a React tree, the cleanup is performed automatically, but because we are removing the entire tree by hand, we must call this method.</p>\n<h2 id=\"integrating-with-model-layers\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-model-layers\"></a>Integrating with Model Layers </h2>\n<p>While it is generally recommended to use unidirectional data flow such as <a href=\"/react/lifting-state-up\">React state</a>, <a class=\"external-link\" href=\"https://facebook.github.io/flux/\">Flux</a>, or <a class=\"external-link\" href=\"https://redux.js.org/\">Redux</a>, React components can use a model layer from other frameworks and libraries.</p>\n<h3 id=\"using-backbone-models-in-react-components\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#using-backbone-models-in-react-components\"></a>Using Backbone Models in React Components </h3>\n<p>The simplest way to consume <a class=\"external-link\" href=\"https://backbonejs.org/\">Backbone</a> models and collections from a React component is to listen to the various change events and manually force an update.</p>\n<p>Components responsible for rendering models would listen to <code class=\"language-javascript\">'change'</code> events, while components responsible for rendering collections would listen for <code class=\"language-javascript\">'add'</code> and <code class=\"language-javascript\">'remove'</code> events. In both cases, call <a href=\"/react/react-component#forceupdate\"><code class=\"language-javascript\">this.forceUpdate()</code></a> to rerender the component with the new data.</p>\n<p>In the example below, the <code class=\"language-javascript\">List</code> component renders a Backbone collection, using the <code class=\"language-javascript\">Item</code> component to render individual items.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'remove'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'remove'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">model</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>model<span class=\"token punctuation\">.</span>cid<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">model</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>model<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/GmrREm?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n<h3 id=\"extracting-data-from-backbone-models\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#extracting-data-from-backbone-models\"></a>Extracting Data from Backbone Models </h3>\n<p>The approach above requires your React components to be aware of the Backbone models and collections. If you later plan to migrate to another data management solution, you might want to concentrate the knowledge about Backbone in as few parts of the code as possible.</p>\n<p>One solution to this is to extract the model\u2019s attributes as plain data whenever it changes, and keep this logic in a single place. The following is <a href=\"/react/higher-order-components\">a higher-order component</a> that extracts all attributes of a Backbone model into state, passing the data to the wrapped component.</p>\n<p>This way, only the higher-order component needs to know about Backbone model internals, and most components in the app can stay agnostic of Backbone.</p>\n<p>In the example below, we will make a copy of the model\u2019s attributes to form the initial state. We subscribe to the <code class=\"language-javascript\">change</code> event (and unsubscribe on unmounting), and when it happens, we update the state with the model\u2019s current attributes. Finally, we make sure that if the <code class=\"language-javascript\">model</code> prop itself changes, we don\u2019t forget to unsubscribe from the old model, and subscribe to the new one.</p>\n<p>Note that this example is not meant to be exhaustive with regards to working with Backbone, but it should give you an idea for how to approach this in a generic way:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">connectToBackboneModel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BackboneComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">.</span>model <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">        nextProps<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">model</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">changedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> propsExceptModel <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> propsExceptModel<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>propsExceptModel<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To demonstrate how to use it, we will connect a <code class=\"language-javascript\">NameInput</code> React component to a Backbone model, and update its <code class=\"language-javascript\">firstName</code> attribute every time the input changes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NameInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      My name is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> BackboneNameInput <span class=\"token operator\">=</span> <span class=\"token function\">connectToBackboneModel</span><span class=\"token punctuation\">(</span>NameInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firstName'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BackboneNameInput</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">model</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">handleChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span></span></span>    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>Model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Frodo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Example</span></span> <span class=\"token attr-name\">model</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>model<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/PmWwwa?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n<p>This technique is not limited to Backbone. You can use React with any model library by subscribing to its changes in the lifecycle methods and, optionally, copying the data into the local React state.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/integrating-with-other-libraries.md\">Edit this page</a></p></div></article>", "path": "/react/integrating-with-other-libraries", "nav": ["/react/higher-order-components", "/react/jsx-in-depth"]}, {"key": "JSX In Dettaglio", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Fondamentalmente JSX fornisce zucchero sintattico per la scrittura di funzioni della forma <code class=\"language-javascript\">React.createElement(component, props, ...children)</code>.\nIl codice seguente</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">shadowSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Click Me\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>una volta compilato viene tradotto in:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  MyButton<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">shadowSize</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Click Me'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>\u00c9 anche possibile utilizzare la versione self-closing del tag se, e solo se, non ci sono elementi figli. Quindi</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sidebar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>una volta compilato viene tradotto in:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'sidebar'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Per vedere come il codice JSX viene convertito in JavaScript puoi provare il <a class=\"external-link\" href=\"https://babeljs.io/repl/#?presets=react&amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA\">compilatore babel online</a>.</p>\n<h2 id=\"specifying-the-react-element-type\"><a class=\"anchor\" href=\"/react/jsx-in-depth#specifying-the-react-element-type\"></a>Specificare il tipo di elemento React </h2>\n<p>La prima parte di un tag JSX indica il tipo di elemento React.</p>\n<p>I tipi con la prima lettera maiuscola indicano che il tag JSX si riferisce ad un componente React. Una volta eseguita la compilazione questi tag avranno un riferimento diretto con la variabile, il che significa che per usare il tag <code class=\"language-javascript\">&lt;Foo /&gt;</code> la rispettiva variabile <code class=\"language-javascript\">Foo</code> deve essere nello stesso scope.</p>\n<h3 id=\"react-must-be-in-scope\"><a class=\"anchor\" href=\"/react/jsx-in-depth#react-must-be-in-scope\"></a>React deve essere in scope </h3>\n<p>Dal momento che JSX compila in chiamate del tipo <code class=\"language-javascript\">React.createElement</code>, la libreria <code class=\"language-javascript\">React</code> deve essere sempre nello stesso scope del codice JSX.</p>\n<p>Ad esempio in questo pezzo di codice entrambi gli imports sono necessari anche se <code class=\"language-javascript\">React</code> e <code class=\"language-javascript\">CustomButton</code> non sono direttamente referenziati all\u2019interno di JavaScript:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> CustomButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./CustomButton'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">WarningButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// return React.createElement(CustomButton, {color: 'red'}, null);</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomButton</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se React fosse importato tramite il tag <code class=\"language-javascript\">&lt;script&gt;</code>, allora sarebbe gi\u00e0 nello scope globale dell\u2019applicazione.</p>\n<h3 id=\"using-dot-notation-for-jsx-type\"><a class=\"anchor\" href=\"/react/jsx-in-depth#using-dot-notation-for-jsx-type\"></a>Usare la notazione puntata per i tipi JSX </h3>\n<p>\u00c9 possibile fare riferimento ad un componente React usando la notazione puntata direttamente da JSX. Questo \u00e8 molto conveniente se avessimo un singolo modulo che esporta diversi componenti React. Ad esempio se <code class=\"language-javascript\">MyComponents.DatePicker</code> \u00e8 un componente, allora \u00e8 possibile utilizzarlo in JSX semplicemente scrivendo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MyComponents <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">DatePicker</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DatePicker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Imagine a </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> datepicker here.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">BlueDatePicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponents.DatePicker</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"user-defined-components-must-be-capitalized\"><a class=\"anchor\" href=\"/react/jsx-in-depth#user-defined-components-must-be-capitalized\"></a>I componenti definiti dall\u2019utente devono avere la prima lettera maiuscola </h3>\n<p>Quando un elemento inizia con una lettera minuscola, allora si riferisce a componenti nativi come ad esempio <code class=\"language-javascript\">&lt;div&gt;</code> o <code class=\"language-javascript\">&lt;span&gt;</code> ed essi risultano come se fossero una stringa, <code class=\"language-javascript\">'div'</code> o <code class=\"language-javascript\">'span'</code>, passata a <code class=\"language-javascript\">React.createElement</code>. I tipi che iniziano con una lettera maiuscola, come <code class=\"language-javascript\">&lt;Foo /&gt;</code> compilano in <code class=\"language-javascript\">React.createElement(Foo)</code> e corrispondono a componenti definiti o importati all\u2019interno del file JavaScript.</p>\n<p>\u00c9 raccomandabile chiamare i componenti con una lettera maiuscola. Se avessimo un componente che inizia con una lettera minuscola, allora quello che possiamo fare \u00e8 un\u2019assegnazione ad una variabile, con la prima lettera maiuscola, prima di poterlo utilizzare all\u2019interno di JSX.</p>\n<p>Ad esempio questo codice non verr\u00e0 eseguito come ci si aspetta:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Wrong! This is a component and should have been capitalized:</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// Correct! This use of &lt;div&gt; is legitimate because div is a valid HTML tag:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Wrong! React thinks &lt;hello /&gt; is an HTML tag because it's not capitalized:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hello</span> <span class=\"token attr-name\">toWhat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Per correggere, basta rinominare <code class=\"language-javascript\">hello</code> in <code class=\"language-javascript\">Hello</code> e usare <code class=\"language-javascript\">&lt;Hello /&gt;</code> quando ci riferiamo ad esso:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Correct! This is a component and should be capitalized:</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// Correct! This use of &lt;div&gt; is legitimate because div is a valid HTML tag:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Correct! React knows &lt;Hello /&gt; is a component because it's capitalized.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">toWhat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"choosing-the-type-at-runtime\"><a class=\"anchor\" href=\"/react/jsx-in-depth#choosing-the-type-at-runtime\"></a>Scelta del tipo di componente in fase di esecuzione </h3>\n<p>Non \u00e8 possibile usare un\u2019espressione come tipo di elemento React. Se si vuole utilizzare un\u2019espressione per indicare un tipo di elemento, effettuate semplicemente un\u2019assegnazione ad una variabile con la prima lettera maiuscola. Questo \u00e8 particolarmente utile quando si vuole renderizzare un componente piuttosto che un altro in base ad una prop:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PhotoStory<span class=\"token punctuation\">,</span> VideoStory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./stories'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">photo</span><span class=\"token operator\">:</span> PhotoStory<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> VideoStory\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Story</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Wrong! JSX type can't be an expression.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>components<span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>storyType<span class=\"token punctuation\">]</span> story<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>story<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Per correggere, dichiariamo una variabile con la prima lettera maiuscola e gli assegnamo il tipo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PhotoStory<span class=\"token punctuation\">,</span> VideoStory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./stories'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">photo</span><span class=\"token operator\">:</span> PhotoStory<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> VideoStory\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Story</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Correct! JSX type can be a capitalized variable.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> SpecificStory <span class=\"token operator\">=</span> components<span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>storyType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpecificStory</span></span> <span class=\"token attr-name\">story</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>story<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"props-in-jsx\"><a class=\"anchor\" href=\"/react/jsx-in-depth#props-in-jsx\"></a>Props in JSX </h2>\n<p>Ci sono diversi modi per dichiarare le props in JSX.</p>\n<h3 id=\"javascript-expressions-as-props\"><a class=\"anchor\" href=\"/react/jsx-in-depth#javascript-expressions-as-props\"></a>Espressioni JavaScript come Props </h3>\n<p>\u00c9 possibile passare una qualsiasi espressione JavaScript come prop semplicemente circondandola da <code class=\"language-javascript\">{}</code>. Ad esempio, in questo pezzo di codice JSX</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">foo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>nel componente <code class=\"language-javascript\">MyComponent</code>, il valore di <code class=\"language-javascript\">props.foo</code> sar\u00e0 <code class=\"language-javascript\">10</code> che \u00e8 esattamente il valore restituito dall\u2019espressione <code class=\"language-javascript\">1 + 2 + 3 + 4</code>.</p>\n<p>Le espressioni <code class=\"language-javascript\">if</code> e <code class=\"language-javascript\">for</code> non sono considerate espressioni in JavaScript, quindi non possono essere usate direttamente in JSX, ma \u00e8 possibile utilizzarle nel codice. Ad esempio:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberDescriber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> description<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    description <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">even</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    description <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">odd</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> is an </span><span class=\"token punctuation\">{</span>description<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> number</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Puoi approfondire la <a href=\"/react/conditional-rendering\">renderizzazione condizionale</a> e i <a href=\"/react/lists-and-keys\">cicli</a> nelle relative sezioni.</p>\n<h3 id=\"string-literals\"><a class=\"anchor\" href=\"/react/jsx-in-depth#string-literals\"></a>String Literals </h3>\n<p>\u00c9 anche possibile passare stringhe come props. Queste due espressioni JSX sono equivalenti:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello world<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Quando si passano stringhe, HTML non effettua l\u2019escape del loro valore, quindi anche queste due espressioni JSX sono equivalenti:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token entity named-entity\">&amp;lt;</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'&lt;3'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Solitamente questo comportamento non ha una grossa rilevanza, \u00e8 stato menzionato solo per completezza d\u2019informazione.</p>\n<h3 id=\"props-default-to-true\"><a class=\"anchor\" href=\"/react/jsx-in-depth#props-default-to-true\"></a>Il valore di default di una Props \u00e8 \u201cTrue\u201d </h3>\n<p>Se non passiamo nessun valore per una prop, questa verr\u00e0 valutata a <code class=\"language-javascript\">true</code> di default. Queste due espressioni JSX sono equivalenti:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyTextBox</span></span> <span class=\"token attr-name\">autocomplete</span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyTextBox</span></span> <span class=\"token attr-name\">autocomplete</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>In linea generale non \u00e8 raccomandabile non passare alcun valore ad una prop in quanto pu\u00f2 essere confusa con il <a class=\"external-link\" href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015\">metodo per dichiarare oggetti in ES6</a> <code class=\"language-javascript\">{foo}</code> che sarebbe la scrittura breve di <code class=\"language-javascript\">{foo: foo}</code> piuttosto che <code class=\"language-javascript\">{foo: true}</code>. Questo comportamento \u00e8 presente solo per corrispondere al comportamente di HTML.</p>\n<h3 id=\"spread-attributes\"><a class=\"anchor\" href=\"/react/jsx-in-depth#spread-attributes\"></a>Operatore Spread come attributo </h3>\n<p>Se abbiamo gi\u00e0 una <code class=\"language-javascript\">props</code> come oggetto e la si vuole passare in JSX, \u00e8 possibile utilizzare l\u2019operatore di spread <code class=\"language-javascript\">...</code> per passare l\u2019intero oggetto props. Questi due componenti sono equivalenti:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token attr-name\">firstName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Ben<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">lastName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hector<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ben'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hector'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>\u00c9 anche possibile passare una singola propriet\u00e0 dell\u2019oggetto props e passare tutte le altre utilizzando l\u2019operatore spread.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> kind<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> kind <span class=\"token operator\">===</span> <span class=\"token string\">\"primary\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"PrimaryButton\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"SecondaryButton\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>other<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">kind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Hello World!</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nell\u2019esempio precedente la prop <code class=\"language-javascript\">kind</code> \u00e8 consumata e non viene passata all\u2019elemento <code class=\"language-javascript\">&lt;button&gt;</code> nel DOM.\nTutte le altre props sono passate con l\u2019oggetto <code class=\"language-javascript\">...other</code> rendendo il componente veramente flessibile. \u00c9 possibile vedere che vengono passate le props <code class=\"language-javascript\">onClick</code> e <code class=\"language-javascript\">children</code>.</p>\n<p>Gli attributi spread possono essere molto utili ma rendono anche semplice il passaggio di props non necessarie al componente o il passaggio di attributi HTML non validi. La raccomandazione \u00e8 quella di utilizzare questa sintassi con parsimonia.</p>\n<h2 id=\"children-in-jsx\"><a class=\"anchor\" href=\"/react/jsx-in-depth#children-in-jsx\"></a>Elementi figli in JSX </h2>\n<p>Nelle espressioni JSX che contengono sia un tag di apertura che un tag di chiusura il loro contenuto viene passato come una prop speciale: <code class=\"language-javascript\">props.children</code>. Ci sono diversi modi per passare gli elementi figli:</p>\n<h3 id=\"string-literals-1\"><a class=\"anchor\" href=\"/react/jsx-in-depth#string-literals-1\"></a>String Literals </h3>\n<p>\u00c9 possibile inserire una stringa fra il tag di apertura e chiusura e <code class=\"language-javascript\">props.children</code> sar\u00e0 proprio quella stringa. Questo \u00e8 molto utile per molti degli elementi HTML. Ad esempio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>\u00e8 codice JSX valido e <code class=\"language-javascript\">props.children</code> nel componente <code class=\"language-javascript\">MyComponent</code> \u00e8 rappresentato dalla stringa <code class=\"language-javascript\">\"Hello world!\"</code>. Di HTML non viene fatto l\u2019escape, dunque \u00e8 possibile scrivere JSX allo stesso modo di come si scriverebbe HTML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>This is valid HTML <span class=\"token entity named-entity\">&amp;amp;</span> JSX at the same time.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>JSX rimuove gli spazi bianchi all\u2019inizio e alla fine della linea. Rimuove anche linee vuote. I caratteri di nuova linea accanto ai tag vengono rimosse mentre le linee bianche che compaiono nel mezzo di una stringa vengono condensate in un singolo spazio bianco. Tutti gli esempi di seguito vengono renderizzati allo stesso modo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello World\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello\n  World\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n  Hello World\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h3 id=\"jsx-children\"><a class=\"anchor\" href=\"/react/jsx-in-depth#jsx-children\"></a>JSX Children </h3>\n<p>\u00c9 possibile inserire pi\u00f9 elementi JSX come elementi figli di un tag. Molto utile per visualizzare componenti annidati:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContainer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyFirstComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MySecondComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContainer</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>\u00c9 possibile mettere come figli diversi tipi di elementi, puoi utilizzare stringhe e codice JSX insieme ad esempio. Questa \u00e8 un\u2019altra somiglianza di JSX ad HTML in modo tale che sia codice valido sia HTML che JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  Here is a list:\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Item 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Item 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Un componente React pu\u00f2 anche tornare un array di elementi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// No need to wrap list items in an extra element!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// Don't forget the keys :)</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">First item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>B<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Second item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>C<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Third item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"javascript-expressions-as-children\"><a class=\"anchor\" href=\"/react/jsx-in-depth#javascript-expressions-as-children\"></a>JavaScript Expressions as Children </h3>\n<p>\u00c9 possibile passare una qualsiasi espressione JavaScript, come elemento figlio, semplicemente circondandola con <code class=\"language-javascript\">{}</code>. Ad esempio queste espressioni sono tutte equivalenti:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Spesso questo \u00e8 utile per renderizzare liste di espressioni JSX di qualsiasi lunghezza. Ad esempio il codice seguente renderizza una lista HTML:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Item</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'finish doc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'submit pr'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nag dan to review'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">message</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Le espressioni JavaScript possono essere mixate con altri tipi di elementi figli e questo \u00e8 particolarmente utile nei templates:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>addressee<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"functions-as-children\"><a class=\"anchor\" href=\"/react/jsx-in-depth#functions-as-children\"></a>Le funzioni come elementi figli </h3>\n<p>Solitamente le espressioni JavaScript inserite all\u2019interno del codice JSX sono valutate come stringhe, un elemento React o come una lista dei precedenti due casi. Ad ogni modo <code class=\"language-javascript\">props.children</code> lavora esattamente come ogni altra prop in cui \u00e8 possibile passare qualsiasi tipo di dati, non solamente quelli conosciuti da React che conosce come renderizzare. Ad esempio se abbiamo un componente custom, questo potrebbe essere richiamato come <code class=\"language-javascript\">props.children</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Calls the children callback numTimes to produce a repeated component</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> props<span class=\"token punctuation\">.</span>numTimes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ListOfTenThings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Repeat</span></span> <span class=\"token attr-name\">numTimes</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">This is item </span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> in the list</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Repeat</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I figli passati ad un componente custom possono essere qualsiasi cosa, visto che poi il componente li trasforma in qualcosa che React conosce prima di essere renderizzati. Questo uso non \u00e8 comune, ma funziona se vuoi estendere tutte le capacit\u00e0 di JSX.</p>\n<h3 id=\"booleans-null-and-undefined-are-ignored\"><a class=\"anchor\" href=\"/react/jsx-in-depth#booleans-null-and-undefined-are-ignored\"></a>I valori Booleani, Null, e Undefined vengono ignorati </h3>\n<p><code class=\"language-javascript\">true</code>, <code class=\"language-javascript\">false</code>, <code class=\"language-javascript\">null</code>, e <code class=\"language-javascript\">undefined</code> sono elementi figli validi, ma semplicemente non vengono renderizzati. Queste espressioni JSX vengono renderizzate tutte allo stesso modo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Il vantaggio che se ne trae \u00e8 che possiamo renderizzare elementi piuttosto che altri in base a certe condizioni. Nell\u2019esempio seguente il componente <code class=\"language-javascript\">&lt;Header /&gt;</code> viene renderizzato se, e solo se, <code class=\"language-javascript\">showHeader</code> risulta true:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>showHeader <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Un avvertimento sui <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">\u201cfalsy\u201d values</a>, come ad esempio il numero <code class=\"language-javascript\">0</code>: questi valori vengono sempre renderizzati da React. Ad esempio il codice seguente non si comporta come ci si aspetterebbe in quanto <code class=\"language-javascript\">0</code> viene stampato quando <code class=\"language-javascript\">props.messages</code> risulta essere un array vuoto:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageList</span></span> <span class=\"token attr-name\">messages</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>La fix \u00e8 semplice: l\u2019espressione prima di <code class=\"language-javascript\">&amp;&amp;</code> deve essere sempre un\u2019espressione booleana:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageList</span></span> <span class=\"token attr-name\">messages</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Al contrario, se vogliamo che valori come <code class=\"language-javascript\">true</code>, <code class=\"language-javascript\">false</code>, <code class=\"language-javascript\">null</code>, oppure <code class=\"language-javascript\">undefined</code> appaiano in output \u00e8 necessario prima effettuare una <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#String_conversion\">conversione a stringa</a></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  My JavaScript variable is </span><span class=\"token punctuation\">{</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>myVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/jsx-in-depth.md\">Edit this page</a></p></div></article>", "path": "/react/jsx-in-depth", "nav": ["/react/integrating-with-other-libraries", "/react/optimizing-performance"]}, {"key": "Ottimizzare le Prestazioni", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Internally, React uses several clever techniques to minimize the number of costly DOM operations required to update the UI. For many applications, using React will lead to a fast user interface without doing much work to specifically optimize for performance. Nevertheless, there are several ways you can speed up your React application.</p>\n<h2 id=\"use-the-production-build\"><a class=\"anchor\" href=\"/react/optimizing-performance#use-the-production-build\"></a>Use the Production Build </h2>\n<p>If you\u2019re benchmarking or experiencing performance problems in your React apps, make sure you\u2019re testing with the minified production build.</p>\n<p>By default, React includes many helpful warnings. These warnings are very useful in development. However, they make React larger and slower so you should make sure to use the production version when you deploy the app.</p>\n<p>If you aren\u2019t sure whether your build process is set up correctly, you can check it by installing <a class=\"external-link\" href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React Developer Tools for Chrome</a>. If you visit a site with React in production mode, the icon will have a dark background:</p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/d0f767f80866431ccdec18f200ca58f1/0a47e/devtools-prod.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/d0f767f80866431ccdec18f200ca58f1/0a47e/devtools-prod.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>If you visit a site with React in development mode, the icon will have a red background:</p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/e434ce2f7e64f63e597edf03f4465694/0a47e/devtools-dev.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/e434ce2f7e64f63e597edf03f4465694/0a47e/devtools-dev.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>It is expected that you use the development mode when working on your app, and the production mode when deploying your app to the users.</p>\n<p>You can find instructions for building your app for production below.</p>\n<h3 id=\"create-react-app\"><a class=\"anchor\" href=\"/react/optimizing-performance#create-react-app\"></a>Create React App </h3>\n<p>If your project is built with <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">npm run build</code></pre></div>\n<p>This will create a production build of your app in the <code class=\"language-javascript\">build/</code> folder of your project.</p>\n<p>Remember that this is only necessary before deploying to production. For normal development, use <code class=\"language-javascript\">npm start</code>.</p>\n<h3 id=\"single-file-builds\"><a class=\"anchor\" href=\"/react/optimizing-performance#single-file-builds\"></a>Single-File Builds </h3>\n<p>We offer production-ready versions of React and React DOM as single files:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@18/umd/react.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@18/umd/react-dom.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Remember that only React files ending with <code class=\"language-javascript\">.production.min.js</code> are suitable for production.</p>\n<h3 id=\"brunch\"><a class=\"anchor\" href=\"/react/optimizing-performance#brunch\"></a>Brunch </h3>\n<p>For the most efficient Brunch production build, install the <a class=\"external-link\" href=\"https://github.com/brunch/terser-brunch\"><code class=\"language-javascript\">terser-brunch</code></a> plugin:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\"># If you use npm\nnpm install --save-dev terser-brunch\n\n# If you use Yarn\nyarn add --dev terser-brunch</code></pre></div>\n<p>Then, to create a production build, add the <code class=\"language-javascript\">-p</code> flag to the <code class=\"language-javascript\">build</code> command:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">brunch build -p</code></pre></div>\n<p>Remember that you only need to do this for production builds. You shouldn\u2019t pass the <code class=\"language-javascript\">-p</code> flag or apply this plugin in development, because it will hide useful React warnings and make the builds much slower.</p>\n<h3 id=\"browserify\"><a class=\"anchor\" href=\"/react/optimizing-performance#browserify\"></a>Browserify </h3>\n<p>For the most efficient Browserify production build, install a few plugins:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\"># If you use npm\nnpm install --save-dev envify terser uglifyify\n\n# If you use Yarn\nyarn add --dev envify terser uglifyify</code></pre></div>\n<p>To create a production build, make sure that you add these transforms <strong>(the order matters)</strong>:</p>\n<ul>\n<li>The <a class=\"external-link\" href=\"https://github.com/hughsk/envify\"><code class=\"language-javascript\">envify</code></a> transform ensures the right build environment is set. Make it global (<code class=\"language-javascript\">-g</code>).</li>\n<li>The <a class=\"external-link\" href=\"https://github.com/hughsk/uglifyify\"><code class=\"language-javascript\">uglifyify</code></a> transform removes development imports. Make it global too (<code class=\"language-javascript\">-g</code>).</li>\n<li>Finally, the resulting bundle is piped to <a class=\"external-link\" href=\"https://github.com/terser-js/terser\"><code class=\"language-javascript\">terser</code></a> for mangling (<a class=\"external-link\" href=\"https://github.com/hughsk/uglifyify#motivationusage\">read why</a>).</li>\n</ul>\n<p>For example:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">browserify ./index.js \\\n  -g [ envify --NODE_ENV production ] \\\n  -g uglifyify \\\n  | terser --compress --mangle &gt; ./bundle.js</code></pre></div>\n<p>Remember that you only need to do this for production builds. You shouldn\u2019t apply these plugins in development because they will hide useful React warnings, and make the builds much slower.</p>\n<h3 id=\"rollup\"><a class=\"anchor\" href=\"/react/optimizing-performance#rollup\"></a>Rollup </h3>\n<p>For the most efficient Rollup production build, install a few plugins:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token comment\"># If you use npm</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-terser\n\n<span class=\"token comment\"># If you use Yarn</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-terser</code></pre></div>\n<p>To create a production build, make sure that you add these plugins <strong>(the order matters)</strong>:</p>\n<ul>\n<li>The <a class=\"external-link\" href=\"https://github.com/rollup/rollup-plugin-replace\"><code class=\"language-javascript\">replace</code></a> plugin ensures the right build environment is set.</li>\n<li>The <a class=\"external-link\" href=\"https://github.com/rollup/rollup-plugin-commonjs\"><code class=\"language-javascript\">commonjs</code></a> plugin provides support for CommonJS in Rollup.</li>\n<li>The <a class=\"external-link\" href=\"https://github.com/TrySound/rollup-plugin-terser\"><code class=\"language-javascript\">terser</code></a> plugin compresses and mangles the final bundle.</li>\n</ul>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup-plugin-replace'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'process.env.NODE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup-plugin-commonjs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup-plugin-terser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>For a complete setup example <a class=\"external-link\" href=\"https://gist.github.com/Rich-Harris/cb14f4bc0670c47d00d191565be36bf0\">see this gist</a>.</p>\n<p>Remember that you only need to do this for production builds. You shouldn\u2019t apply the <code class=\"language-javascript\">terser</code> plugin or the <code class=\"language-javascript\">replace</code> plugin with <code class=\"language-javascript\">'production'</code> value in development because they will hide useful React warnings, and make the builds much slower.</p>\n<h3 id=\"webpack\"><a class=\"anchor\" href=\"/react/optimizing-performance#webpack\"></a>webpack </h3>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>If you\u2019re using Create React App, please follow <a href=\"/react/optimizing-performance#create-react-app\">the instructions above</a>.<br/>\nThis section is only relevant if you configure webpack directly.</p>\n</div>\n<p>Webpack v4+ will minify your code by default in production mode.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> TerserPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'terser-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TerserPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/* additional options here */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can learn more about this in <a class=\"external-link\" href=\"https://webpack.js.org/guides/production/\">webpack documentation</a>.</p>\n<p>Remember that you only need to do this for production builds. You shouldn\u2019t apply <code class=\"language-javascript\">TerserPlugin</code> in development because it will hide useful React warnings, and make the builds much slower.</p>\n<h2 id=\"profiling-components-with-the-devtools-profiler\"><a class=\"anchor\" href=\"/react/optimizing-performance#profiling-components-with-the-devtools-profiler\"></a>Profiling Components with the DevTools Profiler </h2>\n<p><code class=\"language-javascript\">react-dom</code> 16.5+ and <code class=\"language-javascript\">react-native</code> 0.57+ provide enhanced profiling capabilities in DEV mode with the React DevTools Profiler.\nAn overview of the Profiler can be found in the blog post <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/09/10/introducing-the-react-profiler.html\">\u201cIntroducing the React Profiler\u201d</a>.\nA video walkthrough of the profiler is also <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=nySib7ipZdk\">available on YouTube</a>.</p>\n<p>If you haven\u2019t yet installed the React DevTools, you can find them here:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\">Chrome Browser Extension</a></li>\n<li><a class=\"external-link\" href=\"https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/\">Firefox Browser Extension</a></li>\n<li><a class=\"external-link\" href=\"https://www.npmjs.com/package/react-devtools\">Standalone Node Package</a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>A production profiling bundle of <code class=\"language-javascript\">react-dom</code> is also available as <code class=\"language-javascript\">react-dom/profiling</code>.\nRead more about how to use this bundle at <a class=\"external-link\" href=\"https://fb.me/react-profiling\">fb.me/react-profiling</a></p>\n</div>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>Before React 17, we use the standard <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\">User Timing API</a> to profile components with the chrome performance tab.\nFor a more detailed walkthrough, check out <a class=\"external-link\" href=\"https://calibreapp.com/blog/react-performance-profiling-optimization\">this article by Ben Schwarz</a>.</p>\n</div>\n<h2 id=\"virtualize-long-lists\"><a class=\"anchor\" href=\"/react/optimizing-performance#virtualize-long-lists\"></a>Virtualize Long Lists </h2>\n<p>If your application renders long lists of data (hundreds or thousands of rows), we recommend using a technique known as \u201cwindowing\u201d. This technique only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created.</p>\n<p><a class=\"external-link\" href=\"https://react-window.now.sh/\">react-window</a> and <a class=\"external-link\" href=\"https://bvaughn.github.io/react-virtualized/\">react-virtualized</a> are popular windowing libraries. They provide several reusable components for displaying lists, grids, and tabular data. You can also create your own windowing component, like <a class=\"external-link\" href=\"https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3\">Twitter did</a>, if you want something more tailored to your application\u2019s specific use case.</p>\n<h2 id=\"avoid-reconciliation\"><a class=\"anchor\" href=\"/react/optimizing-performance#avoid-reconciliation\"></a>Avoid Reconciliation </h2>\n<p>React builds and maintains an internal representation of the rendered UI. It includes the React elements you return from your components. This representation lets React avoid creating DOM nodes and accessing existing ones beyond necessity, as that can be slower than operations on JavaScript objects. Sometimes it is referred to as a \u201cvirtual DOM\u201d, but it works the same way on React Native.</p>\n<p>When a component\u2019s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM.</p>\n<p>Even though React only updates the changed DOM nodes, re-rendering still takes some time. In many cases it\u2019s not a problem, but if the slowdown is noticeable, you can speed all of this up by overriding the lifecycle function <code class=\"language-javascript\">shouldComponentUpdate</code>, which is triggered before the re-rendering process starts. The default implementation of this function returns <code class=\"language-javascript\">true</code>, leaving React to perform the update:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you know that in some situations your component doesn\u2019t need to update, you can return <code class=\"language-javascript\">false</code> from <code class=\"language-javascript\">shouldComponentUpdate</code> instead, to skip the whole rendering process, including calling <code class=\"language-javascript\">render()</code> on this component and below.</p>\n<p>In most cases, instead of writing <code class=\"language-javascript\">shouldComponentUpdate()</code> by hand, you can inherit from <a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">React.PureComponent</code></a>. It is equivalent to implementing <code class=\"language-javascript\">shouldComponentUpdate()</code> with a shallow comparison of current and previous props and state.</p>\n<h2 id=\"shouldcomponentupdate-in-action\"><a class=\"anchor\" href=\"/react/optimizing-performance#shouldcomponentupdate-in-action\"></a>shouldComponentUpdate In Action </h2>\n<p>Here\u2019s a subtree of components. For each one, <code class=\"language-javascript\">SCU</code> indicates what <code class=\"language-javascript\">shouldComponentUpdate</code> returned, and <code class=\"language-javascript\">vDOMEq</code> indicates whether the rendered React elements were equivalent. Finally, the circle\u2019s color indicates whether the component had to be reconciled or not.</p>\n<figure>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/5ee1bdf4779af06072a17b7a0654f6db/cd039/should-component-update.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/5ee1bdf4779af06072a17b7a0654f6db/cd039/should-component-update.png\">Image link</a>\n</span>\n</span>\n</a>\n</figure>\n<p>Since <code class=\"language-javascript\">shouldComponentUpdate</code> returned <code class=\"language-javascript\">false</code> for the subtree rooted at C2, React did not attempt to render C2, and thus didn\u2019t even have to invoke <code class=\"language-javascript\">shouldComponentUpdate</code> on C4 and C5.</p>\n<p>For C1 and C3, <code class=\"language-javascript\">shouldComponentUpdate</code> returned <code class=\"language-javascript\">true</code>, so React had to go down to the leaves and check them. For C6 <code class=\"language-javascript\">shouldComponentUpdate</code> returned <code class=\"language-javascript\">true</code>, and since the rendered elements weren\u2019t equivalent React had to update the DOM.</p>\n<p>The last interesting case is C8. React had to render this component, but since the React elements it returned were equal to the previously rendered ones, it didn\u2019t have to update the DOM.</p>\n<p>Note that React only had to do DOM mutations for C6, which was inevitable. For C8, it bailed out by comparing the rendered React elements, and for C2\u2019s subtree and C7, it didn\u2019t even have to compare the elements as we bailed out on <code class=\"language-javascript\">shouldComponentUpdate</code>, and <code class=\"language-javascript\">render</code> was not called.</p>\n<h2 id=\"examples\"><a class=\"anchor\" href=\"/react/optimizing-performance#examples\"></a>Examples </h2>\n<p>If the only way your component ever changes is when the <code class=\"language-javascript\">props.color</code> or the <code class=\"language-javascript\">state.count</code> variable changes, you could have <code class=\"language-javascript\">shouldComponentUpdate</code> check that:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> nextProps<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">!==</span> nextState<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Count: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this code, <code class=\"language-javascript\">shouldComponentUpdate</code> is just checking if there is any change in <code class=\"language-javascript\">props.color</code> or <code class=\"language-javascript\">state.count</code>. If those values don\u2019t change, the component doesn\u2019t update. If your component got more complex, you could use a similar pattern of doing a \u201cshallow comparison\u201d between all the fields of <code class=\"language-javascript\">props</code> and <code class=\"language-javascript\">state</code> to determine if the component should update. This pattern is common enough that React provides a helper to use this logic - just inherit from <code class=\"language-javascript\">React.PureComponent</code>. So this code is a simpler way to achieve the same thing:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Count: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Most of the time, you can use <code class=\"language-javascript\">React.PureComponent</code> instead of writing your own <code class=\"language-javascript\">shouldComponentUpdate</code>. It only does a shallow comparison, so you can\u2019t use it if the props or state may have been mutated in a way that a shallow comparison would miss.</p>\n<p>This can be a problem with more complex data structures. For example, let\u2019s say you want a <code class=\"language-javascript\">ListOfWords</code> component to render a comma-separated list of words, with a parent <code class=\"language-javascript\">WordAdder</code> component that lets you click a button to add a word to the list. This code does <em>not</em> work correctly:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListOfWords</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WordAdder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">words</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'marklar'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This section is bad style and causes a bug</span>\n    <span class=\"token keyword\">const</span> words <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">;</span>\n    words<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marklar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">words</span><span class=\"token operator\">:</span> words<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListOfWords</span></span> <span class=\"token attr-name\">words</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The problem is that <code class=\"language-javascript\">PureComponent</code> will do a simple comparison between the old and new values of <code class=\"language-javascript\">this.props.words</code>. Since this code mutates the <code class=\"language-javascript\">words</code> array in the <code class=\"language-javascript\">handleClick</code> method of <code class=\"language-javascript\">WordAdder</code>, the old and new values of <code class=\"language-javascript\">this.props.words</code> will compare as equal, even though the actual words in the array have changed. The <code class=\"language-javascript\">ListOfWords</code> will thus not update even though it has new words that should be rendered.</p>\n<h2 id=\"the-power-of-not-mutating-data\"><a class=\"anchor\" href=\"/react/optimizing-performance#the-power-of-not-mutating-data\"></a>The Power Of Not Mutating Data </h2>\n<p>The simplest way to avoid this problem is to avoid mutating values that you are using as props or state. For example, the <code class=\"language-javascript\">handleClick</code> method above could be rewritten using <code class=\"language-javascript\">concat</code> as:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">words</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'marklar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ES6 supports a <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">spread syntax</a> for arrays which can make this easier. If you\u2019re using Create React App, this syntax is available by default.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">words</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">,</span> <span class=\"token string\">'marklar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also rewrite code that mutates objects to avoid mutation, in a similar way. For example, let\u2019s say we have an object named <code class=\"language-javascript\">colormap</code> and we want to write a function that changes <code class=\"language-javascript\">colormap.right</code> to be <code class=\"language-javascript\">'blue'</code>. We could write:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateColorMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">colormap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  colormap<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To write this without mutating the original object, we can use <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign</a> method:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateColorMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">colormap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> colormap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">updateColorMap</code> now returns a new object, rather than mutating the old one. <code class=\"language-javascript\">Object.assign</code> is in ES6 and requires a polyfill.</p>\n<p><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Object spread syntax</a> makes it easier to update objects without mutation as well:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateColorMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">colormap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>colormap<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This feature was added to JavaScript in ES2018.</p>\n<p>If you\u2019re using Create React App, both <code class=\"language-javascript\">Object.assign</code> and the object spread syntax are available by default.</p>\n<p>When you deal with deeply nested objects, updating them in an immutable way can feel convoluted. If you run into this problem, check out <a class=\"external-link\" href=\"https://github.com/mweststrate/immer\">Immer</a> or <a class=\"external-link\" href=\"https://github.com/kolodny/immutability-helper\">immutability-helper</a>. These libraries let you write highly readable code without losing the benefits of immutability.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/optimizing-performance.md\">Edit this page</a></p></div></article>", "path": "/react/optimizing-performance", "nav": ["/react/jsx-in-depth", "/react/portals"]}, {"key": "Portali", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The first argument (<code class=\"language-javascript\">child</code>) is any <a href=\"/react/react-component#render\">renderable React child</a>, such as an element, string, or fragment. The second argument (<code class=\"language-javascript\">container</code>) is a DOM element.</p>\n<h2 id=\"usage\"><a class=\"anchor\" href=\"/react/portals#usage\"></a>Usage </h2>\n<p>Normally, when you return an element from a component\u2019s render method, it\u2019s mounted into the DOM as a child of the nearest parent node:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// React mounts a new div and renders the children into it</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, sometimes it\u2019s useful to insert a child into a different location in the DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// React does *not* create a new div. It renders the children into `domNode`.</span>\n  <span class=\"token comment\">// `domNode` is any valid DOM node, regardless of its location in the DOM.</span>\n  <span class=\"token keyword\">return</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    domNode</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A typical use case for portals is when a parent component has an <code class=\"language-javascript\">overflow: hidden</code> or <code class=\"language-javascript\">z-index</code> style, but you need the child to visually \u201cbreak out\u201d of its container. For example, dialogs, hovercards, and tooltips.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>When working with portals, remember that <a href=\"/react/accessibility#programmatically-managing-focus\">managing keyboard focus</a> becomes very important.</p>\n<p>For modal dialogs, ensure that everyone can interact with them by following the <a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal\">WAI-ARIA Modal Authoring Practices</a>.</p>\n</div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/yzMaBd\"><strong>Try it on CodePen</strong></a></p>\n<h2 id=\"event-bubbling-through-portals\"><a class=\"anchor\" href=\"/react/portals#event-bubbling-through-portals\"></a>Event Bubbling Through Portals </h2>\n<p>Even though a portal can be anywhere in the DOM tree, it behaves like a normal React child in every other way. Features like context work exactly the same regardless of whether the child is a portal, as the portal still exists in the <em>React tree</em> regardless of position in the <em>DOM tree</em>.</p>\n<p>This includes event bubbling. An event fired from inside a portal will propagate to ancestors in the containing <em>React tree</em>, even if those elements are not ancestors in the <em>DOM tree</em>. Assuming the following HTML structure:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>A <code class=\"language-javascript\">Parent</code> component in <code class=\"language-javascript\">#app-root</code> would be able to catch an uncaught, bubbling event from the sibling node <code class=\"language-javascript\">#modal-root</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// These two containers are siblings in the DOM</span>\n<span class=\"token keyword\">const</span> appRoot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> modalRoot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'modal-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Modal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The portal element is inserted in the DOM tree after</span>\n    <span class=\"token comment\">// the Modal's children are mounted, meaning that children</span>\n    <span class=\"token comment\">// will be mounted on a detached DOM node. If a child</span>\n    <span class=\"token comment\">// component requires to be attached to the DOM tree</span>\n    <span class=\"token comment\">// immediately when mounted, for example to measure a</span>\n    <span class=\"token comment\">// DOM node, or uses 'autoFocus' in a descendant, add</span>\n    <span class=\"token comment\">// state to Modal and only render the children when Modal</span>\n    <span class=\"token comment\">// is inserted in the DOM tree.</span>\n    modalRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    modalRoot<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">clicks</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// This will fire when the button in Child is clicked,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// updating Parent's state, even though button</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// is not direct descendant in the DOM.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">clicks</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>clicks <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Number of clicks: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicks<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Open up the browser DevTools</span>\n<span class=\"token plain-text\">          to observe that the button</span>\n<span class=\"token plain-text\">          is not a child of the div</span>\n<span class=\"token plain-text\">          with the onClick handler.</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// The click event on this button will bubble up to parent,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// because there is no 'onClick' attribute defined</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>appRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/jGBWpE\"><strong>Try it on CodePen</strong></a></p>\n<p>Catching an event bubbling up from a portal in a parent component allows the development of more flexible abstractions that are not inherently reliant on portals. For example, if you render a <code class=\"language-javascript\">&lt;Modal /&gt;</code> component, the parent can capture its events regardless of whether it\u2019s implemented using portals.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/portals.md\">Edit this page</a></p></div></article>", "path": "/react/portals", "nav": ["/react/optimizing-performance", "/react/profiler"]}, {"key": "Profiler", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>The <code class=\"language-javascript\">Profiler</code> measures how often a React application renders and what the \u201ccost\u201d of rendering is.\nIts purpose is to help identify parts of an application that are slow and may benefit from <a href=\"/react/hooks-faq#how-to-memoize-calculations\">optimizations such as memoization</a>.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Profiling adds some additional overhead, so <strong>it is disabled in <a href=\"/react/optimizing-performance#use-the-production-build\">the production build</a></strong>.</p>\n<p>To opt into production profiling, React provides a special production build with profiling enabled.\nRead more about how to use this build at <a class=\"external-link\" href=\"https://fb.me/react-profiling\">fb.me/react-profiling</a></p>\n</div>\n<h2 id=\"usage\"><a class=\"anchor\" href=\"/react/profiler#usage\"></a>Usage </h2>\n<p>A <code class=\"language-javascript\">Profiler</code> can be added anywhere in a React tree to measure the cost of rendering that part of the tree.\nIt requires two props: an <code class=\"language-javascript\">id</code> (string) and an <code class=\"language-javascript\">onRender</code> callback (function) which React calls any time a component within the tree \u201ccommits\u201d an update.</p>\n<p>For example, to profile a <code class=\"language-javascript\">Navigation</code> component and its descendants:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Navigation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Navigation</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Main</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Multiple <code class=\"language-javascript\">Profiler</code> components can be used to measure different parts of an application:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Navigation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Navigation</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Main<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Main</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">Profiler</code> components can also be nested to measure different components within the same subtree:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Panel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Panel</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PreviewPane<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PreviewPane</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Panel</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>Although <code class=\"language-javascript\">Profiler</code> is a light-weight component, it should be used only when necessary; each use adds some CPU and memory overhead to an application.</p>\n</div>\n<h2 id=\"onrender-callback\"><a class=\"anchor\" href=\"/react/profiler#onrender-callback\"></a><code class=\"language-javascript\">onRender</code> Callback </h2>\n<p>The <code class=\"language-javascript\">Profiler</code> requires an <code class=\"language-javascript\">onRender</code> function as a prop.\nReact calls this function any time a component within the profiled tree \u201ccommits\u201d an update.\nIt receives parameters describing what was rendered and how long it took.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">onRenderCallback</span><span class=\"token punctuation\">(</span>\n  id<span class=\"token punctuation\">,</span> <span class=\"token comment\">// the \"id\" prop of the Profiler tree that has just committed</span>\n  phase<span class=\"token punctuation\">,</span> <span class=\"token comment\">// either \"mount\" (if the tree just mounted) or \"update\" (if it re-rendered)</span>\n  actualDuration<span class=\"token punctuation\">,</span> <span class=\"token comment\">// time spent rendering the committed update</span>\n  baseDuration<span class=\"token punctuation\">,</span> <span class=\"token comment\">// estimated time to render the entire subtree without memoization</span>\n  startTime<span class=\"token punctuation\">,</span> <span class=\"token comment\">// when React began rendering this update</span>\n  commitTime<span class=\"token punctuation\">,</span> <span class=\"token comment\">// when React committed this update</span>\n  interactions <span class=\"token comment\">// the Set of interactions belonging to this update</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Aggregate or log render timings...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let\u2019s take a closer look at each of the props:</p>\n<ul>\n<li><strong><code class=\"language-javascript\">id: string</code></strong> -\nThe <code class=\"language-javascript\">id</code> prop of the <code class=\"language-javascript\">Profiler</code> tree that has just committed.\nThis can be used to identify which part of the tree was committed if you are using multiple profilers.</li>\n<li><strong><code class=\"language-javascript\">phase: \"mount\" | \"update\"</code></strong> -\nIdentifies whether the tree has just been mounted for the first time or re-rendered due to a change in props, state, or hooks.</li>\n<li><strong><code class=\"language-javascript\">actualDuration: number</code></strong> -\nTime spent rendering the <code class=\"language-javascript\">Profiler</code> and its descendants for the current update.\nThis indicates how well the subtree makes use of memoization (e.g. <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a>, <a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a>, <a href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate</code></a>).\nIdeally this value should decrease significantly after the initial mount as many of the descendants will only need to re-render if their specific props change.</li>\n<li><strong><code class=\"language-javascript\">baseDuration: number</code></strong> -\nDuration of the most recent <code class=\"language-javascript\">render</code> time for each individual component within the <code class=\"language-javascript\">Profiler</code> tree.\nThis value estimates a worst-case cost of rendering (e.g. the initial mount or a tree with no memoization).</li>\n<li><strong><code class=\"language-javascript\">startTime: number</code></strong> -\nTimestamp when React began rendering the current update.</li>\n<li><strong><code class=\"language-javascript\">commitTime: number</code></strong> -\nTimestamp when React committed the current update.\nThis value is shared between all profilers in a commit, enabling them to be grouped if desirable.</li>\n<li><strong><code class=\"language-javascript\">interactions: Set</code></strong> -\nSet of <a class=\"external-link\" href=\"https://fb.me/react-interaction-tracing\">\u201cinteractions\u201d</a> that were being traced when the update was scheduled (e.g. when <code class=\"language-javascript\">render</code> or <code class=\"language-javascript\">setState</code> were called).</li>\n</ul>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>Interactions can be used to identify the cause of an update, although the API for tracing them is still experimental.</p>\n<p>Learn more about it at <a class=\"external-link\" href=\"https://fb.me/react-interaction-tracing\">fb.me/react-interaction-tracing</a></p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-profiler.md\">Edit this page</a></p></div></article>", "path": "/react/profiler", "nav": ["/react/portals", "/react/react-without-es6"]}, {"key": "React senza ES6", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Normally you would define a React component as a plain JavaScript class:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you don\u2019t use ES6 yet, you may use the <code class=\"language-javascript\">create-react-class</code> module instead:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> createReactClass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Greeting <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The API of ES6 classes is similar to <code class=\"language-javascript\">createReactClass()</code> with a few exceptions.</p>\n<h2 id=\"declaring-default-props\"><a class=\"anchor\" href=\"/react/react-without-es6#declaring-default-props\"></a>Declaring Default Props </h2>\n<p>With functions and ES6 classes <code class=\"language-javascript\">defaultProps</code> is defined as a property on the component itself:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nGreeting<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With <code class=\"language-javascript\">createReactClass()</code>, you need to define <code class=\"language-javascript\">getDefaultProps()</code> as a function on the passed object:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Greeting <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getDefaultProps</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"setting-the-initial-state\"><a class=\"anchor\" href=\"/react/react-without-es6#setting-the-initial-state\"></a>Setting the Initial State </h2>\n<p>In ES6 classes, you can define the initial state by assigning <code class=\"language-javascript\">this.state</code> in the constructor:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With <code class=\"language-javascript\">createReactClass()</code>, you have to provide a separate <code class=\"language-javascript\">getInitialState</code> method that returns the initial state:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Counter <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"autobinding\"><a class=\"anchor\" href=\"/react/react-without-es6#autobinding\"></a>Autobinding </h2>\n<p>In React components declared as ES6 classes, methods follow the same semantics as regular ES6 classes. This means that they don\u2019t automatically bind <code class=\"language-javascript\">this</code> to the instance. You\u2019ll have to explicitly use <code class=\"language-javascript\">.bind(this)</code> in the constructor:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// This line is important!</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Because `this.handleClick` is bound, we can use it as an event handler.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Say hello\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With <code class=\"language-javascript\">createReactClass()</code>, this is not necessary because it binds all methods:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> SayHello <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">handleClick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Say hello\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This means writing ES6 classes comes with a little more boilerplate code for event handlers, but the upside is slightly better performance in large applications.</p>\n<p>If the boilerplate code is too unattractive to you, you may use <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_instance_fields\">ES2022 Class Properties</a> syntax:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// Using an arrow here binds the method:</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Say hello\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You also have a few other options:</p>\n<ul>\n<li>Bind methods in the constructor.</li>\n<li>Use arrow functions, e.g. <code class=\"language-javascript\">onClick={(e) =&gt; this.handleClick(e)}</code>.</li>\n<li>Keep using <code class=\"language-javascript\">createReactClass</code>.</li>\n</ul>\n<h2 id=\"mixins\"><a class=\"anchor\" href=\"/react/react-without-es6#mixins\"></a>Mixins </h2>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>ES6 launched without any mixin support. Therefore, there is no support for mixins when you use React with ES6 classes.</p>\n<p><strong>We also found numerous issues in codebases using mixins, <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">and don\u2019t recommend using them in the new code</a>.</strong></p>\n<p>This section exists only for the reference.</p>\n</div>\n<p>Sometimes very different components may share some common functionality. These are sometimes called <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Cross-cutting_concern\">cross-cutting concerns</a>. <code class=\"language-javascript\">createReactClass</code> lets you use a legacy <code class=\"language-javascript\">mixins</code> system for that.</p>\n<p>One common use case is a component wanting to update itself on a time interval. It\u2019s easy to use <code class=\"language-javascript\">setInterval()</code>, but it\u2019s important to cancel your interval when you don\u2019t need it anymore to save memory. React provides <a href=\"/react/react-component#the-component-lifecycle\">lifecycle methods</a> that let you know when a component is about to be created or destroyed. Let\u2019s create a simple mixin that uses these methods to provide an easy <code class=\"language-javascript\">setInterval()</code> function that will automatically get cleaned up when your component is destroyed.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> SetIntervalMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">componentWillMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">setInterval</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">componentWillUnmount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>clearInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> createReactClass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> TickTock <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mixins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>SetIntervalMixin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Use the mixin</span>\n  <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">seconds</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">componentDidMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Call a method on the mixin</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">tick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">seconds</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        React has been running for </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> seconds.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TickTock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If a component is using multiple mixins and several mixins define the same lifecycle method (i.e. several mixins want to do some cleanup when the component is destroyed), all of the lifecycle methods are guaranteed to be called. Methods defined on mixins run in the order mixins were listed, followed by a method call on the component.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/react-without-es6.md\">Edit this page</a></p></div></article>", "path": "/react/react-without-es6", "nav": ["/react/profiler", "/react/react-without-jsx"]}, {"key": "React senza JSX", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>JSX non \u00e8 un requisito per l\u2019utilizzo di React. Usare React senza JSX \u00e8 particolarmente utile quando non si vuole impostare la compilazione nel proprio ambiente di sviluppo.</p>\n<p>Ogni elemento JSX \u00e8 solo zucchero sintattico per chiamare <code class=\"language-javascript\">React.createElement(component, props, ...children)</code>. Quindi, tutto ci\u00f2 che puoi fare con JSX pu\u00f2 essere fatto anche solo semplicemente con JavaScript.</p>\n<p>Ad esempio, questo codice scritto con JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">toWhat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>pu\u00f2 essere compilato in questo codice che non usa JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">toWhat</span><span class=\"token operator\">:</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se sei curioso di vedere pi\u00f9 esempi di come JSX viene convertito in JavaScript, puoi provare <a class=\"external-link\" href=\"https://babeljs.io/repl/#?presets=react&amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA\">il compilatore online di Babel</a>.</p>\n<p>Il componente pu\u00f2 essere fornito come una stringa, una sottoclasse di <code class=\"language-javascript\">React.Component</code>, o una semplice funzione.</p>\n<p>Se ti stanchi di digitare tante volte <code class=\"language-javascript\">React.createElement</code>, un modello comune \u00e8 di assegnare un\u2019abbreviazione:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createElement<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se utilizzi questa forma abbreviata di <code class=\"language-javascript\">React.createElement</code>, pu\u00f2 essere quasi altrettanto conveniente usare React senza JSX.</p>\n<p>In alternativa, puoi fare riferimento ai progetti della community come <a class=\"external-link\" href=\"https://github.com/mlmorg/react-hyperscript\"><code class=\"language-javascript\">react-hyperscript</code></a> e <a class=\"external-link\" href=\"https://github.com/ohanhi/hyperscript-helpers\"><code class=\"language-javascript\">hyperscript-helpers</code></a> che offrono una sintassi pi\u00f9 concisa.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/react-without-jsx.md\">Edit this page</a></p></div></article>", "path": "/react/react-without-jsx", "nav": ["/react/react-without-es6", "/react/reconciliation"]}, {"key": "Riconciliazione", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React espone una API dichiarativa cos\u00ec che tu non debba sapere con esattezza che cosa cambia per ogni update. Questo semplifica molto la scrittura delle applicazioni, ma potrebbe non essere ovvio come sia stata implementata. Questo articolo descrive le scelte che abbiamo fatto sugli algoritmi di confronto usati da React al fine di rendere gli update dei componenti prevedibili ed allo stesso tempo abbastanza veloci da offrire applicazioni a prestazioni elevate.</p>\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"/react/reconciliation#motivation\"></a>Motivazione </h2>\n<p>Quando usi React, in un istante definito di tempo puoi pensare alla funzione <code class=\"language-javascript\">render()</code> come qualcosa che crea e ritorna un albero di elementi React. A seguito di un cambiamento di state o props, la stessa funzione <code class=\"language-javascript\">render()</code> ritorner\u00e0 un albero di elementi React diverso dal precedente. React quindi avr\u00e0 bisogno di capire come eseguire l\u2019update della UI in maniera efficiente per farla combaciare con l\u2019ultimo albero di elementi generato.</p>\n<p>Ci sono alcune soluzioni generiche per questo problema algoritmico al fine di generare il numero minimo di operazioni per la trasformazione di un albero in un altro. Tuttavia, lo <a class=\"external-link\" href=\"https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\">stato dell\u2019arte di questi algoritmi</a> ha complessit\u00e0 nell\u2019ordine di O(n<sup>3</sup>) dove n \u00e8 il numero di elementi all\u2019interno dell\u2019albero.</p>\n<p>Se questi algoritmi venissero usati da React, la rappresentazione di 1000 elementi richiederebbe un numero di confronti nell\u2019ordine di un miliardo. Sarebbe troppo dispendioso. React, invece, implementa un algoritmo euristico O(n) basato su due assunzioni:</p>\n<ol>\n<li>Due elementi di tipo diverso produrranno alberi diversi.</li>\n<li>Lo sviluppatore pu\u00f2 suggerire all\u2019algoritmo quali elementi potrebbero mantenersi stabili tra le diverse renderizzazioni attraverso l\u2019uso di una prop <code class=\"language-javascript\">key</code>.</li>\n</ol>\n<p>In pratica, queste assunzioni sono valide quasi per tutti i casi d\u2019uso.</p>\n<h2 id=\"the-diffing-algorithm\"><a class=\"anchor\" href=\"/react/reconciliation#the-diffing-algorithm\"></a>L\u2019Algoritmo di confronto </h2>\n<p>Nel paragonare due alberi, React confronta prima i due elementi alla radice. Il comportamento cambia a seconda del loro tipo.</p>\n<h3 id=\"elements-of-different-types\"><a class=\"anchor\" href=\"/react/reconciliation#elements-of-different-types\"></a>Elementi con tipi diversi </h3>\n<p>Se gli elementi radice hanno tipo diverso, React abbattera il vecchio albero e costruir\u00e0 da zero quello nuovo. Nel passaggio da <code class=\"language-javascript\">&lt;a&gt;</code> a <code class=\"language-javascript\">&lt;img&gt;</code>, da <code class=\"language-javascript\">&lt;Article&gt;</code> a <code class=\"language-javascript\">&lt;Comment&gt;</code>, da <code class=\"language-javascript\">&lt;Button&gt;</code> a <code class=\"language-javascript\">&lt;div&gt;</code> - ognuno di questi porter\u00e0 ad una ricostruzione dell\u2019albero completa.</p>\n<p>Nell\u2019abbattere un albero, vengono distrutti i vecchi nodi del DOM e le istanze dei Componenti ricevono il <code class=\"language-javascript\">componentWillUnmount()</code>. Nella costruzione del nuovo albero, nuovi nodi vengono inseriti nel DOM. Le istanze dei Componenti ricevono prima l\u2019<code class=\"language-javascript\">UNSAFE_componentWillMount()</code> e dopo il <code class=\"language-javascript\">componentDidMount()</code>. Ogni state associato con il vecchio albero va perso.</p>\n<p>Ogni componente che sta sotto la radice verr\u00e0 smontato e il suo state verr\u00e0 distrutto. Per esempio, nel confronto tra:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter</span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter</span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Verr\u00e0 distrutto il vecchio <code class=\"language-javascript\">Counter</code> e ne verr\u00e0 montato uno nuovo.</p>\n<h3 id=\"dom-elements-of-the-same-type\"><a class=\"anchor\" href=\"/react/reconciliation#dom-elements-of-the-same-type\"></a>Elementi DOM dello stesso tipo </h3>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Questo metodo \u00e8 considerato legacy quindi dovresti <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evitarlo</a> nel nuovo codice:</p>\n<ul>\n<li><code class=\"language-javascript\">UNSAFE_componentWillMount()</code></li>\n</ul>\n</div>\n<p>Nel confrontare due elementi DOM di React che hanno lo stesso tipo, React guarder\u00e0 gli attributi di entrambi, manterr\u00e0 lo stesso nodo sottostante ed aggiorner\u00e0 solo gli attributi cambiati. Per esempio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prima<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cose<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dopo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cose<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Nel confronto tra questi due elementi, React sa di dover modificare solo il <code class=\"language-javascript\">className</code> sul nodo DOM sottostante.</p>\n<p>Quando viene aggiornato <code class=\"language-javascript\">style</code>, React sa come aggiornare soltanto le propriet\u00e0 che sono cambiate. Ad esempio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{color:</span> <span class=\"token attr-name\">'red',</span> <span class=\"token attr-name\"><span class=\"token namespace\">fontWeight:</span></span> <span class=\"token attr-name\">'bold'}}</span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{color:</span> <span class=\"token attr-name\">'green',</span> <span class=\"token attr-name\"><span class=\"token namespace\">fontWeight:</span></span> <span class=\"token attr-name\">'bold'}}</span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Nella conversione tra questi due elementi, React sa di dover modificare solo la propriet\u00e0 <code class=\"language-javascript\">color</code>, ma non <code class=\"language-javascript\">fontWeight</code>.</p>\n<p>Dopo aver gestito il nodo DOM, React esegue le stesse operazioni in ricorsione sui nodi figlio.</p>\n<h3 id=\"component-elements-of-the-same-type\"><a class=\"anchor\" href=\"/react/reconciliation#component-elements-of-the-same-type\"></a>Elementi Componente dello stesso tipo </h3>\n<p>Quando un componente si aggiorna, l\u2019istanza rimane la stessa, cos\u00ec che lo state persista tra le renderizzazioni. React aggiorna le props dell\u2019istanza sottostante del componente facendola combaciare con il nuovo elemento, e chiama <code class=\"language-javascript\">componentWillReceiveProps()</code> e <code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> e <code class=\"language-javascript\">componentDidUpdate()</code> sull\u2019istanza sottostante.</p>\n<p>In seguito, viene chiamato il metodo <code class=\"language-javascript\">render()</code> e l\u2019algoritmo di confronto va in ricorsione sui risultati precedenti e su quelli nuovi.</p>\n<h3 id=\"recursing-on-children\"><a class=\"anchor\" href=\"/react/reconciliation#recursing-on-children\"></a>Ricorsione sui figli </h3>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Questi metodi sono considerati legacy quindi dovresti <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evitarli</a> nel nuovo codice:</p>\n<ul>\n<li><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code></li>\n<li><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code></li>\n</ul>\n</div>\n<p>Di base, quando React va in ricorsione sui figli di un nodo DOM, itera su entrambe le liste di figli allo stesso tempo e genera una mutazione ogni volta che trova differenze.</p>\n<p>Per esempio, nell\u2019aggiungere un elemento alla fine di un figlio, la conversione dei due alberi funziona bene:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>primo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>secondo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>primo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>secondo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>terzo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>React confronter\u00e0 gli alberi <code class=\"language-javascript\">&lt;li&gt;primo&lt;/li&gt;</code>, gli alberi <code class=\"language-javascript\">&lt;li&gt;secondo&lt;/li&gt;</code>, e inserir\u00e0 l\u2019albero <code class=\"language-javascript\">&lt;li&gt;terzo&lt;/li&gt;</code>.</p>\n<p>Se lo implementassi ingenuamente, inserendo un elemento all\u2019inizio avresti prestazioni peggiori. Per esempio, la conversione tra questi due alberi funziona male:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Connecticut<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>React muter\u00e0 tutti i figli invece di realizzare il fatto che pu\u00f2 mantenere i sottoalberi <code class=\"language-javascript\">&lt;li&gt;Duke&lt;/li&gt;</code> e <code class=\"language-javascript\">&lt;li&gt;Villanova&lt;/li&gt;</code> intatti. Questa inefficienza pu\u00f2 essere un problema.</p>\n<h3 id=\"keys\"><a class=\"anchor\" href=\"/react/reconciliation#keys\"></a>Chiavi </h3>\n<p>Per risolvere questo problema, React supporta un attributo <code class=\"language-javascript\">key</code>. Quando i figli hanno le key, React le utilizza per confrontare i figli nell\u2019albero originale con quelli nell\u2019albero successivo. Per esempio, aggiungere una <code class=\"language-javascript\">key</code> nell\u2019esempio inefficiente fatto in precedenza pu\u00f2 rendere efficiente la conversione tra questi alberi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2016<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2014<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Connecticut<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2016<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Adesso React sa che l\u2019elemento con key <code class=\"language-javascript\">'2014'</code> \u00e8 nuovo, e gli elementi con key <code class=\"language-javascript\">'2015'</code> e <code class=\"language-javascript\">'2016'</code> sono stati semplicemente spostati.</p>\n<p>In pratica, trovare una key non \u00e8 difficile. L\u2019elemento che stai per mostrare potrebbe gi\u00e0 avere un suo ID univoco, quindi la key potrebbe derivare direttamente dal dato che hai a disposizione:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Se questo non \u00e8 il tuo caso, puoi aggiungere una nuova propriet\u00e0 ID al tuo modello o unire alcune parti del contenuto per generare una key. La key deve essere univoca solo tra gli elementi vicini, non globalmente.</p>\n<p>Come ultima spiaggia, puoi passare l\u2019indice dell\u2019array come key. Questo pu\u00f2 andare bene se gli elementi non vengono mai riordinati, altrimenti l\u2019operazione di riordinamento \u00e8 pi\u00f9 lenta.</p>\n<p>Quando gli indici vengono usati come key, il riordinamento degli elementi pu\u00f2 causare problemi anche con lo state del componente. Le istanze dei componenti vengono aggiornate e riutilizzate in base alla loro key. Se la key \u00e8 l\u2019indice, varia quando l\u2019elemento viene spostato. Quindi lo state per componenti come input non controllati pu\u00f2 mischiarsi e aggiornarsi in maniera inaspettata.</p>\n<p>Qui c\u2019\u00e8 <a class=\"external-link\" href=\"https://it.reactjs.org//redirect-to-codepen/reconciliation/index-used-as-key\">un esempio del problema causato dall'utilizzo degli indici come chiave</a> su CodePen, e qui c\u2019\u00e8 <a class=\"external-link\" href=\"https://it.reactjs.org//redirect-to-codepen/reconciliation/no-index-used-as-key\">una versione aggiornata dello stesso esempio che dimostra come non usare gli indici come chiave risolve questi problemi di riodinamento</a>.</p>\n<h2 id=\"tradeoffs\"><a class=\"anchor\" href=\"/react/reconciliation#tradeoffs\"></a>Compromessi </h2>\n<p>E\u2019 importante tenere a mente che l\u2019algoritmo di riconciliazione \u00e8 un dettaglio implementativo. React potrebbe rirenderizzare l\u2019intera app ad ogni azione; il risultato finale sarebbe lo stesso. Per essere chiari, rirenderizzare in questo contesto significa chiamare <code class=\"language-javascript\">render</code> per ogni componente, non significa che React li smonter\u00e0 e rimonter\u00e0. Applicher\u00e0 soltanto le differenze seguendo le regole definite nelle sezioni precedenti.</p>\n<p>Stiamo regolarmente ridefinendo le euristiche in modo da rendere pi\u00f9 veloci i casi d\u2019uso comuni. Nell\u2019implementazione corrente, puoi esprimere il fatto che un sottoalbero venga mosso tra i suoi fratelli, ma non puoi stabilire se sono stati mossi altrove. L\u2019algoritmo ri-renderizzer\u00e0 l\u2019intero sottoalbero.</p>\n<p>Dato che React si basa su euristiche, se le assunzioni iniziali non vengono rispettate, le prestazioni saranno peggiori.</p>\n<ol>\n<li>L\u2019algoritmo non cercher\u00e0 di confrontare sottoalberi di tipi di componente diverso. Se il tuo caso \u00e8 quello di alternare tra due componenti con diverso tipo ma con output molto simile, potresti renderli dello stesso tipo. in pratica, non abbiamo trovato problemi nel farlo.</li>\n<li>Le chiavi dovrebbero essere stabili, predicibili ed univoche. Chiavi non stabili (come quell prodotte da <code class=\"language-javascript\">Math.random()</code>) causeranno l\u2019inutile ricreazione di diverse istanze dei componenti e nodi DOM, ci\u00f2 pu\u00f2 causare degradazione delle prestazioni e perdita di state nei componenti figlio.</li>\n</ol></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reconciliation.md\">Edit this page</a></p></div></article>", "path": "/react/reconciliation", "nav": ["/react/react-without-jsx", "/react/refs-and-the-dom"]}, {"key": "Refs ed il DOM", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Refs provide a way to access DOM nodes or React elements created in the render method.</p>\n<p>In the typical React dataflow, <a href=\"/react/components-and-props\">props</a> are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element. For both of these cases, React provides an escape hatch.</p>\n<h3 id=\"when-to-use-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#when-to-use-refs\"></a>When to Use Refs </h3>\n<p>There are a few good use cases for refs:</p>\n<ul>\n<li>Managing focus, text selection, or media playback.</li>\n<li>Triggering imperative animations.</li>\n<li>Integrating with third-party DOM libraries.</li>\n</ul>\n<p>Avoid using refs for anything that can be done declaratively.</p>\n<p>For example, instead of exposing <code class=\"language-javascript\">open()</code> and <code class=\"language-javascript\">close()</code> methods on a <code class=\"language-javascript\">Dialog</code> component, pass an <code class=\"language-javascript\">isOpen</code> prop to it.</p>\n<h3 id=\"dont-overuse-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#dont-overuse-refs\"></a>Don\u2019t Overuse Refs </h3>\n<p>Your first inclination may be to use refs to \u201cmake things happen\u201d in your app. If this is the case, take a moment and think more critically about where state should be owned in the component hierarchy. Often, it becomes clear that the proper place to \u201cown\u201d that state is at a higher level in the hierarchy. See the <a href=\"/react/lifting-state-up\">Lifting State Up</a> guide for examples of this.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>The examples below have been updated to use the <code class=\"language-javascript\">React.createRef()</code> API introduced in React 16.3. If you are using an earlier release of React, we recommend using <a href=\"/react/refs-and-the-dom#callback-refs\">callback refs</a> instead.</p>\n</div>\n<h3 id=\"creating-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#creating-refs\"></a>Creating Refs </h3>\n<p>Refs are created using <code class=\"language-javascript\">React.createRef()</code> and attached to React elements via the <code class=\"language-javascript\">ref</code> attribute. Refs are commonly assigned to an instance property when a component is constructed so they can be referenced throughout the component.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"accessing-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#accessing-refs\"></a>Accessing Refs </h3>\n<p>When a ref is passed to an element in <code class=\"language-javascript\">render</code>, a reference to the node becomes accessible at the <code class=\"language-javascript\">current</code> attribute of the ref.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The value of the ref differs depending on the type of the node:</p>\n<ul>\n<li>When the <code class=\"language-javascript\">ref</code> attribute is used on an HTML element, the <code class=\"language-javascript\">ref</code> created in the constructor with <code class=\"language-javascript\">React.createRef()</code> receives the underlying DOM element as its <code class=\"language-javascript\">current</code> property.</li>\n<li>When the <code class=\"language-javascript\">ref</code> attribute is used on a custom class component, the <code class=\"language-javascript\">ref</code> object receives the mounted instance of the component as its <code class=\"language-javascript\">current</code>.</li>\n<li><strong>You may not use the <code class=\"language-javascript\">ref</code> attribute on function components</strong> because they don\u2019t have instances.</li>\n</ul>\n<p>The examples below demonstrate the differences.</p>\n<h4 id=\"adding-a-ref-to-a-dom-element\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#adding-a-ref-to-a-dom-element\"></a>Adding a Ref to a DOM Element </h4>\n<p>This code uses a <code class=\"language-javascript\">ref</code> to store a reference to a DOM node:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// create a ref to store the textInput DOM element</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Explicitly focus the text input using the raw DOM API</span>\n    <span class=\"token comment\">// Note: we're accessing \"current\" to get the DOM node</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// tell React that we want to associate the &lt;input&gt; ref</span>\n    <span class=\"token comment\">// with the `textInput` that we created in the constructor</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React will assign the <code class=\"language-javascript\">current</code> property with the DOM element when the component mounts, and assign it back to <code class=\"language-javascript\">null</code> when it unmounts. <code class=\"language-javascript\">ref</code> updates happen before <code class=\"language-javascript\">componentDidMount</code> or <code class=\"language-javascript\">componentDidUpdate</code> lifecycle methods.</p>\n<h4 id=\"adding-a-ref-to-a-class-component\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#adding-a-ref-to-a-class-component\"></a>Adding a Ref to a Class Component </h4>\n<p>If we wanted to wrap the <code class=\"language-javascript\">CustomTextInput</code> above to simulate it being clicked immediately after mounting, we could use a ref to get access to the custom input and call its <code class=\"language-javascript\">focusTextInput</code> method manually:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoFocusTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomTextInput</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that this only works if <code class=\"language-javascript\">CustomTextInput</code> is declared as a class:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"refs-and-function-components\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#refs-and-function-components\"></a>Refs and Function Components </h4>\n<p>By default, <strong>you may not use the <code class=\"language-javascript\">ref</code> attribute on function components</strong> because they don\u2019t have instances:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyFunctionComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This will *not* work!</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyFunctionComponent</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you want to allow people to take a <code class=\"language-javascript\">ref</code> to your function component, you can use <a href=\"/react/forwarding-refs\"><code class=\"language-javascript\">forwardRef</code></a> (possibly in conjunction with <a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a>), or you can convert the component to a class.</p>\n<p>You can, however, <strong>use the <code class=\"language-javascript\">ref</code> attribute inside a function component</strong> as long as you refer to a DOM element or a class component:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// textInput must be declared here so the ref can refer to it</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"exposing-dom-refs-to-parent-components\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#exposing-dom-refs-to-parent-components\"></a>Exposing DOM Refs to Parent Components </h3>\n<p>In rare cases, you might want to have access to a child\u2019s DOM node from a parent component. This is generally not recommended because it breaks component encapsulation, but it can occasionally be useful for triggering focus or measuring the size or position of a child DOM node.</p>\n<p>While you could <a href=\"/react/refs-and-the-dom#adding-a-ref-to-a-class-component\">add a ref to the child component</a>, this is not an ideal solution, as you would only get a component instance rather than a DOM node. Additionally, this wouldn\u2019t work with function components.</p>\n<p>If you use React 16.3 or higher, we recommend to use <a href=\"/react/forwarding-refs\">ref forwarding</a> for these cases. <strong>Ref forwarding lets components opt into exposing any child component\u2019s ref as their own</strong>. You can find a detailed example of how to expose a child\u2019s DOM node to a parent component <a href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\">in the ref forwarding documentation</a>.</p>\n<p>If you use React 16.2 or lower, or if you need more flexibility than provided by ref forwarding, you can use <a class=\"external-link\" href=\"https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509\">this alternative approach</a> and explicitly pass a ref as a differently named prop.</p>\n<p>When possible, we advise against exposing DOM nodes, but it can be a useful escape hatch. Note that this approach requires you to add some code to the child component. If you have absolutely no control over the child component implementation, your last option is to use <a href=\"/react/react-dom#finddomnode\"><code class=\"language-javascript\">findDOMNode()</code></a>, but it is discouraged and deprecated in <a href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\"><code class=\"language-javascript\">StrictMode</code></a>.</p>\n<h3 id=\"callback-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#callback-refs\"></a>Callback Refs </h3>\n<p>React also supports another way to set refs called \u201ccallback refs\u201d, which gives more fine-grain control over when refs are set and unset.</p>\n<p>Instead of passing a <code class=\"language-javascript\">ref</code> attribute created by <code class=\"language-javascript\">createRef()</code>, you pass a function. The function receives the React component instance or HTML DOM element as its argument, which can be stored and accessed elsewhere. </p>\n<p>The example below implements a common pattern: using the <code class=\"language-javascript\">ref</code> callback to store a reference to a DOM node in an instance property.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setTextInputRef</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">element</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">focusTextInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Focus the text input using the raw DOM API</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// autofocus the input on mount</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use the `ref` callback to store a reference to the text input DOM</span>\n    <span class=\"token comment\">// element in an instance field (for example, this.textInput).</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setTextInputRef<span class=\"token punctuation\">}</span></span></span>        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput<span class=\"token punctuation\">}</span></span></span>        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React will call the <code class=\"language-javascript\">ref</code> callback with the DOM element when the component mounts, and call it with <code class=\"language-javascript\">null</code> when it unmounts. Refs are guaranteed to be up-to-date before <code class=\"language-javascript\">componentDidMount</code> or <code class=\"language-javascript\">componentDidUpdate</code> fires.</p>\n<p>You can pass callback refs between components like you can with object refs that were created with <code class=\"language-javascript\">React.createRef()</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomTextInput</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">inputRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span></span>      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the example above, <code class=\"language-javascript\">Parent</code> passes its ref callback as an <code class=\"language-javascript\">inputRef</code> prop to the <code class=\"language-javascript\">CustomTextInput</code>, and the <code class=\"language-javascript\">CustomTextInput</code> passes the same function as a special <code class=\"language-javascript\">ref</code> attribute to the <code class=\"language-javascript\">&lt;input&gt;</code>. As a result, <code class=\"language-javascript\">this.inputElement</code> in <code class=\"language-javascript\">Parent</code> will be set to the DOM node corresponding to the <code class=\"language-javascript\">&lt;input&gt;</code> element in the <code class=\"language-javascript\">CustomTextInput</code>.</p>\n<h3 id=\"legacy-api-string-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#legacy-api-string-refs\"></a>Legacy API: String Refs </h3>\n<p>If you worked with React before, you might be familiar with an older API where the <code class=\"language-javascript\">ref</code> attribute is a string, like <code class=\"language-javascript\">\"textInput\"</code>, and the DOM node is accessed as <code class=\"language-javascript\">this.refs.textInput</code>. We advise against it because string refs have <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/8333#issuecomment-271648615\">some issues</a>, are considered legacy, and <strong>are likely to be removed in one of the future releases</strong>. </p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>If you\u2019re currently using <code class=\"language-javascript\">this.refs.textInput</code> to access refs, we recommend using either the <a href=\"/react/refs-and-the-dom#callback-refs\">callback pattern</a> or the <a href=\"/react/refs-and-the-dom#creating-refs\"><code class=\"language-javascript\">createRef</code> API</a> instead.</p>\n</div>\n<h3 id=\"caveats-with-callback-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#caveats-with-callback-refs\"></a>Caveats with callback refs </h3>\n<p>If the <code class=\"language-javascript\">ref</code> callback is defined as an inline function, it will get called twice during updates, first with <code class=\"language-javascript\">null</code> and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one. You can avoid this by defining the <code class=\"language-javascript\">ref</code> callback as a bound method on the class, but note that it shouldn\u2019t matter in most cases.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/refs-and-the-dom.md\">Edit this page</a></p></div></article>", "path": "/react/refs-and-the-dom", "nav": ["/react/reconciliation", "/react/render-props"]}, {"key": "Render Props", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>The term <a class=\"external-link\" href=\"https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce\">\u201crender prop\u201d</a> refers to a technique for sharing code between React components using a prop whose value is a function.</p>\n<p>A component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DataProvider</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Libraries that use render props include <a class=\"external-link\" href=\"https://reacttraining.com/react-router/web/api/Route/render-func\">React Router</a>, <a class=\"external-link\" href=\"https://github.com/paypal/downshift\">Downshift</a> and <a class=\"external-link\" href=\"https://github.com/jaredpalmer/formik\">Formik</a>.</p>\n<p>In this document, we\u2019ll discuss why render props are useful, and how to write your own.</p>\n<h2 id=\"use-render-props-for-cross-cutting-concerns\"><a class=\"anchor\" href=\"/react/render-props#use-render-props-for-cross-cutting-concerns\"></a>Use Render Props for Cross-Cutting Concerns </h2>\n<p>Components are the primary unit of code reuse in React, but it\u2019s not always obvious how to share the state or behavior that one component encapsulates to other components that need that same state.</p>\n<p>For example, the following component tracks the mouse position in a web app:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The current mouse position is (</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As the cursor moves around the screen, the component displays its (x, y) coordinates in a <code class=\"language-javascript\">&lt;p&gt;</code>.</p>\n<p>Now the question is: How can we reuse this behavior in another component? In other words, if another component needs to know about the cursor position, can we encapsulate that behavior so that we can easily share it with that component?</p>\n<p>Since components are the basic unit of code reuse in React, let\u2019s try refactoring the code a bit to use a <code class=\"language-javascript\">&lt;Mouse&gt;</code> component that encapsulates the behavior we need to reuse elsewhere.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// The &lt;Mouse&gt; component encapsulates the behavior we need...</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ...but how do we render something other than a &lt;p&gt;? */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The current mouse position is (</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now the <code class=\"language-javascript\">&lt;Mouse&gt;</code> component encapsulates all behavior associated with listening for <code class=\"language-javascript\">mousemove</code> events and storing the (x, y) position of the cursor, but it\u2019s not yet truly reusable.</p>\n<p>For example, let\u2019s say we have a <code class=\"language-javascript\">&lt;Cat&gt;</code> component that renders the image of a cat chasing the mouse around the screen. We might use a <code class=\"language-javascript\">&lt;Cat mouse={{ x, y }}&gt;</code> prop to tell the component the coordinates of the mouse so it knows where to position the image on the screen.</p>\n<p>As a first pass, you might try rendering the <code class=\"language-javascript\">&lt;Cat&gt;</code> <em>inside <code class=\"language-javascript\">&lt;Mouse&gt;</code>\u2019s <code class=\"language-javascript\">render</code> method</em>, like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>mouse<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseWithCat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n          We could just swap out the &lt;p&gt; for a &lt;Cat&gt; here ... but then\n          we would need to create a separate &lt;MouseWithSomethingElse&gt;\n          component every time we need to use it, so &lt;MouseWithCat&gt;\n          isn't really reusable yet.\n        */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MouseWithCat</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This approach will work for our specific use case, but we haven\u2019t achieved the objective of truly encapsulating the behavior in a reusable way. Now, every time we want the mouse position for a different use case, we have to create a new component (i.e. essentially another <code class=\"language-javascript\">&lt;MouseWithCat&gt;</code>) that renders something specifically for that use case.</p>\n<p>Here\u2019s where the render prop comes in: Instead of hard-coding a <code class=\"language-javascript\">&lt;Cat&gt;</code> inside a <code class=\"language-javascript\">&lt;Mouse&gt;</code> component, and effectively changing its rendered output, we can provide <code class=\"language-javascript\">&lt;Mouse&gt;</code> with a function prop that it uses to dynamically determine what to render\u2013a render prop.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>mouse<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n          Instead of providing a static representation of what &lt;Mouse&gt; renders,\n          use the `render` prop to dynamically determine what to render.\n        */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, instead of effectively cloning the <code class=\"language-javascript\">&lt;Mouse&gt;</code> component and hard-coding something else in its <code class=\"language-javascript\">render</code> method to solve for a specific use case, we provide a <code class=\"language-javascript\">render</code> prop that <code class=\"language-javascript\">&lt;Mouse&gt;</code> can use to dynamically determine what it renders.</p>\n<p>More concretely, <strong>a render prop is a function prop that a component uses to know what to render.</strong></p>\n<p>This technique makes the behavior that we need to share extremely portable. To get that behavior, render a <code class=\"language-javascript\">&lt;Mouse&gt;</code> with a <code class=\"language-javascript\">render</code> prop that tells it what to render with the current (x, y) of the cursor.</p>\n<p>One interesting thing to note about render props is that you can implement most <a href=\"/react/higher-order-components\">higher-order components</a> (HOC) using a regular component with a render prop. For example, if you would prefer to have a <code class=\"language-javascript\">withMouse</code> HOC instead of a <code class=\"language-javascript\">&lt;Mouse&gt;</code> component, you could easily create one using a regular <code class=\"language-javascript\">&lt;Mouse&gt;</code> with a render prop:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// If you really want a HOC for some reason, you can easily</span>\n<span class=\"token comment\">// create one using a regular component with a render prop!</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">withMouse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So using a render prop makes it possible to use either pattern.</p>\n<h2 id=\"using-props-other-than-render\"><a class=\"anchor\" href=\"/react/render-props#using-props-other-than-render\"></a>Using Props Other Than <code class=\"language-javascript\">render</code> </h2>\n<p>It\u2019s important to remember that just because the pattern is called \u201crender props\u201d you don\u2019t <em>have to use a prop named <code class=\"language-javascript\">render</code> to use this pattern</em>. In fact, <a class=\"external-link\" href=\"https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce\"><em>any</em> prop that is a function that a component uses to know what to render is technically a \u201crender prop\u201d</a>.</p>\n<p>Although the examples above use <code class=\"language-javascript\">render</code>, we could just as easily use the <code class=\"language-javascript\">children</code> prop!</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">children</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The mouse position is </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>And remember, the <code class=\"language-javascript\">children</code> prop doesn\u2019t actually need to be named in the list of \u201cattributes\u201d in your JSX element. Instead, you can put it directly <em>inside</em> the element!</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The mouse position is </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Mouse</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>You\u2019ll see this technique used in the <a class=\"external-link\" href=\"https://github.com/chenglou/react-motion\">react-motion</a> API.</p>\n<p>Since this technique is a little unusual, you\u2019ll probably want to explicitly state that <code class=\"language-javascript\">children</code> should be a function in your <code class=\"language-javascript\">propTypes</code> when designing an API like this.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">Mouse<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"caveats\"><a class=\"anchor\" href=\"/react/render-props#caveats\"></a>Caveats </h2>\n<h3 id=\"be-careful-when-using-render-props-with-reactpurecomponent\"><a class=\"anchor\" href=\"/react/render-props#be-careful-when-using-render-props-with-reactpurecomponent\"></a>Be careful when using Render Props with React.PureComponent </h3>\n<p>Using a render prop can negate the advantage that comes from using <a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">React.PureComponent</code></a> if you create the function inside a <code class=\"language-javascript\">render</code> method. This is because the shallow prop comparison will always return <code class=\"language-javascript\">false</code> for new props, and each <code class=\"language-javascript\">render</code> in this case will generate a new value for the render prop.</p>\n<p>For example, continuing with our <code class=\"language-javascript\">&lt;Mouse&gt;</code> component from above, if <code class=\"language-javascript\">Mouse</code> were to extend <code class=\"language-javascript\">React.PureComponent</code> instead of <code class=\"language-javascript\">React.Component</code>, our example would look like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Same implementation as above...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n          This is bad! The value of the `render` prop will\n          be different on each render.\n        */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, each time <code class=\"language-javascript\">&lt;MouseTracker&gt;</code> renders, it generates a new function as the value of the <code class=\"language-javascript\">&lt;Mouse render&gt;</code> prop, thus negating the effect of <code class=\"language-javascript\">&lt;Mouse&gt;</code> extending <code class=\"language-javascript\">React.PureComponent</code> in the first place!</p>\n<p>To get around this problem, you can sometimes define the prop as an instance method, like so:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Defined as an instance method, `this.renderTheCat` always</span>\n  <span class=\"token comment\">// refers to *same* function when we use it in render</span>\n  <span class=\"token function\">renderTheCat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mouse</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderTheCat<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In cases where you cannot define the prop statically (e.g. because you need to close over the component\u2019s props and/or state) <code class=\"language-javascript\">&lt;Mouse&gt;</code> should extend <code class=\"language-javascript\">React.Component</code> instead.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/render-props.md\">Edit this page</a></p></div></article>", "path": "/react/render-props", "nav": ["/react/refs-and-the-dom", "/react/static-type-checking"]}, {"key": "Controllo Tipi Statico", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Static type checkers like <a class=\"external-link\" href=\"https://flow.org/\">Flow</a> and <a class=\"external-link\" href=\"https://www.typescriptlang.org/\">TypeScript</a> identify certain types of problems before you even run your code. They can also improve developer workflow by adding features like auto-completion. For this reason, we recommend using Flow or TypeScript instead of <code class=\"language-javascript\">PropTypes</code> for larger code bases.</p>\n<h2 id=\"flow\"><a class=\"anchor\" href=\"/react/static-type-checking#flow\"></a>Flow </h2>\n<p><a class=\"external-link\" href=\"https://flow.org/\">Flow</a> is a static type checker for your JavaScript code. It is developed at Facebook and is often used with React. It lets you annotate the variables, functions, and React components with a special type syntax, and catch mistakes early. You can read an <a class=\"external-link\" href=\"https://flow.org/en/docs/getting-started/\">introduction to Flow</a> to learn its basics.</p>\n<p>To use Flow, you need to:</p>\n<ul>\n<li>Add Flow to your project as a dependency.</li>\n<li>Ensure that Flow syntax is stripped from the compiled code.</li>\n<li>Add type annotations and run Flow to check them.</li>\n</ul>\n<p>We will explain these steps below in detail.</p>\n<h3 id=\"adding-flow-to-a-project\"><a class=\"anchor\" href=\"/react/static-type-checking#adding-flow-to-a-project\"></a>Adding Flow to a Project </h3>\n<p>First, navigate to your project directory in the terminal. You will need to run the following command:</p>\n<p>If you use <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev flow-bin</code></pre></div>\n<p>If you use <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev flow-bin</code></pre></div>\n<p>This command installs the latest version of Flow into your project.</p>\n<p>Now, add <code class=\"language-javascript\">flow</code> to the <code class=\"language-javascript\">\"scripts\"</code> section of your <code class=\"language-javascript\">package.json</code> to be able to use this from the terminal:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"flow\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flow\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, run one of the following commands:</p>\n<p>If you use <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> run flow init</code></pre></div>\n<p>If you use <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> run flow init</code></pre></div>\n<p>This command will create a Flow configuration file that you will need to commit.</p>\n<h3 id=\"stripping-flow-syntax-from-the-compiled-code\"><a class=\"anchor\" href=\"/react/static-type-checking#stripping-flow-syntax-from-the-compiled-code\"></a>Stripping Flow Syntax from the Compiled Code </h3>\n<p>Flow extends the JavaScript language with a special syntax for type annotations. However, browsers aren\u2019t aware of this syntax, so we need to make sure it doesn\u2019t end up in the compiled JavaScript bundle that is sent to the browser.</p>\n<p>The exact way to do this depends on the tools you use to compile JavaScript.</p>\n<h4 id=\"create-react-app\"><a class=\"anchor\" href=\"/react/static-type-checking#create-react-app\"></a>Create React App </h4>\n<p>If your project was set up using <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>, congratulations! The Flow annotations are already being stripped by default so you don\u2019t need to do anything else in this step.</p>\n<h4 id=\"babel\"><a class=\"anchor\" href=\"/react/static-type-checking#babel\"></a>Babel </h4>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>These instructions are <em>not</em> for Create React App users. Even though Create React App uses Babel under the hood, it is already configured to understand Flow. Only follow this step if you <em>don\u2019t</em> use Create React App.</p>\n</div>\n<p>If you manually configured Babel for your project, you will need to install a special preset for Flow.</p>\n<p>If you use Yarn, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev @babel/preset-flow</code></pre></div>\n<p>If you use npm, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/preset-flow</code></pre></div>\n<p>Then add the <code class=\"language-javascript\">flow</code> preset to your <a class=\"external-link\" href=\"https://babeljs.io/docs/usage/babelrc/\">Babel configuration</a>. For example, if you configure Babel through <code class=\"language-javascript\">.babelrc</code> file, it could look like this:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"@babel/preset-flow\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token string\">\"react\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will let you use the Flow syntax in your code.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Flow does not require the <code class=\"language-javascript\">react</code> preset, but they are often used together. Flow itself understands JSX syntax out of the box.</p>\n</div>\n<h4 id=\"other-build-setups\"><a class=\"anchor\" href=\"/react/static-type-checking#other-build-setups\"></a>Other Build Setups </h4>\n<p>If you don\u2019t use either Create React App or Babel, you can use <a class=\"external-link\" href=\"https://github.com/flowtype/flow-remove-types\">flow-remove-types</a> to strip the type annotations.</p>\n<h3 id=\"running-flow\"><a class=\"anchor\" href=\"/react/static-type-checking#running-flow\"></a>Running Flow </h3>\n<p>If you followed the instructions above, you should be able to run Flow for the first time.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> flow</code></pre></div>\n<p>If you use npm, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> run flow</code></pre></div>\n<p>You should see a message like:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">No errors!\n\u2728  Done in 0.17s.</code></pre></div>\n<h3 id=\"adding-flow-type-annotations\"><a class=\"anchor\" href=\"/react/static-type-checking#adding-flow-type-annotations\"></a>Adding Flow Type Annotations </h3>\n<p>By default, Flow only checks the files that include this annotation:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// @flow</span></code></pre></div>\n<p>Typically it is placed at the top of a file. Try adding it to some files in your project and run <code class=\"language-javascript\">yarn flow</code> or <code class=\"language-javascript\">npm run flow</code> to see if Flow already found any issues.</p>\n<p>There is also <a class=\"external-link\" href=\"https://flow.org/en/docs/config/options/#toc-all-boolean\">an option</a> to force Flow to check <em>all</em> files regardless of the annotation. This can be too noisy for existing projects, but is reasonable for a new project if you want to fully type it with Flow.</p>\n<p>Now you\u2019re all set! We recommend to check out the following resources to learn more about Flow:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://flow.org/en/docs/types/\">Flow Documentation: Type Annotations</a></li>\n<li><a class=\"external-link\" href=\"https://flow.org/en/docs/editors/\">Flow Documentation: Editors</a></li>\n<li><a class=\"external-link\" href=\"https://flow.org/en/docs/react/\">Flow Documentation: React</a></li>\n<li><a class=\"external-link\" href=\"https://medium.com/flow-type/linting-in-flow-7709d7a7e969\">Linting in Flow</a></li>\n</ul>\n<h2 id=\"typescript\"><a class=\"anchor\" href=\"/react/static-type-checking#typescript\"></a>TypeScript </h2>\n<p><a class=\"external-link\" href=\"https://www.typescriptlang.org/\">TypeScript</a> is a programming language developed by Microsoft. It is a typed superset of JavaScript, and includes its own compiler. Being a typed language, TypeScript can catch errors and bugs at build time, long before your app goes live. You can learn more about using TypeScript with React <a class=\"external-link\" href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\">here</a>.</p>\n<p>To use TypeScript, you need to:</p>\n<ul>\n<li>Add TypeScript as a dependency to your project</li>\n<li>Configure the TypeScript compiler options</li>\n<li>Use the right file extensions</li>\n<li>Add definitions for libraries you use</li>\n</ul>\n<p>Let\u2019s go over these in detail.</p>\n<h3 id=\"using-typescript-with-create-react-app\"><a class=\"anchor\" href=\"/react/static-type-checking#using-typescript-with-create-react-app\"></a>Using TypeScript with Create React App </h3>\n<p>Create React App supports TypeScript out of the box.</p>\n<p>To create a <strong>new project</strong> with TypeScript support, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\">npx create-react-app my-app --template typescript</code></pre></div>\n<p>You can also add it to an <strong>existing Create React App project</strong>, <a class=\"external-link\" href=\"https://facebook.github.io/create-react-app/docs/adding-typescript\">as documented here</a>.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>If you use Create React App, you can <strong>skip the rest of this page</strong>. It describes the manual setup which doesn\u2019t apply to Create React App users.</p>\n</div>\n<h3 id=\"adding-typescript-to-a-project\"><a class=\"anchor\" href=\"/react/static-type-checking#adding-typescript-to-a-project\"></a>Adding TypeScript to a Project </h3>\n<p>It all begins with running one command in your terminal.</p>\n<p>If you use <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev typescript</code></pre></div>\n<p>If you use <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev typescript</code></pre></div>\n<p>Congrats! You\u2019ve installed the latest version of TypeScript into your project. Installing TypeScript gives us access to the <code class=\"language-javascript\">tsc</code> command. Before configuration, let\u2019s add <code class=\"language-javascript\">tsc</code> to the \u201cscripts\u201d section in our <code class=\"language-javascript\">package.json</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"configuring-the-typescript-compiler\"><a class=\"anchor\" href=\"/react/static-type-checking#configuring-the-typescript-compiler\"></a>Configuring the TypeScript Compiler </h3>\n<p>The compiler is of no help to us until we tell it what to do. In TypeScript, these rules are defined in a special file called <code class=\"language-javascript\">tsconfig.json</code>. To generate this file:</p>\n<p>If you use <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> run tsc --init</code></pre></div>\n<p>If you use <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\">npx tsc --init</code></pre></div>\n<p>Looking at the now generated <code class=\"language-javascript\">tsconfig.json</code>, you can see that there are many options you can use to configure the compiler. For a detailed description of all the options, check <a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">here</a>.</p>\n<p>Of the many options, we\u2019ll look at <code class=\"language-javascript\">rootDir</code> and <code class=\"language-javascript\">outDir</code>. In its true fashion, the compiler will take in typescript files and generate javascript files. However we don\u2019t want to get confused with our source files and the generated output.</p>\n<p>We\u2019ll address this in two steps:</p>\n<ul>\n<li>Firstly, let\u2019s arrange our project structure like this. We\u2019ll place all our source code in the <code class=\"language-javascript\">src</code> directory.</li>\n</ul>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 index.ts\n\u2514\u2500\u2500 tsconfig.json</code></pre></div>\n<ul>\n<li>Next, we\u2019ll tell the compiler where our source code is and where the output should go.</li>\n</ul>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// tsconfig.json</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span></span>    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Great! Now when we run our build script the compiler will output the generated javascript to the <code class=\"language-javascript\">build</code> folder. The <a class=\"external-link\" href=\"https://github.com/Microsoft/TypeScript-React-Starter/blob/master/tsconfig.json\">TypeScript React Starter</a> provides a <code class=\"language-javascript\">tsconfig.json</code> with a good set of rules to get you started.</p>\n<p>Generally, you don\u2019t want to keep the generated javascript in your source control, so be sure to add the build folder to your <code class=\"language-javascript\">.gitignore</code>.</p>\n<h3 id=\"file-extensions\"><a class=\"anchor\" href=\"/react/static-type-checking#file-extensions\"></a>File extensions </h3>\n<p>In React, you most likely write your components in a <code class=\"language-javascript\">.js</code> file. In TypeScript we have 2 file extensions:</p>\n<p><code class=\"language-javascript\">.ts</code> is the default file extension while <code class=\"language-javascript\">.tsx</code> is a special extension used for files which contain <code class=\"language-javascript\">JSX</code>.</p>\n<h3 id=\"running-typescript\"><a class=\"anchor\" href=\"/react/static-type-checking#running-typescript\"></a>Running TypeScript </h3>\n<p>If you followed the instructions above, you should be able to run TypeScript for the first time.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> build</code></pre></div>\n<p>If you use npm, run:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> run build</code></pre></div>\n<p>If you see no output, it means that it completed successfully.</p>\n<h3 id=\"type-definitions\"><a class=\"anchor\" href=\"/react/static-type-checking#type-definitions\"></a>Type Definitions </h3>\n<p>To be able to show errors and hints from other packages, the compiler relies on declaration files. A declaration file provides all the type information about a library. This enables us to use javascript libraries like those on npm in our project. </p>\n<p>There are two main ways to get declarations for a library:</p>\n<p><strong>Bundled</strong> - The library bundles its own declaration file. This is great for us, since all we need to do is install the library, and we can use it right away. To check if a library has bundled types, look for an <code class=\"language-javascript\">index.d.ts</code> file in the project. Some libraries will have it specified in their <code class=\"language-javascript\">package.json</code> under the <code class=\"language-javascript\">typings</code> or <code class=\"language-javascript\">types</code> field.</p>\n<p><strong><a class=\"external-link\" href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">DefinitelyTyped</a></strong> - DefinitelyTyped is a huge repository of declarations for libraries that don\u2019t bundle a declaration file. The declarations are crowd-sourced and managed by Microsoft and open source contributors. React for example doesn\u2019t bundle its own declaration file. Instead we can get it from DefinitelyTyped. To do so enter this command in your terminal.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token comment\"># yarn</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev @types/react\n\n<span class=\"token comment\"># npm</span>\n<span class=\"token function\">npm</span> i --save-dev @types/react</code></pre></div>\n<p><strong>Local Declarations</strong>\nSometimes the package that you want to use doesn\u2019t bundle declarations nor is it available on DefinitelyTyped. In that case, we can have a local declaration file. To do this, create a <code class=\"language-javascript\">declarations.d.ts</code> file in the root of your source directory. A simple declaration could look like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-typescript\"><code class=\"language-javascript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'querystring'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> object\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You are now ready to code! We recommend to check out the following resources to learn more about TypeScript:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html\">TypeScript Documentation: Everyday Types</a></li>\n<li><a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html\">TypeScript Documentation: Migrating from JavaScript</a></li>\n<li><a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/react-&amp;-webpack.html\">TypeScript Documentation: React and Webpack</a></li>\n</ul>\n<h2 id=\"rescript\"><a class=\"anchor\" href=\"/react/static-type-checking#rescript\"></a>ReScript </h2>\n<p><a class=\"external-link\" href=\"https://rescript-lang.org/\">ReScript</a> is a typed language that compiles to JavaScript. Some of its core features are  guaranteed 100% type coverage, first-class JSX support and <a class=\"external-link\" href=\"https://rescript-lang.org/docs/react/latest/introduction\">dedicated React bindings</a> to allow integration in existing JS / TS React codebases.</p>\n<p>You can find more infos on integrating ReScript in your existing JS / React codebase <a class=\"external-link\" href=\"https://rescript-lang.org/docs/manual/latest/installation#integrate-into-an-existing-js-project\">here</a>.</p>\n<h2 id=\"kotlin\"><a class=\"anchor\" href=\"/react/static-type-checking#kotlin\"></a>Kotlin </h2>\n<p><a class=\"external-link\" href=\"https://kotlinlang.org/\">Kotlin</a> is a statically typed language developed by JetBrains. Its target platforms include the JVM, Android, LLVM, and <a class=\"external-link\" href=\"https://kotlinlang.org/docs/reference/js-overview.html\">JavaScript</a>. </p>\n<p>JetBrains develops and maintains several tools specifically for the React community: <a class=\"external-link\" href=\"https://github.com/JetBrains/kotlin-wrappers\">React bindings</a> as well as <a class=\"external-link\" href=\"https://github.com/JetBrains/create-react-kotlin-app\">Create React Kotlin App</a>. The latter helps you start building React apps with Kotlin with no build configuration.</p>\n<h2 id=\"other-languages\"><a class=\"anchor\" href=\"/react/static-type-checking#other-languages\"></a>Other Languages </h2>\n<p>Note there are other statically typed languages that compile to JavaScript and are thus React compatible. For example, <a class=\"external-link\" href=\"https://fable.io/\">F#/Fable</a> with <a class=\"external-link\" href=\"https://elmish.github.io/react\">elmish-react</a>. Check out their respective sites for more information, and feel free to add more statically typed languages that work with React to this page!</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/static-type-checking.md\">Edit this page</a></p></div></article>", "path": "/react/static-type-checking", "nav": ["/react/render-props", "/react/strict-mode"]}, {"key": "Strict Mode", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><code class=\"language-javascript\">StrictMode</code> is a tool for highlighting potential problems in an application. Like <code class=\"language-javascript\">Fragment</code>, <code class=\"language-javascript\">StrictMode</code> does not render any visible UI. It activates additional checks and warnings for its descendants.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Strict mode checks are run in development mode only; <em>they do not impact the production build</em>.</p>\n</div>\n<p>You can enable strict mode for any part of your application. For example:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ExampleApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentOne</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentTwo</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Footer</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>In the above example, strict mode checks will <em>not</em> be run against the <code class=\"language-javascript\">Header</code> and <code class=\"language-javascript\">Footer</code> components. However, <code class=\"language-javascript\">ComponentOne</code> and <code class=\"language-javascript\">ComponentTwo</code>, as well as all of their descendants, will have the checks.</p>\n<p><code class=\"language-javascript\">StrictMode</code> currently helps with:</p>\n<ul>\n<li><a href=\"/react/strict-mode#identifying-unsafe-lifecycles\">Identifying components with unsafe lifecycles</a></li>\n<li><a href=\"/react/strict-mode#warning-about-legacy-string-ref-api-usage\">Warning about legacy string ref API usage</a></li>\n<li><a href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\">Warning about deprecated findDOMNode usage</a></li>\n<li><a href=\"/react/strict-mode#detecting-unexpected-side-effects\">Detecting unexpected side effects</a></li>\n<li><a href=\"/react/strict-mode#detecting-legacy-context-api\">Detecting legacy context API</a></li>\n<li><a href=\"/react/strict-mode#ensuring-reusable-state\">Ensuring reusable state</a></li>\n</ul>\n<p>Additional functionality will be added with future releases of React.</p>\n<h3 id=\"identifying-unsafe-lifecycles\"><a class=\"anchor\" href=\"/react/strict-mode#identifying-unsafe-lifecycles\"></a>Identifying unsafe lifecycles </h3>\n<p>As explained <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">in this blog post</a>, certain legacy lifecycle methods are unsafe for use in async React applications. However, if your application uses third party libraries, it can be difficult to ensure that these lifecycles aren\u2019t being used. Fortunately, strict mode can help with this!</p>\n<p>When strict mode is enabled, React compiles a list of all class components using the unsafe lifecycles, and logs a warning message with information about these components, like so:</p>\n<p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/e4fdbff774b356881123e69ad88eda88/1628f/strict-mode-unsafe-lifecycles-warning.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/e4fdbff774b356881123e69ad88eda88/1e088/strict-mode-unsafe-lifecycles-warning.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>Addressing the issues identified by strict mode <em>now</em> will make it easier for you to take advantage of concurrent rendering in future releases of React.</p>\n<h3 id=\"warning-about-legacy-string-ref-api-usage\"><a class=\"anchor\" href=\"/react/strict-mode#warning-about-legacy-string-ref-api-usage\"></a>Warning about legacy string ref API usage </h3>\n<p>Previously, React provided two ways for managing refs: the legacy string ref API and the callback API. Although the string ref API was the more convenient of the two, it had <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/1373\">several downsides</a> and so our official recommendation was to <a href=\"/react/refs-and-the-dom#legacy-api-string-refs\">use the callback form instead</a>.</p>\n<p>React 16.3 added a third option that offers the convenience of a string ref without any of the downsides:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MioComponente</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Since object refs were largely added as a replacement for string refs, strict mode now warns about usage of string refs.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Callback refs will continue to be supported in addition to the new <code class=\"language-javascript\">createRef</code> API.</p>\n<p>You don\u2019t need to replace callback refs in your components. They are slightly more flexible, so they will remain as an advanced feature.</p>\n</div>\n<p><a href=\"/react/refs-and-the-dom\">Learn more about the new <code class=\"language-javascript\">createRef</code> API here.</a></p>\n<h3 id=\"warning-about-deprecated-finddomnode-usage\"><a class=\"anchor\" href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\"></a>Warning about deprecated findDOMNode usage </h3>\n<p>React used to support <code class=\"language-javascript\">findDOMNode</code> to search the tree for a DOM node given a class instance. Normally you don\u2019t need this because you can <a href=\"/react/refs-and-the-dom#creating-refs\">attach a ref directly to a DOM node</a>.</p>\n<p><code class=\"language-javascript\">findDOMNode</code> can also be used on class components but this was breaking abstraction levels by allowing a parent to demand that certain children were rendered. It creates a refactoring hazard where you can\u2019t change the implementation details of a component because a parent might be reaching into its DOM node. <code class=\"language-javascript\">findDOMNode</code> only returns the first child, but with the use of Fragments, it is possible for a component to render multiple DOM nodes. <code class=\"language-javascript\">findDOMNode</code> is a one time read API. It only gave you an answer when you asked for it. If a child component renders a different node, there is no way to handle this change. Therefore <code class=\"language-javascript\">findDOMNode</code> only worked if components always return a single DOM node that never changes.</p>\n<p>You can instead make this explicit by passing a ref to your custom component and pass that along to the DOM using <a href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\">ref forwarding</a>.</p>\n<p>You can also add a wrapper DOM node in your component and attach a ref directly to it.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>In CSS, the <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display#display_contents\"><code class=\"language-javascript\">display: contents</code></a> attribute can be used if you don\u2019t want the node to be part of the layout.</p>\n</div>\n<h3 id=\"detecting-unexpected-side-effects\"><a class=\"anchor\" href=\"/react/strict-mode#detecting-unexpected-side-effects\"></a>Detecting unexpected side effects </h3>\n<p>Conceptually, React does work in two phases:</p>\n<ul>\n<li>The <strong>render</strong> phase determines what changes need to be made to e.g. the DOM. During this phase, React calls <code class=\"language-javascript\">render</code> and then compares the result to the previous render.</li>\n<li>The <strong>commit</strong> phase is when React applies any changes. (In the case of React DOM, this is when React inserts, updates, and removes DOM nodes.) React also calls lifecycles like <code class=\"language-javascript\">componentDidMount</code> and <code class=\"language-javascript\">componentDidUpdate</code> during this phase.</li>\n</ul>\n<p>The commit phase is usually very fast, but rendering can be slow. For this reason, the upcoming concurrent mode (which is not enabled by default yet) breaks the rendering work into pieces, pausing and resuming the work to avoid blocking the browser. This means that React may invoke render phase lifecycles more than once before committing, or it may invoke them without committing at all (because of an error or a higher priority interruption).</p>\n<p>Render phase lifecycles include the following class component methods:</p>\n<ul>\n<li><code class=\"language-javascript\">constructor</code></li>\n<li><code class=\"language-javascript\">componentWillMount</code> (or <code class=\"language-javascript\">UNSAFE_componentWillMount</code>)</li>\n<li><code class=\"language-javascript\">componentWillReceiveProps</code> (or <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps</code>)</li>\n<li><code class=\"language-javascript\">componentWillUpdate</code> (or <code class=\"language-javascript\">UNSAFE_componentWillUpdate</code>)</li>\n<li><code class=\"language-javascript\">getDerivedStateFromProps</code></li>\n<li><code class=\"language-javascript\">shouldComponentUpdate</code></li>\n<li><code class=\"language-javascript\">render</code></li>\n<li><code class=\"language-javascript\">setState</code> updater functions (the first argument)</li>\n</ul>\n<p>Because the above methods might be called more than once, it\u2019s important that they do not contain side-effects. Ignoring this rule can lead to a variety of problems, including memory leaks and invalid application state. Unfortunately, it can be difficult to detect these problems as they can often be <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Deterministic_algorithm\">non-deterministic</a>.</p>\n<p>Strict mode can\u2019t automatically detect side effects for you, but it can help you spot them by making them a little more deterministic. This is done by intentionally double-invoking the following functions:</p>\n<ul>\n<li>Class component <code class=\"language-javascript\">constructor</code>, <code class=\"language-javascript\">render</code>, and <code class=\"language-javascript\">shouldComponentUpdate</code> methods</li>\n<li>Class component static <code class=\"language-javascript\">getDerivedStateFromProps</code> method</li>\n<li>Function component bodies</li>\n<li>State updater functions (the first argument to <code class=\"language-javascript\">setState</code>)</li>\n<li>Functions passed to <code class=\"language-javascript\">useState</code>, <code class=\"language-javascript\">useMemo</code>, or <code class=\"language-javascript\">useReducer</code></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>This only applies to development mode. <em>Lifecycles will not be double-invoked in production mode.</em></p>\n</div>\n<p>For example, consider the following code:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TopLevelRoute</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    SharedApplicationState<span class=\"token punctuation\">.</span><span class=\"token function\">recordEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ExampleComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>At first glance, this code might not seem problematic. But if <code class=\"language-javascript\">SharedApplicationState.recordEvent</code> is not <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning\">idempotent</a>, then instantiating this component multiple times could lead to invalid application state. This sort of subtle bug might not manifest during development, or it might do so inconsistently and so be overlooked.</p>\n<p>By intentionally double-invoking methods like the component constructor, strict mode makes patterns like this easier to spot.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>In React 17, React automatically modifies the console methods like <code class=\"language-javascript\">console.log()</code> to silence the logs in the second call to lifecycle functions. However, it may cause undesired behavior in certain cases where <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/20090#issuecomment-715927125\">a workaround can be used</a>.</p>\n<p>Starting from React 18, React does not suppress any logs. However, if you have React DevTools installed, the logs from the second call will appear slightly dimmed. React DevTools also offers a setting (off by default) to suppress them completely.</p>\n</div>\n<h3 id=\"detecting-legacy-context-api\"><a class=\"anchor\" href=\"/react/strict-mode#detecting-legacy-context-api\"></a>Detecting legacy context API </h3>\n<p>The legacy context API is error-prone, and will be removed in a future major version. It still works for all 16.x releases but will show this warning message in strict mode:</p>\n<p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/fca5c5e1fb2ef2e2d59afb100b432c12/51800/warn-legacy-context-in-strict-mode.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/fca5c5e1fb2ef2e2d59afb100b432c12/1e088/warn-legacy-context-in-strict-mode.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>Read the <a href=\"/react/context\">new context API documentation</a> to help migrate to the new version.</p>\n<h3 id=\"ensuring-reusable-state\"><a class=\"anchor\" href=\"/react/strict-mode#ensuring-reusable-state\"></a>Ensuring reusable state </h3>\n<p>In the future, we\u2019d like to add a feature that allows React to add and remove sections of the UI while preserving state. For example, when a user tabs away from a screen and back, React should be able to immediately show the previous screen. To do this, React will support remounting trees using the same component state used before unmounting.</p>\n<p>This feature will give React better performance out-of-the-box, but requires components to be resilient to effects being mounted and destroyed multiple times. Most effects will work without any changes, but some effects do not properly clean up subscriptions in the destroy callback, or implicitly assume they are only mounted or destroyed once.</p>\n<p>To help surface these issues, React 18 introduces a new development-only check to Strict Mode. This new check will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount.</p>\n<p>To demonstrate the development behavior you\u2019ll see in Strict Mode with this feature, consider what happens when React mounts a new component. Without this change, when a component mounts, React creates the effects:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">* React mounts the component.\n  * Layout effects are created.\n  * Effects are created.</code></pre></div>\n<p>With Strict Mode starting in React 18, whenever a component mounts in development, React will simulate immediately unmounting and remounting the component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">* React mounts the component.\n    * Layout effects are created.\n    * Effect effects are created.\n* React simulates effects being destroyed on a mounted component.\n    * Layout effects are destroyed.\n    * Effects are destroyed.\n* React simulates effects being re-created on a mounted component.\n    * Layout effects are created\n    * Effect setup code runs</code></pre></div>\n<p>On the second mount, React will restore the state from the first mount. This feature simulates user behavior such as a user tabbing away from a screen and back, ensuring that code will properly handle state restoration.</p>\n<p>When the component unmounts, effects are destroyed as normal:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">* React unmounts the component.\n  * Layout effects are destroyed.\n  * Effect effects are destroyed.</code></pre></div>\n<p>Unmounting and remounting includes:</p>\n<ul>\n<li><code class=\"language-javascript\">componentDidMount</code></li>\n<li><code class=\"language-javascript\">componentWillUnmount</code></li>\n<li><code class=\"language-javascript\">useEffect</code></li>\n<li><code class=\"language-javascript\">useLayoutEffect</code></li>\n<li><code class=\"language-javascript\">useInsertionEffect</code></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>This only applies to development mode, <em>production behavior is unchanged</em>.</p>\n</div>\n<p>For help supporting common issues, see:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/reactwg/react-18/discussions/18\">How to support Reusable State in Effects</a></li>\n</ul></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/strict-mode.md\">Edit this page</a></p></div></article>", "path": "/react/strict-mode", "nav": ["/react/static-type-checking", "/react/typechecking-with-proptypes"]}, {"key": "Controllo Tipi con PropTypes", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">React.PropTypes</code> has moved into a different package since React v15.5. Please use <a class=\"external-link\" href=\"https://www.npmjs.com/package/prop-types\">the <code class=\"language-javascript\">prop-types</code> library instead</a>.</p>\n<p>We provide <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2017/04/07/react-v15.5.0.html#migrating-from-reactproptypes\">a codemod script</a> to automate the conversion.</p>\n</div>\n<p>As your app grows, you can catch a lot of bugs with typechecking. For some applications, you can use JavaScript extensions like <a class=\"external-link\" href=\"https://flow.org/\">Flow</a> or <a class=\"external-link\" href=\"https://www.typescriptlang.org/\">TypeScript</a> to typecheck your whole application. But even if you don\u2019t use those, React has some built-in typechecking abilities. To run typechecking on the props for a component, you can assign the special <code class=\"language-javascript\">propTypes</code> property:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nGreeting<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this example, we are using a class component, but the same functionality could also be applied to function components, or components created by <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a> or <a href=\"/react/react-api#reactforwardref\"><code class=\"language-javascript\">React.forwardRef</code></a>.</p>\n<p><code class=\"language-javascript\">PropTypes</code> exports a range of validators that can be used to make sure the data you receive is valid. In this example, we\u2019re using <code class=\"language-javascript\">PropTypes.string</code>. When an invalid value is provided for a prop, a warning will be shown in the JavaScript console. For performance reasons, <code class=\"language-javascript\">propTypes</code> is only checked in development mode.</p>\n<h3 id=\"proptypes\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#proptypes\"></a>PropTypes </h3>\n<p>Here is an example documenting the different validators provided:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\nMyComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// You can declare that a prop is a specific JS type. By default, these</span>\n  <span class=\"token comment\">// are all optional.</span>\n  <span class=\"token literal-property property\">optionalArray</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalBool</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalFunc</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalNumber</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalObject</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalString</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalSymbol</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>symbol<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Anything that can be rendered: numbers, strings, elements or an array</span>\n  <span class=\"token comment\">// (or fragment) containing these types.</span>\n  <span class=\"token literal-property property\">optionalNode</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A React element.</span>\n  <span class=\"token literal-property property\">optionalElement</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A React element type (ie. MyComponent).</span>\n  <span class=\"token literal-property property\">optionalElementType</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>elementType<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can also declare that a prop is an instance of a class. This uses</span>\n  <span class=\"token comment\">// JS's instanceof operator.</span>\n  <span class=\"token literal-property property\">optionalMessage</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can ensure that your prop is limited to specific values by treating</span>\n  <span class=\"token comment\">// it as an enum.</span>\n  <span class=\"token literal-property property\">optionalEnum</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">oneOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'News'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Photos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object that could be one of many types</span>\n  <span class=\"token literal-property property\">optionalUnion</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">oneOfType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n    PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An array of a certain type</span>\n  <span class=\"token literal-property property\">optionalArrayOf</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object with property values of a certain type</span>\n  <span class=\"token literal-property property\">optionalObjectOf</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">objectOf</span><span class=\"token punctuation\">(</span>PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object taking on a particular shape</span>\n  <span class=\"token literal-property property\">optionalObjectWithShape</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object with warnings on extra properties</span>\n  <span class=\"token literal-property property\">optionalObjectWithStrictShape</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">exact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">quantity</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   \n\n  <span class=\"token comment\">// You can chain any of the above with `isRequired` to make sure a warning</span>\n  <span class=\"token comment\">// is shown if the prop isn't provided.</span>\n  <span class=\"token literal-property property\">requiredFunc</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A required value of any data type</span>\n  <span class=\"token literal-property property\">requiredAny</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>any<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can also specify a custom validator. It should return an Error</span>\n  <span class=\"token comment\">// object if the validation fails. Don't `console.warn` or throw, as this</span>\n  <span class=\"token comment\">// won't work inside `oneOfType`.</span>\n  <span class=\"token function-variable function\">customProp</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> componentName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">matchme</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Invalid prop `'</span> <span class=\"token operator\">+</span> propName <span class=\"token operator\">+</span> <span class=\"token string\">'` supplied to'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">' `'</span> <span class=\"token operator\">+</span> componentName <span class=\"token operator\">+</span> <span class=\"token string\">'`. Validation failed.'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can also supply a custom validator to `arrayOf` and `objectOf`.</span>\n  <span class=\"token comment\">// It should return an Error object if the validation fails. The validator</span>\n  <span class=\"token comment\">// will be called for each key in the array or object. The first two</span>\n  <span class=\"token comment\">// arguments of the validator are the array or object itself, and the</span>\n  <span class=\"token comment\">// current item's key.</span>\n  <span class=\"token literal-property property\">customArrayProp</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propValue<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> componentName<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> propFullName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">matchme</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>propValue<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Invalid prop `'</span> <span class=\"token operator\">+</span> propFullName <span class=\"token operator\">+</span> <span class=\"token string\">'` supplied to'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">' `'</span> <span class=\"token operator\">+</span> componentName <span class=\"token operator\">+</span> <span class=\"token string\">'`. Validation failed.'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"requiring-single-child\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#requiring-single-child\"></a>Requiring Single Child </h3>\n<p>With <code class=\"language-javascript\">PropTypes.element</code> you can specify that only a single child can be passed to a component as children.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This must be exactly one element or it will warn.</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nMyComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"default-prop-values\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#default-prop-values\"></a>Default Prop Values </h3>\n<p>You can define default values for your <code class=\"language-javascript\">props</code> by assigning to the special <code class=\"language-javascript\">defaultProps</code> property:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Specifies the default values for props:</span>\nGreeting<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Stranger'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Renders \"Hello, Stranger\":</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Since ES2022 you can also declare <code class=\"language-javascript\">defaultProps</code> as static property within a React component class. For more information, see the <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_static_fields\">class public static fields</a>. This modern syntax will require a compilation step to work within older browsers. </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'stranger'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-javascript\">defaultProps</code> will be used to ensure that <code class=\"language-javascript\">this.props.name</code> will have a value if it was not specified by the parent component. The <code class=\"language-javascript\">propTypes</code> typechecking happens after <code class=\"language-javascript\">defaultProps</code> are resolved, so typechecking will also apply to the <code class=\"language-javascript\">defaultProps</code>.</p>\n<h3 id=\"function-components\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#function-components\"></a>Function Components </h3>\n<p>If you are using function components in your regular development, you may want to make some small changes to allow PropTypes to be properly applied.</p>\n<p>Let\u2019s say you have a component like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To add PropTypes, you may want to declare the component in a separate function before exporting, like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HelloWorldComponent</code></pre></div>\n<p>Then, you can add PropTypes directly to the <code class=\"language-javascript\">HelloWorldComponent</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nHelloWorldComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HelloWorldComponent</code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/typechecking-with-proptypes.md\">Edit this page</a></p></div></article>", "path": "/react/typechecking-with-proptypes", "nav": ["/react/strict-mode", "/react/uncontrolled-components"]}, {"key": "Componenti Non Controllati", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>In most cases, we recommend using <a href=\"/react/forms#controlled-components\">controlled components</a> to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.</p>\n<p>To write an uncontrolled component, instead of writing an event handler for every state update, you can <a href=\"/react/refs-and-the-dom\">use a ref</a> to get form values from the DOM.</p>\n<p>For example, this code accepts a single name in an uncontrolled component:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A name was submitted: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Name:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/WooRWa?editors=0010\"><strong>Try it on CodePen</strong></a></p>\n<p>Since an uncontrolled component keeps the source of truth in the DOM, it is sometimes easier to integrate React and non-React code when using uncontrolled components. It can also be slightly less code if you want to be quick and dirty. Otherwise, you should usually use controlled components.</p>\n<p>If it\u2019s still not clear which type of component you should use for a particular situation, you might find <a class=\"external-link\" href=\"https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/\">this article on controlled versus uncontrolled inputs</a> to be helpful.</p>\n<h3 id=\"default-values\"><a class=\"anchor\" href=\"/react/uncontrolled-components#default-values\"></a>Default Values </h3>\n<p>In the React rendering lifecycle, the <code class=\"language-javascript\">value</code> attribute on form elements will override the value in the DOM. With an uncontrolled component, you often want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a <code class=\"language-javascript\">defaultValue</code> attribute instead of <code class=\"language-javascript\">value</code>. Changing the value of <code class=\"language-javascript\">defaultValue</code> attribute after a component has mounted will not cause any update of the value in the DOM.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Name:</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">defaultValue</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Bob<span class=\"token punctuation\">\"</span></span></span>          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Likewise, <code class=\"language-javascript\">&lt;input type=\"checkbox\"&gt;</code> and <code class=\"language-javascript\">&lt;input type=\"radio\"&gt;</code> support <code class=\"language-javascript\">defaultChecked</code>, and <code class=\"language-javascript\">&lt;select&gt;</code> and <code class=\"language-javascript\">&lt;textarea&gt;</code> supports <code class=\"language-javascript\">defaultValue</code>.</p>\n<h2 id=\"the-file-input-tag\"><a class=\"anchor\" href=\"/react/uncontrolled-components#the-file-input-tag\"></a>The file input Tag </h2>\n<p>In HTML, an <code class=\"language-javascript\">&lt;input type=\"file\"&gt;</code> lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications\">File API</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>In React, an <code class=\"language-javascript\">&lt;input type=\"file\" /&gt;</code> is always an uncontrolled component because its value can only be set by a user, and not programmatically.</p>\n<p>You should use the File API to interact with the files. The following example shows how to create a <a href=\"/react/refs-and-the-dom\">ref to the DOM node</a> to access file(s) in a submit handler:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Selected file - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Upload file:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Submit</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FileInput</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><a class=\"external-link\" href=\"https://it.reactjs.org//redirect-to-codepen/uncontrolled-components/input-type-file\"><b>Prova su CodePen</b></a></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/uncontrolled-components.md\">Edit this page</a></p></div></article>", "path": "/react/uncontrolled-components", "nav": ["/react/typechecking-with-proptypes", "/react/web-components"]}, {"key": "Web Components", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React and <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">Web Components</a> are built to solve different problems.  Web Components provide strong encapsulation for reusable components, while React provides a declarative library that keeps the DOM in sync with your data. The two goals are complementary. As a developer, you are free to use React in your Web Components, or to use Web Components in React, or both.</p>\n<p>Most people who use React don\u2019t use Web Components, but you may want to, especially if you are using third-party UI components that are written using Web Components.</p>\n<h2 id=\"using-web-components-in-react\"><a class=\"anchor\" href=\"/react/web-components#using-web-components-in-react\"></a>Using Web Components in React </h2>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloMessage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-search</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-search</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Web Components often expose an imperative API. For instance, a <code class=\"language-javascript\">video</code> Web Component might expose <code class=\"language-javascript\">play()</code> and <code class=\"language-javascript\">pause()</code> functions. To access the imperative APIs of a Web Component, you will need to use a ref to interact with the DOM node directly. If you are using third-party Web Components, the best solution is to write a React component that behaves as a wrapper for your Web Component.</p>\n<p>Events emitted by a Web Component may not properly propagate through a React render tree.\nYou will need to manually attach event handlers to handle these events within your React components.</p>\n</div>\n<p>One common confusion is that Web Components use \u201cclass\u201d instead of \u201cclassName\u201d.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">BrickFlipbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>brick-flipbox</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">front</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">back</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>brick-flipbox</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"using-react-in-your-web-components\"><a class=\"anchor\" href=\"/react/web-components#using-react-in-your-web-components\"></a>Using React in your Web Components </h2>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">XSearch</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mountPoint <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mountPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.google.com/search?q='</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>mountPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x-search'</span><span class=\"token punctuation\">,</span> XSearch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>This code <strong>will not</strong> work if you transform classes with Babel. See <a class=\"external-link\" href=\"https://github.com/w3c/webcomponents/issues/587\">this issue</a> for the discussion.\nInclude the <a class=\"external-link\" href=\"https://github.com/webcomponents/polyfills/tree/master/packages/webcomponentsjs#custom-elements-es5-adapterjs\">custom-elements-es5-adapter</a> before you load your web components to fix this issue.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/web-components.md\">Edit this page</a></p></div></article>", "path": "/react/web-components", "nav": ["/react/uncontrolled-components", "/react/react-api"]}]}, {"key": "API di Riferimento", "values": [{"key": "React", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><code class=\"language-javascript\">React</code> \u00e8 il punto d\u2019ingresso della libreria React. Se carichi React da un tag <code class=\"language-javascript\">&lt;script&gt;</code>, le seguenti API di primo livello sono disponibili nella variabile globale <code class=\"language-javascript\">React</code>. Se utilizzi ES6 con npm, puoi scrivere <code class=\"language-javascript\">import React from 'react'</code>. Se utilizzi ES5 con npm, puoi scrivere <code class=\"language-javascript\">var React = require('react')</code>.</p>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-api#overview\"></a>Panoramica </h2>\n<h3 id=\"components\"><a class=\"anchor\" href=\"/react/react-api#components\"></a>Componenti </h3>\n<p>I componenti React ti consentono di suddividere l\u2019UI in parti indipendenti e riutilizzabili e di ragionare su ciascuna parte in modo isolato dalle altre. I componenti React possono essere definiti creando sottoclassi di <code class=\"language-javascript\">React.Component</code> o <code class=\"language-javascript\">React.PureComponent</code>.</p>\n<ul>\n<li><a href=\"/react/react-api#reactcomponent\"><code class=\"language-javascript\">React.Component</code></a></li>\n<li><a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">React.PureComponent</code></a></li>\n</ul>\n<p>Se non ami le classi ES6, puoi utilizzare il modulo <code class=\"language-javascript\">create-react-class</code> al loro posto. Leggi <a href=\"/react/react-without-es6\">Utilizzare React senza ES6</a> per maggiori informazioni.</p>\n<p>I componenti React possono anche essere definiti tramite funzioni, che possono essere \u201cwrappate\u201d:</p>\n<ul>\n<li><a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a></li>\n</ul>\n<h3 id=\"creating-react-elements\"><a class=\"anchor\" href=\"/react/react-api#creating-react-elements\"></a>Creare Elementi React </h3>\n<p>Raccomandiamo di <a href=\"/react/introducing-jsx\">utilizzare JSX</a> per descrivere l\u2019aspetto che la tua UI dovrebbe avere. Ogni elemento JSX \u00e8 solamente \u201czucchero sintattico\u201d sul metodo <a href=\"/react/react-api#createelement\"><code class=\"language-javascript\">React.createElement()</code></a>. Se utilizzi JSX, non dovresti mai avere bisogno di invocare direttamente i seguenti metodi.</p>\n<ul>\n<li><a href=\"/react/react-api#createelement\"><code class=\"language-javascript\">createElement()</code></a></li>\n<li><a href=\"/react/react-api#createfactory\"><code class=\"language-javascript\">createFactory()</code></a></li>\n</ul>\n<p>Leggi <a href=\"/react/react-without-jsx\">Utilizzare React senza JSX</a> per maggiori informazioni.</p>\n<h3 id=\"transforming-elements\"><a class=\"anchor\" href=\"/react/react-api#transforming-elements\"></a>Trasformare Gli Elementi </h3>\n<p><code class=\"language-javascript\">React</code> fornisce numerose API per la manipolazione degli elementi:</p>\n<ul>\n<li><a href=\"/react/react-api#cloneelement\"><code class=\"language-javascript\">cloneElement()</code></a></li>\n<li><a href=\"/react/react-api#isvalidelement\"><code class=\"language-javascript\">isValidElement()</code></a></li>\n<li><a href=\"/react/react-api#reactchildren\"><code class=\"language-javascript\">React.Children</code></a></li>\n</ul>\n<h3 id=\"fragments\"><a class=\"anchor\" href=\"/react/react-api#fragments\"></a>Frammenti </h3>\n<p><code class=\"language-javascript\">React</code> fornisce anche un componente che pu\u00f2 essere utilizzato per renderizzare elementi multipli senza un wrapper.</p>\n<ul>\n<li><a href=\"/react/react-api#reactfragment\"><code class=\"language-javascript\">React.Fragment</code></a></li>\n</ul>\n<h3 id=\"refs\"><a class=\"anchor\" href=\"/react/react-api#refs\"></a>Refs </h3>\n<ul>\n<li><a href=\"/react/react-api#reactcreateref\"><code class=\"language-javascript\">React.createRef</code></a></li>\n<li><a href=\"/react/react-api#reactforwardref\"><code class=\"language-javascript\">React.forwardRef</code></a></li>\n</ul>\n<h3 id=\"suspense\"><a class=\"anchor\" href=\"/react/react-api#suspense\"></a>Suspense </h3>\n<p>La Suspense consente ai componenti di \u201caspettare\u201d qualcosa prima di renderizzare. Ad oggi, la Suspense supporta solamente un caso d\u2019uso: <a href=\"/react/code-splitting#reactlazy\">il caricamento dinamico dei componenti tramite <code class=\"language-javascript\">React.lazy</code></a>. In futuro, supporter\u00e0 anche altri casi d\u2019uso, come il caricamento dei dati.</p>\n<ul>\n<li><a href=\"/react/react-api#reactlazy\"><code class=\"language-javascript\">React.lazy</code></a></li>\n<li><a href=\"/react/react-api#reactsuspense\"><code class=\"language-javascript\">React.Suspense</code></a></li>\n</ul>\n<h3 id=\"transitions\"><a class=\"anchor\" href=\"/react/react-api#transitions\"></a>Transitions </h3>\n<p><em>Transitions</em> are a new concurrent feature introduced in React 18. They allow you to mark updates as transitions, which tells React that they can be interrupted and avoid going back to Suspense fallbacks for already visible content.</p>\n<ul>\n<li><a href=\"/react/react-api#starttransition\"><code class=\"language-javascript\">React.startTransition</code></a></li>\n<li><a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">React.useTransition</code></a></li>\n</ul>\n<h3 id=\"hooks\"><a class=\"anchor\" href=\"/react/react-api#hooks\"></a>Hooks </h3>\n<p>Gli <em>Hooks</em> sono una nuova aggiunta in React 16.8. Consentono di utilizzare lo state e altre feature di React senza dichiarare una classe. Gli Hooks hanno una <a href=\"/react/hooks-intro\">sezione dedicata della documentazione</a> e un riferimento delle API separato:</p>\n<ul>\n<li>\n<p><a href=\"/react/hooks-reference#basic-hooks\">Hooks Di Base</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a></li>\n<li><a href=\"/react/hooks-reference#useeffect\"><code class=\"language-javascript\">useEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-reference#additional-hooks\">Hooks Aggiuntivi</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a></li>\n<li><a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a></li>\n<li><a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a></li>\n<li><a href=\"/react/hooks-reference#useref\"><code class=\"language-javascript\">useRef</code></a></li>\n<li><a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a></li>\n<li><a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usedebugvalue\"><code class=\"language-javascript\">useDebugValue</code></a></li>\n<li><a href=\"/react/hooks-reference#usedeferredvalue\"><code class=\"language-javascript\">useDeferredValue</code></a></li>\n<li><a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">useTransition</code></a></li>\n<li><a href=\"/react/hooks-reference#useid\"><code class=\"language-javascript\">useId</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-reference#library-hooks\">Library Hooks</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usesyncexternalstore\"><code class=\"language-javascript\">useSyncExternalStore</code></a></li>\n<li><a href=\"/react/hooks-reference#useinsertioneffect\"><code class=\"language-javascript\">useInsertionEffect</code></a></li>\n</ul>\n</li>\n</ul>\n\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-api#reference\"></a>Riferimenti </h2>\n<h3 id=\"reactcomponent\"><a class=\"anchor\" href=\"/react/react-api#reactcomponent\"></a><code class=\"language-javascript\">React.Component</code> </h3>\n<p><code class=\"language-javascript\">React.Component</code> \u00e8 la classe base per definire i componenti React utilizzando le <a class=\"external-link\" href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">classi ES6</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Benvenuto</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Leggi i <a href=\"/react/react-component\">Riferimenti di React.Component</a> per un elenco dei metodi e delle propriet\u00e0 disponibili nella classe base <code class=\"language-javascript\">React.Component</code>.</p>\n\n<h3 id=\"reactpurecomponent\"><a class=\"anchor\" href=\"/react/react-api#reactpurecomponent\"></a><code class=\"language-javascript\">React.PureComponent</code> </h3>\n<p><code class=\"language-javascript\">React.PureComponent</code> \u00e8 simile a <a href=\"/react/react-api#reactcomponent\"><code class=\"language-javascript\">React.Component</code></a>. La differenza \u00e8 che <a href=\"/react/react-api#reactcomponent\"><code class=\"language-javascript\">React.Component</code></a> non implementa <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> mentre <code class=\"language-javascript\">React.PureComponent</code> lo implementa con una comparazione \u201cshallow\u201d delle props e dello state.</p>\n<p>Se il metodo <code class=\"language-javascript\">render()</code> del tuo componente React produce sempre lo stesso risultato a partire dagli stessi valori di props e state (ovvero \u00e8 un componente \u201cpuro\u201d), puoi utilizzare <code class=\"language-javascript\">React.PureComponent</code> per avere un miglioramento della performance in alcuni casi.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Il metodo <code class=\"language-javascript\">shouldComponentUpdate()</code> di <code class=\"language-javascript\">React.PureComponent</code> effettua solamente una comparazione di tipo \u201cshallow\u201d degli oggetti. Se questi ultimi contengono strutture dati complesse, questo tipo di comparazione potrebbe produrre falsi negativi qualora le differenze siano annidate negli oggetti. Dichiara i tuoi componenti estendendo <code class=\"language-javascript\">PureComponent</code> solamente quando ti aspetti di avere props o state semplici, oppure utilizza <a href=\"/react/react-component#forceupdate\"><code class=\"language-javascript\">forceUpdate()</code></a> quando sei sicuro che le tue strutture dati siano cambiate in profondit\u00e0. In alternativa, considera se utilizzare <a class=\"external-link\" href=\"https://immutable-js.com/\">oggetti immutabili</a> per facilitare la comparazione veloce di strutture dati annidate.</p>\n<p>In aggiunta, il metodo <code class=\"language-javascript\">shouldComponentUpdate()</code> di <code class=\"language-javascript\">React.PureComponent</code> salta completamente gli aggiornamenti delle props per tutto il sottoalbero del componente. Di conseguenza, se utilizzi <code class=\"language-javascript\">React.PureComponent</code> assicurati che anche tutti gli eventuali figli del tuo componente siano a loro volta \u201cpuri\u201d.</p>\n</div>\n\n<h3 id=\"reactmemo\"><a class=\"anchor\" href=\"/react/react-api#reactmemo\"></a><code class=\"language-javascript\">React.memo</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MioComponente <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">MioComponente</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* renderizza utilizzando le props */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">React.memo</code> \u00e8 un cosiddetto <a href=\"/react/higher-order-components\">higher order component</a> (componente di ordine superiore).</p>\n<p>Se il tuo componente renderizza lo stesso risultato a partire dalle stesse props, puoi racchiuderlo in una chiamata a <code class=\"language-javascript\">React.memo</code> per ottenere un miglioramento della performance in alcuni casi tramite la memoizzazione del risultato. In altre parole, React eviter\u00e0 di ri-renderizzare il componente, riutilizzando l\u2019ultima renderizzazione.</p>\n<p><code class=\"language-javascript\">React.memo</code> controlla solo i cambiamenti delle props. Se il tuo componente funzione racchiuso in <code class=\"language-javascript\">React.memo</code> ha un Hook <a href=\"/react/hooks-state\"><code class=\"language-javascript\">useState</code></a>, <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> o <a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a> nella sua implementazione, verr\u00e0 comunque rirenderizzato al cambiamento di state o del context.</p>\n<p>Il comportamento predefinito di React \u00e8 quello di limitarsi a una comparazione shallow degli oggetti complessi contenuti in props. Se vuoi avere un controllo diretto sulla comparazione effettuata, puoi fornire una funzione personalizzata che effettui la comparazione come secondo argomento.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MioComponente</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* renderizza utilizzando le props */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sonoUguali</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propsPrecedenti<span class=\"token punctuation\">,</span> propsSuccessive</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*\n  restituisci true se l'invocazione di render con propsSuccessive\n  restituirebbe lo stesso risultato dell'invocazione di render con\n  propsPrecedenti, altrimenti restituisci false\n  */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>MioComponente<span class=\"token punctuation\">,</span> sonoUguali<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Questo metodo esiste solamente come <strong><a href=\"/react/optimizing-performance\">strumento per ottimizzare la performance</a>.</strong> Non utilizzarlo per \u201cprevenire\u201d la renderizzazione, in quanto farlo pu\u00f2 essere causa di bug.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>A differenza del metodo <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> delle classi componente, la funzione <code class=\"language-javascript\">sonoUguali</code> restituisce <code class=\"language-javascript\">true</code> se le props sono uguali e <code class=\"language-javascript\">false</code> se non lo sono. Il metodo <code class=\"language-javascript\">shouldComponentUpdate</code> fa esattamente il contrario.</p>\n</div>\n\n<h3 id=\"createelement\"><a class=\"anchor\" href=\"/react/react-api#createelement\"></a><code class=\"language-javascript\">createElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  type<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>children<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Crea e restituisce un nuovo <a href=\"/react/rendering-elements\">elemento React</a> del tipo indicato. L\u2019argomento <code class=\"language-javascript\">type</code> pu\u00f2 essere un nome di tag (ad esempio <code class=\"language-javascript\">'div'</code> o <code class=\"language-javascript\">'span'</code>), un tipo di <a href=\"/react/components-and-props\">componente React</a> (una classe o una funzione), o un tipo di <a href=\"/react/react-api#reactfragment\">frammento React</a>.</p>\n<p>Il codice scritto in <a href=\"/react/introducing-jsx\">JSX</a> verr\u00e0 convertito in modo da utilizzare <code class=\"language-javascript\">React.createElement()</code>. Tipicamente, non invocherai direttamente <code class=\"language-javascript\">React.createElement()</code> se utilizzi JSX. Leggi <a href=\"/react/react-without-jsx\">React Senza JSX</a> per saperne di pi\u00f9.</p>\n\n<h3 id=\"cloneelement\"><a class=\"anchor\" href=\"/react/react-api#cloneelement\"></a><code class=\"language-javascript\">cloneElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">React.cloneElement(\n  element,\n  [config],\n  [...children]\n)</code></pre></div>\n<p>Clona e restituisce un nuovo elemento React utilizzando <code class=\"language-javascript\">element</code> come punto di partenza. <code class=\"language-javascript\">config</code> dovrebbe contenere tutte le nuove props, <code class=\"language-javascript\">key</code>, o <code class=\"language-javascript\">ref</code>. L\u2019elemento risultante ricever\u00e0 come props lo shallow merge delle props dell\u2019elemento originale e le props passate come argomento. I nuovi children specificati come argomento sostituiranno i children dell\u2019elemento originale. <code class=\"language-javascript\">key</code> e <code class=\"language-javascript\">ref</code> dell\u2019elemento originale verranno preservati se non ci sono <code class=\"language-javascript\">key</code> e <code class=\"language-javascript\">ref</code> nel <code class=\"language-javascript\">config</code>.</p>\n<p><code class=\"language-javascript\">React.cloneElement()</code> \u00e8 pressoch\u00e9 equivalente a:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element.type</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>element.type</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Tuttavia, preserva anche la <code class=\"language-javascript\">ref</code>. Questo significa che se selezioni un child con una <code class=\"language-javascript\">ref</code> ad esso, non la \u201cruberai\u201d accidentalmente dal suo progenitore. Otterrai invece la stessa <code class=\"language-javascript\">ref</code> assegnata al nuovo componente. I nuovi <code class=\"language-javascript\">ref</code> o <code class=\"language-javascript\">key</code> sostituiranno quelli precedenti se presenti.</p>\n<p>Questa API \u00e8 stata introdotta per sostituire il metodo deprecato <code class=\"language-javascript\">React.addons.cloneWithProps()</code>.</p>\n\n<h3 id=\"createfactory\"><a class=\"anchor\" href=\"/react/react-api#createfactory\"></a><code class=\"language-javascript\">createFactory()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createFactory</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Restituisce una funzione che produce elementi React di un certo tipo. Cos\u00ec come <a href=\"/react/react-api#createelement\"><code class=\"language-javascript\">React.createElement()</code></a>, l\u2019argomento <code class=\"language-javascript\">type</code> pu\u00f2 essere un nome di tag (ad esempio <code class=\"language-javascript\">'div'</code> o <code class=\"language-javascript\">'span'</code>), un tipo di <a href=\"/react/components-and-props\">componente React</a> (una classe o una funzione), o un tipo di <a href=\"/react/react-api#reactfragment\">frammento React</a>.</p>\n<p>Questo metodo \u00e8 considerato obsoleto e ti incoraggiamo ad utilizzare al suo posto JSX oppure direttamente <code class=\"language-javascript\">React.createElement()</code>.</p>\n<p>Tipicamente, non invocherai direttamente <code class=\"language-javascript\">React.createFactory()</code> se utilizzi JSX. Leggi <a href=\"/react/react-without-jsx\">React Senza JSX</a> per saperne di pi\u00f9.</p>\n\n<h3 id=\"isvalidelement\"><a class=\"anchor\" href=\"/react/react-api#isvalidelement\"></a><code class=\"language-javascript\">isValidElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Verifica che l\u2019oggetto sia un elemento React. Restituisce <code class=\"language-javascript\">true</code> o <code class=\"language-javascript\">false</code>.</p>\n\n<h3 id=\"reactchildren\"><a class=\"anchor\" href=\"/react/react-api#reactchildren\"></a><code class=\"language-javascript\">React.Children</code> </h3>\n<p><code class=\"language-javascript\">React.Children</code> fornisce metodi utili per gestire la struttura dati opaca di <code class=\"language-javascript\">this.props.children</code>.</p>\n<h4 id=\"reactchildrenmap\"><a class=\"anchor\" href=\"/react/react-api#reactchildrenmap\"></a><code class=\"language-javascript\">React.Children.map</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Invoca la funzione specificata su ciascun figlio diretto contenuto in <code class=\"language-javascript\">children</code>. Nella funzione, <code class=\"language-javascript\">this</code> verr\u00e0 impostato a <code class=\"language-javascript\">thisArg</code>. Se <code class=\"language-javascript\">children</code> \u00e8 un array, verr\u00e0 attraversato e la funzione verr\u00e0 invocata per ciascun child nell\u2019array. Se children \u00e8 <code class=\"language-javascript\">null</code> o <code class=\"language-javascript\">undefined</code>, questo metodo restituir\u00e0 il valore <code class=\"language-javascript\">null</code> o <code class=\"language-javascript\">undefined</code>, altrimenti restituir\u00e0 un array.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Se <code class=\"language-javascript\">children</code> \u00e8 un <code class=\"language-javascript\">Fragment</code>, verr\u00e0 trattato come se fosse un singolo child (e non un array) e quindi non verr\u00e0 attraversato.</p>\n</div>\n<h4 id=\"reactchildrenforeach\"><a class=\"anchor\" href=\"/react/react-api#reactchildrenforeach\"></a><code class=\"language-javascript\">React.Children.forEach</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Funziona esattamente come <a href=\"/react/react-api#reactchildrenmap\"><code class=\"language-javascript\">React.Children.map()</code></a> ma non restituisce un array.</p>\n<h4 id=\"reactchildrencount\"><a class=\"anchor\" href=\"/react/react-api#reactchildrencount\"></a><code class=\"language-javascript\">React.Children.count</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Restituisce il numero totale di componenti in <code class=\"language-javascript\">children</code>. Se si passasse una funzione ai metodi <code class=\"language-javascript\">map</code> o <code class=\"language-javascript\">forEach</code> gi\u00e0 descritti, essa verrebbe invocata esattamente quel numero di volte.</p>\n<h4 id=\"reactchildrenonly\"><a class=\"anchor\" href=\"/react/react-api#reactchildrenonly\"></a><code class=\"language-javascript\">React.Children.only</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Verifica che <code class=\"language-javascript\">children</code> contenga un solo figlio (un elemento React) e lo restituisce. Negli altri casi questo metodo solleva un errore.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">React.Children.only()</code> non pu\u00f2 essere invocato sul valore restituito da <a href=\"/react/react-api#reactchildrenmap\"><code class=\"language-javascript\">React.Children.map()</code></a> perch\u00e9 \u00e8 un array e non un elemento React.</p>\n</div>\n<h4 id=\"reactchildrentoarray\"><a class=\"anchor\" href=\"/react/react-api#reactchildrentoarray\"></a><code class=\"language-javascript\">React.Children.toArray</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Restituisce la struttura opaca di <code class=\"language-javascript\">children</code> come un array appiattito, con una chiave assegnata a ciascun figlio. \u00c8 utile se vuoi manipolare collezioni di figli nei tuoi metodi render, specialmente se vuoi riordinare <code class=\"language-javascript\">this.props.children</code> prima di passarlo ai componenti figli o se vuoi passarne solo una parte.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">React.Children.toArray()</code> modifica le chiavi per conservare la semantica degli array annidati quando appiattisce liste di figli. In altre parole, <code class=\"language-javascript\">toArray</code> aggiunge un prefisso in ciascuna chiave nell\u2019array restituito in modo che la chiave di ciascun elemento sia riferita all\u2019array di input che conteneva quell\u2019elemento.</p>\n</div>\n\n<h3 id=\"reactfragment\"><a class=\"anchor\" href=\"/react/react-api#reactfragment\"></a><code class=\"language-javascript\">React.Fragment</code> </h3>\n<p>Il componente <code class=\"language-javascript\">React.Fragment</code> ti consente di restituire elementi multipli come risultato di un metodo <code class=\"language-javascript\">render()</code> senza dover creare un element DOM aggiuntivo per contenerli:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Un po' di testo.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Un'intestazione</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Puoi utilizzarlo anche tramite la notazione compatta <code class=\"language-javascript\">&lt;&gt;&lt;/&gt;</code>. Per saperne di pi\u00f9, leggi <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2017/11/28/react-v16.2.0-fragment-support.html\">React v16.2.0: Supporto ai Frammenti Migliorato</a>.</p>\n<h3 id=\"reactcreateref\"><a class=\"anchor\" href=\"/react/react-api#reactcreateref\"></a><code class=\"language-javascript\">React.createRef</code> </h3>\n<p><code class=\"language-javascript\">React.createRef</code> crea una <a href=\"/react/refs-and-the-dom\">ref</a> che pu\u00f2 essere assegnata agli elementi React tramite l\u2019attributo ref.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MioComponente</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h3 id=\"reactforwardref\"><a class=\"anchor\" href=\"/react/react-api#reactforwardref\"></a><code class=\"language-javascript\">React.forwardRef</code> </h3>\n<p><code class=\"language-javascript\">React.forwardRef</code> crea un componente React che inoltra l\u2019attributo <a href=\"/react/refs-and-the-dom\">ref</a> che riceve a un altro componente pi\u00f9 in basso nell\u2019albero. Questa tecnica non \u00e8 molto comune, ma \u00e8 particolarmente utile in due scenari:</p>\n<ul>\n<li><a href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\">Inoltrare le refs ai componenti del DOM</a></li>\n<li><a href=\"/react/forwarding-refs#forwarding-refs-in-higher-order-components\">Inoltrare le refs nei componenti di ordine superiore</a></li>\n</ul>\n<p><code class=\"language-javascript\">React.forwardRef</code> accetta una funzione di renderizzazione come argomento. React invocher\u00e0 quella funzione passando <code class=\"language-javascript\">props</code> e <code class=\"language-javascript\">ref</code> come argomenti. La funzione dovrebbe restituire un nodo React.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> BottoneFigo <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BottoneFigo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Puoi ottenere una ref diretta al bottone del DOM:</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BottoneFigo</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Cliccami!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">BottoneFigo</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Nell\u2019esempio in alto, React passa una <code class=\"language-javascript\">ref</code> all\u2019elemento <code class=\"language-javascript\">&lt;BottoneFigo ref={ref}&gt;</code> come secondo argomento alla funzione di renderizzazione all\u2019interno della chiamata a <code class=\"language-javascript\">React.forwardRef</code>. Questa funzione di renderizzazione a sua volta passa la <code class=\"language-javascript\">ref</code> all\u2019elemento <code class=\"language-javascript\">&lt;button ref={ref}&gt;</code>.</p>\n<p>Il risultato \u00e8 che, dopo che React ha connesso la ref, <code class=\"language-javascript\">ref.current</code> punter\u00e0 direttamente all\u2019istanza dell\u2019elemento del DOM <code class=\"language-javascript\">&lt;button&gt;</code>.</p>\n<p>Per maggiori informazioni, leggi <a href=\"/react/forwarding-refs\">inoltrare le refs</a>.</p>\n<h3 id=\"reactlazy\"><a class=\"anchor\" href=\"/react/react-api#reactlazy\"></a><code class=\"language-javascript\">React.lazy</code> </h3>\n<p><code class=\"language-javascript\">React.lazy()</code> ti consente di definire un componente che \u00e8 caricato dinamicamente (\u201clazy\u201d significa letteralmente \u201cpigro\u201d). Questo aiuta a ridurre le dimensioni del pacchetto della tua applicazione ritardando il caricamento dei componenti che non sono utilizzati durante la renderizzazione iniziale.</p>\n<p>Puoi imparare come utilizzare questo metodo nella nostra <a href=\"/react/code-splitting#reactlazy\">documentazione sulla suddivisione del codice</a>. Potresti voler anche leggere <a class=\"external-link\" href=\"https://medium.com/@pomber/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d\">questo articolo</a> in cui si spiega con ancora maggior dettaglio come utilizzarlo.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Questo componente \u00e8 caricato dinamicamente</span>\n<span class=\"token keyword\">const</span> UnComponente <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./UnComponente'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nota che la renderizzazione dei componenti <code class=\"language-javascript\">lazy</code> richiede che sia presente un componente <code class=\"language-javascript\">&lt;React.Suspense&gt;</code> pi\u00f9 in alto nell\u2019albero di renderizzazione. Questo \u00e8 il modo in cui puoi specificare un indicatore di caricamento.</p>\n<h3 id=\"reactsuspense\"><a class=\"anchor\" href=\"/react/react-api#reactsuspense\"></a><code class=\"language-javascript\">React.Suspense</code> </h3>\n<p><code class=\"language-javascript\">React.Suspense</code> ti permette di specificare un indicatore di caricamento nel caso in cui qualche componente nell\u2019albero sottostante non \u00e8 ancora pronto per essere renderizzato. Nel futuro intendiamo far si che <code class=\"language-javascript\">Suspense</code> gestisca altri scenari quali ad esempio il data fetching. Puoi saperne di pi\u00f9 dalla nostra <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/11/27/react-16-roadmap.html\">roadmap</a>.</p>\n<p>Ad oggi, il lazy loading dei componenti \u00e8 il <strong>solo</strong> use case supportato da <code class=\"language-javascript\">&lt;React.Suspense&gt;</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Questo componente viene caricato dinamicamente</span>\n<span class=\"token keyword\">const</span> UnAltroComponente <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./UnAltroComponente'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MioComponente</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// Mostra &lt;Clessidra&gt; finch\u00e9 UnAltroComponente non \u00e8 pronto</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clessidra</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UnAltroComponente</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Suspense</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tutto ci\u00f2 \u00e8 documentato nella nostra <a href=\"/react/code-splitting#reactlazy\">guida per la separazione del codice</a>. Nota che i componenti <code class=\"language-javascript\">lazy</code> possono anche essere molto in profondit\u00e0 nell\u2019albero che fa capo a <code class=\"language-javascript\">Suspense</code> \u2014 non \u00e8 necessario usarlo per racchiuderli uno per uno. La pratica consigliata \u00e8 quella di inserire <code class=\"language-javascript\">&lt;Suspense&gt;</code> nel punto in cui vuoi visualizzare un indicatore di caricamento, e di utilizzare <code class=\"language-javascript\">lazy()</code> dovunque vuoi effettuare la separazione del codice.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Per contenuto che \u00e8 stati gi\u00e0 mostrato all\u2019utente, visualizzare nuovamente un indicatore di caricamento pu\u00f2 creare confusione. A volte \u00e8 meglio mostrare la \u201cvecchia\u201d UI mentre la nuova UI viene preparata. Per fare ci\u00f2 puoi utilizzare le nuove APIs di transizione <a href=\"/react/react-api#starttransition\"><code class=\"language-javascript\">startTransition</code></a> ed <a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">useTransition</code></a> per marcare aggiornamenti come transizioni ed evitare fallbacks inaspettati.</p>\n</div>\n<h4 id=\"reactsuspense-in-server-side-rendering\"><a class=\"anchor\" href=\"/react/react-api#reactsuspense-in-server-side-rendering\"></a><code class=\"language-javascript\">React.Suspense</code> nel Server Side Rendering </h4>\n<p>Durante il server side rendering, Suspense Boundaries ti permettono di emettere contenuto in blocchi pi\u00f9 piccoli sospendendo.\nQUando un componente si sospende, scheduliamo una task a bassa priorit\u00e0 per renderizzare la fallback della Suspense boundary pi\u00f9 vicina. Se il componente si \u201cdesospende\u201d prima che venga emessa la fallback, emetteremo il contenuto attuale ignorando del tutto la fallback.</p>\n<h4 id=\"reactsuspense-during-hydration\"><a class=\"anchor\" href=\"/react/react-api#reactsuspense-during-hydration\"></a><code class=\"language-javascript\">React.Suspense</code> durante hydration </h4>\n<p>Suspense boundaries dipendono dall\u2019idratazione dalle loro boundaries genitori prima che possano essere idratate, ma possono idratarsi indipendentemente dalle loro boundaries sibling. Eventi su una boundary prima che venga idradata causeranno una idratazione con una priorit\u00e0 maggiore rispetto alle bonduaries vicine. <a class=\"external-link\" href=\"https://github.com/reactwg/react-18/discussions/130\">Maggiori informazioni</a></p>\n<h3 id=\"starttransition\"><a class=\"anchor\" href=\"/react/react-api#starttransition\"></a><code class=\"language-javascript\">React.startTransition</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">React.startTransition</code> ti permette di marcare aggiornamenti all\u2019interno della callback come transizioni. Questo metodo \u00e8 disegnato per essere usato quanto <a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">React.useTransition</code></a> non \u00e8 disponibile.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Aggiornamenti in una transizione creano aggiornamenti con maggiore priorit\u00e0, come i clicks.</p>\n<p>Aggiornamenti in una transizione non mostreranno una fallback per contenuto sospeso, permettendo all\u2019utente di interagire con la \u201cvecchia\u201d UI mentre la \u201cnuova\u201d UI viene preparata.</p>\n<p><code class=\"language-javascript\">React.startTransition</code> non offre un flag <code class=\"language-javascript\">isPending</code>. Per tenere traccia dello stato pending di una transizione guarda <a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">React.useTransition</code></a>.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-react.md\">Edit this page</a></p></div></article>", "path": "/react/react-api", "nav": ["/react/web-components", "/react/react-component"]}, {"key": "React.Component", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Questa pagina contiene un riferimento dettagliato delle API della definizione della classe componente React. Viene dato per scontato che ti siano familiari i concetti fondamentali di React, come <a href=\"/react/components-and-props\">Componenti e Props</a>, cos\u00ec come <a href=\"/react/state-and-lifecycle\">State e Lifecycle</a>. Se non \u00e8 cos\u00ec, studiali prima di proseguire.</p>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-component#overview\"></a>Panoramica </h2>\n<p>React ti consente di definire componenti come classi o come funzioni. I componenti definiti come classi attualmente sono dotati di pi\u00f9 funzionalit\u00e0, che sono descritte dettagliatamente in questa pagina. Per definire una classe componente React, devi estendere <code class=\"language-javascript\">React.Component</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Benvenuto</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>L\u2019unico metodo che \u00e8 <em>obbligatorio</em> definire in una sottoclasse <code class=\"language-javascript\">React.Component</code> \u00e8 chiamato <a href=\"/react/react-component#render\"><code class=\"language-javascript\">render()</code></a>. Tutti gli altri metodi descritti in questa pagina sono opzionali.</p>\n<p><strong>Ti sconsigliamo vivamente di creare altre classi base per i tuoi componenti.</strong> In React, <a href=\"/react/composition-vs-inheritance\">il riutilizzo del codice \u00e8 ottenuto soprattutto utilizzando la composizione e non l\u2019ereditariet\u00e0</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>React non ti obbliga ad utilizzare la sintassi delle classi ES6. Se preferisci evitarla, puoi utilizzare il modulo <code class=\"language-javascript\">create-react-class</code> o un\u2019astrazione simile. Dai un\u2019occhiata a <a href=\"/react/react-without-es6\">React senza ES6</a> per saperne di pi\u00f9.</p>\n</div>\n<h3 id=\"the-component-lifecycle\"><a class=\"anchor\" href=\"/react/react-component#the-component-lifecycle\"></a>Il Lifecycle del Componente </h3>\n<p>Ogni componente ha numerosi \u201cmetodi del lifecycle\u201d (metodi del ciclo di vita) che puoi sovrascrivere per eseguire del codice in momenti particolari nel processo. <strong>Puoi utilizzare <a class=\"external-link\" href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">questo diagramma del lifecycle</a> come riferimento.</strong> Nella lista pi\u00f9 in basso, i metodi del lifecycle pi\u00f9 frequentemente utilizzati sono evidenziati in <strong>grassetto</strong>. Gli altri metodi non evidenziati esistono per casi d\u2019uso relativamente rari.</p>\n<h4 id=\"mounting\"><a class=\"anchor\" href=\"/react/react-component#mounting\"></a>Mounting (Montaggio) </h4>\n<p>Quando un\u2019istanza di un componente viene creata e inserita nel DOM, questi metodi vengono chiamati nel seguente ordine:</p>\n<ul>\n<li><a href=\"/react/react-component#constructor\"><strong><code class=\"language-javascript\">constructor()</code></strong></a></li>\n<li><a href=\"/react/react-component#static-getderivedstatefromprops\"><code class=\"language-javascript\">static getDerivedStateFromProps()</code></a></li>\n<li><a href=\"/react/react-component#render\"><strong><code class=\"language-javascript\">render()</code></strong></a></li>\n<li><a href=\"/react/react-component#componentdidmount\"><strong><code class=\"language-javascript\">componentDidMount()</code></strong></a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Questo metodo \u00e8 considerato obsoleto e dovresti <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evitare di utilizzarlo</a> quando scrivi del nuovo codice:</p>\n<ul>\n<li><a href=\"/react/react-component#unsafe_componentwillmount\"><code class=\"language-javascript\">UNSAFE_componentWillMount()</code></a></li>\n</ul>\n</div>\n<h4 id=\"updating\"><a class=\"anchor\" href=\"/react/react-component#updating\"></a>Aggiornamento </h4>\n<p>Un aggiornamento pu\u00f2 essere causato da cambiamenti alle props o allo state. Quando un componente viene ri-renderizzato, questi metodi sono chiamati nel seguente ordine:</p>\n<ul>\n<li><a href=\"/react/react-component#static-getderivedstatefromprops\"><code class=\"language-javascript\">static getDerivedStateFromProps()</code></a></li>\n<li><a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a></li>\n<li><a href=\"/react/react-component#render\"><strong><code class=\"language-javascript\">render()</code></strong></a></li>\n<li><a href=\"/react/react-component#getsnapshotbeforeupdate\"><code class=\"language-javascript\">getSnapshotBeforeUpdate()</code></a></li>\n<li><a href=\"/react/react-component#componentdidupdate\"><strong><code class=\"language-javascript\">componentDidUpdate()</code></strong></a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Questi metodi sono considerati obsoleti e dovresti <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evitare di utilizzarli</a> quando scrivi del nuovo codice:</p>\n<ul>\n<li><a href=\"/react/react-component#unsafe_componentwillupdate\"><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code></a></li>\n<li><a href=\"/react/react-component#unsafe_componentwillreceiveprops\"><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code></a></li>\n</ul>\n</div>\n<h4 id=\"unmounting\"><a class=\"anchor\" href=\"/react/react-component#unmounting\"></a>Unmounting (Smontaggio) </h4>\n<p>Quando un componente viene rimosso dal DOM, viene chiamato questo metodo:</p>\n<ul>\n<li><a href=\"/react/react-component#componentwillunmount\"><strong><code class=\"language-javascript\">componentWillUnmount()</code></strong></a></li>\n</ul>\n<h4 id=\"error-handling\"><a class=\"anchor\" href=\"/react/react-component#error-handling\"></a>Gestione degli Errori </h4>\n<p>Quando si verifica un errore durante la renderizzazione, in un metodo del lifecycle o nel costruttore di un componente figlio, vengono chiamati questi metodi:</p>\n<ul>\n<li><a href=\"/react/react-component#static-getderivedstatefromerror\"><code class=\"language-javascript\">static getDerivedStateFromError()</code></a></li>\n<li><a href=\"/react/react-component#componentdidcatch\"><code class=\"language-javascript\">componentDidCatch()</code></a></li>\n</ul>\n<h3 id=\"other-apis\"><a class=\"anchor\" href=\"/react/react-component#other-apis\"></a>Altre API </h3>\n<p>Ciascun componente fornisce anche altre API:</p>\n<ul>\n<li><a href=\"/react/react-component#setstate\"><code class=\"language-javascript\">setState()</code></a></li>\n<li><a href=\"/react/react-component#forceupdate\"><code class=\"language-javascript\">forceUpdate()</code></a></li>\n</ul>\n<h3 id=\"class-properties\"><a class=\"anchor\" href=\"/react/react-component#class-properties\"></a>Propriet\u00e0 della Classe </h3>\n<ul>\n<li><a href=\"/react/react-component#defaultprops\"><code class=\"language-javascript\">defaultProps</code></a></li>\n<li><a href=\"/react/react-component#displayname\"><code class=\"language-javascript\">displayName</code></a></li>\n</ul>\n<h3 id=\"instance-properties\"><a class=\"anchor\" href=\"/react/react-component#instance-properties\"></a>Propriet\u00e0 dell\u2019Istanza </h3>\n<ul>\n<li><a href=\"/react/react-component#props\"><code class=\"language-javascript\">props</code></a></li>\n<li><a href=\"/react/react-component#state\"><code class=\"language-javascript\">state</code></a></li>\n</ul>\n\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-component#reference\"></a>Riferimenti </h2>\n<h3 id=\"commonly-used-lifecycle-methods\"><a class=\"anchor\" href=\"/react/react-component#commonly-used-lifecycle-methods\"></a>Metodi del Lifecycle Utilizzati Frequentemente </h3>\n<p>I metodi in questa sezione coprono la maggior parte dei casi d\u2019uso che incontrerai durante la creazione di componenti React. <strong>Come riferimento grafico, puoi utilizzare <a class=\"external-link\" href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">questo diagramma del lifecycle</a>.</strong></p>\n<h3 id=\"render\"><a class=\"anchor\" href=\"/react/react-component#render\"></a><code class=\"language-javascript\">render()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Il metodo <code class=\"language-javascript\">render()</code> \u00e8 l\u2019unico metodo obbligatorio in un componente classe.</p>\n<p>Il suo compito \u00e8 esaminare <code class=\"language-javascript\">this.props</code> e <code class=\"language-javascript\">this.state</code> e restituire in output uno dei seguenti tipi:</p>\n<ul>\n<li><strong>Elementi React.</strong> Creati solitamente utilizzando <a href=\"/react/introducing-jsx\">JSX</a>. Ad esempio, <code class=\"language-javascript\">&lt;div /&gt;</code> e <code class=\"language-javascript\">&lt;MyComponent /&gt;</code> sono elementi React che indicano a React di renderizzare rispettivamente un nodo del DOM e un altro componente definito dall\u2019utente.</li>\n<li><strong>Array e \u201cfragments\u201d (frammenti).</strong> Ti consentono di restituire in output pi\u00f9 di un elemento. Leggi la documentazione sui <a href=\"/react/fragments\">fragments</a> per maggiori informazioni.</li>\n<li><strong>Portali</strong>. Ti consentono di renderizzare i figli del componente in un sottoalbero del DOM diverso da quello in cui si trova il componente. Leggi la documentazione sui <a href=\"/react/portals\">portali</a> per maggiori informazioni.</li>\n<li><strong>Stringhe e numeri.</strong> Sono renderizzati come nodi di testo nel DOM.</li>\n<li><strong>Booleani o <code class=\"language-javascript\">null</code></strong>. Non renderizzano niente. (Esistono soprattutto per supportare il pattern <code class=\"language-javascript\">return test &amp;&amp; &lt;Figlio /&gt;</code>, in cui <code class=\"language-javascript\">test</code> \u00e8 booleano.)</li>\n</ul>\n<p>La funzione <code class=\"language-javascript\">render()</code> deve essere pura, ovvero non modificare lo stato del componente, restituire sempre lo stesso risultato ogni volta che viene invocata e non interagire direttamente con il browser.</p>\n<p>Se hai bisogno di interagire con il browser, fallo all\u2019interno del metodo <code class=\"language-javascript\">componentDidMount()</code> o negli altri metodi del lifecycle. Mantenere pura la funzione <code class=\"language-javascript\">render()</code> rende pi\u00f9 semplice la gestione dei componenti.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">render()</code> non viene chiamato se <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> ritorna un valore falso.</p>\n</div>\n\n<h3 id=\"constructor\"><a class=\"anchor\" href=\"/react/react-component#constructor\"></a><code class=\"language-javascript\">constructor()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Se non hai bisogno di inizializzare lo stato del componente e di non effettuare il bind di metodi, non c\u2019\u00e8 bisogno di implementare un costruttore per il tuo componente React.</strong></p>\n<p>Il costruttore di un componente React \u00e8 chiamato prima che il componente venga montato. Quando implementi il costruttore in una sottoclasse di <code class=\"language-javascript\">React.Component</code>, dovresti chiamare <code class=\"language-javascript\">super(props)</code> prima di ogni altra istruzione. In caso contrario, <code class=\"language-javascript\">this.props</code> rimarrebbe <em>undefined</em> nel costruttore, il che pu\u00f2 causare bug.</p>\n<p>Di solito in React i costruttori sono utilizzati solamente per due scopi:</p>\n<ul>\n<li>Inizializzare lo <a href=\"/react/state-and-lifecycle\">stato locale</a> assegnando un oggetto a <code class=\"language-javascript\">this.state</code>.</li>\n<li>Effettuare il bind dei <a href=\"/react/handling-events\">gestori di eventi (event handlers)</a> ad una istanza.</li>\n</ul>\n<p><strong>Non dovresti chiamare <code class=\"language-javascript\">setState()</code></strong> nel <code class=\"language-javascript\">constructor()</code>. Al contrario, se il tuo componente ha bisogno di impostare lo stato locale, <strong>assegna lo stato iniziale a <code class=\"language-javascript\">this.state</code></strong> direttamente nel costruttore:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Non chiamre this.setState() qui!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">contatore</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gestoreClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">gestoreClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Il costruttore \u00e8 l\u2019unico punto in cui puoi assegnare direttamente un valore a <code class=\"language-javascript\">this.state</code>. In tutti gli altri metodi, devi invece utilizzare <code class=\"language-javascript\">this.setState()</code>.</p>\n<p>Evita di introdurre i cosiddetti \u201cside-effects\u201d (effetti collaterali) o di effettuare sottoscrizioni nel costruttore. Per questi casi d\u2019uso, utilizza invece <code class=\"language-javascript\">componentDidMount()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><strong>Evita di copiare le props nello stato! Questo \u00e8 un errore comune:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// Non fare cos\u00ec!</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">colore</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>colore <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Il problema \u00e8 che questa soluzione non solo \u00e8 superflua (puoi utilizzare direttamente <code class=\"language-javascript\">this.props.colore</code>) ma \u00e8 anche causa di bug (gli aggiornamenti alla prop <code class=\"language-javascript\">colore</code> non verranno propagati allo stato, contrariamente a quanto si potrebbe erroneamente pensare).</p>\n<p><strong>Utilizza questo pattern solamente se vuoi intenzionalmente ignorare gli aggiornamenti delle props.</strong> In quel caso, per\u00f2, per rendere pi\u00f9 comprensibile il codice ha senso rinominare la prop e chiamarla <code class=\"language-javascript\">coloreIniziale</code> o <code class=\"language-javascript\">coloreDefault</code>. A quel punto puoi costringere un componente a \u201cresettare\u201d il suo stato interno <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">cambiandone la <code class=\"language-javascript\">key</code></a> quando necessario.</p>\n<p>Leggi il <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">post del blog a proposito di come evitare lo stato derivato</a> per sapere cosa fare quando pensi di aver bisogno di far dipendere parti dello stato di un componente dalle sue props.</p>\n</div>\n\n<h3 id=\"componentdidmount\"><a class=\"anchor\" href=\"/react/react-component#componentdidmount\"></a><code class=\"language-javascript\">componentDidMount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">componentDidMount()</code> \u00e8 invocato dopo che il componente \u00e8 montato (cio\u00e8 inserito nell\u2019albero del DOM). Le logiche di inizializzazione che dipendono dai nodi del DOM dovrebbero essere dichiarate in questo metodo. Inoltre, se hai bisogno di caricare dei dati chiamando un endpoint remoto, questo \u00e8 un buon punto per istanziare la chiamata.</p>\n<p>Questo metodo \u00e8 anche un buon punto in cui creare le sottoscrizioni. Se lo fai, non scordarti di cancellare in <code class=\"language-javascript\">componentWillUnmount()</code> tutte le sottoscrizioni create.</p>\n<p>Puoi <strong>chiamare <code class=\"language-javascript\">setState()</code> immediatamente</strong> in <code class=\"language-javascript\">componentDidMount()</code>. Farlo scatener\u00e0 una richiesta di rendering aggiuntiva, che per\u00f2 verr\u00e0 gestita prima che il browser aggiorni lo schermo. Questo garantisce che l\u2019utente non visualizzi lo stato intermedio anche se il metodo <code class=\"language-javascript\">render()</code> viene chiamato due volte. Utilizza questo pattern con cautela in quanto spesso causa problemi di performance. Nella maggior parte dei casi, dovresti poter assegnare lo stato iniziale del componente nel <code class=\"language-javascript\">constructor()</code>. Tuttavia, potrebbe essere necessario utilizzare questo pattern in casi come i popup o i tooltip, in cui hai bisogno di misurare un nodo del DOM prima di renderizzare qualcosa che dipende dalla sua posizione o dalle sue dimensioni.</p>\n\n<h3 id=\"componentdidupdate\"><a class=\"anchor\" href=\"/react/react-component#componentdidupdate\"></a><code class=\"language-javascript\">componentDidUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>propsPrecedenti<span class=\"token punctuation\">,</span> statePrecedente<span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">componentDidUpdate()</code> \u00e8 invocato immediatamente dopo che avviene un aggiornamento del componente. Non viene chiamato per la renderizzazione iniziale.</p>\n<p>Utilizza questo metodo come un\u2019opportunit\u00e0 di effettuare operazioni sul DOM dopo che il componente si \u00e8 aggiornato, oppure per effettuare richieste di rete dopo aver comparato i valori attuali delle props con quelli passati (e.g. una richiesta di rete potrebbe non essere necessaria se le props non sono cambiate).</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propsPrecedenti</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Utilizzo tipico (non dimenticarti di comparare le props):</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>idUtente <span class=\"token operator\">!==</span> propsPrecedenti<span class=\"token punctuation\">.</span>idUtente<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>idUtente<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Puoi chiamare <code class=\"language-javascript\">setState()</code> immediatamente</strong> in <code class=\"language-javascript\">componentDidUpdate()</code> ma nota che la chiamata <strong>deve sempre essere subordinata a un\u2019espressione condizionale</strong> come nell\u2019esempio in alto, altrimenti causerai un loop infinito e una renderizzazione extra che, anche se non visibile dall\u2019utente, pu\u00f2 peggiorare la performance del componente. Se la tua intenzione \u00e8 quella di \u201crispecchiare\u201d nello stato una prop che viene dall\u2019alto, valuta invece di utilizzare direttamente quella prop. Per saperne di pi\u00f9, leggi <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">perch\u00e9 copiare le props nello stato \u00e8 fonte di bug</a>.</p>\n<p>Se il tuo componente implementa il metodo del lifecycle <code class=\"language-javascript\">getSnapshotBeforeUpdate()</code> (il che avviene raramente), il valore restituito da quest\u2019ultimo verr\u00e0 passato come terzo argomento (\u201csnapshot\u201d nell\u2019esempio in alto) al metodo <code class=\"language-javascript\">componentDidUpdate()</code>. In caso contrario, \u201csnapshot\u201d sar\u00e0 undefined.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">componentDidUpdate()</code> non viene chiamato se <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> restituisce un valore falso.</p>\n</div>\n\n<h3 id=\"componentwillunmount\"><a class=\"anchor\" href=\"/react/react-component#componentwillunmount\"></a><code class=\"language-javascript\">componentWillUnmount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">componentWillUnmount()</code> \u00e8 invocato subito prima che un componente sia smontato e distrutto. Effettua tutte le necessarie operazioni di pulizia in questo metodo, come la cancellazione di timer, richieste di rete o sottoscrizioni che avevi creato in <code class=\"language-javascript\">componentDidMount()</code>.</p>\n<p><strong>Non dovresti chiamare <code class=\"language-javascript\">setState()</code></strong> in <code class=\"language-javascript\">componentWillUnmount()</code> perch\u00e9 il componente non verr\u00e0 ri-renderizzato. Una volta che un\u2019istanza di un componente \u00e8 smontata, non verr\u00e0 mai pi\u00f9 montata.</p>\n\n<h3 id=\"rarely-used-lifecycle-methods\"><a class=\"anchor\" href=\"/react/react-component#rarely-used-lifecycle-methods\"></a>Metodi del Lifecycle Utilizzati Raramente </h3>\n<p>I metodi in questa sezione corrispondono a casi d\u2019uso non comuni. Possono tornare utili qualche volta, ma la maggior parte dei tuoi componenti non dovrebbe averne bisogno. <strong>Puoi visualizzare la maggior parte dei metodi descritti in questa sezione in questo <a class=\"external-link\" href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">diagramma del lifecycle</a> se spunti il checkbox \u201cShow less common lifecycles\u201d (\u201cMostra i metodi del lifecycle meno comuni\u201d) in alto.</strong></p>\n<h3 id=\"shouldcomponentupdate\"><a class=\"anchor\" href=\"/react/react-component#shouldcomponentupdate\"></a><code class=\"language-javascript\">shouldComponentUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span>propsSuccessive<span class=\"token punctuation\">,</span> stateSuccessivo<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Utilizza <code class=\"language-javascript\">shouldComponentUpdate()</code> per informare React del fatto che l\u2019output di un componente non \u00e8 influenzato dall\u2019attuale modifica dello state o delle props. Il comportamento predefinito di React \u00e8 quello di ri-renderizzare un componente ogni volta che lo stato cambia e nella stragrande maggioranza dei casi dovresti affidarti a questo comportamento.</p>\n<p><code class=\"language-javascript\">shouldComponentUpdate()</code> \u00e8 invocato prima della renderizzazione, quando il componente sta ricevendo nuove propriet\u00e0 o un nuovo stato. Il risultato di default restituito dal metodo \u00e8 <code class=\"language-javascript\">true</code>. Questo metodo non \u00e8 chiamato durante la renderizzazione del componente oppure quando viene utilizzato il metodo <code class=\"language-javascript\">forceUpdate()</code>.</p>\n<p>Questo metodo esiste al solo scopo di <strong><a href=\"/react/optimizing-performance\">ottimizzare la performance</a>.</strong> Non devi utilizzarlo per \u201cprevenire\u201d una renderizzazione, in quanto questo pu\u00f2 essere causa di bug. <strong>Valuta se utilizzare la classe predefinita <a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">PureComponent</code></a></strong> invece di scrivere <code class=\"language-javascript\">shouldComponentUpdate()</code> a mano. <code class=\"language-javascript\">PureComponent</code> effettua una comparazione \u201cshallow\u201d delle props e dello state e riduce il rischio di saltare erroneamente un aggiornamento necessario.</p>\n<p>Se sei sicuro di voler scrivere a mano il metodo, puoi comparare <code class=\"language-javascript\">this.props</code> con <code class=\"language-javascript\">propsSuccessive</code> e <code class=\"language-javascript\">this.state</code> con <code class=\"language-javascript\">stateSuccessivo</code> e restituire <code class=\"language-javascript\">false</code> per comunicare a React che l\u2019aggiornamento pu\u00f2 essere saltato. Nota che restituire <code class=\"language-javascript\">false</code> non impedisce ai componenti figli di essere ri-renderizzati quando il <em>loro</em> stato cambia.</p>\n<p>Non raccomandiamo di effettuare comparazioni \u201cdeep\u201d o di utilizzare <code class=\"language-javascript\">JSON.stringify()</code> in <code class=\"language-javascript\">shouldComponentUpdate()</code>. Farlo \u00e8 molto inefficiente e peggiorer\u00e0 sicuramente la performance del componente.</p>\n<p>Attualmente, quando <code class=\"language-javascript\">shouldComponentUpdate()</code> restituisce <code class=\"language-javascript\">false</code>, i metodi <a href=\"/react/react-component#unsafe_componentwillupdate\"><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code></a>, <a href=\"/react/react-component#render\"><code class=\"language-javascript\">render()</code></a>, e <a href=\"/react/react-component#componentdidupdate\"><code class=\"language-javascript\">componentDidUpdate()</code></a> non vengono invocati. In futuro, React potrebbe per\u00f2 considerare il risultato di <code class=\"language-javascript\">shouldComponentUpdate()</code> semplicemente come un suggerimento, e non un ordine tassativo, nel cui caso restituire <code class=\"language-javascript\">false</code> potrebbe comunque risultare in una nuova renderizzazione del componente.</p>\n\n<h3 id=\"static-getderivedstatefromprops\"><a class=\"anchor\" href=\"/react/react-component#static-getderivedstatefromprops\"></a><code class=\"language-javascript\">static getDerivedStateFromProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">getDerivedStateFromProps</code> \u00e8 invocato subito prima di chiamare <code class=\"language-javascript\">render</code>, sia durante il montaggio iniziale del componente che negli aggiornamenti successivi. Dovrebbe restituire un oggetto per aggiornare lo stato, oppure <code class=\"language-javascript\">null</code> per non effettuare aggiornamenti.</p>\n<p>Questo metodo esiste per <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state\">rari casi d\u2019uso</a> in cui lo stato dipende da cambiamenti delle propriet\u00e0 nel corso del tempo. Ad esempio, potrebbe tornare utile per implementare un componente <code class=\"language-javascript\">&lt;Transizione&gt;</code> che compara i suoi figli precedenti e successivi per decidere quali di essi far comparire o sparire con un\u2019animazione.</p>\n<p>Derivare lo stato \u00e8 spesso causa di codice verboso e rende difficile la gestione dei tuoi componenti.\n<a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">Assicurati di familiarizzare con alternative pi\u00f9 semplici:</a></p>\n<ul>\n<li>Se hai bisogno di <strong>causare un effetto collaterale</strong> (ad esempio una richiesta di dati o un\u2019animazione) in risposta a un cambiamento nelle props, utilizza invece il metodo del lifecycle <a href=\"/react/react-component#componentdidupdate\"><code class=\"language-javascript\">componentDidUpdate</code></a>.</li>\n<li>Se vuoi <strong>ricalcolare alcuni dati solo quando una prop cambia</strong>, <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization\">utilizza un \u201cmemoization helper\u201d (helper di memoizzazione)</a>.</li>\n<li>Se vui <strong>\u201cresettare\u201d lo stato quando una prop cambia</strong>, valuta invece se rendere il componente <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component\">completamente controllato</a> oppure <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">completamente non controllato con una <code class=\"language-javascript\">key</code></a>.</li>\n</ul>\n<p>Questo metodo non ha accesso all\u2019istanza del componente. Se vuoi, puoi riutilizzare parti del codice di <code class=\"language-javascript\">getDerivedStateFromProps()</code> e di altri metodi di classe dichiarando, all\u2019esterno della definizione della classe del componente, funzioni pure che accettano come argomenti le props e lo state.</p>\n<p>Nota che questo metodo viene chiamato <em>ogni volta</em> che viene effettuato un render, a prescindere dalla causa. Al contrario, <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps</code> viene invocato solo quando il parent causa la ri-renderizzazione e non quando quest\u2019ultima \u00e8 il risultato di una chiamata a <code class=\"language-javascript\">setState</code> all\u2019interno del componente stesso.</p>\n\n<h3 id=\"getsnapshotbeforeupdate\"><a class=\"anchor\" href=\"/react/react-component#getsnapshotbeforeupdate\"></a><code class=\"language-javascript\">getSnapshotBeforeUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">getSnapshotBeforeUpdate</span><span class=\"token punctuation\">(</span>propsPrecedenti<span class=\"token punctuation\">,</span> statePrecedente<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">getSnapshotBeforeUpdate()</code> \u00e8 invocato subito prima che il pi\u00f9 recente output della renderizzazione sia consolidato ad esempio nel DOM. Permette al tuo componente di catturare informazioni riguardo al DOM (e.g. la posizione dello scroll) prima che avvenga un potenziale cambiamento. Qualsiasi valore restituito da questo metodo del lifecycle verr\u00e0 passato come parametro a <code class=\"language-javascript\">componentDidUpdate()</code>.</p>\n<p>Questo caso d\u2019uso non \u00e8 comune, ma potrebbe verificarsi in UI come i canali delle chat, che hanno bisogno di gestire la posizione dello scroll in modo speciale.</p>\n<p>Il metodo dovrebbe restituire un valore di \u201csnapshot\u201d (o <code class=\"language-javascript\">null</code>).</p>\n<p>Ad esempio:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListaScorrimento</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rifLista <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getSnapshotBeforeUpdate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">propsPrecedenti<span class=\"token punctuation\">,</span>\n    statePrecedente</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Stiamo aggiungendo nuovi elementi alla lista?</span>\n    <span class=\"token comment\">// Salviamo la posizione dello scroll in modo da poterla aggiustare in seguito.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      propsPrecedenti<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> lista <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rifLista<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> lista<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> lista<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">propsPrecedenti<span class=\"token punctuation\">,</span>\n    statePrecedente<span class=\"token punctuation\">,</span>\n    snapshot</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Se snapshot \u00e8 definito, abbiamo appenan aggiunto nuovi elementi alla lista.</span>\n    <span class=\"token comment\">// Aggiustiamo lo scroll in modo che i nuovi elementi non spingano quelli</span>\n    <span class=\"token comment\">// preesistenti fuori dallo schermo.</span>\n    <span class=\"token comment\">// (snapshot contiene il valore restituito da getSnapshotBeforeUpdate)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snapshot <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> lista <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rifLista<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n      lista<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> lista<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> snapshot<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rifLista<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ...contenuti... */</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Nell\u2019esempio qui sopra, \u00e8 importante leggere la propriet\u00e0 <code class=\"language-javascript\">scrollHeight</code> in <code class=\"language-javascript\">getSnapshotBeforeUpdate</code> perch\u00e9 potrebbero verificarsi ritardi fra i metodi del lifecycle che appartengono alla fase della renderizzazione (come <code class=\"language-javascript\">render</code>) e i metodi che appartengono alla fase del \u201cconsolidamento\u201d (come <code class=\"language-javascript\">getSnapshotBeforeUpdate</code> e <code class=\"language-javascript\">componentDidUpdate</code>).</p>\n\n<h3 id=\"error-boundaries\"><a class=\"anchor\" href=\"/react/react-component#error-boundaries\"></a>Contenitori di Errori </h3>\n<p>I <a href=\"/react/error-boundaries\">Contenitori di Errori</a> sono componenti React che si occupano di catturare gli errori JavaScript in qualunque punto nell\u2019albero dei loro componenti figli, loggarli e visualizzare una UI di ripiego invece dell\u2019albero di componenti che si \u00e8 rotto. I Contenitori di Errori catturano gli errori durante la renderizzazione, nei metodi del lifecycle e nei costruttori dell\u2019intero albero sotto di loro.</p>\n<p>Un componente classe diventa un contenitore di errori se definisce uno (o entrambi) dei metodi del lifecycle <code class=\"language-javascript\">static getDerivedStateFromError()</code> o <code class=\"language-javascript\">componentDidCatch()</code>. Aggiornare lo stato all\u2019interno di questi metodi del lifecycle ti consente di catturare un errore JavaScript non gestito nell\u2019albero pi\u00f9 in basso e mostrare una UI di ripiego.</p>\n<p>Utilizza i contenitori di errori solamente per recuperare errori inaspettati; <strong>non utilizzarli per il controllo di flusso dell\u2019applicazione.</strong></p>\n<p>Per maggiori informazioni, vedi <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2017/07/26/error-handling-in-react-16.html\"><em>Gestione degli Errori in React 16</em></a>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>I contenitori di errori catturano solamente gli errori sollevati dai componenti <strong>sotto di loro</strong> nell\u2019albero. Un contenitore di errori non \u00e8 in grado di catturare un errore sollevato da lui stesso.</p>\n</div>\n<h3 id=\"static-getderivedstatefromerror\"><a class=\"anchor\" href=\"/react/react-component#static-getderivedstatefromerror\"></a><code class=\"language-javascript\">static getDerivedStateFromError()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Questo metodo del lifecycle \u00e8 invocato dopo che un errore \u00e8 stato sollevato da un componente discendente.\nRiceve l\u2019errore che \u00e8 stato sollevato come parametro e dovrebbe restituire un valore da usare per aggiornare lo state.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ContenitoreErrori</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">inErrore</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Aggiorno lo stato in modo che il prossimo render visualizzi la UI di ripiego.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">inErrore</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inErrore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Puoi renderizzare una qualsiasi interfaccia di ripiego</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Oh no! Si \u00e8 verificato un errore!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">getDerivedStateFromError()</code> \u00e8 chiamato durante la fase di renderizzazione, quindi i side-effects (effetti collaterali) non sono permessi.\nPer questi casi d\u2019uso, utilizza invece <code class=\"language-javascript\">componentDidCatch()</code>.</p>\n</div>\n\n<h3 id=\"componentdidcatch\"><a class=\"anchor\" href=\"/react/react-component#componentdidcatch\"></a><code class=\"language-javascript\">componentDidCatch()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Questo metodo del lifecycle \u00e8 invocato dopo che un errore \u00e8 stato sollevato da un componente discendente.\nRiceve due parametri:</p>\n<ol>\n<li><code class=\"language-javascript\">error</code> - L\u2019errore che \u00e8 stato sollevato.</li>\n<li><code class=\"language-javascript\">info</code> - Un oggetto con una chiave <code class=\"language-javascript\">componentStack</code> che contiene <a href=\"/react/error-boundaries#component-stack-traces\">informazioni a proposito di quale componente ha sollevato l\u2019errore</a>.</li>\n</ol>\n<p><code class=\"language-javascript\">componentDidCatch()</code> \u00e8 chiamato durante la fase di consolidamento, quindi i side-effects sono ammessi.\nDovrebbe essere utilizzato per cose come il log degli errori:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ContenitoreErrori</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">inErrore</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Aggiorno lo stato in modo che il prossimo render visualizzi la UI di ripiego.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">inErrore</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// \"componentStack\" di esempio:</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in ComponenteMalfunzionante (created by App)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in ContenitoreErrori (created by App)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in div (created by App)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in App</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">loggaStackNelMioServizio</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>componentStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inErrore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Puoi renderizzare una qualsiasi interfaccia di ripiego</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Oh no! Si \u00e8 verificato un errore!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Le build di sviluppo e di produzione di React gestiscono in modo leggermente diverso come <code class=\"language-javascript\">componentDidCatch()</code> gestisce gli errori.</p>\n<p>In sviluppo, gli errori effettuano il bubble up a <code class=\"language-javascript\">window</code>, ci\u00f2 significa che ogni <code class=\"language-javascript\">window.onerror</code> o <code class=\"language-javascript\">window.addEventListener('error', callback)</code> intercetter\u00e0 gli errori che sono colti da <code class=\"language-javascript\">componentDidCatch()</code>.</p>\n<p>In produzione, invece, gli errori non effetuano il bubble up, il che signidica che ogni error handler antenato ricever\u00e0 solamente gli errori esplicitamente non colti da <code class=\"language-javascript\">componentDidCatch()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Quando si verifica un errore, puoi anche renderizzare una UI di ripiego con <code class=\"language-javascript\">componentDidCatch()</code> chiamando <code class=\"language-javascript\">setState</code>, ma questo comportamento verr\u00e0 deprecato in una futura release di React.\nUtilizza invece <code class=\"language-javascript\">static getDerivedStateFromError()</code> per gestire la renderizzazione in questi casi.</p>\n</div>\n\n<h3 id=\"legacy-lifecycle-methods\"><a class=\"anchor\" href=\"/react/react-component#legacy-lifecycle-methods\"></a>Metodi del Lifecycle Obsoleti </h3>\n<p>I metodi del lifecycle seguenti sono marcati come \u201cobsoleti\u201d. Funzionano ancora, ma non raccomandiamo di utilizzarli nel nuovo codice. Puoi saperne di pi\u00f9 a proposito di come effettuare la migrazione dai metodi del lifecycle obsoleti in <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">questo post del blog</a>.</p>\n<h3 id=\"unsafe_componentwillmount\"><a class=\"anchor\" href=\"/react/react-component#unsafe_componentwillmount\"></a><code class=\"language-javascript\">UNSAFE_componentWillMount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">UNSAFE_componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Questo metodo del lifecycle era originariamente chiamato <code class=\"language-javascript\">componentWillMount</code>. Quel nome continuer\u00e0 a funzionare fino alla versione 17. Utilizza il <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\">\u201ccodemod\u201d <code class=\"language-javascript\">rename-unsafe-lifecycles</code></a> per aggiornare automaticamente i tuoi componenti.</p>\n</div>\n<p><code class=\"language-javascript\">UNSAFE_componentWillMount()</code> viene invocato prima del montaggio del componente e prima di <code class=\"language-javascript\">render()</code>, quindi chiamare <code class=\"language-javascript\">setState()</code> in modo sincrono in questo metodo non scatener\u00e0 una renderizzazione aggiuntiva. In generale, ti raccomandiamo di utilizzare <code class=\"language-javascript\">constructor()</code> invece di questo metodo per inizializzare lo stato.</p>\n<p>Evita di introdurre side-effects o sottoscrizioni in questo metodo. Per quei casi d\u2019uso, utilizza invece <code class=\"language-javascript\">componentDidMount()</code>.</p>\n<p>Questo \u00e8 l\u2019unico metodo del lifecycle invocato quando si utilizza il server rendering.</p>\n\n<h3 id=\"unsafe_componentwillreceiveprops\"><a class=\"anchor\" href=\"/react/react-component#unsafe_componentwillreceiveprops\"></a><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">UNSAFE_componentWillReceiveProps</span><span class=\"token punctuation\">(</span>propsSuccessive<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Questo metodo del lifecycle era originariamente chiamato <code class=\"language-javascript\">componentWillReceiveProps</code>. Quel nome continuer\u00e0 a funzionare fino alla versione 17. Utilizza il <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\">\u201ccodemod\u201d <code class=\"language-javascript\">rename-unsafe-lifecycles</code></a> per aggiornare automaticamente i tuoi componenti.</p>\n</div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Utilizzare questo metodo del lifecycle spesso conduce a bug e inconsistenze.</p>\n<ul>\n<li>Se hai bisogno di <strong>causare un side effect</strong> (ad esempio, recupero di dati o animazioni) in risposta a un cambiamento nelle propriet\u00e0, utilizza invece il metodo del lifecycle <a href=\"/react/react-component#componentdidupdate\"><code class=\"language-javascript\">componentDidUpdate</code></a>.</li>\n<li>Se hai utilizzato <code class=\"language-javascript\">componentWillReceiveProps</code> per <strong>ricalcolare alcuni dati solamente quando una propriet\u00e0 cambia</strong>, <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization\">utilizza invece un helper di memoizzazione</a>.</li>\n<li>Se hai utilizzato <code class=\"language-javascript\">componentWillReceiveProps</code> per <strong>\u201cresettare\u201d lo stato quando una propriet\u00e0 cambia</strong>, valuta piuttosto se creare un componente <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component\">completamente controllato</a> o <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">completamente non controllato con una <code class=\"language-javascript\">key</code></a>.</li>\n</ul>\n<p>Per gli altri casi d\u2019uso, <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">segui le raccomandazioni in questo post del blog a proposito dello stato derivato</a>.</p>\n</div>\n<p><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code> viene invocato prima che un componente montato riceva nuove propriet\u00e0. Se hai bisogno di aggiornare lo stato in risposta a cambiamenti nelle propriet\u00e0 (ad esempio per resettarlo), puoi comparare <code class=\"language-javascript\">this.props</code> e <code class=\"language-javascript\">propsSuccessive</code> ed effettuare l\u2019aggiornamento dello stato utilizzando <code class=\"language-javascript\">this.setState()</code> in questo metodo.</p>\n<p>Nota che se un componente padre causa la ri-renderizzazione del tuo componente, questo metodo verr\u00e0 chiamato anche se le propriet\u00e0 non sono cambiate. Assicurati di comparare i valori attuali e quelli successivi delle propriet\u00e0 se vuoi solo reagire ai cambiamenti delle propriet\u00e0.</p>\n<p>React non chiama <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code> con le propriet\u00e0 iniziali durante il <a href=\"/react/react-component#mounting\">montaggio</a>. Questo metodo viene chiamato solamente se alcune delle propriet\u00e0 del componente si potrebbero aggiornarsi. In generale, le chiamate a <code class=\"language-javascript\">this.setState()</code> non attivano <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code>.</p>\n\n<h3 id=\"unsafe_componentwillupdate\"><a class=\"anchor\" href=\"/react/react-component#unsafe_componentwillupdate\"></a><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">UNSAFE_componentWillUpdate</span><span class=\"token punctuation\">(</span>propsSuccessive<span class=\"token punctuation\">,</span> stateSuccessivo<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>Questo metodo del lifecycle era originariamente chiamato <code class=\"language-javascript\">componentWillUpdate</code>. Quel nome continuer\u00e0 a funzionare fino alla versione 17. Utilizza il <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\">\u201ccodemod\u201d <code class=\"language-javascript\">rename-unsafe-lifecycles</code></a> per aggiornare automaticamente i tuoi componenti.</p>\n</div>\n<p><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> viene invocato subito prima della renderizzazione quando le nuove props o il nuovo stato vengono ricevuti. Utilizza questo metodo come un\u2019opportunit\u00e0 di prepararti prima che avvenga un aggiornamento. Questo metodo non \u00e8 chiamato nella renderizzazione iniziale.</p>\n<p>Nota che non puoi chiamare <code class=\"language-javascript\">this.setState()</code>in questo metodo, n\u00e9 dovresti fare qualsiasi altra cosa (e.g. ad esempio il dispatch di una action di Redux) che potrebbe causare un aggiornamento di un componente React prima che l\u2019esecuzione di <code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> arrivi al termine.</p>\n<p>Tipicamente, questo metodo pu\u00f2 essere sostituito da <code class=\"language-javascript\">componentDidUpdate()</code>. Se utilizzavi questo metodo per accedere al DOM (e.g. per salvare la posizione dello scroll), puoi spostare quella logica in <code class=\"language-javascript\">getSnapshotBeforeUpdate()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> non viene invocato se <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> restituisce un valore falso.</p>\n</div>\n\n<h2 id=\"other-apis-1\"><a class=\"anchor\" href=\"/react/react-component#other-apis-1\"></a>Altre API </h2>\n<p>A differenza dei metodi del lifecycle descritti in alto (che React invoca automaticamente per te), quelli seguenti sono metodi che <em>tu</em> puoi chiamare nei tuoi componenti.</p>\n<p>Sono solamente due: <code class=\"language-javascript\">setState()</code> e <code class=\"language-javascript\">forceUpdate()</code>.</p>\n<h3 id=\"setstate\"><a class=\"anchor\" href=\"/react/react-component#setstate\"></a><code class=\"language-javascript\">setState()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>updater<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">setState()</code> accoda modifiche allo stato del componente e comunica a React che il componente e i suoi figli devono essere ri-renderizzati con lo stato aggiornato. Questo \u00e8 il metodo principale che puoi utilizzare per aggiornare l\u2019interfaccia utente in risposta agli event handler e alle risposte del server.</p>\n<p>Puoi pensare a <code class=\"language-javascript\">setState()</code> come a una <em>richiesta</em> e non a un ordine immediato di aggiornare il componente. Per migliorare la performance percepita, React potrebbe ritardare l\u2019aggiornamento, per poi aggiornare molti componenti in un sol colpo. Nel raro caso in cui tu abbia bisogno che React aggiorni il DOM in modalit\u00e0 sincrona, puoi utilizzare <a href=\"/react/react-dom#flushsync\"><code class=\"language-javascript\">flushSync</code></a> ma tieni presente che le prestazioni ne soffriranno.</p>\n<p><code class=\"language-javascript\">setState()</code> non aggiorna sempre immediatamente il componente. Potrebbe accorpare o ritardare l\u2019aggiornamento. Di conseguenza, leggere il valore di <code class=\"language-javascript\">this.state</code> subito dopo aver chiamato <code class=\"language-javascript\">setState()</code> \u00e8 potenzialmente un errore. Invece di farlo, utilizza <code class=\"language-javascript\">componentDidUpdate</code> oppure una callback di <code class=\"language-javascript\">setState</code> (<code class=\"language-javascript\">setState(updater, callback)</code>). React garantisce che entrambe queste funzioni vengano chiamate dopo che l\u2019aggiornamento \u00e8 stato applicato. Se hai bisogno di impostare lo stato basandoti sullo stato precedente, leggi la parte riguardante l\u2019argomento <code class=\"language-javascript\">updater</code> pi\u00f9 in basso.</p>\n<p><code class=\"language-javascript\">setState()</code> causer\u00e0 sempre una ri-renderizzazione a meno che <code class=\"language-javascript\">shouldComponentUpdate()</code> restituisca <code class=\"language-javascript\">false</code>. Se stai utilizzando oggetti mutabili e non puoi implementare una logica di renderizzazione condizionale in <code class=\"language-javascript\">shouldComponentUpdate()</code>, chiamare <code class=\"language-javascript\">setState()</code> solo quando il nuovo stato \u00e8 effettivamente diverso dal precedente eviter\u00e0 renderizzazioni non necessarie</p>\n<p>Il primo argomento \u00e8 una funzione <code class=\"language-javascript\">updater</code> (\u201caggiornatrice\u201d) con la seguente firma:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> cambiamentoState</code></pre></div>\n<p><code class=\"language-javascript\">state</code> \u00e8 un riferimento allo stato del componente nel momento in cui il cambiamento sta venendo applicato. Non dovrebbe mai essere mutato direttamente. Piuttosto, gli aggiornamenti dovrebbero essere rappresentati costruendo un nuovo oggetto basato sull\u2019input di <code class=\"language-javascript\">state</code> e <code class=\"language-javascript\">props</code>. Ad esempio, supponiamo di voler incrementare un valore nello stato a seconda del valore di <code class=\"language-javascript\">props.intervallo</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>contatore <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>intervallo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I valori di <code class=\"language-javascript\">state</code> e <code class=\"language-javascript\">props</code> ricevuti dalla funzione updater sono sicuramente aggiornati. Il risultato restituito dall\u2019updater viene applicato a <code class=\"language-javascript\">state</code> con uno shallow merge.</p>\n<p>Il secondo parametro di <code class=\"language-javascript\">setState()</code> \u00e8 una callback opzionale che verr\u00e0 chiamata automaticamente una volta che <code class=\"language-javascript\">setState</code> \u00e8 stato completato e il componente \u00e8 stato ri-renderizzato. In generale, ti raccomandiamo di utilizzare <code class=\"language-javascript\">componentDidUpdate()</code> a questo scopo.</p>\n<p>Puoi anche passare un oggetto come primo argomento di <code class=\"language-javascript\">setState()</code>, invece che una funzione:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>cambiamentoState<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In questo caso viene eseguito direttamente uno shallow merge di <code class=\"language-javascript\">cambiamentoState</code> nel nuovo stato, ad esempio per modificare la quantit\u00e0 di un prodotto in un carrello della spesa:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">quantita</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Anche questa variante di <code class=\"language-javascript\">setState()</code> \u00e8 asincrona, e chiamate successive durante lo stesso ciclo potrebbero essere accorpate. Ad esempio, se provi ad aumentare la quantit\u00e0 di un prodotto in un carrello pi\u00f9 di una volta nello stesso ciclo, otterrai lo stesso effetto di:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n  previousState<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">quantita</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>quantita <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">quantita</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>quantita <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Le chiamate successive sovrascriveranno i valori delle chiamate precedenti nello stesso ciclo, quindi la quantit\u00e0 verr\u00e0 incrementata una volta sola. Se lo stato successivo dipende dallo stato corrente, ti raccomandiamo la variante che utilizza la funzione updater:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">quantita</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>quantita <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Per maggiori dettagli, leggi:</p>\n<ul>\n<li><a href=\"/react/state-and-lifecycle\">State e Lifecycle</a></li>\n<li><a class=\"external-link\" href=\"https://stackoverflow.com/a/48610973/458193\">Approfondimento: Quando e come le chiamate a <code class=\"language-javascript\">setState()</code> vengono accorpate?</a></li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">Approfondimento: Perch\u00e9 <code class=\"language-javascript\">this.state</code> non viene aggiornato immediatamente?</a></li>\n</ul>\n\n<h3 id=\"forceupdate\"><a class=\"anchor\" href=\"/react/react-component#forceupdate\"></a><code class=\"language-javascript\">forceUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">component<span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Per definizione, quando lo state o le props del tuo componente cambiano, il componente verr\u00e0 ri-renderizzato. Se il tuo metodo <code class=\"language-javascript\">render()</code> dipende da qualche altro dato, puoi informare React del fatto che il componente ha bisogno di essere ri-renderizzato chiamando il metodo <code class=\"language-javascript\">forceUpdate()</code>.</p>\n<p>Chiamare <code class=\"language-javascript\">forceUpdate()</code> far\u00e0 s\u00ec che il metodo <code class=\"language-javascript\">render()</code> del componente venga subito chiamato, saltando <code class=\"language-javascript\">shouldComponentUpdate()</code>. Questo attiver\u00e0 normalmente tutti i metodi del lifecycle dei componenti figli, incluso il metodo <code class=\"language-javascript\">shouldComponentUpdate()</code> di ciascun figlio. React continuer\u00e0 ad aggiornare il DOM come al solito solamente se il markup cambia.</p>\n<p>Normalmente dovresti cercare di evitare tutti i casi d\u2019uso in cui ti trovi nella necessit\u00e0 di utilizzare <code class=\"language-javascript\">forceUpdate()</code> ed utilizzare solamente i valori di <code class=\"language-javascript\">this.props</code> e <code class=\"language-javascript\">this.state</code> nel metodo <code class=\"language-javascript\">render()</code>.</p>\n\n<h2 id=\"class-properties-1\"><a class=\"anchor\" href=\"/react/react-component#class-properties-1\"></a>Propriet\u00e0 della Classe </h2>\n<h3 id=\"defaultprops\"><a class=\"anchor\" href=\"/react/react-component#defaultprops\"></a><code class=\"language-javascript\">defaultProps</code> </h3>\n<p><code class=\"language-javascript\">defaultProps</code> pu\u00f2 essere definita come una propriet\u00e0 della classe componente stessa, allo scopo di impostare i valori predefiniti delle props della classe. Questo \u00e8 possibile per le props <code class=\"language-javascript\">undefined</code>, ma non per le props <code class=\"language-javascript\">null</code>. Ad esempio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BottonePersonalizzato</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nBottonePersonalizzato<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">colore</span><span class=\"token operator\">:</span> <span class=\"token string\">'blu'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se <code class=\"language-javascript\">props.colore</code> non \u00e8 fornito dall\u2019esterno, verr\u00e0 automaticamente valorizzato con il valore <code class=\"language-javascript\">'blu'</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BottonePersonalizzato</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// props.colore verr\u00e0 impostato a blu</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se <code class=\"language-javascript\">props.colore</code> viene impostato a <code class=\"language-javascript\">null</code>, il suo valore sar\u00e0 effettivamente <code class=\"language-javascript\">null</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BottonePersonalizzato</span></span> <span class=\"token attr-name\">colore</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// props.colore rester\u00e0 nullo</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n\n<h3 id=\"displayname\"><a class=\"anchor\" href=\"/react/react-component#displayname\"></a><code class=\"language-javascript\">displayName</code> </h3>\n<p>La stringa <code class=\"language-javascript\">displayName</code> \u00e8 utilizzata nei messaggi di debug. Di solito, non hai bisogno di impostarla in quanto viene derivata automaticamente dal nome della funzione o della classe che definisce il componente. Potresti avere bisogno di impostarla esplicitamente se vuoi mostrare un nome diverso per ragioni di debug oppure se crei un componente di ordine superiore, come descritto dettagliatamente in <a href=\"/react/higher-order-components#convention-wrap-the-display-name-for-easy-debugging\">Wrap the Display Name for Easy Debugging</a>.</p>\n\n<h2 id=\"instance-properties-1\"><a class=\"anchor\" href=\"/react/react-component#instance-properties-1\"></a>Propriet\u00e0 dell\u2019Istanza </h2>\n<h3 id=\"props\"><a class=\"anchor\" href=\"/react/react-component#props\"></a><code class=\"language-javascript\">props</code> </h3>\n<p><code class=\"language-javascript\">this.props</code> contiene le props che erano state definite da chi ha chiamato il componente. Leggi <a href=\"/react/components-and-props\">Componenti e Props</a> per un\u2019introduzione alle props.</p>\n<p>In particolare, <code class=\"language-javascript\">this.props.children</code> \u00e8 una propriet\u00e0 speciale, tipicamente definita dai tag figli nelle espressioni JSX piuttosto che nel tag stesso.</p>\n<h3 id=\"state\"><a class=\"anchor\" href=\"/react/react-component#state\"></a><code class=\"language-javascript\">state</code> </h3>\n<p>Lo state contiene i dati specifici del componente che potrebbero cambiare nel tempo. Lo stato \u00e8 definito dall\u2019utente e dovrebbe essere un semplice oggetto JavaScript.</p>\n<p>Se un valore non \u00e8 utilizzato per la renderizzazione o per il flusso dei dati (ad esempio, l\u2019ID di un timer), non c\u2019\u00e8 bisogno di includerlo nello state. Questi valori possono semplicemente essere definiti come campi nell\u2019istanza del componente.</p>\n<p>Leggi <a href=\"/react/state-and-lifecycle\">State e Lifecycle</a> per maggiori informazioni a proposito dello stato.</p>\n<p>Non mutare mai direttamente <code class=\"language-javascript\">this.state</code>, in quanto chiamate successive a <code class=\"language-javascript\">setState()</code> potrebbero sovrascrivere la mutazione che hai effettuato. Tratta <code class=\"language-javascript\">this.state</code> come se fosse immutabile.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-react-component.md\">Edit this page</a></p></div></article>", "path": "/react/react-component", "nav": ["/react/react-api", "/react/react-dom"]}, {"key": "ReactDOM", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Il pacchetto <code class=\"language-javascript\">react-dom</code> offre metodi DOM-specifici che possono essere usati al livello pi\u00f9 alto della tua applicazione come una forma di uscita di emergenza per permetterti di uscire dal modello React qualora ne avessi bisogno.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se usi ES5 con npm, puoi scrivere:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ReactDOM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Il pacchetto <code class=\"language-javascript\">react-dom</code> offre inoltre moduli specifici per applicazioni client e server:</p>\n<ul>\n<li><a href=\"/react/react-dom-client\"><code class=\"language-javascript\">react-dom/client</code></a></li>\n<li><a href=\"/react/react-dom-server\"><code class=\"language-javascript\">react-dom/server</code></a></li>\n</ul>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-dom#overview\"></a>Panoramica </h2>\n<p>Il pacchetto <code class=\"language-javascript\">react-dom</code> esporta questi metodi:</p>\n<ul>\n<li><a href=\"/react/react-dom#createportal\"><code class=\"language-javascript\">createPortal()</code></a></li>\n<li><a href=\"/react/react-dom#flushsync\"><code class=\"language-javascript\">flushSync()</code></a></li>\n</ul>\n<p>Anche questi metodi sono esportati da <code class=\"language-javascript\">react-dom</code>, ma sono considerati legacy:</p>\n<ul>\n<li><a href=\"/react/react-dom#render\"><code class=\"language-javascript\">render()</code></a></li>\n<li><a href=\"/react/react-dom#hydrate\"><code class=\"language-javascript\">hydrate()</code></a></li>\n<li><a href=\"/react/react-dom#finddomnode\"><code class=\"language-javascript\">findDOMNode()</code></a></li>\n<li><a href=\"/react/react-dom#unmountcomponentatnode\"><code class=\"language-javascript\">unmountComponentAtNode()</code></a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Entrambi <code class=\"language-javascript\">render</code> e <code class=\"language-javascript\">hydrate</code> sono stati sostituiti dai nuovi <a href=\"/react/react-dom-client\">metodi client</a> in React 18. Questi metodi daranno un avviso alla tua applicazione e si comporteranno come se stessi utilizzando React 17 (maggiori informazioni <a class=\"external-link\" href=\"https://reactjs.org/link/switch-to-createroot\">qui</a>).</p>\n</div>\n<h3 id=\"browser-support\"><a class=\"anchor\" href=\"/react/react-dom#browser-support\"></a>Supporto ai browser </h3>\n<p>React supporta tutti i browser moderni, comunque <a href=\"/react/javascript-environment-requirements\">alcune polyfills sono richieste</a> per versioni meno recenti.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Non supportiamo browser meno recenti che non supportano metodi ES5 o microtasks come Internet Explorer. Puoi trovare che le tue applicazioni funzionano in browser meno recenti utilizzando polyfills come <a class=\"external-link\" href=\"https://github.com/es-shims/es5-shim\">es5-shim ed es5-sham</a>, ma se procedi per questa strada assicurati di sapere cosa stai facendo.</p>\n</div>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-dom#reference\"></a>Riferimento </h2>\n<h3 id=\"createportal\"><a class=\"anchor\" href=\"/react/react-dom#createportal\"></a><code class=\"language-javascript\">createPortal()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Crea un portale. I portali permettono di <a href=\"/react/portals\">renderizzare un nodo figlio all\u2019interno di un nodo DOM che esiste all\u2019esterno della gerarchia del componente DOM</a>.</p>\n<h3 id=\"flushsync\"><a class=\"anchor\" href=\"/react/react-dom#flushsync\"></a><code class=\"language-javascript\">flushSync()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">flushSync</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Force this state update to be synchronous.</span>\n<span class=\"token function\">flushSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// By this point, DOM is updated.</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">flushSync</code> can significantly hurt performance. Use sparingly.</p>\n<p><code class=\"language-javascript\">flushSync</code> may force pending Suspense boundaries to show their <code class=\"language-javascript\">fallback</code> state.</p>\n<p><code class=\"language-javascript\">flushSync</code> may also run pending effects and synchronously apply any updates they contain before returning.</p>\n<p><code class=\"language-javascript\">flushSync</code> may also flush updates outside the callback when necessary to flush the updates inside the callback. For example, if there are pending updates from a click, React may flush those before flushing the updates inside the callback.</p>\n</div>\n<h2 id=\"legacy-reference\"><a class=\"anchor\" href=\"/react/react-dom#legacy-reference\"></a>Legacy Reference </h2>\n<h3 id=\"render\"><a class=\"anchor\" href=\"/react/react-dom#render\"></a><code class=\"language-javascript\">render()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">render</code> has been replaced with <code class=\"language-javascript\">createRoot</code> in React 18. See <a href=\"/react/react-dom-client#createroot\">createRoot</a> for more info.</p>\n</div>\n<p>Render a React element into the DOM in the supplied <code class=\"language-javascript\">container</code> and return a <a href=\"/react/more-about-refs\">reference</a> to the component (or returns <code class=\"language-javascript\">null</code> for <a href=\"/react/components-and-props#function-and-class-components\">stateless components</a>).</p>\n<p>Se l\u2019elemento React era stato precedentemente renderizzato nel <code class=\"language-javascript\">container</code>, verr\u00e0 eseguito un aggiornamento dell\u2019elemento e verr\u00e0 modificato solo il DOM necessario in modo da rispecchiare l\u2019ultimo elemento React.</p>\n<p>Se viene fornita la callback opzionale, essa sar\u00e0 eseguita dopo che il componente \u00e8 stato renderizzato o aggiornato.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">render()</code> controlla il contenuto del nodo contenitore. Ogni nodo DOM all\u00e0interno viene sostituito alla prima chiamata. Chiamate successive utilizzano l\u2019algoritmo di diffing di React per aggiornamenti efficienti.</p>\n<p><code class=\"language-javascript\">render()</code> non modifica il nodo contenitore (modifica solo i figli dello stesso). Potrebbe essere possibile inserire un componente in un nodo DOM esistente sovrascrivendo il figlio preesistente.</p>\n<p><code class=\"language-javascript\">render()</code> attualmente ritorna una reference alla root dell\u2019istanza <code class=\"language-javascript\">ReactComponent</code>. Comunque, l\u2019utilizzo di questo valore \u00e8 considerato legacy\ne bisognerebbe evitarlo in quanto versioni future di React potrebbero renderizzare questi componenti in modalit\u00e0 asincrona in alcuni casi. Se hai bisogno di una reference all\u2019istanza root di <code class=\"language-javascript\">ReactComponent</code>, la soluzione preferenziale \u00e8 quella di utilizzare una <a href=\"/react/refs-and-the-dom#callback-refs\">callback ref</a>.</p>\n<p>Utilizzare <code class=\"language-javascript\">render()</code> per reidratare un containere renderizzato dal server \u00e8 deprecato. Usa invece <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">hydrateRoot()</code></a>.</p>\n</div>\n\n<h3 id=\"hydrate\"><a class=\"anchor\" href=\"/react/react-dom#hydrate\"></a><code class=\"language-javascript\">hydrate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">hydrate</code> \u00e8 stato sostituito con <code class=\"language-javascript\">hydrateRoot</code> in React 18. Guarda <a href=\"/react/react-dom-client#hydrateroot\">hydrateRoot</a> per maggiori informazioni.</p>\n</div>\n<p>Come <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">render()</code></a>, ma viene usato per idratare un contenitore il quale HTML \u00e8 stato renderizzato da <a href=\"/react/react-dom-server\"><code class=\"language-javascript\">ReactDOMServer</code></a>. React tenter\u00e0 di collegare eventuali listeners al markup esistente.</p>\n<p>React si aspetta che il contenuto renderizzato sia identico tra server e client. Pu\u00f2 risolvere autonomamente differenze di testo, ma altre discrepanze dovresti trattarle come bug e risolverle. In modalit\u00e0 sviluppo, React avvisa quando ci sono eventuali discrepanze durante l\u2019hydration. Non viene garantita la riparazione automatica nel caso di differenze negli attributi. Questo \u00e8 importante per ragioni di performance perch\u00e9 nella maggior parte delle app, le discrepanze sono rare e quindi validare tutto il markup diventerebbe troppo costoso.</p>\n<p>Se l\u2019attributo o il testo di un singolo elemento \u00e8 inevitabilmente diverso tra server e client (per esempio, un timestamp), potresti silenziare il warning aggiungendo <code class=\"language-javascript\">suppressHydrationWarning={true}</code> all\u2019elemento. Questo funziona solamente ad un livello di profondit\u00e0 ed \u00e8 un modo per aggirare il problema. Non abusarne. A meno che non sia testo, React non tenter\u00e0 di ripararlo, perci\u00f2 rimarr\u00e0 inconsistente fino ad aggiornamenti futuri.</p>\n<p>Se hai bisogno di renderizzare intenzionalmente qualcosa di diverso sul server e sul client, puoi eseguire una renderizzazione in due passaggi. I componenti che renderizzano qualcosa di diverso sul client possono leggere una variabile dello state come <code class=\"language-javascript\">this.state.isClient</code>, che setterai a <code class=\"language-javascript\">true</code> in <code class=\"language-javascript\">componentDidMount()</code>. In questo modo il passo iniziale renderizzer\u00e0 lo stesso contenuto del server, evitando discrepanze, ma il passo successivo avverr\u00e0 in maniera sincrona appena dopo l\u2019hydration. Notare come questo approccio renda i tuoi componenti pi\u00f9 lenti perch\u00e9 devono renderizzare due volte, quindi usalo con cautela.</p>\n<p>Ricorda di essere consapevole dell\u2019esperienza utente su connessioni lente. Il codice JavaScript potrebbe caricarsi significativamente pi\u00f9 tardi rispetto allla renderizzazione iniziale dell\u2019HTML, perci\u00f2 se renderizzi qualcosa di diverso nel passaggio solo client, la transizione pu\u00f2 risultare irritante. Tuttavia, se eseguito bene, pu\u00f2 essere vantaggioso renderizzare uno \u201cscheletro\u201d dell\u2019applicazione sul server, e mostrare solo alcuni dei widget supplementari sul client. Per capire come fare ci\u00f2 senza imbattersi in problemi di discrepanze nel markup, consulta la spiegazione nel precedente paragrafo.</p>\n\n<h3 id=\"unmountcomponentatnode\"><a class=\"anchor\" href=\"/react/react-dom#unmountcomponentatnode\"></a><code class=\"language-javascript\">unmountComponentAtNode()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">unmountComponentAtNode</code> \u00e8 stato sostituito da <code class=\"language-javascript\">root.unmount()</code> in React 18. Guarda <a href=\"/react/react-dom-client#createroot\">createRoot</a> per maggiori informazioni.</p>\n</div>\n<p>Rimuove un componente React montato dal DOM e ripulisce eventuali event handlers e state. Se non esistono componenti montati nel container, chiamare questa funzione non fa nulla. Ritorna <code class=\"language-javascript\">true</code> se un componente \u00e8 stato smontato e <code class=\"language-javascript\">false</code> se non c\u2019era nulla da smontare.</p>\n\n<h3 id=\"finddomnode\"><a class=\"anchor\" href=\"/react/react-dom#finddomnode\"></a><code class=\"language-javascript\">findDOMNode()</code> </h3>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">findDOMNode</code> \u00e8 un modo per accedere al nodo DOM sottostante. Nella maggior parte dei casi, l\u2019uso di questo metodo \u00e8 scoraggiato perch\u00e9 attraversa l\u2019astrazione del componente. <a href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\">E\u2019 stato deprecato in <code class=\"language-javascript\">StrictMode</code>.</a></p>\n</div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findDOMNode</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Se questo componente \u00e8 stato montato nel DOM, ritorna il corrispondente elemento DOM nativo del browser. Questo metodo \u00e8 utile per leggere valori fuori dal DOM, come i valori dei campi di un form o per eseguire misurazioni del DOM. <strong>Nella maggior parte dei casi, puoi collegare un ref al nodo DOM ed evitare l\u2019uso di <code class=\"language-javascript\">findDOMNode</code>.</strong></p>\n<p>Quando un componente renderizza come <code class=\"language-javascript\">null</code> o <code class=\"language-javascript\">false</code>, <code class=\"language-javascript\">findDOMNode</code> ritorna <code class=\"language-javascript\">null</code>. Quando un componente renderizza come stringa, <code class=\"language-javascript\">findDOMNode</code> ritorna un nodo DOM testuale contenente quel valore. A partire da React 16, un componente pu\u00f2 ritornare un frammento con diversi figli, in tal caso <code class=\"language-javascript\">findDOMNode</code> ritorner\u00e0 il nodo DOM corrispondente al primo figlio non vuoto.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">findDOMNode</code> funziona solo su componenti montati (ossia, componenti che sono stati piazzati nel DOM). Se provi a chiamarlo su un componente che non \u00e8 stato ancora montato (come chiamare <code class=\"language-javascript\">findDOMNode()</code> nella <code class=\"language-javascript\">render()</code> di un componente non ancora creato) verr\u00e0 lanciata un\u2019eccezione.</p>\n<p><code class=\"language-javascript\">findDOMNode</code> non pu\u00f2 essere usata su componenti funzione.</p>\n</div>\n</div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-react-dom.md\">Edit this page</a></p></div></article>", "path": "/react/react-dom", "nav": ["/react/react-component", "/react/react-dom-client"]}, {"key": "ReactDOMClient", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>The <code class=\"language-javascript\">react-dom/client</code> package provides client-specific methods used for initializing an app on the client. Most of your components should not need to use this module.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you use ES5 with npm, you can write:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ReactDOM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-dom-client#overview\"></a>Overview </h2>\n<p>The following methods can be used in client environments:</p>\n<ul>\n<li><a href=\"/react/react-dom-client#createroot\"><code class=\"language-javascript\">createRoot()</code></a></li>\n<li><a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">hydrateRoot()</code></a></li>\n</ul>\n<h3 id=\"browser-support\"><a class=\"anchor\" href=\"/react/react-dom-client#browser-support\"></a>Browser Support </h3>\n<p>React supports all modern browsers, although <a href=\"/react/javascript-environment-requirements\">some polyfills are required</a> for older versions.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>We do not support older browsers that don\u2019t support ES5 methods or microtasks such as Internet Explorer. You may find that your apps do work in older browsers if polyfills such as <a class=\"external-link\" href=\"https://github.com/es-shims/es5-shim\">es5-shim and es5-sham</a> are included in the page, but you\u2019re on your own if you choose to take this path.</p>\n</div>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-dom-client#reference\"></a>Reference </h2>\n<h3 id=\"createroot\"><a class=\"anchor\" href=\"/react/react-dom-client#createroot\"></a><code class=\"language-javascript\">createRoot()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Create a React root for the supplied <code class=\"language-javascript\">container</code> and return the root. The root can be used to render a React element into the DOM with <code class=\"language-javascript\">render</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">createRoot</code> accepts two options:</p>\n<ul>\n<li><code class=\"language-javascript\">onRecoverableError</code>: optional callback called when React automatically recovers from errors.</li>\n<li><code class=\"language-javascript\">identifierPrefix</code>: optional prefix React uses for ids generated by <code class=\"language-javascript\">React.useId</code>. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server.</li>\n</ul>\n<p>The root can also be unmounted with <code class=\"language-javascript\">unmount</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">root<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">createRoot()</code> controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when render is called. Later calls use React\u2019s DOM diffing algorithm for efficient updates.</p>\n<p><code class=\"language-javascript\">createRoot()</code> does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.</p>\n<p>Using <code class=\"language-javascript\">createRoot()</code> to hydrate a server-rendered container is not supported. Use <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">hydrateRoot()</code></a> instead.</p>\n</div>\n\n<h3 id=\"hydrateroot\"><a class=\"anchor\" href=\"/react/react-dom-client#hydrateroot\"></a><code class=\"language-javascript\">hydrateRoot()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">hydrateRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Same as <a href=\"/react/react-dom-client#createroot\"><code class=\"language-javascript\">createRoot()</code></a>, but is used to hydrate a container whose HTML contents were rendered by <a href=\"/react/react-dom-server\"><code class=\"language-javascript\">ReactDOMServer</code></a>. React will attempt to attach event listeners to the existing markup.</p>\n<p><code class=\"language-javascript\">hydrateRoot</code> accepts two options:</p>\n<ul>\n<li><code class=\"language-javascript\">onRecoverableError</code>: optional callback called when React automatically recovers from errors.</li>\n<li><code class=\"language-javascript\">identifierPrefix</code>: optional prefix React uses for ids generated by <code class=\"language-javascript\">React.useId</code>. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server.</li>\n</ul>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>React expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-react-dom-client.md\">Edit this page</a></p></div></article>", "path": "/react/react-dom-client", "nav": ["/react/react-dom", "/react/react-dom-server"]}, {"key": "ReactDOMServer", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>L\u2019oggetto <code class=\"language-javascript\">ReactDOMServer</code> ti permette di renderizzare componenti in markup statici. Tipicamente viene usato con un server Node:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// ES modules</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ReactDOMServer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CommonJS</span>\n<span class=\"token keyword\">var</span> ReactDOMServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-dom-server#overview\"></a>Panoramica </h2>\n<p>Questi metodi sono disponibili solo in <strong>ambienti con <a class=\"external-link\" href=\"https://nodejs.dev/learn/nodejs-streams\">Node.js Streams</a>:</strong></p>\n<ul>\n<li><a href=\"/react/react-dom-server#rendertopipeablestream\"><code class=\"language-javascript\">renderToPipeableStream()</code></a></li>\n<li><a href=\"/react/react-dom-server#rendertonodestream\"><code class=\"language-javascript\">renderToNodeStream()</code></a> (Obsoleto)</li>\n<li><a href=\"/react/react-dom-server#rendertostaticnodestream\"><code class=\"language-javascript\">renderToStaticNodeStream()</code></a></li>\n</ul>\n<p>Questi metodi sono disponibili solo in <strong>ambienti con <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">Web Streams</a></strong> (ci\u00f2 include browsers, Deno, ed alcune runtimes moderne edge):</p>\n<ul>\n<li><a href=\"/react/react-dom-server#rendertoreadablestream\"><code class=\"language-javascript\">renderToReadableStream()</code></a></li>\n</ul>\n<p>I metodi seguenti possono essere usati in ambienti che non supportano streams:</p>\n<ul>\n<li><a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">renderToString()</code></a></li>\n<li><a href=\"/react/react-dom-server#rendertostaticmarkup\"><code class=\"language-javascript\">renderToStaticMarkup()</code></a></li>\n</ul>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-dom-server#reference\"></a>Riferimento </h2>\n<h3 id=\"rendertopipeablestream\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertopipeablestream\"></a><code class=\"language-javascript\">renderToPipeableStream()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToPipeableStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderizza un elemento React nel suo HTML iniziale. Ritorna uno stream con un metodo <code class=\"language-javascript\">pipe(res)</code> al pipe con l\u2019output ed <code class=\"language-javascript\">abort()</code> per abortire la richiesta. Supporta completamente Suspense e lo streaming di HTML con blocchi di contenuto \u201critardati\u201d visualizzati in seguito mediante multipli tags <code class=\"language-javascript\">&lt;script&gt;</code>. <a class=\"external-link\" href=\"https://github.com/reactwg/react-18/discussions/37\">Maggiori informazioni</a></p>\n<p>Se chiami <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> su un nodo che ha gi\u00e0 il suo markup generato dal server, React lo preserver\u00e0 ed applicher\u00e0 solo gli event handlers, permettendo di avere una esperienza di caricamento iniziale molto performante.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> didError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token function\">renderToPipeableStream</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">onShellReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// The content above all Suspense boundaries is ready.</span>\n      <span class=\"token comment\">// If something errored before we started streaming, we set the error code appropriately.</span>\n      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> didError <span class=\"token operator\">?</span> <span class=\"token number\">500</span> <span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      stream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onShellError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Something errored before we could complete the shell so we emit an alternative shell.</span>\n      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'&lt;!doctype html&gt;&lt;p&gt;Loading...&lt;/p&gt;&lt;script src=\"clientrender.js\"&gt;&lt;/script&gt;'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onAllReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// If you don't want streaming, use this instead of onShellReady.</span>\n      <span class=\"token comment\">// This will fire after the entire page content is ready.</span>\n      <span class=\"token comment\">// You can use this for crawlers or static generation.</span>\n\n      <span class=\"token comment\">// res.statusCode = didError ? 500 : 200;</span>\n      <span class=\"token comment\">// res.setHeader('Content-type', 'text/html');</span>\n      <span class=\"token comment\">// stream.pipe(res);</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      didError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Guarda la <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/14c2be8dac2d5482fda8a0906a31d239df8551fc/packages/react-dom/src/server/ReactDOMFizzServerNode.js#L36-L46\">lista completa delle opzioni</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Si tratta di una API specifica di Node.js. Ambienti con <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">Web Streams</a>, come Deno e runtimes edge moderne, dovrebbero invece usare <a href=\"/react/react-dom-server#rendertoreadablestream\"><code class=\"language-javascript\">renderToReadableStream</code></a>.</p>\n</div>\n\n<h3 id=\"rendertoreadablestream\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertoreadablestream\"></a><code class=\"language-javascript\">renderToReadableStream()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToReadableStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Effettua lo streaming di un elemento Reacto al suo HTML iniziale. Ritorna una Promise che risolve a <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\">Readable Stream</a>. Supporta pienamente Suspense e lo streaming di HTML. <a class=\"external-link\" href=\"https://github.com/reactwg/react-18/discussions/127\">Maggiori informazioni</a></p>\n<p>Se chiami <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> su un nodo che ha gi\u00e0 il suo markup generato dal server, React lo preserver\u00e0 ed applicher\u00e0 solo gli event handlers, permettendo di avere una esperienza di caricamento iniziale molto performante.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> didError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">renderToReadableStream</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Success</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">,</span>\n      <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        didError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// This is to wait for all Suspense boundaries to be ready. You can uncomment</span>\n  <span class=\"token comment\">// this line if you want to buffer the entire HTML instead of streaming it.</span>\n  <span class=\"token comment\">// You can use this for crawlers or static generation:</span>\n\n  <span class=\"token comment\">// await stream.allReady;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> didError <span class=\"token operator\">?</span> <span class=\"token number\">500</span> <span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'&lt;!doctype html&gt;&lt;p&gt;Loading...&lt;/p&gt;&lt;script src=\"clientrender.js\"&gt;&lt;/script&gt;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Guarda la <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/14c2be8dac2d5482fda8a0906a31d239df8551fc/packages/react-dom/src/server/ReactDOMFizzServerBrowser.js#L27-L35\">lista completa delle opzioni</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Questa API dipende su <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">Web Streams</a>. Per Node.js, utilizza <a href=\"/react/react-dom-server#rendertopipeablestream\"><code class=\"language-javascript\">renderToPipeableStream</code></a>.</p>\n</div>\n\n<h3 id=\"rendertonodestream\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertonodestream\"></a><code class=\"language-javascript\">renderToNodeStream()</code>  (Deprecated) </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToNodeStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderizza un elemento React con il suo HTML iniziale. Ritorna un <a class=\"external-link\" href=\"https://nodejs.org/api/stream.html#stream_readable_streams\">Node.js Readable stream</a> che ritorna a sua bolta una stringa HTML. L\u2019HTML in output da questo stream \u00e8 esattamente uguale a quello che ritorna <a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">ReactDOMServer.renderToString</code></a>. Puoi utilizzare questo metodo per generare HTML nel server ed inviare il markup con la prima richiesta per caricamenti pi\u00f9 veloci e per permettere ai motori di ricerca di indicizzare le tue pagine per SEO.</p>\n<p>Se chiami <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> su un nodo che ha gi\u00e0 il suo markup generato dal server, React lo preserver\u00e0 ed applicher\u00e0 solo gli event handlers, permettendo di avere una esperienza di caricamento iniziale molto performante.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Solo server. Questa API non \u00e8 disponibile nel browser.</p>\n<p>Lo stream ritornato da questo metodo sar\u00e0 uno stream di bytes codificato in utf-8. Se hai bisogno di uno stream in un\u2019altra codifica, da uno sguardo a un progetto tipo <a class=\"external-link\" href=\"https://www.npmjs.com/package/iconv-lite\">iconv-lite</a>, il quale fornisce stream di trasformazione per la transcodifica del testo.</p>\n</div>\n\n<h3 id=\"rendertostaticnodestream\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertostaticnodestream\"></a><code class=\"language-javascript\">renderToStaticNodeStream()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticNodeStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Simile a <a href=\"/react/react-dom-server#rendertonodestream\"><code class=\"language-javascript\">renderToNodeStream</code></a>, tranne per il fatto che non crea attributi DOM aggiuntivi che React usa internamente, come <code class=\"language-javascript\">data-reactroot</code>. Questo metodo \u00e8 utile se vuoi usare React come un semplice generatore di pagine statiche, in quanto sbarazzarsi di attributi aggiuntivi pu\u00f2 farti risparmiare dei bytes.</p>\n<p>Lo HTML prodotto da questo stream \u00e8 esattamente identico a quello che ritornerebbe <a href=\"/react/react-dom-server#rendertostaticmarkup\"><code class=\"language-javascript\">ReactDOMServer.renderToStaticMarkup</code></a>.</p>\n<p>Se intendi utilizzare React su un client rendendo il markup interattivo, non utilizzare questo metodo. Utilizza invece <a href=\"/react/react-dom-server#rendertonodestream\"><code class=\"language-javascript\">renderToNodeStream</code></a> sul server e <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> sul client.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Solo server. Questa API non \u00e8 disponibile nel browser.</p>\n<p>Lo stream ritornato da questo metodo ritorner\u00e0 uno stream di bytes con encoding utf-8. Se hai bisogno di un altro encoding, dai uno sguardo a progetti come <a class=\"external-link\" href=\"https://www.npmjs.com/package/iconv-lite\">iconv-lite</a>, che permettono di transformare streams per il transcoding del testo.</p>\n</div>\n\n<h3 id=\"rendertostring\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertostring\"></a><code class=\"language-javascript\">renderToString()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Render a React element to its initial HTML. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.</p>\n<p>If you call <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>This API has limited Suspense support and does not support streaming.</p>\n<p>On the server, it is recommended to use either <a href=\"/react/react-dom-server#rendertopipeablestream\"><code class=\"language-javascript\">renderToPipeableStream</code></a> (for Node.js) or <a href=\"/react/react-dom-server#rendertoreadablestream\"><code class=\"language-javascript\">renderToReadableStream</code></a> (for Web Streams) instead.</p>\n</div>\n\n<h3 id=\"rendertostaticmarkup\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertostaticmarkup\"></a><code class=\"language-javascript\">renderToStaticMarkup()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticMarkup</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Similar to <a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">renderToString</code></a>, except this doesn\u2019t create extra DOM attributes that React uses internally, such as <code class=\"language-javascript\">data-reactroot</code>. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.</p>\n<p>If you plan to use React on the client to make the markup interactive, do not use this method. Instead, use <a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">renderToString</code></a> on the server and <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> on the client.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-react-dom-server.md\">Edit this page</a></p></div></article>", "path": "/react/react-dom-server", "nav": ["/react/react-dom-client", "/react/dom-elements"]}, {"key": "Elementi DOM", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React implementa un sistema DOM indipendente dal browser per massimizzare le prestazioni e la compatibilit\u00e0 con i vari browsers. Abbiamo colto l\u2019occasione per smussare gli angoli di alcune implementazioni nel DOM del browser.</p>\n<p>In React, tutte le propriet\u00e0 DOM e gli attributi (inclusi i gestori degli eventi) dovrebbero essere <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Notazione_a_cammello\"><em>camelCased</em></a>. Ad esempio, l\u2019attributo HTML <code class=\"language-javascript\">tabindex</code> corrisponde all\u2019attributo <code class=\"language-javascript\">tabIndex</code> in React. Fanno eccezione gli attributi <code class=\"language-javascript\">aria-*</code> e <code class=\"language-javascript\">data-*</code>, i quali dovrebbero essere in minuscolo. Puoi mantenere <code class=\"language-javascript\">aria-label</code> come <code class=\"language-javascript\">aria-label</code> per esempio.</p>\n<h2 id=\"differences-in-attributes\"><a class=\"anchor\" href=\"/react/dom-elements#differences-in-attributes\"></a>Differenze Negli Attributi </h2>\n<p>Ci sono alcuni attributi che funzionano in modo diverso tra React ed HTML:</p>\n<h3 id=\"checked\"><a class=\"anchor\" href=\"/react/dom-elements#checked\"></a>checked </h3>\n<p>L\u2019attributo <code class=\"language-javascript\">checked</code> \u00e8 supportato dai componenti <code class=\"language-javascript\">&lt;input&gt;</code> di tipo <code class=\"language-javascript\">checkbox</code> o <code class=\"language-javascript\">radio</code>. Puoi usarlo per impostare il fatto che il componente sia appunto <em>checked</em> ovvero selezionato/attivato. Ci torna utile nella costruzione di componenti controllati. <code class=\"language-javascript\">defaultChecked</code> \u00e8 l\u2019equivalente non controllato, il quale imposta l\u2019attributo <code class=\"language-javascript\">checked</code> del componente la prima volta che esso viene montato.</p>\n<h3 id=\"classname\"><a class=\"anchor\" href=\"/react/dom-elements#classname\"></a>className </h3>\n<p>Per specificate una classe CSS, utilizza l\u2019attributo <code class=\"language-javascript\">className</code>. Si applica a tutti i normali elementi DOM ed SVG come <code class=\"language-javascript\">&lt;div&gt;</code>, <code class=\"language-javascript\">&lt;a&gt;</code> ed altri.</p>\n<p>Se stai utilizzando React con i <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">Web Components</a> (fatto poco comune), usa invece l\u2019attributo <code class=\"language-javascript\">class</code>.</p>\n<h3 id=\"dangerouslysetinnerhtml\"><a class=\"anchor\" href=\"/react/dom-elements#dangerouslysetinnerhtml\"></a>dangerouslySetInnerHTML </h3>\n<p><code class=\"language-javascript\">dangerouslySetInnerHTML</code> \u00e8 la controparte React all\u2019uso di <code class=\"language-javascript\">innerHTML</code> nel browser DOM. In generale, impostare HTML dal codice \u00e8 rischioso in quanto pu\u00f2 esporre facilmente i tuoi utenti ad attacchi <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting (XSS)</a>. Puoi impostare HTML direttamente da React, ma devi farlo utilizzando <code class=\"language-javascript\">dangerouslySetInnerHTML</code> e passando un oggetto avente chiave <code class=\"language-javascript\">__html</code> per ricordarti del fatto che \u00e8 pericoloso: Ad esempio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">creaCodiceHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">__html</span><span class=\"token operator\">:</span> <span class=\"token string\">'Primo &amp;middot; Secondo'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MioComponente</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">creaCodiceHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"htmlfor\"><a class=\"anchor\" href=\"/react/dom-elements#htmlfor\"></a>htmlFor </h3>\n<p>Dato che <code class=\"language-javascript\">for</code> \u00e8 una parola riservata in JavaScript, gli elementi React utilizzano <code class=\"language-javascript\">htmlFor</code>.</p>\n<h3 id=\"onchange\"><a class=\"anchor\" href=\"/react/dom-elements#onchange\"></a>onChange </h3>\n<p>L\u2019evento <code class=\"language-javascript\">onChange</code> si comporta cos\u00ec come di consueto: quando un campo in un form cambia, l\u2019evento viene lanciato. Non utilizziamo intenzionalmente il comportamento esistente nel browser perch\u00e9 il nome <code class=\"language-javascript\">onChange</code> non descrive molto bene il suo comportamento e React si basa su questo evento per gestire gli input dell\u2019utente in tempo reale.</p>\n<h3 id=\"selected\"><a class=\"anchor\" href=\"/react/dom-elements#selected\"></a>selected </h3>\n<p>Se selezionare (marcando l\u2019attributo <code class=\"language-javascript\">selected</code>) un <code class=\"language-javascript\">&lt;option&gt;</code>, utilizza il valore di quella option nel <code class=\"language-javascript\">value</code> della sua <code class=\"language-javascript\">&lt;select&gt;</code>.\nDai uno sguardo ad <a href=\"/react/forms#the-select-tag\">\u201cil Tag select\u201d</a> per maggiori informazioni.</p>\n<h3 id=\"style\"><a class=\"anchor\" href=\"/react/dom-elements#style\"></a>style </h3>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Alcuni esempi nella documentazione fanno uso di <code class=\"language-javascript\">style</code> per comodit\u00e0, tuttavia <strong>l\u2019utilizzo dell\u2019attributo <code class=\"language-javascript\">style</code> come metodo principale per la personalizzazione degli stili degli elementi non \u00e8 generalmente raccomandato.</strong> Nella maggioranza dei casi, <a href=\"/react/dom-elements#classname\"><code class=\"language-javascript\">className</code></a> dovrebbe essere usato per far riferimento a classi definite in fogli di stile CSS esterni. <code class=\"language-javascript\">style</code> viene usato maggiormente nelle applicazioni React per aggiungere stili calcolati dinamicamente durante la renderizzazione. Vedi anche <a href=\"/react/faq-styling\">FAQ: Stili e CSS</a>.</p>\n</div>\n<p>L\u2019attributo <code class=\"language-javascript\">style</code> accetta un oggetto JavaScript con propriet\u00e0 <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Notazione_a_cammello\"><em>camelCased</em></a> invece di una stringa CSS. Proprio come la propriet\u00e0 <code class=\"language-javascript\">style</code> del DOM JavaScript, \u00e8 pi\u00f9 efficiente e previene vulnerabilit\u00e0 XSS. Ad esempio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> divStile <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">backgroundImage</span><span class=\"token operator\">:</span> <span class=\"token string\">'url('</span> <span class=\"token operator\">+</span> imgUrl <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ComponenteCiaoMondo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>divStile<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ciao Mondo!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nota come gli stili non vengono prefissati automaticamente. Per supportare browser pi\u00f9 vecchi, dovrai aggiungere le rispettive propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> divStile <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">WebkitTransition</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// nota la lettera maiuscola 'W'</span>\n  <span class=\"token literal-property property\">msTransition</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span> <span class=\"token comment\">// 'ms' \u00e8 l'unico prefisso vendor (terza parte) in minuscolo</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ComponenteConTransizione</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>divStile<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Questo dovrebbe funzionare in tutti i browser</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Le chiavi di stile sono in notazione camel case in modo da essere consistenti con l\u2019accesso alle propriet\u00e0 dei nodi DOM da JavaScript (ad esempio <code class=\"language-javascript\">node.style.backgroundImage</code>). I prefissi vendor (terze parti) <a class=\"external-link\" href=\"https://www.andismith.com/blogs/2012/02/modernizr-prefixed/\">diversi da <code class=\"language-javascript\">ms</code></a> dovrebbero iniziare con la lettera maiuscola. Ecco perch\u00e9 <code class=\"language-javascript\">WebkitTransition</code> inizia con \u201cW\u201d.</p>\n<p>React aggiunge automaticamente un suffisso \u201cpx\u201d ad alcune propriet\u00e0 di stile in formato numerico. Se vorrai utilizzare unit\u00e0 diverse al posto di \u201cpx\u201d, dovrai specificare il valore come stringa insieme all\u2019unit\u00e0 desiderata. Per esempio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Risultato: '10px'</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Ciao Mondo!\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// Risultato: '10%'</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'10%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Ciao Mondo!\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Non tutte le propriet\u00e0 di stile vengono convertite in stringhe. Alcune di esse restano senza unit\u00e0 (ad esempio <code class=\"language-javascript\">zoom</code>, <code class=\"language-javascript\">order</code>, <code class=\"language-javascript\">flex</code>). Una lista completa delle propriet\u00e0 senza unit\u00e0 \u00e8 disponibile <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/4131af3e4bf52f3a003537ec95a1655147c81270/src/renderers/dom/shared/CSSProperty.js#L15-L59\">qui</a>.</p>\n<h3 id=\"suppresscontenteditablewarning\"><a class=\"anchor\" href=\"/react/dom-elements#suppresscontenteditablewarning\"></a>suppressContentEditableWarning </h3>\n<p>Normalmente, si riceve un messaggio di avviso quando un elemento con figli viene anche marcato come <code class=\"language-javascript\">contentEditable</code> in quanto non funziona. Questo attributo sopprime tale messaggio di avviso. Non utilizzarlo a meno che tu stia costruendo una libreria come <a class=\"external-link\" href=\"https://facebook.github.io/draft-js/\">Draft.js</a> che gestisce i <code class=\"language-javascript\">contentEditable</code> manualmente.</p>\n<h3 id=\"suppresshydrationwarning\"><a class=\"anchor\" href=\"/react/dom-elements#suppresshydrationwarning\"></a>suppressHydrationWarning </h3>\n<p>Se utilizzi la renderizzazione lato server di React, normalmente si ha un avviso quando il server ed il client renderizzano contenuti differenti. Comunque, in alcuni rari casi, \u00e8 molto difficile se non impossibile garantire una totale corrispondenza tra i contenuti. Ad esempio, i <a class=\"external-link\" href=\"https://it.wikipedia.org/wiki/Marca_temporale\">timestamps</a> saranno certamente differenti tra server e client.</p>\n<p>Se imposti <code class=\"language-javascript\">suppressHydrationWarning</code> a <code class=\"language-javascript\">true</code>, React non avviser\u00e0 pi\u00f9 in caso di differenze negli attributi e nel contenuto dell\u2019elemento. Questa tecnica funziona solamente per il primo livello di profondit\u00e0 ed \u00e8 un modo per aggirare il problema. Non abusarne. Puoi trovare maggiori dettagli riguardo l\u2019<em>hydration</em> nella <a href=\"/react/react-dom-client#hydrateroot\">documentazione di <code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a>.</p>\n<h3 id=\"value\"><a class=\"anchor\" href=\"/react/dom-elements#value\"></a>value </h3>\n<p>L\u2019attributo <code class=\"language-javascript\">value</code> \u00e8 supportato dai componenti <code class=\"language-javascript\">&lt;input&gt;</code>, <code class=\"language-javascript\">&lt;select&gt;</code> e <code class=\"language-javascript\">&lt;textarea&gt;</code>. Puoi utilizzarlo per impostare il valore dei componenti. Torna utile nella costruzione di componenti controllati. <code class=\"language-javascript\">defaultValue</code> \u00e8 la controparte non controllata, la quale imposta il valore del componente quando viene montato per la prima volta.</p>\n<h2 id=\"all-supported-html-attributes\"><a class=\"anchor\" href=\"/react/dom-elements#all-supported-html-attributes\"></a>Tutti gli Attributi HTML Supportati </h2>\n<p>Fino a React 16, tutti gli attributi DOM standard <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2017/09/08/dom-attributes-in-react-16.html\">o custom</a> sono pienamente supportati.</p>\n<p>React ha sempre offerto delle API JavaScript-centriche per il DOM. Dato che i componenti React utilizzano spesso sia props custom che props relative al DOM, React usa la notazione camel case  (\u201cnotazione a cammello\u201d) come convenzione cos\u00ec come avviene con le API del DOM:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>      <span class=\"token comment\">// Come avviene nelle API del DOM node.tabIndex</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Button<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token comment\">// Come avviene nelle API del DOM node.className</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">readOnly</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>  <span class=\"token comment\">// Come avviene nelle API del DOM node.readOnly</span></code></pre></div>\n<p>Queste props funzionano in modo simile ai corrispondenti attributi HTML, fatta eccezione dei casi speciali documentati sopra.</p>\n<p>Di seguito una lista di alcuni degli attributi DOM supportati da React:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">accept acceptCharset accessKey action allowFullScreen alt async autoComplete\nautoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked\ncite classID className colSpan cols content contentEditable contextMenu controls\ncontrolsList coords crossOrigin data dateTime default defer dir disabled\ndownload draggable encType form formAction formEncType formMethod formNoValidate\nformTarget frameBorder headers height hidden high href hrefLang htmlFor\nhttpEquiv icon id inputMode integrity is keyParams keyType kind label lang list\nloop low manifest marginHeight marginWidth max maxLength media mediaGroup method\nmin minLength multiple muted name noValidate nonce open optimum pattern\nplaceholder poster preload profile radioGroup readOnly rel required reversed\nrole rowSpan rows sandbox scope scoped scrolling seamless selected shape size\nsizes span spellCheck src srcDoc srcLang srcSet start step style summary\ntabIndex target title type useMap value width wmode wrap</code></pre></div>\n<p>Allo stesso modo, tutti questi attributi SVG sono pienamente supportati:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">accentHeight accumulate additive alignmentBaseline allowReorder alphabetic\namplitude arabicForm ascent attributeName attributeType autoReverse azimuth\nbaseFrequency baseProfile baselineShift bbox begin bias by calcMode capHeight\nclip clipPath clipPathUnits clipRule colorInterpolation\ncolorInterpolationFilters colorProfile colorRendering contentScriptType\ncontentStyleType cursor cx cy d decelerate descent diffuseConstant direction\ndisplay divisor dominantBaseline dur dx dy edgeMode elevation enableBackground\nend exponent externalResourcesRequired fill fillOpacity fillRule filter\nfilterRes filterUnits floodColor floodOpacity focusable fontFamily fontSize\nfontSizeAdjust fontStretch fontStyle fontVariant fontWeight format from fx fy\ng1 g2 glyphName glyphOrientationHorizontal glyphOrientationVertical glyphRef\ngradientTransform gradientUnits hanging horizAdvX horizOriginX ideographic\nimageRendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength\nkerning keyPoints keySplines keyTimes lengthAdjust letterSpacing lightingColor\nlimitingConeAngle local markerEnd markerHeight markerMid markerStart\nmarkerUnits markerWidth mask maskContentUnits maskUnits mathematical mode\nnumOctaves offset opacity operator order orient orientation origin overflow\noverlinePosition overlineThickness paintOrder panose1 pathLength\npatternContentUnits patternTransform patternUnits pointerEvents points\npointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits\nr radius refX refY renderingIntent repeatCount repeatDur requiredExtensions\nrequiredFeatures restart result rotate rx ry scale seed shapeRendering slope\nspacing specularConstant specularExponent speed spreadMethod startOffset\nstdDeviation stemh stemv stitchTiles stopColor stopOpacity\nstrikethroughPosition strikethroughThickness string stroke strokeDasharray\nstrokeDashoffset strokeLinecap strokeLinejoin strokeMiterlimit strokeOpacity\nstrokeWidth surfaceScale systemLanguage tableValues targetX targetY textAnchor\ntextDecoration textLength textRendering to transform u1 u2 underlinePosition\nunderlineThickness unicode unicodeBidi unicodeRange unitsPerEm vAlphabetic\nvHanging vIdeographic vMathematical values vectorEffect version vertAdvY\nvertOriginX vertOriginY viewBox viewTarget visibility widths wordSpacing\nwritingMode x x1 x2 xChannelSelector xHeight xlinkActuate xlinkArcrole\nxlinkHref xlinkRole xlinkShow xlinkTitle xlinkType xmlns xmlnsXlink xmlBase\nxmlLang xmlSpace y y1 y2 yChannelSelector z zoomAndPan</code></pre></div>\n<p>Puoi anche utilizzare attributi custom a condizione che siano completamente in minuscolo.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-dom-elements.md\">Edit this page</a></p></div></article>", "path": "/react/dom-elements", "nav": ["/react/react-dom-server", "/react/events"]}, {"key": "SyntheticEvent", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Questa guida di riferimento documenta il contenitore <code class=\"language-javascript\">SyntheticEvent</code> che fa parte del sistema di eventi di React. Consulta la guida <a href=\"/react/handling-events\">Gestione degli Eventi</a> per saperne di pi\u00f9.</p>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/events#overview\"></a>Panoramica </h2>\n<p>I tuoi event handlers riceveranno istanze di <code class=\"language-javascript\">SyntheticEvent</code>, un contenitore cross-browser intorno all\u2019evento nativo del browser.  Hanno entrambi la stessa interfaccia, compresi <code class=\"language-javascript\">stopPropagation()</code> e <code class=\"language-javascript\">preventDefault()</code>, l\u2019eccezione sta nel fatto che gli eventi funzionano in modo identico in tutti i browser.</p>\n<p>Se constati di avere bisogno dell\u2019evento del browser sottostante per qualche motivo, puoi ottenerlo semplicemente usando l\u2019attributo <code class=\"language-javascript\">nativeEvent</code>. Gli eventi sintetici hanno una forma differente rispetto agli eventi nativi del browser. Per esempio: in <code class=\"language-javascript\">onMouseLeave</code> <code class=\"language-javascript\">event.nativeEvent</code> punta all\u2019evento <code class=\"language-javascript\">mouseout</code>. La mappatura specifica non fa parte delle API pubbliche e per questo \u00e9 soggetta a cambiamenti inaspettati. Ogni <code class=\"language-javascript\">SyntheticEvent</code> oggetto ha i seguenti attributi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean bubbles\nboolean cancelable\nDOMEventTarget currentTarget\nboolean defaultPrevented\nnumber eventPhase\nboolean isTrusted\nDOMEvent nativeEvent\n<span class=\"token keyword\">void</span> <span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nboolean <span class=\"token function\">isDefaultPrevented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nboolean <span class=\"token function\">isPropagationStopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">persist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nDOMEventTarget target\nnumber timeStamp\nstring type</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>A partire da v17, <code class=\"language-javascript\">e.persist()</code> non fa pi\u00f9 nulla in quanto <code class=\"language-javascript\">SyntheticEvent</code> non \u00e8 pi\u00f9 <a href=\"/react/legacy-event-pooling\">pooled</a>.</p>\n</div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>A partire da v0.14, ritornare <code class=\"language-javascript\">false</code> da un event handler non fermer\u00e0 pi\u00f9 la propagazione dell\u2019evento. In modo pi\u00f9 appropriato, \u00e8 invece necessario invocare <code class=\"language-javascript\">e.stopPropagation()</code> o <code class=\"language-javascript\">e.preventDefault()</code>.</p>\n</div>\n<h2 id=\"supported-events\"><a class=\"anchor\" href=\"/react/events#supported-events\"></a>Eventi Supportati </h2>\n<p>React normalizza gli eventi per far s\u00ec che abbiano propriet\u00e0 coerenti in tutti browser.</p>\n<p>Gli event handlers di seguito vengono scatenati da un evento nella fase di <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Learn/JavaScript/Building_blocks/Eventi#Event_bubbling_and_capture\">bubbling</a>. Per registrare un event handler per la fase di <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Learn/JavaScript/Building_blocks/Eventi#Event_bubbling_and_capture\">capture</a>, aggiungi <code class=\"language-javascript\">Capture</code> al nome dell\u2019evento; per esempio, invece di usare <code class=\"language-javascript\">onClick</code>, useresti <code class=\"language-javascript\">onClickCapture</code> per gestire l\u2019evento click nella fase di <code class=\"language-javascript\">capture</code>.</p>\n<ul>\n<li><a href=\"/react/events#clipboard-events\">Eventi degli Appunti</a></li>\n<li><a href=\"/react/events#composition-events\">Eventi della Composizione</a></li>\n<li><a href=\"/react/events#keyboard-events\">Eventi della Tastiera</a></li>\n<li><a href=\"/react/events#focus-events\">Eventi di Focus</a></li>\n<li><a href=\"/react/events#form-events\">Eventi di Form</a></li>\n<li><a href=\"/react/events#generic-events\">Eventi Generici</a></li>\n<li><a href=\"/react/events#mouse-events\">Eventi del Mouse</a></li>\n<li><a href=\"/react/events#pointer-events\">Eventi del Puntatore</a></li>\n<li><a href=\"/react/events#selection-events\">Eventi della Selezione</a></li>\n<li><a href=\"/react/events#touch-events\">Eventi Tattili</a></li>\n<li><a href=\"/react/events#ui-events\">Eventi dell\u2019Interfaccia Utente</a></li>\n<li><a href=\"/react/events#wheel-events\">Eventi della Rotella del Mouse</a></li>\n<li><a href=\"/react/events#media-events\">Eventi dei Media</a></li>\n<li><a href=\"/react/events#image-events\">Eventi dell\u2019Immagine</a></li>\n<li><a href=\"/react/events#animation-events\">Eventi delle Animazioni</a></li>\n<li><a href=\"/react/events#transition-events\">Eventi della Transizione</a></li>\n<li><a href=\"/react/events#other-events\">Altri Eventi</a></li>\n</ul>\n\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/events#reference\"></a>Riferimento </h2>\n<h3 id=\"clipboard-events\"><a class=\"anchor\" href=\"/react/events#clipboard-events\"></a>Eventi degli Appunti </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onCopy onCut onPaste</code></pre></div>\n<p>Propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">DOMDataTransfer clipboardData</code></pre></div>\n\n<h3 id=\"composition-events\"><a class=\"anchor\" href=\"/react/events#composition-events\"></a>Eventi della Composizione </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onCompositionEnd onCompositionStart onCompositionUpdate</code></pre></div>\n<p>Propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">string data</code></pre></div>\n\n<h3 id=\"keyboard-events\"><a class=\"anchor\" href=\"/react/events#keyboard-events\"></a>Eventi della Tastiera </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onKeyDown onKeyPress onKeyUp</code></pre></div>\n<p>Propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean altKey\nnumber charCode\nboolean ctrlKey\nboolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\nstring key\nnumber keyCode\nstring locale\nnumber location\nboolean metaKey\nboolean repeat\nboolean shiftKey\nnumber which</code></pre></div>\n<p>La propriet\u00e0 <code class=\"language-javascript\">key</code> pu\u00f2 accettare uno qualsiasi dei valori documentati nelle <a class=\"external-link\" href=\"https://www.w3.org/TR/uievents-key/#named-key-attribute-values\">specifiche degli Eventi del DOM Livello 3</a>.</p>\n\n<h3 id=\"focus-events\"><a class=\"anchor\" href=\"/react/events#focus-events\"></a>Eventi di Focus </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onFocus onBlur</code></pre></div>\n<p>Questi eventi di focus funzionano con tutti elementi nel React DOM, non solo elementi form.</p>\n<p>Propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">DOMEventTarget relatedTarget</code></pre></div>\n<h4 id=\"onfocus\"><a class=\"anchor\" href=\"/react/events#onfocus\"></a>onFocus </h4>\n<p>The <code class=\"language-javascript\">onFocus</code> event is called when the element (or some element inside of it) receives focus. For example, it\u2019s called when the user clicks on a text input.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">onFocus</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Focused on input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onFocus is triggered when you click this input.<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"onblur\"><a class=\"anchor\" href=\"/react/events#onblur\"></a>onBlur </h4>\n<p>The <code class=\"language-javascript\">onBlur</code> event handler is called when focus has left the element (or left some element inside of it). For example, it\u2019s called when the user clicks outside of a focused text input.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">onBlur</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Triggered because this input lost focus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onBlur is triggered when you click this input and then you click outside of it.<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"detecting-focus-entering-and-leaving\"><a class=\"anchor\" href=\"/react/events#detecting-focus-entering-and-leaving\"></a>Detecting Focus Entering and Leaving </h4>\n<p>You can use the <code class=\"language-javascript\">currentTarget</code> and <code class=\"language-javascript\">relatedTarget</code> to differentiate if the focusing or blurring events originated from <em>outside</em> of the parent element. Here is a demo you can copy and paste that shows how to detect focusing a child, focusing the element itself, and focus entering or leaving the whole subtree.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n      <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onFocus</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focused self'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focused child'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>relatedTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Not triggered when swapping focus between children</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus entered self'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onBlur</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unfocused self'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unfocused child'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>relatedTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Not triggered when swapping focus between children</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus left self'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<h3 id=\"form-events\"><a class=\"anchor\" href=\"/react/events#form-events\"></a>Eventi di Form </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onChange onInput onInvalid onReset onSubmit </code></pre></div>\n<p>Per maggiori informazioni sull\u2019evento onChange, vedi <a href=\"/react/forms\">Forms</a>.</p>\n\n<h3 id=\"generic-events\"><a class=\"anchor\" href=\"/react/events#generic-events\"></a>Generic Events </h3>\n<p>Event names:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onError onLoad</code></pre></div>\n\n<h3 id=\"mouse-events\"><a class=\"anchor\" href=\"/react/events#mouse-events\"></a>Eventi del Mouse </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit\nonDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave\nonMouseMove onMouseOut onMouseOver onMouseUp</code></pre></div>\n<p>Gli eventi <code class=\"language-javascript\">onMouseEnter</code> e <code class=\"language-javascript\">onMouseLeave</code> vengono propagati dall\u2019elemento che viene lasciato a quello che viene acceduto invece di seguire il normale <em>bubbling</em> e non hanno una fase di <em>capture</em>. (Clicca <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Learn/JavaScript/Building_blocks/Eventi#Event_bubbling_and_capture\">qui</a> per maggiori informazioni su <em>bubbling</em> e <em>capture</em>.</p>\n<p>Propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean altKey\nnumber button\nnumber buttons\nnumber clientX\nnumber clientY\nboolean ctrlKey\nboolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\nboolean metaKey\nnumber pageX\nnumber pageY\nDOMEventTarget relatedTarget\nnumber screenX\nnumber screenY\nboolean shiftKey</code></pre></div>\n\n<h3 id=\"pointer-events\"><a class=\"anchor\" href=\"/react/events#pointer-events\"></a>Eventi del Puntatore </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onPointerDown onPointerMove onPointerUp onPointerCancel onGotPointerCapture\nonLostPointerCapture onPointerEnter onPointerLeave onPointerOver onPointerOut</code></pre></div>\n<p>Gli eventi <code class=\"language-javascript\">onPointerEnter</code> e <code class=\"language-javascript\">onPointerLeave</code> vengono propagati dall\u2019elemento che viene lasciato a quello che viene acceduto invece di seguire il normale <em>bubbling</em> e non hanno una fase di <em>capture</em>. (Clicca <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Learn/JavaScript/Building_blocks/Eventi#Event_bubbling_and_capture\">qui</a> per maggiori informazioni su <em>bubbling</em> e <em>capture</em>.</p>\n<p>Propriet\u00e0:</p>\n<p>Come definito nelle <a class=\"external-link\" href=\"https://www.w3.org/TR/pointerevents/\">specifiche W3</a>, gli eventi del cursore estendono gli <a href=\"/react/events#mouse-events\">Eventi del Mouse</a> con le seguente propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">number pointerId\nnumber width\nnumber height\nnumber pressure\nnumber tangentialPressure\nnumber tiltX\nnumber tiltY\nnumber twist\nstring pointerType\nboolean isPrimary</code></pre></div>\n<p>Una nota sul supporto cross-browser:</p>\n<p>Gli eventi del puntatore non sono ancora supportati in tutti i browser (al momento della scrittura di questo articolo), tra quelli supportati abbiamo: Chrome, Firefox, Edge, e Internet Explorer). React deliberatamente non offre supporto agli altri browsers mediante polyfill in quanto ci\u00f2 aumenterebbe in modo considerevole la dimensione del pacchetto <code class=\"language-javascript\">react-dom</code>.</p>\n<p>Se la tua applicazione richiede l\u2019utilizzo degli eventi del puntatore, raccomandiamo l\u2019uso di una polyfill specifica di terze parti.</p>\n\n<h3 id=\"selection-events\"><a class=\"anchor\" href=\"/react/events#selection-events\"></a>Eventi della Selezione </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onSelect</code></pre></div>\n\n<h3 id=\"touch-events\"><a class=\"anchor\" href=\"/react/events#touch-events\"></a>Eventi Tattili </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onTouchCancel onTouchEnd onTouchMove onTouchStart</code></pre></div>\n<p>Propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean altKey\nDOMTouchList changedTouches\nboolean ctrlKey\nboolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\nboolean metaKey\nboolean shiftKey\nDOMTouchList targetTouches\nDOMTouchList touches</code></pre></div>\n\n<h3 id=\"ui-events\"><a class=\"anchor\" href=\"/react/events#ui-events\"></a>Eventi dell\u2019Interfaccia Utente </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onScroll</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>A partire da React 17, l\u2019evento <code class=\"language-javascript\">onScroll</code> <strong>non fa bubble</strong> in React. Si comporta quindi come il browser e previene la confusione che si ha quando un elemendo scrollabile nidificato lancia eventi su genitori distanti nel DOM.</p>\n</div>\n<p>Propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">number detail\nDOMAbstractView view</code></pre></div>\n\n<h3 id=\"wheel-events\"><a class=\"anchor\" href=\"/react/events#wheel-events\"></a>Eventi della Rotella del Mouse </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onWheel</code></pre></div>\n<p>Propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">number deltaMode\nnumber deltaX\nnumber deltaY\nnumber deltaZ</code></pre></div>\n\n<h3 id=\"media-events\"><a class=\"anchor\" href=\"/react/events#media-events\"></a>Eventi dei Media </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted\nonEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay\nonPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend\nonTimeUpdate onVolumeChange onWaiting</code></pre></div>\n\n<h3 id=\"image-events\"><a class=\"anchor\" href=\"/react/events#image-events\"></a>Eventi della Immagine </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onLoad onError</code></pre></div>\n\n<h3 id=\"animation-events\"><a class=\"anchor\" href=\"/react/events#animation-events\"></a>Eventi delle Animazioni </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onAnimationStart onAnimationEnd onAnimationIteration</code></pre></div>\n<p>Propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">string animationName\nstring pseudoElement\nfloat elapsedTime</code></pre></div>\n\n<h3 id=\"transition-events\"><a class=\"anchor\" href=\"/react/events#transition-events\"></a>Eventi della Transizione </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onTransitionEnd</code></pre></div>\n<p>Propriet\u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">string propertyName\nstring pseudoElement\nfloat elapsedTime</code></pre></div>\n\n<h3 id=\"other-events\"><a class=\"anchor\" href=\"/react/events#other-events\"></a>Altri Eventi </h3>\n<p>Nomi degli eventi:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onToggle</code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-events.md\">Edit this page</a></p></div></article>", "path": "/react/events", "nav": ["/react/dom-elements", "/react/test-utils"]}, {"key": "Test Utilities", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><strong>Importazione</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> ReactTestUtils <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">var</span> ReactTestUtils <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES5 con npm</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/test-utils#overview\"></a>Panoramica </h2>\n<p><code class=\"language-javascript\">ReactTestUtils</code> rende semplice testare i componenti React all\u2019interno del framework di test che preferisci. In Facebook usiamo <a class=\"external-link\" href=\"https://facebook.github.io/jest/\">Jest</a> per scrivere test in JavaScript. Impara come utilizzare Jest tramite il sito ufficiale <a class=\"external-link\" href=\"https://jestjs.io/docs/tutorial-react\">React Tutorial</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Suggeriamo l\u2019utilizzo di <a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a>, che \u00e8 una libreria concepita per abilitare e favorire la scrittura di test che simulano il reale utilizzo dei componenti.</p>\n<p>Per le versioni di React &lt;= 16, la libreria <a class=\"external-link\" href=\"https://airbnb.io/enzyme/\">Enzyme</a> semplifica le operazioni di verifica, manipolazione ed analisi dell\u2019output dei tuoi componenti.</p>\n</div>\n<ul>\n<li><a href=\"/react/test-utils#act\"><code class=\"language-javascript\">act()</code></a></li>\n<li><a href=\"/react/test-utils#mockcomponent\"><code class=\"language-javascript\">mockComponent()</code></a></li>\n<li><a href=\"/react/test-utils#iselement\"><code class=\"language-javascript\">isElement()</code></a></li>\n<li><a href=\"/react/test-utils#iselementoftype\"><code class=\"language-javascript\">isElementOfType()</code></a></li>\n<li><a href=\"/react/test-utils#isdomcomponent\"><code class=\"language-javascript\">isDOMComponent()</code></a></li>\n<li><a href=\"/react/test-utils#iscompositecomponent\"><code class=\"language-javascript\">isCompositeComponent()</code></a></li>\n<li><a href=\"/react/test-utils#iscompositecomponentwithtype\"><code class=\"language-javascript\">isCompositeComponentWithType()</code></a></li>\n<li><a href=\"/react/test-utils#findallinrenderedtree\"><code class=\"language-javascript\">findAllInRenderedTree()</code></a></li>\n<li><a href=\"/react/test-utils#scryrendereddomcomponentswithclass\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithClass()</code></a></li>\n<li><a href=\"/react/test-utils#findrendereddomcomponentwithclass\"><code class=\"language-javascript\">findRenderedDOMComponentWithClass()</code></a></li>\n<li><a href=\"/react/test-utils#scryrendereddomcomponentswithtag\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithTag()</code></a></li>\n<li><a href=\"/react/test-utils#findrendereddomcomponentwithtag\"><code class=\"language-javascript\">findRenderedDOMComponentWithTag()</code></a></li>\n<li><a href=\"/react/test-utils#scryrenderedcomponentswithtype\"><code class=\"language-javascript\">scryRenderedComponentsWithType()</code></a></li>\n<li><a href=\"/react/test-utils#findrenderedcomponentwithtype\"><code class=\"language-javascript\">findRenderedComponentWithType()</code></a></li>\n<li><a href=\"/react/test-utils#renderintodocument\"><code class=\"language-javascript\">renderIntoDocument()</code></a></li>\n<li><a href=\"/react/test-utils#simulate\"><code class=\"language-javascript\">Simulate</code></a></li>\n</ul>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/test-utils#reference\"></a>Riferimento </h2>\n<h3 id=\"act\"><a class=\"anchor\" href=\"/react/test-utils#act\"></a><code class=\"language-javascript\">act()</code> </h3>\n<p>Per preparare un componente per le verifiche, racchiudi il codice che lo renderizza e lo aggiorna all\u2019interno di una chiamata <code class=\"language-javascript\">act()</code>. Questo permette di simulare un comportamento che si avvicina a quello reale di React.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Se utilizzi <code class=\"language-javascript\">react-test-renderer</code>, hai a disposizione un modulo <code class=\"language-javascript\">act</code> che funziona allo stesso modo.</p>\n</div>\n<p>Ad esempio, prendiamo in considerazione il seguente componente <code class=\"language-javascript\">Counter</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hai cliccato </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> volte</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hai cliccato </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> volte</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hai cliccato </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> volte</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          Cliccami\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Possiamo testarlo in questo modo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'./Counter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can render and update a counter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Testa il primo render e componentDidMount</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hai cliccato 0 volte'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hai cliccato 0 volte'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Testa il secondo render e componentDidUpdate</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hai cliccato 1 volte'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hai cliccato 1 volte'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Non dimenticare che generare degli eventi DOM ha effetto solamente quando il contenitore dello stesso \u00e8 aggiunto al <code class=\"language-javascript\">document</code>. Puoi usare una libreria come <a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a> per aumentare la pulizia del codice.</li>\n<li>La documentazione sulle <a href=\"/react/testing-recipes\"><code class=\"language-javascript\">ricette</code></a> contiene maggiori dettagli su come funziona <code class=\"language-javascript\">act()</code>, insieme ad esempi d\u2019uso.</li>\n</ul>\n\n<h3 id=\"mockcomponent\"><a class=\"anchor\" href=\"/react/test-utils#mockcomponent\"></a><code class=\"language-javascript\">mockComponent()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">mockComponent</span><span class=\"token punctuation\">(</span>\n  componentClass<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>mockTagName<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Passare il mock di un componente a questo metodo consente di migliorarlo, mettendo a disposizione delle funzionalit\u00e0 che permettono di utilizzare quest\u2019ultimo come un componente React base. Il componente diventer\u00e0 quindi un semplice <code class=\"language-javascript\">&lt;div&gt;</code> (o un altro tag se \u00e8 presente <code class=\"language-javascript\">mockTagNme</code>), che conterr\u00e0 degli eventuali componenti figli.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">mockComponent()</code> \u00e8 un\u2019API legacy. Raccomandiamo l\u2019utilizzo di <a class=\"external-link\" href=\"https://jestjs.io/docs/tutorial-react-native#mock-native-modules-using-jestmock\"><code class=\"language-javascript\">jest.mock()</code></a>.</p>\n</div>\n\n<h3 id=\"iselement\"><a class=\"anchor\" href=\"/react/test-utils#iselement\"></a><code class=\"language-javascript\">isElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isElement</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ritorna <code class=\"language-javascript\">true</code> se <code class=\"language-javascript\">element</code> \u00e8 un qualsiasi componente React.</p>\n\n<h3 id=\"iselementoftype\"><a class=\"anchor\" href=\"/react/test-utils#iselementoftype\"></a><code class=\"language-javascript\">isElementOfType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isElementOfType</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ritorna <code class=\"language-javascript\">true</code> se <code class=\"language-javascript\">element</code> \u00e8 un componente React di tipo <code class=\"language-javascript\">componentClass</code>.</p>\n\n<h3 id=\"isdomcomponent\"><a class=\"anchor\" href=\"/react/test-utils#isdomcomponent\"></a><code class=\"language-javascript\">isDOMComponent()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isDOMComponent</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ritorna <code class=\"language-javascript\">true</code> se <code class=\"language-javascript\">instance</code> \u00e8 un componente DOM (come un <code class=\"language-javascript\">&lt;div&gt;</code> o uno <code class=\"language-javascript\">&lt;span&gt;</code>).</p>\n\n<h3 id=\"iscompositecomponent\"><a class=\"anchor\" href=\"/react/test-utils#iscompositecomponent\"></a><code class=\"language-javascript\">isCompositeComponent()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isCompositeComponent</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ritorna <code class=\"language-javascript\">true</code> se <code class=\"language-javascript\">instance</code> \u00e8 un componente definito dall\u2019utente, come una classe o una funzione.</p>\n\n<h3 id=\"iscompositecomponentwithtype\"><a class=\"anchor\" href=\"/react/test-utils#iscompositecomponentwithtype\"></a><code class=\"language-javascript\">isCompositeComponentWithType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isCompositeComponentWithType</span><span class=\"token punctuation\">(</span>\n  instance<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ritorna <code class=\"language-javascript\">true</code> se <code class=\"language-javascript\">instance</code> \u00e8 un componente di tipo <code class=\"language-javascript\">componentClass</code>.</p>\n\n<h3 id=\"findallinrenderedtree\"><a class=\"anchor\" href=\"/react/test-utils#findallinrenderedtree\"></a><code class=\"language-javascript\">findAllInRenderedTree()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findAllInRenderedTree</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  test\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Scorre tutti i componenti nel <code class=\"language-javascript\">tree</code> e li accumula dove <code class=\"language-javascript\">test(component)</code> \u00e8 <code class=\"language-javascript\">true</code>. Questo di per s\u00e8 non \u00e8 molto utile, ma \u00e8 utilizzato come base in altre librerie di test.</p>\n\n<h3 id=\"scryrendereddomcomponentswithclass\"><a class=\"anchor\" href=\"/react/test-utils#scryrendereddomcomponentswithclass\"></a><code class=\"language-javascript\">scryRenderedDOMComponentsWithClass()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">scryRenderedDOMComponentsWithClass</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  className\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trova tutti gli elementi DOM dei componenti renderizzati, il cui nome della classe corrisponde a <code class=\"language-javascript\">className</code>.</p>\n\n<h3 id=\"findrendereddomcomponentwithclass\"><a class=\"anchor\" href=\"/react/test-utils#findrendereddomcomponentwithclass\"></a><code class=\"language-javascript\">findRenderedDOMComponentWithClass()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findRenderedDOMComponentWithClass</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  className\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Come <a href=\"/react/test-utils#scryrendereddomcomponentswithclass\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithClass()</code></a> ma si aspetta un solo risultato, ritornandolo oppure generando un\u2019eccezione in caso di pi\u00f9 risultati.</p>\n\n<h3 id=\"scryrendereddomcomponentswithtag\"><a class=\"anchor\" href=\"/react/test-utils#scryrendereddomcomponentswithtag\"></a><code class=\"language-javascript\">scryRenderedDOMComponentsWithTag()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">scryRenderedDOMComponentsWithTag</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  tagName\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trova tutti gli elementi DOM dei componenti renderizzati che corrispondo al nome specifico del tag <code class=\"language-javascript\">tagName</code>.</p>\n\n<h3 id=\"findrendereddomcomponentwithtag\"><a class=\"anchor\" href=\"/react/test-utils#findrendereddomcomponentwithtag\"></a><code class=\"language-javascript\">findRenderedDOMComponentWithTag()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findRenderedDOMComponentWithTag</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  tagName\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Come <a href=\"/react/test-utils#scryrendereddomcomponentswithtag\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithTag()</code></a> ma si aspetta un solo risultato, ritornandolo oppure generando un\u2019eccezione in caso di pi\u00f9 risultati.</p>\n\n<h3 id=\"scryrenderedcomponentswithtype\"><a class=\"anchor\" href=\"/react/test-utils#scryrenderedcomponentswithtype\"></a><code class=\"language-javascript\">scryRenderedComponentsWithType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">scryRenderedComponentsWithType</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trova tutte le istanze dei componenti il cui tipo \u00e8 <code class=\"language-javascript\">componentClass</code>.</p>\n\n<h3 id=\"findrenderedcomponentwithtype\"><a class=\"anchor\" href=\"/react/test-utils#findrenderedcomponentwithtype\"></a><code class=\"language-javascript\">findRenderedComponentWithType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findRenderedComponentWithType</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Come <a href=\"/react/test-utils#scryrenderedcomponentswithtype\"><code class=\"language-javascript\">scryRenderedComponentsWithType()</code></a> ma si aspetta un solo risultato, ritornandolo oppure generando un\u2019eccezione in caso di pi\u00f9 risultati.</p>\n\n<h3 id=\"renderintodocument\"><a class=\"anchor\" href=\"/react/test-utils#renderintodocument\"></a><code class=\"language-javascript\">renderIntoDocument()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">renderIntoDocument</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderizza un elemento React in un nodo DOM separato, all\u2019interno del documento. <strong>Questa funzione richiede un DOM.</strong> Equivale a:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> domContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>domContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Dovrai avere <code class=\"language-javascript\">window</code>, <code class=\"language-javascript\">window.document</code> e <code class=\"language-javascript\">window.document.createElement</code> disponibili globalmente <strong>prima</strong> di importare <code class=\"language-javascript\">React</code>. Altrimenti React penser\u00e0 di non poter accedere al DOM, e metodi come <code class=\"language-javascript\">setState</code> non funzioneranno.</p>\n</div>\n\n<h2 id=\"other-utilities\"><a class=\"anchor\" href=\"/react/test-utils#other-utilities\"></a>Altre Utilities </h2>\n<h3 id=\"simulate\"><a class=\"anchor\" href=\"/react/test-utils#simulate\"></a><code class=\"language-javascript\">Simulate</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">Simulate<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>eventName<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>eventData<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Simula la generazione di un evento su un nodo DOM, con un <code class=\"language-javascript\">eventData</code> opzionale.</p>\n<p><code class=\"language-javascript\">Simulate</code> ha un metodo per <a href=\"/react/events#supported-events\">ogni evento che React supporta</a>.</p>\n<p><strong>Cliccare un elemento</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// &lt;button ref={(node) =&gt; this.button = node}&gt;...&lt;/button&gt;</span>\n<span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">;</span>\nReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Cambiare il valore di un campo input e quindi premere ENTER</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// &lt;input ref={(node) =&gt; this.textInput = node} /&gt;</span>\n<span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">;</span>\nnode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'giraffe'</span><span class=\"token punctuation\">;</span>\nReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Enter\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">keyCode</span><span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">which</span><span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Dovrai fornire qualsiasi propriet\u00e0 agli eventi che usi nel tuo componente (ad esempio, keyCode, which, etc\u2026), visto che React non ne definisce automaticamente nessuna.</p>\n</div>\n</div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/addons-test-utils.md\">Edit this page</a></p></div></article>", "path": "/react/test-utils", "nav": ["/react/events", "/react/test-renderer"]}, {"key": "Test Renderer", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><strong>Importazione</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">const</span> TestRenderer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES5 with npm</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/test-renderer#overview\"></a>Panoramica </h2>\n<p>Questo package fornisce un renderizzatore React che pu\u00f2 essere usato per renderizzare componenti React come oggetti Javascript puri, senza dipendere dal DOM o da un ambiente mobile nativo.</p>\n<p>Fondamentalmente, questo package permette di catturare facilmente uno snapshot della vista gerarchica della piattaforma (simile ad un albero DOM) renderizzata dal DOM di React o da un componente di React Native senza utilizzare un browser o <a class=\"external-link\" href=\"https://github.com/tmpvar/jsdom\">jsdom</a>.</p>\n<p>Esempio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Link</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> testRenderer <span class=\"token operator\">=</span> TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">page</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.facebook.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Facebook</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { type: 'a',</span>\n<span class=\"token comment\">//   props: { href: 'https://www.facebook.com/' },</span>\n<span class=\"token comment\">//   children: [ 'Facebook' ] }</span></code></pre></div>\n<p>Puoi utilizzare la feature di snapshot testing di Jest per salvare automaticamente una copia dell\u2019albero JSON in un file e verificare nei tuoi test che non sia cambiato: <a class=\"external-link\" href=\"https://jestjs.io/docs/en/snapshot-testing\">Per saperne di pi\u00f9</a>.</p>\n<p>Puoi anche navigare l\u2019output per trovare nodi specifici e fare asserzioni su di essi.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SubComponent</span></span> <span class=\"token attr-name\">foo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sub<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sub</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> testRenderer <span class=\"token operator\">=</span> TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> testInstance <span class=\"token operator\">=</span> testRenderer<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span>SubComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Sub'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"testrenderer\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderer\"></a>TestRenderer </h3>\n<ul>\n<li><a href=\"/react/test-renderer#testrenderercreate\"><code class=\"language-javascript\">TestRenderer.create()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendereract\"><code class=\"language-javascript\">TestRenderer.act()</code></a></li>\n</ul>\n<h3 id=\"testrenderer-instance\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderer-instance\"></a>Istanza di TestRenderer </h3>\n<ul>\n<li><a href=\"/react/test-renderer#testrenderertojson\"><code class=\"language-javascript\">testRenderer.toJSON()</code></a></li>\n<li><a href=\"/react/test-renderer#testrenderertotree\"><code class=\"language-javascript\">testRenderer.toTree()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendererupdate\"><code class=\"language-javascript\">testRenderer.update()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendererunmount\"><code class=\"language-javascript\">testRenderer.unmount()</code></a></li>\n<li><a href=\"/react/test-renderer#testrenderergetinstance\"><code class=\"language-javascript\">testRenderer.getInstance()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendererroot\"><code class=\"language-javascript\">testRenderer.root</code></a></li>\n</ul>\n<h3 id=\"testinstance\"><a class=\"anchor\" href=\"/react/test-renderer#testinstance\"></a>TestInstance </h3>\n<ul>\n<li><a href=\"/react/test-renderer#testinstancefind\"><code class=\"language-javascript\">testInstance.find()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindbytype\"><code class=\"language-javascript\">testInstance.findByType()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindbyprops\"><code class=\"language-javascript\">testInstance.findByProps()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindall\"><code class=\"language-javascript\">testInstance.findAll()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindallbytype\"><code class=\"language-javascript\">testInstance.findAllByType()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindallbyprops\"><code class=\"language-javascript\">testInstance.findAllByProps()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstanceinstance\"><code class=\"language-javascript\">testInstance.instance</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancetype\"><code class=\"language-javascript\">testInstance.type</code></a></li>\n<li><a href=\"/react/test-renderer#testinstanceprops\"><code class=\"language-javascript\">testInstance.props</code></a></li>\n<li><a href=\"/react/test-renderer#testinstanceparent\"><code class=\"language-javascript\">testInstance.parent</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancechildren\"><code class=\"language-javascript\">testInstance.children</code></a></li>\n</ul>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/test-renderer#reference\"></a>Riferimento </h2>\n<h3 id=\"testrenderercreate\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderercreate\"></a><code class=\"language-javascript\">TestRenderer.create()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Crea un\u2019istanza di <code class=\"language-javascript\">TestRenderer</code> tramite l\u2019elemento React passato in input. Non utilizza il DOM reale, ma renderizza comunque in maniera completa l\u2019alberatura del componente in memoria cos\u00ec da poter fare asserzioni su di essa. Ritorna una <a href=\"/react/test-renderer#testrenderer-instance\">istanza di TestRenderer</a>.</p>\n<h3 id=\"testrendereract\"><a class=\"anchor\" href=\"/react/test-renderer#testrendereract\"></a><code class=\"language-javascript\">TestRenderer.act()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">act</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In modo simile all\u2019<a href=\"/react/test-utils#act\">helper <code class=\"language-javascript\">act()</code> di <code class=\"language-javascript\">react-dom/test-utils</code></a>, <code class=\"language-javascript\">TestRenderer.act</code> prepara un componente per le asserzioni. Usa questa versione di <code class=\"language-javascript\">act()</code> per il wrapping di chiamate a <code class=\"language-javascript\">TestRenderer.create</code> e <code class=\"language-javascript\">testRenderer.update</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>create<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.js'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Il componente in test</span>\n\n<span class=\"token comment\">// renderizzazione del componente</span>\n<span class=\"token keyword\">let</span> root<span class=\"token punctuation\">;</span> \n<span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  root <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// asserzioni sulla root </span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// aggiornamenti qualche props</span>\n<span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// asserzioni sulla root</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"testrenderertojson\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderertojson\"></a><code class=\"language-javascript\">testRenderer.toJSON()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ritorna un oggetto che raffigura l\u2019albero renderizzato. Questo albero contiene solo nodi specifici della piattaforma come <code class=\"language-javascript\">&lt;div&gt;</code> o <code class=\"language-javascript\">&lt;View&gt;</code> e le loro props, ma non contiene nessun componente scritto dall\u2019utente. Questo risulta utile per lo <a class=\"external-link\" href=\"https://facebook.github.io/jest/docs/en/snapshot-testing.html#snapshot-testing-with-jest\">snapshot testing</a>.</p>\n<h3 id=\"testrenderertotree\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderertotree\"></a><code class=\"language-javascript\">testRenderer.toTree()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ritorna un oggetto che raffigura l\u2019albero renderizzato. La rappresentazione \u00e8 pi\u00f9 dettagliata di quella fornita da <code class=\"language-javascript\">toJSON()</code>, e include componenti scritti dall\u2019utente. Probabilmente non hai bisogno di questo metodo a meno che non stia scrivendo una tua libreria di asserzioni sul test renderer.</p>\n<h3 id=\"testrendererupdate\"><a class=\"anchor\" href=\"/react/test-renderer#testrendererupdate\"></a><code class=\"language-javascript\">testRenderer.update()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ri-renderizza l\u2019albero in memoria con un nuovo elemento root. Questo simula un aggiornamento di React a partire dalla root. Se il nuovo elemento ha lo stesso tipo e chiave del precedente elemento, l\u2019albero sar\u00e0 aggiornato; altrimenti, verr\u00e0 ri-montato un nuovo albero.</p>\n<h3 id=\"testrendererunmount\"><a class=\"anchor\" href=\"/react/test-renderer#testrendererunmount\"></a><code class=\"language-javascript\">testRenderer.unmount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Smonta l\u2019albero in memoria, scatenando gli eventi di lifecycle appropriati.</p>\n<h3 id=\"testrenderergetinstance\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderergetinstance\"></a><code class=\"language-javascript\">testRenderer.getInstance()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ritorna l\u2019istanza corrispondente all\u2019elemento root, se disponibile. Questo non funzioner\u00e0 se l\u2019elemento root \u00e8 un componente funzione perch\u00e9 non avr\u00e0 istanza.</p>\n<h3 id=\"testrendererroot\"><a class=\"anchor\" href=\"/react/test-renderer#testrendererroot\"></a><code class=\"language-javascript\">testRenderer.root</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span>root</code></pre></div>\n<p>Ritorna l\u2019oggetto root \u201cistanza di test\u201d che \u00e8 utile per fare asserzioni su specifici nodi nell\u2019albero. Puoi usarlo per trovare altre \u201cistanze di test\u201d maggiormente in profondit\u00e0.</p>\n<h3 id=\"testinstancefind\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefind\"></a><code class=\"language-javascript\">testInstance.find()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trova una singola istanza di test discendente per la quale <code class=\"language-javascript\">test(testInstance)</code> ritorna <code class=\"language-javascript\">true</code>. Se <code class=\"language-javascript\">test(testInstance)</code> non ritorna <code class=\"language-javascript\">true</code> per quella specifica istanza di test, lancer\u00e0 un errore.</p>\n<h3 id=\"testinstancefindbytype\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindbytype\"></a><code class=\"language-javascript\">testInstance.findByType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trova una singola istanza di test discendente usando il <code class=\"language-javascript\">type</code> fornito in input. Se non c\u2019\u00e8 esattamente un\u2019istanza di test con il <code class=\"language-javascript\">type</code> fornito, lancer\u00e0 un errore.</p>\n<h3 id=\"testinstancefindbyprops\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindbyprops\"></a><code class=\"language-javascript\">testInstance.findByProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trova una singola istanza di test discendente usando le <code class=\"language-javascript\">props</code> fornite in input. Se non c\u2019\u00e8 esattamente un\u2019istanza di test con le <code class=\"language-javascript\">props</code> fornite, lancer\u00e0 un errore.</p>\n<h3 id=\"testinstancefindall\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindall\"></a><code class=\"language-javascript\">testInstance.findAll()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trova tutte le istanze di test discendenti per le quali <code class=\"language-javascript\">test(testInstance)</code> ritorna <code class=\"language-javascript\">true</code>.</p>\n<h3 id=\"testinstancefindallbytype\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindallbytype\"></a><code class=\"language-javascript\">testInstance.findAllByType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trova tutte le istanze di test discendenti con il <code class=\"language-javascript\">type</code> fornito.</p>\n<h3 id=\"testinstancefindallbyprops\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindallbyprops\"></a><code class=\"language-javascript\">testInstance.findAllByProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Trova tutte le istanze di test discendenti con le <code class=\"language-javascript\">props</code> fornite.</p>\n<h3 id=\"testinstanceinstance\"><a class=\"anchor\" href=\"/react/test-renderer#testinstanceinstance\"></a><code class=\"language-javascript\">testInstance.instance</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>instance</code></pre></div>\n<p>L\u2019istanza del componente corrispondente a questa istanza di test. E\u2019 disponibile solo per componenti classe, in quanto i componenti funzione non hanno istanze. Corrisponde al valore <code class=\"language-javascript\">this</code> dentro il dato componente.</p>\n<h3 id=\"testinstancetype\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancetype\"></a><code class=\"language-javascript\">testInstance.type</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>type</code></pre></div>\n<p>Il tipo del componente corrispondente a questa istanza di test. Per esempio, un componente <code class=\"language-javascript\">&lt;Button /&gt;</code> ha come tipo <code class=\"language-javascript\">Button</code>.</p>\n<h3 id=\"testinstanceprops\"><a class=\"anchor\" href=\"/react/test-renderer#testinstanceprops\"></a><code class=\"language-javascript\">testInstance.props</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>props</code></pre></div>\n<p>Le props corrispondenti a questa istanza di test. Per esempio, un componente <code class=\"language-javascript\">&lt;Button size=\"small\" /&gt;</code> ha come props <code class=\"language-javascript\">{size: 'small'}</code>.</p>\n<h3 id=\"testinstanceparent\"><a class=\"anchor\" href=\"/react/test-renderer#testinstanceparent\"></a><code class=\"language-javascript\">testInstance.parent</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>parent</code></pre></div>\n<p>L\u2019istanza padre di questa istanza di test.</p>\n<h3 id=\"testinstancechildren\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancechildren\"></a><code class=\"language-javascript\">testInstance.children</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>children</code></pre></div>\n<p>Le istanze figlio di questa istanza di test.</p>\n<h2 id=\"ideas\"><a class=\"anchor\" href=\"/react/test-renderer#ideas\"></a>Idee </h2>\n<p>Puoi passare una funzione <code class=\"language-javascript\">createNodeMock</code> a <code class=\"language-javascript\">TestRenderer.create</code> come opzione, che consente riferimenti a mock personalizzati.\n<code class=\"language-javascript\">createNodeMock</code> accetta l\u2019elemento corrente e dovrebbe ritornare un oggetto riferimento mock.\nQuesto metodo \u00e8 utile quando testi un componente che si affida ai riferimenti.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> focused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nTestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">createNodeMock</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// mock a focus function</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            focused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>focused<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-test-renderer.md\">Edit this page</a></p></div></article>", "path": "/react/test-renderer", "nav": ["/react/test-utils", "/react/javascript-environment-requirements"]}, {"key": "Requisiti Ambiente JS", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React 18 supporta tutti i browser moderni (Edge, Firefox, Chrome, Safari, etc).</p>\n<p>Se devi supportare browser pi\u00f9 vecchi e dispositivi quali Internet Explorer che non includono funzioni native o che hanno implementazioni non standard, considera l\u2019utilizzo di polyfill nel tuo pacchetto applicazione.</p>\n<p>Di seguito una lista delle funzioni moderne che React 18 utilizza:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code class=\"language-javascript\">Promise</code></a></li>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code class=\"language-javascript\">Symbol</code></a></li>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code class=\"language-javascript\">Object.assign</code></a></li>\n</ul>\n<p>La scelta del corretto polyfill per queste funzionalit\u00e0 dipende dal tuo ambiente. Per molti utenti, \u00e8 sufficiente configurare <a class=\"external-link\" href=\"https://github.com/browserslist/browserslist\">Browserlist</a>. Per altri, \u00e8 necessario importare polyfills come <a class=\"external-link\" href=\"https://github.com/zloirock/core-js\"><code class=\"language-javascript\">core-js</code></a> direttamente.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-javascript-environment-requirements.md\">Edit this page</a></p></div></article>", "path": "/react/javascript-environment-requirements", "nav": ["/react/test-renderer", "/react/glossary"]}, {"key": "Glossario", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h2 id=\"single-page-application\"><a class=\"anchor\" href=\"/react/glossary#single-page-application\"></a>Applicazione Single-page </h2>\n<p>Un\u2019applicazione single-page \u00e8 un\u2019applicazione che carica una singola pagina HTML e tutte le risorse necessarie (quali Javascript e CSS) per consentirne l\u2019esecuzione. Qualunque interazione con la pagina o con le pagine successive non richiede un\u2019interrogazione al server il che significa che la pagina non viene ricaricata.</p>\n<p>Sebbene tu possa creare applicazioni single-page in React, questo non rappresenta un requisito. React pu\u00f2 anche essere usato per migliorare piccole parti di un sito gi\u00e0 esistente aggiungendo ulteriore interattivit\u00e0. Il codice scritto in React pu\u00f2 coesistere tranquillamente con un markup renderizzato dal server tramite qualcosa di simile a PHP, o con altre librerie lato client. Infatti, questo \u00e8 esattamente il modo in cui React viene utilizzato in Facebook.</p>\n<h2 id=\"es6-es2015-es2016-etc\"><a class=\"anchor\" href=\"/react/glossary#es6-es2015-es2016-etc\"></a>ES6, ES2015, ES2016, ecc </h2>\n<p>Tutti questi acronimi si riferiscono alle versioni pi\u00f9 recenti dello standard ECMAScript Language Specification, di cui il linguaggio JavaScript \u00e8 un\u2019implementazione. La versione ES6 (nota anche come ES2015) include molte aggiunte rispetto alle versioni precedenti, ad esempio: arrow functions, classi, stringhe template, istruzioni <code class=\"language-javascript\">let</code> e <code class=\"language-javascript\">const</code>. Puoi scoprire di pi\u00f9 riguardo le versioni specifiche <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/ECMAScript#Versions\">qui</a>.</p>\n<h2 id=\"compilers\"><a class=\"anchor\" href=\"/react/glossary#compilers\"></a>Compilatori </h2>\n<p>Un compilatore JavaScript prende il codice JavaScript, lo trasforma e ritorna codice JavaScript in un formato differente. Il caso d\u2019uso pi\u00f9 comune \u00e8 quello di prendere un codice con sintassi ES6 e trasformarlo in uno con sintassi che pu\u00f2 essere interpretata da browser pi\u00f9 vecchi. <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a> \u00e8 il compilatore pi\u00f9 comunemente usato con React. </p>\n<h2 id=\"bundlers\"><a class=\"anchor\" href=\"/react/glossary#bundlers\"></a>Bundlers </h2>\n<p>I bundlers prendono codice JavaScript e CSS scritto in moduli separati (spesso sono centinaia) e li raggruppa in alcuni file meglio ottimizzati per i browser. Tra i bundler pi\u00f9 comunemente usati nelle applicazioni React troviamo <a class=\"external-link\" href=\"https://webpack.js.org/\">Webpack</a> e <a class=\"external-link\" href=\"http://browserify.org/\">Browserify</a>.</p>\n<h2 id=\"package-managers\"><a class=\"anchor\" href=\"/react/glossary#package-managers\"></a>Gestori dei pacchetti </h2>\n<p>I gestori dei pacchetti sono strumenti che ti consentono di gestire le dipendenze nel tuo progetto. <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a> e <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a> sono i due gestori dei pacchetti solitamente usati nelle applicazioni React. Entrambi sono client verso lo stesso registro dei pacchetti di npm.</p>\n<h2 id=\"cdn\"><a class=\"anchor\" href=\"/react/glossary#cdn\"></a>CDN </h2>\n<p>CDN sta per Content Delivery Network. Le CDN consegnano contenuto statico e in cache da una rete di server sparsi nel globo.</p>\n<h2 id=\"jsx\"><a class=\"anchor\" href=\"/react/glossary#jsx\"></a>JSX </h2>\n<p>JSX \u00e8 un\u2019estensione sintattica di JavaScript. E\u2019 simile ad un linguaggio template, ma possiede tutta la potenza di JavaScript. JSX viene compilato in chiamate a <code class=\"language-javascript\">React.createElement()</code> che ritornano oggetti JavaScript chiamati \u201celementi React\u201d. Per un\u2019introduzione base a JSX <a href=\"/react/introducing-jsx\">puoi leggere qui la documentazione</a> e trovare un tutorial pi\u00f9 dettagliato su JSX <a href=\"/react/jsx-in-depth\">qui</a>.</p>\n<p>Il DOM di React usa la convenzione camelCase sui nomi delle propriet\u00e0 invece dei nomi degli attributi HTML. Per esempio, <code class=\"language-javascript\">tabindex</code> diventa <code class=\"language-javascript\">tabIndex</code> in JSX. Anche l\u2019attributo <code class=\"language-javascript\">class</code> viene scritto come <code class=\"language-javascript\">className</code> dal momento che <code class=\"language-javascript\">class</code> \u00e8 una parola riservata in JavaScript:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">My name is Clementine!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h2 id=\"elements\"><a class=\"anchor\" href=\"/react/glossary#elements\"></a><a href=\"/react/rendering-elements\">Elementi</a> </h2>\n<p>Gli elementi React sono gli elementi costituenti delle applicazioni React. Si potrebbe confondere il concetto di elementi con quello maggiormente conosciuto di \u201ccomponenti\u201d. Un elemento descrive quello che vuoi vedere sullo schermo. Gli elementi React sono immutabili.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tipicamente, gli elementi non sono usati direttamente, ma ritornati dai componenti.</p>\n<h2 id=\"components\"><a class=\"anchor\" href=\"/react/glossary#components\"></a><a href=\"/react/components-and-props\">Componenti</a> </h2>\n<p>I componenti React sono pezzi di codice piccoli e riusabili che ritornano un elemento React da renderizzare in pagina. La versione pi\u00f9 semplice di un componente React \u00e8 una funzione JavaScript che ritorna un elemento React:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I componenti possono essere anche classi ES6:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I componenti possono essere suddivisi in pezzi distinti di funzionalit\u00e0 e usati all\u2019interno di altri componenti. I componenti possono ritornare altri componenti, array, stringhe e numeri. Una buona norma da seguire \u00e8 che se una parte della tua UI viene usata diverse volte (Button, Panel, Avatar), o \u00e8 di per s\u00e9 sufficientemente complessa (App, FeedStory, Comment), allora risulter\u00e0 un buon candidato per diventare un componente riusabile. I nomi dei componenti inoltre dovrebbero sempre partire con una lettera maiuscola (<code class=\"language-javascript\">&lt;Wrapper /&gt;</code> <strong>e non</strong> <code class=\"language-javascript\">&lt;wrapper /&gt;</code>). Vedi <a href=\"/react/components-and-props#rendering-a-component\">questa documentazione</a> per maggiori informazioni sulla renderizzazione dei componenti.</p>\n<h3 id=\"props\"><a class=\"anchor\" href=\"/react/glossary#props\"></a><a href=\"/react/components-and-props\"><code class=\"language-javascript\">props</code></a> </h3>\n<p>Le <code class=\"language-javascript\">props</code> sono gli input di un componente React. Vengono passati da un componente padre a un componente figlio.</p>\n<p>Ricorda che le <code class=\"language-javascript\">props</code> sono di sola lettura. Non dovrebbero essere modificate in alcun modo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Sbagliato!</span>\nprops<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se hai bisogno di modificare alcuni valori in risposta a input dell\u2019utente o una risposta di rete, usa <code class=\"language-javascript\">state</code>.</p>\n<h3 id=\"propschildren\"><a class=\"anchor\" href=\"/react/glossary#propschildren\"></a><code class=\"language-javascript\">props.children</code> </h3>\n<p><code class=\"language-javascript\">props.children</code> \u00e8 disponibile in ogni componente. Essa comprende il contenuto tra i tag di apertura e chiusura di un componente. Ad esempio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Welcome</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>La stringa <code class=\"language-javascript\">Hello world!</code> \u00e8 disponibile in <code class=\"language-javascript\">props.children</code> nel componente <code class=\"language-javascript\">Welcome</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Per i componenti definiti come classi, usa <code class=\"language-javascript\">this.props.children</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"state\"><a class=\"anchor\" href=\"/react/glossary#state\"></a><a href=\"/react/state-and-lifecycle#adding-local-state-to-a-class\"><code class=\"language-javascript\">state</code></a> </h3>\n<p>Un componente ha bisogno dello <code class=\"language-javascript\">state</code> quando alcuni dati associati con esso cambiano nel tempo. Per esempio, un componente <code class=\"language-javascript\">Checkbox</code> potrebbe aver bisogno di <code class=\"language-javascript\">isChecked</code> nel suo state, e un componente <code class=\"language-javascript\">NewsFeed</code> potrebbe voler tener traccia dei <code class=\"language-javascript\">fetchedPosts</code> nel suo state.</p>\n<p>La differenza pi\u00f9 importante tra <code class=\"language-javascript\">state</code> e <code class=\"language-javascript\">props</code> \u00e8 che le <code class=\"language-javascript\">props</code> sono passate da un componente padre, ma lo <code class=\"language-javascript\">state</code> viene gestito dal componente stesso. Un componente non pu\u00f2 cambiare le sue <code class=\"language-javascript\">props</code>, ma pu\u00f2 cambiare il suo <code class=\"language-javascript\">state</code>.</p>\n<p>Per ogni pezzo di dato che cambia, ci dovrebbe essere solo un componente che \u201cpossiede\u201d tale dato nel suo state. Non provare a sincronizzare lo state di due componenti diversi. Invece, <a href=\"/react/lifting-state-up\">sollevalo</a> verso l\u2019antenato comune pi\u00f9 vicino, e passalo come props ad entrambi.</p>\n<h2 id=\"lifecycle-methods\"><a class=\"anchor\" href=\"/react/glossary#lifecycle-methods\"></a><a href=\"/react/state-and-lifecycle#adding-lifecycle-methods-to-a-class\">Lifecycle Methods</a> </h2>\n<p>I metodi del lifecycle sono funzionalit\u00e0 personalizzate che vengono eseguite durante le diverse fasi di un componente. Ci sono metodi disponibili quando il componente viene creato e inserito nel DOM (<a href=\"/react/react-component#mounting\">montaggio</a>), quando il componente si aggiorna, e quando il componente viene smontato o rimosso dal DOM.</p>\n<h2 id=\"componenti-controllati-vs-componenti-non-controllati\"><a class=\"anchor\" href=\"/react/glossary#componenti-controllati-vs-componenti-non-controllati\"></a><a href=\"/react/forms#controlled-components\">Componenti controllati</a> vs. <a href=\"/react/uncontrolled-components\">Componenti non controllati</a></h2>\n<p>React ha due diversi approcci nel trattare gli input di un form.</p>\n<p>Un elemento input di un form il cui valore \u00e8 controllato da React viene chiamato <em>componente controllato</em>. Quando un utente inserisce dati all\u2019interno di un componente controllato viene lanciato un gestore dell\u2019evento change e il tuo codice decider\u00e0 se l\u2019input \u00e8 valido (ri-renderizzando con il valore aggiornato). Se non ri-renderizzi allora l\u2019elemento del form rimarr\u00e0 immutato.</p>\n<p>Un <em>componente non controllato</em> funziona allo stesso modo degli elementi del form al di fuori di React. Quando un utente inserisce dati in un campo del form (una casella di input, una lista a cascata, ecc.) le informazioni aggiornate trovano riscontro senza che React abbia bisogno di fare nulla. Tuttavia, questo significa anche che non puoi forzare un campo ad avere un certo valore.</p>\n<p>Nella maggior parte dei casi dovresti usare componenti controllati.</p>\n<h2 id=\"keys\"><a class=\"anchor\" href=\"/react/glossary#keys\"></a><a href=\"/react/lists-and-keys\">Chiavi</a> </h2>\n<p>Una \u201cchiave\u201d \u00e8 un attributo stringa speciale che hai bisogno di includere quando crei array di elementi. Le chiavi aiutano React ad identificare quali elementi sono cambiati, quali sono stati aggiunti, o quali sono stati rimossi. Le chiavi dovrebbero essere assegnate agli elementi all\u2019interno di un array per dargli un\u2019identit\u00e0 stabile.</p>\n<p>Le chiavi necessitano solo di essere univoche tra gli elementi dello stesso array. Non c\u2019\u00e8 bisogno che siano univoche nell\u2019intera applicazione o in un singolo componente.</p>\n<p>Non passare cose come <code class=\"language-javascript\">Math.random()</code> alle chiavi. E\u2019 importante che le chiavi abbiano \u201cun\u2019identit\u00e0 stabile\u201d tra le ri-renderizzazioni cosicch\u00e9 React possa determinare quali elementi sono stati aggiunti, rimossi, o riordinati. Idealmente, le chiavi dovrebbero corrispondere a identificatori stabili e univoci provenienti dai tuoi dati, come <code class=\"language-javascript\">post.id</code>.</p>\n<h2 id=\"refs\"><a class=\"anchor\" href=\"/react/glossary#refs\"></a><a href=\"/react/refs-and-the-dom\">Refs</a> </h2>\n<p>React supporta un attributo speciale che puoi attaccare ad ogni componente. L\u2019attributo <code class=\"language-javascript\">ref</code> pu\u00f2 essere un oggetto creato dalla <a href=\"/react/react-api#reactcreateref\">funzione <code class=\"language-javascript\">React.createRef()</code></a> o una funzione di callback, o una stringa (nelle API legacy). Quando l\u2019attributo <code class=\"language-javascript\">ref</code> \u00e8 una funzione di callback, la funzione riceve l\u2019elemento DOM sottostante o l\u2019istanza di classe come argomento (a seconda del tipo di elemento). Questo ti consente di avere accesso diretto all\u2019elemento del DOM o all\u2019istanza del componente. </p>\n<p>Usa i refs con parsimonia. Se ti ritrovi a usare spesso i refs per \u201cfar funzionare le cose\u201d nella tua app, comincia a prendere familiarit\u00e0 con il <a href=\"/react/lifting-state-up\">flusso di dati top-down</a>.</p>\n<h2 id=\"events\"><a class=\"anchor\" href=\"/react/glossary#events\"></a><a href=\"/react/handling-events\">Eventi</a> </h2>\n<p>La gestione degli eventi con gli elementi React ha alcune differenze sintattiche:</p>\n<ul>\n<li>I gestori degli eventi React sono dichiarati in camelCase, piuttosto che in minuscolo.</li>\n<li>Con JSX puoi passare una funzione come gestore degli eventi, piuttosto che una stringa.</li>\n</ul>\n<h2 id=\"reconciliation\"><a class=\"anchor\" href=\"/react/glossary#reconciliation\"></a><a href=\"/react/reconciliation\">Riconciliazione</a> </h2>\n<p>Quando una prop o lo stato di un componente cambia, React decide se \u00e8 necessario effettuare un aggiornamento del DOM confrontando il nuovo elemento ritornato con quello precedentemente renderizzato. Quando non sono uguali, React aggiorner\u00e0 il DOM. Questo processo viene chiamato \u201criconciliazione\u201d.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/reference-glossary.md\">Edit this page</a></p></div></article>", "path": "/react/glossary", "nav": ["/react/javascript-environment-requirements", "/react/hooks-intro"]}]}, {"key": "Hooks", "values": [{"key": "1. Introduzione agli Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Gli <em>Hooks</em> sono stati aggiunti in React 16.8. Ti permettono di utilizzare <code class=\"language-javascript\">state</code> ed altre funzioni di React senza dover scrivere una classe.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Esempio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Dichiara una nuova variable di stato, che chiameremo \"contatore\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>contatore<span class=\"token punctuation\">,</span> setContatore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hai cliccato </span><span class=\"token punctuation\">{</span>contatore<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> volte</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setContatore</span><span class=\"token punctuation\">(</span>contatore <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Cliccami</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Questa nuova funzione <code class=\"language-javascript\">useState</code> \u00e8 il primo \u201cHook\u201d che impareremo, l\u2019esempio appena visto \u00e8 solo un assaggio. Non preoccuparti se ti pare non abbia molto senso per il momento!</p>\n<p><strong>Puoi incominciare a saperne di pi\u00f9 riguardo agli Hooks <a href=\"/react/hooks-overview\">nella pagina successiva</a>.</strong> In questa pagina, continueremo a spiegare perch\u00e9 abbiamo introdotto gli Hooks in React e come possono aiutarti a sviluppare ottime applicazioni.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>React 16.8.0 \u00e8 la prima versione che supporta gli Hooks. Durante l\u2019upgrade, non dimenticare di aggiornare tutti i pacchetti, incluso React DOM.\nReact Native supporta gli Hooks a partire dalla <a class=\"external-link\" href=\"https://reactnative.dev/blog/2019/03/12/releasing-react-native-059\">release 0.59 di React Native</a>.</p>\n</div>\n<h2 id=\"video-introduction\"><a class=\"anchor\" href=\"/react/hooks-intro#video-introduction\"></a>Introduzione Video </h2>\n<p>Durante React Conf 2018, Sophie Alpert e Dan Abramov hanno introdotto gli Hooks, seguiti da Ryan Florence che ha dimostrato come rifattorizzare una applicazione utilizzandoli. Eccoti il video:</p>\n<br/>\n<a class=\"external-link\" href=\"//www.youtube.com/embed/dpw9EHDh2bM\">link</a>\n<h2 id=\"no-breaking-changes\"><a class=\"anchor\" href=\"/react/hooks-intro#no-breaking-changes\"></a>Retrocompatibili </h2>\n<p>Prima di continuare, ricorda che gli Hooks sono:</p>\n<ul>\n<li><strong>Completamente facoltativi.</strong> Puoi provare ad usare gli Hooks in pochi componenti senza dover riscrivere alcun codice esistente. Non devi per forza imparare o utilizzare gli Hooks adesso se non ti va.</li>\n<li><strong>100% retrocompatibili.</strong> Gli Hooks non contengono alcun cambiamento che possa rompere funzionalit\u00e0 esistenti.</li>\n<li><strong>Disponibili ora.</strong> Gli Hooks sono disponibili a partire dalla release v16.8.0.</li>\n</ul>\n<p><strong>Non esiste alcun piano per la rimozione delle classi da React.</strong> Puoi leggere di pi\u00f9 riguardo alla strategia di adozione graduale degli Hooks nella <a href=\"/react/hooks-intro#gradual-adoption-strategy\">sezione in basso</a> in questa pagina.</p>\n<p><strong>Gli Hooks non cambiano la tua conoscenza dei concetti di React.</strong> Invece, gli Hooks offrono un accesso pi\u00f9 diretto alle API dei concetti React che conosci gi\u00e0: props, state, context, refs, e lifecycle. Come mostreremo di seguito, gli Hooks offrono anche un nuovo potente modo per combinarli.</p>\n<p><strong>Se ti interessa soltanto imparare gli Hooks, puoi <a href=\"/react/hooks-overview\">passare direttamente all pagina successiva!</a></strong> Continua a leggere se invece vuoi saperne di pi\u00f9 riguardo alle motivazioni dietro l\u2019introduzione degli Hooks, oltre a capire come possiamo cominciare ad utilizzarli senza dover riscrivere le nostre applicazioni.</p>\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"/react/hooks-intro#motivation\"></a>Motivazioni </h2>\n<p>Gli Hooks risolvono un\u2019ampia variet\u00e0 di problemi che sembrano disconnessi tra loro in React. Problemi che abbiamo incontrato in oltre cinque anni di scrittura e manutenzione di decine di migliaia di componenti. Se stai imparando React, se lo usi quotidianamente o anche se preferisci una libreria diversa che ha un modello simile basato sui componenti, riconoscerai alcuni di questi problemi.</p>\n<h3 id=\"its-hard-to-reuse-stateful-logic-between-components\"><a class=\"anchor\" href=\"/react/hooks-intro#its-hard-to-reuse-stateful-logic-between-components\"></a>\u00c8 difficile riutilizzare logica dipendente dallo stato in componenti diversi </h3>\n<p>React non offre un modo per \u201ccollegare\u201d comportamenti riutilizzabili ad un componente (per esempio, connetterlo ad uno store). Se hai acquisito un po\u2019 di esperienza in React, sarai a conoscenza di concetti come <a href=\"/react/render-props\">render props</a> e <a href=\"/react/higher-order-components\">componenti di ordine superiore</a> che provano a risolvere questo problema. Tuttavia, questi patterns ti richiedono di ristrutturare i tuoi componenti quando vuoi utilizzarli, il che pu\u00f2 essere difficile oltre a rendere il codice pi\u00f9 difficile da seguire. Se osservi una tipica applicazione React usando React DevTools, noterai molto probabilmente un \u201cwrapper hell\u201d di componenti circondato da livelli di providers, consumers, componenti di ordine superiore, render props, ed altre astrazioni. Anche se possiamo <a class=\"external-link\" href=\"https://github.com/facebook/react-devtools/pull/503\">filtrarli in DevTools</a>, il problema principale resta: React ha bisogno di una migliore primitiva per condividere logica basata sullo stato (stateful).</p>\n<p>Con gli Hooks, puoi estrarre logica stateful da un componente cos\u00ec da renderla testabile in modo indipendente e riutilizzabile. <strong>Gli Hooks ti permettono di riutilizzare logica stateful senza dover cambiare la tua gerarchia dei componenti.</strong> Ci\u00f2 rende facile la condivisione degli Hooks tra vari componenti o con la comunit\u00e0.</p>\n<p>Ne discuteremo pi\u00f9 in dettaglio nella sezione <a href=\"/react/hooks-custom\">Hooks Personalizzati</a>.</p>\n<h3 id=\"complex-components-become-hard-to-understand\"><a class=\"anchor\" href=\"/react/hooks-intro#complex-components-become-hard-to-understand\"></a>Componenti complessi diventano difficili da capire </h3>\n<p>Ci siamo ritrovati pi\u00f9 volte a dover mantenere componenti che sono passati dall\u2019essere semplici fino a crescere in un groviglio di logica stateful ed effetti collaterali. Ogni metodo di lifecycle spesso contiene un mix di logica non correlata. Per esempio, i componenti potrebbero richiamare dati da qualche API in <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentDidUpdate</code>. Comunque, lo stesso metodo <code class=\"language-javascript\">componentDidMount</code> pu\u00f2 contenere anche logica per l\u2019impostazione di event listeners, con le relative operazioni di pulizia eseguite in <code class=\"language-javascript\">componentWillUnmount</code>. Parti di codice correlate e che generalmente cambiano allo stesso tempo finiscono per essere divise perch\u00e9 abbiamo codice completamente non correlato all\u2019interno dello stesso metodo. Ci\u00f2 rende troppo semplice l\u2019introduzione di bugs ed inconsistenze.</p>\n<p>In molti casi non \u00e8 possibile suddividere questi componenti in altri pi\u00f9 piccoli in quanto la logica stateful \u00e8 dappertutto. \u00c8 difficile anche testare questi componenti. Ecco perch\u00e9 molti preferiscono utilizzare una libreria di gestione dello stato separata. Comunque, ci\u00f2 spesso introduce troppa astrazione, richiede di saltare da un file all\u2019altro frequentemente e rende la riutilizzazione dei componenti pi\u00f9 difficile.</p>\n<p>Per risolvere questo problema, <strong>gli Hooks ti permettono di dividere un componente in funzioni pi\u00f9 piccole basate sui pezzi che sono correlati (quali una sottoscrizione ad un particolare evento o la richiesta di dati)</strong>, piuttosto che forzare una suddivisione basata sui metodi di lifecycle. Puoi anche decidere di gestire lo stato del tuo componente con un reducer per renderlo pi\u00f9 prevedibile.</p>\n<p>Ne parleremo pi\u00f9 in dettaglio nella sezione <a href=\"/react/hooks-effect#tip-use-multiple-effects-to-separate-concerns\">Usare l\u2019Hook Effect</a>.</p>\n<h3 id=\"classes-confuse-both-people-and-machines\"><a class=\"anchor\" href=\"/react/hooks-intro#classes-confuse-both-people-and-machines\"></a>Le classi confondono sia le persone che le macchine </h3>\n<p>Oltre a rendere il riutilizzo del codice e la sua organizzazione pi\u00f9 difficile, abbiamo notato che le classi costituiscono una grande barriera per l\u2019apprendimento di React. Devi sapere come <code class=\"language-javascript\">this</code> funziona in JavaScript, il che \u00e8 molto diverso da come funziona nella maggioranza dei linguaggi. Senza l\u2019utilizzo di <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_instance_fields\">ES2022 public class fields</a>, il codice \u00e8 molto verboso. Le persone possono capire perfettamente le props, lo state ed il flusso dati top-down, ma ritrovarsi ad avere difficolt\u00e0 con le classi. La distinzione tra funzioni e componenti classe in React e quando usare l\u2019una o l\u2019altra alternativa causa spesso disaccordi anche tra gli sviluppatori React pi\u00f9 esperti.</p>\n<p>Inoltre, React \u00e8 in uso da circa cinque anni e vogliamo fare in modo che resti rilevante anche per i prossimi cinque anni. Cos\u00ec come <a class=\"external-link\" href=\"https://svelte.dev/\">Svelte</a>, <a class=\"external-link\" href=\"https://angular.io/\">Angular</a>, <a class=\"external-link\" href=\"https://glimmerjs.com/\">Glimmer</a>, ed altri dimostrano, <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Ahead-of-time_compilation\">la compilazione ahead-of-time</a> dei componenti ha molto potenziale. Specialmente se non \u00e8 limitata ai templates. Recentemente, abbiamo sperimentato con il <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/7323\">component folding</a> utilizzando <a class=\"external-link\" href=\"https://prepack.io/\">Prepack</a> ed abbiamo ottenuto dei risultati preliminari molto promettenti. Comunque, abbiamo trovato che i componenti classe possono incoraggiare l\u2019uso di patterns non intenzionali che possono invalidare queste ottimizzazioni facendole ricadere su percorsi pi\u00f9 lenti. Le classi presentano problemi anche con gli strumenti ad oggi disponibili. Per esempio, non vengono minificate molto bene e rendono l\u2019hot reloading (\u201ccaricamento a caldo\u201d) inaffidabile. Vogliamo presentare una API che pu\u00f2 mantenere il codice sul percorso ottimizzabile.</p>\n<p>Per risolvere questi problemi, <strong>gli Hooks ti permettono di utilizzare pi\u00f9 funzioni di React senza dover ricorrere alle classi.</strong> Concettualmente, i componenti React sono sempre stati pi\u00f9 vicini alle funzioni. Gli Hooks abbracciano le funzioni, senza per\u00f2 sacrificare lo spirito pratico di React. Gli Hooks offrono accesso a vie di uscita imperative e non ti richiedono d\u2019imparare complesse tecniche di programmazione funzionale o reattive.</p>\n<div class=\"blockquote\">\n<strong>Esempi</strong>\n<p><a href=\"/react/hooks-overview\">Panoramica sugli Hooks</a> \u00e8 un buon punto di partenza per imparare gli Hooks.</p>\n</div>\n<h2 id=\"gradual-adoption-strategy\"><a class=\"anchor\" href=\"/react/hooks-intro#gradual-adoption-strategy\"></a>Strategie di Adozione Graduale </h2>\n<div class=\"blockquote\">\n<strong>TLDR: Non abbiamo piani per rimuovere le classi da React.</strong>\n</div>\n<p>Sappiamo che gli sviluppatori React sono focalizzati allo sviluppo di prodotti e non hanno tempo per osservare ogni nuova API appena rilasciata. Gli Hooks sono molto nuovi e potrebbe essere meglio aspettare pi\u00f9 esempi e tutorials prima di considerarne l\u2019apprendimento o l\u2019adozione.</p>\n<p>Sappiamo anche che la barra per aggiungere una nuova primitiva in React \u00e8 estremamente alta. Per i lettori pi\u00f9 curiosi, abbiamo preparato una <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs/pull/68\">RFC dettagliata</a> che spiega in dettaglio le motivazioni ed offre una prospettiva aggiuntiva riguardo le decisioni di design oltre riferimenti ad opere precedenti correlate.</p>\n<p><strong>\u00c8 importante notare che gli Hooks funzionano a fianco al codice esistente, puoi quindi adottarli in modo graduale.</strong> Non c\u2019\u00e8 fretta nella migrazione agli Hooks. Raccomandiamo di evitare \u201cgrandi riscritture\u201d, specialmente per componenti classe complessi gi\u00e0 esistenti. \u201cPensare in Hooks\u201d richiede un po\u2019 di cambiamenti mentali. Nella nostra esperienza, \u00e8 meglio far pratica partendo da componenti nuovi e non critici, assicurandosi che tutti i membri del tuo team siano a proprio agio. Dopo che hai avuto l\u2019opportunit\u00e0 di provare gli Hooks, <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/new\">inviaci pure un feedback</a>, positivo o negativo.</p>\n<p>Vogliamo far s\u00ec che gli Hooks coprano tutti i casi d\u2019uso delle classi, tuttavia <strong>continueremo a supportare i componenti classe per il futuro prevedibile.</strong> In Facebook, abbiamo decine di migliaia di componenti scritti come classi, non abbiamo assolutamente alcun piano per riscriverli. Piuttosto, stiamo cominciando ad utilizzare gli Hooks nel nuovo codice a fianco al codice scritto usando le classi.</p>\n<h2 id=\"frequently-asked-questions\"><a class=\"anchor\" href=\"/react/hooks-intro#frequently-asked-questions\"></a>Domande Frequenti </h2>\n<p>Abbiamo preparato una pagina <a href=\"/react/hooks-faq\">FAQ sugli Hooks</a> che risponde alle domande pi\u00f9 frequenti riguardo agli Hooks.</p>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-intro#next-steps\"></a>Passi Successivi </h2>\n<p>Alla fine di questa pagina, dovresti avere un\u2019idea dei problemi che gli Hooks cercano di risolvere, anche se molti dettagli ti sembrano probabilmente non molto chiari. Non preoccuparti! <strong>Andiamo alla <a href=\"/react/hooks-overview\">pagina successiva</a> dove incominceremo ad imparare gli Hooks con esempi.</strong></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/hooks-intro.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-intro", "nav": ["/react/glossary", "/react/hooks-overview"]}, {"key": "2. Panoramica sugli Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Gli <em>Hooks</em> sono una novit\u00e0 introdotta in React 16.8. Permettono di utilizzare lo state ed altre funzionalit\u00e0 di React senza dover scrivere una classe.</p>\n<p>Gli Hooks sono <a href=\"/react/hooks-intro#no-breaking-changes\">retrocompatibili</a>. Questa pagina offre una panoramica sugli Hooks per gli utilizzatori esperti di React. Si tratta di una panoramica abbastanza veloce. Se le cose diventano non chiare, cerca un rettangolo giallo come questo:</p>\n<div class=\"blockquote\">\n<strong>Spiegazione Dettagliata</strong>\n<p>Leggi la <a href=\"/react/hooks-intro#motivation\">Motivazione</a> per capire perch\u00e9 abbiamo introdotto gli Hooks in React.</p>\n</div>\n<p><strong>\u2191\u2191\u2191 Ogni sezione termina con un rettangolo giallo come questo.</strong> Essi forniscono collegamenti a spiegazioni dettagliate.</p>\n<h2 id=\"state-hook\"><a class=\"anchor\" href=\"/react/hooks-overview#state-hook\"></a>\ud83d\udccc State Hook </h2>\n<p>Questo esempio renderizza un contatore. Quando clicchiamo il bottone, il valore aumenta:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Esempio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Dichiara una nuova variabile di stato, che chiameremo \"contatore\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>contatore<span class=\"token punctuation\">,</span> setContatore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hai cliccato </span><span class=\"token punctuation\">{</span>contatore<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> volte</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setContatore</span><span class=\"token punctuation\">(</span>contatore <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Cliccami</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In questo caso, <code class=\"language-javascript\">useState</code> \u00e8 un <em>Hook</em> (spiegheremo cosa significa fra poco). Lo richiamiamo all\u2019interno di un componente funzione per aggiungervi uno stato interno. React preserver\u00e0 questo stato tra le ri-renderizzazioni. <code class=\"language-javascript\">useState</code> ritorna una coppia: il valore dello stato <em>corrente</em> ed una funzione che ci permette di aggiornarlo. Puoi chiamare questa funzione da un event handler o altrove. \u00c8 simile a <code class=\"language-javascript\">this.setState</code>in una classe, tranne per il fatto che non unisce il vecchio e nuovo stato. (Mostriamo un esempio nel quale confrontiamo <code class=\"language-javascript\">useState</code> e <code class=\"language-javascript\">this.state</code> in <a href=\"/react/hooks-state\">Usare lo State Hook</a>.)</p>\n<p>L\u2019unico parametro di <code class=\"language-javascript\">useState</code> \u00e8 il suo stato iniziale. Nell\u2019esempio di sopra, \u00e8 appunto <code class=\"language-javascript\">0</code> perch\u00e9 il contatore comincia da zero. Nota come contrariamente a <code class=\"language-javascript\">this.state</code>, lo stato non deve essere un oggetto \u2014 anche se pu\u00f2 esserlo se lo vuoi. Il parametro che determina lo stato iniziale viene usato solo durante la prima renderizzazione.</p>\n<h4 id=\"declaring-multiple-state-variables\"><a class=\"anchor\" href=\"/react/hooks-overview#declaring-multiple-state-variables\"></a>Dichiarazione di variabili di stato multiple</h4>\n<p>Puoi usare lo State Hook pi\u00f9 di una volta in un singolo componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">EsempioConMoltiState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Dichiara le variabili di stato!</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>eta<span class=\"token punctuation\">,</span> setEta<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>frutto<span class=\"token punctuation\">,</span> setFrutto<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">testo</span><span class=\"token operator\">:</span> <span class=\"token string\">'Impara gli Hooks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>L\u2019<a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">assegnamento di destrutturazione</a> ci permette di dare nomi diversi alle variabili di stato che abbiamo dichiarato richiamando <code class=\"language-javascript\">useState</code>. Questi nomi non fanno parte della API di <code class=\"language-javascript\">useState</code>. Invece, React assume che se chiami <code class=\"language-javascript\">useState</code> pi\u00f9 volte, lo farai nello stesso ordine durante ogni renderizzazione. Ritorneremo pi\u00f9 tardi sul perch\u00e9 ci\u00f2 funziona ed \u00e8 utile.</p>\n<h4 id=\"but-what-is-a-hook\"><a class=\"anchor\" href=\"/react/hooks-overview#but-what-is-a-hook\"></a>Ma cosa \u00e8 un Hook? </h4>\n<p>Gli Hooks sono funzioni che ti permettono di \u201cancorarti\u201d all\u2019interno delle funzioni di React state e lifecycle da componenti funzione. Gli Hooks non funzionano all\u2019interno delle classi \u2014 ti permettono di usare React senza classi. (<a href=\"/react/hooks-intro#gradual-adoption-strategy\">Non raccomandiamo</a> la riscrittura dei tuoi componenti gi\u00e0 esistenti tutto d\u2019un fiato, raccomandiamo invece di scrivere quelli nuovi usando gli Hooks se ti va.)</p>\n<p>React offre Hooks predefiniti come <code class=\"language-javascript\">useState</code>. Puoi anche creare i tuoi Hooks per riutilizzare comportamenti stateful (facenti uso di stato) tra i vari componenti. Per cominciare, diamo uno sguardo agli Hooks predefiniti.</p>\n<div class=\"blockquote\">\n<strong>Spiegazione Dettagliata</strong>\n<p>Se vuoi puoi trovare maggiori dettagli riguardo lo State Hook nella pagina dedicata: <a href=\"/react/hooks-state\">Usare lo State Hook</a>.</p>\n</div>\n<h2 id=\"effect-hook\"><a class=\"anchor\" href=\"/react/hooks-overview#effect-hook\"></a>\u26a1\ufe0f Effect Hook </h2>\n<p>\u00c8 molto probabile che tu abbia dovuto richiedere dati esterni, gestire sottoscrizioni, o dovuto cambiare il DOM da componenti React prima d\u2019ora. Chiamiamo queste operazioni \u201ceffetti collaterali\u201d (o \u201ceffetti\u201d in breve) dato che essi possono alterare altri componenti e non possono essere eseguiti durante la renderizzazione.</p>\n<p>L\u2019Effect Hook, <code class=\"language-javascript\">useEffect</code>, aggiunge la possibilit\u00e0 di eseguire effetti collaterali da componenti funzione. Svolge gli stessi compiti di <code class=\"language-javascript\">componentDidMount</code>, <code class=\"language-javascript\">componentDidUpdate</code>, e <code class=\"language-javascript\">componentWillUnmount</code> nelle classi React, unificate sotto una singola API. (Mostreremo degli esempi che mettono a confronto <code class=\"language-javascript\">useEffect</code> con questi metodi nella pagina <a href=\"/react/hooks-effect\">Usare l\u2019Effect Hook</a>.)</p>\n<p>Ad esempio, questo componente imposta il titolo del documento dopo che React ha aggiornato il DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Esempio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>contatore<span class=\"token punctuation\">,</span> setContatore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Simile a componentDidMount e componentDidUpdate:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Aggiorna il titolo del documento usando le API del browser</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hai cliccato </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>contatore<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> volte</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hai cliccato </span><span class=\"token punctuation\">{</span>contatore<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> volte</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setContatore</span><span class=\"token punctuation\">(</span>contatore <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Cliccami</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando invochi <code class=\"language-javascript\">useEffect</code>, stai sostanzialmente dicendo a React di eseguire la tua funzione \u201ceffetto\u201d dopo aver applicato i cambiamenti al DOM. Gli effetti vengono dichiarati all\u2019interno dei componenti in modo che abbiano accesso alle sue props e state. Di default, React esegue gli effetti ad ogni renderizzazione \u2014 <em>inclusa</em> la prima. (Discuteremo pi\u00f9 in dettagli su come ci\u00f2 si possa confrontare ai lifecycles delle classi nella pagina dedicata <a href=\"/react/hooks-effect\">Usare l\u2019Effect Hook</a>.)</p>\n<p>Gli effetti possono anche opzionalmente specificare come \u201cfare pulizia\u201d dopo la loro esecuzione. Ad esempio, questo componente utilizza un effetto per sottoscrivere lo stato online di un amico, per poi rimuovere la sottoscrizione nella fase di pulizia:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Caricamento...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In questo esempio, React rimuoverebbe la sottoscrizione alla nostra <code class=\"language-javascript\">ChatAPI</code> quando il componente viene smontato, ed anche prima che l\u2019effetto venga eseguito nuovamente nel caso di una renderizzazione successiva. (Se vuoi, esiste un modo per <a href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\">dire a React di evitare che avvengano sottoscrizioni multiple</a> nel caso in cui <code class=\"language-javascript\">props.friend.id</code> che viene passato a <code class=\"language-javascript\">ChatAPI</code> non sia cambiato.)</p>\n<p>Come avviene con <code class=\"language-javascript\">useState</code>, puoi usare pi\u00f9 di un singolo effetto in un componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatusConContatore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>contatore<span class=\"token punctuation\">,</span> setContatore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hai cliccato </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>contatore<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> volte</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Gli Hooks ti permettono di organizzare gli effetti collaterali in un componente a seconda di come le parti sono collegate tra loro (come aggiungere o rimuovere una sottoscrizione), piuttosto che forzarti a doverle suddividere in base a metodi di lifecycle.</p>\n<div class=\"blockquote\">\n<strong>Spiegazione Dettagliata</strong>\n<p>Puoi saperne di pi\u00f9 riguardo <code class=\"language-javascript\">useEffect</code> leggendo la pagina dedicata: <a href=\"/react/hooks-effect\">Usare l\u2019Effect Hook</a>.</p>\n</div>\n<h2 id=\"rules-of-hooks\"><a class=\"anchor\" href=\"/react/hooks-overview#rules-of-hooks\"></a>\u270c\ufe0f Regole degli Hooks </h2>\n<p>Gli Hooks sono funzioni JavaScript, ma hanno due regole aggiuntive:</p>\n<ul>\n<li>Puoi richiamare gli Hooks solo <strong>al livello pi\u00f9 alto</strong>. Non richiamare gli Hooks all\u2019interno di cicli, condizioni o funzioni nidificate.</li>\n<li>Puoi richiamare gli Hooks solo <strong>da componenti funzione di React</strong>. Non richiamare gli Hooks da normali funzioni JavaScript. (Esiste solo un altro valido posto dal quale puoi richiamare gli Hooks \u2014 i tuoi Hooks customizzati. Ne parleremo fra poco.)</li>\n</ul>\n<p>Offriamo un <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">linter plugin</a> per imporre tali regole automaticamente. Siamo consapevoli del fatto che tali regole possano sembrare limitanti o complicate all\u2019inizio, sono per\u00f2 essenziali nel far s\u00ec che gli Hooks funzionino bene.</p>\n<div class=\"blockquote\">\n<strong>Spiegazione Dettagliata</strong>\n<p>Puoi saperne di pi\u00f9 riguardo queste regole nella pagina dedicata: <a href=\"/react/hooks-rules\">Regole degli Hooks</a>.</p>\n</div>\n<h2 id=\"building-your-own-hooks\"><a class=\"anchor\" href=\"/react/hooks-overview#building-your-own-hooks\"></a>\ud83d\udca1 Costruire i Tuoi Hooks Custom </h2>\n<p>A volte, ci ritroviamo a voler riutilizzare logica con stato tra vari componenti. Tradizionalmente, esistono due popolari soluzioni al problema: <a href=\"/react/higher-order-components\">componenti di ordine superiore</a> e <a href=\"/react/render-props\">render props</a>. Gli Hooks Custom ti permettono di risolvere il problema, senza dover aggiungere altri componenti al tuo albero.</p>\n<p>Precedentemente in questa pagina, abbiamo introdotto un componente <code class=\"language-javascript\">FriendStatus</code> che richiama gli Hooks <code class=\"language-javascript\">useState</code> e <code class=\"language-javascript\">useEffect</code> per sottoscriversi allo stato online di un amico. Immaginiamo di voler riutilizzare questa logica di sottoscrizione in un altro componente.</p>\n<p>Innanzitutto, estraiamo questa logica in un Hook custom chiamato <code class=\"language-javascript\">useFriendStatus</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esso prende <code class=\"language-javascript\">friendID</code> come argomento, per poi ritornare il fatto che il nostro amico sia online o meno.</p>\n<p>Adesso lo possiamo usare da entrambi i componenti:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Caricamento...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lo stato di ogni componente \u00e8 completamente indipendente. Gli Hooks sono un modo per riutilizzare <em>logica stateful</em>, non lo stato direttamente. Infatti, ogni <em>chiamata</em> ad un Hook ha uno stato completamente isolato \u2014 per questo puoi anche utilizzare lo stesso Hook custom pi\u00f9 volte in un componente.</p>\n<p>Gli Hooks custom sono pi\u00f9 una convenzione che una funzionalit\u00e0. Se il nome di una funzione inizia con \u201d<code class=\"language-javascript\">use</code>\u201d e richiama altri Hooks, diremo che si tratta di un Hook custom. La convenzione <code class=\"language-javascript\">useQualcosa</code> \u00e8 il modo in cui il nostro linter plugin \u00e8 in grado di individuare bugs nel codice che utilizza gli Hooks.</p>\n<p>Puoi scrivere Hooks custom che coprono un ampio ventaglio di casi d\u2019uso quali la gestione dei forms, animazioni, sottoscrizioni dichiarative, timers e probabilmente molti altri che non abbiamo considerato. Non vediamo l\u2019ora di vedere quali Hooks Custom verranno sfornati dalla comunit\u00e0.</p>\n<div class=\"blockquote\">\n<strong>Spiegazione Dettagliata</strong>\n<p>Puoi saperne di pi\u00f9 riguardo gli Hooks custom nella pagina dedicata: <a href=\"/react/hooks-custom\">Hooks Personalizzati</a>.</p>\n</div>\n<h2 id=\"other-hooks\"><a class=\"anchor\" href=\"/react/hooks-overview#other-hooks\"></a>\ud83d\udd0c Altri Hooks </h2>\n<p>Esistono pochi altri Hooks di fabbrica usati meno frequentemente che potresti ritenere utili. Per esempio, <a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a> ti permette di sottoscriverti al React context senza dover introdurre nidificazione:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Esempio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> locale <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>LocaleContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> che ti permette di gestire lo stato locale di componenti complessi mediante un reducer:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// ...</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Spiegazione Dettagliata</strong>\n<p>Puoi saperne di pi\u00f9 riguardo agli Hooks di fabbrica nella pagina dedicata: <a href=\"/react/hooks-reference\">API di Riferimento degli Hooks</a>.</p>\n</div>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-overview#next-steps\"></a>Passi Successivi </h2>\n<p>Phew, che velocit\u00e0! Se qualcosa non ti \u00e8 chiaro e vuoi impare le cose pi\u00f9 in dettaglio, puoi continuare a leggere le pagine successive, cominciando dalla documentazione su come <a href=\"/react/hooks-state\">Usare l\u2019Hook State</a>.</p>\n<p>Puoi anche dare uno sguardo alla <a href=\"/react/hooks-reference\">API di Riferimento degli Hooks</a> ed alle <a href=\"/react/hooks-faq\">FAQ sugli Hooks</a>.</p>\n<p>Concludendo, non ti perdere la <a href=\"/react/hooks-intro\">pagina introduttiva</a> in quanto spiega <em>perch\u00e9</em> abbiamo aggiunto gli Hooks e come cominceremo ad utilizzarli parallelamente alle classi \u2014 senza dover riscrivere le nostre applicazioni.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/hooks-overview.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-overview", "nav": ["/react/hooks-intro", "/react/hooks-state"]}, {"key": "3. Usare l'Hook State", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Gli <em>Hooks</em> sono stati aggiunti in React 16.8. Ti permettono di utilizzare <code class=\"language-javascript\">state</code> ed altre funzioni di React senza dover scrivere una classe.</p>\n<p>La <a href=\"/react/hooks-intro\">pagina di introduzione</a> usa questo esempio per familiarizzare con gli Hooks:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Esempio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Dichiara una nuova variable di stato, che chiameremo \"contatore\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>contatore<span class=\"token punctuation\">,</span> setContatore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hai cliccato </span><span class=\"token punctuation\">{</span>contatore<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> volte</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setContatore</span><span class=\"token punctuation\">(</span>contatore <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Cliccami</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Inizieremo a conoscere gli Hooks confrontando questo codice con un esempio con una classe equivalente.</p>\n<h2 id=\"equivalent-class-example\"><a class=\"anchor\" href=\"/react/hooks-state#equivalent-class-example\"></a>Esempio Classe Equivalente </h2>\n<p>Se hai gi\u00e0 utilizzato le classi in React, il seguente codice dovrebbe risultarti familiare:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Esempio</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">contatore</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hai cliccato </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>contatore<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> volte</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">contatore</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>contatore <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          Cliccami\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lo stato inizia con <code class=\"language-javascript\">{ contatore: 0 }</code>, e <code class=\"language-javascript\">state.contatore</code> viene incrementato quando l\u2019utente clicca il bottone chiamando <code class=\"language-javascript\">this.setState()</code>. In questa pagina utilizzeremo degli snippets partendo da questa classe.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Ti starai chiedendo perch\u00e9 stiamo utilizzando un contatore invece che un esempio pi\u00f9 realistico. La ragione \u00e8 aiutare a concentrarci sulle API durante i nostri primi passi con gli Hooks.</p>\n</div>\n<h2 id=\"hooks-and-function-components\"><a class=\"anchor\" href=\"/react/hooks-state#hooks-and-function-components\"></a>Hooks e Componenti Funzione </h2>\n<p>Come promemoria, i componenti funzione in React sono cos\u00ec:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Esempio</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Qui puoi utilizzare gli Hooks!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>o cos\u00ec:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Esempio</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Qui puoi utilizzare gli Hooks!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Potresti aver precedentemente conosciuto questi come \u201ccomponenti senza stato\u201d. Ora stiamo introducendo la possibilit\u00e0 di utilizzare lo state React, quindi preferiamo il nome di \u201ccomponenti funzione\u201d.</p>\n<p>Gli Hooks <strong>non</strong> funzionano nelle classi. Ma puoi utilizzarli invece di scrivere classi.</p>\n<h2 id=\"whats-a-hook\"><a class=\"anchor\" href=\"/react/hooks-state#whats-a-hook\"></a>Cos\u2019\u00e8 un Hook? </h2>\n<p>Il nostro nuovo esempio inizia importando l\u2019Hook <code class=\"language-javascript\">useState</code> da React:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Esempio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Cos\u2019\u00e8 un Hook?</strong> Un Hook \u00e8 una speciale funzione che ti permette di \u201cagganciare\u201d funzionalit\u00e0 di React. Per esempio, <code class=\"language-javascript\">useState</code> \u00e8 un Hook che ti permette di aggiungere lo state React nei componenti funzione. Impareremo altri Hooks pi\u00f9 tardi.</p>\n<p><strong>Quando dovrei utilizzare un Hook?</strong> Se scrivi un componente funzione e capisci di aver bisogno dello state, prima avresti dovuto convertirlo in classe. Adesso puoi utilizzare un Hook dentro il componente funzione esistente. Entriamo subito nel dettaglio!</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Ci sono alcune regole speciali su quando puoi e non puoi utilizzare gli Hooks dentro un componente. Le impareremo in <a href=\"/react/hooks-rules\">Regole degli Hooks</a>.</p>\n</div>\n<h2 id=\"declaring-a-state-variable\"><a class=\"anchor\" href=\"/react/hooks-state#declaring-a-state-variable\"></a>Dichiarare una Variabile di Stato </h2>\n<p>In una classe, inizializziamo lo state <code class=\"language-javascript\">contatore</code> a <code class=\"language-javascript\">0</code> impostando <code class=\"language-javascript\">this.state</code> a <code class=\"language-javascript\">{ contatore: 0 }</code> nel costruttore:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Esempio</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">contatore</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In un componente funzione, non abbiamo alcun <code class=\"language-javascript\">this</code>, quindi non possiamo assegnare o leggere <code class=\"language-javascript\">this.state</code>. Invece, chiamiamo l\u2019Hook <code class=\"language-javascript\">useState</code> direttamente dentro il nostro componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Esempio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Dichiara una nuova variabile di stato, che chiameremo \"contatore\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>contatore<span class=\"token punctuation\">,</span> setContatore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><strong>Cosa succede chiamando <code class=\"language-javascript\">useState</code>?</strong> Quest\u2019ultimo dichiara una \u201cvariabile di stato\u201d. La nostra variabile \u00e8 chiamata <code class=\"language-javascript\">contatore</code> ma potremmo chiamarla in qualsiasi altro modo, anche <code class=\"language-javascript\">banana</code>. \u00c8 un modo per \u201cconservare\u201d qualche valore durante le chiamate di funzione \u2014 <code class=\"language-javascript\">useState</code> \u00e8 un modo nuovo di usare la stessa esatta funzionalit\u00e0 che <code class=\"language-javascript\">this.state</code> fornisce ad una classe. Normalmente, le variabili \u201cscompaiono\u201d quando la funzione esce mentre le variabili di stato vengono preservate da React.</p>\n<p><strong>Cosa passiamo a <code class=\"language-javascript\">useState</code> come argomento?</strong> L\u2019unico argomento per l\u2019Hook <code class=\"language-javascript\">useState()</code> \u00e8 lo stato iniziale. A differenza delle classi, lo state non deve essere un oggetto. Possiamo tenere un numero o una stringa se \u00e8 quello di cui abbiamo bisogno. Nel nostro esempio, vogliamo solo un numero che conti quante volte l\u2019utente ha cliccato, quindi passiamo <code class=\"language-javascript\">0</code> come stato iniziale alla nostra variabile. (Se volessimo memorizzare due valori distinti nello stato, dovremmo chiamare <code class=\"language-javascript\">useState()</code> due volte.)</p>\n<p><strong>Cosa ritorna <code class=\"language-javascript\">useState</code>?</strong> Ritorna una coppia di valori: lo stato corrente ed una funzione che lo aggiorna. Questo \u00e8 il motivo per cui scriviamo <code class=\"language-javascript\">const [contatore, setContatore] = useState()</code>. E\u2019 simile a <code class=\"language-javascript\">this.state.contatore</code> e <code class=\"language-javascript\">this.setState</code> in una classe, eccetto per il fatto che li ottieni in coppia. Se non sei familiare con la sintassi che abbiamo utilizzato, ci torneremo <a href=\"/react/hooks-state#tip-what-do-square-brackets-mean\">in fondo a questa pagina</a>.</p>\n<p>Adesso che sappiamo cosa fa l\u2019Hook <code class=\"language-javascript\">useState</code>, il nostro esempio dovrebbe avere pi\u00f9 senso:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Esempio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Dichiara una nuova variabile di stato, che chiameremo \"contatore\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>contatore<span class=\"token punctuation\">,</span> setContatore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Dichiariamo una variabile di stato chiamata <code class=\"language-javascript\">contatore</code>, e la settiamo a <code class=\"language-javascript\">0</code>. React ricorder\u00e0 il suo valore corrente durante i re-render, e fornir\u00e0 il valore pi\u00f9 recente alla nostra funzione. Se vogliamo aggiornare l\u2019attuale <code class=\"language-javascript\">contatore</code>, possiamo chiamare <code class=\"language-javascript\">setContatore</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Potresti chiederti: perch\u00e9 <code class=\"language-javascript\">useState</code> non \u00e8 stato chiamato <code class=\"language-javascript\">createState</code>?</p>\n<p>\u201cCreate\u201d non sarebbe perfettamente accurato perch\u00e9 lo stato \u00e8 solo creato la prima volta che il nostro componente viene renderizzato. Durante i successivi render, <code class=\"language-javascript\">useState</code> ci fornisce lo stato corrente. Altrimenti non sarebbe \u201cstato\u201d! C\u2019\u00e8 anche una ragione per cui i nomi degli Hook iniziano <em>sempre</em> con <code class=\"language-javascript\">use</code>. Lo scopriremo pi\u00f9 tardi in <a href=\"/react/hooks-rules\">Regole degli Hooks</a>.</p>\n</div>\n<h2 id=\"reading-state\"><a class=\"anchor\" href=\"/react/hooks-state#reading-state\"></a>Leggere lo Stato </h2>\n<p>Quando vogliamo visualizzare l\u2019attuale contatore in una classe, leggiamo <code class=\"language-javascript\">this.state.contatore</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hai cliccato </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>contatore<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> volte</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>In una funzione, possiamo usare direttamente <code class=\"language-javascript\">contatore</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hai cliccato </span><span class=\"token punctuation\">{</span>contatore<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> volte</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h2 id=\"updating-state\"><a class=\"anchor\" href=\"/react/hooks-state#updating-state\"></a>Aggiornare lo Stato </h2>\n<p>In una classe, dobbiamo chiamare <code class=\"language-javascript\">this.setState()</code> per aggiornare lo stato <code class=\"language-javascript\">contatore</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">contatore</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>contatore <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    Cliccami</span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>In una funzione, abbiamo <code class=\"language-javascript\">setContatore</code> e <code class=\"language-javascript\">contatore</code> come variabili quindi non abbiamo bisogno di <code class=\"language-javascript\">this</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setContatore</span><span class=\"token punctuation\">(</span>contatore <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    Cliccami</span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h2 id=\"recap\"><a class=\"anchor\" href=\"/react/hooks-state#recap\"></a>Riepilogo </h2>\n<p>Facciamo un <strong>riepilogo di cosa abbiamo imparato riga per riga</strong> e controlliamo cosa abbiamo capito.</p>\n<!--\n  Non vado fiero di questa riga. Per favore qualcuno la sistemi.\n  Ma se GitHub l'ha fatto per anni possiamo farlo anche noi.\n-->\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">1</span><span class=\"token operator\">:</span>  <span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n <span class=\"token number\">3</span><span class=\"token operator\">:</span>  <span class=\"token keyword\">function</span> <span class=\"token function\">Esempio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">4</span><span class=\"token operator\">:</span>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>contatore<span class=\"token punctuation\">,</span> setContatore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n <span class=\"token number\">6</span><span class=\"token operator\">:</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n <span class=\"token number\">7</span><span class=\"token operator\">:</span>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"> 8:        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hai cliccato </span><span class=\"token punctuation\">{</span>contatore<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> volte</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\"> 9:        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setContatore</span><span class=\"token punctuation\">(</span>contatore <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">10:         Cliccami</span>\n<span class=\"token plain-text\">11:        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">12:      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token number\">13</span><span class=\"token operator\">:</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">14</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>Riga 1:</strong> Importiamo l\u2019Hook <code class=\"language-javascript\">useState</code> da React. Ci permette di tenere lo stato locale in un componente funzione.</li>\n<li><strong>Riga 4:</strong> Dentro il componente <code class=\"language-javascript\">Esempio</code>, dichiariamo una nuova variabile di stato chiamando l\u2019Hook <code class=\"language-javascript\">useState</code>. Questo ritorna una coppia di valori, ai quali diamo dei nomi. Chiameremo la nostra variabile <code class=\"language-javascript\">contatore</code> perch\u00e9 conter\u00e0 il numero di click del bottone. Lo inizializziamo a zero passando <code class=\"language-javascript\">0</code> come unico argomento a <code class=\"language-javascript\">useState</code>. Il secondo elemento ritornato \u00e8 una funzione. Questa ci permette di aggiornare <code class=\"language-javascript\">contatore</code> quindi la chiameremo <code class=\"language-javascript\">setContatore</code>.</li>\n<li><strong>Riga 9:</strong> Quando l\u2019utente clicca, chiamiamo <code class=\"language-javascript\">setContatore</code> con un nuovo valore. React renderizzer\u00e0 nuovamente il componente <code class=\"language-javascript\">Esempio</code>, passandogli il nuovo valore <code class=\"language-javascript\">contatore</code>.</li>\n</ul>\n<p>Questo potrebbe sembrare troppo da gestire inizialmente. Ma non correre! Se ti sei perso durante la spiegazione, guarda di nuovo il codice sopra e prova a leggerlo dall\u2019inizio alla fine. Ti promettiamo che se provi a \u201cdimenticare\u201d come funziona lo stato all\u2019interno delle classi, e a leggere nuovamente questo codice, tutto avr\u00e0 senso.</p>\n<h3 id=\"tip-what-do-square-brackets-mean\"><a class=\"anchor\" href=\"/react/hooks-state#tip-what-do-square-brackets-mean\"></a>Consiglio: Cosa significano le Parentesi Quadre? </h3>\n<p>Potresti aver notato le parentesi quadre quando dichiariamo una variabile di stato:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>contatore<span class=\"token punctuation\">,</span> setContatore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I nomi a sinistra non sono parte delle API di React. Puoi chiamare la tua variabile di stato:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>frutta<span class=\"token punctuation\">,</span> setFrutta<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Questa sintassi JavaScript \u00e8 chiamata <a class=\"external-link\" href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Destrutturazione_di_array\">\u201cdestrutturazione di array\u201d</a>. Significa che stiamo dichiarando due nuove variabili <code class=\"language-javascript\">frutta</code> e <code class=\"language-javascript\">setFrutta</code>, dove <code class=\"language-javascript\">frutta</code> \u00e8 il primo valore ritornato da <code class=\"language-javascript\">useState</code>, e <code class=\"language-javascript\">setFrutta</code> \u00e8 il secondo. \u00c8 equivalente a questo codice:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> variebileDiStatoFrutta <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ritorna una coppia</span>\n  <span class=\"token keyword\">var</span> frutta <span class=\"token operator\">=</span> variebileDiStatoFrutta<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Il primo elemento della coppia</span>\n  <span class=\"token keyword\">var</span> setFrutta <span class=\"token operator\">=</span> variebileDiStatoFrutta<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Il secondo elemento della coppia</span></code></pre></div>\n<p>Quando dichiariamo una variabile di stato con <code class=\"language-javascript\">useState</code>, questo ritorna una coppia - un array con due elementi. Il primo elemento \u00e8 il valore attuale, e il secondo \u00e8 la funzione che ci permette di aggiornarlo. Usando <code class=\"language-javascript\">[0]</code> e <code class=\"language-javascript\">[1]</code> per accedervi \u00e8 un po\u2019 fuorviante perch\u00e9 hanno un significato specifico. Questo \u00e8 il motivo per cui utilizziamo la destrutturazione di array.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Potresti essere curioso di sapere come fa React a riconoscere a quale componente corrisponda <code class=\"language-javascript\">useState</code> dal momento che non passiamo a React il <code class=\"language-javascript\">this</code>. Risponderemo <a href=\"/react/hooks-faq#how-does-react-associate-hook-calls-with-components\">a questa domanda</a> e a molte altre nella sezione FAQ.</p>\n</div>\n<h3 id=\"tip-using-multiple-state-variables\"><a class=\"anchor\" href=\"/react/hooks-state#tip-using-multiple-state-variables\"></a>Consiglio: Utilizzare Pi\u00f9 Variabili di Stato </h3>\n<p>Dichiarare variabili di stato come coppia di <code class=\"language-javascript\">[qualcosa, setQualcosa]</code> \u00e8 anche comodo perch\u00e9 ci permette di assegnare nomi <em>diversi</em> a diverse variabili di stato se vogliamo utilizzarne pi\u00f9 di una:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">EsempioConDiversiStati</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Dichiara pi\u00f9 variabili di stato!</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>et\u00e0<span class=\"token punctuation\">,</span> setEt\u00e0<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>frutta<span class=\"token punctuation\">,</span> setFrutta<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>daFare<span class=\"token punctuation\">,</span> setDaFare<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token string\">'Impara gli Hooks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nel componente qui sopra, abbiamo <code class=\"language-javascript\">et\u00e0</code>, <code class=\"language-javascript\">frutta</code>, e <code class=\"language-javascript\">daFare</code> come variabili locali, e possiamo aggiornarle individualmente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">gestisciClickArancia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Simile a this.setState({ frutta: 'arancia' })</span>\n    <span class=\"token function\">setFruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arancia'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Non devi</strong> usare pi\u00f9 variabili di stato. Le variabili di stato possono contenere oggetti ed array, quindi puoi comunque raggruppare dati correlati. Comunque, a differenza di <code class=\"language-javascript\">this.setState</code> in una classe, aggiornando una variabile di stato il nuovo valore <em>rimpiazza</em> quello vecchio invece che essere unito ad esso.</p>\n<p>Forniamo pi\u00f9 raccomandazioni su come dividere variabili di stato indipendenti <a href=\"/react/hooks-faq#should-i-use-one-or-many-state-variables\">nelle FAQ</a>.</p>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-state#next-steps\"></a>Prossimi passi </h2>\n<p>In questa pagina abbiamo imparato uno degli Hooks messi a disposizione da React, chiamato <code class=\"language-javascript\">useState</code>. Qualche volta ci riferiremo a questo come \u201cHook di Stato\u201d. Ci permette di aggiungere stato locale ai componenti funzione React \u2014 cosa che abbiamo fatto per la prima volta in assoluto!</p>\n<p>Abbiamo anche imparato un po\u2019 di pi\u00f9 su cosa sono gli Hooks. Gli Hooks sono funzioni che ti permettono di \u201cagganciare\u201d funzionalit\u00e0 React nei componenti funzione. I loro nomi iniziano sempre con <code class=\"language-javascript\">use</code>, e ci sono altri Hooks che non abbiamo ancora visto.</p>\n<p><strong>Continuiamo <a href=\"/react/hooks-effect\">imparando il prossimo Hook: <code class=\"language-javascript\">useEffect</code>.</a></strong> Permette di eseguire side effects nei componenti, ed \u00e8 simile ai metodi del ciclo di vita nelle classi.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/hooks-state.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-state", "nav": ["/react/hooks-overview", "/react/hooks-effect"]}, {"key": "4. Usare l'Hook Effect", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><em>Hooks</em> are a new addition in React 16.8. They let you use state and other React features without writing a class.</p>\n<p>The <em>Effect Hook</em> lets you perform side effects in function components:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Similar to componentDidMount and componentDidUpdate:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Update the document title using the browser API</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This snippet is based on the <a href=\"/react/hooks-state\">counter example from the previous page</a>, but we added a new feature to it: we set the document title to a custom message including the number of clicks.</p>\n<p>Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects. Whether or not you\u2019re used to calling these operations \u201cside effects\u201d (or just \u201ceffects\u201d), you\u2019ve likely performed them in your components before.</p>\n<div class=\"blockquote\">\n<strong>Tip</strong>\n<p>If you\u2019re familiar with React class lifecycle methods, you can think of <code class=\"language-javascript\">useEffect</code> Hook as <code class=\"language-javascript\">componentDidMount</code>, <code class=\"language-javascript\">componentDidUpdate</code>, and <code class=\"language-javascript\">componentWillUnmount</code> combined.</p>\n</div>\n<p>There are two common kinds of side effects in React components: those that don\u2019t require cleanup, and those that do. Let\u2019s look at this distinction in more detail.</p>\n<h2 id=\"effects-without-cleanup\"><a class=\"anchor\" href=\"/react/hooks-effect#effects-without-cleanup\"></a>Effects Without Cleanup </h2>\n<p>Sometimes, we want to <strong>run some additional code after React has updated the DOM.</strong> Network requests, manual DOM mutations, and logging are common examples of effects that don\u2019t require a cleanup. We say that because we can run them and immediately forget about them. Let\u2019s compare how classes and Hooks let us express such side effects.</p>\n<h3 id=\"example-using-classes\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-classes\"></a>Example Using Classes </h3>\n<p>In React class components, the <code class=\"language-javascript\">render</code> method itself shouldn\u2019t cause side effects. It would be too early \u2014 we typically want to perform our effects <em>after</em> React has updated the DOM.</p>\n<p>This is why in React classes, we put side effects into <code class=\"language-javascript\">componentDidMount</code> and <code class=\"language-javascript\">componentDidUpdate</code>. Coming back to our example, here is a React counter class component that updates the document title right after React makes changes to the DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Click me</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note how <strong>we have to duplicate the code between these two lifecycle methods in class.</strong></p>\n<p>This is because in many cases we want to perform the same side effect regardless of whether the component just mounted, or if it has been updated. Conceptually, we want it to happen after every render \u2014 but React class components don\u2019t have a method like this. We could extract a separate method but we would still have to call it in two places.</p>\n<p>Now let\u2019s see how we can do the same with the <code class=\"language-javascript\">useEffect</code> Hook.</p>\n<h3 id=\"example-using-hooks\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-hooks\"></a>Example Using Hooks </h3>\n<p>We\u2019ve already seen this example at the top of this page, but let\u2019s take a closer look at it:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>What does <code class=\"language-javascript\">useEffect</code> do?</strong> By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we\u2019ll refer to it as our \u201ceffect\u201d), and call it later after performing the DOM updates. In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.</p>\n<p><strong>Why is <code class=\"language-javascript\">useEffect</code> called inside a component?</strong> Placing <code class=\"language-javascript\">useEffect</code> inside the component lets us access the <code class=\"language-javascript\">count</code> state variable (or any props) right from the effect. We don\u2019t need a special API to read it \u2014 it\u2019s already in the function scope. Hooks embrace JavaScript closures and avoid introducing React-specific APIs where JavaScript already provides a solution.</p>\n<p><strong>Does <code class=\"language-javascript\">useEffect</code> run after every render?</strong> Yes! By default, it runs both after the first render <em>and</em> after every update. (We will later talk about <a href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\">how to customize this</a>.) Instead of thinking in terms of \u201cmounting\u201d and \u201cupdating\u201d, you might find it easier to think that effects happen \u201cafter render\u201d. React guarantees the DOM has been updated by the time it runs the effects.</p>\n<h3 id=\"detailed-explanation\"><a class=\"anchor\" href=\"/react/hooks-effect#detailed-explanation\"></a>Detailed Explanation </h3>\n<p>Now that we know more about effects, these lines should make sense:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We declare the <code class=\"language-javascript\">count</code> state variable, and then we tell React we need to use an effect. We pass a function to the <code class=\"language-javascript\">useEffect</code> Hook. This function we pass <em>is</em> our effect. Inside our effect, we set the document title using the <code class=\"language-javascript\">document.title</code> browser API. We can read the latest <code class=\"language-javascript\">count</code> inside the effect because it\u2019s in the scope of our function. When React renders our component, it will remember the effect we used, and then run our effect after updating the DOM. This happens for every render, including the first one.</p>\n<p>Experienced JavaScript developers might notice that the function passed to <code class=\"language-javascript\">useEffect</code> is going to be different on every render. This is intentional. In fact, this is what lets us read the <code class=\"language-javascript\">count</code> value from inside the effect without worrying about it getting stale. Every time we re-render, we schedule a <em>different</em> effect, replacing the previous one. In a way, this makes the effects behave more like a part of the render result \u2014 each effect \u201cbelongs\u201d to a particular render. We will see more clearly why this is useful <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">later on this page</a>.</p>\n<div class=\"blockquote\">\n<strong>Tip</strong>\n<p>Unlike <code class=\"language-javascript\">componentDidMount</code> or <code class=\"language-javascript\">componentDidUpdate</code>, effects scheduled with <code class=\"language-javascript\">useEffect</code> don\u2019t block the browser from updating the screen. This makes your app feel more responsive. The majority of effects don\u2019t need to happen synchronously. In the uncommon cases where they do (such as measuring the layout), there is a separate <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a> Hook with an API identical to <code class=\"language-javascript\">useEffect</code>.</p>\n</div>\n<h2 id=\"effects-with-cleanup\"><a class=\"anchor\" href=\"/react/hooks-effect#effects-with-cleanup\"></a>Effects with Cleanup </h2>\n<p>Earlier, we looked at how to express side effects that don\u2019t require any cleanup. However, some effects do. For example, <strong>we might want to set up a subscription</strong> to some external data source. In that case, it is important to clean up so that we don\u2019t introduce a memory leak! Let\u2019s compare how we can do it with classes and with Hooks.</p>\n<h3 id=\"example-using-classes-1\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-classes-1\"></a>Example Using Classes </h3>\n<p>In a React class, you would typically set up a subscription in <code class=\"language-javascript\">componentDidMount</code>, and clean it up in <code class=\"language-javascript\">componentWillUnmount</code>. For example, let\u2019s say we have a <code class=\"language-javascript\">ChatAPI</code> module that lets us subscribe to a friend\u2019s online status. Here\u2019s how we might subscribe and display that status using a class:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendStatus</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> status<span class=\"token punctuation\">.</span>isOnline</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice how <code class=\"language-javascript\">componentDidMount</code> and <code class=\"language-javascript\">componentWillUnmount</code> need to mirror each other. Lifecycle methods force us to split this logic even though conceptually code in both of them is related to the same effect.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>Eagle-eyed readers may notice that this example also needs a <code class=\"language-javascript\">componentDidUpdate</code> method to be fully correct. We\u2019ll ignore this for now but will come back to it in a <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">later section</a> of this page.</p>\n</div>\n<h3 id=\"example-using-hooks-1\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-hooks-1\"></a>Example Using Hooks </h3>\n<p>Let\u2019s see how we could write this component with Hooks.</p>\n<p>You might be thinking that we\u2019d need a separate effect to perform the cleanup. But code for adding and removing a subscription is so tightly related that <code class=\"language-javascript\">useEffect</code> is designed to keep it together. If your effect returns a function, React will run it when it is time to clean up:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Specify how to clean up after this effect:</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Why did we return a function from our effect?</strong> This is the optional cleanup mechanism for effects. Every effect may return a function that cleans up after it. This lets us keep the logic for adding and removing subscriptions close to each other. They\u2019re part of the same effect!</p>\n<p><strong>When exactly does React clean up an effect?</strong> React performs the cleanup when the component unmounts. However, as we learned earlier, effects run for every render and not just once. This is why React <em>also</em> cleans up effects from the previous render before running the effects next time. We\u2019ll discuss <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">why this helps avoid bugs</a> and <a href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\">how to opt out of this behavior in case it creates performance issues</a> later below.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>We don\u2019t have to return a named function from the effect. We called it <code class=\"language-javascript\">cleanup</code> here to clarify its purpose, but you could return an arrow function or call it something different.</p>\n</div>\n<h2 id=\"recap\"><a class=\"anchor\" href=\"/react/hooks-effect#recap\"></a>Recap </h2>\n<p>We\u2019ve learned that <code class=\"language-javascript\">useEffect</code> lets us express different kinds of side effects after a component renders. Some effects might require cleanup so they return a function:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Other effects might not have a cleanup phase, and don\u2019t return anything.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The Effect Hook unifies both use cases with a single API.</p>\n\n<p><strong>If you feel like you have a decent grasp on how the Effect Hook works, or if you feel overwhelmed, you can jump to the <a href=\"/react/hooks-rules\">next page about Rules of Hooks</a> now.</strong></p>\n\n<h2 id=\"tips-for-using-effects\"><a class=\"anchor\" href=\"/react/hooks-effect#tips-for-using-effects\"></a>Tips for Using Effects </h2>\n<p>We\u2019ll continue this page with an in-depth look at some aspects of <code class=\"language-javascript\">useEffect</code> that experienced React users will likely be curious about. Don\u2019t feel obligated to dig into them now. You can always come back to this page to learn more details about the Effect Hook.</p>\n<h3 id=\"tip-use-multiple-effects-to-separate-concerns\"><a class=\"anchor\" href=\"/react/hooks-effect#tip-use-multiple-effects-to-separate-concerns\"></a>Tip: Use Multiple Effects to Separate Concerns </h3>\n<p>One of the problems we outlined in the <a href=\"/react/hooks-intro#complex-components-become-hard-to-understand\">Motivation</a> for Hooks is that class lifecycle methods often contain unrelated logic, but related logic gets broken up into several methods. Here is a component that combines the counter and the friend status indicator logic from the previous examples:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendStatusWithCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> status<span class=\"token punctuation\">.</span>isOnline\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Note how the logic that sets <code class=\"language-javascript\">document.title</code> is split between <code class=\"language-javascript\">componentDidMount</code> and <code class=\"language-javascript\">componentDidUpdate</code>. The subscription logic is also spread between <code class=\"language-javascript\">componentDidMount</code> and <code class=\"language-javascript\">componentWillUnmount</code>. And <code class=\"language-javascript\">componentDidMount</code> contains code for both tasks.</p>\n<p>So, how can Hooks solve this problem? Just like <a href=\"/react/hooks-state#tip-using-multiple-state-variables\">you can use the <em>State</em> Hook more than once</a>, you can also use several effects. This lets us separate unrelated logic into different effects:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatusWithCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Hooks let us split the code based on what it is doing</strong> rather than a lifecycle method name. React will apply <em>every</em> effect used by the component, in the order they were specified.</p>\n<h3 id=\"explanation-why-effects-run-on-each-update\"><a class=\"anchor\" href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\"></a>Explanation: Why Effects Run on Each Update </h3>\n<p>If you\u2019re used to classes, you might be wondering why the effect cleanup phase happens after every re-render, and not just once during unmounting. Let\u2019s look at a practical example to see why this design helps us create components with fewer bugs.</p>\n<p><a href=\"/react/hooks-effect#example-using-classes-1\">Earlier on this page</a>, we introduced an example <code class=\"language-javascript\">FriendStatus</code> component that displays whether a friend is online or not. Our class reads <code class=\"language-javascript\">friend.id</code> from <code class=\"language-javascript\">this.props</code>, subscribes to the friend status after the component mounts, and unsubscribes during unmounting:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>But what happens if the <code class=\"language-javascript\">friend</code> prop changes</strong> while the component is on the screen? Our component would continue displaying the online status of a different friend. This is a bug. We would also cause a memory leak or crash when unmounting since the unsubscribe call would use the wrong friend ID.</p>\n<p>In a class component, we would need to add <code class=\"language-javascript\">componentDidUpdate</code> to handle this case:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Unsubscribe from the previous friend.id</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      prevProps<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Subscribe to the next friend.id</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Forgetting to handle <code class=\"language-javascript\">componentDidUpdate</code> properly is a common source of bugs in React applications.</p>\n<p>Now consider the version of this component that uses Hooks:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It doesn\u2019t suffer from this bug. (But we also didn\u2019t make any changes to it.)</p>\n<p>There is no special code for handling updates because <code class=\"language-javascript\">useEffect</code> handles them <em>by default</em>. It cleans up the previous effects before applying the next effects. To illustrate this, here is a sequence of subscribe and unsubscribe calls that this component could produce over time:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Mount with { friend: { id: 100 } } props</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Run first effect</span>\n\n<span class=\"token comment\">// Update with { friend: { id: 200 } } props</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean up previous effect</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Run next effect</span>\n\n<span class=\"token comment\">// Update with { friend: { id: 300 } } props</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean up previous effect</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Run next effect</span>\n\n<span class=\"token comment\">// Unmount</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clean up last effect</span></code></pre></div>\n<p>This behavior ensures consistency by default and prevents bugs that are common in class components due to missing update logic.</p>\n<h3 id=\"tip-optimizing-performance-by-skipping-effects\"><a class=\"anchor\" href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\"></a>Tip: Optimizing Performance by Skipping Effects </h3>\n<p>In some cases, cleaning up or applying the effect after every render might create a performance problem. In class components, we can solve this by writing an extra comparison with <code class=\"language-javascript\">prevProps</code> or <code class=\"language-javascript\">prevState</code> inside <code class=\"language-javascript\">componentDidUpdate</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">.</span>count <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This requirement is common enough that it is built into the <code class=\"language-javascript\">useEffect</code> Hook API. You can tell React to <em>skip</em> applying an effect if certain values haven\u2019t changed between re-renders. To do so, pass an array as an optional second argument to <code class=\"language-javascript\">useEffect</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Only re-run the effect if count changes</span></span></code></pre></div>\n<p>In the example above, we pass <code class=\"language-javascript\">[count]</code> as the second argument. What does this mean? If the <code class=\"language-javascript\">count</code> is <code class=\"language-javascript\">5</code>, and then our component re-renders with <code class=\"language-javascript\">count</code> still equal to <code class=\"language-javascript\">5</code>, React will compare <code class=\"language-javascript\">[5]</code> from the previous render and <code class=\"language-javascript\">[5]</code> from the next render. Because all items in the array are the same (<code class=\"language-javascript\">5 === 5</code>), React would skip the effect. That\u2019s our optimization.</p>\n<p>When we render with <code class=\"language-javascript\">count</code> updated to <code class=\"language-javascript\">6</code>, React will compare the items in the <code class=\"language-javascript\">[5]</code> array from the previous render to items in the <code class=\"language-javascript\">[6]</code> array from the next render. This time, React will re-apply the effect because <code class=\"language-javascript\">5 !== 6</code>. If there are multiple items in the array, React will re-run the effect even if just one of them is different.</p>\n<p>This also works for effects that have a cleanup phase:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Only re-subscribe if props.friend.id changes</span></span></code></pre></div>\n<p>In the future, the second argument might get added automatically by a build-time transformation.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>If you use this optimization, make sure the array includes <strong>all values from the component scope (such as props and state) that change over time and that are used by the effect</strong>. Otherwise, your code will reference stale values from previous renders. Learn more about <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">how to deal with functions</a> and <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">what to do when the array changes too often</a>.</p>\n<p>If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array (<code class=\"language-javascript\">[]</code>) as a second argument. This tells React that your effect doesn\u2019t depend on <em>any</em> values from props or state, so it never needs to re-run. This isn\u2019t handled as a special case \u2014 it follows directly from how the dependencies array always works.</p>\n<p>If you pass an empty array (<code class=\"language-javascript\">[]</code>), the props and state inside the effect will always have their initial values. While passing <code class=\"language-javascript\">[]</code> as the second argument is closer to the familiar <code class=\"language-javascript\">componentDidMount</code> and <code class=\"language-javascript\">componentWillUnmount</code> mental model, there are usually <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">better</a> <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">solutions</a> to avoid re-running effects too often. Also, don\u2019t forget that React defers running <code class=\"language-javascript\">useEffect</code> until after the browser has painted, so doing extra work is less of a problem.</p>\n<p>We recommend using the <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> rule as part of our <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a> package. It warns when dependencies are specified incorrectly and suggests a fix.</p>\n</div>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-effect#next-steps\"></a>Next Steps </h2>\n<p>Congratulations! This was a long page, but hopefully by the end most of your questions about effects were answered. You\u2019ve learned both the State Hook and the Effect Hook, and there is a <em>lot</em> you can do with both of them combined. They cover most of the use cases for classes \u2014 and where they don\u2019t, you might find the <a href=\"/react/hooks-reference\">additional Hooks</a> helpful.</p>\n<p>We\u2019re also starting to see how Hooks solve problems outlined in <a href=\"/react/hooks-intro#motivation\">Motivation</a>. We\u2019ve seen how effect cleanup avoids duplication in <code class=\"language-javascript\">componentDidUpdate</code> and <code class=\"language-javascript\">componentWillUnmount</code>, brings related code closer together, and helps us avoid bugs. We\u2019ve also seen how we can separate effects by their purpose, which is something we couldn\u2019t do in classes at all.</p>\n<p>At this point you might be questioning how Hooks work. How can React know which <code class=\"language-javascript\">useState</code> call corresponds to which state variable between re-renders? How does React \u201cmatch up\u201d previous and next effects on every update? <strong>On the next page we will learn about the <a href=\"/react/hooks-rules\">Rules of Hooks</a> \u2014 they\u2019re essential to making Hooks work.</strong></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/hooks-effect.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-effect", "nav": ["/react/hooks-state", "/react/hooks-rules"]}, {"key": "5. Regole degli Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Gli <em>Hooks</em> sono stati aggiunti in React 16.8. Ti permettono di utilizzare <code class=\"language-javascript\">state</code> ed altre funzioni di React senza dover scrivere una classe.</p>\n<p>Gli Hooks sono funzioni JavaScript, ma devi seguire due regole quando li utilizzi. Forniamo un <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">plugin linter</a> per imporre queste regole automaticamente.</p>\n<h3 id=\"only-call-hooks-at-the-top-level\"><a class=\"anchor\" href=\"/react/hooks-rules#only-call-hooks-at-the-top-level\"></a>Chiama gli Hooks solo al livello pi\u00f9 alto </h3>\n<p><strong>Non chiamare gli Hooks all\u2019interno di cicli, condizioni, o funzioni annidate.</strong> Invece, utilizza sempre gli Hooks al livello pi\u00f9 alto della tua funzione React, prima di ogni return. Seguendo questa regola, ti assicuri che gli Hooks siano chiamati nello stesso ordine ogni volta che un componente viene renderizzato. Questo \u00e8 ci\u00f2 che permette a React di mantenere correttamente lo stato degli Hooks tra pi\u00f9 chiamate <code class=\"language-javascript\">useState</code> e <code class=\"language-javascript\">useEffect</code>. (Se sei curioso, lo spiegheremo in profondit\u00e0 <a href=\"/react/hooks-rules#explanation\">qui</a>.)</p>\n<h3 id=\"only-call-hooks-from-react-functions\"><a class=\"anchor\" href=\"/react/hooks-rules#only-call-hooks-from-react-functions\"></a>Chiama gli Hooks solo da Funzioni React </h3>\n<p><strong>Non chiamare gli Hooks da funzioni JavaScript normali.</strong> Invece, puoi:</p>\n<ul>\n<li>\u2705 Chiamare gli Hooks da componenti funzione React.</li>\n<li>\u2705 Chiamare gli Hooks dagli Hooks personalizzati (che vedremo <a href=\"/react/hooks-custom\">nella pagina successiva</a>).</li>\n</ul>\n<p>Seguendo questa regola, ti assicuri che tutta la logica con stato in un componente sia chiaramente visibile dal suo codice sorgente.</p>\n<h2 id=\"eslint-plugin\"><a class=\"anchor\" href=\"/react/hooks-rules#eslint-plugin\"></a>Plugin ESLint </h2>\n<p>Abbiamo rilasciato un plugin ESLint chiamato <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a> che impone queste due regole. Puoi aggiungere questo plugin al tuo progetto, qualora volessi provarlo:</p>\n<p>Questo plugin \u00e8 incluso di default in <a href=\"/react/create-a-new-react-app#create-react-app\">Create React App</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-react-hooks --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// La tua configurazione ESLint</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">\"react-hooks\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string-property property\">\"react-hooks/rules-of-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Controlla le regole degli Hooks</span>\n    <span class=\"token string-property property\">\"react-hooks/exhaustive-deps\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span> <span class=\"token comment\">// Controlla le dipendenze dell'effect</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Puoi passare alla pagina successiva che spiega come scrivere <a href=\"/react/hooks-custom\">i tuoi Hooks</a> adesso.</strong> In questa pagina, continueremo spiegando il ragionamento alla base di queste regole.</p>\n<h2 id=\"explanation\"><a class=\"anchor\" href=\"/react/hooks-rules#explanation\"></a>Spiegazione </h2>\n<p>Come abbiamo <a href=\"/react/hooks-state#tip-using-multiple-state-variables\">appreso prima</a>, possiamo utilizzare pi\u00f9 Hook State o Hook Effect all\u2019interno di un singolo componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Usa la variabile di stato nome</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>nome<span class=\"token punctuation\">,</span> setNome<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. Usa un effect per la persistenza del form</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> nome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. Usa la variabile di stato cognome</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cognome<span class=\"token punctuation\">,</span> setCognome<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 4. Usa un effect per aggiornare il title</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">updateTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> nome <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> cognome<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quindi come fa React a sapere quale stato corrisponde a ogni chiamata a <code class=\"language-javascript\">useState</code>? La risposta \u00e8 che <strong>React si basa sull\u2019ordine in cui vengono chiamati gli Hooks</strong>. Il nostro esempio funziona perch\u00e9 l\u2019ordine delle chiamate agli Hooks \u00e8 lo stesso in ogni render:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// ------------</span>\n<span class=\"token comment\">// Primo render</span>\n<span class=\"token comment\">// ------------</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. Inizializza la variabile di stato nome con 'Mary'</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>persistForm<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 2. Aggiungi un effetto per persistere il form</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 3. Inizializza la variabile di stato cognome con 'Poppins'</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 4. Aggiunge un effetto per aggiornare il title</span>\n\n<span class=\"token comment\">// -------------</span>\n<span class=\"token comment\">// Secondo render</span>\n<span class=\"token comment\">// -------------</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. Leggi la variabile di stato nome (l'argomento \u00e8 ignorato)</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>persistForm<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 2. Sostituisce l'effect per persistere il form</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 3. Leggi la variabile di stato cognome (l'argomento \u00e8 ignorato)</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 4. Sostituisce l'effect per aggiornare il title</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Finch\u00e9 l\u2019ordine delle chiamate agli Hooks \u00e8 lo stesso tra un render e l\u2019altro, React \u00e8 in grado di associare uno stato locale a ciascuno di essi. Ma cosa succede se inseriamo una chiamata ad un Hook (ad esempio, all\u2019effect <code class=\"language-javascript\">persistForm</code>) dentro una condizione?</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token comment\">// \ud83d\udd34 Stiamo infrangendo la prima regola utilizzando un Hook in una condizione</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nome <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> nome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>La condizione <code class=\"language-javascript\">nome !== ''</code> \u00e8 <code class=\"language-javascript\">true</code> nel primo render, quindi eseguiamo questo Hook. Tuttavia, al render successivo l\u2019utente potrebbe cancellare il form, rendendo la condizione <code class=\"language-javascript\">false</code>. Ora che saltiamo questo Hook durante il render, l\u2019ordine delle chiamate agli Hook risulta diverso:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. Leggi la variabile di stato nome (l'argomento \u00e8 ignorato)</span>\n<span class=\"token comment\">// useEffect(persistForm)  // \ud83d\udd34 Questo Hook \u00e8 stato saltato!</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// \ud83d\udd34 2 (ma era 3). Impossibile leggere la variabile di stato cognome</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \ud83d\udd34 3 (ma era 4). Impossibile sostituire l'effect per aggiornare il title</span></code></pre></div>\n<p>React non saprebbe cosa restituire per la seconda chiamata all\u2019Hook <code class=\"language-javascript\">useState</code>. React si aspettava che la seconda chiamata all\u2019Hook in questo componente corrispondesse all\u2019effect <code class=\"language-javascript\">persistForm</code>, esattamente come nel render precedente, ma non \u00e8 pi\u00f9 cos\u00ec. Da quel punto in poi, anche ogni successiva chiamata ad un Hook dopo quella che \u00e8 stata saltata risulterebbe traslata di uno, introducendo dei bug.</p>\n<p><strong>Ecco perch\u00e9 gli Hooks devono essere chiamati dal livello pi\u00f9 alto dei nostri componenti.</strong> Se vogliamo eseguire un effect in maniera condizionata, possiamo mettere la condizione <em>dentro</em> il nostro Hook:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// \ud83d\udc4d Non stiamo pi\u00f9 infrangendo la prima regola</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nome <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> nome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Nota che non devi preoccuparti di questo problema se utilizzi la <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">regola del linter</a> descritta in predecenza.</strong> Ma ora sai anche <em>perch\u00e9</em> gli Hooks funzionano cos\u00ec, e quali problemi questa regola previene.</p>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-rules#next-steps\"></a>Prossimi passi </h2>\n<p>Finalmente, siamo pronti per imparare a <a href=\"/react/hooks-custom\">scrivere i tuoi Hooks</a>! Gli Hooks personalizzati ti permettono di utilizzare gli Hooks forniti da React all\u2019interno delle tue astrazioni, e riutilizzare la logica di stato comune tra componenti diversi.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/hooks-rules.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-rules", "nav": ["/react/hooks-effect", "/react/hooks-custom"]}, {"key": "6. Hooks Personalizzati", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Gli\u00a0<em>Hooks</em>\u00a0sono\u00a0stati\u00a0aggiunti\u00a0in\u00a0React\u00a016.8. Ti permettono di utilizzare <code class=\"language-javascript\">state</code> ed altre funzioni di React senza dover scrivere una classe.</p>\n<p>Costruire i tuoi Hooks personalizzati ti permette di estrarre la logica dei componenti all\u2019interno di funzioni riutilizzabili.</p>\n<p>Quando stavamo imparando a <a href=\"/react/hooks-effect#example-using-hooks-1\">usare\u00a0l\u2019Hook\u00a0Effect</a>, abbiamo visto questo componente di un\u2019applicazione chat che mostra un messaggio per indicare se un amico \u00e8 online oppure offline:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Supponiamo ora che la nostra applicazione chat abbia anche una lista contatti, e che vogliamo renderizzare i nomi degli utenti online con un colore verde. Potremmo copiare e incollare una logica simile dentro al nostro componente <code class=\"language-javascript\">FriendListItem</code> ma non sarebbe l\u2019ideale:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Invece, vorremmo condividere questa logica tra <code class=\"language-javascript\">FriendStatus</code> e <code class=\"language-javascript\">FriendListItem</code>.</p>\n<p>Tradizionalmente in React, esistono due modi diffusi per condividere la logica con stato tra i componenti: le <a href=\"/react/render-props\">render props</a> e gli <a href=\"/react/higher-order-components\">higher-order components</a>. Ora vedremo come gli Hooks risolvono molti degli stessi problemi senza costringerti ad aggiungere altri componenti alla struttura ad albero.</p>\n<h2 id=\"extracting-a-custom-hook\"><a class=\"anchor\" href=\"/react/hooks-custom#extracting-a-custom-hook\"></a>Estrarre un Hook personalizzato </h2>\n<p>Quando vogliamo condividere della logica tra due funzioni JavaScript, la estraiamo all\u2019interno di una terza funzione. Sia i componenti che gli Hooks sono funzioni, quindi questo vale anche per loro!</p>\n<p><strong>Un Hook personalizzato \u00e8 una funzione JavaScript il cui nome inizia con \u201d<code class=\"language-javascript\">use</code>\u201d e che pu\u00f2 invocare altri Hooks.</strong> Per esempio, <code class=\"language-javascript\">useFriendStatus</code> qui sotto \u00e8 il nostro primo Hook personalizzato:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Non c\u2019\u00e8 niente di nuovo al suo interno \u2014 la logica \u00e8 copiata dai componenti sopra. Esattamente come in un componente, assicurati di invocare gli altri Hooks incondizionatamente al livello pi\u00f9 alto del tuo Hook personalizzato.</p>\n<p>A differenza di un componente React, un Hook personalizzato non ha bisogno di avere una firma specifica. Possiamo decidere quali parametri ricevere e cosa, nel caso, deve ritornare. In altre parole, \u00e8 proprio come una normale funzione. Il suo nome dovrebbe sempre iniziare con <code class=\"language-javascript\">use</code> cos\u00ec che si possa riconoscere a prima vista che per lui si applicano le <a href=\"/react/hooks-rules\">regole degli Hooks</a>.</p>\n<p>Lo scopo del nostro Hook <code class=\"language-javascript\">useFriendStatus</code> \u00e8 di sottoscriverci allo status di un amico. Ecco perch\u00e9 riceve <code class=\"language-javascript\">friendID</code> come parametro, e ritorna se questo amico \u00e8 online:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ora vediamo come possiamo utilizzare il nostro Hook personalizzato.</p>\n<h2 id=\"using-a-custom-hook\"><a class=\"anchor\" href=\"/react/hooks-custom#using-a-custom-hook\"></a>Utilizzare un Hook personalizzato </h2>\n<p>All\u2019inizio, il nostro obiettivo dichiarato era di rimuovere la logica duplicata dai componenti <code class=\"language-javascript\">FriendStatus</code> e <code class=\"language-javascript\">FriendListItem</code>. Entrambi vogliono sapere se un amico \u00e8 online.</p>\n<p>Ora che abbiamo estratto questa logica all\u2019interno dell\u2019Hook <code class=\"language-javascript\">useFriendStatus</code>, non ci resta <em>che utilizzarla:</em></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Questo codice \u00e8 equivalente a quello degli esempi originali?</strong> S\u00ec, funziona esattamente allo stesso modo. Se guardi con attenzione, noterai che non abbiamo apportato alcuna modifica al comportamento. Tutto ci\u00f2 che abbiamo fatto \u00e8 stato estrarre codice in comune tra le due funzioni in una funzione separata. <strong>Gli Hooks personalizzati sono una convenzione che deriva in modo naturale dal modo in cui gli Hooks sono progettati, piuttosto che da una funzionalit\u00e0 di React.</strong></p>\n<p><strong>Devo nominare i miei Hooks personalizzati cominciando con \u201d<code class=\"language-javascript\">use</code>\u201c?</strong> S\u00ec, per favore. Questa convenzione \u00e8 molto importante. Senza di essa, non potremmo verificare automaticamente eventuali violazioni delle <a href=\"/react/hooks-rules\">regole degli Hooks</a> perch\u00e9 non sapremmo distinguere se una certa funzione contiene chiamate agli Hooks al suo interno.</p>\n<p><strong>Due componenti che utilizzano lo stesso Hook condividono lo state?</strong> No. Gli Hooks personalizzati sono un meccanismo per riutilizzare <em>logica con stato</em> (come creare una sottoscrizione e ricordare il valore corrente), ma ogni volta che utilizzi un Hook personalizzato, tutto lo state e gli effect al suo interno sono totalmente isolati.</p>\n<p><strong>Come fa un Hook personalizzato ad avere uno state isolato?</strong> Ciascuna <em>chiamata</em> ad un Hook riceve uno state isolato. Siccome chiamiamo direttamente <code class=\"language-javascript\">useFriendStatus</code>, dal punto di vista di React il nostro componente invoca solo <code class=\"language-javascript\">useState</code> e <code class=\"language-javascript\">useEffect</code>. E come abbiamo <a href=\"/react/hooks-state#tip-using-multiple-state-variables\">imparato</a> <a href=\"/react/hooks-effect#tip-use-multiple-effects-to-separate-concerns\">prima</a>, possiamo chiamare <code class=\"language-javascript\">useState</code> e <code class=\"language-javascript\">useEffect</code> tante volte in un componente, e saranno completamente indipendenti.</p>\n<h3 id=\"tip-pass-information-between-hooks\"><a class=\"anchor\" href=\"/react/hooks-custom#tip-pass-information-between-hooks\"></a>Suggerimento: Passare informazioni tra gli Hooks </h3>\n<p>Dal momento che gli Hooks sono funzioni, possiamo passare informazioni tra di essi.</p>\n<p>Per spiegarlo, useremo un altro componente dal nostro ipotetico esempio della chat. Si tratta di una select dei destinatari dei messaggi di chat che mostra se l\u2019amico attualmente selezionato \u00e8 online:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> friendList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Phoebe'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Rachel'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ross'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChatRecipientPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>recipientID<span class=\"token punctuation\">,</span> setRecipientID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isRecipientOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>recipientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Circle</span></span> <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isRecipientOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>recipientID<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setRecipientID</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>friendList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friend</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Salviamo l\u2019ID dell\u2019amico attualmente selezionato nella variabile di stato <code class=\"language-javascript\">recipientID</code>, e la aggiorniamo se l\u2019utente seleziona un amico diverso nella <code class=\"language-javascript\">&lt;select&gt;</code>.</p>\n<p>Siccome la chiamata all\u2019Hook <code class=\"language-javascript\">useState</code> ci restituisce il valore pi\u00f9 recente della variabile di stato <code class=\"language-javascript\">recipientID</code>, possiamo passarla come parametro al nostro Hook personalizzato <code class=\"language-javascript\">useFriendStatus</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>recipientID<span class=\"token punctuation\">,</span> setRecipientID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isRecipientOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>recipientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Questo ci permette di sapere se l\u2019amico <em>attualmente selezionato</em> \u00e8 online. Se scegliamo un amico diverso e aggiorniamo la variabile di stato <code class=\"language-javascript\">recipientID</code>, il nostro Hook <code class=\"language-javascript\">useFriendStatus</code> si canceller\u00e0 dall\u2019amico precedentemente selezionato, e si sottoscriver\u00e0 allo stato di quello appena selezionato.</p>\n<h2 id=\"useyourimagination\"><a class=\"anchor\" href=\"/react/hooks-custom#useyourimagination\"></a><code class=\"language-javascript\">usaLaTuaImmaginazione()</code> </h2>\n<p>Gli Hooks personalizzati offrono la flessibilit\u00e0 di condividere la logica che prima non era possibile nei componenti React. Puoi scrivere Hooks personalizzati che coprono una vasta gamma di casi d\u2019uso come gestione di form, animazioni, sottoscrizioni dichiarative, timer, e probabilmente molti altri casi che non abbiamo considerato. Inoltre, puoi costruire Hooks che sono facili da usare proprio come le funzionalit\u00e0 gi\u00e0 incorporate in React.</p>\n<p>Prova a non aggiungere astrazioni troppo presto. Ora che i componenti funzione possono fare di pi\u00f9, \u00e8 probabile che un tipico componente nel tuo codice diventi pi\u00f9 grande. Questo \u00e8 normale \u2014 non sentirti <em>obbligato</em> a suddividerlo immediatamente in Hooks. Ma ti incoraggiamo anche a iniziare ad individuare i casi in cui un Hook personalizzato potrebbe nascondere una logica complessa dietro ad un\u2019interfaccia semplice, o aiutarti a districare un componente disordinato.</p>\n<p>Per esempio, potresti avere un componente complesso che contiene una gran quantit\u00e0 di stato locale gestito ad-hoc. <code class=\"language-javascript\">useState</code> non rende affatto pi\u00f9 semplice centralizzare la logica di update quindi potresti preferire scriverlo sotto forma di un reducer <a class=\"external-link\" href=\"https://redux.js.org/\">Redux</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">todosReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'add'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ... other actions ...</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I Reducers sono molto comodi da testare isolati, e da scalare per esprimere logiche di update complesse. Se necessario, puoi ulteriormente spezzarli in reducers pi\u00f9 piccoli. Tuttavia, potresti anche apprezzare i vantaggi di utilizzare lo state locale di React, oppure non voler installare un\u2019altra libreria.</p>\n<p>E se potessimo scrivere un Hook <code class=\"language-javascript\">useReducer</code> che ci permette di gestire lo state <em>locale</em> del nostro componente con un reducer? Una versione semplificata potrebbe essere cos\u00ec:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer<span class=\"token punctuation\">,</span> initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> nextState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ora possiamo utilizzarlo nel nostro componente, e lasciare che sia il reducer a occuparsi della gestione del suo stato:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleAddClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La necessit\u00e0 di gestire lo state locale con un reducer in un componente complesso \u00e8 diffusa al punto che abbiamo inserito l\u2019Hook <code class=\"language-javascript\">useReducer</code> all\u2019interno di React. Lo puoi trovare insieme agli altri Hooks integrati nelle <a href=\"/react/hooks-reference\">API di riferimento degli Hooks</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/hooks-custom.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-custom", "nav": ["/react/hooks-rules", "/react/hooks-reference"]}, {"key": "7. API di Riferimento degli Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><em>Hooks</em> are a new addition in React 16.8. They let you use state and other React features without writing a class.</p>\n<p>This page describes the APIs for the built-in Hooks in React.</p>\n<p>If you\u2019re new to Hooks, you might want to check out <a href=\"/react/hooks-overview\">the overview</a> first. You may also find useful information in the <a href=\"/react/hooks-faq\">frequently asked questions</a> section.</p>\n<ul>\n<li>\n<p><a href=\"/react/hooks-reference#basic-hooks\">Basic Hooks</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a></li>\n<li><a href=\"/react/hooks-reference#useeffect\"><code class=\"language-javascript\">useEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-reference#additional-hooks\">Additional Hooks</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a></li>\n<li><a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a></li>\n<li><a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a></li>\n<li><a href=\"/react/hooks-reference#useref\"><code class=\"language-javascript\">useRef</code></a></li>\n<li><a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a></li>\n<li><a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usedebugvalue\"><code class=\"language-javascript\">useDebugValue</code></a></li>\n<li><a href=\"/react/hooks-reference#usedeferredvalue\"><code class=\"language-javascript\">useDeferredValue</code></a></li>\n<li><a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">useTransition</code></a></li>\n<li><a href=\"/react/hooks-reference#useid\"><code class=\"language-javascript\">useId</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-reference#library-hooks\">Library Hooks</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usesyncexternalstore\"><code class=\"language-javascript\">useSyncExternalStore</code></a></li>\n<li><a href=\"/react/hooks-reference#useinsertioneffect\"><code class=\"language-javascript\">useInsertionEffect</code></a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"basic-hooks\"><a class=\"anchor\" href=\"/react/hooks-reference#basic-hooks\"></a>Basic Hooks </h2>\n<h3 id=\"usestate\"><a class=\"anchor\" href=\"/react/hooks-reference#usestate\"></a><code class=\"language-javascript\">useState</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Returns a stateful value, and a function to update it.</p>\n<p>During the initial render, the returned state (<code class=\"language-javascript\">state</code>) is the same as the value passed as the first argument (<code class=\"language-javascript\">initialState</code>).</p>\n<p>The <code class=\"language-javascript\">setState</code> function is used to update the state. It accepts a new state value and enqueues a re-render of the component.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>During subsequent re-renders, the first value returned by <code class=\"language-javascript\">useState</code> will always be the most recent state after applying updates.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>React guarantees that <code class=\"language-javascript\">setState</code> function identity is stable and won\u2019t change on re-renders. This is why it\u2019s safe to omit from the <code class=\"language-javascript\">useEffect</code> or <code class=\"language-javascript\">useCallback</code> dependency list.</p>\n</div>\n<h4 id=\"functional-updates\"><a class=\"anchor\" href=\"/react/hooks-reference#functional-updates\"></a>Functional updates </h4>\n<p>If the new state is computed using the previous state, you can pass a function to <code class=\"language-javascript\">setState</code>. The function will receive the previous value, and return an updated value. Here\u2019s an example of a counter component that uses both forms of <code class=\"language-javascript\">setState</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>initialCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Count: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>initialCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Reset</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevCount</span> <span class=\"token operator\">=&gt;</span> prevCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevCount</span> <span class=\"token operator\">=&gt;</span> prevCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The \u201d+\u201d and \u201d-\u201d buttons use the functional form, because the updated value is based on the previous value. But the \u201cReset\u201d button uses the normal form, because it always sets the count back to the initial value.</p>\n<p>If your update function returns the exact same value as the current state, the subsequent rerender will be skipped completely.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>Unlike the <code class=\"language-javascript\">setState</code> method found in class components, <code class=\"language-javascript\">useState</code> does not automatically merge update objects. You can replicate this behavior by combining the function updater form with object spread syntax:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Object.assign would also work</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>updatedValues<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Another option is <code class=\"language-javascript\">useReducer</code>, which is more suited for managing state objects that contain multiple sub-values.</p>\n</div>\n<h4 id=\"lazy-initial-state\"><a class=\"anchor\" href=\"/react/hooks-reference#lazy-initial-state\"></a>Lazy initial state </h4>\n<p>The <code class=\"language-javascript\">initialState</code> argument is the state used during the initial render. In subsequent renders, it is disregarded. If the initial state is the result of an expensive computation, you may provide a function instead, which will be executed only on the initial render:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">someExpensiveComputation</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"bailing-out-of-a-state-update\"><a class=\"anchor\" href=\"/react/hooks-reference#bailing-out-of-a-state-update\"></a>Bailing out of a state update </h4>\n<p>If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description\"><code class=\"language-javascript\">Object.is</code> comparison algorithm</a>.)</p>\n<p>Note that React may still need to render that specific component again before bailing out. That shouldn\u2019t be a concern because React won\u2019t unnecessarily go \u201cdeeper\u201d into the tree. If you\u2019re doing expensive calculations while rendering, you can optimize them with <code class=\"language-javascript\">useMemo</code>.</p>\n<h4 id=\"batching-of-state-updates\"><a class=\"anchor\" href=\"/react/hooks-reference#batching-of-state-updates\"></a>Batching of state updates </h4>\n<p>React may group several state updates into a single re-render to improve performance. Normally, this improves performance and shouldn\u2019t affect your application\u2019s behavior.</p>\n<p>Before React 18, only updates inside React event handlers were batched. Starting with React 18, <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2022/03/08/react-18-upgrade-guide.html#automatic-batching\">batching is enabled for all updates by default</a>. Note that React makes sure that updates from several <em>different</em> user-initiated events \u2014 for example, clicking a button twice \u2014 are always processed separately and do not get batched. This prevents logical mistakes.</p>\n<p>In the rare case that you need to force the DOM update to be applied synchronously, you may wrap it in <a href=\"/react/react-dom#flushsync\"><code class=\"language-javascript\">flushSync</code></a>. However, this can hurt performance so do this only where needed.</p>\n<h3 id=\"useeffect\"><a class=\"anchor\" href=\"/react/hooks-reference#useeffect\"></a><code class=\"language-javascript\">useEffect</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>didUpdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Accepts a function that contains imperative, possibly effectful code.</p>\n<p>Mutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React\u2019s <em>render phase</em>). Doing so will lead to confusing bugs and inconsistencies in the UI.</p>\n<p>Instead, use <code class=\"language-javascript\">useEffect</code>. The function passed to <code class=\"language-javascript\">useEffect</code> will run after the render is committed to the screen. Think of effects as an escape hatch from React\u2019s purely functional world into the imperative world.</p>\n<p>By default, effects run after every completed render, but you can choose to fire them <a href=\"/react/hooks-reference#conditionally-firing-an-effect\">only when certain values have changed</a>.</p>\n<h4 id=\"cleaning-up-an-effect\"><a class=\"anchor\" href=\"/react/hooks-reference#cleaning-up-an-effect\"></a>Cleaning up an effect </h4>\n<p>Often, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or timer ID. To do this, the function passed to <code class=\"language-javascript\">useEffect</code> may return a clean-up function. For example, to create a subscription:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Clean up the subscription</span>\n    subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The clean-up function runs before the component is removed from the UI to prevent memory leaks. Additionally, if a component renders multiple times (as they typically do), the <strong>previous effect is cleaned up before executing the next effect</strong>. In our example, this means a new subscription is created on every update. To avoid firing an effect on every update, refer to the next section.</p>\n<h4 id=\"timing-of-effects\"><a class=\"anchor\" href=\"/react/hooks-reference#timing-of-effects\"></a>Timing of effects </h4>\n<p>Unlike <code class=\"language-javascript\">componentDidMount</code> and <code class=\"language-javascript\">componentDidUpdate</code>, the function passed to <code class=\"language-javascript\">useEffect</code> fires <strong>after</strong> layout and paint, during a deferred event. This makes it suitable for the many common side effects, like setting up subscriptions and event handlers, because most types of work shouldn\u2019t block the browser from updating the screen.</p>\n<p>However, not all effects can be deferred. For example, a DOM mutation that is visible to the user must fire synchronously before the next paint so that the user does not perceive a visual inconsistency. (The distinction is conceptually similar to passive versus active event listeners.) For these types of effects, React provides one additional Hook called <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a>. It has the same signature as <code class=\"language-javascript\">useEffect</code>, and only differs in when it is fired.</p>\n<p>Additionally, starting in React 18, the function passed to <code class=\"language-javascript\">useEffect</code> will fire synchronously <strong>before</strong> layout and paint when it\u2019s the result of a discrete user input such as a click, or when it\u2019s the result of an update wrapped in <a href=\"/react/react-dom#flushsync\"><code class=\"language-javascript\">flushSync</code></a>. This behavior allows the result of the effect to be observed by the event system, or by the caller of <a href=\"/react/react-dom#flushsync\"><code class=\"language-javascript\">flushSync</code></a>.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>This only affects the timing of when the function passed to <code class=\"language-javascript\">useEffect</code> is called - updates scheduled inside these effects are still deferred. This is different than <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a>, which fires the function and processes the updates inside of it immediately.</p>\n</div>\n<p>Even in cases where <code class=\"language-javascript\">useEffect</code> is deferred until after the browser has painted, it\u2019s guaranteed to fire before any new renders. React will always flush a previous render\u2019s effects before starting a new update.</p>\n<h4 id=\"conditionally-firing-an-effect\"><a class=\"anchor\" href=\"/react/hooks-reference#conditionally-firing-an-effect\"></a>Conditionally firing an effect </h4>\n<p>The default behavior for effects is to fire the effect after every completed render. That way an effect is always recreated if one of its dependencies changes.</p>\n<p>However, this may be overkill in some cases, like the subscription example from the previous section. We don\u2019t need to create a new subscription on every update, only if the <code class=\"language-javascript\">source</code> prop has changed.</p>\n<p>To implement this, pass a second argument to <code class=\"language-javascript\">useEffect</code> that is the array of values that the effect depends on. Our updated example now looks like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the subscription will only be recreated when <code class=\"language-javascript\">props.source</code> changes.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>If you use this optimization, make sure the array includes <strong>all values from the component scope (such as props and state) that change over time and that are used by the effect</strong>. Otherwise, your code will reference stale values from previous renders. Learn more about <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">how to deal with functions</a> and what to do when the <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">array values change too often</a>.</p>\n<p>If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array (<code class=\"language-javascript\">[]</code>) as a second argument. This tells React that your effect doesn\u2019t depend on <em>any</em> values from props or state, so it never needs to re-run. This isn\u2019t handled as a special case \u2014 it follows directly from how the dependencies array always works.</p>\n<p>If you pass an empty array (<code class=\"language-javascript\">[]</code>), the props and state inside the effect will always have their initial values. While passing <code class=\"language-javascript\">[]</code> as the second argument is closer to the familiar <code class=\"language-javascript\">componentDidMount</code> and <code class=\"language-javascript\">componentWillUnmount</code> mental model, there are usually <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">better</a> <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">solutions</a> to avoid re-running effects too often. Also, don\u2019t forget that React defers running <code class=\"language-javascript\">useEffect</code> until after the browser has painted, so doing extra work is less of a problem.</p>\n<p>We recommend using the <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> rule as part of our <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a> package. It warns when dependencies are specified incorrectly and suggests a fix.</p>\n</div>\n<p>The array of dependencies is not passed as arguments to the effect function. Conceptually, though, that\u2019s what they represent: every value referenced inside the effect function should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.</p>\n<h3 id=\"usecontext\"><a class=\"anchor\" href=\"/react/hooks-reference#usecontext\"></a><code class=\"language-javascript\">useContext</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MyContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Accepts a context object (the value returned from <code class=\"language-javascript\">React.createContext</code>) and returns the current context value for that context. The current context value is determined by the <code class=\"language-javascript\">value</code> prop of the nearest <code class=\"language-javascript\">&lt;MyContext.Provider&gt;</code> above the calling component in the tree.</p>\n<p>When the nearest <code class=\"language-javascript\">&lt;MyContext.Provider&gt;</code> above the component updates, this Hook will trigger a rerender with the latest context <code class=\"language-javascript\">value</code> passed to that <code class=\"language-javascript\">MyContext</code> provider. Even if an ancestor uses <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a> or <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate</code></a>, a rerender will still happen starting at the component itself using <code class=\"language-javascript\">useContext</code>.</p>\n<p>Don\u2019t forget that the argument to <code class=\"language-javascript\">useContext</code> must be the <em>context object itself</em>:</p>\n<ul>\n<li><strong>Correct:</strong> <code class=\"language-javascript\">useContext(MyContext)</code></li>\n<li><strong>Incorrect:</strong> <code class=\"language-javascript\">useContext(MyContext.Consumer)</code></li>\n<li><strong>Incorrect:</strong> <code class=\"language-javascript\">useContext(MyContext.Provider)</code></li>\n</ul>\n<p>A component calling <code class=\"language-javascript\">useContext</code> will always re-render when the context value changes. If re-rendering the component is expensive, you can <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/15156#issuecomment-474590693\">optimize it by using memoization</a>.</p>\n<div class=\"blockquote\">\n<strong>Tip</strong>\n<p>If you\u2019re familiar with the context API before Hooks, <code class=\"language-javascript\">useContext(MyContext)</code> is equivalent to <code class=\"language-javascript\">static contextType = MyContext</code> in a class, or to <code class=\"language-javascript\">&lt;MyContext.Consumer&gt;</code>.</p>\n<p><code class=\"language-javascript\">useContext(MyContext)</code> only lets you <em>read</em> the context and subscribe to its changes. You still need a <code class=\"language-javascript\">&lt;MyContext.Provider&gt;</code> above in the tree to <em>provide</em> the value for this context.</p>\n</div>\n<p><strong>Putting it together with Context.Provider</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> themes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">light</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foreground</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#eeeeee\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dark</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foreground</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#222222\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>themes<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ThemedButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>foreground <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      I am styled by theme context!</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example is modified for hooks from a previous example in the <a href=\"/react/context\">Context Advanced Guide</a>, where you can find more information about when and how to use Context.</p>\n<h2 id=\"additional-hooks\"><a class=\"anchor\" href=\"/react/hooks-reference#additional-hooks\"></a>Additional Hooks </h2>\n<p>The following Hooks are either variants of the basic ones from the previous section, or only needed for specific edge cases. Don\u2019t stress about learning them up front.</p>\n<h3 id=\"usereducer\"><a class=\"anchor\" href=\"/react/hooks-reference#usereducer\"></a><code class=\"language-javascript\">useReducer</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialArg<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>An alternative to <a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a>. Accepts a reducer of type <code class=\"language-javascript\">(state, action) =&gt; newState</code>, and returns the current state paired with a <code class=\"language-javascript\">dispatch</code> method. (If you\u2019re familiar with Redux, you already know how this works.)</p>\n<p><code class=\"language-javascript\">useReducer</code> is usually preferable to <code class=\"language-javascript\">useState</code> when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. <code class=\"language-javascript\">useReducer</code> also lets you optimize performance for components that trigger deep updates because <a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\">you can pass <code class=\"language-javascript\">dispatch</code> down instead of callbacks</a>.</p>\n<p>Here\u2019s the counter example from the <a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a> section, rewritten to use a reducer:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Count: </span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>React guarantees that <code class=\"language-javascript\">dispatch</code> function identity is stable and won\u2019t change on re-renders. This is why it\u2019s safe to omit from the <code class=\"language-javascript\">useEffect</code> or <code class=\"language-javascript\">useCallback</code> dependency list.</p>\n</div>\n<h4 id=\"specifying-the-initial-state\"><a class=\"anchor\" href=\"/react/hooks-reference#specifying-the-initial-state\"></a>Specifying the initial state </h4>\n<p>There are two different ways to initialize <code class=\"language-javascript\">useReducer</code> state. You may choose either one depending on the use case. The simplest way is to pass the initial state as a second argument:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>\n    reducer<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>React doesn\u2019t use the <code class=\"language-javascript\">state = initialState</code> argument convention popularized by Redux. The initial value sometimes needs to depend on props and so is specified from the Hook call instead. If you feel strongly about this, you can call <code class=\"language-javascript\">useReducer(reducer, undefined, reducer)</code> to emulate the Redux behavior, but it\u2019s not encouraged.</p>\n</div>\n<h4 id=\"lazy-initialization\"><a class=\"anchor\" href=\"/react/hooks-reference#lazy-initialization\"></a>Lazy initialization </h4>\n<p>You can also create the initial state lazily. To do this, you can pass an <code class=\"language-javascript\">init</code> function as the third argument. The initial state will be set to <code class=\"language-javascript\">init(initialArg)</code>.</p>\n<p>It lets you extract the logic for calculating the initial state outside the reducer. This is also handy for resetting the state later in response to an action:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'reset'</span><span class=\"token operator\">:</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>initialCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialCount<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      Count: </span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        Reset</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"bailing-out-of-a-dispatch\"><a class=\"anchor\" href=\"/react/hooks-reference#bailing-out-of-a-dispatch\"></a>Bailing out of a dispatch </h4>\n<p>If you return the same value from a Reducer Hook as the current state, React will bail out without rendering the children or firing effects. (React uses the <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description\"><code class=\"language-javascript\">Object.is</code> comparison algorithm</a>.)</p>\n<p>Note that React may still need to render that specific component again before bailing out. That shouldn\u2019t be a concern because React won\u2019t unnecessarily go \u201cdeeper\u201d into the tree. If you\u2019re doing expensive calculations while rendering, you can optimize them with <code class=\"language-javascript\">useMemo</code>.</p>\n<h3 id=\"usecallback\"><a class=\"anchor\" href=\"/react/hooks-reference#usecallback\"></a><code class=\"language-javascript\">useCallback</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Returns a <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Memoization\">memoized</a> callback.</p>\n<p>Pass an inline callback and an array of dependencies. <code class=\"language-javascript\">useCallback</code> will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. <code class=\"language-javascript\">shouldComponentUpdate</code>).</p>\n<p><code class=\"language-javascript\">useCallback(fn, deps)</code> is equivalent to <code class=\"language-javascript\">useMemo(() =&gt; fn, deps)</code>.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>The array of dependencies is not passed as arguments to the callback. Conceptually, though, that\u2019s what they represent: every value referenced inside the callback should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.</p>\n<p>We recommend using the <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> rule as part of our <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a> package. It warns when dependencies are specified incorrectly and suggests a fix.</p>\n</div>\n<h3 id=\"usememo\"><a class=\"anchor\" href=\"/react/hooks-reference#usememo\"></a><code class=\"language-javascript\">useMemo</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Returns a <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Memoization\">memoized</a> value.</p>\n<p>Pass a \u201ccreate\u201d function and an array of dependencies. <code class=\"language-javascript\">useMemo</code> will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.</p>\n<p>Remember that the function passed to <code class=\"language-javascript\">useMemo</code> runs during rendering. Don\u2019t do anything there that you wouldn\u2019t normally do while rendering. For example, side effects belong in <code class=\"language-javascript\">useEffect</code>, not <code class=\"language-javascript\">useMemo</code>.</p>\n<p>If no array is provided, a new value will be computed on every render.</p>\n<p><strong>You may rely on <code class=\"language-javascript\">useMemo</code> as a performance optimization, not as a semantic guarantee.</strong> In the future, React may choose to \u201cforget\u201d some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without <code class=\"language-javascript\">useMemo</code> \u2014 and then add it to optimize performance.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>The array of dependencies is not passed as arguments to the function. Conceptually, though, that\u2019s what they represent: every value referenced inside the function should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.</p>\n<p>We recommend using the <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> rule as part of our <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a> package. It warns when dependencies are specified incorrectly and suggests a fix.</p>\n</div>\n<h3 id=\"useref\"><a class=\"anchor\" href=\"/react/hooks-reference#useref\"></a><code class=\"language-javascript\">useRef</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> refContainer <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">useRef</code> returns a mutable ref object whose <code class=\"language-javascript\">.current</code> property is initialized to the passed argument (<code class=\"language-javascript\">initialValue</code>). The returned object will persist for the full lifetime of the component.</p>\n<p>A common use case is to access a child imperatively:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TextInputWithFocusButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputEl <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// `current` points to the mounted text input element</span>\n    inputEl<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputEl<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onButtonClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Focus the input</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Essentially, <code class=\"language-javascript\">useRef</code> is like a \u201cbox\u201d that can hold a mutable value in its <code class=\"language-javascript\">.current</code> property.</p>\n<p>You might be familiar with refs primarily as a way to <a href=\"/react/refs-and-the-dom\">access the DOM</a>. If you pass a ref object to React with <code class=\"language-javascript\">&lt;div ref={myRef} /&gt;</code>, React will set its <code class=\"language-javascript\">.current</code> property to the corresponding DOM node whenever that node changes.</p>\n<p>However, <code class=\"language-javascript\">useRef()</code> is useful for more than the <code class=\"language-javascript\">ref</code> attribute. It\u2019s <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">handy for keeping any mutable value around</a> similar to how you\u2019d use instance fields in classes.</p>\n<p>This works because <code class=\"language-javascript\">useRef()</code> creates a plain JavaScript object. The only difference between <code class=\"language-javascript\">useRef()</code> and creating a <code class=\"language-javascript\">{current: ...}</code> object yourself is that <code class=\"language-javascript\">useRef</code> will give you the same ref object on every render.</p>\n<p>Keep in mind that <code class=\"language-javascript\">useRef</code> <em>doesn\u2019t</em> notify you when its content changes. Mutating the <code class=\"language-javascript\">.current</code> property doesn\u2019t cause a re-render. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use a <a href=\"/react/hooks-faq#how-can-i-measure-a-dom-node\">callback ref</a> instead.</p>\n<h3 id=\"useimperativehandle\"><a class=\"anchor\" href=\"/react/hooks-reference#useimperativehandle\"></a><code class=\"language-javascript\">useImperativeHandle</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> createHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>deps<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">useImperativeHandle</code> customizes the instance value that is exposed to parent components when using <code class=\"language-javascript\">ref</code>. As always, imperative code using refs should be avoided in most cases. <code class=\"language-javascript\">useImperativeHandle</code> should be used with <a href=\"/react/react-api#reactforwardref\"><code class=\"language-javascript\">forwardRef</code></a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nFancyInput <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>FancyInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this example, a parent component that renders <code class=\"language-javascript\">&lt;FancyInput ref={inputRef} /&gt;</code> would be able to call <code class=\"language-javascript\">inputRef.current.focus()</code>.</p>\n<h3 id=\"uselayouteffect\"><a class=\"anchor\" href=\"/react/hooks-reference#uselayouteffect\"></a><code class=\"language-javascript\">useLayoutEffect</code> </h3>\n<p>The signature is identical to <code class=\"language-javascript\">useEffect</code>, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside <code class=\"language-javascript\">useLayoutEffect</code> will be flushed synchronously, before the browser has a chance to paint.</p>\n<p>Prefer the standard <code class=\"language-javascript\">useEffect</code> when possible to avoid blocking visual updates.</p>\n<div class=\"blockquote\">\n<strong>Tip</strong>\n<p>If you\u2019re migrating code from a class component, note <code class=\"language-javascript\">useLayoutEffect</code> fires in the same phase as <code class=\"language-javascript\">componentDidMount</code> and <code class=\"language-javascript\">componentDidUpdate</code>. However, <strong>we recommend starting with <code class=\"language-javascript\">useEffect</code> first</strong> and only trying <code class=\"language-javascript\">useLayoutEffect</code> if that causes a problem.</p>\n<p>If you use server rendering, keep in mind that <em>neither</em> <code class=\"language-javascript\">useLayoutEffect</code> nor <code class=\"language-javascript\">useEffect</code> can run until the JavaScript is downloaded. This is why React warns when a server-rendered component contains <code class=\"language-javascript\">useLayoutEffect</code>. To fix this, either move that logic to <code class=\"language-javascript\">useEffect</code> (if it isn\u2019t necessary for the first render), or delay showing that component until after the client renders (if the HTML looks broken until <code class=\"language-javascript\">useLayoutEffect</code> runs).</p>\n<p>To exclude a component that needs layout effects from the server-rendered HTML, render it conditionally with <code class=\"language-javascript\">showChild &amp;&amp; &lt;Child /&gt;</code> and defer showing it with <code class=\"language-javascript\">useEffect(() =&gt; { setShowChild(true); }, [])</code>. This way, the UI doesn\u2019t appear broken before hydration.</p>\n</div>\n<h3 id=\"usedebugvalue\"><a class=\"anchor\" href=\"/react/hooks-reference#usedebugvalue\"></a><code class=\"language-javascript\">useDebugValue</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useDebugValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">useDebugValue</code> can be used to display a label for custom hooks in React DevTools.</p>\n<p>For example, consider the <code class=\"language-javascript\">useFriendStatus</code> custom Hook described in <a href=\"/react/hooks-custom\">\u201cBuilding Your Own Hooks\u201d</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Show a label in DevTools next to this Hook</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// e.g. \"FriendStatus: Online\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useDebugValue</span><span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Tip</strong>\n<p>We don\u2019t recommend adding debug values to every custom Hook. It\u2019s most valuable for custom Hooks that are part of shared libraries.</p>\n</div>\n<h4 id=\"defer-formatting-debug-values\"><a class=\"anchor\" href=\"/react/hooks-reference#defer-formatting-debug-values\"></a>Defer formatting debug values </h4>\n<p>In some cases formatting a value for display might be an expensive operation. It\u2019s also unnecessary unless a Hook is actually inspected.</p>\n<p>For this reason <code class=\"language-javascript\">useDebugValue</code> accepts a formatting function as an optional second parameter. This function is only called if the Hooks are inspected. It receives the debug value as a parameter and should return a formatted display value.</p>\n<p>For example a custom Hook that returned a <code class=\"language-javascript\">Date</code> value could avoid calling the <code class=\"language-javascript\">toDateString</code> function unnecessarily by passing the following formatter:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useDebugValue</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token parameter\">date</span> <span class=\"token operator\">=&gt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toDateString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"usedeferredvalue\"><a class=\"anchor\" href=\"/react/hooks-reference#usedeferredvalue\"></a><code class=\"language-javascript\">useDeferredValue</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> deferredValue <span class=\"token operator\">=</span> <span class=\"token function\">useDeferredValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">useDeferredValue</code> accepts a value and returns a new copy of the value that will defer to more urgent updates. If the current render is the result of an urgent update, like user input, React will return the previous value and then render the new value after the urgent render has completed.</p>\n<p>This hook is similar to user-space hooks which use debouncing or throttling to defer updates. The benefits to using <code class=\"language-javascript\">useDeferredValue</code> is that React will work on the update as soon as other work finishes (instead of waiting for an arbitrary amount of time), and like <a href=\"/react/react-api#starttransition\"><code class=\"language-javascript\">startTransition</code></a>, deferred values can suspend without triggering an unexpected fallback for existing content.</p>\n<h4 id=\"memoizing-deferred-children\"><a class=\"anchor\" href=\"/react/hooks-reference#memoizing-deferred-children\"></a>Memoizing deferred children </h4>\n<p><code class=\"language-javascript\">useDeferredValue</code> only defers the value that you pass to it. If you want to prevent a child component from re-rendering during an urgent update, you must also memoize that component with <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a> or <a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">React.useMemo</code></a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Typeahead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token function\">useSearchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> deferredQuery <span class=\"token operator\">=</span> <span class=\"token function\">useDeferredValue</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Memoizing tells React to only re-render when deferredQuery changes,</span>\n  <span class=\"token comment\">// not when query changes.</span>\n  <span class=\"token keyword\">const</span> suggestions <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SearchSuggestions</span></span> <span class=\"token attr-name\">query</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>deferredQuery<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>deferredQuery<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SearchInput</span></span> <span class=\"token attr-name\">query</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Loading results...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>suggestions<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Memoizing the children tells React that it only needs to re-render them when <code class=\"language-javascript\">deferredQuery</code> changes and not when <code class=\"language-javascript\">query</code> changes. This caveat is not unique to <code class=\"language-javascript\">useDeferredValue</code>, and it\u2019s the same pattern you would use with similar hooks that use debouncing or throttling.</p>\n<h3 id=\"usetransition\"><a class=\"anchor\" href=\"/react/hooks-reference#usetransition\"></a><code class=\"language-javascript\">useTransition</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPending<span class=\"token punctuation\">,</span> startTransition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Returns a stateful value for the pending state of the transition, and a function to start it.</p>\n<p><code class=\"language-javascript\">startTransition</code> lets you mark updates in the provided callback as transitions:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">isPending</code> indicates when a transition is active to show a pending state:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPending<span class=\"token punctuation\">,</span> startTransition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=&gt;</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isPending <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Spinner</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Updates in a transition yield to more urgent updates such as clicks.</p>\n<p>Updates in a transition will not show a fallback for re-suspended content. This allows the user to continue interacting with the current content while rendering the update.</p>\n</div>\n<h3 id=\"useid\"><a class=\"anchor\" href=\"/react/hooks-reference#useid\"></a><code class=\"language-javascript\">useId</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">useId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">useId</code> is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p><code class=\"language-javascript\">useId</code> is <strong>not</strong> for generating <a href=\"/react/lists-and-keys#keys\">keys in a list</a>. Keys should be generated from your data.</p>\n</div>\n<p>For a basic example, pass the <code class=\"language-javascript\">id</code> directly to the elements that need it:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Checkbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">useId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Do you like React?</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>react<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For multiple IDs in the same component, append a suffix using the same <code class=\"language-javascript\">id</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NameFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">useId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'-firstName'</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">First Name</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'-firstName'</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'-lastName'</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Last Name</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'-lastName'</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">useId</code> generates a string that includes the <code class=\"language-javascript\">:</code> token. This helps ensure that the token is unique, but is not supported in CSS selectors or APIs like <code class=\"language-javascript\">querySelectorAll</code>.</p>\n<p><code class=\"language-javascript\">useId</code> supports an <code class=\"language-javascript\">identifierPrefix</code> to prevent collisions in multi-root apps. To configure, see the options for <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">hydrateRoot</code></a> and <a href=\"/react/react-dom-server\"><code class=\"language-javascript\">ReactDOMServer</code></a>.</p>\n</div>\n<h2 id=\"library-hooks\"><a class=\"anchor\" href=\"/react/hooks-reference#library-hooks\"></a>Library Hooks </h2>\n<p>The following Hooks are provided for library authors to integrate libraries deeply into the React model, and are not typically used in application code.</p>\n<h3 id=\"usesyncexternalstore\"><a class=\"anchor\" href=\"/react/hooks-reference#usesyncexternalstore\"></a><code class=\"language-javascript\">useSyncExternalStore</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useSyncExternalStore</span><span class=\"token punctuation\">(</span>subscribe<span class=\"token punctuation\">,</span> getSnapshot<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> getServerSnapshot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">useSyncExternalStore</code> is a hook recommended for reading and subscribing from external data sources in a way that\u2019s compatible with concurrent rendering features like selective hydration and time slicing.</p>\n<p>This method returns the value of the store and accepts three arguments:</p>\n<ul>\n<li><code class=\"language-javascript\">subscribe</code>: function to register a callback that is called whenever the store changes.</li>\n<li><code class=\"language-javascript\">getSnapshot</code>: function that returns the current value of the store.</li>\n<li><code class=\"language-javascript\">getServerSnapshot</code>: function that returns the snapshot used during server rendering.</li>\n</ul>\n<p>The most basic example simply subscribes to the entire store:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useSyncExternalStore</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span>getSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, you can also subscribe to a specific field:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> selectedField <span class=\"token operator\">=</span> <span class=\"token function\">useSyncExternalStore</span><span class=\"token punctuation\">(</span>\n  store<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>selectedField<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When server rendering, you must serialize the store value used on the server, and provide it to <code class=\"language-javascript\">useSyncExternalStore</code>. React will use this snapshot during hydration to prevent server mismatches:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> selectedField <span class=\"token operator\">=</span> <span class=\"token function\">useSyncExternalStore</span><span class=\"token punctuation\">(</span>\n  store<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>selectedField<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">INITIAL_SERVER_SNAPSHOT</span><span class=\"token punctuation\">.</span>selectedField<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">getSnapshot</code> must return a cached value. If getSnapshot is called multiple times in a row, it must return the same exact value unless there was a store update in between.</p>\n<p>A shim is provided for supporting multiple React versions published as <code class=\"language-javascript\">use-sync-external-store/shim</code>. This shim will prefer <code class=\"language-javascript\">useSyncExternalStore</code> when available, and fallback to a user-space implementation when it\u2019s not.</p>\n<p>As a convenience, we also provide a version of the API with automatic support for memoizing the result of getSnapshot published as <code class=\"language-javascript\">use-sync-external-store/with-selector</code>.</p>\n</div>\n<h3 id=\"useinsertioneffect\"><a class=\"anchor\" href=\"/react/hooks-reference#useinsertioneffect\"></a><code class=\"language-javascript\">useInsertionEffect</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useInsertionEffect</span><span class=\"token punctuation\">(</span>didUpdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The signature is identical to <code class=\"language-javascript\">useEffect</code>, but it fires synchronously <em>before</em> all DOM mutations. Use this to inject styles into the DOM before reading layout in <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a>. Since this hook is limited in scope, this hook does not have access to refs and cannot schedule updates.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">useInsertionEffect</code> should be limited to css-in-js library authors. Prefer <a href=\"/react/hooks-reference#useeffect\"><code class=\"language-javascript\">useEffect</code></a> or <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a> instead.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/hooks-reference.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-reference", "nav": ["/react/hooks-custom", "/react/hooks-faq"]}, {"key": "8. FAQ sugli Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><em>Hooks</em> are a new addition in React 16.8. They let you use state and other React features without writing a class.</p>\n<p>This page answers some of the frequently asked questions about <a href=\"/react/hooks-overview\">Hooks</a>.</p>\n<!--\n  if you ever need to regenerate this, this snippet in the devtools console might help:\n\n  $$('.anchor').map(a =>\n    `${' '.repeat(2 * +a.parentNode.nodeName.slice(1))}` +\n    `[${a.parentNode.textContent}](${a.getAttribute('href')})`\n  ).join('\\n')\n-->\n<ul>\n<li>\n<p><a href=\"/react/hooks-faq#adoption-strategy-adoption-strategy\">Adoption Strategy {#adoption-strategy}</a></p>\n<ul>\n<li><a href=\"/react/hooks-faq#which-versions-of-react-include-hooks-which-versions-of-react-include-hooks\">Which versions of React include Hooks? {#which-versions-of-react-include-hooks}</a></li>\n<li><a href=\"/react/hooks-faq#do-i-need-to-rewrite-all-my-class-components-do-i-need-to-rewrite-all-my-class-components\">Do I need to rewrite all my class components? {#do-i-need-to-rewrite-all-my-class-components}</a></li>\n<li><a href=\"/react/hooks-faq#what-can-i-do-with-hooks-that-i-couldnt-with-classes-what-can-i-do-with-hooks-that-i-couldnt-with-classes\">What can I do with Hooks that I couldn\u2019t with classes? {#what-can-i-do-with-hooks-that-i-couldnt-with-classes}</a></li>\n<li><a href=\"/react/hooks-faq#how-much-of-my-react-knowledge-stays-relevant-how-much-of-my-react-knowledge-stays-relevant\">How much of my React knowledge stays relevant? {#how-much-of-my-react-knowledge-stays-relevant}</a></li>\n<li><a href=\"/react/hooks-faq#should-i-use-hooks-classes-or-a-mix-of-both-should-i-use-hooks-classes-or-a-mix-of-both\">Should I use Hooks, classes, or a mix of both? {#should-i-use-hooks-classes-or-a-mix-of-both}</a></li>\n<li><a href=\"/react/hooks-faq#do-hooks-cover-all-use-cases-for-classes-do-hooks-cover-all-use-cases-for-classes\">Do Hooks cover all use cases for classes? {#do-hooks-cover-all-use-cases-for-classes}</a></li>\n<li><a href=\"/react/hooks-faq#do-hooks-replace-render-props-and-higher-order-components-do-hooks-replace-render-props-and-higher-order-components\">Do Hooks replace render props and higher-order components? {#do-hooks-replace-render-props-and-higher-order-components}</a></li>\n<li><a href=\"/react/hooks-faq#what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router-what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router\">What do Hooks mean for popular APIs like Redux <code class=\"language-javascript\">connect()</code> and React Router? {#what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router}</a></li>\n<li><a href=\"/react/hooks-faq#do-hooks-work-with-static-typing-do-hooks-work-with-static-typing\">Do Hooks work with static typing? {#do-hooks-work-with-static-typing}</a></li>\n<li><a href=\"/react/hooks-faq#how-to-test-components-that-use-hooks-how-to-test-components-that-use-hooks\">How to test components that use Hooks? {#how-to-test-components-that-use-hooks}</a></li>\n<li><a href=\"/react/hooks-faq#what-exactly-do-the-lint-rules-enforce-what-exactly-do-the-lint-rules-enforce\">What exactly do the lint rules enforce? {#what-exactly-do-the-lint-rules-enforce}</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-faq#from-classes-to-hooks-from-classes-to-hooks\">From Classes to Hooks {#from-classes-to-hooks}</a></p>\n<ul>\n<li><a href=\"/react/hooks-faq#how-do-lifecycle-methods-correspond-to-hooks-how-do-lifecycle-methods-correspond-to-hooks\">How do lifecycle methods correspond to Hooks? {#how-do-lifecycle-methods-correspond-to-hooks}</a></li>\n<li><a href=\"/react/hooks-faq#how-can-i-do-data-fetching-with-hooks\">How can I do data fetching with Hooks?</a></li>\n<li><a href=\"/react/hooks-faq#is-there-something-like-instance-variables-is-there-something-like-instance-variables\">Is there something like instance variables? {#is-there-something-like-instance-variables}</a></li>\n<li><a href=\"/react/hooks-faq#should-i-use-one-or-many-state-variables-should-i-use-one-or-many-state-variables\">Should I use one or many state variables? {#should-i-use-one-or-many-state-variables}</a></li>\n<li><a href=\"/react/hooks-faq#can-i-run-an-effect-only-on-updates-can-i-run-an-effect-only-on-updates\">Can I run an effect only on updates? {#can-i-run-an-effect-only-on-updates}</a></li>\n<li><a href=\"/react/hooks-faq#how-to-get-the-previous-props-or-state-how-to-get-the-previous-props-or-state\">How to get the previous props or state? {#how-to-get-the-previous-props-or-state}</a></li>\n<li><a href=\"/react/hooks-faq#why-am-i-seeing-stale-props-or-state-inside-my-function-why-am-i-seeing-stale-props-or-state-inside-my-function\">Why am I seeing stale props or state inside my function? {#why-am-i-seeing-stale-props-or-state-inside-my-function}</a></li>\n<li><a href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops-how-do-i-implement-getderivedstatefromprops\">How do I implement <code class=\"language-javascript\">getDerivedStateFromProps</code>? {#how-do-i-implement-getderivedstatefromprops}</a></li>\n<li><a href=\"/react/hooks-faq#is-there-something-like-forceupdate-is-there-something-like-forceupdate\">Is there something like forceUpdate? {#is-there-something-like-forceupdate}</a></li>\n<li><a href=\"/react/hooks-faq#can-i-make-a-ref-to-a-function-component-can-i-make-a-ref-to-a-function-component\">Can I make a ref to a function component? {#can-i-make-a-ref-to-a-function-component}</a></li>\n<li><a href=\"/react/hooks-faq#how-can-i-measure-a-dom-node-how-can-i-measure-a-dom-node\">How can I measure a DOM node? {#how-can-i-measure-a-dom-node}</a></li>\n<li><a href=\"/react/hooks-faq#what-does-const-thing-setthing--usestate-mean-what-does-const-thing-setthing--usestate-mean\">What does <code class=\"language-javascript\">const [thing, setThing] = useState()</code> mean? {#what-does-const-thing-setthing\u2014usestate-mean}</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-faq#performance-optimizations-performance-optimizations\">Performance Optimizations {#performance-optimizations}</a></p>\n<ul>\n<li><a href=\"/react/hooks-faq#can-i-skip-an-effect-on-updates-can-i-skip-an-effect-on-updates\">Can I skip an effect on updates? {#can-i-skip-an-effect-on-updates}</a></li>\n<li><a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies-is-it-safe-to-omit-functions-from-the-list-of-dependencies\">Is it safe to omit functions from the list of dependencies? {#is-it-safe-to-omit-functions-from-the-list-of-dependencies}</a></li>\n<li><a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">What can I do if my effect dependencies change too often?</a></li>\n<li><a href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate-how-do-i-implement-shouldcomponentupdate\">How do I implement <code class=\"language-javascript\">shouldComponentUpdate</code>? {#how-do-i-implement-shouldcomponentupdate}</a></li>\n<li><a href=\"/react/hooks-faq#how-to-memoize-calculations-how-to-memoize-calculations\">How to memoize calculations? {#how-to-memoize-calculations}</a></li>\n<li><a href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily-how-to-create-expensive-objects-lazily\">How to create expensive objects lazily? {#how-to-create-expensive-objects-lazily}</a></li>\n<li><a href=\"/react/hooks-faq#are-hooks-slow-because-of-creating-functions-in-render-are-hooks-slow-because-of-creating-functions-in-render\">Are Hooks slow because of creating functions in render? {#are-hooks-slow-because-of-creating-functions-in-render}</a></li>\n<li><a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down-how-to-avoid-passing-callbacks-down\">How to avoid passing callbacks down? {#how-to-avoid-passing-callbacks-down}</a></li>\n<li><a href=\"/react/hooks-faq#how-to-read-an-often-changing-value-from-usecallback-how-to-read-an-often-changing-value-from-usecallback\">How to read an often-changing value from <code class=\"language-javascript\">useCallback</code>? {#how-to-read-an-often-changing-value-from-usecallback}</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-faq#under-the-hood-under-the-hood\">Under the Hood {#under-the-hood}</a></p>\n<ul>\n<li><a href=\"/react/hooks-faq#how-does-react-associate-hook-calls-with-components-how-does-react-associate-hook-calls-with-components\">How does React associate Hook calls with components? {#how-does-react-associate-hook-calls-with-components}</a></li>\n<li><a href=\"/react/hooks-faq#what-is-the-prior-art-for-hooks-what-is-the-prior-art-for-hooks\">What is the prior art for Hooks? {#what-is-the-prior-art-for-hooks}</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"adoption-strategy\"><a class=\"anchor\" href=\"/react/hooks-faq#adoption-strategy\"></a>Adoption Strategy </h2>\n<h3 id=\"which-versions-of-react-include-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#which-versions-of-react-include-hooks\"></a>Which versions of React include Hooks? </h3>\n<p>Starting with 16.8.0, React includes a stable implementation of React Hooks for:</p>\n<ul>\n<li>React DOM</li>\n<li>React Native</li>\n<li>React DOM Server</li>\n<li>React Test Renderer</li>\n<li>React Shallow Renderer</li>\n</ul>\n<p>Note that <strong>to enable Hooks, all React packages need to be 16.8.0 or higher</strong>. Hooks won\u2019t work if you forget to update, for example, React DOM.</p>\n<p><a class=\"external-link\" href=\"https://reactnative.dev/blog/2019/03/12/releasing-react-native-059\">React Native 0.59</a> and above support Hooks.</p>\n<h3 id=\"do-i-need-to-rewrite-all-my-class-components\"><a class=\"anchor\" href=\"/react/hooks-faq#do-i-need-to-rewrite-all-my-class-components\"></a>Do I need to rewrite all my class components? </h3>\n<p>No. There are <a href=\"/react/hooks-intro#gradual-adoption-strategy\">no plans</a> to remove classes from React \u2014 we all need to keep shipping products and can\u2019t afford rewrites. We recommend trying Hooks in new code.</p>\n<h3 id=\"what-can-i-do-with-hooks-that-i-couldnt-with-classes\"><a class=\"anchor\" href=\"/react/hooks-faq#what-can-i-do-with-hooks-that-i-couldnt-with-classes\"></a>What can I do with Hooks that I couldn\u2019t with classes? </h3>\n<p>Hooks offer a powerful and expressive new way to reuse functionality between components. <a href=\"/react/hooks-custom\">\u201cBuilding Your Own Hooks\u201d</a> provides a glimpse of what\u2019s possible. <a class=\"external-link\" href=\"https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889\">This article</a> by a React core team member dives deeper into the new capabilities unlocked by Hooks.</p>\n<h3 id=\"how-much-of-my-react-knowledge-stays-relevant\"><a class=\"anchor\" href=\"/react/hooks-faq#how-much-of-my-react-knowledge-stays-relevant\"></a>How much of my React knowledge stays relevant? </h3>\n<p>Hooks are a more direct way to use the React features you already know \u2014 such as state, lifecycle, context, and refs. They don\u2019t fundamentally change how React works, and your knowledge of components, props, and top-down data flow is just as relevant.</p>\n<p>Hooks do have a learning curve of their own. If there\u2019s something missing in this documentation, <a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/issues/new\">raise an issue</a> and we\u2019ll try to help.</p>\n<h3 id=\"should-i-use-hooks-classes-or-a-mix-of-both\"><a class=\"anchor\" href=\"/react/hooks-faq#should-i-use-hooks-classes-or-a-mix-of-both\"></a>Should I use Hooks, classes, or a mix of both? </h3>\n<p>When you\u2019re ready, we\u2019d encourage you to start trying Hooks in new components you write. Make sure everyone on your team is on board with using them and familiar with this documentation. We don\u2019t recommend rewriting your existing classes to Hooks unless you planned to rewrite them anyway (e.g. to fix bugs).</p>\n<p>You can\u2019t use Hooks <em>inside</em> a class component, but you can definitely mix classes and function components with Hooks in a single tree. Whether a component is a class or a function that uses Hooks is an implementation detail of that component. In the longer term, we expect Hooks to be the primary way people write React components.</p>\n<h3 id=\"do-hooks-cover-all-use-cases-for-classes\"><a class=\"anchor\" href=\"/react/hooks-faq#do-hooks-cover-all-use-cases-for-classes\"></a>Do Hooks cover all use cases for classes? </h3>\n<p>Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon <code class=\"language-javascript\">getSnapshotBeforeUpdate</code>, <code class=\"language-javascript\">getDerivedStateFromError</code> and <code class=\"language-javascript\">componentDidCatch</code> lifecycles yet, but we plan to add them soon.</p>\n<h3 id=\"do-hooks-replace-render-props-and-higher-order-components\"><a class=\"anchor\" href=\"/react/hooks-faq#do-hooks-replace-render-props-and-higher-order-components\"></a>Do Hooks replace render props and higher-order components? </h3>\n<p>Often, render props and higher-order components render only a single child. We think Hooks are a simpler way to serve this use case. There is still a place for both patterns (for example, a virtual scroller component might have a <code class=\"language-javascript\">renderItem</code> prop, or a visual container component might have its own DOM structure). But in most cases, Hooks will be sufficient and can help reduce nesting in your tree.</p>\n<h3 id=\"what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router\"><a class=\"anchor\" href=\"/react/hooks-faq#what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router\"></a>What do Hooks mean for popular APIs like Redux <code class=\"language-javascript\">connect()</code> and React Router? </h3>\n<p>You can continue to use the exact same APIs as you always have; they\u2019ll continue to work.</p>\n<p>React Redux since v7.1.0 <a class=\"external-link\" href=\"https://react-redux.js.org/api/hooks\">supports Hooks API</a> and exposes hooks like <code class=\"language-javascript\">useDispatch</code> or <code class=\"language-javascript\">useSelector</code>.</p>\n<p>React Router <a class=\"external-link\" href=\"https://reacttraining.com/react-router/web/api/Hooks\">supports hooks</a> since v5.1.</p>\n<p>Other libraries might support hooks in the future too.</p>\n<h3 id=\"do-hooks-work-with-static-typing\"><a class=\"anchor\" href=\"/react/hooks-faq#do-hooks-work-with-static-typing\"></a>Do Hooks work with static typing? </h3>\n<p>Hooks were designed with static typing in mind. Because they\u2019re functions, they are easier to type correctly than patterns like higher-order components. The latest Flow and TypeScript React definitions include support for React Hooks.</p>\n<p>Importantly, custom Hooks give you the power to constrain React API if you\u2019d like to type them more strictly in some way. React gives you the primitives, but you can combine them in different ways than what we provide out of the box.</p>\n<h3 id=\"how-to-test-components-that-use-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-test-components-that-use-hooks\"></a>How to test components that use Hooks? </h3>\n<p>From React\u2019s point of view, a component using Hooks is just a regular component. If your testing solution doesn\u2019t rely on React internals, testing components with Hooks shouldn\u2019t be different from how you normally test components.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p><a href=\"/react/testing-recipes\">Testing Recipes</a> include many examples that you can copy and paste.</p>\n</div>\n<p>For example, let\u2019s say we have this counter component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Click me\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We\u2019ll test it using React DOM. To make sure that the behavior matches what happens in the browser, we\u2019ll wrap the code rendering and updating it into <a href=\"/react/test-utils#act\"><code class=\"language-javascript\">ReactTestUtils.act()</code></a> calls:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'./Counter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can render and update a counter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Test first render and effect</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 0 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 0 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Test second render and effect</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 1 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 1 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The calls to <code class=\"language-javascript\">act()</code> will also flush the effects inside of them.</p>\n<p>If you need to test a custom Hook, you can do so by creating a component in your test, and using your Hook from it. Then you can test the component you wrote.</p>\n<p>To reduce the boilerplate, we recommend using <a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a> which is designed to encourage writing tests that use your components as the end users do.</p>\n<p>For more information, check out <a href=\"/react/testing-recipes\">Testing Recipes</a>.</p>\n<h3 id=\"what-exactly-do-the-lint-rules-enforce\"><a class=\"anchor\" href=\"/react/hooks-faq#what-exactly-do-the-lint-rules-enforce\"></a>What exactly do the <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">lint rules</a> enforce? </h3>\n<p>We provide an <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">ESLint plugin</a> that enforces <a href=\"/react/hooks-rules\">rules of Hooks</a> to avoid bugs. It assumes that any function starting with \u201d<code class=\"language-javascript\">use</code>\u201d and a capital letter right after it is a Hook. We recognize this heuristic isn\u2019t perfect and there may be some false positives, but without an ecosystem-wide convention there is just no way to make Hooks work well \u2014 and longer names will discourage people from either adopting Hooks or following the convention.</p>\n<p>In particular, the rule enforces that:</p>\n<ul>\n<li>Calls to Hooks are either inside a <code class=\"language-javascript\">PascalCase</code> function (assumed to be a component) or another <code class=\"language-javascript\">useSomething</code> function (assumed to be a custom Hook).</li>\n<li>Hooks are called in the same order on every render.</li>\n</ul>\n<p>There are a few more heuristics, and they might change over time as we fine-tune the rule to balance finding bugs with avoiding false positives.</p>\n<h2 id=\"from-classes-to-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#from-classes-to-hooks\"></a>From Classes to Hooks </h2>\n<h3 id=\"how-do-lifecycle-methods-correspond-to-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#how-do-lifecycle-methods-correspond-to-hooks\"></a>How do lifecycle methods correspond to Hooks? </h3>\n<ul>\n<li><code class=\"language-javascript\">constructor</code>: Function components don\u2019t need a constructor. You can initialize the state in the <a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a> call. If computing the initial state is expensive, you can pass a function to <code class=\"language-javascript\">useState</code>.</li>\n<li><code class=\"language-javascript\">getDerivedStateFromProps</code>: Schedule an update <a href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\">while rendering</a> instead.</li>\n<li><code class=\"language-javascript\">shouldComponentUpdate</code>: See <code class=\"language-javascript\">React.memo</code> <a href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\">below</a>.</li>\n<li><code class=\"language-javascript\">render</code>: This is the function component body itself.</li>\n<li><code class=\"language-javascript\">componentDidMount</code>, <code class=\"language-javascript\">componentDidUpdate</code>, <code class=\"language-javascript\">componentWillUnmount</code>: The <a href=\"/react/hooks-reference#useeffect\"><code class=\"language-javascript\">useEffect</code> Hook</a> can express all combinations of these (including <a href=\"/react/hooks-faq#can-i-skip-an-effect-on-updates\">less</a> <a href=\"/react/hooks-faq#can-i-run-an-effect-only-on-updates\">common</a> cases).</li>\n<li><code class=\"language-javascript\">getSnapshotBeforeUpdate</code>, <code class=\"language-javascript\">componentDidCatch</code> and <code class=\"language-javascript\">getDerivedStateFromError</code>: There are no Hook equivalents for these methods yet, but they will be added soon.</li>\n</ul>\n<h3 id=\"how-can-i-do-data-fetching-with-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#how-can-i-do-data-fetching-with-hooks\"></a>How can I do data fetching with Hooks? </h3>\n<p>Here is a <a class=\"external-link\" href=\"https://codesandbox.io/s/jvvkoo8pq3\">small demo</a> to get you started. To learn more, check out <a class=\"external-link\" href=\"https://www.robinwieruch.de/react-hooks-fetch-data/\">this article</a> about data fetching with Hooks.</p>\n<h3 id=\"is-there-something-like-instance-variables\"><a class=\"anchor\" href=\"/react/hooks-faq#is-there-something-like-instance-variables\"></a>Is there something like instance variables? </h3>\n<p>Yes! The <a href=\"/react/hooks-reference#useref\"><code class=\"language-javascript\">useRef()</code></a> Hook isn\u2019t just for DOM refs. The \u201cref\u201d object is a generic container whose <code class=\"language-javascript\">current</code> property is mutable and can hold any value, similar to an instance property on a class.</p>\n<p>You can write to it from inside <code class=\"language-javascript\">useEffect</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> intervalRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    intervalRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we just wanted to set an interval, we wouldn\u2019t need the ref (<code class=\"language-javascript\">id</code> could be local to the effect), but it\u2019s useful if we want to clear the interval from an event handler:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleCancelClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Conceptually, you can think of refs as similar to instance variables in a class. Unless you\u2019re doing <a href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\">lazy initialization</a>, avoid setting refs during rendering \u2014 this can lead to surprising behavior. Instead, typically you want to modify refs in event handlers and effects.</p>\n<h3 id=\"should-i-use-one-or-many-state-variables\"><a class=\"anchor\" href=\"/react/hooks-faq#should-i-use-one-or-many-state-variables\"></a>Should I use one or many state variables? </h3>\n<p>If you\u2019re coming from classes, you might be tempted to always call <code class=\"language-javascript\">useState()</code> once and put all state into a single object. You can do it if you\u2019d like. Here is an example of a component that follows the mouse movement. We keep its position and size in the local state:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now let\u2019s say we want to write some logic that changes <code class=\"language-javascript\">left</code> and <code class=\"language-javascript\">top</code> when the user moves their mouse. Note how we have to merge these fields into the previous state object manually:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleWindowMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Spreading \"...state\" ensures we don't \"lose\" width and height</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Note: this implementation is a bit simplified</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> handleWindowMouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> handleWindowMouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>This is because when we update a state variable, we <em>replace</em> its value. This is different from <code class=\"language-javascript\">this.setState</code> in a class, which <em>merges</em> the updated fields into the object.</p>\n<p>If you miss automatic merging, you could write a custom <code class=\"language-javascript\">useLegacyState</code> Hook that merges object state updates. However, <strong>we recommend to split state into multiple state variables based on which values tend to change together.</strong></p>\n<p>For example, we could split our component state into <code class=\"language-javascript\">position</code> and <code class=\"language-javascript\">size</code> objects, and always replace the <code class=\"language-javascript\">position</code> with no need for merging:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">,</span> setPosition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">,</span> setSize<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleWindowMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Separating independent state variables also has another benefit. It makes it easy to later extract some related logic into a custom Hook, for example:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> position <span class=\"token operator\">=</span> <span class=\"token function\">useWindowPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">,</span> setSize<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">,</span> setPosition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> position<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note how we were able to move the <code class=\"language-javascript\">useState</code> call for the <code class=\"language-javascript\">position</code> state variable and the related effect into a custom Hook without changing their code. If all state was in a single object, extracting it would be more difficult.</p>\n<p>Both putting all state in a single <code class=\"language-javascript\">useState</code> call, and having a <code class=\"language-javascript\">useState</code> call per each field can work. Components tend to be most readable when you find a balance between these two extremes, and group related state into a few independent state variables. If the state logic becomes complex, we recommend <a href=\"/react/hooks-reference#usereducer\">managing it with a reducer</a> or a custom Hook.</p>\n<h3 id=\"can-i-run-an-effect-only-on-updates\"><a class=\"anchor\" href=\"/react/hooks-faq#can-i-run-an-effect-only-on-updates\"></a>Can I run an effect only on updates? </h3>\n<p>This is a rare use case. If you need it, you can <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">use a mutable ref</a> to manually store a boolean value corresponding to whether you are on the first or a subsequent render, then check that flag in your effect. (If you find yourself doing this often, you could create a custom Hook for it.)</p>\n<h3 id=\"how-to-get-the-previous-props-or-state\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-get-the-previous-props-or-state\"></a>How to get the previous props or state? </h3>\n<p>There are two cases in which you might want to get previous props or state.</p>\n<p>Sometimes, you need previous props to <strong>clean up an effect.</strong> For example, you might have an effect that subscribes to a socket based on the <code class=\"language-javascript\">userId</code> prop. If the <code class=\"language-javascript\">userId</code> prop changes, you want to unsubscribe from the <em>previous</em> <code class=\"language-javascript\">userId</code> and subscribe to the <em>next</em> one. You don\u2019t need to do anything special for this to work:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToSocket</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromSocket</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the above example, if <code class=\"language-javascript\">userId</code> changes from <code class=\"language-javascript\">3</code> to <code class=\"language-javascript\">4</code>, <code class=\"language-javascript\">ChatAPI.unsubscribeFromSocket(3)</code> will run first, and then <code class=\"language-javascript\">ChatAPI.subscribeToSocket(4)</code> will run. There is no need to get \u201cprevious\u201d <code class=\"language-javascript\">userId</code> because the cleanup function will capture it in a closure.</p>\n<p>Other times, you might need to <strong>adjust state based on a change in props or other state</strong>. This is rarely needed and is usually a sign you have some duplicate or redundant state. However, in the rare case that you need this pattern, you can <a href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\">store previous state or props in state and update them during rendering</a>.</p>\n<p>We have previously suggested a custom Hook called <code class=\"language-javascript\">usePrevious</code> to hold the previous value. However, we\u2019ve found that most use cases fall into the two patterns described above. If your use case is different, you can <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">hold a value in a ref</a> and manually update it when needed. Avoid reading and updating refs during rendering because this makes your component\u2019s behavior difficult to predict and understand.</p>\n<h3 id=\"why-am-i-seeing-stale-props-or-state-inside-my-function\"><a class=\"anchor\" href=\"/react/hooks-faq#why-am-i-seeing-stale-props-or-state-inside-my-function\"></a>Why am I seeing stale props or state inside my function? </h3>\n<p>Any function inside a component, including event handlers and effects, \u201csees\u201d the props and state from the render it was created in. For example, consider code like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleAlertClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked on: '</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Click me\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleAlertClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Show alert\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you first click \u201cShow alert\u201d and then increment the counter, the alert will show the <code class=\"language-javascript\">count</code> variable <strong>at the time you clicked the \u201cShow alert\u201d button</strong>. This prevents bugs caused by the code assuming props and state don\u2019t change.</p>\n<p>If you intentionally want to read the <em>latest</em> state from some asynchronous callback, you could keep it in <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">a ref</a>, mutate it, and read from it.</p>\n<p>Finally, another possible reason you\u2019re seeing stale props or state is if you use the \u201cdependency array\u201d optimization but didn\u2019t correctly specify all the dependencies. For example, if an effect specifies <code class=\"language-javascript\">[]</code> as the second argument but reads <code class=\"language-javascript\">someProp</code> inside, it will keep \u201cseeing\u201d the initial value of <code class=\"language-javascript\">someProp</code>. The solution is to either remove the dependency array, or to fix it. Here\u2019s <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">how you can deal with functions</a>, and here\u2019s <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">other common strategies</a> to run effects less often without incorrectly skipping dependencies.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>We provide an <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> ESLint rule as a part of the <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a> package. It warns when dependencies are specified incorrectly and suggests a fix.</p>\n</div>\n<h3 id=\"how-do-i-implement-getderivedstatefromprops\"><a class=\"anchor\" href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\"></a>How do I implement <code class=\"language-javascript\">getDerivedStateFromProps</code>? </h3>\n<p>While you probably <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">don\u2019t need it</a>, in rare cases that you do (such as implementing a <code class=\"language-javascript\">&lt;Transition&gt;</code> component), you can update the state right during rendering. React will re-run the component with updated state immediately after exiting the first render so it wouldn\u2019t be expensive.</p>\n<p>Here, we store the previous value of the <code class=\"language-javascript\">row</code> prop in a state variable so that we can compare:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ScrollView</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>row<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isScrollingDown<span class=\"token punctuation\">,</span> setIsScrollingDown<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>prevRow<span class=\"token punctuation\">,</span> setPrevRow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">!==</span> prevRow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Row changed since last render. Update isScrollingDown.</span>\n    <span class=\"token function\">setIsScrollingDown</span><span class=\"token punctuation\">(</span>prevRow <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> row <span class=\"token operator\">&gt;</span> prevRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setPrevRow</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Scrolling down: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>isScrollingDown<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This might look strange at first, but an update during rendering is exactly what <code class=\"language-javascript\">getDerivedStateFromProps</code> has always been like conceptually.</p>\n<h3 id=\"is-there-something-like-forceupdate\"><a class=\"anchor\" href=\"/react/hooks-faq#is-there-something-like-forceupdate\"></a>Is there something like forceUpdate? </h3>\n<p>Both <code class=\"language-javascript\">useState</code> and <code class=\"language-javascript\">useReducer</code> Hooks <a href=\"/react/hooks-reference#bailing-out-of-a-state-update\">bail out of updates</a> if the next value is the same as the previous one. Mutating state in place and calling <code class=\"language-javascript\">setState</code> will not cause a re-render.</p>\n<p>Normally, you shouldn\u2019t mutate local state in React. However, as an escape hatch, you can use an incrementing counter to force a re-render even if the state has not changed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>ignored<span class=\"token punctuation\">,</span> forceUpdate<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Try to avoid this pattern if possible.</p>\n<h3 id=\"can-i-make-a-ref-to-a-function-component\"><a class=\"anchor\" href=\"/react/hooks-faq#can-i-make-a-ref-to-a-function-component\"></a>Can I make a ref to a function component? </h3>\n<p>While you shouldn\u2019t need this often, you may expose some imperative methods to a parent component with the <a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a> Hook.</p>\n<h3 id=\"how-can-i-measure-a-dom-node\"><a class=\"anchor\" href=\"/react/hooks-faq#how-can-i-measure-a-dom-node\"></a>How can I measure a DOM node? </h3>\n<p>One rudimentary way to measure the position or size of a DOM node is to use a <a href=\"/react/refs-and-the-dom#callback-refs\">callback ref</a>. React will call that callback whenever the ref gets attached to a different node. Here is a <a class=\"external-link\" href=\"https://codesandbox.io/s/l7m0v5x4v9\">small demo</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MeasureExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">,</span> setHeight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> measuredRef <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>measuredRef<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The above header is </span><span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">px tall</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We didn\u2019t choose <code class=\"language-javascript\">useRef</code> in this example because an object ref doesn\u2019t notify us about <em>changes</em> to the current ref value. Using a callback ref ensures that <a class=\"external-link\" href=\"https://codesandbox.io/s/818zzk8m78\">even if a child component displays the measured node later</a> (e.g. in response to a click), we still get notified about it in the parent component and can update the measurements.</p>\n<p>Note that we pass <code class=\"language-javascript\">[]</code> as a dependency array to <code class=\"language-javascript\">useCallback</code>. This ensures that our ref callback doesn\u2019t change between the re-renders, and so React won\u2019t call it unnecessarily.</p>\n<p>In this example, the callback ref will be called only when the component mounts and unmounts, since the rendered <code class=\"language-javascript\">&lt;h1&gt;</code> component stays present throughout any rerenders. If you want to be notified any time a component resizes, you may want to use <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"><code class=\"language-javascript\">ResizeObserver</code></a> or a third-party Hook built on it.</p>\n<p>If you want, you can <a class=\"external-link\" href=\"https://codesandbox.io/s/m5o42082xy\">extract this logic</a> into a reusable Hook:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MeasureExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rect<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>rect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The above header is </span><span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">px tall</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rect<span class=\"token punctuation\">,</span> setRect<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setRect</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>rect<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"what-does-const-thing-setthing--usestate-mean\"><a class=\"anchor\" href=\"/react/hooks-faq#what-does-const-thing-setthing--usestate-mean\"></a>What does <code class=\"language-javascript\">const [thing, setThing] = useState()</code> mean? </h3>\n<p>If you\u2019re not familiar with this syntax, check out the <a href=\"/react/hooks-state#tip-what-do-square-brackets-mean\">explanation</a> in the State Hook documentation.</p>\n<h2 id=\"performance-optimizations\"><a class=\"anchor\" href=\"/react/hooks-faq#performance-optimizations\"></a>Performance Optimizations </h2>\n<h3 id=\"can-i-skip-an-effect-on-updates\"><a class=\"anchor\" href=\"/react/hooks-faq#can-i-skip-an-effect-on-updates\"></a>Can I skip an effect on updates? </h3>\n<p>Yes. See <a href=\"/react/hooks-reference#conditionally-firing-an-effect\">conditionally firing an effect</a>. Note that forgetting to handle updates often <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">introduces bugs</a>, which is why this isn\u2019t the default behavior.</p>\n<h3 id=\"is-it-safe-to-omit-functions-from-the-list-of-dependencies\"><a class=\"anchor\" href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\"></a>Is it safe to omit functions from the list of dependencies? </h3>\n<p>Generally speaking, no.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> someProp <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \ud83d\udd34 This is not safe (it calls `doSomething` which uses `someProp`)</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It\u2019s difficult to remember which props or state are used by functions outside of the effect. This is why <strong>usually you\u2019ll want to declare functions needed by an effect <em>inside</em> of it.</strong> Then it\u2019s easy to see what values from the component scope that effect depends on:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> someProp <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>someProp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 OK (our effect only uses `someProp`)</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>If after that we still don\u2019t use any values from the component scope, it\u2019s safe to specify <code class=\"language-javascript\">[]</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 OK in this example because we don't use *any* values from component scope</span></span></code></pre></div>\n<p>Depending on your use case, there are a few more options described below.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>We provide the <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> ESLint rule as a part of the <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a> package. It helps you find components that don\u2019t handle updates consistently.</p>\n</div>\n<p>Let\u2019s see why this matters.</p>\n<p>If you specify a <a href=\"/react/hooks-reference#conditionally-firing-an-effect\">list of dependencies</a> as the last argument to <code class=\"language-javascript\">useEffect</code>, <code class=\"language-javascript\">useLayoutEffect</code>, <code class=\"language-javascript\">useMemo</code>, <code class=\"language-javascript\">useCallback</code>, or <code class=\"language-javascript\">useImperativeHandle</code>, it must include all values that are used inside the callback and participate in the React data flow. That includes props, state, and anything derived from them.</p>\n<p>It is <strong>only</strong> safe to omit a function from the dependency list if nothing in it (or the functions called by it) references props, state, or values derived from them. This example has a bug:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProductPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> productId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>product<span class=\"token punctuation\">,</span> setProduct<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://myapi/product/'</span> <span class=\"token operator\">+</span> productId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uses productId prop</span></span>    <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \ud83d\udd34 Invalid because `fetchProduct` uses `productId`</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>The recommended fix is to move that function <em>inside</em> of your effect</strong>. That makes it easy to see which props or state your effect uses, and to ensure they\u2019re all declared:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProductPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> productId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>product<span class=\"token punctuation\">,</span> setProduct<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// By moving this function inside the effect, we can clearly see the values it uses.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://myapi/product/'</span> <span class=\"token operator\">+</span> productId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>productId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Valid because our effect only uses productId</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This also allows you to handle out-of-order responses with a local variable inside the effect:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> ignore <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://myapi/product/'</span> <span class=\"token operator\">+</span> productId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ignore<span class=\"token punctuation\">)</span> <span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> ignore <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>productId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We moved the function inside the effect so it doesn\u2019t need to be in its dependency list.</p>\n<div class=\"blockquote\">\n<strong>Tip</strong>\n<p>Check out <a class=\"external-link\" href=\"https://codesandbox.io/s/jvvkoo8pq3\">this small demo</a> and <a class=\"external-link\" href=\"https://www.robinwieruch.de/react-hooks-fetch-data/\">this article</a> to learn more about data fetching with Hooks.</p>\n</div>\n<p><strong>If for some reason you <em>can\u2019t</em> move a function inside an effect, there are a few more options:</strong></p>\n<ul>\n<li><strong>You can try moving that function outside of your component</strong>. In that case, the function is guaranteed to not reference any props or state, and also doesn\u2019t need to be in the list of dependencies.</li>\n<li>If the function you\u2019re calling is a pure computation and is safe to call while rendering, you may <strong>call it outside of the effect instead,</strong> and make the effect depend on the returned value.</li>\n<li>As a last resort, you can <strong>add a function to effect dependencies but <em>wrap its definition</em></strong> into the <a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a> Hook. This ensures it doesn\u2019t change on every render unless <em>its own</em> dependencies also change:</li>\n</ul>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProductPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> productId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// \u2705 Wrap with useCallback to avoid change on every render</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> fetchProduct <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// ... Does something with productId ...</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>productId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 All useCallback dependencies are specified</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProductDetails</span></span> <span class=\"token attr-name\">fetchProduct</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fetchProduct<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ProductDetails</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> fetchProduct <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>fetchProduct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 All useEffect dependencies are specified</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that in the above example we <strong>need</strong> to keep the function in the dependencies list. This ensures that a change in the <code class=\"language-javascript\">productId</code> prop of <code class=\"language-javascript\">ProductPage</code> automatically triggers a refetch in the <code class=\"language-javascript\">ProductDetails</code> component.</p>\n<h3 id=\"what-can-i-do-if-my-effect-dependencies-change-too-often\"><a class=\"anchor\" href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\"></a>What can I do if my effect dependencies change too often? </h3>\n<p>Sometimes, your effect may be using state that changes too often. You might be tempted to omit that state from a list of dependencies, but that usually leads to bugs:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This effect depends on the `count` state</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \ud83d\udd34 Bug: `count` is not specified as a dependency</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The empty set of dependencies, <code class=\"language-javascript\">[]</code>, means that the effect will only run once when the component mounts, and not on every re-render. The problem is that inside the <code class=\"language-javascript\">setInterval</code> callback, the value of <code class=\"language-javascript\">count</code> does not change, because we\u2019ve created a closure with the value of <code class=\"language-javascript\">count</code> set to <code class=\"language-javascript\">0</code> as it was when the effect callback ran. Every second, this callback then calls <code class=\"language-javascript\">setCount(0 + 1)</code>, so the count never goes above 1.</p>\n<p>Specifying <code class=\"language-javascript\">[count]</code> as a list of dependencies would fix the bug, but would cause the interval to be reset on every change. Effectively, each <code class=\"language-javascript\">setInterval</code> would get one chance to execute before being cleared (similar to a <code class=\"language-javascript\">setTimeout</code>.) That may not be desirable. To fix this, we can use the <a href=\"/react/hooks-reference#functional-updates\">functional update form of <code class=\"language-javascript\">setState</code></a>. It lets us specify <em>how</em> the state needs to change without referencing the <em>current</em> state:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=&gt;</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 This doesn't depend on `count` variable outside</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Our effect doesn't use any variables in the component scope</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(The identity of the <code class=\"language-javascript\">setCount</code> function is guaranteed to be stable so it\u2019s safe to omit.)</p>\n<p>Now, the <code class=\"language-javascript\">setInterval</code> callback executes once a second, but each time the inner call to <code class=\"language-javascript\">setCount</code> can use an up-to-date value for <code class=\"language-javascript\">count</code> (called <code class=\"language-javascript\">c</code> in the callback here.)</p>\n<p>In more complex cases (such as if one state depends on another state), try moving the state update logic outside the effect with the <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code> Hook</a>. <a class=\"external-link\" href=\"https://adamrackis.dev/state-and-use-reducer/\">This article</a> offers an example of how you can do this. <strong>The identity of the <code class=\"language-javascript\">dispatch</code> function from <code class=\"language-javascript\">useReducer</code> is always stable</strong> \u2014 even if the reducer function is declared inside the component and reads its props.</p>\n<p>As a last resort, if you want something like <code class=\"language-javascript\">this</code> in a class, you can <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">use a ref</a> to hold a mutable variable. Then you can write and read to it. For example:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Keep latest props in a ref.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> latestProps <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    latestProps<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Read latest props at any time</span></span><span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>latestProps<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This effect never re-runs</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Only do this if you couldn\u2019t find a better alternative, as relying on mutation makes components less predictable. If there\u2019s a specific pattern that doesn\u2019t translate well, <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/new\">file an issue</a> with a runnable example code and we can try to help.</p>\n<h3 id=\"how-do-i-implement-shouldcomponentupdate\"><a class=\"anchor\" href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\"></a>How do I implement <code class=\"language-javascript\">shouldComponentUpdate</code>? </h3>\n<p>You can wrap a function component with <code class=\"language-javascript\">React.memo</code> to shallowly compare its props:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// your component</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It\u2019s not a Hook because it doesn\u2019t compose like Hooks do. <code class=\"language-javascript\">React.memo</code> is equivalent to <code class=\"language-javascript\">PureComponent</code>, but it only compares props. (You can also add a second argument to specify a custom comparison function that takes the old and new props. If it returns true, the update is skipped.)</p>\n<p><code class=\"language-javascript\">React.memo</code> doesn\u2019t compare state because there is no single state object to compare. But you can make children pure too, or even <a href=\"/react/hooks-faq#how-to-memoize-calculations\">optimize individual children with <code class=\"language-javascript\">useMemo</code></a>.</p>\n<h3 id=\"how-to-memoize-calculations\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-memoize-calculations\"></a>How to memoize calculations? </h3>\n<p>The <a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a> Hook lets you cache calculations between multiple renders by \u201cremembering\u201d the previous computation:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This code calls <code class=\"language-javascript\">computeExpensiveValue(a, b)</code>. But if the dependencies <code class=\"language-javascript\">[a, b]</code> haven\u2019t changed since the last value, <code class=\"language-javascript\">useMemo</code> skips calling it a second time and simply reuses the last value it returned.</p>\n<p>Remember that the function passed to <code class=\"language-javascript\">useMemo</code> runs during rendering. Don\u2019t do anything there that you wouldn\u2019t normally do while rendering. For example, side effects belong in <code class=\"language-javascript\">useEffect</code>, not <code class=\"language-javascript\">useMemo</code>.</p>\n<p><strong>You may rely on <code class=\"language-javascript\">useMemo</code> as a performance optimization, not as a semantic guarantee.</strong> In the future, React may choose to \u201cforget\u201d some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without <code class=\"language-javascript\">useMemo</code> \u2014 and then add it to optimize performance. (For rare cases when a value must <em>never</em> be recomputed, you can <a href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\">lazily initialize</a> a ref.)</p>\n<p>Conveniently, <code class=\"language-javascript\">useMemo</code> also lets you skip an expensive re-render of a child:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Only re-rendered if `a` changes:</span>\n  <span class=\"token keyword\">const</span> child1 <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child1</span></span> <span class=\"token attr-name\">a</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Only re-rendered if `b` changes:</span>\n  <span class=\"token keyword\">const</span> child2 <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child2</span></span> <span class=\"token attr-name\">b</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>child1<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>child2<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that this approach won\u2019t work in a loop because Hook calls <a href=\"/react/hooks-rules\">can\u2019t</a> be placed inside loops. But you can extract a separate component for the list item, and call <code class=\"language-javascript\">useMemo</code> there.</p>\n<h3 id=\"how-to-create-expensive-objects-lazily\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\"></a>How to create expensive objects lazily? </h3>\n<p><code class=\"language-javascript\">useMemo</code> lets you <a href=\"/react/hooks-faq#how-to-memoize-calculations\">memoize an expensive calculation</a> if the dependencies are the same. However, it only serves as a hint, and doesn\u2019t <em>guarantee</em> the computation won\u2019t re-run. But sometimes you need to be sure an object is only created once.</p>\n<p><strong>The first common use case is when creating the initial state is expensive:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \u26a0\ufe0f createRows() is called on every render</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">,</span> setRows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRows</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To avoid re-creating the ignored initial state, we can pass a <strong>function</strong> to <code class=\"language-javascript\">useState</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \u2705 createRows() is only called once</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">,</span> setRows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">createRows</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React will only call this function during the first render. See the <a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code> API reference</a>.</p>\n<p><strong>You might also occasionally want to avoid re-creating the <code class=\"language-javascript\">useRef()</code> initial value.</strong> For example, maybe you want to ensure some imperative class instance only gets created once:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \u26a0\ufe0f IntersectionObserver is created on every render</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>onIntersect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">useRef</code> <strong>does not</strong> accept a special function overload like <code class=\"language-javascript\">useState</code>. Instead, you can write your own function that creates and sets it lazily:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// \u2705 IntersectionObserver is created lazily once</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>onIntersect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// When you need it, call getObserver()</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This avoids creating an expensive object until it\u2019s truly needed for the first time. If you use Flow or TypeScript, you can also give <code class=\"language-javascript\">getObserver()</code> a non-nullable type for convenience.</p>\n<h3 id=\"are-hooks-slow-because-of-creating-functions-in-render\"><a class=\"anchor\" href=\"/react/hooks-faq#are-hooks-slow-because-of-creating-functions-in-render\"></a>Are Hooks slow because of creating functions in render? </h3>\n<p>No. In modern browsers, the raw performance of closures compared to classes doesn\u2019t differ significantly except in extreme scenarios.</p>\n<p>In addition, consider that the design of Hooks is more efficient in a couple ways:</p>\n<ul>\n<li>Hooks avoid a lot of the overhead that classes require, like the cost of creating class instances and binding event handlers in the constructor.</li>\n<li><strong>Idiomatic code using Hooks doesn\u2019t need the deep component tree nesting</strong> that is prevalent in codebases that use higher-order components, render props, and context. With smaller component trees, React has less work to do.</li>\n</ul>\n<p>Traditionally, performance concerns around inline functions in React have been related to how passing new callbacks on each render breaks <code class=\"language-javascript\">shouldComponentUpdate</code> optimizations in child components. Hooks approach this problem from three sides.</p>\n<ul>\n<li>\n<p>The <a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a> Hook lets you keep the same callback reference between re-renders so that <code class=\"language-javascript\">shouldComponentUpdate</code> continues to work:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Will not change unless `a` or `b` changes</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>The <a href=\"/react/hooks-faq#how-to-memoize-calculations\"><code class=\"language-javascript\">useMemo</code></a> Hook makes it easier to control when individual children update, reducing the need for pure components.</li>\n<li>Finally, the <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> Hook reduces the need to pass callbacks deeply, as explained below.</li>\n</ul>\n<h3 id=\"how-to-avoid-passing-callbacks-down\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\"></a>How to avoid passing callbacks down? </h3>\n<p>We\u2019ve found that most people don\u2019t enjoy manually passing callbacks through every level of a component tree. Even though it is more explicit, it can feel like a lot of \u201cplumbing\u201d.</p>\n<p>In large component trees, an alternative we recommend is to pass down a <code class=\"language-javascript\">dispatch</code> function from <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> via context:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> TodosDispatch <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodosApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Note: `dispatch` won't change between re-renders</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodosDispatch.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DeepTree</span></span> <span class=\"token attr-name\">todos</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">TodosDispatch.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Any child in the tree inside <code class=\"language-javascript\">TodosApp</code> can use the <code class=\"language-javascript\">dispatch</code> function to pass actions up to <code class=\"language-javascript\">TodosApp</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">DeepChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// If we want to perform an action, we can get dispatch from context.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>TodosDispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Add todo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is both more convenient from the maintenance perspective (no need to keep forwarding callbacks), and avoids the callback problem altogether. Passing <code class=\"language-javascript\">dispatch</code> down like this is the recommended pattern for deep updates.</p>\n<p>Note that you can still choose whether to pass the application <em>state</em> down as props (more explicit) or as context (more convenient for very deep updates). If you use context to pass down the state too, use two different context types \u2014 the <code class=\"language-javascript\">dispatch</code> context never changes, so components that read it don\u2019t need to rerender unless they also need the application state.</p>\n<h3 id=\"how-to-read-an-often-changing-value-from-usecallback\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-read-an-often-changing-value-from-usecallback\"></a>How to read an often-changing value from <code class=\"language-javascript\">useCallback</code>? </h3>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>We recommend to <a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\">pass <code class=\"language-javascript\">dispatch</code> down in context</a> rather than individual callbacks in props. The approach below is only mentioned here for completeness and as an escape hatch.</p>\n</div>\n<p>In some rare cases you might need to memoize a callback with <a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a> but the memoization doesn\u2019t work very well because the inner function has to be re-created too often. If the function you\u2019re memoizing is an event handler and isn\u2019t used during rendering, you can use <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">ref as an instance variable</a>, and save the last committed value into it manually:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> updateText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> textRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    textRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Write it to the ref</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> handleSubmit <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> currentText <span class=\"token operator\">=</span> textRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Read it from the ref</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>currentText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>textRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Don't recreate handleSubmit like [text] would do</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">updateText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ExpensiveTree</span></span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a rather convoluted pattern but it shows that you can do this escape hatch optimization if you need it. It\u2019s more bearable if you extract it to a custom Hook:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> updateText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Will be memoized even if `text` changes:</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> handleSubmit <span class=\"token operator\">=</span> <span class=\"token function\">useEventCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">updateText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ExpensiveTree</span></span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useEventCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> dependencies</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot call an event handler while rendering.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>dependencies<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ref<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In either case, we <strong>don\u2019t recommend this pattern</strong> and only show it here for completeness. Instead, it is preferable to <a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\">avoid passing callbacks deep down</a>.</p>\n<h2 id=\"under-the-hood\"><a class=\"anchor\" href=\"/react/hooks-faq#under-the-hood\"></a>Under the Hood </h2>\n<h3 id=\"how-does-react-associate-hook-calls-with-components\"><a class=\"anchor\" href=\"/react/hooks-faq#how-does-react-associate-hook-calls-with-components\"></a>How does React associate Hook calls with components? </h3>\n<p>React keeps track of the currently rendering component. Thanks to the <a href=\"/react/hooks-rules\">Rules of Hooks</a>, we know that Hooks are only called from React components (or custom Hooks \u2014 which are also only called from React components).</p>\n<p>There is an internal list of \u201cmemory cells\u201d associated with each component. They\u2019re just JavaScript objects where we can put some data. When you call a Hook like <code class=\"language-javascript\">useState()</code>, it reads the current cell (or initializes it during the first render), and then moves the pointer to the next one. This is how multiple <code class=\"language-javascript\">useState()</code> calls each get independent local state.</p>\n<h3 id=\"what-is-the-prior-art-for-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#what-is-the-prior-art-for-hooks\"></a>What is the prior art for Hooks? </h3>\n<p>Hooks synthesize ideas from several different sources:</p>\n<ul>\n<li>Our old experiments with functional APIs in the <a class=\"external-link\" href=\"https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State\">react-future</a> repository.</li>\n<li>React community\u2019s experiments with render prop APIs, including <a class=\"external-link\" href=\"https://github.com/ryanflorence\">Ryan Florence</a>\u2019s <a class=\"external-link\" href=\"https://github.com/reactions/component\">Reactions Component</a>.</li>\n<li><a class=\"external-link\" href=\"https://github.com/trueadm\">Dominic Gannaway</a>\u2019s <a class=\"external-link\" href=\"https://gist.github.com/trueadm/17beb64288e30192f3aa29cad0218067\"><code class=\"language-javascript\">adopt</code> keyword</a> proposal as a sugar syntax for render props.</li>\n<li>State variables and state cells in <a class=\"external-link\" href=\"http://displayscript.org/introduction.html\">DisplayScript</a>.</li>\n<li><a class=\"external-link\" href=\"https://reasonml.github.io/reason-react/docs/en/state-actions-reducer.html\">Reducer components</a> in ReasonReact.</li>\n<li><a class=\"external-link\" href=\"http://reactivex.io/rxjs/class/es6/Subscription.js~Subscription.html\">Subscriptions</a> in Rx.</li>\n<li><a class=\"external-link\" href=\"https://github.com/ocamllabs/ocaml-effects-tutorial#2-effectful-computations-in-a-pure-setting\">Algebraic effects</a> in Multicore OCaml.</li>\n</ul>\n<p><a class=\"external-link\" href=\"https://github.com/sebmarkbage\">Sebastian Markb\u00e5ge</a> came up with the original design for Hooks, later refined by <a class=\"external-link\" href=\"https://github.com/acdlite\">Andrew Clark</a>, <a class=\"external-link\" href=\"https://github.com/sophiebits\">Sophie Alpert</a>, <a class=\"external-link\" href=\"https://github.com/trueadm\">Dominic Gannaway</a>, and other members of the React team.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/hooks-faq.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-faq", "nav": ["/react/hooks-reference", "/react/testing"]}]}, {"key": "Testing", "values": [{"key": "Testing Overview", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>You can test React components similar to testing other JavaScript code.</p>\n<p>There are a few ways to test React components. Broadly, they divide into two categories:</p>\n<ul>\n<li><strong>Rendering component trees</strong> in a simplified test environment and asserting on their output.</li>\n<li><strong>Running a complete app</strong> in a realistic browser environment (also known as \u201cend-to-end\u201d tests).</li>\n</ul>\n<p>This documentation section focuses on testing strategies for the first case. While full end-to-end tests can be very useful to prevent regressions to important workflows, such tests are not concerned with React components in particular, and are out of the scope of this section.</p>\n<h3 id=\"tradeoffs\"><a class=\"anchor\" href=\"/react/testing#tradeoffs\"></a>Tradeoffs </h3>\n<p>When choosing testing tools, it is worth considering a few tradeoffs:</p>\n<ul>\n<li><strong>Iteration speed vs Realistic environment:</strong> Some tools offer a very quick feedback loop between making a change and seeing the result, but don\u2019t model the browser behavior precisely. Other tools might use a real browser environment, but reduce the iteration speed and are flakier on a continuous integration server.</li>\n<li><strong>How much to mock:</strong> With components, the distinction between a \u201cunit\u201d and \u201cintegration\u201d test can be blurry. If you\u2019re testing a form, should its test also test the buttons inside of it? Or should a button component have its own test suite? Should refactoring a button ever break the form test?</li>\n</ul>\n<p>Different answers may work for different teams and products.</p>\n<h3 id=\"tools\"><a class=\"anchor\" href=\"/react/testing#tools\"></a>Recommended Tools </h3>\n<p><strong><a class=\"external-link\" href=\"https://facebook.github.io/jest/\">Jest</a></strong> is a JavaScript test runner that lets you access the DOM via <a href=\"/react/testing-environments#mocking-a-rendering-surface\"><code class=\"language-javascript\">jsdom</code></a>. While jsdom is only an approximation of how the browser works, it is often good enough for testing React components. Jest provides a great iteration speed combined with powerful features like mocking <a href=\"/react/testing-environments#mocking-modules\">modules</a> and <a href=\"/react/testing-environments#mocking-timers\">timers</a> so you can have more control over how the code executes.</p>\n<p><strong><a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a></strong> is a set of helpers that let you test React components without relying on their implementation details. This approach makes refactoring a breeze and also nudges you towards best practices for accessibility. Although it doesn\u2019t provide a way to \u201cshallowly\u201d render a component without its children, a test runner like Jest lets you do this by <a href=\"/react/testing-recipes#mocking-modules\">mocking</a>.</p>\n<h3 id=\"learn-more\"><a class=\"anchor\" href=\"/react/testing#learn-more\"></a>Learn More </h3>\n<p>This section is divided in two pages:</p>\n<ul>\n<li><a href=\"/react/testing-recipes\">Recipes</a>: Common patterns when writing tests for React components.</li>\n<li><a href=\"/react/testing-environments\">Environments</a>: What to consider when setting up a testing environment for React components.</li>\n</ul></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/testing.md\">Edit this page</a></p></div></article>", "path": "/react/testing", "nav": ["/react/hooks-faq", "/react/testing-recipes"]}, {"key": "Testing Recipes", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Common testing patterns for React components.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>This page assumes you\u2019re using <a class=\"external-link\" href=\"https://jestjs.io/\">Jest</a> as a test runner. If you use a different test runner, you may need to adjust the API, but the overall shape of the solution will likely be the same. Read more details on setting up a testing environment on the <a href=\"/react/testing-environments\">Testing Environments</a> page.</p>\n</div>\n<p>On this page, we will primarily use function components. However, these testing strategies don\u2019t depend on implementation details, and work just as well for class components too.</p>\n<ul>\n<li><a href=\"/react/testing-recipes#setup--teardown\">Setup/Teardown</a></li>\n<li><a href=\"/react/testing-recipes#act\"><code class=\"language-javascript\">act()</code></a></li>\n<li><a href=\"/react/testing-recipes#rendering\">Rendering</a></li>\n<li><a href=\"/react/testing-recipes#data-fetching\">Data Fetching</a></li>\n<li><a href=\"/react/testing-recipes#mocking-modules\">Mocking Modules</a></li>\n<li><a href=\"/react/testing-recipes#events\">Events</a></li>\n<li><a href=\"/react/testing-recipes#timers\">Timers</a></li>\n<li><a href=\"/react/testing-recipes#snapshot-testing\">Snapshot Testing</a></li>\n<li><a href=\"/react/testing-recipes#multiple-renderers\">Multiple Renderers</a></li>\n<li><a href=\"/react/testing-recipes#something-missing\">Something Missing?</a></li>\n</ul>\n\n<h3 id=\"setup--teardown\"><a class=\"anchor\" href=\"/react/testing-recipes#setup--teardown\"></a>Setup/Teardown </h3>\n<p>For each test, we usually want to render our React tree to a DOM element that\u2019s attached to <code class=\"language-javascript\">document</code>. This is important so that it can receive DOM events. When the test ends, we want to \u201cclean up\u201d and unmount the tree from the <code class=\"language-javascript\">document</code>.</p>\n<p>A common way to do it is to use a pair of <code class=\"language-javascript\">beforeEach</code> and <code class=\"language-javascript\">afterEach</code> blocks so that they\u2019ll always run and isolate the effects of a test to itself:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// setup a DOM element as a render target</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cleanup on exiting</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You may use a different pattern, but keep in mind that we want to execute the cleanup <em>even if a test fails</em>. Otherwise, tests can become \u201cleaky\u201d, and one test can change the behavior of another test. That makes them difficult to debug.</p>\n\n<h3 id=\"act\"><a class=\"anchor\" href=\"/react/testing-recipes#act\"></a><code class=\"language-javascript\">act()</code> </h3>\n<p>When writing UI tests, tasks like rendering, user events, or data fetching can be considered as \u201cunits\u201d of interaction with a user interface. <code class=\"language-javascript\">react-dom/test-utils</code> provides a helper called <a href=\"/react/test-utils#act\"><code class=\"language-javascript\">act()</code></a> that makes sure all updates related to these \u201cunits\u201d have been processed and applied to the DOM before you make any assertions:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// render components</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// make assertions</span></code></pre></div>\n<p>This helps make your tests run closer to what real users would experience when using your application. The rest of these examples use <code class=\"language-javascript\">act()</code> to make these guarantees.</p>\n<p>You might find using <code class=\"language-javascript\">act()</code> directly a bit too verbose. To avoid some of the boilerplate, you could use a library like <a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a>, whose helpers are wrapped with <code class=\"language-javascript\">act()</code>.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>The name <code class=\"language-javascript\">act</code> comes from the <a class=\"external-link\" href=\"http://wiki.c2.com/?ArrangeActAssert\">Arrange-Act-Assert</a> pattern.</p>\n</div>\n\n<h3 id=\"rendering\"><a class=\"anchor\" href=\"/react/testing-recipes#rendering\"></a>Rendering </h3>\n<p>Commonly, you might want to test whether a component renders correctly for given props. Consider a simple component that renders a message based on a prop:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// hello.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hey, stranger</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can write a test for this component:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// hello.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">\"./hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// setup a DOM element as a render target</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cleanup on exiting</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders with or without a name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hey, stranger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Jenny<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Jenny!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Margaret<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Margaret!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"data-fetching\"><a class=\"anchor\" href=\"/react/testing-recipes#data-fetching\"></a>Data Fetching </h3>\n<p>Instead of calling real APIs in all your tests, you can mock requests with dummy data. Mocking data fetching with \u201cfake\u201d data prevents flaky tests due to an unavailable backend, and makes them run faster. Note: you may still want to run a subset of tests using an <a href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\">\u201cend-to-end\u201d</a> framework that tells whether the whole app is working together.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// user.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"loading...\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> years old\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      lives in </span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can write tests for it:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// user.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">\"./user\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// setup a DOM element as a render target</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cleanup on exiting</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders user data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> fakeUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joni Baez\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token string\">\"32\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123, Charming Avenue\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function-variable function\">json</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// Use the asynchronous version of act to apply resolved promises</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"summary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// remove the mock to ensure tests are completely isolated</span></span><span class=\"gatsby-highlight-code-line\">  global<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">.</span><span class=\"token function\">mockRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"mocking-modules\"><a class=\"anchor\" href=\"/react/testing-recipes#mocking-modules\"></a>Mocking Modules </h3>\n<p>Some modules might not work well inside a testing environment, or may not be as essential to the test itself. Mocking out these modules with dummy replacements can make it easier to write tests for your own code.</p>\n<p>Consider a <code class=\"language-javascript\">Contact</code> component that embeds a third-party <code class=\"language-javascript\">GoogleMap</code> component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// map.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LoadScript<span class=\"token punctuation\">,</span> GoogleMap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-google-maps\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadScript</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script-loader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">googleMapsApiKey</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>YOUR_API_KEY<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GoogleMap</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example-map<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LoadScript</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// contact.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Map <span class=\"token keyword\">from</span> <span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Contact</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Contact </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> via</span><span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"mailto:\"</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          email\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        or on their </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          website\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we don\u2019t want to load this component in our tests, we can mock out the dependency itself to a dummy component, and run our tests:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// contact.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Contact <span class=\"token keyword\">from</span> <span class=\"token string\">\"./contact\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MockedMap <span class=\"token keyword\">from</span> <span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DummyMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>lat<span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>long<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// setup a DOM element as a render target</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cleanup on exiting</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should render contact information\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> center <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">lat</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">long</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Contact</span></span>\n        <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Joni Baez<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">email</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test@example.com<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">site</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://test.com<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>center<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n      container\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid='email']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mailto:test@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"site\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://test.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"map\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"0:0\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"events\"><a class=\"anchor\" href=\"/react/testing-recipes#events\"></a>Events </h3>\n<p>We recommend dispatching real DOM events on DOM elements, and then asserting on the result. Consider a <code class=\"language-javascript\">Toggle</code> component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// toggle.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Toggle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>previousState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Turn off\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We could write tests for it:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// toggle.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Toggle <span class=\"token keyword\">from</span> <span class=\"token string\">\"./toggle\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// setup a DOM element as a render target</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cleanup on exiting</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changes value when clicked\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onChange <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toggle</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get a hold of the button element, and trigger some clicks on it</span>\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid=toggle]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn off\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Different DOM events and their properties are described in <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\">MDN</a>. Note that you need to pass <code class=\"language-javascript\">{ bubbles: true }</code> in each event you create for it to reach the React listener because React automatically delegates events to the root.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>React Testing Library offers a <a class=\"external-link\" href=\"https://testing-library.com/docs/dom-testing-library/api-events\">more concise helper</a> for firing events.</p>\n</div>\n\n<h3 id=\"timers\"><a class=\"anchor\" href=\"/react/testing-recipes#timers\"></a>Timers </h3>\n<p>Your code might use timer-based functions like <code class=\"language-javascript\">setTimeout</code> to schedule more work in the future. In this example, a multiple choice panel waits for a selection and advances, timing out if a selection isn\u2019t made in 5 seconds:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// card.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> timeoutID <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>onSelect<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">choice</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can write tests for this component by leveraging <a class=\"external-link\" href=\"https://jestjs.io/docs/en/timer-mocks\">Jest\u2019s timer mocks</a>, and testing the different states it can be in.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// card.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> Card <span class=\"token keyword\">from</span> <span class=\"token string\">\"./card\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// setup a DOM element as a render target</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cleanup on exiting</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">useRealTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should select null after timing out\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// move ahead in time by 100ms</span></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// and then move ahead by 5 seconds</span></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should cleanup on being removed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// unmount the app</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should accept selections\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    container\n      <span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid='2']\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can use fake timers only in some tests. Above, we enabled them by calling <code class=\"language-javascript\">jest.useFakeTimers()</code>. The main advantage they provide is that your test doesn\u2019t actually have to wait five seconds to execute, and you also didn\u2019t need to make the component code more convoluted just for testing.</p>\n\n<h3 id=\"snapshot-testing\"><a class=\"anchor\" href=\"/react/testing-recipes#snapshot-testing\"></a>Snapshot Testing </h3>\n<p>Frameworks like Jest also let you save \u201csnapshots\u201d of data with <a class=\"external-link\" href=\"https://jestjs.io/docs/en/snapshot-testing\"><code class=\"language-javascript\">toMatchSnapshot</code> / <code class=\"language-javascript\">toMatchInlineSnapshot</code></a>. With these, we can \u201csave\u201d the rendered component output and ensure that a change to it has to be explicitly committed as a change to the snapshot.</p>\n<p>In this example, we render a component and format the rendered HTML with the <a class=\"external-link\" href=\"https://www.npmjs.com/package/pretty\"><code class=\"language-javascript\">pretty</code></a> package, before saving it as an inline snapshot:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// hello.test.js, again</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> pretty <span class=\"token keyword\">from</span> <span class=\"token string\">\"pretty\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">\"./hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// setup a DOM element as a render target</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cleanup on exiting</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should render a greeting\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... gets filled automatically by jest ... */</span></span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Jenny<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... gets filled automatically by jest ... */</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Margaret<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... gets filled automatically by jest ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It\u2019s typically better to make more specific assertions than to use snapshots. These kinds of tests include implementation details so they break easily, and teams can get desensitized to snapshot breakages. Selectively <a href=\"/react/testing-recipes#mocking-modules\">mocking some child components</a> can help reduce the size of snapshots and keep them readable for the code review.</p>\n\n<h3 id=\"multiple-renderers\"><a class=\"anchor\" href=\"/react/testing-recipes#multiple-renderers\"></a>Multiple Renderers </h3>\n<p>In rare cases, you may be running a test on a component that uses multiple renderers. For example, you may be running snapshot tests on a component with <code class=\"language-javascript\">react-test-renderer</code>, that internally uses <code class=\"language-javascript\">render</code> from <code class=\"language-javascript\">react-dom</code> inside a child component to render some content. In this scenario, you can wrap updates with <code class=\"language-javascript\">act()</code>s corresponding to their renderers.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token keyword\">as</span> domAct <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token keyword\">as</span> testAct<span class=\"token punctuation\">,</span> create <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-test-renderer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">let</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token function\">domAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">testAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    root <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"something-missing\"><a class=\"anchor\" href=\"/react/testing-recipes#something-missing\"></a>Something Missing? </h3>\n<p>If some common scenario is not covered, please let us know on the <a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/issues\">issue tracker</a> for the documentation website.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/testing-recipes.md\">Edit this page</a></p></div></article>", "path": "/react/testing-recipes", "nav": ["/react/testing", "/react/testing-environments"]}, {"key": "Testing Environments", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><!-- This document is intended for folks who are comfortable with JavaScript, and have probably written tests with it. It acts as a reference for the differences in testing environments for React components, and how those differences affect the tests that they write. This document also assumes a slant towards web-based react-dom components, but has notes for other renderers. -->\n<p>This document goes through the factors that can affect your environment and recommendations for some scenarios.</p>\n<h3 id=\"test-runners\"><a class=\"anchor\" href=\"/react/testing-environments#test-runners\"></a>Test runners </h3>\n<p>Test runners like <a class=\"external-link\" href=\"https://jestjs.io/\">Jest</a>, <a class=\"external-link\" href=\"https://mochajs.org/\">mocha</a>, <a class=\"external-link\" href=\"https://github.com/avajs/ava\">ava</a> let you write test suites as regular JavaScript, and run them as part of your development process. Additionally, test suites are run as part of continuous integration.</p>\n<ul>\n<li>Jest is widely compatible with React projects, supporting features like mocked <a href=\"/react/testing-environments#mocking-modules\">modules</a> and <a href=\"/react/testing-environments#mocking-timers\">timers</a>, and <a href=\"/react/testing-environments#mocking-a-rendering-surface\"><code class=\"language-javascript\">jsdom</code></a> support. <strong>If you use Create React App, <a class=\"external-link\" href=\"https://facebook.github.io/create-react-app/docs/running-tests\">Jest is already included out of the box</a> with useful defaults.</strong></li>\n<li>Libraries like <a class=\"external-link\" href=\"https://mochajs.org/#running-mocha-in-the-browser\">mocha</a> work well in real browser environments, and could help for tests that explicitly need it.</li>\n<li>End-to-end tests are used for testing longer flows across multiple pages, and require a <a href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\">different setup</a>.</li>\n</ul>\n<h3 id=\"mocking-a-rendering-surface\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-a-rendering-surface\"></a>Mocking a rendering surface </h3>\n<p>Tests often run in an environment without access to a real rendering surface like a browser. For these environments, we recommend simulating a browser with <a class=\"external-link\" href=\"https://github.com/jsdom/jsdom\"><code class=\"language-javascript\">jsdom</code></a>, a lightweight browser implementation that runs inside Node.js.</p>\n<p>In most cases, jsdom behaves like a regular browser would, but doesn\u2019t have features like <a class=\"external-link\" href=\"https://github.com/jsdom/jsdom#unimplemented-parts-of-the-web-platform\">layout and navigation</a>. This is still useful for most web-based component tests, since it runs quicker than having to start up a browser for each test. It also runs in the same process as your tests, so you can write code to examine and assert on the rendered DOM.</p>\n<p>Just like in a real browser, jsdom lets us model user interactions; tests can dispatch events on DOM nodes, and then observe and assert on the side effects of these actions <a href=\"/react/testing-recipes#events\"><small>(example)</small></a>.</p>\n<p>A large portion of UI tests can be written with the above setup: using Jest as a test runner, rendered to jsdom, with user interactions specified as sequences of browser events, powered by the <code class=\"language-javascript\">act()</code> helper <a href=\"/react/testing-recipes\"><small>(example)</small></a>. For example, a lot of React\u2019s own tests are written with this combination.</p>\n<p>If you\u2019re writing a library that tests mostly browser-specific behavior, and requires native browser behavior like layout or real inputs, you could use a framework like <a class=\"external-link\" href=\"https://mochajs.org/\">mocha.</a></p>\n<p>In an environment where you <em>can\u2019t</em> simulate a DOM (e.g. testing React Native components on Node.js), you could use <a href=\"/react/test-utils#simulate\">event simulation helpers</a> to simulate interactions with elements. Alternately, you could use the <code class=\"language-javascript\">fireEvent</code> helper from <a class=\"external-link\" href=\"https://testing-library.com/docs/react-native-testing-library/intro\"><code class=\"language-javascript\">@testing-library/react-native</code></a>.</p>\n<p>Frameworks like <a class=\"external-link\" href=\"https://www.cypress.io/\">Cypress</a>, <a class=\"external-link\" href=\"https://github.com/GoogleChrome/puppeteer\">puppeteer</a> and <a class=\"external-link\" href=\"https://www.seleniumhq.org/projects/webdriver/\">webdriver</a> are useful for running <a href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\">end-to-end tests</a>.</p>\n<h3 id=\"mocking-functions\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-functions\"></a>Mocking functions </h3>\n<p>When writing tests, we\u2019d like to mock out the parts of our code that don\u2019t have equivalents inside our testing environment (e.g. checking <code class=\"language-javascript\">navigator.onLine</code> status inside Node.js). Tests could also spy on some functions, and observe how other parts of the test interact with them. It is then useful to be able to selectively mock these functions with test-friendly versions.</p>\n<p>This is especially useful for data fetching. It is usually preferable to use \u201cfake\u201d data for tests to avoid the slowness and flakiness due to fetching from real API endpoints <a href=\"/react/testing-recipes#data-fetching\"><small>(example)</small></a>. This helps make the tests predictable. Libraries like <a class=\"external-link\" href=\"https://jestjs.io/\">Jest</a> and <a class=\"external-link\" href=\"https://sinonjs.org/\">sinon</a>, among others, support mocked functions. For end-to-end tests, mocking network can be more difficult, but you might also want to test the real API endpoints in them anyway.</p>\n<h3 id=\"mocking-modules\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-modules\"></a>Mocking modules </h3>\n<p>Some components have dependencies for modules that may not work well in test environments, or aren\u2019t essential to our tests. It can be useful to selectively mock these modules out with suitable replacements <a href=\"/react/testing-recipes#mocking-modules\"><small>(example)</small></a>.</p>\n<p>On Node.js, runners like Jest <a class=\"external-link\" href=\"https://jestjs.io/docs/en/manual-mocks\">support mocking modules</a>. You could also use libraries like <a class=\"external-link\" href=\"https://www.npmjs.com/package/mock-require\"><code class=\"language-javascript\">mock-require</code></a>.</p>\n<h3 id=\"mocking-timers\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-timers\"></a>Mocking timers </h3>\n<p>Components might be using time-based functions like <code class=\"language-javascript\">setTimeout</code>, <code class=\"language-javascript\">setInterval</code>, or <code class=\"language-javascript\">Date.now</code>. In testing environments, it can be helpful to mock these functions out with replacements that let you manually \u201cadvance\u201d time. This is great for making sure your tests run fast! Tests that are dependent on timers would still resolve in order, but quicker <a href=\"/react/testing-recipes#timers\"><small>(example)</small></a>. Most frameworks, including <a class=\"external-link\" href=\"https://jestjs.io/docs/en/timer-mocks\">Jest</a>, <a class=\"external-link\" href=\"https://sinonjs.org/releases/latest/fake-timers\">sinon</a> and <a class=\"external-link\" href=\"https://github.com/sinonjs/lolex\">lolex</a>, let you mock timers in your tests.</p>\n<p>Sometimes, you may not want to mock timers. For example, maybe you\u2019re testing an animation, or interacting with an endpoint that\u2019s sensitive to timing (like an API rate limiter). Libraries with timer mocks let you enable and disable them on a per test/suite basis, so you can explicitly choose how these tests would run.</p>\n<h3 id=\"end-to-end-tests-aka-e2e-tests\"><a class=\"anchor\" href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\"></a>End-to-end tests </h3>\n<p>End-to-end tests are useful for testing longer workflows, especially when they\u2019re critical to your business (such as payments or signups). For these tests, you\u2019d probably want to test how a real browser renders the whole app, fetches data from the real API endpoints, uses sessions and cookies, navigates between different links. You might also likely want to make assertions not just on the DOM state, but on the backing data as well (e.g. to verify whether the updates have been persisted to the database).</p>\n<p>In this scenario, you would use a framework like <a class=\"external-link\" href=\"https://www.cypress.io/\">Cypress</a>, <a class=\"external-link\" href=\"https://playwright.dev\">Playwright</a> or a library like <a class=\"external-link\" href=\"https://pptr.dev/\">Puppeteer</a> so you can navigate between multiple routes and assert on side effects not just in the browser, but potentially on the backend as well.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/testing-environments.md\">Edit this page</a></p></div></article>", "path": "/react/testing-environments", "nav": ["/react/testing-recipes", "/react/how-to-contribute"]}]}, {"key": "Contribuire", "values": [{"key": "Come Contribuire", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React is one of Facebook\u2019s first open source projects that is both under very active development and is also being used to ship code to everybody on <a class=\"external-link\" href=\"https://www.facebook.com\">facebook.com</a>. We\u2019re still working out the kinks to make contributing to this project as easy and transparent as possible, but we\u2019re not quite there yet. Hopefully this document makes the process for contributing clear and answers some questions that you may have.</p>\n<h3 id=\"code-of-conduct\"><a class=\"anchor\" href=\"/react/how-to-contribute#code-of-conduct\"></a><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md\">Code of Conduct</a> </h3>\n<p>Facebook has adopted the <a class=\"external-link\" href=\"https://www.contributor-covenant.org/\">Contributor Covenant</a> as its Code of Conduct, and we expect project participants to adhere to it. Please read <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md\">the full text</a> so that you can understand what actions will and will not be tolerated.</p>\n<h3 id=\"open-development\"><a class=\"anchor\" href=\"/react/how-to-contribute#open-development\"></a>Open Development </h3>\n<p>All work on React happens directly on <a class=\"external-link\" href=\"https://github.com/facebook/react\">GitHub</a>. Both core team members and external contributors send pull requests which go through the same review process.</p>\n<h3 id=\"semantic-versioning\"><a class=\"anchor\" href=\"/react/how-to-contribute#semantic-versioning\"></a>Semantic Versioning </h3>\n<p>React follows <a class=\"external-link\" href=\"https://semver.org/\">semantic versioning</a>. We release patch versions for critical bugfixes, minor versions for new features or non-essential changes, and major versions for any breaking changes. When we make breaking changes, we also introduce deprecation warnings in a minor version so that our users learn about the upcoming changes and migrate their code in advance. Learn more about our commitment to stability and incremental migration in <a href=\"/react/faq-versioning\">our versioning policy</a>.</p>\n<p>Every significant change is documented in the <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CHANGELOG.md\">changelog file</a>.</p>\n<h3 id=\"branch-organization\"><a class=\"anchor\" href=\"/react/how-to-contribute#branch-organization\"></a>Branch Organization </h3>\n<p>Submit all changes directly to the <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main\"><code class=\"language-javascript\">main branch</code></a>. We don\u2019t use separate branches for development or for upcoming releases. We do our best to keep <code class=\"language-javascript\">main</code> in good shape, with all tests passing.</p>\n<p>Code that lands in <code class=\"language-javascript\">main</code> must be compatible with the latest stable release. It may contain additional features, but no breaking changes. We should be able to release a new minor version from the tip of <code class=\"language-javascript\">main</code> at any time.</p>\n<h3 id=\"feature-flags\"><a class=\"anchor\" href=\"/react/how-to-contribute#feature-flags\"></a>Feature Flags </h3>\n<p>To keep the <code class=\"language-javascript\">main</code> branch in a releasable state, breaking changes and experimental features must be gated behind a feature flag.</p>\n<p>Feature flags are defined in <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/packages/shared/ReactFeatureFlags.js\"><code class=\"language-javascript\">packages/shared/ReactFeatureFlags.js</code></a>. Some builds of React may enable different sets of feature flags; for example, the React Native build may be configured differently than React DOM. These flags are found in <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/shared/forks\"><code class=\"language-javascript\">packages/shared/forks</code></a>. Feature flags are statically typed by Flow, so you can run <code class=\"language-javascript\">yarn flow</code> to confirm that you\u2019ve updated all the necessary files.</p>\n<p>React\u2019s build system will strip out disabled feature branches before publishing. A continuous integration job runs on every commit to check for changes in bundle size. You can use the change in size as a signal that a feature was gated correctly.</p>\n<h3 id=\"bugs\"><a class=\"anchor\" href=\"/react/how-to-contribute#bugs\"></a>Bugs </h3>\n<h4 id=\"where-to-find-known-issues\"><a class=\"anchor\" href=\"/react/how-to-contribute#where-to-find-known-issues\"></a>Where to Find Known Issues </h4>\n<p>We are using <a class=\"external-link\" href=\"https://github.com/facebook/react/issues\">GitHub Issues</a> for our public bugs. We keep a close eye on this and try to make it clear when we have an internal fix in progress. Before filing a new task, try to make sure your problem doesn\u2019t already exist.</p>\n<h4 id=\"reporting-new-issues\"><a class=\"anchor\" href=\"/react/how-to-contribute#reporting-new-issues\"></a>Reporting New Issues </h4>\n<p>The best way to get your bug fixed is to provide a reduced test case. This <a class=\"external-link\" href=\"https://jsfiddle.net/Luktwrdm/\">JSFiddle template</a> is a great starting point.</p>\n<h4 id=\"security-bugs\"><a class=\"anchor\" href=\"/react/how-to-contribute#security-bugs\"></a>Security Bugs </h4>\n<p>Facebook has a <a class=\"external-link\" href=\"https://www.facebook.com/whitehat/\">bounty program</a> for the safe disclosure of security bugs. With that in mind, please do not file public issues; go through the process outlined on that page.</p>\n<h3 id=\"how-to-get-in-touch\"><a class=\"anchor\" href=\"/react/how-to-contribute#how-to-get-in-touch\"></a>How to Get in Touch </h3>\n<ul>\n<li>IRC: <a class=\"external-link\" href=\"https://webchat.freenode.net/?channels=reactjs\">#reactjs on freenode</a></li>\n<li><a class=\"external-link\" href=\"https://it.reactjs.org//community/support.html#popular-discussion-forums\">Discussion forums</a></li>\n</ul>\n<p>There is also <a class=\"external-link\" href=\"https://www.reactiflux.com/\">an active community of React users on the Discord chat platform</a> in case you need help with React.</p>\n<h3 id=\"proposing-a-change\"><a class=\"anchor\" href=\"/react/how-to-contribute#proposing-a-change\"></a>Proposing a Change </h3>\n<p>If you intend to change the public API, or make any non-trivial changes to the implementation, we recommend <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/new\">filing an issue</a>. This lets us reach an agreement on your proposal before you put significant effort into it.</p>\n<p>If you\u2019re only fixing a bug, it\u2019s fine to submit a pull request right away but we still recommend to file an issue detailing what you\u2019re fixing. This is helpful in case we don\u2019t accept that specific fix but want to keep track of the issue.</p>\n<h3 id=\"your-first-pull-request\"><a class=\"anchor\" href=\"/react/how-to-contribute#your-first-pull-request\"></a>Your First Pull Request </h3>\n<p>Working on your first Pull Request? You can learn how from this free video series:</p>\n<p><strong><a class=\"external-link\" href=\"https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github\">How to Contribute to an Open Source Project on GitHub</a></strong></p>\n<p>To help you get your feet wet and get you familiar with our contribution process, we have a list of <strong><a class=\"external-link\" href=\"https://github.com/facebook/react/issues?q=is:open+is:issue+label:%22good+first+issue%22\">good first issues</a></strong> that contain bugs that have a relatively limited scope. This is a great place to get started.</p>\n<p>If you decide to fix an issue, please be sure to check the comment thread in case somebody is already working on a fix. If nobody is working on it at the moment, please leave a comment stating that you intend to work on it so other people don\u2019t accidentally duplicate your effort.</p>\n<p>If somebody claims an issue but doesn\u2019t follow up for more than two weeks, it\u2019s fine to take it over but you should still leave a comment.</p>\n<h3 id=\"sending-a-pull-request\"><a class=\"anchor\" href=\"/react/how-to-contribute#sending-a-pull-request\"></a>Sending a Pull Request </h3>\n<p>The core team is monitoring for pull requests. We will review your pull request and either merge it, request changes to it, or close it with an explanation. For API changes we may need to fix our internal uses at Facebook.com, which could cause some delay. We\u2019ll do our best to provide updates and feedback throughout the process.</p>\n<p><strong>Before submitting a pull request,</strong> please make sure the following is done:</p>\n<ol>\n<li>Fork <a class=\"external-link\" href=\"https://github.com/facebook/react\">the repository</a> and create your branch from <code class=\"language-javascript\">main</code>.</li>\n<li>Run <code class=\"language-javascript\">yarn</code> in the repository root.</li>\n<li>If you\u2019ve fixed a bug or added code that should be tested, add tests!</li>\n<li>Ensure the test suite passes (<code class=\"language-javascript\">yarn test</code>). Tip: <code class=\"language-javascript\">yarn test --watch TestName</code> is helpful in development.</li>\n<li>Run <code class=\"language-javascript\">yarn test --prod</code> to test in the production environment.</li>\n<li>If you need a debugger, run <code class=\"language-javascript\">yarn debug-test --watch TestName</code>, open <code class=\"language-javascript\">chrome://inspect</code>, and press \u201cInspect\u201d.</li>\n<li>Format your code with <a class=\"external-link\" href=\"https://github.com/prettier/prettier\">prettier</a> (<code class=\"language-javascript\">yarn prettier</code>).</li>\n<li>Make sure your code lints (<code class=\"language-javascript\">yarn lint</code>). Tip: <code class=\"language-javascript\">yarn linc</code> to only check changed files.</li>\n<li>Run the <a class=\"external-link\" href=\"https://flowtype.org/\">Flow</a> typechecks (<code class=\"language-javascript\">yarn flow</code>).</li>\n<li>If you haven\u2019t already, complete the CLA.</li>\n</ol>\n<h3 id=\"contributor-license-agreement-cla\"><a class=\"anchor\" href=\"/react/how-to-contribute#contributor-license-agreement-cla\"></a>Contributor License Agreement (CLA) </h3>\n<p>In order to accept your pull request, we need you to submit a CLA. You only need to do this once, so if you\u2019ve done this for another Facebook open source project, you\u2019re good to go. If you are submitting a pull request for the first time, just let us know that you have completed the CLA and we can cross-check with your GitHub username.</p>\n<p><strong><a class=\"external-link\" href=\"https://code.facebook.com/cla\">Complete your CLA here.</a></strong></p>\n<h3 id=\"contribution-prerequisites\"><a class=\"anchor\" href=\"/react/how-to-contribute#contribution-prerequisites\"></a>Contribution Prerequisites </h3>\n<ul>\n<li>You have <a class=\"external-link\" href=\"https://nodejs.org\">Node</a> installed at LTS and <a class=\"external-link\" href=\"https://yarnpkg.com/en/\">Yarn</a> at v1.2.0+.</li>\n<li>You have <a class=\"external-link\" href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a> installed.</li>\n<li>You have <code class=\"language-javascript\">gcc</code> installed or are comfortable installing a compiler if needed. Some of our dependencies may require a compilation step. On OS X, the Xcode Command Line Tools will cover this. On Ubuntu, <code class=\"language-javascript\">apt-get install build-essential</code> will install the required packages. Similar commands should work on other Linux distros. Windows will require some additional steps, see the <a class=\"external-link\" href=\"https://github.com/nodejs/node-gyp#installation\"><code class=\"language-javascript\">node-gyp</code> installation instructions</a> for details.</li>\n<li>You are familiar with Git.</li>\n</ul>\n<h3 id=\"development-workflow\"><a class=\"anchor\" href=\"/react/how-to-contribute#development-workflow\"></a>Development Workflow </h3>\n<p>After cloning React, run <code class=\"language-javascript\">yarn</code> to fetch its dependencies.\nThen, you can run several commands:</p>\n<ul>\n<li><code class=\"language-javascript\">yarn lint</code> checks the code style.</li>\n<li><code class=\"language-javascript\">yarn linc</code> is like <code class=\"language-javascript\">yarn lint</code> but faster because it only checks files that differ in your branch.</li>\n<li><code class=\"language-javascript\">yarn test</code> runs the complete test suite.</li>\n<li><code class=\"language-javascript\">yarn test --watch</code> runs an interactive test watcher.</li>\n<li><code class=\"language-javascript\">yarn test --prod</code> runs tests in the production environment.</li>\n<li><code class=\"language-javascript\">yarn test &lt;pattern&gt;</code> runs tests with matching filenames.</li>\n<li><code class=\"language-javascript\">yarn debug-test</code> is just like <code class=\"language-javascript\">yarn test</code> but with a debugger. Open <code class=\"language-javascript\">chrome://inspect</code> and press \u201cInspect\u201d.</li>\n<li><code class=\"language-javascript\">yarn flow</code> runs the <a class=\"external-link\" href=\"https://flowtype.org/\">Flow</a> typechecks.</li>\n<li><code class=\"language-javascript\">yarn build</code> creates a <code class=\"language-javascript\">build</code> folder with all the packages.</li>\n<li><code class=\"language-javascript\">yarn build react/index,react-dom/index --type=UMD</code> creates UMD builds of just React and ReactDOM.</li>\n</ul>\n<p>We recommend running <code class=\"language-javascript\">yarn test</code> (or its variations above) to make sure you don\u2019t introduce any regressions as you work on your change. However, it can be handy to try your build of React in a real project.</p>\n<p>First, run <code class=\"language-javascript\">yarn build</code>. This will produce pre-built bundles in <code class=\"language-javascript\">build</code> folder, as well as prepare npm packages inside <code class=\"language-javascript\">build/packages</code>.</p>\n<p>The easiest way to try your changes is to run <code class=\"language-javascript\">yarn build react/index,react-dom/index --type=UMD</code> and then open <code class=\"language-javascript\">fixtures/packaging/babel-standalone/dev.html</code>. This file already uses <code class=\"language-javascript\">react.development.js</code> from the <code class=\"language-javascript\">build</code> folder so it will pick up your changes.</p>\n<p>If you want to try your changes in your existing React project, you may copy <code class=\"language-javascript\">build/node_modules/react/umd/react.development.js</code>, <code class=\"language-javascript\">build/node_modules/react-dom/umd/react-dom.development.js</code>, or any other build products into your app and use them instead of the stable version. </p>\n<p>If your project uses React from npm, you may delete <code class=\"language-javascript\">react</code> and <code class=\"language-javascript\">react-dom</code> in its dependencies and use <code class=\"language-javascript\">yarn link</code> to point them to your local <code class=\"language-javascript\">build</code> folder. Note that <strong>instead of <code class=\"language-javascript\">--type=UMD</code> you\u2019ll want to pass <code class=\"language-javascript\">--type=NODE</code> when building</strong>. You\u2019ll also need to build the <code class=\"language-javascript\">scheduler</code> package:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-sh\"><code class=\"language-javascript\">cd ~/path_to_your_react_clone/\nyarn build react/index,react/jsx,react-dom/index,scheduler --type=NODE\n\ncd build/node_modules/react\nyarn link\ncd build/node_modules/react-dom\nyarn link\n\ncd ~/path/to/your/project\nyarn link react react-dom</code></pre></div>\n<p>Every time you run <code class=\"language-javascript\">yarn build</code> in the React folder, the updated versions will appear in your project\u2019s <code class=\"language-javascript\">node_modules</code>. You can then rebuild your project to try your changes.</p>\n<p>If some package is still missing (e.g. maybe you use <code class=\"language-javascript\">react-dom/server</code> in your project), you can always do a full build with <code class=\"language-javascript\">yarn build</code>. Note that running <code class=\"language-javascript\">yarn build</code> without options takes a long time.</p>\n<p>We still require that your pull request contains unit tests for any new functionality. This way we can ensure that we don\u2019t break your code in the future.</p>\n<h3 id=\"style-guide\"><a class=\"anchor\" href=\"/react/how-to-contribute#style-guide\"></a>Style Guide </h3>\n<p>We use an automatic code formatter called <a class=\"external-link\" href=\"https://prettier.io/\">Prettier</a>.\nRun <code class=\"language-javascript\">yarn prettier</code> after making any changes to the code.</p>\n<p>Then, our linter will catch most issues that may exist in your code.\nYou can check the status of your code styling by simply running <code class=\"language-javascript\">yarn linc</code>.</p>\n<p>However, there are still some styles that the linter cannot pick up. If you are unsure about something, looking at <a class=\"external-link\" href=\"https://github.com/airbnb/javascript\">Airbnb\u2019s Style Guide</a> will guide you in the right direction.</p>\n<h3 id=\"request-for-comments-rfc\"><a class=\"anchor\" href=\"/react/how-to-contribute#request-for-comments-rfc\"></a>Request for Comments (RFC) </h3>\n<p>Many changes, including bug fixes and documentation improvements can be implemented and reviewed via the normal GitHub pull request workflow.</p>\n<p>Some changes though are \u201csubstantial\u201d, and we ask that these be put through a bit of a design process and produce a consensus among the React core team.</p>\n<p>The \u201cRFC\u201d (request for comments) process is intended to provide a consistent and controlled path for new features to enter the project. You can contribute by visiting the <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs\">rfcs repository</a>.</p>\n<h3 id=\"license\"><a class=\"anchor\" href=\"/react/how-to-contribute#license\"></a>License </h3>\n<p>By contributing to React, you agree that your contributions will be licensed under its MIT license.</p>\n<h3 id=\"what-next\"><a class=\"anchor\" href=\"/react/how-to-contribute#what-next\"></a>What Next? </h3>\n<p>Read the <a href=\"/react/codebase-overview\">next section</a> to learn how the codebase is organized.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/how-to-contribute.md\">Edit this page</a></p></div></article>", "path": "/react/how-to-contribute", "nav": ["/react/testing-environments", "/react/codebase-overview"]}, {"key": "Panoramica sul Codice", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>This section will give you an overview of the React codebase organization, its conventions, and the implementation.</p>\n<p>If you want to <a href=\"/react/how-to-contribute\">contribute to React</a> we hope that this guide will help you feel more comfortable making changes.</p>\n<p>We don\u2019t necessarily recommend any of these conventions in React apps. Many of them exist for historical reasons and might change with time.</p>\n<h3 id=\"top-level-folders\"><a class=\"anchor\" href=\"/react/codebase-overview#top-level-folders\"></a>Top-Level Folders </h3>\n<p>After cloning the <a class=\"external-link\" href=\"https://github.com/facebook/react\">React repository</a>, you will see a few top-level folders in it:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages\"><code class=\"language-javascript\">packages</code></a> contains metadata (such as <code class=\"language-javascript\">package.json</code>) and the source code (<code class=\"language-javascript\">src</code> subdirectory) for all packages in the React repository. <strong>If your change is related to the code, the <code class=\"language-javascript\">src</code> subdirectory of each package is where you\u2019ll spend most of your time.</strong></li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/fixtures\"><code class=\"language-javascript\">fixtures</code></a> contains a few small React test applications for contributors.</li>\n<li><code class=\"language-javascript\">build</code> is the build output of React. It is not in the repository but it will appear in your React clone after you <a href=\"/react/how-to-contribute#development-workflow\">build it</a> for the first time.</li>\n</ul>\n<p>The documentation is hosted <a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org\">in a separate repository from React</a>.</p>\n<p>There are a few other top-level folders but they are mostly used for the tooling and you likely won\u2019t ever encounter them when contributing.</p>\n<h3 id=\"colocated-tests\"><a class=\"anchor\" href=\"/react/codebase-overview#colocated-tests\"></a>Colocated Tests </h3>\n<p>We don\u2019t have a top-level directory for unit tests. Instead, we put them into a directory called <code class=\"language-javascript\">__tests__</code> relative to the files that they test.</p>\n<p>For example, a test for <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/87724bd87506325fcaf2648c70fc1f43411a87be/src/renderers/dom/client/utils/setInnerHTML.js\"><code class=\"language-javascript\">setInnerHTML.js</code></a> is located in <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/87724bd87506325fcaf2648c70fc1f43411a87be/src/renderers/dom/client/utils/__tests__/setInnerHTML-test.js\"><code class=\"language-javascript\">__tests__/setInnerHTML-test.js</code></a> right next to it.</p>\n<h3 id=\"warnings-and-invariants\"><a class=\"anchor\" href=\"/react/codebase-overview#warnings-and-invariants\"></a>Warnings and Invariants </h3>\n<p>The React codebase uses <code class=\"language-javascript\">console.error</code> to display warnings:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something is wrong.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Warnings are only enabled in development. In production, they are completely stripped out. If you need to forbid some code path from executing, use <code class=\"language-javascript\">invariant</code> module instead:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> invariant <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'invariant'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">invariant</span><span class=\"token punctuation\">(</span>\n  <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'You shall not pass!'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>The invariant is thrown when the <code class=\"language-javascript\">invariant</code> condition is <code class=\"language-javascript\">false</code>.</strong></p>\n<p>\u201cInvariant\u201d is just a way of saying \u201cthis condition always holds true\u201d. You can think about it as making an assertion.</p>\n<p>It is important to keep development and production behavior similar, so <code class=\"language-javascript\">invariant</code> throws both in development and in production. The error messages are automatically replaced with error codes in production to avoid negatively affecting the byte size.</p>\n<h3 id=\"development-and-production\"><a class=\"anchor\" href=\"/react/codebase-overview#development-and-production\"></a>Development and Production </h3>\n<p>You can use <code class=\"language-javascript\">__DEV__</code> pseudo-global variable in the codebase to guard development-only blocks of code.</p>\n<p>It is inlined during the compile step, and turns into <code class=\"language-javascript\">process.env.NODE_ENV !== 'production'</code> checks in the CommonJS builds.</p>\n<p>For standalone builds, it becomes <code class=\"language-javascript\">true</code> in the unminified build, and gets completely stripped out with the <code class=\"language-javascript\">if</code> blocks it guards in the minified build.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This code will only run in development.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"flow\"><a class=\"anchor\" href=\"/react/codebase-overview#flow\"></a>Flow </h3>\n<p>We recently started introducing <a class=\"external-link\" href=\"https://flow.org/\">Flow</a> checks to the codebase. Files marked with the <code class=\"language-javascript\">@flow</code> annotation in the license header comment are being typechecked.</p>\n<p>We accept pull requests <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/7600/files\">adding Flow annotations to existing code</a>. Flow annotations look like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactRef<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">detachRefs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">instance</span><span class=\"token operator\">:</span> ReactInstance<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> ReactElement <span class=\"token operator\">|</span> string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When possible, new code should use Flow annotations.\nYou can run <code class=\"language-javascript\">yarn flow</code> locally to check your code with Flow.</p>\n<h3 id=\"multiple-packages\"><a class=\"anchor\" href=\"/react/codebase-overview#multiple-packages\"></a>Multiple Packages </h3>\n<p>React is a <a class=\"external-link\" href=\"https://danluu.com/monorepo/\">monorepo</a>. Its repository contains multiple separate packages so that their changes can be coordinated together, and issues live in one place.</p>\n<h3 id=\"react-core\"><a class=\"anchor\" href=\"/react/codebase-overview#react-core\"></a>React Core </h3>\n<p>The \u201ccore\u201d of React includes all the <a href=\"/react/react-api#react\">top-level <code class=\"language-javascript\">React</code> APIs</a>, for example:</p>\n<ul>\n<li><code class=\"language-javascript\">React.createElement()</code></li>\n<li><code class=\"language-javascript\">React.Component</code></li>\n<li><code class=\"language-javascript\">React.Children</code></li>\n</ul>\n<p><strong>React core only includes the APIs necessary to define components.</strong> It does not include the <a href=\"/react/reconciliation\">riconciliazione</a> algorithm or any platform-specific code. It is used both by React DOM and React Native components.</p>\n<p>The code for React core is located in <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react\"><code class=\"language-javascript\">packages/react</code></a> in the source tree. It is available on npm as the <a class=\"external-link\" href=\"https://www.npmjs.com/package/react\"><code class=\"language-javascript\">react</code></a> package. The corresponding standalone browser build is called <code class=\"language-javascript\">react.js</code>, and it exports a global called <code class=\"language-javascript\">React</code>.</p>\n<h3 id=\"renderers\"><a class=\"anchor\" href=\"/react/codebase-overview#renderers\"></a>Renderers </h3>\n<p>React was originally created for the DOM but it was later adapted to also support native platforms with <a class=\"external-link\" href=\"https://reactnative.dev/\">React Native</a>. This introduced the concept of \u201crenderers\u201d to React internals.</p>\n<p><strong>Renderers manage how a React tree turns into the underlying platform calls.</strong></p>\n<p>Renderers are also located in <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/\"><code class=\"language-javascript\">packages/</code></a>:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-dom\">React DOM Renderer</a> renders React components to the DOM. It implements <a href=\"/react/react-dom\">top-level <code class=\"language-javascript\">ReactDOM</code> APIs</a> and is available as <a class=\"external-link\" href=\"https://www.npmjs.com/package/react-dom\"><code class=\"language-javascript\">react-dom</code></a> npm package. It can also be used as standalone browser bundle called <code class=\"language-javascript\">react-dom.js</code> that exports a <code class=\"language-javascript\">ReactDOM</code> global.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-native-renderer\">React Native Renderer</a> renders React components to native views. It is used internally by React Native.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-test-renderer\">React Test Renderer</a> renders React components to JSON trees. It is used by the <a class=\"external-link\" href=\"https://facebook.github.io/jest/blog/2016/07/27/jest-14.html\">Snapshot Testing</a> feature of <a class=\"external-link\" href=\"https://facebook.github.io/jest\">Jest</a> and is available as <a class=\"external-link\" href=\"https://www.npmjs.com/package/react-test-renderer\">react-test-renderer</a> npm package.</li>\n</ul>\n<p>The only other officially supported renderer is <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-art\"><code class=\"language-javascript\">react-art</code></a>. It used to be in a separate <a class=\"external-link\" href=\"https://github.com/reactjs/react-art\">GitHub repository</a> but we moved it into the main source tree for now.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Technically the <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-native-renderer\"><code class=\"language-javascript\">react-native-renderer</code></a> is a very thin layer that teaches React to interact with React Native implementation. The real platform-specific code managing the native views lives in the <a class=\"external-link\" href=\"https://github.com/facebook/react-native\">React Native repository</a> together with its components.</p>\n</div>\n<h3 id=\"reconcilers\"><a class=\"anchor\" href=\"/react/codebase-overview#reconcilers\"></a>Reconcilers </h3>\n<p>Even vastly different renderers like React DOM and React Native need to share a lot of logic. In particular, the <a href=\"/react/reconciliation\">riconciliazione</a> algorithm should be as similar as possible so that declarative rendering, custom components, state, lifecycle methods, and refs work consistently across platforms.</p>\n<p>To solve this, different renderers share some code between them. We call this part of React a \u201creconciler\u201d. When an update such as <code class=\"language-javascript\">setState()</code> is scheduled, the reconciler calls <code class=\"language-javascript\">render()</code> on components in the tree and mounts, updates, or unmounts them.</p>\n<p>Reconcilers are not packaged separately because they currently have no public API. Instead, they are exclusively used by renderers such as React DOM and React Native.</p>\n<h3 id=\"stack-reconciler\"><a class=\"anchor\" href=\"/react/codebase-overview#stack-reconciler\"></a>Stack Reconciler </h3>\n<p>The \u201cstack\u201d reconciler is the implementation powering React 15 and earlier. We have since stopped using it, but it is documented in detail in the <a href=\"/react/implementation-notes\">next section</a>.</p>\n<h3 id=\"fiber-reconciler\"><a class=\"anchor\" href=\"/react/codebase-overview#fiber-reconciler\"></a>Fiber Reconciler </h3>\n<p>The \u201cfiber\u201d reconciler is a new effort aiming to resolve the problems inherent in the stack reconciler and fix a few long-standing issues. It has been the default reconciler since React 16.</p>\n<p>Its main goals are:</p>\n<ul>\n<li>Ability to split interruptible work in chunks.</li>\n<li>Ability to prioritize, rebase and reuse work in progress.</li>\n<li>Ability to yield back and forth between parents and children to support layout in React.</li>\n<li>Ability to return multiple elements from <code class=\"language-javascript\">render()</code>.</li>\n<li>Migliore supporto per i contenitori di errori.</li>\n</ul>\n<p>You can read more about React Fiber Architecture <a class=\"external-link\" href=\"https://github.com/acdlite/react-fiber-architecture\">here</a> and <a class=\"external-link\" href=\"https://blog.ag-grid.com/inside-fiber-an-in-depth-overview-of-the-new-reconciliation-algorithm-in-react\">here</a>. While it has shipped with React 16, the async features are not enabled by default yet.</p>\n<p>Its source code is located in <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-reconciler\"><code class=\"language-javascript\">packages/react-reconciler</code></a>.</p>\n<h3 id=\"event-system\"><a class=\"anchor\" href=\"/react/codebase-overview#event-system\"></a>Event System </h3>\n<p>React implements a layer over native events to smooth out cross-browser differences. Its source code is located in <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-dom/src/events\"><code class=\"language-javascript\">packages/react-dom/src/events</code></a>.</p>\n<h3 id=\"what-next\"><a class=\"anchor\" href=\"/react/codebase-overview#what-next\"></a>What Next? </h3>\n<p>Read the <a href=\"/react/implementation-notes\">next section</a> to learn about the pre-React 16 implementation of reconciler in more detail. We haven\u2019t documented the internals of the new reconciler yet.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/codebase-overview.md\">Edit this page</a></p></div></article>", "path": "/react/codebase-overview", "nav": ["/react/how-to-contribute", "/react/implementation-notes"]}, {"key": "Note sull'Implementazione", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>This section is a collection of implementation notes for the <a href=\"/react/codebase-overview#stack-reconciler\">stack reconciler</a>.</p>\n<p>It is very technical and assumes a strong understanding of React public API as well as how it\u2019s divided into core, renderers, and the reconciler. If you\u2019re not very familiar with the React codebase, read <a href=\"/react/codebase-overview\">the codebase overview</a> first.</p>\n<p>It also assumes an understanding of the <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2015/12/18/react-components-elements-and-instances.html\">differences between React components, their instances, and elements</a>.</p>\n<p>The stack reconciler was used in React 15 and earlier. It is located at <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/15-stable/src/renderers/shared/stack/reconciler\">src/renderers/shared/stack/reconciler</a>.</p>\n<h3 id=\"video-building-react-from-scratch\"><a class=\"anchor\" href=\"/react/implementation-notes#video-building-react-from-scratch\"></a>Video: Building React from Scratch </h3>\n<p><a class=\"external-link\" href=\"https://twitter.com/zpao\">Paul O\u2019Shannessy</a> gave a talk about <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=_MAD4Oly9yg\">building React from scratch</a> that largely inspired this document.</p>\n<p>Both this document and his talk are simplifications of the real codebase so you might get a better understanding by getting familiar with both of them.</p>\n<h3 id=\"overview\"><a class=\"anchor\" href=\"/react/implementation-notes#overview\"></a>Overview </h3>\n<p>The reconciler itself doesn\u2019t have a public API. <a href=\"/react/codebase-overview#renderers\">Renderers</a> like React DOM and React Native use it to efficiently update the user interface according to the React components written by the user.</p>\n<h3 id=\"mounting-as-a-recursive-process\"><a class=\"anchor\" href=\"/react/implementation-notes#mounting-as-a-recursive-process\"></a>Mounting as a Recursive Process </h3>\n<p>Let\u2019s consider the first time you mount a component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">root.render</code> will pass <code class=\"language-javascript\">&lt;App /&gt;</code> along to the reconciler. Remember that <code class=\"language-javascript\">&lt;App /&gt;</code> is a React element, that is, a description of <em>what</em> to render. You can think about it as a plain object:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { type: App, props: {} }</span></code></pre></div>\n<p>The reconciler will check if <code class=\"language-javascript\">App</code> is a class or a function.</p>\n<p>If <code class=\"language-javascript\">App</code> is a function, the reconciler will call <code class=\"language-javascript\">App(props)</code> to get the rendered element.</p>\n<p>If <code class=\"language-javascript\">App</code> is a class, the reconciler will instantiate an <code class=\"language-javascript\">App</code> with <code class=\"language-javascript\">new App(props)</code>, call the <code class=\"language-javascript\">componentWillMount()</code> lifecycle method, and then will call the <code class=\"language-javascript\">render()</code> method to get the rendered element.</p>\n<p>Either way, the reconciler will learn the element <code class=\"language-javascript\">App</code> \u201crendered to\u201d.</p>\n<p>This process is recursive. <code class=\"language-javascript\">App</code> may render to a <code class=\"language-javascript\">&lt;Greeting /&gt;</code>, <code class=\"language-javascript\">Greeting</code> may render to a <code class=\"language-javascript\">&lt;Button /&gt;</code>, and so on. The reconciler will \u201cdrill down\u201d through user-defined components recursively as it learns what each component renders to.</p>\n<p>You can imagine this process as a pseudocode:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// React.Component subclasses have this flag</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This function takes a React element (e.g. &lt;App /&gt;)</span>\n<span class=\"token comment\">// and returns a DOM or Native node representing the mounted tree.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We will determine the rendered element</span>\n  <span class=\"token comment\">// by either running the type as function</span>\n  <span class=\"token comment\">// or creating an instance and calling render().</span>\n  <span class=\"token keyword\">var</span> renderedElement<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Component class</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Set the props</span>\n    publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Call the lifecycle if necessary</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Get the rendered element by calling render()</span>\n    renderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Component function</span>\n    renderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// This process is recursive because a component may</span>\n  <span class=\"token comment\">// return an element with a type of another component.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Note: this implementation is incomplete and recurses infinitely!</span>\n  <span class=\"token comment\">// It only handles elements like &lt;App /&gt; or &lt;Button /&gt;.</span>\n  <span class=\"token comment\">// It doesn't handle elements like &lt;div /&gt; or &lt;p /&gt; yet.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrootEl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>This really <em>is</em> a pseudo-code. It isn\u2019t similar to the real implementation. It will also cause a stack overflow because we haven\u2019t discussed when to stop the recursion.</p>\n</div>\n<p>Let\u2019s recap a few key ideas in the example above:</p>\n<ul>\n<li>React elements are plain objects representing the component type (e.g. <code class=\"language-javascript\">App</code>) and the props.</li>\n<li>User-defined components (e.g. <code class=\"language-javascript\">App</code>) can be classes or functions but they all \u201crender to\u201d elements.</li>\n<li>\u201cMounting\u201d is a recursive process that creates a DOM or Native tree given the top-level React element (e.g. <code class=\"language-javascript\">&lt;App /&gt;</code>).</li>\n</ul>\n<h3 id=\"mounting-host-elements\"><a class=\"anchor\" href=\"/react/implementation-notes#mounting-host-elements\"></a>Mounting Host Elements </h3>\n<p>This process would be useless if we didn\u2019t render something to the screen as a result.</p>\n<p>In addition to user-defined (\u201ccomposite\u201d) components, React elements may also represent platform-specific (\u201chost\u201d) components. For example, <code class=\"language-javascript\">Button</code> might return a <code class=\"language-javascript\">&lt;div /&gt;</code> from its render method.</p>\n<p>If element\u2019s <code class=\"language-javascript\">type</code> property is a string, we are dealing with a host element:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { type: 'div', props: {} }</span></code></pre></div>\n<p>There is no user-defined code associated with host elements.</p>\n<p>When the reconciler encounters a host element, it lets the renderer take care of mounting it. For example, React DOM would create a DOM node.</p>\n<p>If the host element has children, the reconciler recursively mounts them following the same algorithm as above. It doesn\u2019t matter whether children are host (like <code class=\"language-javascript\">&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;</code>), composite (like <code class=\"language-javascript\">&lt;div&gt;&lt;Button /&gt;&lt;/div&gt;</code>), or both.</p>\n<p>The DOM nodes produced by the child components will be appended to the parent DOM node, and recursively, the complete DOM structure will be assembled.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>The reconciler itself is not tied to the DOM. The exact result of mounting (sometimes called \u201cmount image\u201d in the source code) depends on the renderer, and can be a DOM node (React DOM), a string (React DOM Server), or a number representing a native view (React Native).</p>\n</div>\n<p>If we were to extend the code to handle host elements, it would look like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// React.Component subclasses have this flag</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This function only handles elements with a composite type.</span>\n<span class=\"token comment\">// For example, it handles &lt;App /&gt; and &lt;Button /&gt;, but not a &lt;div /&gt;.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mountComposite</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> renderedElement<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Component class</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Set the props</span>\n    publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Call the lifecycle if necessary</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    renderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Component function</span>\n    renderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// This is recursive but we'll eventually reach the bottom of recursion when</span>\n  <span class=\"token comment\">// the element is host (e.g. &lt;div /&gt;) rather than composite (e.g. &lt;App /&gt;):</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This function only handles elements with a host type.</span>\n<span class=\"token comment\">// For example, it handles &lt;div /&gt; and &lt;p /&gt; but not an &lt;App /&gt;.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mountHost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// This block of code shouldn't be in the reconciler.</span>\n  <span class=\"token comment\">// Different renderers might initialize nodes differently.</span>\n  <span class=\"token comment\">// For example, React Native would create iOS or Android views.</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Mount the children</span>\n  children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childElement</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Children may be host (e.g. &lt;div /&gt;) or composite (e.g. &lt;Button /&gt;).</span>\n    <span class=\"token comment\">// We will also mount them recursively:</span>\n    <span class=\"token keyword\">var</span> childNode <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>childElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// This line of code is also renderer-specific.</span>\n    <span class=\"token comment\">// It would be different depending on the renderer:</span>\n    node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Return the DOM node as mount result.</span>\n  <span class=\"token comment\">// This is where the recursion ends.</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// User-defined components</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">mountComposite</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Platform-specific components</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">mountHost</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrootEl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is working but still far from how the reconciler is really implemented. The key missing ingredient is support for updates.</p>\n<h3 id=\"introducing-internal-instances\"><a class=\"anchor\" href=\"/react/implementation-notes#introducing-internal-instances\"></a>Introducing Internal Instances </h3>\n<p>The key feature of React is that you can re-render everything, and it won\u2019t recreate the DOM or reset the state:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Should reuse the existing DOM:</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, our implementation above only knows how to mount the initial tree. It can\u2019t perform updates on it because it doesn\u2019t store all the necessary information, such as all the <code class=\"language-javascript\">publicInstance</code>s, or which DOM <code class=\"language-javascript\">node</code>s correspond to which components.</p>\n<p>The stack reconciler codebase solves this by making the <code class=\"language-javascript\">mount()</code> function a method and putting it on a class. There are drawbacks to this approach, and we are going in the opposite direction in the <a href=\"/react/codebase-overview#fiber-reconciler\">ongoing rewrite of the reconciler</a>. Nevertheless this is how it works now.</p>\n<p>Instead of separate <code class=\"language-javascript\">mountHost</code> and <code class=\"language-javascript\">mountComposite</code> functions, we will create two classes: <code class=\"language-javascript\">DOMComponent</code> and <code class=\"language-javascript\">CompositeComponent</code>.</p>\n<p>Both classes have a constructor accepting the <code class=\"language-javascript\">element</code>, as well as a <code class=\"language-javascript\">mount()</code> method returning the mounted node. We will replace a top-level <code class=\"language-javascript\">mount()</code> function with a factory that instantiates the correct class:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// User-defined components</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompositeComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Platform-specific components</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, let\u2019s consider the implementation of <code class=\"language-javascript\">CompositeComponent</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// For composite components, expose the class instance.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> publicInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> renderedElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Component class</span>\n      publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Set the props</span>\n      publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Call the lifecycle if necessary</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      renderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Component function</span>\n      publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      renderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Save the public instance</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Instantiate the child internal instance according to the element.</span>\n    <span class=\"token comment\">// It would be a DOMComponent for &lt;div /&gt; or &lt;p /&gt;,</span>\n    <span class=\"token comment\">// and a CompositeComponent for &lt;App /&gt; or &lt;Button /&gt;:</span>\n    <span class=\"token keyword\">var</span> renderedComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent <span class=\"token operator\">=</span> renderedComponent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Mount the rendered output</span>\n    <span class=\"token keyword\">return</span> renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is not much different from our previous <code class=\"language-javascript\">mountComposite()</code> implementation, but now we can save some information, such as <code class=\"language-javascript\">this.currentElement</code>, <code class=\"language-javascript\">this.renderedComponent</code>, and <code class=\"language-javascript\">this.publicInstance</code>, for use during updates.</p>\n<p>Note that an instance of <code class=\"language-javascript\">CompositeComponent</code> is not the same thing as an instance of the user-supplied <code class=\"language-javascript\">element.type</code>. <code class=\"language-javascript\">CompositeComponent</code> is an implementation detail of our reconciler, and is never exposed to the user. The user-defined class is the one we read from <code class=\"language-javascript\">element.type</code>, and <code class=\"language-javascript\">CompositeComponent</code> creates an instance of it.</p>\n<p>To avoid the confusion, we will call instances of <code class=\"language-javascript\">CompositeComponent</code> and <code class=\"language-javascript\">DOMComponent</code> \u201cinternal instances\u201d. They exist so we can associate some long-lived data with them. Only the renderer and the reconciler are aware that they exist.</p>\n<p>In contrast, we call an instance of the user-defined class a \u201cpublic instance\u201d. The public instance is what you see as <code class=\"language-javascript\">this</code> in the <code class=\"language-javascript\">render()</code> and other methods of your custom components.</p>\n<p>The <code class=\"language-javascript\">mountHost()</code> function, refactored to be a <code class=\"language-javascript\">mount()</code> method on <code class=\"language-javascript\">DOMComponent</code> class, also looks familiar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// For DOM components, only expose the DOM node.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Create and save the node</span>\n    <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Set the attributes</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Create and save the contained children.</span>\n    <span class=\"token comment\">// Each of them can be a DOMComponent or a CompositeComponent,</span>\n    <span class=\"token comment\">// depending on whether the element type is a string or a function.</span>\n    <span class=\"token keyword\">var</span> renderedChildren <span class=\"token operator\">=</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>instantiateComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren <span class=\"token operator\">=</span> renderedChildren<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Collect DOM nodes they return on mount</span>\n    <span class=\"token keyword\">var</span> childNodes <span class=\"token operator\">=</span> renderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=&gt;</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    childNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childNode</span> <span class=\"token operator\">=&gt;</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Return the DOM node as mount result</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The main difference after refactoring from <code class=\"language-javascript\">mountHost()</code> is that we now keep <code class=\"language-javascript\">this.node</code> and <code class=\"language-javascript\">this.renderedChildren</code> associated with the internal DOM component instance. We will also use them for applying non-destructive updates in the future.</p>\n<p>As a result, each internal instance, composite or host, now points to its child internal instances. To help visualize this, if a function <code class=\"language-javascript\">&lt;App&gt;</code> component renders a <code class=\"language-javascript\">&lt;Button&gt;</code> class component, and <code class=\"language-javascript\">Button</code> class renders a <code class=\"language-javascript\">&lt;div&gt;</code>, the internal instance tree would look like this:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>object CompositeComponent<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">currentElement</span><span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">publicInstance</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">renderedComponent</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object CompositeComponent<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">currentElement</span><span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">publicInstance</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object Button<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">renderedComponent</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object DOMComponent<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">currentElement</span><span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object HTMLDivElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">renderedChildren</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the DOM you would only see the <code class=\"language-javascript\">&lt;div&gt;</code>. However the internal instance tree contains both composite and host internal instances.</p>\n<p>The composite internal instances need to store:</p>\n<ul>\n<li>The current element.</li>\n<li>The public instance if element type is a class.</li>\n<li>The single rendered internal instance. It can be either a <code class=\"language-javascript\">DOMComponent</code> or a <code class=\"language-javascript\">CompositeComponent</code>.</li>\n</ul>\n<p>The host internal instances need to store:</p>\n<ul>\n<li>The current element.</li>\n<li>The DOM node.</li>\n<li>All the child internal instances. Each of them can be either a <code class=\"language-javascript\">DOMComponent</code> or a <code class=\"language-javascript\">CompositeComponent</code>.</li>\n</ul>\n<p>If you\u2019re struggling to imagine how an internal instance tree is structured in more complex applications, <a class=\"external-link\" href=\"https://github.com/facebook/react-devtools\">React DevTools</a> can give you a close approximation, as it highlights host instances with grey, and composite instances with purple:</p>\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/d96fec10d250eace9756f09543bf5d58/00d43/implementation-notes-tree.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://it.reactjs.org//static/d96fec10d250eace9756f09543bf5d58/1e088/implementation-notes-tree.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>To complete this refactoring, we will introduce a function that mounts a complete tree into a container node and a public instance:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create the top-level internal instance</span>\n  <span class=\"token keyword\">var</span> rootComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Mount the top-level component into the container</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  containerNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Return the public instance it provides</span>\n  <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> publicInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"unmounting\"><a class=\"anchor\" href=\"/react/implementation-notes#unmounting\"></a>Unmounting </h3>\n<p>Now that we have internal instances that hold onto their children and the DOM nodes, we can implement unmounting. For a composite component, unmounting calls a lifecycle method and recurses.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Call the lifecycle method if necessary</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillUnmount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Unmount the single rendered component</span>\n    <span class=\"token keyword\">var</span> renderedComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent<span class=\"token punctuation\">;</span>\n    renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For <code class=\"language-javascript\">DOMComponent</code>, unmounting tells each child to unmount:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Unmount all the children</span>\n    <span class=\"token keyword\">var</span> renderedChildren <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren<span class=\"token punctuation\">;</span>\n    renderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=&gt;</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In practice, unmounting DOM components also removes the event listeners and clears some caches, but we will skip those details.</p>\n<p>We can now add a new top-level function called <code class=\"language-javascript\">unmountTree(containerNode)</code> that is similar to <code class=\"language-javascript\">ReactDOM.unmountComponentAtNode()</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">unmountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Read the internal instance from a DOM node:</span>\n  <span class=\"token comment\">// (This doesn't work yet, we will need to change mountTree() to store it.)</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> rootComponent <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>_internalInstance<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Unmount the tree and clear the container</span>\n  rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  containerNode<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In order for this to work, we need to read an internal root instance from a DOM node. We will modify <code class=\"language-javascript\">mountTree()</code> to add the <code class=\"language-javascript\">_internalInstance</code> property to the root DOM node. We will also teach <code class=\"language-javascript\">mountTree()</code> to destroy any existing tree so it can be called multiple times:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Destroy any existing tree</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unmountTree</span><span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Create the top-level internal instance</span>\n  <span class=\"token keyword\">var</span> rootComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Mount the top-level component into the container</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  containerNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Save a reference to the internal instance</span>\n  node<span class=\"token punctuation\">.</span>_internalInstance <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Return the public instance it provides</span>\n  <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> publicInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, running <code class=\"language-javascript\">unmountTree()</code>, or running <code class=\"language-javascript\">mountTree()</code> repeatedly, removes the old tree and runs the <code class=\"language-javascript\">componentWillUnmount()</code> lifecycle method on components.</p>\n<h3 id=\"updating\"><a class=\"anchor\" href=\"/react/implementation-notes#updating\"></a>Updating </h3>\n<p>In the previous section, we implemented unmounting. However React wouldn\u2019t be very useful if each prop change unmounted and mounted the whole tree. The goal of the reconciler is to reuse existing instances where possible to preserve the DOM and the state:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Should reuse the existing DOM:</span>\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We will extend our internal instance contract with one more method. In addition to <code class=\"language-javascript\">mount()</code> and <code class=\"language-javascript\">unmount()</code>, both <code class=\"language-javascript\">DOMComponent</code> and <code class=\"language-javascript\">CompositeComponent</code> will implement a new method called <code class=\"language-javascript\">receive(nextElement)</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Its job is to do whatever is necessary to bring the component (and any of its children) up to date with the description provided by the <code class=\"language-javascript\">nextElement</code>.</p>\n<p>This is the part that is often described as \u201cvirtual DOM diffing\u201d although what really happens is that we walk the internal tree recursively and let each internal instance receive an update.</p>\n<h3 id=\"updating-composite-components\"><a class=\"anchor\" href=\"/react/implementation-notes#updating-composite-components\"></a>Updating Composite Components </h3>\n<p>When a composite component receives a new element, we run the <code class=\"language-javascript\">componentWillUpdate()</code> lifecycle method.</p>\n<p>Then we re-render the component with the new props, and get the next rendered element:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> prevProps <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevRenderedComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevRenderedElement <span class=\"token operator\">=</span> prevRenderedComponent<span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Update *own* element</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextProps <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Figure out what the next render() output is</span>\n    <span class=\"token keyword\">var</span> nextRenderedElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Component class</span>\n      <span class=\"token comment\">// Call the lifecycle if necessary</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Update the props</span>\n      publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> nextProps<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Re-render</span>\n      nextRenderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Component function</span>\n      nextRenderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Next, we can look at the rendered element\u2019s <code class=\"language-javascript\">type</code>. If the <code class=\"language-javascript\">type</code> has not changed since the last render, the component below can also be updated in place.</p>\n<p>For example, if it returned <code class=\"language-javascript\">&lt;Button color=\"red\" /&gt;</code> the first time, and <code class=\"language-javascript\">&lt;Button color=\"blue\" /&gt;</code> the second time, we can just tell the corresponding internal instance to <code class=\"language-javascript\">receive()</code> the next element:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// If the rendered element type has not changed,</span>\n    <span class=\"token comment\">// reuse the existing component instance and exit.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevRenderedElement<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> nextRenderedElement<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prevRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>nextRenderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>However, if the next rendered element has a different <code class=\"language-javascript\">type</code> than the previously rendered element, we can\u2019t update the internal instance. A <code class=\"language-javascript\">&lt;button&gt;</code> can\u2019t \u201cbecome\u201d an <code class=\"language-javascript\">&lt;input&gt;</code>.</p>\n<p>Instead, we have to unmount the existing internal instance and mount the new one corresponding to the rendered element type. For example, this is what happens when a component that previously rendered a <code class=\"language-javascript\">&lt;button /&gt;</code> renders an <code class=\"language-javascript\">&lt;input /&gt;</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// If we reached this point, we need to unmount the previously</span>\n    <span class=\"token comment\">// mounted component, mount the new one, and swap their nodes.</span>\n\n    <span class=\"token comment\">// Find the old node because it will need to be replaced</span>\n    <span class=\"token keyword\">var</span> prevNode <span class=\"token operator\">=</span> prevRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Unmount the old child and mount a new child</span>\n    prevRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextRenderedComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>nextRenderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextNode <span class=\"token operator\">=</span> nextRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Replace the reference to the child</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent <span class=\"token operator\">=</span> nextRenderedComponent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Replace the old node with the new one</span>\n    <span class=\"token comment\">// Note: this is renderer-specific code and</span>\n    <span class=\"token comment\">// ideally should live outside of CompositeComponent:</span>\n    prevNode<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">,</span> prevNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To sum this up, when a composite component receives a new element, it may either delegate the update to its rendered internal instance, or unmount it and mount a new one in its place.</p>\n<p>There is another condition under which a component will re-mount rather than receive an element, and that is when the element\u2019s <code class=\"language-javascript\">key</code> has changed. We don\u2019t discuss <code class=\"language-javascript\">key</code> handling in this document because it adds more complexity to an already complex tutorial.</p>\n<p>Note that we needed to add a method called <code class=\"language-javascript\">getHostNode()</code> to the internal instance contract so that it\u2019s possible to locate the platform-specific node and replace it during the update. Its implementation is straightforward for both classes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Ask the rendered component to provide it.</span>\n    <span class=\"token comment\">// This will recursively drill down any composites.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"updating-host-components\"><a class=\"anchor\" href=\"/react/implementation-notes#updating-host-components\"></a>Updating Host Components </h3>\n<p>Host component implementations, such as <code class=\"language-javascript\">DOMComponent</code>, update differently. When they receive an element, they need to update the underlying platform-specific view. In case of React DOM, this means updating the DOM attributes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevElement <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevProps <span class=\"token operator\">=</span> prevElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextProps <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Remove old attributes.</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>nextProps<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Set next attributes.</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Then, host components need to update their children. Unlike composite components, they might contain more than a single child.</p>\n<p>In this simplified example, we use an array of internal instances and iterate over it, either updating or replacing the internal instances depending on whether the received <code class=\"language-javascript\">type</code> matches their previous <code class=\"language-javascript\">type</code>. The real reconciler also takes element\u2019s <code class=\"language-javascript\">key</code> in the account and track moves in addition to insertions and deletions, but we will omit this logic.</p>\n<p>We collect DOM operations on children in a list so we can execute them in batch:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// These are arrays of React elements:</span>\n    <span class=\"token keyword\">var</span> prevChildren <span class=\"token operator\">=</span> prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>prevChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prevChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>prevChildren<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> nextChildren <span class=\"token operator\">=</span> nextProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nextChildren<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// These are arrays of internal instances:</span>\n    <span class=\"token keyword\">var</span> prevRenderedChildren <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextRenderedChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// As we iterate over children, we will add operations to the array.</span>\n    <span class=\"token keyword\">var</span> operationQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Note: the section below is extremely simplified!</span>\n    <span class=\"token comment\">// It doesn't handle reorders, children with holes, or keys.</span>\n    <span class=\"token comment\">// It only exists to illustrate the overall flow, not the specifics.</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nextChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Try to get an existing internal instance for this child</span>\n      <span class=\"token keyword\">var</span> prevChild <span class=\"token operator\">=</span> prevRenderedChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// If there is no internal instance under this index,</span>\n      <span class=\"token comment\">// a child has been appended to the end. Create a new</span>\n      <span class=\"token comment\">// internal instance, mount it, and use its node.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prevChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> nextChild <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> nextChild<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Record that we need to append a node</span>\n        operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextRenderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nextChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// We can only update the instance if its element's type matches.</span>\n      <span class=\"token comment\">// For example, &lt;Button size=\"small\" /&gt; can be updated to</span>\n      <span class=\"token comment\">// &lt;Button size=\"large\" /&gt; but not to an &lt;App /&gt;.</span>\n      <span class=\"token keyword\">var</span> canUpdate <span class=\"token operator\">=</span> prevChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// If we can't update an existing instance, we have to unmount it</span>\n      <span class=\"token comment\">// and mount a new one instead of it.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>canUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> prevNode <span class=\"token operator\">=</span> prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> nextChild <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> nextNode <span class=\"token operator\">=</span> nextChild<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Record that we need to swap the nodes</span>\n        operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'REPLACE'</span><span class=\"token punctuation\">,</span> prevNode<span class=\"token punctuation\">,</span> nextNode<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextRenderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nextChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// If we can update an existing internal instance,</span>\n      <span class=\"token comment\">// just let it receive the next element and handle its own update.</span>\n      prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nextRenderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prevChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Finally, unmount any children that don't exist:</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> nextChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> prevChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> prevChild <span class=\"token operator\">=</span> prevRenderedChildren<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Record that we need to remove the node</span>\n      operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'REMOVE'</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Point the list of rendered children to the updated version.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren <span class=\"token operator\">=</span> nextRenderedChildren<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>As the last step, we execute the DOM operations. Again, the real reconciler code is more complex because it also handles moves:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Process the operation queue.</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>operationQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> operation <span class=\"token operator\">=</span> operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'ADD'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'REPLACE'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>nextNode<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">.</span>prevNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'REMOVE'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And that is it for updating host components.</p>\n<h3 id=\"top-level-updates\"><a class=\"anchor\" href=\"/react/implementation-notes#top-level-updates\"></a>Top-Level Updates </h3>\n<p>Now that both <code class=\"language-javascript\">CompositeComponent</code> and <code class=\"language-javascript\">DOMComponent</code> implement the <code class=\"language-javascript\">receive(nextElement)</code> method, we can change the top-level <code class=\"language-javascript\">mountTree()</code> function to use it when the element <code class=\"language-javascript\">type</code> is the same as it was the last time:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Check for an existing tree</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> prevNode <span class=\"token operator\">=</span> containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevRootComponent <span class=\"token operator\">=</span> prevNode<span class=\"token punctuation\">.</span>_internalInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevElement <span class=\"token operator\">=</span> prevRootComponent<span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// If we can, reuse the existing root component</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevElement<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prevRootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Otherwise, unmount the existing tree</span>\n    <span class=\"token function\">unmountTree</span><span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now calling <code class=\"language-javascript\">mountTree()</code> two times with the same type isn\u2019t destructive:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Reuses the existing DOM:</span>\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>These are the basics of how React works internally.</p>\n<h3 id=\"what-we-left-out\"><a class=\"anchor\" href=\"/react/implementation-notes#what-we-left-out\"></a>What We Left Out </h3>\n<p>This document is simplified compared to the real codebase. There are a few important aspects we didn\u2019t address:</p>\n<ul>\n<li>Components can render <code class=\"language-javascript\">null</code>, and the reconciler can handle \u201cempty slots\u201d in arrays and rendered output.</li>\n<li>The reconciler also reads <code class=\"language-javascript\">key</code> from the elements, and uses it to establish which internal instance corresponds to which element in an array. A bulk of complexity in the actual React implementation is related to that.</li>\n<li>In addition to composite and host internal instance classes, there are also classes for \u201ctext\u201d and \u201cempty\u201d components. They represent text nodes and the \u201cempty slots\u201d you get by rendering <code class=\"language-javascript\">null</code>.</li>\n<li>Renderers use <a href=\"/react/codebase-overview#dynamic-injection\">injection</a> to pass the host internal class to the reconciler. For example, React DOM tells the reconciler to use <code class=\"language-javascript\">ReactDOMComponent</code> as the host internal instance implementation.</li>\n<li>The logic for updating the list of children is extracted into a mixin called <code class=\"language-javascript\">ReactMultiChild</code> which is used by the host internal instance class implementations both in React DOM and React Native.</li>\n<li>The reconciler also implements support for <code class=\"language-javascript\">setState()</code> in composite components. Multiple updates inside event handlers get batched into a single update.</li>\n<li>The reconciler also takes care of attaching and detaching refs to composite components and host nodes.</li>\n<li>Lifecycle methods that are called after the DOM is ready, such as <code class=\"language-javascript\">componentDidMount()</code> and <code class=\"language-javascript\">componentDidUpdate()</code>, get collected into \u201ccallback queues\u201d and are executed in a single batch.</li>\n<li>React puts information about the current update into an internal object called \u201ctransaction\u201d. Transactions are useful for keeping track of the queue of pending lifecycle methods, the current DOM nesting for the warnings, and anything else that is \u201cglobal\u201d to a specific update. Transactions also ensure React \u201ccleans everything up\u201d after updates. For example, the transaction class provided by React DOM restores the input selection after any update.</li>\n</ul>\n<h3 id=\"jumping-into-the-code\"><a class=\"anchor\" href=\"/react/implementation-notes#jumping-into-the-code\"></a>Jumping into the Code </h3>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/dom/client/ReactMount.js\"><code class=\"language-javascript\">ReactMount</code></a> is where the code like <code class=\"language-javascript\">mountTree()</code> and <code class=\"language-javascript\">unmountTree()</code> from this tutorial lives. It takes care of mounting and unmounting top-level components. <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/native/ReactNativeMount.js\"><code class=\"language-javascript\">ReactNativeMount</code></a> is its React Native analog.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/dom/shared/ReactDOMComponent.js\"><code class=\"language-javascript\">ReactDOMComponent</code></a> is the equivalent of <code class=\"language-javascript\">DOMComponent</code> in this tutorial. It implements the host component class for React DOM renderer. <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/native/ReactNativeBaseComponent.js\"><code class=\"language-javascript\">ReactNativeBaseComponent</code></a> is its React Native analog.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js\"><code class=\"language-javascript\">ReactCompositeComponent</code></a> is the equivalent of <code class=\"language-javascript\">CompositeComponent</code> in this tutorial. It handles calling user-defined components and maintaining their state.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/instantiateReactComponent.js\"><code class=\"language-javascript\">instantiateReactComponent</code></a> contains the switch that picks the right internal instance class to construct for an element. It is equivalent to <code class=\"language-javascript\">instantiateComponent()</code> in this tutorial.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactReconciler.js\"><code class=\"language-javascript\">ReactReconciler</code></a> is a wrapper with <code class=\"language-javascript\">mountComponent()</code>, <code class=\"language-javascript\">receiveComponent()</code>, and <code class=\"language-javascript\">unmountComponent()</code> methods. It calls the underlying implementations on the internal instances, but also includes some code around them that is shared by all internal instance implementations.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactChildReconciler.js\"><code class=\"language-javascript\">ReactChildReconciler</code></a> implements the logic for mounting, updating, and unmounting children according to the <code class=\"language-javascript\">key</code> of their elements.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactMultiChild.js\"><code class=\"language-javascript\">ReactMultiChild</code></a> implements processing the operation queue for child insertions, deletions, and moves independently of the renderer.</li>\n<li><code class=\"language-javascript\">mount()</code>, <code class=\"language-javascript\">receive()</code>, and <code class=\"language-javascript\">unmount()</code> are really called <code class=\"language-javascript\">mountComponent()</code>, <code class=\"language-javascript\">receiveComponent()</code>, and <code class=\"language-javascript\">unmountComponent()</code> in React codebase for legacy reasons, but they receive elements.</li>\n<li>Properties on the internal instances start with an underscore, e.g. <code class=\"language-javascript\">_currentElement</code>. They are considered to be read-only public fields throughout the codebase.</li>\n</ul>\n<h3 id=\"future-directions\"><a class=\"anchor\" href=\"/react/implementation-notes#future-directions\"></a>Future Directions </h3>\n<p>Stack reconciler has inherent limitations such as being synchronous and unable to interrupt the work or split it in chunks. There is a work in progress on the <a href=\"/react/codebase-overview#fiber-reconciler\">new Fiber reconciler</a> with a <a class=\"external-link\" href=\"https://github.com/acdlite/react-fiber-architecture\">completely different architecture</a>. In the future, we intend to replace stack reconciler with it, but at the moment it is far from feature parity.</p>\n<h3 id=\"next-steps\"><a class=\"anchor\" href=\"/react/implementation-notes#next-steps\"></a>Next Steps </h3>\n<p>Read the <a href=\"/react/design-principles\">next section</a> to learn about the guiding principles we use for React development.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/implementation-notes.md\">Edit this page</a></p></div></article>", "path": "/react/implementation-notes", "nav": ["/react/codebase-overview", "/react/design-principles"]}, {"key": "Principi di Design", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>We wrote this document so that you have a better idea of how we decide what React does and what React doesn\u2019t do, and what our development philosophy is like. While we are excited to see community contributions, we are not likely to choose a path that violates one or more of these principles.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>This document assumes a strong understanding of React. It describes the design principles of <em>React itself</em>, not React components or applications.</p>\n<p>For an introduction to React, check out <a href=\"/react/thinking-in-react\">Pensare in React</a> instead.</p>\n</div>\n<h3 id=\"composition\"><a class=\"anchor\" href=\"/react/design-principles#composition\"></a>Composition </h3>\n<p>The key feature of React is composition of components. Components written by different people should work well together. It is important to us that you can add functionality to a component without causing rippling changes throughout the codebase.</p>\n<p>For example, it should be possible to introduce some local state into a component without changing any of the components using it. Similarly, it should be possible to add some initialization and teardown code to any component when necessary.</p>\n<p>There is nothing \u201cbad\u201d about using state or lifecycle methods in components. Like any powerful feature, they should be used in moderation, but we have no intention to remove them. On the contrary, we think they are integral parts of what makes React useful. We might enable <a class=\"external-link\" href=\"https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State\">more functional patterns</a> in the future, but both local state and lifecycle methods will be a part of that model.</p>\n<p>Components are often described as \u201cjust functions\u201d but in our view they need to be more than that to be useful. In React, components describe any composable behavior, and this includes rendering, lifecycle, and state. Some external libraries like <a class=\"external-link\" href=\"https://facebook.github.io/relay/\">Relay</a> augment components with other responsibilities such as describing data dependencies. It is possible that those ideas might make it back into React too in some form.</p>\n<h3 id=\"common-abstraction\"><a class=\"anchor\" href=\"/react/design-principles#common-abstraction\"></a>Common Abstraction </h3>\n<p>In general we <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=4anAwXYqLG8\">resist adding features</a> that can be implemented in userland. We don\u2019t want to bloat your apps with useless library code. However, there are exceptions to this.</p>\n<p>For example, if React didn\u2019t provide support for local state or lifecycle methods, people would create custom abstractions for them. When there are multiple abstractions competing, React can\u2019t enforce or take advantage of the properties of either of them. It has to work with the lowest common denominator.</p>\n<p>This is why sometimes we add features to React itself. If we notice that many components implement a certain feature in incompatible or inefficient ways, we might prefer to bake it into React. We don\u2019t do it lightly. When we do it, it\u2019s because we are confident that raising the abstraction level benefits the whole ecosystem. State, lifecycle methods, cross-browser event normalization are good examples of this.</p>\n<p>We always discuss such improvement proposals with the community. You can find some of those discussions by the <a class=\"external-link\" href=\"https://github.com/facebook/react/issues?q=is:open+is:issue+label:%22Type:+Big+Picture%22\">\u201cbig picture\u201d</a> label on the React issue tracker.</p>\n<h3 id=\"escape-hatches\"><a class=\"anchor\" href=\"/react/design-principles#escape-hatches\"></a>Escape Hatches </h3>\n<p>React is pragmatic. It is driven by the needs of the products written at Facebook. While it is influenced by some paradigms that are not yet fully mainstream such as functional programming, staying accessible to a wide range of developers with different skills and experience levels is an explicit goal of the project.</p>\n<p>If we want to deprecate a pattern that we don\u2019t like, it is our responsibility to consider all existing use cases for it and <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">educate the community about the alternatives</a> before we deprecate it. If some pattern that is useful for building apps is hard to express in a declarative way, we will <a href=\"/react/more-about-refs\">provide an imperative API</a> for it. If we can\u2019t figure out a perfect API for something that we found necessary in many apps, we will <a href=\"/react/legacy-context\">provide a temporary subpar working API</a> as long as it is possible to get rid of it later and it leaves the door open for future improvements.</p>\n<h3 id=\"stability\"><a class=\"anchor\" href=\"/react/design-principles#stability\"></a>Stability </h3>\n<p>We value API stability. At Facebook, we have more than 50 thousand components using React. Many other companies, including <a class=\"external-link\" href=\"https://twitter.com/\">Twitter</a> and <a class=\"external-link\" href=\"https://www.airbnb.com/\">Airbnb</a>, are also heavy users of React. This is why we are usually reluctant to change public APIs or behavior.</p>\n<p>However we think stability in the sense of \u201cnothing changes\u201d is overrated. It quickly turns into stagnation. Instead, we prefer the stability in the sense of \u201cIt is heavily used in production, and when something changes, there is a clear (and preferably automated) migration path.\u201d</p>\n<p>When we deprecate a pattern, we study its internal usage at Facebook and add deprecation warnings. They let us assess the impact of the change. Sometimes we back out if we see that it is too early, and we need to think more strategically about getting the codebases to the point where they are ready for this change.</p>\n<p>If we are confident that the change is not too disruptive and the migration strategy is viable for all use cases, we release the deprecation warning to the open source community. We are closely in touch with many users of React outside of Facebook, and we monitor popular open source projects and guide them in fixing those deprecations.</p>\n<p>Given the sheer size of the Facebook React codebase, successful internal migration is often a good indicator that other companies won\u2019t have problems either. Nevertheless sometimes people point out additional use cases we haven\u2019t thought of, and we add escape hatches for them or rethink our approach.</p>\n<p>We don\u2019t deprecate anything without a good reason. We recognize that sometimes deprecations warnings cause frustration but we add them because deprecations clean up the road for the improvements and new features that we and many people in the community consider valuable.</p>\n<p>For example, we added a <a class=\"external-link\" href=\"https://it.reactjs.org//warnings/unknown-prop.html\">warning about unknown DOM props</a> in React 15.2.0. Many projects were affected by this. However fixing this warning is important so that we can introduce the support for <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/140\">custom attributes</a> to React. There is a reason like this behind every deprecation that we add.</p>\n<p>When we add a deprecation warning, we keep it for the rest of the current major version, and <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2016/02/19/new-versioning-scheme.html\">change the behavior in the next major version</a>. If there is a lot of repetitive manual work involved, we release a <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=d0pOgY8__JM\">codemod</a> script that automates most of the change. Codemods enable us to move forward without stagnation in a massive codebase, and we encourage you to use them as well.</p>\n<p>You can find the codemods that we released in the <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod\">react-codemod</a> repository.</p>\n<h3 id=\"interoperability\"><a class=\"anchor\" href=\"/react/design-principles#interoperability\"></a>Interoperability </h3>\n<p>We place high value in interoperability with existing systems and gradual adoption. Facebook has a massive non-React codebase. Its website uses a mix of a server-side component system called XHP, internal UI libraries that came before React, and React itself. It is important to us that any product team can <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=BF58ZJ1ZQxY\">start using React for a small feature</a> rather than rewrite their code to bet on it.</p>\n<p>This is why React provides escape hatches to work with mutable models, and tries to work well together with other UI libraries. You can wrap an existing imperative UI into a declarative component, and vice versa. This is crucial for gradual adoption.</p>\n<h3 id=\"scheduling\"><a class=\"anchor\" href=\"/react/design-principles#scheduling\"></a>Scheduling </h3>\n<p>Even when your components are described as functions, when you use React you don\u2019t call them directly. Every component returns a <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2015/12/18/react-components-elements-and-instances.html#elements-describe-the-tree\">description of what needs to be rendered</a>, and that description may include both user-written components like <code class=\"language-javascript\">&lt;LikeButton&gt;</code> and platform-specific components like <code class=\"language-javascript\">&lt;div&gt;</code>. It is up to React to \u201cunroll\u201d <code class=\"language-javascript\">&lt;LikeButton&gt;</code> at some point in the future and actually apply changes to the UI tree according to the render results of the components recursively.</p>\n<p>This is a subtle distinction but a powerful one. Since you don\u2019t call that component function but let React call it, it means React has the power to delay calling it if necessary. In its current implementation React walks the tree recursively and calls render functions of the whole updated tree during a single tick. However in the future it might start <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/6170\">delaying some updates to avoid dropping frames</a>.</p>\n<p>This is a common theme in React design. Some popular libraries implement the \u201cpush\u201d approach where computations are performed when the new data is available. React, however, sticks to the \u201cpull\u201d approach where computations can be delayed until necessary.</p>\n<p>React is not a generic data processing library. It is a library for building user interfaces. We think that it is uniquely positioned in an app to know which computations are relevant right now and which are not.</p>\n<p>If something is offscreen, we can delay any logic related to it. If data is arriving faster than the frame rate, we can coalesce and batch updates. We can prioritize work coming from user interactions (such as an animation caused by a button click) over less important background work (such as rendering new content just loaded from the network) to avoid dropping frames.</p>\n<p>To be clear, we are not taking advantage of this right now. However the freedom to do something like this is why we prefer to have control over scheduling, and why <code class=\"language-javascript\">setState()</code> is asynchronous. Conceptually, we think of it as \u201cscheduling an update\u201d.</p>\n<p>The control over scheduling would be harder for us to gain if we let the user directly compose views with a \u201cpush\u201d based paradigm common in some variations of <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Functional_reactive_programming\">Functional Reactive Programming</a>. We want to own the \u201cglue\u201d code.</p>\n<p>It is a key goal for React that the amount of the user code that executes before yielding back into React is minimal. This ensures that React retains the capability to schedule and split work in chunks according to what it knows about the UI.</p>\n<p>There is an internal joke in the team that React should have been called \u201cSchedule\u201d because React does not want to be fully \u201creactive\u201d.</p>\n<h3 id=\"developer-experience\"><a class=\"anchor\" href=\"/react/design-principles#developer-experience\"></a>Developer Experience </h3>\n<p>Providing a good developer experience is important to us.</p>\n<p>For example, we maintain <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-devtools\">React DevTools</a> which let you inspect the React component tree in Chrome and Firefox. We have heard that it brings a big productivity boost both to the Facebook engineers and to the community.</p>\n<p>We also try to go an extra mile to provide helpful developer warnings. For example, React warns you in development if you nest tags in a way that the browser doesn\u2019t understand, or if you make a common typo in the API. Developer warnings and the related checks are the main reason why the development version of React is slower than the production version.</p>\n<p>The usage patterns that we see internally at Facebook help us understand what the common mistakes are, and how to prevent them early. When we add new features, we try to anticipate the common mistakes and warn about them.</p>\n<p>We are always looking out for ways to improve the developer experience. We love to hear your suggestions and accept your contributions to make it even better.</p>\n<h3 id=\"debugging\"><a class=\"anchor\" href=\"/react/design-principles#debugging\"></a>Debugging </h3>\n<p>When something goes wrong, it is important that you have breadcrumbs to trace the mistake to its source in the codebase. In React, props and state are those breadcrumbs.</p>\n<p>If you see something wrong on the screen, you can open React DevTools, find the component responsible for rendering, and then see if the props and state are correct. If they are, you know that the problem is in the component\u2019s <code class=\"language-javascript\">render()</code> function, or some function that is called by <code class=\"language-javascript\">render()</code>. The problem is isolated.</p>\n<p>If the state is wrong, you know that the problem is caused by one of the <code class=\"language-javascript\">setState()</code> calls in this file. This, too, is relatively simple to locate and fix because usually there are only a few <code class=\"language-javascript\">setState()</code> calls in a single file.</p>\n<p>If the props are wrong, you can traverse the tree up in the inspector, looking for the component that first \u201cpoisoned the well\u201d by passing bad props down.</p>\n<p>This ability to trace any UI to the data that produced it in the form of current props and state is very important to React. It is an explicit design goal that state is not \u201ctrapped\u201d in closures and combinators, and is available to React directly.</p>\n<p>While the UI is dynamic, we believe that synchronous <code class=\"language-javascript\">render()</code> functions of props and state turn debugging from guesswork into a boring but finite procedure. We would like to preserve this constraint in React even though it makes some use cases, like complex animations, harder.</p>\n<h3 id=\"configuration\"><a class=\"anchor\" href=\"/react/design-principles#configuration\"></a>Configuration </h3>\n<p>We find global runtime configuration options to be problematic.</p>\n<p>For example, it is occasionally requested that we implement a function like <code class=\"language-javascript\">React.configure(options)</code> or <code class=\"language-javascript\">React.register(component)</code>. However this poses multiple problems, and we are not aware of good solutions to them.</p>\n<p>What if somebody calls such a function from a third-party component library? What if one React app embeds another React app, and their desired configurations are incompatible? How can a third-party component specify that it requires a particular configuration? We think that global configuration doesn\u2019t work well with composition. Since composition is central to React, we don\u2019t provide global configuration in code.</p>\n<p>We do, however, provide some global configuration on the build level. For example, we provide separate development and production builds. We may also <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/6627\">add a profiling build</a> in the future, and we are open to considering other build flags.</p>\n<h3 id=\"beyond-the-dom\"><a class=\"anchor\" href=\"/react/design-principles#beyond-the-dom\"></a>Beyond the DOM </h3>\n<p>We see the value of React in the way it allows us to write components that have fewer bugs and compose together well. DOM is the original rendering target for React but <a class=\"external-link\" href=\"https://reactnative.dev/\">React Native</a> is just as important both to Facebook and the community.</p>\n<p>Being renderer-agnostic is an important design constraint of React. It adds some overhead in the internal representations. On the other hand, any improvements to the core translate across platforms.</p>\n<p>Having a single programming model lets us form engineering teams around products instead of platforms. So far the tradeoff has been worth it for us.</p>\n<h3 id=\"implementation\"><a class=\"anchor\" href=\"/react/design-principles#implementation\"></a>Implementation </h3>\n<p>We try to provide elegant APIs where possible. We are much less concerned with the implementation being elegant. The real world is far from perfect, and to a reasonable extent we prefer to put the ugly code into the library if it means the user does not have to write it. When we evaluate new code, we are looking for an implementation that is correct, performant and affords a good developer experience. Elegance is secondary.</p>\n<p>We prefer boring code to clever code. Code is disposable and often changes. So it is important that it <a class=\"external-link\" href=\"https://youtu.be/4anAwXYqLG8?t=13m9s\">doesn\u2019t introduce new internal abstractions unless absolutely necessary</a>. Verbose code that is easy to move around, change and remove is preferred to elegant code that is prematurely abstracted and hard to change.</p>\n<h3 id=\"optimized-for-tooling\"><a class=\"anchor\" href=\"/react/design-principles#optimized-for-tooling\"></a>Optimized for Tooling </h3>\n<p>Some commonly used APIs have verbose names. For example, we use <code class=\"language-javascript\">componentDidMount()</code> instead of <code class=\"language-javascript\">didMount()</code> or <code class=\"language-javascript\">onMount()</code>. This is <a class=\"external-link\" href=\"https://github.com/reactjs/react-future/issues/40#issuecomment-142442124\">intentional</a>. The goal is to make the points of interaction with the library highly visible.</p>\n<p>In a massive codebase like Facebook, being able to search for uses of specific APIs is very important. We value distinct verbose names, and especially for the features that should be used sparingly. For example, <code class=\"language-javascript\">dangerouslySetInnerHTML</code> is hard to miss in a code review.</p>\n<p>Optimizing for search is also important because of our reliance on <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=d0pOgY8__JM\">codemods</a> to make breaking changes. We want it to be easy and safe to apply vast automated changes across the codebase, and unique verbose names help us achieve this. Similarly, distinctive names make it easy to write custom <a class=\"external-link\" href=\"https://github.com/yannickcr/eslint-plugin-react\">lint rules</a> about using React without worrying about potential false positives.</p>\n<p><a href=\"/react/introducing-jsx\">JSX</a> plays a similar role. While it is not required with React, we use it extensively at Facebook both for aesthetic and pragmatic reasons.</p>\n<p>In our codebase, JSX provides an unambiguous hint to the tools that they are dealing with a React element tree. This makes it possible to add build-time optimizations such as <a class=\"external-link\" href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-constant-elements/\">hoisting constant elements</a>, safely lint and codemod internal component usage, and <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/6771\">include JSX source location</a> into the warnings.</p>\n<h3 id=\"dogfooding\"><a class=\"anchor\" href=\"/react/design-principles#dogfooding\"></a>Dogfooding </h3>\n<p>We try our best to address the problems raised by the community. However we are likely to prioritize the issues that people are <em>also</em> experiencing internally at Facebook. Perhaps counter-intuitively, we think this is the main reason why the community can bet on React.</p>\n<p>Heavy internal usage gives us the confidence that React won\u2019t disappear tomorrow. React was created at Facebook to solve its problems. It brings tangible business value to the company and is used in many of its products. <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Eating_your_own_dog_food\">Dogfooding</a> it means that our vision stays sharp and we have a focused direction going forward.</p>\n<p>This doesn\u2019t mean that we ignore the issues raised by the community. For example, we added support for <a href=\"/react/webcomponents\">web components</a> and <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/6243\">SVG</a> to React even though we don\u2019t rely on either of them internally. We are actively <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/2686\">listening to your pain points</a> and <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2016/07/11/introducing-reacts-error-code-system.html\">address them</a> to the best of our ability. The community is what makes React special to us, and we are honored to contribute back.</p>\n<p>After releasing many open source projects at Facebook, we have learned that trying to make everyone happy at the same time produced projects with poor focus that didn\u2019t grow well. Instead, we found that picking a small audience and focusing on making them happy brings a positive net effect. That\u2019s exactly what we did with React, and so far solving the problems encountered by Facebook product teams has translated well to the open source community.</p>\n<p>The downside of this approach is that sometimes we fail to give enough focus to the things that Facebook teams don\u2019t have to deal with, such as the \u201cgetting started\u201d experience. We are acutely aware of this, and we are thinking of how to improve in a way that would benefit everyone in the community without making the same mistakes we did with open source projects before.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/design-principles.md\">Edit this page</a></p></div></article>", "path": "/react/design-principles", "nav": ["/react/implementation-notes", "/react/faq-ajax"]}]}, {"key": "FAQ", "values": [{"key": "AJAX ed APIs", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"how-can-i-make-an-ajax-call\"><a class=\"anchor\" href=\"/react/faq-ajax#how-can-i-make-an-ajax-call\"></a>Come posso fare una chiamata AJAX ? </h3>\n<p>Puoi usare qualsiasi libreria AJAX con React. Le pi\u00f9 popolari sono <a class=\"external-link\" href=\"https://github.com/axios/axios\">Axios</a>, <a class=\"external-link\" href=\"https://api.jquery.com/jQuery.ajax/\">jQuery AJAX</a>, e l\u2019API <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">window.fetch</a> che \u00e8 integrata nel browser.</p>\n<h3 id=\"where-in-the-component-lifecycle-should-i-make-an-ajax-call\"><a class=\"anchor\" href=\"/react/faq-ajax#where-in-the-component-lifecycle-should-i-make-an-ajax-call\"></a>In quale punto del ciclo di vita del componente devo effettuare una chiamata AJAX? </h3>\n<p>Dovresti popolare i dati con chiamate AJAX nel metodo <a href=\"/react/react-component#mounting\"><code class=\"language-javascript\">componentDidMount</code></a>. In questo modo puoi usare <code class=\"language-javascript\">setState</code> per aggiornare il tuo componente quando i dati vengono recuperati.</p>\n<h3 id=\"example-using-ajax-results-to-set-local-state\"><a class=\"anchor\" href=\"/react/faq-ajax#example-using-ajax-results-to-set-local-state\"></a>Esempio: utilizzo dei risultati AJAX per impostare lo stato locale </h3>\n<p>Il componente seguente mostra come effettuare una chiamata AJAX in <code class=\"language-javascript\">componentDidMount</code> per popolare lo stato del componente locale.</p>\n<p>L\u2019API in questione restituisce un oggetto JSON di questo formato:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">{\n  \"items\": [\n    { \"id\": 1, \"name\": \"Apples\",  \"price\": \"$2\" },\n    { \"id\": 2, \"name\": \"Peaches\", \"price\": \"$5\" }\n  ] \n}</code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">isLoaded</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.example.com/items\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">isLoaded</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>items\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Nota: \u00e8 importante gestire gli errori qui</span>\n        <span class=\"token comment\">// invece di un blocco catch() in modo da non fare passare</span>\n        <span class=\"token comment\">// eccezioni da bug reali nei componenti.</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">isLoaded</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            error\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> isLoaded<span class=\"token punctuation\">,</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Error: </span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ecco l\u2019equivalente con <a class=\"external-link\" href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoaded<span class=\"token punctuation\">,</span> setIsLoaded<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">,</span> setItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token comment\">// Nota: l'array deps vuoto [] significa</span>\n  <span class=\"token comment\">// questo useEffect verr\u00e0 eseguito una volta</span>\n  <span class=\"token comment\">// simile a componentDidMount()</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.example.com/items\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setIsLoaded</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Nota: \u00e8 importante gestire gli errori qui</span>\n        <span class=\"token comment\">// invece di un blocco catch() in modo da non fare passare</span>\n        <span class=\"token comment\">// eccezioni da bug reali nei componenti.</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setIsLoaded</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Error: </span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/faq-ajax.md\">Edit this page</a></p></div></article>", "path": "/react/faq-ajax", "nav": ["/react/design-principles", "/react/faq-build"]}, {"key": "Babel, JSX, e Build Steps", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"do-i-need-to-use-jsx-with-react\"><a class=\"anchor\" href=\"/react/faq-build#do-i-need-to-use-jsx-with-react\"></a>Do I need to use JSX with React? </h3>\n<p>No! Check out <a href=\"/react/react-without-jsx\">\u201cReact Without JSX\u201d</a> to learn more.</p>\n<h3 id=\"do-i-need-to-use-es6--with-react\"><a class=\"anchor\" href=\"/react/faq-build#do-i-need-to-use-es6--with-react\"></a>Do I need to use ES6 (+) with React? </h3>\n<p>No! Check out <a href=\"/react/react-without-es6\">\u201cReact Without ES6\u201d</a> to learn more.</p>\n<h3 id=\"how-can-i-write-comments-in-jsx\"><a class=\"anchor\" href=\"/react/faq-build#how-can-i-write-comments-in-jsx\"></a>How can I write comments in JSX? </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Comment goes here */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* It also works \n  for multi-line comments. */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">! \n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/faq-build.md\">Edit this page</a></p></div></article>", "path": "/react/faq-build", "nav": ["/react/faq-ajax", "/react/faq-functions"]}, {"key": "Passare Funzioni ai Componenti", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"how-do-i-pass-an-event-handler-like-onclick-to-a-component\"><a class=\"anchor\" href=\"/react/faq-functions#how-do-i-pass-an-event-handler-like-onclick-to-a-component\"></a>How do I pass an event handler (like onClick) to a component? </h3>\n<p>Pass event handlers and other functions as props to child components:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>If you need to have access to the parent component in the handler, you also need to bind the function to the component instance (see below).</p>\n<h3 id=\"how-do-i-bind-a-function-to-a-component-instance\"><a class=\"anchor\" href=\"/react/faq-functions#how-do-i-bind-a-function-to-a-component-instance\"></a>How do I bind a function to a component instance? </h3>\n<p>There are several ways to make sure functions have access to component attributes like <code class=\"language-javascript\">this.props</code> and <code class=\"language-javascript\">this.state</code>, depending on which syntax and build steps you are using.</p>\n<h4 id=\"bind-in-constructor-es2015\"><a class=\"anchor\" href=\"/react/faq-functions#bind-in-constructor-es2015\"></a>Bind in Constructor (ES2015) </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click happened'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"class-properties-es2022\"><a class=\"anchor\" href=\"/react/faq-functions#class-properties-es2022\"></a>Class Properties (ES2022) </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click happened'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"bind-in-render\"><a class=\"anchor\" href=\"/react/faq-functions#bind-in-render\"></a>Bind in Render </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click happened'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Using <code class=\"language-javascript\">Function.prototype.bind</code> in render creates a new function each time the component renders, which may have performance implications (see below).</p>\n</div>\n<h4 id=\"arrow-function-in-render\"><a class=\"anchor\" href=\"/react/faq-functions#arrow-function-in-render\"></a>Arrow Function in Render </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click happened'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Using an arrow function in render creates a new function each time the component renders, which may break optimizations based on strict identity comparison.</p>\n</div>\n<h3 id=\"is-it-ok-to-use-arrow-functions-in-render-methods\"><a class=\"anchor\" href=\"/react/faq-functions#is-it-ok-to-use-arrow-functions-in-render-methods\"></a>Is it OK to use arrow functions in render methods? </h3>\n<p>Generally speaking, yes, it is OK, and it is often the easiest way to pass parameters to callback functions.</p>\n<p>If you do have performance issues, by all means, optimize!</p>\n<h3 id=\"why-is-binding-necessary-at-all\"><a class=\"anchor\" href=\"/react/faq-functions#why-is-binding-necessary-at-all\"></a>Why is binding necessary at all? </h3>\n<p>In JavaScript, these two code snippets are <strong>not</strong> equivalent:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n<span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Binding methods helps ensure that the second snippet works the same way as the first one.</p>\n<p>With React, typically you only need to bind the methods you <em>pass</em> to other components. For example, <code class=\"language-javascript\">&lt;button onClick={this.handleClick}&gt;</code> passes <code class=\"language-javascript\">this.handleClick</code> so you want to bind it. However, it is unnecessary to bind the <code class=\"language-javascript\">render</code> method or the lifecycle methods: we don\u2019t pass them to other components.</p>\n<p><a class=\"external-link\" href=\"https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/\">This post by Yehuda Katz</a> explains what binding is, and how functions work in JavaScript, in detail.</p>\n<h3 id=\"why-is-my-function-being-called-every-time-the-component-renders\"><a class=\"anchor\" href=\"/react/faq-functions#why-is-my-function-being-called-every-time-the-component-renders\"></a>Why is my function being called every time the component renders? </h3>\n<p>Make sure you aren\u2019t <em>calling the function</em> when you pass it to the component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Wrong: handleClick is called instead of passed as a reference!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Instead, <em>pass the function itself</em> (without parens):</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Correct: handleClick is passed as a reference!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"how-do-i-pass-a-parameter-to-an-event-handler-or-callback\"><a class=\"anchor\" href=\"/react/faq-functions#how-do-i-pass-a-parameter-to-an-event-handler-or-callback\"></a>How do I pass a parameter to an event handler or callback? </h3>\n<p>You can use an arrow function to wrap around an event handler and pass parameters:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>This is equivalent to calling <code class=\"language-javascript\">.bind</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<h4 id=\"example-passing-params-using-arrow-functions\"><a class=\"anchor\" href=\"/react/faq-functions#example-passing-params-using-arrow-functions\"></a>Example: Passing params using arrow functions </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span> <span class=\"token comment\">// ASCII character code</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alphabet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">justClicked</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">letters</span><span class=\"token operator\">:</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">justClicked</span><span class=\"token operator\">:</span> letter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Just clicked: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>justClicked<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>letters<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span> <span class=\"token operator\">=&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"example-passing-params-using-data-attributes\"><a class=\"anchor\" href=\"/react/faq-functions#example-passing-params-using-data-attributes\"></a>Example: Passing params using data-attributes </h4>\n<p>Alternately, you can use DOM APIs to store data needed for event handlers. Consider this approach if you need to optimize a large number of elements or have a render tree that relies on React.PureComponent equality checks.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span> <span class=\"token comment\">// ASCII character code</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alphabet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">justClicked</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">letters</span><span class=\"token operator\">:</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">justClicked</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>letter\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Just clicked: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>justClicked<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>letters<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span> <span class=\"token operator\">=&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">data-letter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row\"><a class=\"anchor\" href=\"/react/faq-functions#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row\"></a>How can I prevent a function from being called too quickly or too many times in a row? </h3>\n<p>If you have an event handler such as <code class=\"language-javascript\">onClick</code> or <code class=\"language-javascript\">onScroll</code> and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be done by using:</p>\n<ul>\n<li><strong>throttling</strong>: sample changes based on a time based frequency (eg <a class=\"external-link\" href=\"https://lodash.com/docs#throttle\"><code class=\"language-javascript\">_.throttle</code></a>)</li>\n<li><strong>debouncing</strong>: publish changes after a period of inactivity (eg <a class=\"external-link\" href=\"https://lodash.com/docs#debounce\"><code class=\"language-javascript\">_.debounce</code></a>)</li>\n<li><strong><code class=\"language-javascript\">requestAnimationFrame</code> throttling</strong>: sample changes based on <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\"><code class=\"language-javascript\">requestAnimationFrame</code></a> (eg <a class=\"external-link\" href=\"https://github.com/alexreardon/raf-schd\"><code class=\"language-javascript\">raf-schd</code></a>)</li>\n</ul>\n<p>See <a class=\"external-link\" href=\"http://demo.nimius.net/debounce_throttle/\">this visualization</a> for a comparison of <code class=\"language-javascript\">throttle</code> and <code class=\"language-javascript\">debounce</code> functions.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">_.debounce</code>, <code class=\"language-javascript\">_.throttle</code> and <code class=\"language-javascript\">raf-schd</code> provide a <code class=\"language-javascript\">cancel</code> method to cancel delayed callbacks. You should either call this method from <code class=\"language-javascript\">componentWillUnmount</code> <em>or</em> check to ensure that the component is still mounted within the delayed function.</p>\n</div>\n<h4 id=\"throttle\"><a class=\"anchor\" href=\"/react/faq-functions#throttle\"></a>Throttle </h4>\n<p>Throttling prevents a function from being called more than once in a given window of time. The example below throttles a \u201cclick\u201d handler to prevent calling it more than once per second.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> throttle <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash.throttle'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadMoreButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClickThrottled <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClickThrottled<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClickThrottled<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Load More</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">loadMore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"debounce\"><a class=\"anchor\" href=\"/react/faq-functions#debounce\"></a>Debounce </h4>\n<p>Debouncing ensures that a function will not be executed until after a certain amount of time has passed since it was last called. This can be useful when you have to perform some expensive calculation in response to an event that might dispatch rapidly (eg scroll or keyboard events). The example below debounces text input with a 250ms delay.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> debounce <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash.debounce'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Searchbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitChangeDebounced <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitChange<span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitChangeDebounced<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Search...<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">defaultValue</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emitChangeDebounced</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">emitChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"requestanimationframe-throttling\"><a class=\"anchor\" href=\"/react/faq-functions#requestanimationframe-throttling\"></a><code class=\"language-javascript\">requestAnimationFrame</code> throttling </h4>\n<p><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\"><code class=\"language-javascript\">requestAnimationFrame</code></a> is a way of queuing a function to be executed in the browser at the optimal time for rendering performance. A function that is queued with <code class=\"language-javascript\">requestAnimationFrame</code> will fire in the next frame. The browser will work hard to ensure that there are 60 frames per second (60 fps). However, if the browser is unable to it will naturally <em>limit</em> the amount of frames in a second. For example, a device might only be able to handle 30 fps and so you will only get 30 frames in that second. Using <code class=\"language-javascript\">requestAnimationFrame</code> for throttling is a useful technique in that it prevents you from doing more than 60 updates in a second. If you are doing 100 updates in a second this creates additional work for the browser that the user will not see anyway.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Using this technique will only capture the last published value in a frame. You can see an example of how this optimization works on <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/Events/scroll\"><code class=\"language-javascript\">MDN</code></a></p>\n</div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> rafSchedule <span class=\"token keyword\">from</span> <span class=\"token string\">'raf-schd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ScrollListener</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleScroll <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleScroll</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Create a new function to schedule updates.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scheduleUpdate <span class=\"token operator\">=</span> <span class=\"token function\">rafSchedule</span><span class=\"token punctuation\">(</span>\n      <span class=\"token parameter\">point</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onScroll</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// When we receive a scroll event, schedule an update.</span>\n    <span class=\"token comment\">// If we receive many updates within a frame, we'll only publish the latest value.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Cancel any pending updates since we're unmounting.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scheduleUpdate<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">overflow</span><span class=\"token operator\">:</span> <span class=\"token string\">'scroll'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onScroll</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleScroll<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/my-huge-image.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"testing-your-rate-limiting\"><a class=\"anchor\" href=\"/react/faq-functions#testing-your-rate-limiting\"></a>Testing your rate limiting </h4>\n<p>When testing your rate limiting code works correctly it is helpful to have the ability to fast forward time. If you are using <a class=\"external-link\" href=\"https://facebook.github.io/jest/\"><code class=\"language-javascript\">jest</code></a> then you can use <a class=\"external-link\" href=\"https://facebook.github.io/jest/docs/en/timer-mocks.html\"><code class=\"language-javascript\">mock timers</code></a> to fast forward time. If you are using <code class=\"language-javascript\">requestAnimationFrame</code> throttling then you may find <a class=\"external-link\" href=\"https://github.com/alexreardon/raf-stub\"><code class=\"language-javascript\">raf-stub</code></a> to be a useful tool to control the ticking of animation frames.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/faq-functions.md\">Edit this page</a></p></div></article>", "path": "/react/faq-functions", "nav": ["/react/faq-build", "/react/faq-state"]}, {"key": "State dei Componenti", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"what-does-setstate-do\"><a class=\"anchor\" href=\"/react/faq-state#what-does-setstate-do\"></a>What does <code class=\"language-javascript\">setState</code> do? </h3>\n<p><code class=\"language-javascript\">setState()</code> schedules an update to a component\u2019s <code class=\"language-javascript\">state</code> object. When state changes, the component responds by re-rendering.</p>\n<h3 id=\"what-is-the-difference-between-state-and-props\"><a class=\"anchor\" href=\"/react/faq-state#what-is-the-difference-between-state-and-props\"></a>What is the difference between <code class=\"language-javascript\">state</code> and <code class=\"language-javascript\">props</code>? </h3>\n<p><a href=\"/react/components-and-props\"><code class=\"language-javascript\">props</code></a> (short for \u201cproperties\u201d) and <a href=\"/react/state-and-lifecycle\"><code class=\"language-javascript\">state</code></a> are both plain JavaScript objects. While both hold information that influences the output of render, they are different in one important way: <code class=\"language-javascript\">props</code> get passed <em>to</em> the component (similar to function parameters) whereas <code class=\"language-javascript\">state</code> is managed <em>within</em> the component (similar to variables declared within a function).</p>\n<p>Here are some good resources for further reading on when to use <code class=\"language-javascript\">props</code> vs <code class=\"language-javascript\">state</code>:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\">Props vs State</a></li>\n<li><a class=\"external-link\" href=\"https://lucybain.com/blog/2016/react-state-vs-pros/\">ReactJS: Props vs. State</a></li>\n</ul>\n<h3 id=\"why-is-setstate-giving-me-the-wrong-value\"><a class=\"anchor\" href=\"/react/faq-state#why-is-setstate-giving-me-the-wrong-value\"></a>Why is <code class=\"language-javascript\">setState</code> giving me the wrong value? </h3>\n<p>In React, both <code class=\"language-javascript\">this.props</code> and <code class=\"language-javascript\">this.state</code> represent the <em>rendered</em> values, i.e. what\u2019s currently on the screen.</p>\n<p>Calls to <code class=\"language-javascript\">setState</code> are asynchronous - don\u2019t rely on <code class=\"language-javascript\">this.state</code> to reflect the new value immediately after calling <code class=\"language-javascript\">setState</code>. Pass an updater function instead of an object if you need to compute values based on the current state (see below for details).</p>\n<p>Example of code that will <em>not</em> behave as expected:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Note: this will *not* work as intended.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">handleSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Let's say `this.state.count` starts at 0.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// When React re-renders the component, `this.state.count` will be 1, but you expected 3.</span>\n\n  <span class=\"token comment\">// This is because `incrementCount()` function above reads from `this.state.count`,</span>\n  <span class=\"token comment\">// but React doesn't update `this.state.count` until the component is re-rendered.</span>\n  <span class=\"token comment\">// So `incrementCount()` ends up reading `this.state.count` as 0 every time, and sets it to 1.</span>\n\n  <span class=\"token comment\">// The fix is described below!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>See below for how to fix this problem.</p>\n<h3 id=\"how-do-i-update-state-with-values-that-depend-on-the-current-state\"><a class=\"anchor\" href=\"/react/faq-state#how-do-i-update-state-with-values-that-depend-on-the-current-state\"></a>How do I update state with values that depend on the current state? </h3>\n<p>Pass a function instead of an object to <code class=\"language-javascript\">setState</code> to ensure the call always uses the most updated version of state (see below). </p>\n<h3 id=\"what-is-the-difference-between-passing-an-object-or-a-function-in-setstate\"><a class=\"anchor\" href=\"/react/faq-state#what-is-the-difference-between-passing-an-object-or-a-function-in-setstate\"></a>What is the difference between passing an object or a function in <code class=\"language-javascript\">setState</code>? </h3>\n<p>Passing an update function allows you to access the current state value inside the updater. Since <code class=\"language-javascript\">setState</code> calls are batched, this lets you chain updates and ensure they build on top of each other instead of conflicting:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Important: read `state` instead of `this.state` when updating.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">handleSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Let's say `this.state.count` starts at 0.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// If you read `this.state.count` now, it would still be 0.</span>\n  <span class=\"token comment\">// But when React re-renders the component, it will be 3.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/react/react-component#setstate\">Learn more about setState</a></p>\n<h3 id=\"when-is-setstate-asynchronous\"><a class=\"anchor\" href=\"/react/faq-state#when-is-setstate-asynchronous\"></a>When is <code class=\"language-javascript\">setState</code> asynchronous? </h3>\n<p>Currently, <code class=\"language-javascript\">setState</code> is asynchronous inside event handlers.</p>\n<p>This ensures, for example, that if both <code class=\"language-javascript\">Parent</code> and <code class=\"language-javascript\">Child</code> call <code class=\"language-javascript\">setState</code> during a click event, <code class=\"language-javascript\">Child</code> isn\u2019t re-rendered twice. Instead, React \u201cflushes\u201d the state updates at the end of the browser event. This results in significant performance improvements in larger apps.</p>\n<p>This is an implementation detail so avoid relying on it directly. In the future versions, React will batch updates by default in more cases.</p>\n<h3 id=\"why-doesnt-react-update-thisstate-synchronously\"><a class=\"anchor\" href=\"/react/faq-state#why-doesnt-react-update-thisstate-synchronously\"></a>Why doesn\u2019t React update <code class=\"language-javascript\">this.state</code> synchronously? </h3>\n<p>As explained in the previous section, React intentionally \u201cwaits\u201d until all components call <code class=\"language-javascript\">setState()</code> in their event handlers before starting to re-render. This boosts performance by avoiding unnecessary re-renders.</p>\n<p>However, you might still be wondering why React doesn\u2019t just update <code class=\"language-javascript\">this.state</code> immediately without re-rendering.</p>\n<p>There are two main reasons:</p>\n<ul>\n<li>This would break the consistency between <code class=\"language-javascript\">props</code> and <code class=\"language-javascript\">state</code>, causing issues that are very hard to debug.</li>\n<li>This would make some of the new features we\u2019re working on impossible to implement.</li>\n</ul>\n<p>This <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">GitHub comment</a> dives deep into the specific examples.</p>\n<h3 id=\"should-i-use-a-state-management-library-like-redux-or-mobx\"><a class=\"anchor\" href=\"/react/faq-state#should-i-use-a-state-management-library-like-redux-or-mobx\"></a>Should I use a state management library like Redux or MobX? </h3>\n<p><a class=\"external-link\" href=\"https://redux.js.org/faq/general#when-should-i-use-redux\">Maybe.</a></p>\n<p>It\u2019s a good idea to get to know React first, before adding in additional libraries. You can build quite complex applications using only React.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/faq-state.md\">Edit this page</a></p></div></article>", "path": "/react/faq-state", "nav": ["/react/faq-functions", "/react/faq-styling"]}, {"key": "Stili e CSS", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"how-do-i-add-css-classes-to-components\"><a class=\"anchor\" href=\"/react/faq-styling#how-do-i-add-css-classes-to-components\"></a>Come posso aggiungere una classe CSS al mio componente? </h3>\n<p>Puoi utilizzare l\u2019apposita prop <code class=\"language-javascript\">className</code>, e passare al suo interno una stringa con il nome della classe che vuoi utilizzare.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>menu navigation-menu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Menu</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Una pratica comune \u00e8 quella di applicare o rimuovere classi CSS in base allo state o alle props del componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> className <span class=\"token operator\">=</span> <span class=\"token string\">'menu'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    className <span class=\"token operator\">+=</span> <span class=\"token string\">' menu-active'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Menu</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Suggerimento</strong>\n<p>Se ti ritrovi spesso a scrivere codice in questo modo, il package <a class=\"external-link\" href=\"https://www.npmjs.com/package/classnames#usage-with-reactjs\">classnames</a> potrebbe esserti utile.</p>\n</div>\n<h3 id=\"can-i-use-inline-styles\"><a class=\"anchor\" href=\"/react/faq-styling#can-i-use-inline-styles\"></a>Posso utilizzare inline styling? </h3>\n<p>Si, consulta la documentazione a riguardo <a href=\"/react/dom-elements#style\">qui</a>.</p>\n<h3 id=\"are-inline-styles-bad\"><a class=\"anchor\" href=\"/react/faq-styling#are-inline-styles-bad\"></a>Utilizzare inline styling \u00e8 una cattiva idea? </h3>\n<p>In linea di massima, l\u2019utilizzo di classi comporta una performance migliore rispetto all\u2019inline styling.</p>\n<h3 id=\"what-is-css-in-js\"><a class=\"anchor\" href=\"/react/faq-styling#what-is-css-in-js\"></a>Che cos\u2019\u00e8 CSS-in-JS? </h3>\n<p>Con \u201cCSS-in-JS\u201d si intende la pratica di definire styling CSS direttamente all\u2019interno di un file JavaScript, anzich\u00e9 utilizzare dei file esterni.</p>\n<p><em>Tieni presente che questa funzionalit\u00e0 non \u00e8 parte di React, ma \u00e8 fornita da librerie esterne.</em> React non fornisce particolari indicazioni su come e dove definire lo styling. Nel dubbio, un buon punto di partenza \u00e9 quello di definire il tuo styling in un file <code class=\"language-javascript\">*.css</code> separato, ed utilizzare cio che \u00e9 definito al suo interno tramite <a href=\"/react/dom-elements#classname\"><code class=\"language-javascript\">className</code></a>.</p>\n<h3 id=\"can-i-do-animations-in-react\"><a class=\"anchor\" href=\"/react/faq-styling#can-i-do-animations-in-react\"></a>Posso utilizzare animazioni in React? </h3>\n<p>React pu\u00f2 essere utilizzato per qualsiasi tipo di animazione. Prova a dare un\u2019occhiata a <a class=\"external-link\" href=\"https://reactcommunity.org/react-transition-group/\">React Transition Group</a>, <a class=\"external-link\" href=\"https://github.com/chenglou/react-motion\">React Motion</a>, <a class=\"external-link\" href=\"https://github.com/react-spring/react-spring\">React Spring</a> o <a class=\"external-link\" href=\"https://framer.com/motion\">Framer Motion</a>, per esempio.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/faq-styling.md\">Edit this page</a></p></div></article>", "path": "/react/faq-styling", "nav": ["/react/faq-state", "/react/faq-structure"]}, {"key": "Struttura dei File", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"is-there-a-recommended-way-to-structure-react-projects\"><a class=\"anchor\" href=\"/react/faq-structure#is-there-a-recommended-way-to-structure-react-projects\"></a>C\u2019\u00e8 un modo consigliato per strutturare progetti React? </h3>\n<p>React non ha opinioni su come organizzi i file nelle cartelle. Detto questo, ci sono alcuni approcci popolari nell\u2019ecosistema che potresti prendere in considerazione.</p>\n<h4 id=\"grouping-by-features-or-routes\"><a class=\"anchor\" href=\"/react/faq-structure#grouping-by-features-or-routes\"></a>Raggruppamento per funzionalit\u00e0 o percorso </h4>\n<p>Una modalit\u00e0 comune per strutturare i progetti \u00e8 posizionare file CSS, JS e i test in cartelle raggruppate per funzionalit\u00e0 o percorso.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">common/\n  Avatar.js\n  Avatar.css\n  APIUtils.js\n  APIUtils.test.js\nfeed/\n  index.js\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  FeedAPI.js\nprofile/\n  index.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n  ProfileAPI.js</code></pre></div>\n<p>La definizione di \u201cfunzionalit\u00e0\u201d non \u00e8 universale e sta a te decidere la granularit\u00e0. Se non riesci ad ottenere una lista di cartelle principali, puoi chiedere agli utenti del tuo prodotto di quali parti \u00e8 composto principalmente e usare il loro modello mentale come schema.</p>\n<h4 id=\"grouping-by-file-type\"><a class=\"anchor\" href=\"/react/faq-structure#grouping-by-file-type\"></a>Raggruppamento per tipo di file </h4>\n<p>Un altro modo popolare per strutturare i progetti \u00e8 raggruppare file simili, ad esempio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">api/\n  APIUtils.js\n  APIUtils.test.js\n  ProfileAPI.js\n  UserAPI.js\ncomponents/\n  Avatar.js\n  Avatar.css\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css</code></pre></div>\n<p>Alcune persone preferiscono andare ancora oltre e separare i componenti in cartelle diverse a seconda del loro ruolo nell\u2019applicazione. Ad esempio, <a class=\"external-link\" href=\"http://bradfrost.com/blog/post/atomic-web-design/\">Atomic Design</a> \u00e8 una metodologia di progettazione costruita su questo principio. Ricorda che spesso \u00e8 pi\u00f9 produttivo trattare queste metodologie come esempi utili piuttosto che come rigide regole da seguire.</p>\n<h4 id=\"avoid-too-much-nesting\"><a class=\"anchor\" href=\"/react/faq-structure#avoid-too-much-nesting\"></a>Evita troppo annidamento </h4>\n<p>Ci sono molti punti deboli associati all\u2019annidamento profondo delle cartelle nei progetti JavaScript. Diventa pi\u00f9 difficile scrivere importazioni relative tra di loro, oppure aggiornare queste importazioni quando i file vengono spostati. A meno che tu non abbia una ragione convincente per usare una struttura di cartelle profonda, considera di limitarti a un massimo di tre o quattro cartelle annidate in un singolo progetto. Naturalmente, questa \u00e8 solo una raccomandazione e potrebbe non essere rilevante per il tuo progetto.</p>\n<h4 id=\"dont-overthink-it\"><a class=\"anchor\" href=\"/react/faq-structure#dont-overthink-it\"></a>Non pensarci troppo </h4>\n<p>Se stai avviando un progetto, <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Analysis_paralysis\">non spendere pi\u00f9 di cinque minuti</a> per scegliere una struttura di file. Scegli uno degli approcci qui sopra (o creane uno tuo) e inizia a scrivere codice! Probabilmente vorrai ripensarci comunque dopo aver scritto del codice reale.</p>\n<p>Se ti senti completamente bloccato, inizia mantenendo tutti i files in un\u2019unica cartella. Col tempo diventer\u00e0 abbastanza grande che vorrai separare alcuni file dagli altri. A quel punto avrai abbastanza conoscenze per indicare quali file modifichi insieme pi\u00f9 frequentemente. In generale, \u00e8 una buona idea tenere i file che cambiano spesso insieme uno vicino all\u2019altro. Questo principio \u00e8 chiamato \u201ccolocation\u201d.</p>\n<p>Man mano che i progetti crescono, nella pratica spesso adottano una combinazione dei due approcci precedenti. Quindi scegliere quello \u201cgiusto\u201d all\u2019inizio non \u00e8 molto importante.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/faq-structure.md\">Edit this page</a></p></div></article>", "path": "/react/faq-structure", "nav": ["/react/faq-styling", "/react/faq-versioning"]}, {"key": "Regole di Versionamento", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React follows <a class=\"external-link\" href=\"https://semver.org/\">semantic versioning (semver)</a> principles.</p>\n<p>That means that with a version number <strong>x.y.z</strong>:</p>\n<ul>\n<li>When releasing <strong>critical bug fixes</strong>, we make a <strong>patch release</strong> by changing the <strong>z</strong> number (ex: 15.6.2 to 15.6.3).</li>\n<li>When releasing <strong>new features</strong> or <strong>non-critical fixes</strong>, we make a <strong>minor release</strong> by changing the <strong>y</strong> number (ex: 15.6.2 to 15.7.0).</li>\n<li>When releasing <strong>breaking changes</strong>, we make a <strong>major release</strong> by changing the <strong>x</strong> number (ex: 15.6.2 to 16.0.0).</li>\n</ul>\n<p>Major releases can also contain new features, and any release can include bug fixes.</p>\n<p>Minor releases are the most common type of release.</p>\n<div class=\"blockquote\">\n<strong>This versioning policy does not apply to prerelease builds in the Next or Experimental channels. Learn more about prereleases.</strong>\n</div>\n<h3 id=\"breaking-changes\"><a class=\"anchor\" href=\"/react/faq-versioning#breaking-changes\"></a>Breaking Changes </h3>\n<p>Breaking changes are inconvenient for everyone, so we try to minimize the number of major releases \u2013 for example, React 15 was released in April 2016 and React 16 was released in September 2017, and React 17 was released in October 2020.</p>\n<p>Instead, we release new features in minor versions. That means that minor releases are often more interesting and compelling than majors, despite their unassuming name.</p>\n<h3 id=\"commitment-to-stability\"><a class=\"anchor\" href=\"/react/faq-versioning#commitment-to-stability\"></a>Commitment to Stability </h3>\n<p>As we change React over time, we try to minimize the effort required to take advantage of new features. When possible, we\u2019ll keep an older API working, even if that means putting it in a separate package. For example, <a class=\"external-link\" href=\"https://it.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">mixins have been discouraged for years</a> but they\u2019re supported to this day <a href=\"/react/react-without-es6#mixins\">via create-react-class</a> and many codebases continue to use them in stable, legacy code.</p>\n<p>Over a million developers use React, collectively maintaining millions of components. The Facebook codebase alone has over 50,000 React components. That means we need to make it as easy as possible to upgrade to new versions of React; if we make large changes without a migration path, people will be stuck on old versions. We test these upgrade paths on Facebook itself \u2013 if our team of less than 10 people can update 50,000+ components alone, we hope the upgrade will be manageable for anyone using React. In many cases, we write <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod\">automated scripts</a> to upgrade component syntax, which we then include in the open-source release for everyone to use.</p>\n<h3 id=\"gradual-upgrades-via-warnings\"><a class=\"anchor\" href=\"/react/faq-versioning#gradual-upgrades-via-warnings\"></a>Gradual Upgrades via Warnings </h3>\n<p>Development builds of React include many helpful warnings. Whenever possible, we add warnings in preparation for future breaking changes. That way, if your app has no warnings on the latest release, it will be compatible with the next major release. This allows you to upgrade your apps one component at a time.</p>\n<p>Development warnings won\u2019t affect the runtime behavior of your app. That way, you can feel confident that your app will behave the same way between the development and production builds \u2014 the only differences are that the production build won\u2019t log the warnings and that it is more efficient. (If you ever notice otherwise, please file an issue.)</p>\n<h3 id=\"what-counts-as-a-breaking-change\"><a class=\"anchor\" href=\"/react/faq-versioning#what-counts-as-a-breaking-change\"></a>What Counts as a Breaking Change? </h3>\n<p>In general, we <em>don\u2019t</em> bump the major version number for changes to:</p>\n<ul>\n<li><strong>Development warnings.</strong> Since these don\u2019t affect production behavior, we may add new warnings or modify existing warnings in between major versions. In fact, this is what allows us to reliably warn about upcoming breaking changes.</li>\n<li><strong>APIs starting with <code class=\"language-javascript\">unstable_</code>.</strong> These are provided as experimental features whose APIs we are not yet confident in. By releasing these with an <code class=\"language-javascript\">unstable_</code> prefix, we can iterate faster and get to a stable API sooner.</li>\n<li><strong>Alpha and canary versions of React.</strong> We provide alpha versions of React as a way to test new features early, but we need the flexibility to make changes based on what we learn in the alpha period. If you use these versions, note that APIs may change before the stable release.</li>\n<li><strong>Undocumented APIs and internal data structures.</strong> If you access internal property names like <code class=\"language-javascript\">__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED</code> or <code class=\"language-javascript\">__reactInternalInstance$uk43rzhitjg</code>, there is no warranty.  You are on your own.</li>\n</ul>\n<p>This policy is designed to be pragmatic: certainly, we don\u2019t want to cause headaches for you. If we bumped the major version for all of these changes, we would end up releasing more major versions and ultimately causing more versioning pain for the community. It would also mean that we can\u2019t make progress in improving React as fast as we\u2019d like.</p>\n<p>That said, if we expect that a change on this list will cause broad problems in the community, we will still do our best to provide a gradual migration path.</p>\n<h3 id=\"minors-versus-patches\"><a class=\"anchor\" href=\"/react/faq-versioning#minors-versus-patches\"></a>If a Minor Release Includes No New Features, Why Isn\u2019t It a Patch? </h3>\n<p>It\u2019s possible that a minor release will not include new features. <a class=\"external-link\" href=\"https://semver.org/#spec-item-7\">This is allowed by semver</a>, which states <strong>\u201d[a minor version] MAY be incremented if substantial new functionality or improvements are introduced within the private code. It MAY include patch level changes.\u201d</strong></p>\n<p>However, it does raise the question of why these releases aren\u2019t versioned as patches instead.</p>\n<p>The answer is that any change to React (or other software) carries some risk of breaking in unexpected ways. Imagine a scenario where a patch release that fixes one bug accidentally introduces a different bug. This would not only be disruptive to developers, but also harm their confidence in future patch releases. It\u2019s especially regrettable if the original fix is for a bug that is rarely encountered in practice.</p>\n<p>We have a pretty good track record for keeping React releases free of bugs, but patch releases have an even higher bar for reliability because most developers assume they can be adopted without adverse consequences.</p>\n<p>For these reasons, we reserve patch releases only for the most critical bugs and security vulnerabilities.</p>\n<p>If a release includes non-essential changes \u2014 such as internal refactors, changes to implementation details, performance improvements, or minor bugfixes \u2014 we will bump the minor version even when there are no new features.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/faq-versioning.md\">Edit this page</a></p></div></article>", "path": "/react/faq-versioning", "nav": ["/react/faq-structure", "/react/faq-internals"]}, {"key": "Virtual DOM ed Interni", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"what-is-the-virtual-dom\"><a class=\"anchor\" href=\"/react/faq-internals#what-is-the-virtual-dom\"></a>What is the Virtual DOM? </h3>\n<p>The virtual DOM (VDOM) is a programming concept where an ideal, or \u201cvirtual\u201d, representation of a UI is kept in memory and synced with the \u201creal\u201d DOM by a library such as ReactDOM. This process is called <a href=\"/react/reconciliation\">riconciliazione</a>.</p>\n<p>This approach enables the declarative API of React: You tell React what state you want the UI to be in, and it makes sure the DOM matches that state. This abstracts out the attribute manipulation, event handling, and manual DOM updating that you would otherwise have to use to build your app.</p>\n<p>Since \u201cvirtual DOM\u201d is more of a pattern than a specific technology, people sometimes say it to mean different things. In React world, the term \u201cvirtual DOM\u201d is usually associated with <a href=\"/react/rendering-elements\">React elements</a> since they are the objects representing the user interface. React, however, also uses internal objects called \u201cfibers\u201d to hold additional information about the component tree. They may also be considered a part of \u201cvirtual DOM\u201d implementation in React.</p>\n<h3 id=\"is-the-shadow-dom-the-same-as-the-virtual-dom\"><a class=\"anchor\" href=\"/react/faq-internals#is-the-shadow-dom-the-same-as-the-virtual-dom\"></a>Is the Shadow DOM the same as the Virtual DOM? </h3>\n<p>No, they are different. The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. The virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.</p>\n<h3 id=\"what-is-react-fiber\"><a class=\"anchor\" href=\"/react/faq-internals#what-is-react-fiber\"></a>What is \u201cReact Fiber\u201d? </h3>\n<p>Fiber is the new reconciliation engine in React 16. Its main goal is to enable incremental rendering of the virtual DOM. <a class=\"external-link\" href=\"https://github.com/acdlite/react-fiber-architecture\">Read more</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/it.reactjs.org/tree/main/content/docs/faq-internals.md\">Edit this page</a></p></div></article>", "path": "/react/faq-internals", "nav": ["/react/faq-versioning"]}]}]