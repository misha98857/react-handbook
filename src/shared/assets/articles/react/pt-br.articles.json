[{"key": "Instala\u00e7\u00e3o", "values": [{"key": "Introdu\u00e7\u00e3o", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Esta p\u00e1gina \u00e9 uma vis\u00e3o geral da documenta\u00e7\u00e3o do React e dos recursos relacionados.</p>\n<p><strong>React</strong> \u00e9 uma biblioteca JavaScript para constru\u00e7\u00e3o de interfaces de usu\u00e1rio. Saiba tudo sobre React em <a class=\"external-link\" href=\"https://pt-br.reactjs.org//\">nossa p\u00e1gina inicial</a> ou <a class=\"external-link\" href=\"https://pt-br.reactjs.org//tutorial/tutorial.html\">atrav\u00e9s do tutorial</a>.</p>\n\n<ul>\n<li><a href=\"/react/getting-started#try-react\">Pratique React</a></li>\n<li><a href=\"/react/getting-started#learn-react\">Aprenda React</a></li>\n<li><a href=\"/react/getting-started#staying-informed\">Mantenha-se informado</a></li>\n<li><a href=\"/react/getting-started#versioned-documentation\">Documenta\u00e7\u00e3o das vers\u00f5es</a></li>\n<li><a href=\"/react/getting-started#something-missing\">Esquecemos Algo?</a></li>\n</ul>\n<h2 id=\"try-react\"><a class=\"anchor\" href=\"/react/getting-started#try-react\"></a>Pratique React </h2>\n<p>React foi pensado desde o in\u00edcio para ser adotado gradualmente e <strong>voc\u00ea pode usar menos ou mais da biblioteca de acordo com sua necessidade.</strong> Se voc\u00ea quer uma amostra do React, adicionar interatividade a uma p\u00e1gina HTML simples ou iniciar uma aplica\u00e7\u00e3o React complexa, os links desta se\u00e7\u00e3o o ajudar\u00e3o no in\u00edcio.</p>\n<h3 id=\"online-playgrounds\"><a class=\"anchor\" href=\"/react/getting-started#online-playgrounds\"></a>Editores Online </h3>\n<p>Se voc\u00ea est\u00e1 interessado em testar um pouco o React, pode usar um editor de c\u00f3digo online. Tente um Ol\u00e1 Mundo no <a class=\"external-link\" href=\"https://pt-br.reactjs.org//redirect-to-codepen/hello-world\">CodePen</a>, <a class=\"external-link\" href=\"https://codesandbox.io/s/new\">CodeSandbox</a>, ou <a class=\"external-link\" href=\"https://stackblitz.com/fork/react\">Stackblitz</a>.</p>\n<p>Se prefere usar o seu pr\u00f3prio editor de texto, pode tamb\u00e9m <a class=\"external-link\" href=\"https://raw.githubusercontent.com/reactjs/reactjs.org/main/static/html/single-file-example.html\">baixar este arquivo HTML</a>, edit\u00e1-lo e a partir do seu sistema de arquivos abrir em seu navegador web. Este arquivo faz uma lenta transforma\u00e7\u00e3o de c\u00f3digo em tempo de execu\u00e7\u00e3o, portanto n\u00f3s recomendamos usar somente para demonstra\u00e7\u00f5es simples.</p>\n<h3 id=\"add-react-to-a-website\"><a class=\"anchor\" href=\"/react/getting-started#add-react-to-a-website\"></a>Adicione React a um Website </h3>\n<p>Voc\u00ea pode <a href=\"/react/add-react-to-a-website\">adicionar React a uma p\u00e1gina HTML em um minuto</a>. Voc\u00ea pode ent\u00e3o expandir gradualmente seu uso ou mant\u00ea-lo limitado a alguns widgets din\u00e2micos.</p>\n<h3 id=\"create-a-new-react-app\"><a class=\"anchor\" href=\"/react/getting-started#create-a-new-react-app\"></a>Crie uma nova Aplica\u00e7\u00e3o React </h3>\n<p>Ao iniciar um projeto React, uma <a href=\"/react/add-react-to-a-website\">simples p\u00e1gina HTML com tags script</a> pode ser a melhor op\u00e7\u00e3o. \u00c9 necess\u00e1rio apenas um minuto para configurar!</p>\n<p>A medida que sua aplica\u00e7\u00e3o cresce, voc\u00ea pode come\u00e7ar a considerar uma configura\u00e7\u00e3o mais integrada. H\u00e1 in\u00fameras ferramentas JavaScript que n\u00f3s recomendamos para aplica\u00e7\u00f5es grandes. Cada uma delas exige pouca ou at\u00e9 nenhuma configura\u00e7\u00e3o e permite a voc\u00ea aproveitar ao m\u00e1ximo o rico ecossistema do React. <a href=\"/react/create-a-new-react-app\">Aprenda como.</a></p>\n<h2 id=\"learn-react\"><a class=\"anchor\" href=\"/react/getting-started#learn-react\"></a>Aprenda React </h2>\n<p>As pessoas chegam ao React com diferentes conhecimentos e com diferentes m\u00e9todos de aprendizado. Independente de preferir uma abordagem mais te\u00f3rica ou mais pr\u00e1tica, esperamos que ache esta se\u00e7\u00e3o \u00fatil.</p>\n<ul>\n<li>Se voc\u00ea preferir <strong>aprender fazendo</strong>, comece com o nosso <a class=\"external-link\" href=\"https://pt-br.reactjs.org//tutorial/tutorial.html\">tutorial pr\u00e1tico</a>.</li>\n<li>Se voc\u00ea preferir <strong>aprender os conceitos passo-a-passo</strong>, inicie com o nosso <a href=\"/react/hello-world\">guia dos principais conceitos</a>.</li>\n</ul>\n<p>Como qualquer tecnologia desconhecida, React tem uma curva de aprendizado. Com pr\u00e1tica e um pouco de paci\u00eancia, voc\u00ea <em>pegar\u00e1</em> o jeito.</p>\n<h3 id=\"first-examples\"><a class=\"anchor\" href=\"/react/getting-started#first-examples\"></a>Primeiros exemplos </h3>\n<p>A <a class=\"external-link\" href=\"https://pt-br.reactjs.org//\">p\u00e1gina inicial do React</a> cont\u00e9m alguns pequenos exemplos de React com um editor incluso. Mesmo que voc\u00ea ainda n\u00e3o saiba nada sobre o React, tente mudar o c\u00f3digo do editor e veja como isso afetar\u00e1 o resultado.</p>\n<h3 id=\"react-for-beginners\"><a class=\"anchor\" href=\"/react/getting-started#react-for-beginners\"></a>React para Iniciantes </h3>\n<p>Se voc\u00ea acha que a documenta\u00e7\u00e3o do React vai em um ritmo mais r\u00e1pido do que voc\u00ea est\u00e1 acostumado, confira <a class=\"external-link\" href=\"https://www.taniarascia.com/getting-started-with-react/\">este resumo do React por Tania Rascia</a>. Ele introduz os conceitos React mais importantes de maneira detalhada e amig\u00e1vel a quem \u00e9 iniciante. Assim que estiver pronto, experimente a documenta\u00e7\u00e3o novamente!</p>\n<h3 id=\"react-for-designers\"><a class=\"anchor\" href=\"/react/getting-started#react-for-designers\"></a>React para Designers </h3>\n<p>Se voc\u00ea vem da \u00e1rea de design, <a class=\"external-link\" href=\"http://reactfordesigners.com/\">estes recursos</a> s\u00e3o um \u00f3timo lugar para come\u00e7ar.</p>\n<h3 id=\"javascript-resources\"><a class=\"anchor\" href=\"/react/getting-started#javascript-resources\"></a>Recursos JavaScript </h3>\n<p>A documenta\u00e7\u00e3o do React assume que voc\u00ea tem alguma familiaridade com a programa\u00e7\u00e3o na linguagem JavaScript. Voc\u00ea n\u00e3o precisa ser um especialista, por\u00e9m \u00e9 mais dif\u00edcil aprender o React e o JavaScript ao mesmo tempo.</p>\n<p>Recomendamos que voc\u00ea leia <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">esta vis\u00e3o geral do JavaScript</a> para verificar seu n\u00edvel de conhecimento. Ela levar\u00e1 entre 30 minutos e uma hora. Assim voc\u00ea se sentir\u00e1 mais confiante para aprender React.</p>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Sempre que voc\u00ea se sentir confuso com algo em JavaScript, o <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript\">MDN</a> e o <a class=\"external-link\" href=\"https://javascript.info/\">javascript.info</a> ser\u00e3o \u00f3timos sites para conferir. H\u00e1 tamb\u00e9m <a class=\"external-link\" href=\"https://pt-br.reactjs.org//community/support.html\">f\u00f3runs de suporte da comunidade</a> onde voc\u00ea poder\u00e1 pedir ajuda.</p>\n</div>\n<h3 id=\"practical-tutorial\"><a class=\"anchor\" href=\"/react/getting-started#practical-tutorial\"></a>Tutorial Pr\u00e1tico </h3>\n<p>Se voc\u00ea prefere <strong>aprender fazendo</strong>, confira nosso <a class=\"external-link\" href=\"https://pt-br.reactjs.org//tutorial/tutorial.html\">tutorial pr\u00e1tico</a>. Neste tutorial, criamos um jogo-da-velha em React. Voc\u00ea pode pensar em evitar desenvolver porque n\u00e3o gosta de construir jogos \u2013 mas d\u00ea uma chance. As t\u00e9cnicas que voc\u00ea aprender\u00e1 no tutorial s\u00e3o fundamentais para criar <em>qualquer</em> aplica\u00e7\u00e3o React e ao domin\u00e1-las dar\u00e1 a voc\u00ea uma compreens\u00e3o muito mais profunda.</p>\n<h3 id=\"step-by-step-guide\"><a class=\"anchor\" href=\"/react/getting-started#step-by-step-guide\"></a>Guia Passo-a-passo </h3>\n<p>Se voc\u00ea prefere <strong>aprender conceitos passo-a-passo</strong>, nosso <a href=\"/react/hello-world\">guia dos principais conceitos</a> \u00e9 o melhor lugar para come\u00e7ar. Cada pr\u00f3ximo cap\u00edtulo \u00e9 baseado no conhecimento apresentado nos cap\u00edtulos anteriores, para que voc\u00ea n\u00e3o perca nada ao longo do processo.</p>\n<h3 id=\"thinking-in-react\"><a class=\"anchor\" href=\"/react/getting-started#thinking-in-react\"></a>Pensando em React </h3>\n<p>Muitos usu\u00e1rios do React d\u00e3o cr\u00e9ditos \u00e0 leitura <a href=\"/react/thinking-in-react\">Pensando em React</a> como o momento em que React finalmente \u201cfez sentido\u201d para eles. \u00c9 provavelmente o passo-a-passo mais antigo do React, mas que ainda \u00e9 relevante.</p>\n<h3 id=\"recommended-courses\"><a class=\"anchor\" href=\"/react/getting-started#recommended-courses\"></a>Cursos Recomendados </h3>\n<p>\u00c0s vezes, as pessoas acham que livros e cursos em v\u00eddeo de terceiros s\u00e3o mais \u00fateis do que a documenta\u00e7\u00e3o oficial. N\u00f3s mantemos <a class=\"external-link\" href=\"https://pt-br.reactjs.org//community/courses.html\">uma lista de recursos recomendados</a>, alguns dos quais s\u00e3o gratuitos.</p>\n<h3 id=\"advanced-concepts\"><a class=\"anchor\" href=\"/react/getting-started#advanced-concepts\"></a>Conceitos Avan\u00e7ados </h3>\n<p>Uma vez que voc\u00ea esteja confort\u00e1vel com os <a href=\"/react/hello-world\">conceitos principais</a> e brincou um pouco com o React, talvez voc\u00ea possa se interessar em t\u00f3picos mais avan\u00e7ados. Esta se\u00e7\u00e3o apresentar\u00e1 poderosos, por\u00e9m menos utilizados, recursos do React, como <a href=\"/react/context\">context</a> e <a href=\"/react/refs-and-the-dom\">refs</a>.</p>\n<h3 id=\"api-reference\"><a class=\"anchor\" href=\"/react/getting-started#api-reference\"></a>Refer\u00eancia da API </h3>\n<p>Esta se\u00e7\u00e3o da documenta\u00e7\u00e3o ser\u00e1 \u00fatil quando voc\u00ea quiser saber mais sobre uma determinada API espec\u00edfica do React. Por exemplo, <a href=\"/react/react-component\">a refer\u00eancia da API do <code class=\"language-javascript\">React.Component</code></a> pode te dar detalhes de como funciona o <code class=\"language-javascript\">setState()</code> e quais os m\u00e9todos do ciclo de vida s\u00e3o \u00fateis para o mesmo.</p>\n<h3 id=\"glossary-and-faq\"><a class=\"anchor\" href=\"/react/getting-started#glossary-and-faq\"></a>Gloss\u00e1rio e FAQ </h3>\n<p>O <a href=\"/react/glossary\">gloss\u00e1rio</a> cont\u00e9m uma vis\u00e3o geral dos principais termos que voc\u00ea ver\u00e1 na documenta\u00e7\u00e3o do React. H\u00e1 tamb\u00e9m uma se\u00e7\u00e3o de FAQ dedicada a perguntas e respostas sobre assuntos comuns, incluindo <a href=\"/react/faq-ajax\">requisi\u00e7\u00f5es AJAX</a>, <a href=\"/react/faq-state\">estado do componente</a> e <a href=\"/react/faq-structure\">estrutura de arquivos</a>.</p>\n<h2 id=\"staying-informed\"><a class=\"anchor\" href=\"/react/getting-started#staying-informed\"></a>Mantenha-se Informado </h2>\n<p>O <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/\">blog do React</a> \u00e9 a fonte oficial para as atualiza\u00e7\u00f5es feitas pelo time do React. Qualquer coisa importante, incluindo notas de lan\u00e7amento ou notifica\u00e7\u00f5es de deprecia\u00e7\u00e3o, ser\u00e3o postadas primeiro l\u00e1.</p>\n<p>Voc\u00ea tamb\u00e9m pode seguir o <a class=\"external-link\" href=\"https://twitter.com/reactjs\">@reactjs</a> no Twitter, mas voc\u00ea n\u00e3o perder\u00e1 nenhuma informa\u00e7\u00e3o essencial se apenas ler o blog.</p>\n<p>Nem toda vers\u00e3o do React tem sua pr\u00f3pria publica\u00e7\u00e3o no blog. Mas voc\u00ea encontrar\u00e1 um detalhado registro de mudan\u00e7as para cada vers\u00e3o no <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CHANGELOG.md\">arquivo <code class=\"language-javascript\">CHANGELOG.md</code> no reposit\u00f3rio do React</a>, assim como na p\u00e1gina de <a class=\"external-link\" href=\"https://github.com/facebook/react/releases\">Vers\u00f5es</a>.</p>\n<h2 id=\"versioned-documentation\"><a class=\"anchor\" href=\"/react/getting-started#versioned-documentation\"></a>Documenta\u00e7\u00e3o das Vers\u00f5es </h2>\n<p>Esta documenta\u00e7\u00e3o sempre refletir\u00e1 a \u00faltima vers\u00e3o est\u00e1vel do React. Desde o React 16, voc\u00ea pode encontrar a documenta\u00e7\u00e3o das vers\u00f5es antigas em uma <a class=\"external-link\" href=\"https://pt-br.reactjs.org//versions\">p\u00e1gina separada</a>. Note que as documenta\u00e7\u00f5es das vers\u00f5es antigas foram criadas no momento de seu lan\u00e7amento e por isso podem n\u00e3o estarem sendo continuamente atualizadas.</p>\n<h2 id=\"something-missing\"><a class=\"anchor\" href=\"/react/getting-started#something-missing\"></a>Esquecemos Algo? </h2>\n<p>Se algo foi esquecido na documenta\u00e7\u00e3o ou se achou alguma parte confusa, por favor <a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/issues/new\">crie uma issue no reposit\u00f3rio da documenta\u00e7\u00e3o</a> com suas sugest\u00f5es para melhor\u00e1-la ou mande um tweet para <a class=\"external-link\" href=\"https://twitter.com/reactjs\">@reactjs</a>. N\u00f3s adoramos sua opini\u00e3o!</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/getting-started.md\">Edit this page</a></p></div></article>", "path": "/react/getting-started", "nav": ["/react", "/react/add-react-to-a-website"]}, {"key": "Adicione o React a um site", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Use o React o quanto precisar, sendo pouco ou muito.</p>\n<p>React foi projetado desde o in\u00edcio para ado\u00e7\u00e3o gradual e <strong>voc\u00ea pode usar o React o quanto precisar, sendo pouco ou muito</strong>. Talvez voc\u00ea s\u00f3 queira adicionar alguns \u201cpontos de interatividade\u201d a uma p\u00e1gina existente. Os componentes React s\u00e3o uma \u00f3tima maneira de fazer isso.</p>\n<p>A grande maioria dos sites n\u00e3o s\u00e3o e n\u00e3o precisam ser, single-page apps. Voc\u00ea pode usar o React em uma pequena parte do seu site com <strong>poucas linhas de c\u00f3digo e nenhuma ferramenta de build</strong>. Voc\u00ea tamb\u00e9m pode expandir gradualmente sua presen\u00e7a ou mant\u00ea-lo contido em alguns widgets din\u00e2micos.</p>\n\n<ul>\n<li><a href=\"/react/add-react-to-a-website#add-react-in-one-minute\">Adicione o React em Um Minuto</a></li>\n<li><a href=\"/react/add-react-to-a-website#optional-try-react-with-jsx\">Opcional: Experimente o React com JSX</a> (sem empacotador necess\u00e1rio!)</li>\n</ul>\n<h2 id=\"add-react-in-one-minute\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#add-react-in-one-minute\"></a>Adicione o React em Um Minuto </h2>\n<p>Nesta se\u00e7\u00e3o, mostraremos como adicionar um componente React a uma p\u00e1gina HTML existente. Voc\u00ea pode usar seu pr\u00f3prio site ou criar um arquivo HTML vazio para praticar.</p>\n<p>N\u00e3o ser\u00e1 necess\u00e1rio usar alguma ferramenta complicada ou instalar algo \u2014 <strong>para completar essa se\u00e7\u00e3o, voc\u00ea s\u00f3 precisa de uma conex\u00e3o de internet e um minuto de seu tempo.</strong></p>\n<p>Opcional: <a class=\"external-link\" href=\"https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/f6c882b6ae18bde42dcf6fdb751aae93495a2275.zip\">Fa\u00e7a o download do exemplo completo (2KB zipado)</a></p>\n<h3 id=\"step-1-add-a-dom-container-to-the-html\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#step-1-add-a-dom-container-to-the-html\"></a>Passo 1: Adicionar um cont\u00eainer DOM ao HTML </h3>\n<p>Primeiramente, abra a p\u00e1gina HTML que voc\u00ea deseja alterar. Adicione uma tag <code class=\"language-javascript\">&lt;div&gt;</code> vazia para marcar o local onde voc\u00ea deseja exibir algo com o React. Por exemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token comment\">&lt;!-- ... HTML existente ... --&gt;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>like_button_container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"token comment\">&lt;!-- ... HTML existente ... --&gt;</span></code></pre></div>\n<p>N\u00f3s atribu\u00edmos a esta <code class=\"language-javascript\">&lt;div&gt;</code> um atributo HTML <code class=\"language-javascript\">id</code> \u00fanico. Isso nos permitir\u00e1 encontr\u00e1-lo no c\u00f3digo JavaScript e mais tarde exibir um componente React dentro dele.</p>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Voc\u00ea pode colocar um \u201ccont\u00eainer\u201d como esta <code class=\"language-javascript\">&lt;div&gt;</code> em <strong>qualquer lugar</strong> dentro da tag <code class=\"language-javascript\">&lt;body&gt;</code>. Voc\u00ea pode ter v\u00e1rios cont\u00eaineres DOM independentes em uma p\u00e1gina. Eles geralmente s\u00e3o vazios \u2014 o React vai substituir qualquer conte\u00fado existente dentro deles.</p>\n</div>\n<h3 id=\"step-2-add-the-script-tags\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#step-2-add-the-script-tags\"></a>Passo 2: Adicionar as Tags Script </h3>\n<p>A seguir, adicione tr\u00eas tags <code class=\"language-javascript\">&lt;script&gt;</code> em sua p\u00e1gina HTML logo antes do fechamento da tag <code class=\"language-javascript\">&lt;/body&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\">  <span class=\"token comment\">&lt;!-- ... HTML qualquer ... --&gt;</span>\n\n  <span class=\"token comment\">&lt;!-- Adicionar o React. --&gt;</span>\n  <span class=\"token comment\">&lt;!-- Nota: ao fazer o deploy, substitua \"development.js\" por \"production.min.js\". --&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@17/umd/react.development.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@17/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n  <span class=\"token comment\">&lt;!-- Adicione nosso componente React. --&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>like_button.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>As duas primeiras tags adicionam o React. A terceira ir\u00e1 adicionar o c\u00f3digo de seu componente.</p>\n<h3 id=\"step-3-create-a-react-component\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#step-3-create-a-react-component\"></a>Passo 3: Criar um Componente React </h3>\n<p>Crie um arquivo chamado <code class=\"language-javascript\">like_button.js</code> pr\u00f3ximo a sua p\u00e1gina HTML.</p>\n<p>Abra <strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js\">este c\u00f3digo inicial</a></strong> e copie o conte\u00fado no arquivo que voc\u00ea criou.</p>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Esse c\u00f3digo define um componente React chamado <code class=\"language-javascript\">LikeButton</code>. N\u00e3o se preocupe se voc\u00ea ainda n\u00e3o entendeu \u2014 mais tarde vamos cobrir os blocos de constru\u00e7\u00e3o do React em nosso <a class=\"external-link\" href=\"https://pt-br.reactjs.org//tutorial/tutorial.html\">tutorial</a> e em nosso <a href=\"/react/hello-world\">guia dos conceitos principais</a>. Por enquanto, vamos apenas fazer funcionar!</p>\n</div>\n<p>Depois <strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js\">do c\u00f3digo inicial</a></strong>, adicione essas duas linhas no final do arquivo <code class=\"language-javascript\">like_button.js</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// ... o c\u00f3digo inicial que voc\u00ea copiou ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> domContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#like_button_container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>LikeButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> domContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Essas duas linhas de c\u00f3digo encontram a <code class=\"language-javascript\">&lt;div&gt;</code> que adicionamos em nosso HTML no primeiro passo e ent\u00e3o mostrar\u00e1 o componente React dentro dele.</p>\n<h3 id=\"thats-it\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#thats-it\"></a>\u00c9 Isso A\u00ed! </h3>\n<p>N\u00e3o existe quarto passo. <strong>Voc\u00ea acabou de adicionar seu primeiro componente React ao seu site.</strong></p>\n<p>Confira nas pr\u00f3ximas se\u00e7\u00f5es para mais dicas de como integrar o React.</p>\n<p><strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605\">Veja o c\u00f3digo fonte completo do exemplo</a></strong></p>\n<p><strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/f6c882b6ae18bde42dcf6fdb751aae93495a2275.zip\">Fa\u00e7a o download do exemplo completo (2KB zipado)</a></strong></p>\n<h3 id=\"tip-reuse-a-component\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#tip-reuse-a-component\"></a>Dica: Reutilize um Componente </h3>\n<p>Normalmente, voc\u00ea pode querer exibir seus componentes React em v\u00e1rios lugares em sua p\u00e1gina HTML. Aqui est\u00e1 um exemplo que exibe o bot\u00e3o \u201cLike\u201d tr\u00eas vezes e passa alguns dados para ele:</p>\n<p><a class=\"external-link\" href=\"https://gist.github.com/gaearon/faa67b76a6c47adbab04f739cba7ceda\">Veja o c\u00f3digo fonte completo do exemplo</a></p>\n<p><a class=\"external-link\" href=\"https://gist.github.com/gaearon/faa67b76a6c47adbab04f739cba7ceda/archive/9d0dd0ee941fea05fd1357502e5aa348abb84c12.zip\">Fa\u00e7a o download do exemplo completo (2KB zipado)</a></p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Essa estrat\u00e9gia \u00e9 mais \u00fatil quando as partes da p\u00e1gina com React est\u00e3o isoladas uma das outras. Dentro do c\u00f3digo do React, \u00e9 mais f\u00e1cil de usar <a href=\"/react/components-and-props#composing-components\">composi\u00e7\u00e3o de componentes</a>.</p>\n</div>\n<h3 id=\"tip-minify-javascript-for-production\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#tip-minify-javascript-for-production\"></a>Dica: Minifique o JavaScript para Produ\u00e7\u00e3o </h3>\n<p>Antes de realizar o deploy de seu site para produ\u00e7\u00e3o, lembre-se que o c\u00f3digo JavaScript n\u00e3o minificado pode deixar sua p\u00e1gina significativamente mais lenta para seus usu\u00e1rios.</p>\n<p>Se voc\u00ea j\u00e1 minifica os scripts da sua aplica\u00e7\u00e3o, <strong>seu site estar\u00e1 pronto para produ\u00e7\u00e3o</strong> se voc\u00ea garantir que o HTML carregue a vers\u00e3o do React terminando em <code class=\"language-javascript\">production.min.js</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@17/umd/react.production.min.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@17/umd/react-dom.production.min.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Se voc\u00ea n\u00e3o possui uma etapa de minifica\u00e7\u00e3o para seus scripts, <a class=\"external-link\" href=\"https://gist.github.com/gaearon/42a2ffa41b8319948f9be4076286e1f3\">aqui est\u00e1 um jeito de configur\u00e1-lo</a>.</p>\n<h2 id=\"optional-try-react-with-jsx\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#optional-try-react-with-jsx\"></a>Opcional: Experimente o React com JSX </h2>\n<p>Nos exemplos acima, n\u00f3s contamos apenas com recursos que s\u00e3o nativamente suportados pelos navegadores. E \u00e9 por isso que usamos uma chamada de fun\u00e7\u00e3o JavaScript para informar ao React o que exibir:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createElement<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Exibe um \"Like\" &lt;button&gt;</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> liked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Like'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Portanto, o React tamb\u00e9m oferece a op\u00e7\u00e3o de usar o <a href=\"/react/introducing-jsx\">JSX</a> como alternativa:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Exibe um \"Like\" &lt;button&gt;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> liked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    Like\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esses dois blocos de c\u00f3digo s\u00e3o equivalentes. Enquanto o <strong>JSX \u00e9 <a href=\"/react/react-without-jsx\">completamente opcional</a></strong>, muitas pessoas acham \u00fatil para escrever c\u00f3digo de UI \u2014 junto com React e com outras bibliotecas.</p>\n<p>Voc\u00ea pode testar com JSX usando <a class=\"external-link\" href=\"https://babeljs.io/en/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=DwIwrgLhD2B2AEcDCAbAlgYwNYF4DeAFAJTw4B88EAFmgM4B0tAphAMoQCGETBe86WJgBMAXJQBOYJvAC-RGWQBQ8FfAAyaQYuAB6cFDhkgA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=7.15.7\">esse conversor online</a>.</p>\n<h3 id=\"quickly-try-jsx\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#quickly-try-jsx\"></a>Experimente Rapidamente JSX </h3>\n<p>A maneira mais r\u00e1pida de experimentar o JSX em seu projeto \u00e9 adicionando essa tag <code class=\"language-javascript\">&lt;script&gt;</code> em sua p\u00e1gina:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/babel-standalone@6/babel.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Agora voc\u00ea pode usar o JSX em qualquer tag <code class=\"language-javascript\">&lt;script&gt;</code> somente adicionando o atributo <code class=\"language-javascript\">type=\"text/babel\"</code> a ele. Aqui est\u00e1 <a class=\"external-link\" href=\"https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html\">um exemplo de arquivo HTML com JSX</a> em que voc\u00ea pode efetuar o download e testar.</p>\n<p>Essa abordagem \u00e9 boa para aprender e criar demostra\u00e7\u00f5es simples. Portanto, o site fica lento e <strong>n\u00e3o fica adequado para produ\u00e7\u00e3o</strong>. Quando voc\u00ea estiver pronto para seguir em frente, remova essa nova tag <code class=\"language-javascript\">&lt;script&gt;</code> e os atributos <code class=\"language-javascript\">type=\"text/babel\"</code> que voc\u00ea adicionou. Em vez disso, na se\u00e7\u00e3o a seguir voc\u00ea ira configurar um pr\u00e9-processador JSX para converter todas suas tags <code class=\"language-javascript\">&lt;script&gt;</code> automaticamente.</p>\n<h3 id=\"add-jsx-to-a-project\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#add-jsx-to-a-project\"></a>Adicionar JSX a um Projeto </h3>\n<p>Adicionar JSX a um projeto n\u00e3o requer ferramentas complicadas, como um empacotador ou um servidor de desenvolvimento. Basicamente, adicionar JSX <strong>\u00e9 como adicionar um pr\u00e9-processador CSS.</strong> O \u00fanico requisito \u00e9 possuir o <a class=\"external-link\" href=\"https://nodejs.org/\">Node.js</a> instalado em seu computador.</p>\n<p>No terminal, v\u00e1 at\u00e9 a pasta do seu projeto e cole esses dois comandos:</p>\n<ol>\n<li><strong>Passo 1:</strong> Execute <code class=\"language-javascript\">npm init -y</code> (se falhar, <a class=\"external-link\" href=\"https://gist.github.com/gaearon/246f6380610e262f8a648e3e51cad40d\">aqui est\u00e1 uma corre\u00e7\u00e3o</a>)</li>\n<li><strong>Passo 2:</strong> Execute <code class=\"language-javascript\">npm install babel-cli@6 babel-preset-react-app@3</code></li>\n</ol>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Estamos <strong>usando npm aqui somente para instalar o pr\u00e9-processador do JSX;</strong> voc\u00ea n\u00e3o precisar\u00e1 dele para mais nada. Tanto o React quanto o c\u00f3digo da aplica\u00e7\u00e3o pode continuar sem mudan\u00e7as nas tags <code class=\"language-javascript\">&lt;script&gt;</code>.</p>\n</div>\n<p>Parab\u00e9ns! Voc\u00ea acabou de adicionar uma <strong>configura\u00e7\u00e3o JSX pronta para produ\u00e7\u00e3o</strong> em seu projeto.</p>\n<h3 id=\"run-jsx-preprocessor\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#run-jsx-preprocessor\"></a>Execute o Pr\u00e9-processador JSX </h3>\n<p>Crie uma pasta chamada <code class=\"language-javascript\">src</code> e execute no terminal esse comando:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">npx babel --watch src --out-dir . --presets react-app/prod</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">npx</code> n\u00e3o \u00e9 um erro de digita\u00e7\u00e3o \u2014 <a class=\"external-link\" href=\"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\">\u00e9 uma ferramenta de executar pacotes que vem com npm 5.2+</a>.</p>\n<p>Se voc\u00ea vir uma mensagem de erro dizendo \u201cYou have mistakenly installed the <code class=\"language-javascript\">babel</code> package\u201d, voc\u00ea pode ter perdido <a href=\"/react/add-react-to-a-website#add-jsx-to-a-project\">o passo anterior</a>. Execute o passo anterior na mesma pasta e tente novamente.</p>\n</div>\n<p>N\u00e3o espere o comando finalizar \u2014 esse comando inicia um watcher automatizado para o JSX.</p>\n<p>Se voc\u00ea criar um arquivo chamado <code class=\"language-javascript\">src/like_button.js</code> com esse <strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/c8e112dc74ac44aac4f673f2c39d19d1/raw/09b951c86c1bf1116af741fa4664511f2f179f0a/like_button.js\">este c\u00f3digo JSX inicial</a></strong>, o watcher criar\u00e1 um <code class=\"language-javascript\">like_button.js</code> pr\u00e9-processado com o c\u00f3digo JavaScript adequado para o navegador. Quando voc\u00ea edita o arquivo com JSX, a transpila\u00e7\u00e3o ser\u00e1 executada automaticamente.</p>\n<p>Como um b\u00f4nus, isso tamb\u00e9m permite que voc\u00ea use recursos modernos do JavaScript, como classes, sem se preocupar com a incompatibilidade de navegadores antigos. A ferramenta que acabamos de usar \u00e9 chamada de Babel e voc\u00ea pode aprender mais sobre ele <a class=\"external-link\" href=\"https://babeljs.io/docs/en/babel-cli/\">em sua documenta\u00e7\u00e3o</a>.</p>\n<p>Se voc\u00ea se sentir confort\u00e1vel com ferramentas de build e deseja que eles fa\u00e7am mais por voc\u00ea, <a href=\"/react/create-a-new-react-app\">a pr\u00f3xima se\u00e7\u00e3o</a> descreve alguma das mais populares e acess\u00edveis ferramentas. Caso contr\u00e1rio, essas tags scripts funcionar\u00e3o perfeitamente.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/add-react-to-a-website.md\">Edit this page</a></p></div></article>", "path": "/react/add-react-to-a-website", "nav": ["/react/getting-started", "/react/create-a-new-react-app"]}, {"key": "Crie um novo React App", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Use uma toolchain integrada para uma melhor experi\u00eancia de usu\u00e1rio e desenvolvedor.</p>\n<p>Esta p\u00e1gina descreve algumas toolchains populares com React que ajudam em tarefas como:</p>\n<ul>\n<li>Escalar para muitos arquivos e componentes.</li>\n<li>Usar bibliotecas de terceiros atrav\u00e9s do npm.</li>\n<li>Detectar erros comuns cedo.</li>\n<li>Edi\u00e7\u00e3o em tempo real de CSS e JS em desenvolvimento.</li>\n<li>Otimizar a sa\u00edda para produ\u00e7\u00e3o</li>\n</ul>\n<p>As toolchains recomendadas nesta p\u00e1gina <strong>n\u00e3o requerem configura\u00e7\u00e3o para come\u00e7ar</strong>.</p>\n<h2 id=\"you-might-not-need-a-toolchain\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#you-might-not-need-a-toolchain\"></a>Voc\u00ea Pode N\u00e3o Precisar de Uma Toolchain </h2>\n<p>Se voc\u00ea n\u00e3o se depara com nenhum dos problemas descritos acima, ou se ainda n\u00e3o se sente confort\u00e1vel usando ferramentas JavaScript, considere <a href=\"/react/add-react-to-a-website\">simplesmente adicionar uma tag <code class=\"language-javascript\">script</code> numa p\u00e1gina HTML</a>, opcionalmente <a href=\"/react/add-react-to-a-website#optional-try-react-with-jsx\">usando JSX</a>.</p>\n<p>Esta \u00e9 <strong>a maneira mais f\u00e1cil de integrar React a um site j\u00e1 existente.</strong> Voc\u00ea pode a qualquer momento adicionar \u00e0 toolchain conforme achar \u00fatil.</p>\n<h2 id=\"recommended-toolchains\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#recommended-toolchains\"></a>Toolchains Recomendadas </h2>\n<p>A equipe React recomenda principalmente as seguintes solu\u00e7\u00f5es:</p>\n<ul>\n<li>Se voc\u00ea est\u00e1 <strong>aprendendo React</strong> ou <strong>criando um novo <a href=\"/react/glossary#single-page-application\">single-page</a> app,</strong> use <a href=\"/react/create-a-new-react-app#create-react-app\">Create React App</a>. </li>\n<li>Se voc\u00ea est\u00e1 fazendo um <strong>site renderizado no servidor (SSR) com Node.js,</strong> tente <a href=\"/react/create-a-new-react-app#nextjs\">Next.js</a>.</li>\n<li>Se voc\u00ea est\u00e1 fazendo um <strong>site est\u00e1tico orientado a conte\u00fado,</strong> experimente <a href=\"/react/create-a-new-react-app#gatsby\">Gatsby</a>.</li>\n<li>Se voc\u00ea est\u00e1 montando uma <strong>biblioteca de componentes</strong> ou <strong>integrando com um c\u00f3digo-base existente</strong>, veja <a href=\"/react/create-a-new-react-app#more-flexible-toolchains\">Toolchains Mais Flex\u00edveis</a>.</li>\n</ul>\n<h3 id=\"create-react-app\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#create-react-app\"></a>Create React App </h3>\n<p><a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a> \u00e9 um ambiente confort\u00e1vel para <strong>aprender React</strong>, e \u00e9 a melhor maneira de come\u00e7ar um <strong><a href=\"/react/glossary#single-page-application\">single-page</a> application</strong> em React. </p>\n<p>Al\u00e9m de configurar seu ambiente de desenvolvimento para utilizar as funcionalidades mais recentes do JavaScript, ele fornece uma experi\u00eancia de desenvolvimento agrad\u00e1vel, e otimiza o seu app para produ\u00e7\u00e3o. Ser\u00e1 necess\u00e1rio ter <a class=\"external-link\" href=\"https://nodejs.org/en/\">Node &gt;= 14.0.0 and npm &gt;= 5.6</a> na sua m\u00e1quina. Para criar um novo projeto, rode:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\">npx create-react-app my-app\n<span class=\"token builtin class-name\">cd</span> my-app\n<span class=\"token function\">npm</span> start</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">npx</code> na primeira linha n\u00e3o \u00e9 erro de digita\u00e7\u00e3o \u2014 \u00e9 um <a class=\"external-link\" href=\"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\">package runner que vem com npm 5.2+</a>.</p>\n</div>\n<p>Create React App n\u00e3o lida com l\u00f3gica de backend nem banco de dados. Ele apenas cria um build pipeline para o frontend, podendo portanto ser utilizado com qualquer backend de sua escolha. Por tr\u00e1s, <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a> e <a class=\"external-link\" href=\"https://webpack.js.org/\">Webpack</a> est\u00e3o sendo utilizados, mas n\u00e3o \u00e9 necess\u00e1rio saber nada sobre eles.</p>\n<p>Quando estiver pronto pra mandar pra produ\u00e7\u00e3o, rode <code class=\"language-javascript\">npm run build</code> para criar e mandar o build otimizado de seu app para a pasta <code class=\"language-javascript\">build</code>. Voc\u00ea pode saber mais sobre o Create React App <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app#create-react-app--\">atrav\u00e9s de seu README</a> e o <a class=\"external-link\" href=\"https://facebook.github.io/create-react-app/\">Guia de Usu\u00e1rio</a>.</p>\n<h3 id=\"nextjs\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#nextjs\"></a>Next.js </h3>\n<p><a class=\"external-link\" href=\"https://nextjs.org/\">Next.js</a> \u00e9 um framework leve e popular para <strong>aplica\u00e7\u00f5es est\u00e1ticas e renderizadas no servidor</strong> feito com React. Ele inclui <strong>solu\u00e7\u00f5es para estiliza\u00e7\u00e3o e roteamento</strong> prontas, e presume que esteja rodando <a class=\"external-link\" href=\"https://nodejs.org/\">Node.js</a> como ambiente de servidor.</p>\n<p>Aprenda Next.js atrav\u00e9s de <a class=\"external-link\" href=\"https://nextjs.org/learn/\">seu guia oficial</a>.</p>\n<h3 id=\"gatsby\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#gatsby\"></a>Gatsby </h3>\n<p><a class=\"external-link\" href=\"https://www.gatsbyjs.org/\">Gatsby</a> \u00e9 a melhor forma de criar <strong>sites est\u00e1ticos</strong> usando React. Ele permite usar componentes React, por\u00e9m produzindo HTML e CSS pr\u00e9-renderizado para garantir a velocidade mais r\u00e1pida poss\u00edvel de carregamento.</p>\n<p>Aprenda Gatsby atrav\u00e9s de <a class=\"external-link\" href=\"https://www.gatsbyjs.org/docs/\">seu guia oficial</a> e a <a class=\"external-link\" href=\"https://www.gatsbyjs.org/docs/gatsby-starters/\">galeria de starter kits</a>.</p>\n<h3 id=\"more-flexible-toolchains\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#more-flexible-toolchains\"></a>Toolchains Mais Flex\u00edveis </h3>\n<p>As seguintes toolchains oferecem mais flexibilidade e escolha. N\u00f3s as recomendamos para usu\u00e1rios mais experientes:</p>\n<ul>\n<li><strong><a class=\"external-link\" href=\"https://neutrinojs.org/\">Neutrino</a></strong> combina o poder do <a class=\"external-link\" href=\"https://webpack.js.org/\">webpack</a> com a simplicidade de presets, e inclui um preset para <a class=\"external-link\" href=\"https://neutrinojs.org/packages/react/\">React apps</a> e <a class=\"external-link\" href=\"https://neutrinojs.org/packages/react-components/\">React components</a>.</li>\n<li><strong><a class=\"external-link\" href=\"https://nx.dev/react\">Nx</a></strong> \u00e9 um kit de ferramentas para o desenvolvimento de monorepo de stack completa, com suporte interno para o React, Next.js, <a class=\"external-link\" href=\"https://expressjs.com/\">Express</a>, e mais.</li>\n<li><strong><a class=\"external-link\" href=\"https://parceljs.org/\">Parcel</a></strong> \u00e9 um bundler de aplicativos web r\u00e1pido e sem configura\u00e7\u00e3o que <a class=\"external-link\" href=\"https://parceljs.org/recipes.html#react\">funciona com React</a>. </li>\n<li><strong><a class=\"external-link\" href=\"https://github.com/jaredpalmer/razzle\">Razzle</a></strong> \u00e9 um framework renderizado no servidor que n\u00e3o requer configura\u00e7\u00e3o, por\u00e9m oferece mais flexibilidade que o Next.js.</li>\n</ul>\n<h2 id=\"creating-a-toolchain-from-scratch\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#creating-a-toolchain-from-scratch\"></a>Criando uma Toolchain do Zero </h2>\n<p>Uma build toolchain em JavaScript consiste tipicamente de:</p>\n<ul>\n<li>Um <strong>gerenciador de pacotes</strong>, como <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a> ou <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>. Ele permite aproveitar de um vasto ecossistema de pacotes de terceiros, e facilmente instalar e atualiz\u00e1-los.</li>\n<li>Um <strong>bundler</strong>, como <a class=\"external-link\" href=\"https://webpack.js.org/\">webpack</a> ou <a class=\"external-link\" href=\"https://parceljs.org/\">Parcel</a>. Ele permite escrever c\u00f3digo modular e empacot\u00e1-lo em pequenos peda\u00e7os para otimizar o tempo de carregamento.</li>\n<li>Um <strong>compilador</strong> como <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a>. Ele nos permite escrever c\u00f3digo JavaScript moderno que funcione at\u00e9 nos navegadores mais antigos.</li>\n</ul>\n<p>Se voc\u00ea prefere criar a sua pr\u00f3pria JavaScript toolchain do zero, <a class=\"external-link\" href=\"https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658\">d\u00ea uma olhada neste guia</a> que recria algumas das funcionalidades do Create React App.</p>\n<p>N\u00e3o se esque\u00e7a de assegurar que sua toolchain customizada <a href=\"/react/optimizing-performance#use-the-production-build\">esteja corretamente configurada para produ\u00e7\u00e3o</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/create-a-new-react-app.md\">Edit this page</a></p></div></article>", "path": "/react/create-a-new-react-app", "nav": ["/react/add-react-to-a-website", "/react/cdn-links"]}, {"key": "CDN Links", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Tanto React como ReactDOM est\u00e3o dispon\u00edveis atrav\u00e9s de CDN.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@17/umd/react.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@17/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>As vers\u00f5es acima devem ser utilizadas apenas para desenvolvimento e n\u00e3o s\u00e3o adequadas para o ambiente de produ\u00e7\u00e3o. Vers\u00f5es reduzidas e otimizadas para produ\u00e7\u00e3o est\u00e3o dispon\u00edveis em:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@17/umd/react.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@17/umd/react-dom.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Para carregar uma vers\u00e3o espec\u00edfica do <code class=\"language-javascript\">react</code> e <code class=\"language-javascript\">react-dom</code>, substitua <code class=\"language-javascript\">17</code> com o n\u00famero da vers\u00e3o que voc\u00ea deseja.</p>\n<h3 id=\"why-the-crossorigin-attribute\"><a class=\"anchor\" href=\"/react/cdn-links#why-the-crossorigin-attribute\"></a>Por que o atributo <code class=\"language-javascript\">crossorigin</code>? </h3>\n<p>Se voc\u00ea carrega o React de um CDN, recomendamos manter o atributo <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\"><code class=\"language-javascript\">crossorigin</code></a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Tamb\u00e9m recomendamos verificar se o CDN que voc\u00ea est\u00e1 usando define o cabe\u00e7alho HTTP <code class=\"language-javascript\">Access-Control-Allow-Origin: *</code>:</p>\n<p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/89baed0a6540f29e954065ce04661048/13ae7/cdn-cors-header.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/89baed0a6540f29e954065ce04661048/13ae7/cdn-cors-header.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>Isto permite uma melhor <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2017/07/26/error-handling-in-react-16.html\">experi\u00eancia de tratamento de erros</a> no React 16 e suas pr\u00f3ximas vers\u00f5es.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/cdn-links.md\">Edit this page</a></p></div></article>", "path": "/react/cdn-links", "nav": ["/react/create-a-new-react-app", "/react/release-channels"]}, {"key": "Canais de lan\u00e7amento", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>React conta com uma pr\u00f3spera comunidade de c\u00f3digo aberto para registrar relat\u00f3rios de bugs, abrir pull requests e <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs\">enviar RFCs</a>. Para incentivar feedback, \u00e0s vezes compartilhamos builds especiais do React que incluem recursos n\u00e3o lan\u00e7ados.</p>\n<div class=\"blockquote\">\n<strong>Este documento ser\u00e1 mais relevante para desenvolvedores que trabalham em frameworks, bibliotecas, ou ferramentas de desenvolvedor. Os desenvolvedores que usam React principalmente para criar aplica\u00e7\u00f5es voltadas para o usu\u00e1rio final n\u00e3o precisam se preocupar com nossos canais de prerelease.</strong>\n</div>\n<p>Cada um dos canais de release do React foram projetados para um caso de uso distinto:</p>\n<ul>\n<li><a href=\"/react/release-channels#latest-channel\"><strong>Latest</strong></a> \u00e9 para est\u00e1vel, releases semver do React. \u00c9 o que voc\u00ea recebe ao instalar o React a partir do npm. Este \u00e9 o canal que voc\u00ea j\u00e1 est\u00e1 usando hoje. <strong>Use isso para todos as aplica\u00e7\u00f5es React voltadas para o usu\u00e1rio final.</strong></li>\n<li><a href=\"/react/release-channels#next-channel\"><strong>Next</strong></a> acompanha a branch master do reposit\u00f3rio de c\u00f3digo fonte do React. Pense nisso como candidatos a release para o pr\u00f3ximo minor semver release. Use isso para teste de integra\u00e7\u00e3o entre React e projetos de terceiros.</li>\n<li><a href=\"/react/release-channels#experimental-channel\"><strong>Experimental</strong></a> inclui APIs experimentais e recursos que n\u00e3o est\u00e3o dispon\u00edveis nas releases est\u00e1veis. Eles tamb\u00e9m acompanham a branch master, mas com flags de recursos adicionais ativadas. Use isso para experimentar os pr\u00f3ximos recursos antes de serem lan\u00e7ados.</li>\n</ul>\n<p>Todos os releases s\u00e3o publicados no npm, mas apenas os Latest usam <a href=\"/react/faq-versioning\">versionamento sem\u00e2ntico</a>. Os prereleases (aqueles nos canais Next e Experimental) t\u00eam vers\u00f5es geradas a partir de um hash de seu conte\u00fado, por exemplo <code class=\"language-javascript\">0.0.0-68053d940-20210623</code> para Next e <code class=\"language-javascript\">0.0.0-experimental-68053d940-20210623</code> para Experimental.</p>\n<p><strong>O \u00fanico canal de release oficialmente suportado para aplica\u00e7\u00f5es voltadas para o usu\u00e1rio final \u00e9 o Latest</strong>. Next e Experimental releases s\u00e3o fornecidos apenas para fins de teste e n\u00e3o fornecemos garantias de que o comportamento n\u00e3o seja alterado entre as vers\u00f5es. Eles n\u00e3o seguem o protocolo semver que usamos para releases no Latest.</p>\n<p>Por publicar prereleases no mesmo registro que usamos para releases est\u00e1veis, podemos tirar proveito das muitas ferramentas que suportam o fluxo de trabalho no npm, como <a class=\"external-link\" href=\"https://unpkg.com\">unpkg</a> e <a class=\"external-link\" href=\"https://codesandbox.io\">CodeSandbox</a>.</p>\n<h3 id=\"latest-channel\"><a class=\"anchor\" href=\"/react/release-channels#latest-channel\"></a>Canal Latest </h3>\n<p>Latest \u00e9 o canal usado para releases est\u00e1veis do React. Corresponde \u00e0 tag <code class=\"language-javascript\">latest</code> no npm. \u00c9 o canal recomendado para todos os apps React que s\u00e3o enviados para usu\u00e1rios reais.</p>\n<p><strong>Se voc\u00ea n\u00e3o tem certeza de qual canal deve usar, \u00e9 o Latest.</strong> Se voc\u00ea \u00e9 um desenvolvedor React, \u00e9 isso que voc\u00ea j\u00e1 est\u00e1 usando.</p>\n<p>Voc\u00ea pode esperar que as atualiza\u00e7\u00f5es do Latest sejam extremamente est\u00e1veis. As vers\u00f5es seguem o esquema de vers\u00e3o sem\u00e2ntica. Saiba mais sobre nosso compromisso com a estabilidade e a migra\u00e7\u00e3o incremental em nossa <a href=\"/react/faq-versioning\">pol\u00edtica de vers\u00e3o</a>.</p>\n<h3 id=\"next-channel\"><a class=\"anchor\" href=\"/react/release-channels#next-channel\"></a>Canal Next </h3>\n<p>O canal Next \u00e9 um canal de prerelease que acompanha a branch master do reposit\u00f3rio React. Usamos as prereleases no canal Next como release candidates para o canal Latest. Voc\u00ea pode pensar em Next como um superconjunto de Latest que \u00e9 atualizado com mais frequ\u00eancia.</p>\n<p>O grau de altera\u00e7\u00e3o entre o release mais recente do Next e a vers\u00e3o mais recente do Latest \u00e9 aproximadamente o mesmo que voc\u00ea encontraria entre dois releases de minor semver. No entanto, <strong>o canal Next n\u00e3o est\u00e1 de acordo com o controle de vers\u00e3o sem\u00e2ntico.</strong> Voc\u00ea deve esperar breaking changes ocasionais durante sucessivos releases no canal Next.</p>\n<p><strong>N\u00e3o use prereleases em aplica\u00e7\u00f5es voltadas para o usu\u00e1rio final.</strong></p>\n<p>Releases no Next s\u00e3o publicadas com a tag <code class=\"language-javascript\">next</code> no npm. As vers\u00f5es s\u00e3o geradas a partir de um hash do conte\u00fado do build, por exemplo <code class=\"language-javascript\">0.0.0-68053d940-20210623</code>.</p>\n<h4 id=\"using-the-next-channel-for-integration-testing\"><a class=\"anchor\" href=\"/react/release-channels#using-the-next-channel-for-integration-testing\"></a>Usando o Canal Next para Testes de Integra\u00e7\u00e3o </h4>\n<p>O canal Next foi projetado para dar suporte aos testes de integra\u00e7\u00e3o entre React e outros projetos.</p>\n<p>Todas as altera\u00e7\u00f5es no React passam por extensos testes internos antes de serem lan\u00e7adas para o p\u00fablico. No entanto, h\u00e1 uma infinidade de ambientes e configura\u00e7\u00f5es usados em todo o ecossistema React, e n\u00e3o \u00e9 poss\u00edvel testar cada um deles.</p>\n<p>Se voc\u00ea \u00e9 o autor de um projeto de terceiros como um framework, biblioteca, ferramenta de desenvolvedor, ou qualquer tipo de infraestrutura semelhante, voc\u00ea pode nos ajudar a manter o React est\u00e1vel para seus usu\u00e1rios e para toda a comunidade React executando periodicamente sua su\u00edte de testes nas altera\u00e7\u00f5es mais recentes. Se voc\u00ea estiver interessado, siga estas etapas:</p>\n<ul>\n<li>Configure um cron job usando sua plataforma de integra\u00e7\u00e3o cont\u00ednua preferida. Cron jobs s\u00e3o suportados ambos pelo <a class=\"external-link\" href=\"https://circleci.com/docs/2.0/triggers/#scheduled-builds\">CircleCI</a> e pelo <a class=\"external-link\" href=\"https://docs.travis-ci.com/user/cron-jobs/\">Travis CI</a>.</li>\n<li>\n<p>No cron job, atualize seus pacotes React para o release mais recente do React no canal Next, usando a tag <code class=\"language-javascript\">next</code> no npm. Usando o npm cli:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">npm update react@next react-dom@next</code></pre></div>\n<p>Ou yarn:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">yarn upgrade react@next react-dom@next</code></pre></div>\n</li>\n<li>Execute sua su\u00edte de testes nos pacotes atualizados.</li>\n<li>Se tudo passar, \u00f3timo! Voc\u00ea pode esperar que seu projeto funcione com o pr\u00f3ximo minor release do React.</li>\n<li>Se algo quebrar inesperadamente, por favor avise-nos <a class=\"external-link\" href=\"https://github.com/facebook/react/issues\">criando uma issue</a>.</li>\n</ul>\n<p>Um projeto que usa esse fluxo de trabalho \u00e9 Next.js. (Sem trocadilhos! S\u00e9rio!) Voc\u00ea pode consultar a sua <a class=\"external-link\" href=\"https://github.com/zeit/next.js/blob/c0a1c0f93966fe33edd93fb53e5fafb0dcd80a9e/.circleci/config.yml\">configura\u00e7\u00e3o do CircleCI</a> como exemplo.</p>\n<h3 id=\"experimental-channel\"><a class=\"anchor\" href=\"/react/release-channels#experimental-channel\"></a>Canal Experimental </h3>\n<p>Como o Next, o canal Experimental \u00e9 um canal de prerelease que acompanha a branch master do reposit\u00f3rio React. Ao contr\u00e1rio do Next, os releases Experimental incluem recursos e APIs adicionais que n\u00e3o est\u00e3o prontas para release maior.</p>\n<p>Geralmente, uma atualiza\u00e7\u00e3o para Next \u00e9 acompanhada por uma atualiza\u00e7\u00e3o correspondente para Experimental. Eles s\u00e3o baseados na mesma revis\u00e3o de origem, mas s\u00e3o criados usando um conjunto diferente de flags de recursos.</p>\n<p>Os releases Experimental podem ser significativamente diferentes dos releases Next e Latest. <strong>N\u00e3o use releases Experimental em aplica\u00e7\u00f5es voltadas para o usu\u00e1rio final.</strong> Voc\u00ea deve esperar breaking changes frequentes entre releases no canal Experimental.</p>\n<p>Releases no Experimental s\u00e3o publicados com a tag <code class=\"language-javascript\">experimental</code> no npm. As vers\u00f5es s\u00e3o geradas a partir de um hash do conte\u00fado do build, por exemplo <code class=\"language-javascript\">0.0.0-experimental-68053d940-20210623</code>.</p>\n<h4 id=\"what-goes-into-an-experimental-release\"><a class=\"anchor\" href=\"/react/release-channels#what-goes-into-an-experimental-release\"></a>O Que Entra em um Release Experimental? </h4>\n<p>Recursos experimentais s\u00e3o aqueles que n\u00e3o est\u00e3o prontos para serem liberados ao p\u00fablico em geral e podem sofrer altera\u00e7\u00f5es dr\u00e1sticas antes de serem finalizados. Alguns experimentos podem nunca ser finalizados - a raz\u00e3o pela qual temos experimentos \u00e9 testar a viabilidade das altera\u00e7\u00f5es propostas.</p>\n<p>Por exemplo, se o canal Experimental existisse quando anunciamos Hooks, ter\u00edamos lan\u00e7ado Hooks no canal Experimental semanas antes de estarem dispon\u00edveis no Latest.</p>\n<p>Voc\u00ea pode achar valioso executar testes de integra\u00e7\u00e3o no Experimental. Isso \u00e9 com voc\u00ea. No entanto, saiba que o Experimental \u00e9 ainda menos est\u00e1vel que o Next. <strong>N\u00e3o garantimos estabilidade entre releases Experimental.</strong></p>\n<h4 id=\"how-can-i-learn-more-about-experimental-features\"><a class=\"anchor\" href=\"/react/release-channels#how-can-i-learn-more-about-experimental-features\"></a>Como Posso Aprender Mais Sobre os Recursos Experimentais? </h4>\n<p>Recursos Experimentais podem ou n\u00e3o ser documentados. Geralmente, os experimentos n\u00e3o s\u00e3o documentados at\u00e9 que estejam perto de serem lan\u00e7ados no Next ou no Latest.</p>\n<p>Se um recurso n\u00e3o estiver documentado, ele poder\u00e1 ser acompanhado por um <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs\">RFC</a>.</p>\n<p>Publicaremos no <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog\">blog React</a> quando estivermos prontos para anunciar novos experimentos, mas isso n\u00e3o significa que divulgaremos cada experimento.</p>\n<p>Voc\u00ea sempre pode consultar o <a class=\"external-link\" href=\"https://github.com/facebook/react/commits/main\">hist\u00f3rico</a> do reposit\u00f3rio p\u00fablico do GitHub para obter uma lista abrangente de altera\u00e7\u00f5es.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/release-channels.md\">Edit this page</a></p></div></article>", "path": "/react/release-channels", "nav": ["/react/cdn-links", "/react/hello-world"]}]}, {"key": "Principais Conceitos", "values": [{"key": "1. Hello World", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>O menor exemplo de React \u00e9 algo assim:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Isso mostra um header dizendo \u201cHello, world!\u201d na p\u00e1gina.</p>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/rrpgNB?editors=1010\">Experimente no CodePen</a></strong></p>\n<p>Clique no link acima para abrir um editor online. Sinta-se livre para fazer algumas mudan\u00e7as e ver como elas afetam a sa\u00edda. A maioria das p\u00e1ginas neste guia ter\u00e3o exemplos edit\u00e1veis como esse.</p>\n<h2 id=\"how-to-read-this-guide\"><a class=\"anchor\" href=\"/react/hello-world#how-to-read-this-guide\"></a>Como Ler Esse Guia </h2>\n<p>Nesse guia, vamos examinar os fundamentos das aplica\u00e7\u00f5es React: elementos e componentes. Depois que voc\u00ea tiver o dom\u00ednio, poder\u00e1 criar aplica\u00e7\u00f5es complexas a partir de partes pequenas e reutiliz\u00e1veis.</p>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Esse guia \u00e9 destinado a pessoas que preferem <strong>aprender conceitos passo a passo</strong>. Se voc\u00ea prefere aprender fazendo, confira nosso <a class=\"external-link\" href=\"https://pt-br.reactjs.org//tutorial/tutorial.html\">tutorial pr\u00e1tico</a>. Voc\u00ea pode acabar descobrindo que esse guia e o tutorial se complementam.</p>\n</div>\n<p>Esse \u00e9 o primeiro cap\u00edtulo de um guia passo-a-passo sobre os principais conceitos do React. Uma lista de todos os cap\u00edtulos pode ser encontrada na barra de navega\u00e7\u00e3o lateral. Se voc\u00ea estiver lendo em um dispositivo m\u00f3vel, pode acessar a navega\u00e7\u00e3o pressionando o bot\u00e3o no canto inferior direito da sua tela.</p>\n<p>Todo cap\u00edtulo deste guia se desenvolve em cima do conhecimento introduzido em cap\u00edtulos anteriores. <strong>Voc\u00ea pode aprender muito do React lendo os cap\u00edtulos do guia de \u201cPrincipais conceitos\u201d na ordem em que eles aparecem na barra lateral.</strong> Por exemplo, <a href=\"/react/introducing-jsx\">\u201cIntroduzindo JSX\u201d</a> \u00e9 o pr\u00f3ximo cap\u00edtulo ap\u00f3s esse.</p>\n<h2 id=\"knowledge-level-assumptions\"><a class=\"anchor\" href=\"/react/hello-world#knowledge-level-assumptions\"></a>Suposi\u00e7\u00f5es de n\u00edvel de conhecimento </h2>\n<p>React \u00e9 uma biblioteca JavaScript, ent\u00e3o assumiremos que voc\u00ea possui um entendimento b\u00e1sico da linguagem. <strong>Se n\u00e3o se sentir confiante, n\u00f3s recomendamos: <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">seguir um tutorial de javascript</a> para checar o seu n\u00edvel de conhecimento</strong> e garantir que voc\u00ea poder\u00e1 acompanhar esse guia sem se perder. Isso pode levar entre 30 minutos e uma hora, mas voc\u00ea n\u00e3o sentir\u00e1 como se estivesse aprendendo React e JavaScript ao mesmo tempo.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Esse guia geralmente usa partes da nova sintaxe do JavaScript nos exemplos. Se voc\u00ea n\u00e3o tem trabalhado com JavaScript nos \u00faltimos anos, <a class=\"external-link\" href=\"https://gist.github.com/gaearon/683e676101005de0add59e8bb345340c\">esses tr\u00eas pontos</a> lhe ajudar\u00e3o em boa parte do caminho.</p>\n</div>\n<h2 id=\"lets-get-started\"><a class=\"anchor\" href=\"/react/hello-world#lets-get-started\"></a>Vamos Come\u00e7ar! </h2>\n<p>Continue rolando para baixo, e voc\u00ea encontrar\u00e1 o link para o <a href=\"/react/introducing-jsx\">pr\u00f3ximo cap\u00edtulo desse guia</a> logo acima do rodap\u00e9.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/hello-world.md\">Edit this page</a></p></div></article>", "path": "/react/hello-world", "nav": ["/react/release-channels", "/react/introducing-jsx"]}, {"key": "2. Introduzindo JSX", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Considere esta declara\u00e7\u00e3o de vari\u00e1vel:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esta sintaxe estranha de tags n\u00e3o \u00e9 uma string, nem HTML.</p>\n<p>\u00c9 chamada JSX e \u00e9 uma extens\u00e3o de sintaxe para JavaScript. Recomendamos usar JSX com o React para descrever como a UI deveria parecer. JSX pode lembrar uma linguagem de template, mas que vem com todo o poder do JavaScript.</p>\n<p>JSX produz \u201celementos\u201d do React. N\u00f3s iremos explorar a renderiza\u00e7\u00e3o para o DOM na <a href=\"/react/rendering-elements\">pr\u00f3xima se\u00e7\u00e3o</a>. Abaixo voc\u00ea descobrir\u00e1 o b\u00e1sico de JSX necess\u00e1rio para come\u00e7ar.</p>\n<h3 id=\"why-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#why-jsx\"></a>Por que JSX? </h3>\n<p>O React adota o fato de que a l\u00f3gica de renderiza\u00e7\u00e3o \u00e9 inerentemente acoplada com outras l\u00f3gicas de UI: como eventos s\u00e3o manipulados, como o state muda com o tempo e como os dados s\u00e3o preparados para exibi\u00e7\u00e3o.</p>\n<p>Ao inv\u00e9s de separar <em>tecnologias</em> artificialmente colocando markup e l\u00f3gica em arquivos separados, o React <a class=\"external-link\" href=\"https://pt.wikipedia.org/wiki/Separa%C3%A7%C3%A3o_de_conceitos\">separa <em>conceitos</em></a> com unidades pouco acopladas chamadas \u201ccomponentes\u201d que cont\u00e9m ambos. Voltaremos aos componentes em\n<a href=\"/react/components-and-props\">outra se\u00e7\u00e3o</a>. Mas, se voc\u00ea ainda n\u00e3o est\u00e1 confort\u00e1vel em usar markup em JS, <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\">esta palestra</a> pode convencer voc\u00ea do contr\u00e1rio.</p>\n<p>O React <a href=\"/react/react-without-jsx\">n\u00e3o requer</a> o uso do JSX. Por\u00e9m, a maioria das pessoas acha pr\u00e1tico como uma ajuda visual quando se est\u00e1 trabalhando com uma UI dentro do c\u00f3digo em JavaScript. Ele permite ao React mostrar mensagens mais \u00fateis de erro e aviso.</p>\n<p>Com isso fora do caminho, vamos come\u00e7ar!</p>\n<h3 id=\"embedding-expressions-in-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#embedding-expressions-in-jsx\"></a>Incorporando Express\u00f5es em JSX </h3>\n<p>No exemplo abaixo, declaramos uma vari\u00e1vel chamada <code class=\"language-javascript\">name</code> e ent\u00e3o a usamos dentro do JSX ao envolv\u00ea-la com chaves:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Josh Perez'</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Voc\u00ea pode inserir qualquer <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\">express\u00e3o JavaScript</a> v\u00e1lida dentro das chaves em JSX. Por exemplo, <code class=\"language-javascript\">2 + 2</code>, <code class=\"language-javascript\">user.firstName</code>, ou <code class=\"language-javascript\">formatName(user)</code> s\u00e3o todas express\u00f5es JavaScript v\u00e1lidas.</p>\n<p>No exemplo abaixo, incorporamos o resultado da chamada de uma fun\u00e7\u00e3o JavaScript, <code class=\"language-javascript\">formatName(user)</code>, dentro de um elemento <code class=\"language-javascript\">&lt;h1&gt;</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Harper'</span><span class=\"token punctuation\">,</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Perez'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    Hello, </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span></span><span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/PGEjdG?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Separamos o JSX em m\u00faltiplas linhas para melhorar a legibilidade. Mesmo que n\u00e3o seja obrigat\u00f3rio, quando fizer isso, tamb\u00e9m recomendamos colocar dentro de par\u00eanteses para evitar as armadilhas da <a class=\"external-link\" href=\"https://stackoverflow.com/q/2846283\">inser\u00e7\u00e3o autom\u00e1tica de ponto-e-v\u00edrgula</a>.</p>\n<h3 id=\"jsx-is-an-expression-too\"><a class=\"anchor\" href=\"/react/introducing-jsx#jsx-is-an-expression-too\"></a>JSX Tamb\u00e9m \u00e9 uma Express\u00e3o </h3>\n<p>Depois da compila\u00e7\u00e3o, as express\u00f5es em JSX se transformam em chamadas normais de fun\u00e7\u00f5es que retornam objetos JavaScript.</p>\n<p>Isto significa que voc\u00ea pode usar JSX dentro de condi\u00e7\u00f5es <code class=\"language-javascript\">if</code> e la\u00e7os <code class=\"language-javascript\">for</code>, atribu\u00ed-lo a vari\u00e1veis, aceit\u00e1-lo como argumentos e retorn\u00e1-los de fun\u00e7\u00f5es:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getGreeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, Stranger.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"specifying-attributes-with-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#specifying-attributes-with-jsx\"></a>Especificando Atributos com JSX </h3>\n<p>Voc\u00ea pode usar aspas para especificar strings literais como atributos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.reactjs.org<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> link </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Voc\u00ea tamb\u00e9m pode usar chaves para incorporar uma express\u00e3o JavaScript em um atributo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>img</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>N\u00e3o envolva chaves com aspas quando estiver incorporando uma express\u00e3o JavaScript em um atributo. Voc\u00ea deveria ou usar aspas (para valores em string) ou chaves (para express\u00f5es), mas n\u00e3o ambos no mesmo atributo.</p>\n<div class=\"blockquote\">\n<strong>Aten\u00e7\u00e3o:</strong>\n<p>Como JSX \u00e9 mais pr\u00f3ximo de JavaScript que do HTML, o React DOM usa <code class=\"language-javascript\">camelCase</code> como conven\u00e7\u00e3o para nomes de propriedades ao inv\u00e9s dos nomes de atributos do HTML.</p>\n<p>Por exemplo, <code class=\"language-javascript\">class</code> se transforma em <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Element/className\"><code class=\"language-javascript\">className</code></a> em JSX, e <code class=\"language-javascript\">tabindex</code> se transforma em <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/HTMLElement/tabIndex\"><code class=\"language-javascript\">tabIndex</code></a>.</p>\n</div>\n<h3 id=\"specifying-children-with-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#specifying-children-with-jsx\"></a>Especificando Elementos Filhos com JSX </h3>\n<p>Se uma tag est\u00e1 vazia, voc\u00ea pode fech\u00e1-la imediatamente com <code class=\"language-javascript\">/&gt;</code>, como XML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tags JSX podem conter elementos filhos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Good to see you here.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"jsx-prevents-injection-attacks\"><a class=\"anchor\" href=\"/react/introducing-jsx#jsx-prevents-injection-attacks\"></a>JSX Previne Ataques de Inje\u00e7\u00e3o </h3>\n<p>\u00c9 seguro incorporar entradas de usu\u00e1rio em JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>potentiallyMaliciousInput<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// This is safe:</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Por padr\u00e3o, o React DOM <a class=\"external-link\" href=\"https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html\">escapa</a> quaisquer valores incorporados no JSX antes de renderiz\u00e1-los. Assim, assegura que voc\u00ea nunca injete algo que n\u00e3o esteja explicitamente escrito na sua aplica\u00e7\u00e3o. Tudo \u00e9 convertido para string antes de ser renderizado. Isso ajuda a prevenir ataques <a class=\"external-link\" href=\"https://pt.wikipedia.org/wiki/Cross-site_scripting\">XSS (cross-site-scripting)</a>.</p>\n<h3 id=\"jsx-represents-objects\"><a class=\"anchor\" href=\"/react/introducing-jsx#jsx-represents-objects\"></a>JSX Representa Objetos </h3>\n<p>O Babel compila JSX para chamadas <code class=\"language-javascript\">React.createElement()</code>.</p>\n<p>Estes dois exemplos s\u00e3o id\u00eanticos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    Hello, world!\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>className<span class=\"token operator\">:</span> <span class=\"token string\">'greeting'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Hello, world!'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">React.createElement()</code> realiza algumas verifica\u00e7\u00f5es para ajudar voc\u00ea a criar um c\u00f3digo sem bugs, mas, essencialmente, cria um objeto como este:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Nota: esta estrutura est\u00e1 simplificada</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    className<span class=\"token operator\">:</span> <span class=\"token string\">'greeting'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'Hello, world!'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Estes objetos s\u00e3o chamados \u201cElementos React\u201d. Voc\u00ea pode imagin\u00e1-los como descri\u00e7\u00f5es do que voc\u00ea quer ver na tela. O React l\u00ea esses objetos e os usa para construir o DOM e deix\u00e1-lo atualizado.</p>\n<p>Exploraremos a renderiza\u00e7\u00e3o de elementos React no DOM na <a href=\"/react/rendering-elements\">pr\u00f3xima se\u00e7\u00e3o</a>.</p>\n<div class=\"blockquote\">\n<strong>Dica:</strong>\n<p>Recomendamos o uso da <a class=\"external-link\" href=\"https://babeljs.io/docs/en/next/editors\">defini\u00e7\u00e3o de linguagem \u201cBabel\u201d</a> no seu editor preferido para que ambos os c\u00f3digos em ES6 e JSX sejam devidamente real\u00e7ados.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/introducing-jsx.md\">Edit this page</a></p></div></article>", "path": "/react/introducing-jsx", "nav": ["/react/hello-world", "/react/rendering-elements"]}, {"key": "3. Renderizando Elementos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Elementos s\u00e3o os menores blocos de constru\u00e7\u00e3o de aplicativos React.</p>\n<p>Um elemento descreve o que voc\u00ea quer ver na tela:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Diferente de elementos DOM do navegador, elementos React s\u00e3o objetos simples e utilizam menos recursos. O React DOM \u00e9 o respons\u00e1vel por atualizar o DOM para exibir os elementos React.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Pode-se confundir elementos com o conceito mais amplo de \u201ccomponentes\u201d. N\u00f3s apresentaremos os componentes na <a href=\"/react/components-and-props\">se\u00e7\u00e3o seguinte</a>. Elementos comp\u00f5em os componentes e n\u00f3s recomendamos ler esta se\u00e7\u00e3o antes de prosseguir.</p>\n</div>\n<h2 id=\"rendering-an-element-into-the-dom\"><a class=\"anchor\" href=\"/react/rendering-elements#rendering-an-element-into-the-dom\"></a>Renderizando um Elemento no DOM </h2>\n<p>Suponhamos que exista um <code class=\"language-javascript\">&lt;div&gt;</code> em algum lugar do seu c\u00f3digo HTML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>N\u00f3s o chamamos de n\u00f3 raiz do DOM porque tudo dentro dele ser\u00e1 gerenciado pelo React DOM.</p>\n<p>Aplica\u00e7\u00f5es constru\u00eddas apenas com React geralmente tem apenas um \u00fanico n\u00f3 raiz no DOM. Se deseja integrar o React a uma aplica\u00e7\u00e3o existente, voc\u00ea pode ter quantos n\u00f3s raiz precisar.</p>\n<p>Para renderizar um elemento React em um n\u00f3 raiz, passe ambos para <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">ReactDOM.render()</code></a>`:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ZpvBNJ?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Assim, \u00e9 exibido \u201cHello, world\u201d na p\u00e1gina.</p>\n<h2 id=\"updating-the-rendered-element\"><a class=\"anchor\" href=\"/react/rendering-elements#updating-the-rendered-element\"></a>Atualizando o Elemento Renderizado </h2>\n<p>Elementos React s\u00e3o <a class=\"external-link\" href=\"https://pt.wikipedia.org/wiki/Objeto_imut%C3%A1vel\">imut\u00e1veis</a>. Uma vez criados, voc\u00ea n\u00e3o pode alterar seus elementos filhos ou atributos.</p>\n<p>Com o que aprendemos at\u00e9 agora, a \u00fanica forma de atualizar a interface \u00e9 criar um novo elemento e pass\u00e1-lo para <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">ReactDOM.render()</code></a>.</p>\n<p>Veja o seguinte exemplo de um rel\u00f3gio:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwoJZk?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Chama-se o <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">ReactDOM.render()</code></a> a cada segundo a partir de um callback do <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\"><code class=\"language-javascript\">setInterval()</code></a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Na pr\u00e1tica, a maioria dos aplicativos React usam o <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">ReactDOM.render()</code></a> apenas uma \u00fanica vez. Nas se\u00e7\u00f5es seguintes, aprenderemos como esse c\u00f3digo pode ser encapsulado em <a href=\"/react/state-and-lifecycle\">componentes com estado</a>.</p>\n<p>Recomendamos que voc\u00ea n\u00e3o pule os t\u00f3picos porque eles se complementam.</p>\n</div>\n<h2 id=\"react-only-updates-whats-necessary\"><a class=\"anchor\" href=\"/react/rendering-elements#react-only-updates-whats-necessary\"></a>O React Somente Atualiza o Necess\u00e1rio </h2>\n<p>O React DOM compara o elemento novo e seus filhos com os anteriores e somente aplica as modifica\u00e7\u00f5es necess\u00e1rias no DOM para lev\u00e1-lo ao estado desejado.</p>\n<p>Voc\u00ea pode observar isso inspecionando o <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwoJZk?editors=1010\">\u00faltimo exemplo</a> com as ferramentas do navegador:</p>\n<p><a class=\"external-link\" href=\"https://pt-br.reactjs.org//c158617ed7cc0eac8f58330e49e48224/granular-dom-updates.gif\">Image link</a></p>\n<p>Embora n\u00f3s criemos um elemento descrevendo toda a estrutura da interface a cada segundo, apenas o n\u00f3 de texto cujo conte\u00fado foi alterado \u00e9 atualizado pelo React DOM.</p>\n<p>Em nossa experi\u00eancia, pensar em como a interface do usu\u00e1rio deve ficar a qualquer momento, em vez de como alter\u00e1-la ao longo do tempo, elimina toda uma s\u00e9rie de bugs.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/rendering-elements.md\">Edit this page</a></p></div></article>", "path": "/react/rendering-elements", "nav": ["/react/introducing-jsx", "/react/components-and-props"]}, {"key": "4. Componentes e Props", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Componentes permitem voc\u00ea dividir a UI em partes independentes, reutiliz\u00e1veis e pensar em cada parte isoladamente. Essa p\u00e1gina fornece uma introdu\u00e7\u00e3o \u00e0 ideia de componentes. Voc\u00ea pode encontrar uma <a href=\"/react/react-component\">refer\u00eancia detalhada da API de componente aqui</a>.</p>\n<p>Conceitualmente, componentes s\u00e3o como fun\u00e7\u00f5es JavaScript. Eles aceitam entradas arbitr\u00e1rias (chamadas \u201cprops\u201d) e retornam elementos React que descrevem o que deve aparecer na tela.</p>\n<h2 id=\"function-and-class-components\"><a class=\"anchor\" href=\"/react/components-and-props#function-and-class-components\"></a>Componentes de Fun\u00e7\u00e3o e Classe </h2>\n<p>A maneira mais simples de definir um componente \u00e9 escrever uma fun\u00e7\u00e3o JavaScript:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Essa fun\u00e7\u00e3o \u00e9 um componente React v\u00e1lido porque aceita um \u00fanico argumento de objeto \u201cprops\u201d (que significa propriedades) com dados e retorna um elemento React. N\u00f3s chamamos esses componentes de \u201ccomponentes de fun\u00e7\u00e3o\u201d porque s\u00e3o literalmente fun\u00e7\u00f5es JavaScript.</p>\n<p>Voc\u00ea tamb\u00e9m pode usar uma <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Classes\">classe ES6</a> para definir um componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Os dois componentes acima s\u00e3o equivalentes do ponto de vista do React.</p>\n<p>Function e Class componentes t\u00eam alguns recursos adicionais que discutiremos nas <a href=\"/react/state-and-lifecycle\">pr\u00f3ximas se\u00e7\u00f5es</a>.</p>\n<h2 id=\"rendering-a-component\"><a class=\"anchor\" href=\"/react/components-and-props#rendering-a-component\"></a>Renderizando um Componente </h2>\n<p>Anteriormente, n\u00f3s encontramos apenas elementos React que representam tags do DOM:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No entanto, elementos tamb\u00e9m podem representar componentes definidos pelo usu\u00e1rio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Quando o React v\u00ea um elemento representando um componente definido pelo usu\u00e1rio, ele passa atributos JSX e componentes filhos para esse componente como um \u00fanico objeto. N\u00f3s chamamos esse objeto de \u201cprops\u201d. </p>\n<p>Por exemplo, esse c\u00f3digo renderiza \u201cOl\u00e1, Sara\u201d na p\u00e1gina:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/YGYmEG?editors=1010\">Experimente no CodePen</a></strong></p>\n<p>Vamos recapitular o que acontece nesse exemplo:</p>\n<ol>\n<li>N\u00f3s chamamos <code class=\"language-javascript\">ReactDOM.render()</code> com o elemento <code class=\"language-javascript\">&lt;Welcome name=\"Sara\" /&gt;</code>.</li>\n<li>React chama o componente <code class=\"language-javascript\">Welcome</code> com <code class=\"language-javascript\">{name: 'Sara'}</code> como props.</li>\n<li>Nosso componente <code class=\"language-javascript\">Welcome</code> retorna um elemento <code class=\"language-javascript\">&lt;h1&gt;Ol\u00e1, Sara&lt;/h1&gt;</code> como resultado.</li>\n<li>React DOM atualiza eficientemente o DOM para corresponder <code class=\"language-javascript\">&lt;h1&gt;Ol\u00e1, Sara&lt;/h1&gt;</code>.</li>\n</ol>\n<div class=\"blockquote\">\n<strong>Nota: Sempre inicie os nomes dos componentes com uma letra mai\u00fascula.</strong>\n<p>O React trata componentes come\u00e7ando com letras min\u00fasculas como tags do DOM. Por exemplo, <code class=\"language-javascript\">&lt;div /&gt;</code> representa uma tag div do HTML, mas <code class=\"language-javascript\">&lt;Welcome /&gt;</code> representa um componente e requer que <code class=\"language-javascript\">Welcome</code> esteja no escopo.</p>\n<p>Voc\u00ea pode ler mais sobre o racioc\u00ednio por tr\u00e1s dessa conven\u00e7\u00e3o <a href=\"/react/jsx-in-depth#user-defined-components-must-be-capitalized\">aqui.</a></p>\n</div>\n<h2 id=\"composing-components\"><a class=\"anchor\" href=\"/react/components-and-props#composing-components\"></a>Compondo Componentes </h2>\n<p>Componentes podem se referir a outros componentes em sua sa\u00edda. Isso nos permite usar a mesma abstra\u00e7\u00e3o de componente para qualquer n\u00edvel de detalhe. Um bot\u00e3o, um formul\u00e1rio, uma caixa de di\u00e1logo, uma tela: em aplicativos React, todos esses s\u00e3o normalmente expressos como componentes.</p>\n<p>Por exemplo, n\u00f3s podemos criar um componente <code class=\"language-javascript\">App</code> que renderiza <code class=\"language-javascript\">Welcome</code> muitas vezes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Cahal<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Edite<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/KgQKPr?editors=1010\">Experimente no CodePen</a></strong></p>\n<p>Tipicamente, novos aplicativos React tem um \u00fanico componente <code class=\"language-javascript\">App</code> no topo. Contudo, se voc\u00ea integrar o React em um aplicativo existente, voc\u00ea pode come\u00e7ar de baixo para cima com um pequeno componente como o <code class=\"language-javascript\">Button</code> e gradualmente chegar ao topo da hierarquia de exibi\u00e7\u00e3o.</p>\n<h2 id=\"extracting-components\"><a class=\"anchor\" href=\"/react/components-and-props#extracting-components\"></a>Extraindo Componentes </h2>\n<p>N\u00e3o tenha medo de dividir componentes em componentes menores.</p>\n<p>Por exemplo, considere esse componente <code class=\"language-javascript\">Comment</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Avatar<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo-name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/VKQwEo?editors=1010\">Experimente no CodePen</a></strong></p>\n<p>Ele aceita <code class=\"language-javascript\">author</code> (um objeto), <code class=\"language-javascript\">text</code> (uma string) e <code class=\"language-javascript\">date</code> (uma data) como props e descreve um coment\u00e1rio em um site de m\u00eddia social.</p>\n<p>Esse componente pode ser complicado de alterar por causa de todo o aninhamento. Tamb\u00e9m \u00e9 dif\u00edcil reutilizar suas partes individuais. Vamos extrair alguns componentes dele.</p>\n<p>Primeiro, n\u00f3s vamos extrair <code class=\"language-javascript\">Avatar</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Avatar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Avatar<span class=\"token punctuation\">\"</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O <code class=\"language-javascript\">Avatar</code> n\u00e3o precisa saber que est\u00e1 sendo renderizado dentro do <code class=\"language-javascript\">Comment</code>. \u00c9 por isso que n\u00f3s demos ao seu prop um nome mais gen\u00e9rico: <code class=\"language-javascript\">user</code> em vez de <code class=\"language-javascript\">author</code>.</p>\n<p>N\u00f3s recomendamos nomear props a partir do ponto de vista do pr\u00f3prio componente ao inv\u00e9s do contexto em que ele est\u00e1 sendo usado.</p>\n<p>Agora n\u00f3s podemos simplificar <code class=\"language-javascript\">Comment</code> um pouco mais:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo-name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Em seguida, n\u00f3s vamos extrair o componente <code class=\"language-javascript\">UserInfo</code> que renderiza um <code class=\"language-javascript\">Avatar</code> ao lado do nome do usu\u00e1rio:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">UserInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo-name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso nos permite simplificar <code class=\"language-javascript\">Comment</code> ainda mais:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserInfo</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/rrJNJY?editors=1010\">Experimente no CodePen</a></strong></p>\n<p>Extrair componentes pode parecer um trabalho pesado no come\u00e7o, mas ter uma paleta de componentes reutiliz\u00e1veis compensa em aplicativos maiores. Uma boa regra \u00e9 que se uma parte da sua UI for usada v\u00e1rias vezes (<code class=\"language-javascript\">Button</code>, <code class=\"language-javascript\">Panel</code>, <code class=\"language-javascript\">Avatar</code>) ou for complexa o suficiente por si s\u00f3 (<code class=\"language-javascript\">App</code>, <code class=\"language-javascript\">FeedStory</code>, <code class=\"language-javascript\">Comment</code>) \u00e9 uma boa candidata a ser extra\u00edda para um componente separado.</p>\n<h2 id=\"props-are-read-only\"><a class=\"anchor\" href=\"/react/components-and-props#props-are-read-only\"></a>Props s\u00e3o Somente Leitura </h2>\n<p>Independente se voc\u00ea declarar um componente <a href=\"/react/components-and-props#function-and-class-components\">como uma fun\u00e7\u00e3o ou uma classe</a>, ele nunca deve modificar seus pr\u00f3prios props. Considere essa fun\u00e7\u00e3o <code class=\"language-javascript\">sum</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tais fun\u00e7\u00f5es s\u00e3o chamadas <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Pure_function\">\u201cpuras\u201d</a> porque elas n\u00e3o tentam alterar suas entradas e sempre retornam o mesmo resultado para as mesmas entradas.</p>\n<p>Em contraste, essa fun\u00e7\u00e3o \u00e9 impura porque altera sua pr\u00f3pria entrada:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">account<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  account<span class=\"token punctuation\">.</span>total <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React \u00e9 bastante flex\u00edvel mas tem uma \u00fanica regra estrita:</p>\n<p><strong>Todos os componentes React tem que agir como fun\u00e7\u00f5es puras em rela\u00e7\u00e3o ao seus props.</strong></p>\n<p>Obviamente, as UIs de aplicativos s\u00e3o din\u00e2micas e mudam com o tempo. Na <a href=\"/react/state-and-lifecycle\">pr\u00f3xima se\u00e7\u00e3o</a>, n\u00f3s vamos introduzir um novo conceito de \u201cstate\u201d. O state permite aos componentes React alterar sua sa\u00edda ao longo do tempo em resposta a a\u00e7\u00f5es do usu\u00e1rio, respostas de rede e quaisquer outras coisas, sem violar essa regra.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/components-and-props.md\">Edit this page</a></p></div></article>", "path": "/react/components-and-props", "nav": ["/react/rendering-elements", "/react/state-and-lifecycle"]}, {"key": "5. State e Ciclo de Vida", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Esta p\u00e1gina apresenta o conceito de estado e ciclo de vida em um componente React. Voc\u00ea pode encontrar uma <a href=\"/react/react-component\">refer\u00eancia detalhada da API de componente aqui</a>.</p>\n<p>Considere o exemplo do rel\u00f3gio de <a href=\"/react/rendering-elements#updating-the-rendered-element\">uma das se\u00e7\u00f5es anteriores</a>. Em <a href=\"/react/rendering-elements#rendering-an-element-into-the-dom\">Elementos de Renderiza\u00e7\u00e3o</a>, n\u00f3s aprendemos apenas uma maneira de atualizar a UI. N\u00f3s chamamos <code class=\"language-javascript\">ReactDOM.render()</code> para mudar a sa\u00edda renderizada.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    element<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwoJZk?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Esta se\u00e7\u00e3o, aprenderemos como tornar o componente <code class=\"language-javascript\">Clock</code> verdadeiramente reutiliz\u00e1vel e encapsulado. Ele ir\u00e1 configurar seu pr\u00f3prio temporizador e se atualizar a cada segundo.</p>\n<p>Podemos come\u00e7ar encapsulando como o rel\u00f3gio parece:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token attr-name\">date</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span></span>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/dpdoYR?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>No entanto, falta um requisito crucial: o fato de que o <code class=\"language-javascript\">Clock</code> configura um temporizador e atualiza a UI a cada segundo deve ser um detalhe de implementa\u00e7\u00e3o do <code class=\"language-javascript\">Clock</code>.</p>\n<p>Idealmente, queremos escrever isto uma vez e ter o <code class=\"language-javascript\">Clock</code> se atualizando:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span></span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para implement\u00e1-lo, precisamos adicionar um \u201cstate\u201d ao componente <code class=\"language-javascript\">Clock</code>.</p>\n<p>O state do componente \u00e9 similar as props, mas \u00e9 privado e totalmente controlado pelo componente.</p>\n<h2 id=\"converting-a-function-to-a-class\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#converting-a-function-to-a-class\"></a>Convertendo uma Fun\u00e7\u00e3o para uma Classe </h2>\n<p>Voc\u00ea pode converter um componente de fun\u00e7\u00e3o como <code class=\"language-javascript\">Clock</code> em uma classe em cinco etapas:</p>\n<ol>\n<li>Criar uma <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Classes\">classe ES6</a>, com o mesmo nome, estendendo <code class=\"language-javascript\">React.component</code>.</li>\n<li>Adicionar um \u00fanico m\u00e9todo vazio chamado <code class=\"language-javascript\">render()</code>.</li>\n<li>Mova o corpo da fun\u00e7\u00e3o para o m\u00e9todo <code class=\"language-javascript\">render()</code>.</li>\n<li>Substitua <code class=\"language-javascript\">props</code> por <code class=\"language-javascript\">this.props</code> no corpo de <code class=\"language-javascript\">render()</code>.</li>\n<li>Exclua a declara\u00e7\u00e3o da fun\u00e7\u00e3o vazia restante.</li>\n</ol>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/zKRGpo?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p><code class=\"language-javascript\">Clock</code> agora \u00e9 definido como uma classe em vez de uma fun\u00e7\u00e3o.</p>\n<p>O m\u00e9todo <code class=\"language-javascript\">render</code> ser\u00e1 chamado toda vez que uma atualiza\u00e7\u00e3o acontecer, mas enquanto renderizarmos <code class=\"language-javascript\">&lt;Clock&gt;</code> no mesmo n\u00f3 DOM, apenas uma \u00fanica inst\u00e2ncia da classe <code class=\"language-javascript\">Clock</code> ser\u00e1 usada. Isso nos permite usar recursos adicionais, como o estado local e os m\u00e9todos de ciclo de vida.</p>\n<h2 id=\"adding-local-state-to-a-class\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#adding-local-state-to-a-class\"></a>Adicionando Estado Local a uma Classe </h2>\n<p>Vamos mover a <code class=\"language-javascript\">date</code> da props para o state em tr\u00eas passos:</p>\n<ol>\n<li>Substitua <code class=\"language-javascript\">this.props.date</code> por <code class=\"language-javascript\">this.state.date</code> no m\u00e9todo <code class=\"language-javascript\">render()</code>:</li>\n</ol>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>Adicione um <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Classes#Construtor\">construtor na classe</a> que atribui a data inicial no <code class=\"language-javascript\">this.state</code>:</li>\n</ol>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note como n\u00f3s passamos <code class=\"language-javascript\">props</code> para o construtor:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Componentes de classes devem sempre chamar o construtor com <code class=\"language-javascript\">props</code>.</p>\n<ol>\n<li>Remova a props <code class=\"language-javascript\">date</code> do elemento <code class=\"language-javascript\">&lt;Clock /&gt;</code>:</li>\n</ol>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span></span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mais tarde, adicionaremos o c\u00f3digo do temporizador de volta ao pr\u00f3prio componente.</p>\n<p>O Resultado se parece com:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span></span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/KgQpJd?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Em seguida, faremos a configura\u00e7\u00e3o do pr\u00f3prio temporizador e atualizaremos a cada segundo.</p>\n<h2 id=\"adding-lifecycle-methods-to-a-class\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#adding-lifecycle-methods-to-a-class\"></a>Adicionando M\u00e9todos de Ciclo de Vida a Classe </h2>\n<p>Em aplica\u00e7\u00f5es com muitos componentes, \u00e9 muito importante limpar os recursos utilizados pelos componentes quando eles s\u00e3o destru\u00eddos.</p>\n<p>Queremos <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\">configurar um temporizador</a> sempre que o <code class=\"language-javascript\">Clock</code> \u00e9 renderizado para o DOM pela primeira vez. Isso \u00e9 chamado de \u201cmounting\u201d no React.</p>\n<p>N\u00f3s tamb\u00e9m queremos <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval\">limpar o temporizador</a> sempre que o DOM produzido pelo <code class=\"language-javascript\">Clock</code> for removido. Isso \u00e9 chamado de \u201cunmounting\u201d no React.</p>\n<p>Podemos declarar m\u00e9todos especiais no componente de classe para executar algum c\u00f3digo quando um componente \u00e9 montado e desmontado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Estes m\u00e9todos s\u00e3o chamados de \u201cm\u00e9todos de ciclo de vida\u201d.</p>\n<p>O m\u00e9todo <code class=\"language-javascript\">componentDidMount()</code> \u00e9 executado depois que a sa\u00edda do componente \u00e9 renderizada no DOM. Este \u00e9 um bom lugar para configurar um temporizador:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token number\">1000</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note como n\u00f3s salvamos o ID do temporizador em <code class=\"language-javascript\">this</code> (<code class=\"language-javascript\">this.timerID</code>).</p>\n<p>Enquanto <code class=\"language-javascript\">this.props</code> \u00e9 configurado pelo pr\u00f3prio React e <code class=\"language-javascript\">this.state</code> tem um significado especial, voc\u00ea est\u00e1 livre para adicionar campos adicionais \u00e0 classe manualmente se precisar armazenar algo que n\u00e3o participe do fluxo de dados (como um ID do temporizador)</p>\n<p>Vamos derrubar o temporizador no m\u00e9todo do ciclo de vida <code class=\"language-javascript\">componentWillUnmount()</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finalmente, vamos implementar um  m\u00e9todo chamado <code class=\"language-javascript\">tick()</code> que o componente <code class=\"language-javascript\">Clock</code> executar\u00e1 a cada segundo.</p>\n<p>Ele usar\u00e1 <code class=\"language-javascript\">this.setState()</code> para agendar atualiza\u00e7\u00f5es para o estado local do componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1000</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/amqdNA?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Agora o rel\u00f3gio bate a cada segundo.</p>\n<p>Vamos recapitular rapidamente o que est\u00e1 acontencendo e a ordem na qual os m\u00e9todos s\u00e3o chamados:</p>\n<ol>\n<li>Quando <code class=\"language-javascript\">&lt;Clock /&gt;</code> \u00e9 passado para <code class=\"language-javascript\">ReactDOM.render()</code>, o React chama o construtor do componente <code class=\"language-javascript\">Clock</code>. Como <code class=\"language-javascript\">Clock</code> precisa exibir a hora atual, ele inicializa <code class=\"language-javascript\">this.state</code> com um objeto incluindo a hora atual. Mais tarde, atualizaremos este state.</li>\n<li>React chama ent\u00e3o o m\u00e9todo <code class=\"language-javascript\">render()</code> do componente <code class=\"language-javascript\">Clock</code>. \u00c9 assim que o React aprende o que deve ser exibido na tela. React em seguida, atualiza o DOM para coincidir com a sa\u00edda de renderiza\u00e7\u00e3o do <code class=\"language-javascript\">Clock</code>.</li>\n<li>Quando a sa\u00edda do <code class=\"language-javascript\">Clock</code> \u00e9 inserida no DOM, o React chama o m\u00e9todo do ciclo de vida <code class=\"language-javascript\">componentDidMount()</code>. Dentro dele, o componente <code class=\"language-javascript\">Clock</code> pede ao navegador para configurar um temporizador para chamar o m\u00e9todo <code class=\"language-javascript\">tick()</code> do componente uma vez por segundo.</li>\n<li>A cada segundo o navegador chama o m\u00e9todo <code class=\"language-javascript\">tick()</code>. Dentro dele, o componente <code class=\"language-javascript\">Clock</code> agenda uma atualiza\u00e7\u00e3o de UI chamando <code class=\"language-javascript\">setState()</code> com um objeto contendo a hora atual. Gra\u00e7as \u00e0 chamada <code class=\"language-javascript\">setState()</code>, o m\u00e9todo <code class=\"language-javascript\">render()</code> ser\u00e1 diferente e, portanto, a sa\u00edda de renderiza\u00e7\u00e3o incluir\u00e1 a hora atualizada. React atualiza o DOM de acordo.</li>\n<li>Se o componente <code class=\"language-javascript\">Clock</code> for removido do DOM, o React chama o m\u00e9todo do ciclo de vida <code class=\"language-javascript\">componentWillUnmount()</code> para que o temporizador seja interrompido.</li>\n</ol>\n<h2 id=\"using-state-correctly\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#using-state-correctly\"></a>Usando o State Corretamente </h2>\n<p>Existem tr\u00eas coisas que voc\u00ea deve saber sobre <code class=\"language-javascript\">setState()</code>.</p>\n<h3 id=\"do-not-modify-state-directly\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#do-not-modify-state-directly\"></a>N\u00e3o Modifique o State Diretamente </h3>\n<p>Por exemplo, isso n\u00e3o renderizar\u00e1 novamente o componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Errado</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comment <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Em vez disso, use <code class=\"language-javascript\">setState()</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Correto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>comment<span class=\"token operator\">:</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O \u00fanico lugar onde voc\u00ea pode atribuir <code class=\"language-javascript\">this.state</code> \u00e9 o construtor.</p>\n<h3 id=\"state-updates-may-be-asynchronous\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#state-updates-may-be-asynchronous\"></a>Atualiza\u00e7\u00f5es de State Podem Ser Ass\u00edncronas </h3>\n<p>O React pode agrupar v\u00e1rias chamadas <code class=\"language-javascript\">setState()</code> em uma \u00fanica atualiza\u00e7\u00e3o para desempenho.</p>\n<p>Como <code class=\"language-javascript\">this.props</code> e <code class=\"language-javascript\">this.state</code> podem ser atualizados de forma ass\u00edncrona, voc\u00ea n\u00e3o deve confiar em seus valores para calcular o pr\u00f3ximo state.</p>\n<p>Por exemplo, esse c\u00f3digo pode falhar ao atualizar o contador:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Errado</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  counter<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para consert\u00e1-lo, use uma segunda forma de <code class=\"language-javascript\">setState()</code> que aceite uma fun\u00e7\u00e3o ao inv\u00e9s de um objeto. Essa fun\u00e7\u00e3o receber\u00e1 o state anterior como o primeiro argumento e as props no momento em que a atualiza\u00e7\u00e3o for aplicada como o segundo argumento:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Correto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  counter<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>increment\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Usamos uma <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow function</a> acima, mas tamb\u00e9m funciona com fun\u00e7\u00f5es regulares:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Correto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>increment\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"state-updates-are-merged\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#state-updates-are-merged\"></a>Atualiza\u00e7\u00f5es de State S\u00e3o Mescladas </h3>\n<p>Quando voc\u00ea chama <code class=\"language-javascript\">setState()</code>, o React mescla o objeto que voc\u00ea fornece ao state atual.</p>\n<p>Por exemplo: seu state pode conter v\u00e1rias vari\u00e1veis independentes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      posts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      comments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ent\u00e3o voc\u00ea pode atualiz\u00e1-los independentemente com chamadas separadas do <code class=\"language-javascript\">setState()</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        posts<span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>posts</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fetchComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        comments<span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>comments</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>O merge \u00e9 superficial, ent\u00e3o <code class=\"language-javascript\">this.setState({comments})</code> deixa <code class=\"language-javascript\">this.state.posts</code> intacto, mas substitui completamente <code class=\"language-javascript\">this.state.comments</code></p>\n<h2 id=\"the-data-flows-down\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#the-data-flows-down\"></a>Os Dados Fluem para Baixo </h2>\n<p>Nem componentes pai ou filho podem saber se um determinado componente \u00e9 stateful ou stateless, e n\u00e3o devem se importar se ele \u00e9 definido por uma fun\u00e7\u00e3o ou classe.</p>\n<p>\u00c9 por isso que o state \u00e9 geralmente chamado de local ou encapsulado. N\u00e3o \u00e9 acess\u00edvel a nenhum componente que n\u00e3o seja o que o possui e o define.</p>\n<p>Um componente pode escolher passar seu state como props para seus componentes filhos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FormattedDate</span></span> <span class=\"token attr-name\">date</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>O componente <code class=\"language-javascript\">FormattedDate</code> receberia o <code class=\"language-javascript\">date</code> em seus objetos e n\u00e3o saberia se ele veio do state de <code class=\"language-javascript\">Clock</code>, das props do <code class=\"language-javascript\">Clock</code>, ou se foi digitado manualmente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FormattedDate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/zKRqNB?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Isso \u00e9 comumente chamado de fluxo de dados \u201ctop-down\u201d ou \u201cunidirecional\u201d. Qualquer state \u00e9 sempre de propriedade de algum componente espec\u00edfico, e qualquer dado ou interface do usu\u00e1rio derivado desse state s\u00f3 pode afetar os componentes \u201cabaixo\u201d deles na \u00e1rvore.</p>\n<p>Se voc\u00ea imaginar uma \u00e1rvore de componentes como uma cascata de props, o state de cada componente \u00e9 como uma fonte de \u00e1gua adicional que o une em um ponto arbitr\u00e1rio, mas tamb\u00e9m flui para baixo.</p>\n<p>Para mostrar que todos os componentes est\u00e3o isolados, podemos criar um componente <code class=\"language-javascript\">App</code> que renderiza tr\u00eas <code class=\"language-javascript\">&lt;Clock&gt;</code>s:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/vXdGmd?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Cada <code class=\"language-javascript\">Clock</code> configura seu pr\u00f3prio temporizador e atualiza de forma independente.</p>\n<p>Nos apps React, se um componente \u00e9 stateful ou stateless \u00e9 considerado um detalhe de implementa\u00e7\u00e3o do componente que pode mudar com o tempo. Voc\u00ea pode usar componentes sem state dentro de componentes com state e vice-versa.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/state-and-lifecycle.md\">Edit this page</a></p></div></article>", "path": "/react/state-and-lifecycle", "nav": ["/react/components-and-props", "/react/handling-events"]}, {"key": "6. Manipulando eventos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Manipular eventos em elementos React \u00e9 muito semelhante a manipular eventos em elementos do DOM. Existem algumas diferen\u00e7as de sintaxe:</p>\n<ul>\n<li>Eventos em React s\u00e3o nomeados usando camelCase ao inv\u00e9s de letras min\u00fasculas.</li>\n<li>Com o JSX voc\u00ea passa uma fun\u00e7\u00e3o como manipulador de eventos ao inv\u00e9s de um texto.</li>\n</ul>\n<p>Por exemplo, com HTML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">activateLasers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n  Ativar lasers\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>\u00c9 ligeiramente diferente com React:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>activateLasers<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">  Ativar lasers</span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Outra diferen\u00e7a \u00e9 que voc\u00ea n\u00e3o pode retornar <code class=\"language-javascript\">false</code> para evitar o comportamento padr\u00e3o no React. Voc\u00ea deve chamar <code class=\"language-javascript\">preventDefault</code> expl\u00edcitamente. Por exemplo, com HTML simples, para evitar o comportamento padr\u00e3o do formul\u00e1rio de envio, voc\u00ea pode escrever:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onsubmit</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Voc\u00ea clicou em enviar.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Enviar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>No React, isso poderia ser:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Voc\u00ea clicou em enviar.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Enviar</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aqui, \u201d<code class=\"language-javascript\">e</code>\u201d \u00e9 um synthetic event. O React define esses eventos sint\u00e9ticos de acordo com a <a class=\"external-link\" href=\"https://www.w3.org/TR/DOM-Level-3-Events/\">especifica\u00e7\u00e3o W3C</a>. Ent\u00e3o, n\u00e3o precisamos nos preocupar com a compatibilidade entre navegadores. Os eventos React n\u00e3o funcionam exatamente da mesma forma que os eventos nativos. Veja a p\u00e1gina <a href=\"/react/events\"><code class=\"language-javascript\">SyntheticEvent</code></a> para saber mais.</p>\n<p>Ao usar o React, geralmente voc\u00ea n\u00e3o precisa chamar <code class=\"language-javascript\">addEventListener</code> para adicionar ouvintes a um elemento no DOM depois que ele \u00e9 criado. Ao inv\u00e9s disso voc\u00ea pode apenas definir um ouvinte quando o elemento \u00e9 inicialmente renderizado.</p>\n<p>Quando voc\u00ea define um componente usando uma <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Classes\">classe do ES6</a>, um padr\u00e3o comum \u00e9 que um manipulador de eventos seja um m\u00e9todo na classe. Por exemplo, este componente <code class=\"language-javascript\">Toggle</code> renderiza um bot\u00e3o que permite ao usu\u00e1rio alternar entre os estados \u201cON\u201d e \u201cOFF\u201d:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isToggleOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Aqui utilizamos o `bind` para que o `this` funcione dentro da nossa callback</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      isToggleOn<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>prevState<span class=\"token punctuation\">.</span>isToggleOn</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isToggleOn <span class=\"token operator\">?</span> <span class=\"token string\">'ON'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'OFF'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toggle</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/xEmzGg?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Voc\u00ea precisa ter cuidado com o significado do <code class=\"language-javascript\">this</code> nos callbacks do JSX. Em JavaScript, os m\u00e9todos de classe n\u00e3o s\u00e3o <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_objects/Function/bind\">vinculados</a> por padr\u00e3o. Se voc\u00ea esquecer de fazer o bind de <code class=\"language-javascript\">this.handleClick</code> e pass\u00e1-lo para um <code class=\"language-javascript\">onClick</code>, o <code class=\"language-javascript\">this</code> ser\u00e1 <code class=\"language-javascript\">undefined</code> quando a fun\u00e7\u00e3o for realmente chamada.</p>\n<p>Este n\u00e3o \u00e9 um comportamento espec\u00edfico do React. \u00c9 uma parte de <a class=\"external-link\" href=\"https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/\">como funcionam as fun\u00e7\u00f5es em JavaScript</a>. Geralmente, se voc\u00ea referir a um m\u00e9todo sem <code class=\"language-javascript\">()</code> depois dele, como <code class=\"language-javascript\">onClick={this.handleClick}</code>, voc\u00ea deve fazer o bind manual deste m\u00e9todo.</p>\n<p>Se ficar chamando \u201cbind\u201d incomoda voc\u00ea, h\u00e1 duas maneiras de contornar isso. Se voc\u00ea estiver usando a <a class=\"external-link\" href=\"https://babeljs.io/docs/plugins/transform-class-properties/\">sintaxe experimental de campos de classe p\u00fablica</a>, voc\u00ea pode usar campos de classe para vincular callbacks corretamente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggingButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Essa sintaxe garante que o `this` seja vinculado ao handleClick.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Aten\u00e7\u00e3o: essa \u00e9 uma sintaxe *experimental*.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Clique Aqui</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Essa sintaxe \u00e9 habilitada por padr\u00e3o no <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>.</p>\n<p>Se voc\u00ea n\u00e3o estiver usando a sintaxe de campos de classe, poder\u00e1 usar uma <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow function</a> como callback:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggingButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Essa sintaxe garante que o `this` seja vinculado ao handleClick.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O problema com esta sintaxe \u00e9 que um callback diferente \u00e9 criado toda vez que o <code class=\"language-javascript\">LoggingButton</code> \u00e9 renderizado. Na maioria dos casos, tudo bem. No entanto, se esse callback for passado para componentes inferiores atrav\u00e9s de props, esses componentes poder\u00e3o fazer uma renderiza\u00e7\u00e3o extra. Geralmente recomendamos a vincula\u00e7\u00e3o no construtor ou a sintaxe dos campos de classe para evitar esse tipo de problema de desempenho.</p>\n<h2 id=\"passing-arguments-to-event-handlers\"><a class=\"anchor\" href=\"/react/handling-events#passing-arguments-to-event-handlers\"></a>Passando Argumentos para Manipuladores de Eventos </h2>\n<p>Dentro de uma estrutura de repeti\u00e7\u00e3o, \u00e9 comum querer passar um par\u00e2metro extra para um manipulador de evento. Por exemplo, se <code class=\"language-javascript\">id</code> \u00e9 o ID de identifica\u00e7\u00e3o da linha, qualquer um dos dois a seguir funcionar\u00e1:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRow</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Deletar linha</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRow</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Deletar linha</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>As duas linhas acima s\u00e3o equivalentes e usam <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a> e <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"><code class=\"language-javascript\">Function.prototype.bind</code></a> respectivamente.</p>\n<p>Em ambos os casos, o argumento <code class=\"language-javascript\">e</code> representando o evento do React ser\u00e1 passado como segundo argumento ap\u00f3s o ID. Com uma arrow function, n\u00f3s temos que pass\u00e1-lo explicitamente. Mas com o <code class=\"language-javascript\">bind</code> outros argumentos adicionais ser\u00e3o automaticamente encaminhados.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/handling-events.md\">Edit this page</a></p></div></article>", "path": "/react/handling-events", "nav": ["/react/state-and-lifecycle", "/react/conditional-rendering"]}, {"key": "7. Renderiza\u00e7\u00e3o condicional", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Em React, voc\u00ea pode criar componentes distintos que encapsulam o comportamento que voc\u00ea precisa. Ent\u00e3o, voc\u00ea pode renderizar apenas alguns dos elementos, dependendo do estado da sua aplica\u00e7\u00e3o. </p>\n<p>Renderiza\u00e7\u00e3o condicional em React funciona da mesma forma que condi\u00e7\u00f5es funcionam em JavaScript. Use operadores de JavaScript  como <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/if...else\"><code class=\"language-javascript\">if</code></a> ou <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Operador_Condicional\">operador condicional</a> para criar elementos representando o estado atual, e deixe o React atualizar a UI para corresponde-los.</p>\n<p>Considere esses dois componentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">UserGreeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Welcome back!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">GuestGreeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Please sign up.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>N\u00f3s vamos criar um componente <code class=\"language-javascript\">Greeting</code> que mostra um dos outros dois componentes se o usu\u00e1rio estiver logado ou n\u00e3o:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLoggedIn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserGreeting</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GuestGreeting</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// Try changing to isLoggedIn={true}:</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token attr-name\">isLoggedIn</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ZpVxNq?editors=0011\"><strong>Experimente no CodePen</strong></a></p>\n<p>Este exemplo renderiza um \u201cgreeting\u201d diferente dependendo do valor da prop <code class=\"language-javascript\">isLoggedIn</code>.</p>\n<h3 id=\"element-variables\"><a class=\"anchor\" href=\"/react/conditional-rendering#element-variables\"></a>Vari\u00e1veis de Elementos </h3>\n<p>Voc\u00ea pode usar vari\u00e1veis para guardar elementos. Isto pode te ajudar a renderizar condicionalmente parte do componente enquanto o resto do resultado n\u00e3o muda.</p>\n<p>Considere esses dois novos componentes representando os bot\u00f5es de Logout e Login:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">LoginButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Login\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">LogoutButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Logout\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No exemplo abaixo, n\u00f3s vamos criar um <a href=\"/react/state-and-lifecycle#adding-local-state-to-a-class\">componente <em>stateful</em></a> chamado <code class=\"language-javascript\">LoginControl</code>.</p>\n<p>O componente ir\u00e1 renderizar o <code class=\"language-javascript\">&lt;LoginButton /&gt;</code> ou <code class=\"language-javascript\">&lt;LogoutButton /&gt;</code> dependendo do estado atual. Ele tambem ir\u00e1 renderizar  <code class=\"language-javascript\">&lt;Greeting /&gt;</code> do exemplo anterior:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginControl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLoginClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLogoutClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>isLoggedIn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleLoginClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isLoggedIn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleLogoutClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isLoggedIn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> button<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLoggedIn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      button <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogoutButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      button <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token attr-name\">isLoggedIn</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isLoggedIn<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>button<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginControl</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/QKzAgB?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Declarar uma vari\u00e1vel e usar uma declara\u00e7\u00e3o condicional <code class=\"language-javascript\">if</code> \u00e9 uma \u00f3tima maneira de renderizar um componente, mas \u00e0s vezes voc\u00ea pode querer usar uma sintaxe mais curta. Existem algumas maneiras para utilizar condi\u00e7\u00f5es inline em JSX, explicadas abaixo.</p>\n<h3 id=\"inline-if-with-logical--operator\"><a class=\"anchor\" href=\"/react/conditional-rendering#inline-if-with-logical--operator\"></a>If inline com o Operador L\u00f3gico &amp;&amp;  </h3>\n<p>Voc\u00ea pode <a href=\"/react/introducing-jsx#embedding-expressions-in-jsx\">incorporar express\u00e3o em JSX</a> encapsulando em chaves. Isto inclui o operador l\u00f3gico <code class=\"language-javascript\">&amp;&amp;</code> de JavaScript. Isto pode ser conveniente para incluir um elemento condicionalmente: </p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Mailbox</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> unreadMessages <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>unreadMessages<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>unreadMessages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          You have </span><span class=\"token punctuation\">{</span>unreadMessages<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> unread messages.</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Re: React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Re:Re: React'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mailbox</span></span> <span class=\"token attr-name\">unreadMessages</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>messages<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ozJddz?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Isto funciona porque em JavaScript, <code class=\"language-javascript\">true &amp;&amp; express\u00e3o</code> s\u00e3o sempre avaliadas como <code class=\"language-javascript\">express\u00e3o</code>, e <code class=\"language-javascript\">false &amp;&amp; express\u00e3o</code> s\u00e3o sempre avaliadas como <code class=\"language-javascript\">false</code>.</p>\n<p>Portanto, se a condi\u00e7\u00e3o \u00e9 <code class=\"language-javascript\">true</code>, o elemento logo depois do <code class=\"language-javascript\">&amp;&amp;</code> ir\u00e1 aparecer no resultado. Se o elemento \u00e9 <code class=\"language-javascript\">false</code>, React ir\u00e1 ignora-lo.</p>\n<p>Observe que retornar uma express\u00e3o falsa ainda far\u00e1 com que o elemento ap\u00f3s <code class=\"language-javascript\">&amp;&amp;</code> seja pulado, mas retornar\u00e1 a express\u00e3o falsa. No exemplo abaixo, <code class=\"language-javascript\">&lt;div&gt;0&lt;/div&gt;</code> ser\u00e1 retornado pelo m\u00e9todo de renderiza\u00e7\u00e3o.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span> count <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Messages: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"inline-if-else-with-conditional-operator\"><a class=\"anchor\" href=\"/react/conditional-rendering#inline-if-else-with-conditional-operator\"></a>If-Else inline com Operador Condicional </h3>\n<p>Outro m\u00e9todo para renderizar elementos inline \u00e9 utilizar o operador condicional em JavaScript <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Operador_Condicional\"><code class=\"language-javascript\">condi\u00e7\u00e3o ? true : false</code></a>.</p>\n<p>No exemplo abaixo, n\u00f3s o utilizaremos para renderizar condicionalmente um pequeno bloco de texto.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      The user is </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>isLoggedIn <span class=\"token operator\">?</span> <span class=\"token string\">'currently'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'not'</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> logged in.</span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pode tamb\u00e9m ser usado para express\u00f5es mais longas, embora o que est\u00e1 acontecendo seja menos \u00f3bvio:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>isLoggedIn</span>        <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogoutButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>      <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Assim como em JavaScript, voc\u00ea decide o estilo apropriado com base no que voc\u00ea e a sua equipe considera mais leg\u00edvel. Lembre-se  que toda vez que condi\u00e7\u00f5es se tornam muito complexas, pode ser um bom momento para <a href=\"/react/components-and-props#extracting-components\">extrair componentes</a>.</p>\n<h3 id=\"preventing-component-from-rendering\"><a class=\"anchor\" href=\"/react/conditional-rendering#preventing-component-from-rendering\"></a>Evitando que um Componente seja Renderizado </h3>\n<p>Em casos raros voc\u00ea pode desejar que um componente se esconda ainda que ele tenha sido renderizado por outro componente. Para fazer isso, retorne <code class=\"language-javascript\">null</code> ao inv\u00e9s do resultado renderizado.</p>\n<p>No exemplo abaixo, o <code class=\"language-javascript\">&lt;WarningBanner /&gt;</code> \u00e9 renderizado dependendo do valor da prop chamada <code class=\"language-javascript\">warn</code>. Se o valor da prop \u00e9  <code class=\"language-javascript\">false</code>, o componente n\u00e3o \u00e9 renderizado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">WarningBanner</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      Warning!</span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>showWarning<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleToggleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleToggleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      showWarning<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>showWarning\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WarningBanner</span></span> <span class=\"token attr-name\">warn</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>showWarning<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>showWarning <span class=\"token operator\">?</span> <span class=\"token string\">'Hide'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Show'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/Xjoqwm?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Retornar <code class=\"language-javascript\">null</code> do m\u00e9todo <code class=\"language-javascript\">render</code> de um componente n\u00e3o afeta a ativa\u00e7\u00e3o dos m\u00e9todos do ciclo de vida do componente. Por exemplo, o m\u00e9todo <code class=\"language-javascript\">componentDidUpdate</code> ainda ser\u00e1 chamado.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/conditional-rendering.md\">Edit this page</a></p></div></article>", "path": "/react/conditional-rendering", "nav": ["/react/handling-events", "/react/lists-and-keys"]}, {"key": "8. Listas e Chaves", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Primeiro, vamos rever como transformamos listas em JavaScript.</p>\n<p>Dado o c\u00f3digo abaixo, n\u00f3s usamos a fun\u00e7\u00e3o <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"language-javascript\">map()</code></a> para receber um array de <code class=\"language-javascript\">n\u00fameros</code> e dobrar o valor de cada um deles. Atribu\u00edmos o novo array retornado pela fun\u00e7\u00e3o <code class=\"language-javascript\">map()</code> para a vari\u00e1vel <code class=\"language-javascript\">doubled</code> e imprime no console:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> doubled <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esse c\u00f3digo imprime <code class=\"language-javascript\">[2, 4, 6, 8, 10]</code> no console.</p>\n<p>No React, transformar arrays em listas de <a href=\"/react/rendering-elements\">elementos</a> \u00e9 praticamente id\u00eantico a isso.</p>\n<h3 id=\"rendering-multiple-components\"><a class=\"anchor\" href=\"/react/lists-and-keys#rendering-multiple-components\"></a>Renderizando M\u00faltiplos Componentes </h3>\n<p>Voc\u00ea pode criar cole\u00e7\u00f5es de elementos e <a href=\"/react/introducing-jsx#embedding-expressions-in-jsx\">adicion\u00e1-los no JSX</a> usando chaves <code class=\"language-javascript\">{}</code>.</p>\n<p>Abaixo, iteramos pelo array <code class=\"language-javascript\">numbers</code> usando a fun\u00e7\u00e3o <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"language-javascript\">map()</code></a> do JavaScript. Retornamos um elemento <code class=\"language-javascript\">&lt;li&gt;</code> para cada item. Finalmente, atribu\u00edmos o array de elementos resultante para <code class=\"language-javascript\">listItems</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Adicionamos todo o array <code class=\"language-javascript\">listItems</code> dentro de um elemento <code class=\"language-javascript\">&lt;ul&gt;</code> e <a href=\"/react/rendering-elements#rendering-an-element-into-the-dom\">renderizamos ele no DOM</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span></span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/GjPyQr?editors=0011\"><strong>Experimente no CodePen</strong></a></p>\n<p>Esse c\u00f3digo mostra uma lista n\u00e3o ordenada de n\u00fameros entre 1 e 5.</p>\n<h3 id=\"basic-list-component\"><a class=\"anchor\" href=\"/react/lists-and-keys#basic-list-component\"></a>Componente de Lista B\u00e1sico </h3>\n<p>Geralmente voc\u00ea ir\u00e1 renderizar listas dentro de um <a href=\"/react/components-and-props\">componente</a>.</p>\n<p>Podemos refatorar o exemplo anterior em um componente que aceita um array de <code class=\"language-javascript\">n\u00fameros</code> e retorna uma lista de elementos.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NumberList</span></span> <span class=\"token attr-name\">numbers</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span></span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ao executar esse c\u00f3digo, voc\u00ea receber\u00e1 um aviso que uma chave deve ser definida para os itens da lista. <code class=\"language-javascript\">key</code> \u00e9 um atributo string especial que voc\u00ea precisa definir ao criar listas de elementos. Iremos analisar os motivos pelos quais isso \u00e9 importante na pr\u00f3xima se\u00e7\u00e3o.</p>\n<p>Vamos atribuir uma <code class=\"language-javascript\">key</code> aos itens da nossa lista dentro de <code class=\"language-javascript\">numbers.map()</code> e resolver o valor da chave que est\u00e1 em falta.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NumberList</span></span> <span class=\"token attr-name\">numbers</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/jrXYRR?editors=0011\"><strong>Experimente no CodePen</strong></a></p>\n<h2 id=\"keys\"><a class=\"anchor\" href=\"/react/lists-and-keys#keys\"></a>Chaves </h2>\n<p>As chaves ajudam o React a identificar quais itens sofreram altera\u00e7\u00f5es, foram adicionados ou removidos. As chaves devem ser atribu\u00eddas aos elementos dentro do array para dar uma identidade est\u00e1vel aos elementos:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A melhor forma de escolher uma chave \u00e9 usar uma string que identifica unicamente um item da lista dentre os demais. Na maioria das vezes voc\u00ea usaria IDs de seus dados como chave:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Quando voc\u00ea n\u00e3o possui nenhum ID est\u00e1vel para os itens renderizados, voc\u00ea pode usar o \u00edndice do item como chave em \u00faltimo recurso:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Apenas fa\u00e7a isso caso os itens n\u00e3o possuam IDs est\u00e1veis</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>N\u00e3o recomendamos o uso de \u00edndices para chave se a ordem dos itens pode ser alterada. Isso pode impactar de forma negativa o desempenho e poder\u00e1 causar problemas com o estado do componente. Leia o artigo escrito por Robin Pokorny para <a class=\"external-link\" href=\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\">uma explica\u00e7\u00e3o aprofundada nos impactos negativos de se usar um \u00edndice como chave</a>. Se voc\u00ea n\u00e3o atribuir uma chave de forma expl\u00edcita para os itens de uma lista, ent\u00e3o o React ir\u00e1 utilizar os \u00edndices como chave por padr\u00e3o.</p>\n<p>Aqui voc\u00ea poder\u00e1 ver <a href=\"/react/reconciliation#recursing-on-children\">uma explica\u00e7\u00e3o aprofundada sobre o porqu\u00ea o uso das chaves \u00e9 necess\u00e1rio</a> caso voc\u00ea esteja interessado em aprender mais sobre isso.</p>\n<h3 id=\"extracting-components-with-keys\"><a class=\"anchor\" href=\"/react/lists-and-keys#extracting-components-with-keys\"></a>Extraindo Componentes com Chaves </h3>\n<p>As chaves apenas fazem sentido no contexto do array que est\u00e1 encapsulando os itens.</p>\n<p>Por exemplo, se voc\u00ea <a href=\"/react/components-and-props#extracting-components\">extrai</a> um componente <code class=\"language-javascript\">ListItem</code>, voc\u00ea deve deixar a chave nos elementos <code class=\"language-javascript\">&lt;ListItem /&gt;</code> ao inv\u00e9s de deixar no elemento <code class=\"language-javascript\">&lt;li&gt;</code> dentro de <code class=\"language-javascript\">ListItem</code>.</p>\n<p><strong>Exemplo: Uso Incorreto de Chaves</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Errado! N\u00e3o h\u00e1 necessidade de definir a chave aqui:</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Errado! A chave deveria ser definida aqui:</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NumberList</span></span> <span class=\"token attr-name\">numbers</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Exemplo: Uso Correto de Chaves</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Correto! N\u00e3o h\u00e1 necessidade de definir a chave aqui:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Correto! A chave deve ser definida dentro do array.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NumberList</span></span> <span class=\"token attr-name\">numbers</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ZXeOGM?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Por via de regra, os elementos dentro de uma fun\u00e7\u00e3o <code class=\"language-javascript\">map()</code> devem especificar chaves.</p>\n<h3 id=\"keys-must-only-be-unique-among-siblings\"><a class=\"anchor\" href=\"/react/lists-and-keys#keys-must-only-be-unique-among-siblings\"></a>Chaves devem ser \u00danicas apenas entre Elementos Irm\u00e3os </h3>\n<p>Chaves usadas nos arrays devem ser \u00fanicas entre seus elementos irm\u00e3os. Contudo elas n\u00e3o precisam ser \u00fanicas globalmente. Podemos usar as mesmas chaves ao criar dois arrays diferentes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Blog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> sidebar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>sidebar<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> <span class=\"token string\">'Welcome to learning React!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Installation'</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> <span class=\"token string\">'You can install React from npm.'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Blog</span></span> <span class=\"token attr-name\">posts</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/NRZYGN?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>As chaves servem como uma dica para o React. Mas elas n\u00e3o s\u00e3o passadas para os componentes. Se voc\u00ea precisar do mesmo valor em um componente, defina ele explicitamente como uma <code class=\"language-javascript\">prop</code> com um nome diferente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span></span>    <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No exemplo acima, o componente <code class=\"language-javascript\">Post</code> pode acessar <code class=\"language-javascript\">props.id</code>. Mas, n\u00e3o pode acessar <code class=\"language-javascript\">props.key</code>.</p>\n<h3 id=\"embedding-map-in-jsx\"><a class=\"anchor\" href=\"/react/lists-and-keys#embedding-map-in-jsx\"></a>Incluindo map() no JSX </h3>\n<p>Nos exemplos acima declaramos uma vari\u00e1vel <code class=\"language-javascript\">listItems</code> separada e adicionamos ela no JSX:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">              <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O JSX permite <a href=\"/react/introducing-jsx#embedding-expressions-in-jsx\">incluir qualquer express\u00e3o</a> dentro de chaves, ent\u00e3o podemos adicionar o resultado do <code class=\"language-javascript\">map()</code> diretamente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">                  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/BLvYrB?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>\u00c0s vezes isso resulta em um c\u00f3digo mais limpo. Mas esse padr\u00e3o tamb\u00e9m pode ser confuso. Como em JavaScript, depende de voc\u00ea decidir se vale a pena extrair uma vari\u00e1vel para aumentar a legibilidade. Lembre-se que se o corpo da fun\u00e7\u00e3o <code class=\"language-javascript\">map()</code> tiver muitos n\u00edveis, poder\u00e1 ser um bom momento para <a href=\"/react/components-and-props#extracting-components\">extrair um componente</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/lists-and-keys.md\">Edit this page</a></p></div></article>", "path": "/react/lists-and-keys", "nav": ["/react/conditional-rendering", "/react/forms"]}, {"key": "9. Forms", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Os elementos de formul\u00e1rio HTML funcionam de maneira um pouco diferente de outros elementos DOM no React, porque os elementos de formul\u00e1rio mant\u00eam naturalmente algum estado interno. Por exemplo, este formul\u00e1rio em HTML puro aceita um \u00fanico nome:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    Nome:\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Enviar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Esse formul\u00e1rio tem o comportamento padr\u00e3o do HTML de navegar para uma nova p\u00e1gina quando o usu\u00e1rio enviar o formul\u00e1rio. Se voc\u00ea quer esse comportamento no React, ele simplesmente funciona. Mas na maioria dos casos, \u00e9 conveniente ter uma fun\u00e7\u00e3o JavaScript que manipula o envio de um formul\u00e1rio e tem acesso aos dados que o usu\u00e1rio digitou nos inputs. O modo padr\u00e3o de fazer isso \u00e9 com uma t\u00e9cnica chamada \u201ccomponentes controlados\u201d (controlled components).</p>\n<h2 id=\"controlled-components\"><a class=\"anchor\" href=\"/react/forms#controlled-components\"></a>Componentes Controlados (Controlled Components) </h2>\n<p>Em HTML, elementos de formul\u00e1rio como <code class=\"language-javascript\">&lt;input&gt;</code>, <code class=\"language-javascript\">&lt;textarea&gt;</code> e <code class=\"language-javascript\">&lt;select&gt;</code> normalmente mant\u00eam seu pr\u00f3prio estado e o atualiza baseado na entrada do usu\u00e1rio. Em React, o estado mut\u00e1vel \u00e9 normalmente mantido na propriedade state dos componentes e atualizado apenas com <a href=\"/react/react-component#setstate\"><code class=\"language-javascript\">setState()</code></a>.</p>\n<p>Podemos combinar os dois fazendo o estado React ser a \u201c\u00fanica fonte da verdade\u201d. Assim, o componente React que renderiza um formul\u00e1rio tamb\u00e9m controla o que acontece nesse formul\u00e1rio nas entradas subsequentes do usu\u00e1rio. Um input cujo o valor \u00e9 controlado pelo React dessa maneira \u00e9 chamado de \u201ccomponente controlado\u201d (controlled component).</p>\n<p>Por exemplo, se quisermos que o exemplo anterior registre o nome quando ele for enviado, podemos escrever o formul\u00e1rio como um componente controlado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Um nome foi enviado: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Nome:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Enviar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/VmmPgp?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Como o atributo <code class=\"language-javascript\">value</code> \u00e9 definido no nosso <code class=\"language-javascript\">&lt;input type=\"text\"&gt;</code>, o valor exibido sempre ser\u00e1 o mesmo de <code class=\"language-javascript\">this.state.value</code>, fazendo com que o estado do React seja a fonte da verdade. Como o <code class=\"language-javascript\">handleChange</code> \u00e9 executado a cada tecla pressionada para atualizar o estado do React, o valor exibido ser\u00e1 atualizado conforme o usu\u00e1rio digita.</p>\n<p>Com um componente controlado, o valor da entrada \u00e9 sempre direcionado pelo estado React. Embora isso signifique que voc\u00ea precisa digitar um pouco mais de c\u00f3digo, agora tamb\u00e9m pode passar o valor para outros elementos da interface do usu\u00e1rio ou redefini-lo de outros manipuladores de eventos.</p>\n<h2 id=\"the-textarea-tag\"><a class=\"anchor\" href=\"/react/forms#the-textarea-tag\"></a>Tag textarea </h2>\n<p>Em HTML, o texto de um elemento <code class=\"language-javascript\">&lt;textarea&gt;</code> \u00e9 definido por seus filhos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span><span class=\"token punctuation\">&gt;</span></span>\n  Apenas algum texto em uma \u00e1rea de texto\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Em React, em vez disso, o <code class=\"language-javascript\">&lt;textarea&gt;</code> usa um atributo <code class=\"language-javascript\">value</code>. Desta forma, um formul\u00e1rio usando um <code class=\"language-javascript\">&lt;textarea&gt;</code> pode ser escrito de forma muito semelhante a um formul\u00e1rio que usa um input de linha \u00fanica:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EssayForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      value<span class=\"token operator\">:</span> <span class=\"token string\">'Por favor, escreva uma disserta\u00e7\u00e3o sobre o seu elemento DOM favorito.'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Uma disserta\u00e7\u00e3o foi enviada: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Disserta\u00e7\u00e3o:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Enviar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Observe que <code class=\"language-javascript\">this.state.value</code> \u00e9 inicializado no construtor, para que o textarea comece com algum texto.</p>\n<h2 id=\"the-select-tag\"><a class=\"anchor\" href=\"/react/forms#the-select-tag\"></a>Tag select </h2>\n<p>Em HTML, <code class=\"language-javascript\">&lt;select&gt;</code> cria uma lista suspensa (drop-down). Por exemplo, esse HTML cria uma lista suspensa de sabores:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>laranja<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Laranja<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>limao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Lim\u00e3o<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">selected</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coco<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Coco<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manga<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Manga<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Note que a op\u00e7\u00e3o \u201ccoco\u201d \u00e9 selecionada por padr\u00e3o, por causa do atributo <code class=\"language-javascript\">selected</code>. Em React, em vez de usar este atributo <code class=\"language-javascript\">selected</code>, usa-se um atributo <code class=\"language-javascript\">value</code> na raiz da tag <code class=\"language-javascript\">select</code>. Isso \u00e9 mais conveniente em um componente controlado, porque voc\u00ea s\u00f3 precisa atualiz\u00e1-lo em um s\u00f3 lugar. Por exemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> <span class=\"token string\">'coco'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Seu sabor favorito \u00e9: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Escolha seu sabor favorito:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>laranja<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Laranja</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>limao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Lim\u00e3o</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coco<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Coco</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manga<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Manga</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Enviar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/JbbEzX?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>No geral, isso faz com que as tags <code class=\"language-javascript\">&lt;input type=\"text\"&gt;</code>, <code class=\"language-javascript\">&lt;textarea&gt;</code> e <code class=\"language-javascript\">&lt;select&gt;</code> funcionem de forma muito semelhante - todos eles aceitam um atributo <code class=\"language-javascript\">value</code> que voc\u00ea pode usar para implementar um componente controlado.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Voc\u00ea pode passar um array para o atributo <code class=\"language-javascript\">value</code>, permitindo que voc\u00ea selecione v\u00e1rias op\u00e7\u00f5es em uma tag <code class=\"language-javascript\">select</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">multiple</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n</div>\n<h2 id=\"the-file-input-tag\"><a class=\"anchor\" href=\"/react/forms#the-file-input-tag\"></a>Tag de entrada de arquivo (file input) </h2>\n<p>Em HTML, o <code class=\"language-javascript\">&lt;input type=\"file\"&gt;</code> permite ao usu\u00e1rio escolher um ou mais arquivos de seu dispositivo para serem enviados para um servidor ou manipulados por JavaScript atrav\u00e9s da <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/File/Using_files_from_web_applications\">File API</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Como seu valor \u00e9 de somente leitura, ele \u00e9 um componente <strong>n\u00e3o controlado</strong> do React. Esses s\u00e3o discutidos junto a outros componentes n\u00e3o controlados <a href=\"/react/uncontrolled-components#the-file-input-tag\">mais adiante na documenta\u00e7\u00e3o</a>.</p>\n<h2 id=\"handling-multiple-inputs\"><a class=\"anchor\" href=\"/react/forms#handling-multiple-inputs\"></a>Manipulando M\u00faltiplos Inputs </h2>\n<p>Quando voc\u00ea precisa manipular m\u00faltiplos inputs controlados, voc\u00ea pode adicionar um atributo <code class=\"language-javascript\">name</code> a cada elemento e deixar a fun\u00e7\u00e3o manipuladora escolher o que fazer com base no valor de <code class=\"language-javascript\">event.target.name</code>.</p>\n<p>Por exemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Reservation</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      isGoing<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      numberOfGuests<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleInputChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleInputChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'checkbox'</span> <span class=\"token operator\">?</span> target<span class=\"token punctuation\">.</span>checked <span class=\"token operator\">:</span> target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Est\u00e3o indo:</span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n<span class=\"gatsby-highlight-code-line\">            <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isGoing<span class=\"token punctuation\">\"</span></span></span>            <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isGoing<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          N\u00famero de convidados:</span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n<span class=\"gatsby-highlight-code-line\">            <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>numberOfGuests<span class=\"token punctuation\">\"</span></span></span>            <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>numberOfGuests<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/wgedvV?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Observe como usamos a sintaxe ES6 <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Inicializador_Objeto#Nomes_de_propriedades_computados\">nomes de propriedades computados</a> para atualizar a chave de estado correspondente ao nome de entrada fornecido:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>\u00c9 equivalente a este c\u00f3digo no ES5:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> partialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">partialState<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>partialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Al\u00e9m disso, como o <code class=\"language-javascript\">setState()</code> automaticamente <a href=\"/react/state-and-lifecycle#state-updates-are-merged\">mescla um estado parcial ao estado atual</a>, n\u00f3s podemos cham\u00e1-lo apenas com as partes alteradas.</p>\n<h2 id=\"controlled-input-null-value\"><a class=\"anchor\" href=\"/react/forms#controlled-input-null-value\"></a>Valor Nulo em um Input Controlado </h2>\n<p>A especifica\u00e7\u00e3o de uma prop <code class=\"language-javascript\">value</code> em um <a href=\"/react/forms#controlled-components\">componente controlado</a> impede que o usu\u00e1rio altere a entrada, a menos que voc\u00ea deseje. Se voc\u00ea especificou uma prop <code class=\"language-javascript\">value</code>, mas o input ainda \u00e9 edit\u00e1vel, voc\u00ea pode ter acidentalmente definido o <code class=\"language-javascript\">value</code> como <code class=\"language-javascript\">undefined</code> ou <code class=\"language-javascript\">null</code>.</p>\n<p>O c\u00f3digo a seguir demonstra isso. (O input \u00e9 bloqueada no in\u00edcio, mas torna-se edit\u00e1vel ap\u00f3s um tempo.)</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hi<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> mountNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> mountNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"alternatives-to-controlled-components\"><a class=\"anchor\" href=\"/react/forms#alternatives-to-controlled-components\"></a>Alternativas para Componentes Controlados </h2>\n<p>\u00c0s vezes pode ser tedioso usar componentes controlados, porque voc\u00ea precisa escrever um manipulador de eventos para cada maneira que seus dados podem mudar e canalizar todo o estado do input atrav\u00e9s de um componente React. Isso pode se tornar particularmente irritante quando voc\u00ea est\u00e1 convertendo uma base de c\u00f3digo preexistente para o React ou integrando um aplicativo React com uma biblioteca que n\u00e3o seja baseado em React. Nessas situa\u00e7\u00f5es, talvez voc\u00ea queira verificar os <a href=\"/react/uncontrolled-components\">componentes n\u00e3o controlados</a>, uma t\u00e9cnica alternativa para implementar formul\u00e1rios de entrada.</p>\n<h2 id=\"fully-fledged-solutions\"><a class=\"anchor\" href=\"/react/forms#fully-fledged-solutions\"></a>Solu\u00e7\u00f5es Completas </h2>\n<p>Se voc\u00ea est\u00e1 procurando por uma solu\u00e7\u00e3o completa, incluindo valida\u00e7\u00e3o, manter o controle dos campos visualizados e lidar com o envio de formul\u00e1rios, o <a class=\"external-link\" href=\"https://jaredpalmer.com/formik\">Formik</a> \u00e9 uma das escolhas mais populares. No entanto, ele \u00e9 constru\u00eddo sobre os mesmos princ\u00edpios de componentes controlados e gerenciamento de estado - portanto, n\u00e3o negligencie o aprendizado desses conceitos.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/forms.md\">Edit this page</a></p></div></article>", "path": "/react/forms", "nav": ["/react/lists-and-keys", "/react/lifting-state-up"]}, {"key": "10. Elevando o State", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Com frequ\u00eancia, a modifica\u00e7\u00e3o de um dado tem que ser refletida em v\u00e1rios componentes. Recomendamos elevar o state compartilhado ao elemento pai comum mais pr\u00f3ximo. Vamos ver como isso funciona na pr\u00e1tica.</p>\n<p>Nessa se\u00e7\u00e3o, criaremos uma calculadora de temperatura que calcula se a \u00e1gua ferveria em determinada temperatura.</p>\n<p>Vamos iniciar com um componente chamado <code class=\"language-javascript\">BoilingVerdict</code>. Ele recebe a temperatura por meio da prop <code class=\"language-javascript\">celsius</code> e retorna uma mensagem indicando se a temperatura \u00e9 suficiente para a \u00e1gua ferver.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">BoilingVerdict</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>celsius <span class=\"token operator\">&gt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">A \u00e1gua ferveria.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">A \u00e1gua n\u00e3o ferveria.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>A seguir, criaremos um componente chamado <code class=\"language-javascript\">Calculator</code>. Ele renderiza um <code class=\"language-javascript\">&lt;input&gt;</code> que recebe a temperatura e a mant\u00e9m em <code class=\"language-javascript\">this.state.temperature</code>.</p>\n<p>Al\u00e9m disso, ele renderiza o <code class=\"language-javascript\">BoilingVerdict</code> de acordo com o valor atual do input.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>temperature<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>temperature<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Informe a temperatura em Celsius:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BoilingVerdict</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">celsius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ZXeOBm?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<h2 id=\"adding-a-second-input\"><a class=\"anchor\" href=\"/react/lifting-state-up#adding-a-second-input\"></a>Adicionando um Segundo Input </h2>\n<p>Nosso novo requisito \u00e9 que, al\u00e9m de um input para grau Celsius, tamb\u00e9m tenhamos um input para grau Fahrenheit e que ambos estejam sincronizados.</p>\n<p>Podemos iniciar extraindo um componente <code class=\"language-javascript\">TemperatureInput</code> do componente <code class=\"language-javascript\">Calculator</code>. Vamos adicionar uma nova prop <code class=\"language-javascript\">scale</code> que pode ser tanto <code class=\"language-javascript\">\"c\"</code> como <code class=\"language-javascript\">\"f\"</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> scaleNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  c<span class=\"token operator\">:</span> <span class=\"token string\">'Celsius'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  f<span class=\"token operator\">:</span> <span class=\"token string\">'Fahrenheit'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TemperatureInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>temperature<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>temperature<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Informe a temperatura em </span><span class=\"token punctuation\">{</span>scaleNames<span class=\"token punctuation\">[</span>scale<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">}</span></span>\n               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora podemos modificar o <code class=\"language-javascript\">Calculator</code> para renderizar dois inputs de temperatura separados:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TemperatureInput</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TemperatureInput</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>f<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/jGBryx?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Agora n\u00f3s temos dois inputs. Por\u00e9m, quando a temperatura \u00e9 inserida em um deles, o outro n\u00e3o atualiza. Isso contraria nosso requisito: queremos que eles estejam sincronizados.</p>\n<p>Tamb\u00e9m n\u00e3o podemos renderizar o <code class=\"language-javascript\">BoilingVerdict</code> a partir do <code class=\"language-javascript\">Calculator</code>, porque esse n\u00e3o conhece a temperatura atual j\u00e1 que ela est\u00e1 escondida dentro do <code class=\"language-javascript\">TemperatureInput</code>.</p>\n<h2 id=\"writing-conversion-functions\"><a class=\"anchor\" href=\"/react/lifting-state-up#writing-conversion-functions\"></a>Codificando Fun\u00e7\u00f5es de Convers\u00e3o </h2>\n<p>Primeiro, vamos criar duas fun\u00e7\u00f5es para converter de Celsius para Fahrenheit e vice-versa:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toCelsius</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fahrenheit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">toFahrenheit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">celsius</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>celsius <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Essas duas fun\u00e7\u00f5es convertem n\u00fameros. Vamos criar outra fun\u00e7\u00e3o que recebe uma string <code class=\"language-javascript\">temperature</code> e uma fun\u00e7\u00e3o de convers\u00e3o como argumentos e retorna uma string. Vamos us\u00e1-la para calcular o valor de um input com base no outro input.</p>\n<p>Retorna uma string vazia quando <code class=\"language-javascript\">temperature</code> for inv\u00e1lido e mant\u00e9m o retorno arredondado at\u00e9 a terceira casa decimal.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">tryConvert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temperature<span class=\"token punctuation\">,</span> convert</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rounded <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> rounded<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por exemplo, <code class=\"language-javascript\">tryConvert('abc', toCelsius)</code> retona uma string vazia e <code class=\"language-javascript\">tryConvert('10.22', toFahrenheit)</code> retorna <code class=\"language-javascript\">'50.396'</code>.</p>\n<h2 id=\"lifting-state-up\"><a class=\"anchor\" href=\"/react/lifting-state-up#lifting-state-up\"></a>Elevando o State </h2>\n<p>Atualmente, ambos os componentes <code class=\"language-javascript\">TemperatureInput</code> mant\u00e9m, de modo independente, o valor em seu state local.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TemperatureInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>temperature<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>temperature<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// ...  </span></code></pre></div>\n<p>Por\u00e9m, queremos que esses dois inputs estejam sincronizados um com o outro. Quando o input de Celsius for atualizado, o input de Fahrenheit deve mostrar a temperatura convertida e vice-versa.</p>\n<p>No React, o compartilhamento do state \u00e9 alcan\u00e7ado ao mov\u00ea-lo para o elemento pai comum aos componentes que precisam dele. Isso se chama \u201celevar o state\u201d (state lift). Vamos remover o state local do <code class=\"language-javascript\">TemperatureInput</code> e coloc\u00e1-lo no <code class=\"language-javascript\">Calculator</code>.</p>\n<p>Se o <code class=\"language-javascript\">Calculator</code> \u00e9 dono do state compartilhado, ele se torna a \u201cfonte da verdade\u201d para a temperatura atual em ambos os inputs. Ele pode instruir ambos a terem valores que s\u00e3o consistentes um com o outro. J\u00e1 que as props de ambos os <code class=\"language-javascript\">TemperatureInput</code> vem do mesmo componente pai, <code class=\"language-javascript\">Calculator</code>, os dois inputs sempre estar\u00e3o sincronizados.</p>\n<p>Vamos ver o passo a passo de como isso funciona.</p>\n<p>Primeiro, vamos substituir <code class=\"language-javascript\">this.state.temperature</code> por <code class=\"language-javascript\">this.props.temperature</code> no componente <code class=\"language-javascript\">TemperatureInput</code>. Por hora, vamos fingir que <code class=\"language-javascript\">this.props.temperature</code> j\u00e1 existe. Apesar de que, no futuro, teremos que pass\u00e1-la do <code class=\"language-javascript\">Calculator</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Antes: const temperature = this.state.temperature;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Sabemos que <a href=\"/react/components-and-props#props-are-read-only\">props s\u00e3o somente leitura</a>. Quando a <code class=\"language-javascript\">temperature</code> estava no state local, o <code class=\"language-javascript\">TemperatureInput</code> podia simplesmente chamar <code class=\"language-javascript\">this.setState()</code> para modific\u00e1-lo. Por\u00e9m, agora que a <code class=\"language-javascript\">temperature</code> vem do elemento pai como uma prop, o <code class=\"language-javascript\">TemperatureInput</code> n\u00e3o tem controle sobre ela.</p>\n<p>No React, isso \u00e9 comumente solucionado ao tornar um componente comum em um \u201ccomponente controlado\u201d. Assim como o <code class=\"language-javascript\">&lt;input&gt;</code> do DOM aceita ambas as props <code class=\"language-javascript\">value</code> e <code class=\"language-javascript\">onChange</code>, o componente personalizado <code class=\"language-javascript\">TemperatureInput</code> tamb\u00e9m pode aceitar ambas as props <code class=\"language-javascript\">temperature</code> e <code class=\"language-javascript\">onTemperatureChange</code> do <code class=\"language-javascript\">Calculator</code>, seu componente pai.</p>\n<p>Agora, quando o <code class=\"language-javascript\">TemperatureInput</code> quiser atualizar sua temperatura, ele executa <code class=\"language-javascript\">this.props.onTemperatureChange</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Antes: this.setState({temperature: e.target.value});</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onTemperatureChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// ...</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Observa\u00e7\u00e3o:</strong>\n<p>O nome das props <code class=\"language-javascript\">temperature</code> ou <code class=\"language-javascript\">onTemperatureChange</code> n\u00e3o possui nenhum significado especial. Elas poderiam ter quaisquer outros nomes, tais como <code class=\"language-javascript\">value</code> e <code class=\"language-javascript\">onChange</code>, o que \u00e9 uma conven\u00e7\u00e3o comum.</p>\n</div>\n<p>A prop <code class=\"language-javascript\">onTemperatureChange</code> ser\u00e1 fornecida juntamente com a prop <code class=\"language-javascript\">temperature</code> pelo componente pai <code class=\"language-javascript\">Calculator</code>. Esse ir\u00e1 cuidar das altera\u00e7\u00f5es ao modificar seu pr\u00f3prio state local, fazendo com que ambos os inputs sejam renderizados com novos valores. Vamos conferir a nova implementa\u00e7\u00e3o do componente <code class=\"language-javascript\">Calculator</code> em breve.</p>\n<p>Antes de mergulhar nas altera\u00e7\u00f5es do <code class=\"language-javascript\">Calculator</code>, vamos recapitular as altera\u00e7\u00f5es no componente <code class=\"language-javascript\">TemperatureInput</code>. N\u00f3s removemos o state local dele, ent\u00e3o ao inv\u00e9s de ler <code class=\"language-javascript\">this.state.temperature</code>, agora lemos <code class=\"language-javascript\">this.props.temperature</code>. Ao inv\u00e9s de chamar <code class=\"language-javascript\">this.setState()</code> quando quisermos fazer uma altera\u00e7\u00e3o chamamos <code class=\"language-javascript\">this.props.onTemperatureChange()</code> que ser\u00e1 fornecido pelo <code class=\"language-javascript\">Calculator</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TemperatureInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onTemperatureChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Informe a temperatura em </span><span class=\"token punctuation\">{</span>scaleNames<span class=\"token punctuation\">[</span>scale<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">}</span></span>\n               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora \u00e9 a vez do componente <code class=\"language-javascript\">Calculator</code>.</p>\n<p>Vamos armazenar no state local os valores <code class=\"language-javascript\">temperature</code> e <code class=\"language-javascript\">scale</code> referentes ao input atual. Eles representam o state que \u201cfoi elevado\u201d dos inputs e servir\u00e1 como \u201cfonte da verdade\u201d para ambos. \u00c9 a representa\u00e7\u00e3o m\u00ednima de todos os dados necess\u00e1rios para conseguir renderizar ambos os inputs.</p>\n<p>Por exemplo, se informarmos 37 no input de Celsius, o state do componente <code class=\"language-javascript\">Calculator</code> ser\u00e1:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  temperature<span class=\"token operator\">:</span> <span class=\"token string\">'37'</span><span class=\"token punctuation\">,</span>\n  scale<span class=\"token operator\">:</span> <span class=\"token string\">'c'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Posteriormente, se editarmos o input Fahrenheit para ser 212, o state do componente <code class=\"language-javascript\">Calculator</code> ser\u00e1:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  temperature<span class=\"token operator\">:</span> <span class=\"token string\">'212'</span><span class=\"token punctuation\">,</span>\n  scale<span class=\"token operator\">:</span> <span class=\"token string\">'f'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Poder\u00edamos ter armazenado o valor de ambos os inputs mas isso n\u00e3o \u00e9 necess\u00e1rio. \u00c9 suficiente armazenar o valor do input recentemente alterado e da escala que ele representa. Podemos assim inferir o valor do outro input com base nos valores atuais de <code class=\"language-javascript\">temperature</code> e <code class=\"language-javascript\">scale</code>.</p>\n<p>Os inputs ficam sincronizados porque seus valores s\u00e3o calculados tendo como base o mesmo state:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCelsiusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleCelsiusChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleFahrenheitChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleFahrenheitChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>temperature<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> scale<span class=\"token operator\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleCelsiusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temperature</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>scale<span class=\"token operator\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> temperature<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleFahrenheitChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temperature</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>scale<span class=\"token operator\">:</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> temperature<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> celsius <span class=\"token operator\">=</span> scale <span class=\"token operator\">===</span> <span class=\"token string\">'f'</span> <span class=\"token operator\">?</span> <span class=\"token function\">tryConvert</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">,</span> toCelsius<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> temperature<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> fahrenheit <span class=\"token operator\">=</span> scale <span class=\"token operator\">===</span> <span class=\"token string\">'c'</span> <span class=\"token operator\">?</span> <span class=\"token function\">tryConvert</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">,</span> toFahrenheit<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> temperature<span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TemperatureInput</span></span>\n          <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">temperature</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>celsius<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onTemperatureChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCelsiusChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TemperatureInput</span></span>\n          <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>f<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">temperature</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fahrenheit<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onTemperatureChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleFahrenheitChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BoilingVerdict</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">celsius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/WZpxpz?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Agora, tanto faz qual input for editado, <code class=\"language-javascript\">this.state.temperature</code> e <code class=\"language-javascript\">this.state.scale</code> no componente <code class=\"language-javascript\">Calculator</code> ser\u00e3o atualizados. Um dos inputs recebe o valor como est\u00e1, preservando o que foi informado pelo usu\u00e1rio e o valor do outro input \u00e9 sempre recalculado com base no primeiro.</p>\n<p>Vamos recapitular o que acontece quando um input \u00e9 editado:</p>\n<ul>\n<li>O React executa a fun\u00e7\u00e3o especificada como <code class=\"language-javascript\">onChange</code> no <code class=\"language-javascript\">&lt;input&gt;</code> do DOM. Nesse caso, esse \u00e9 o m\u00e9todo <code class=\"language-javascript\">handleChange</code> do componente <code class=\"language-javascript\">TemperatureInput</code>.</li>\n<li>O m\u00e9todo <code class=\"language-javascript\">handleChange</code> do componente <code class=\"language-javascript\">TemperatureInput</code> executa <code class=\"language-javascript\">this.props.onTemperatureChange()</code> com o novo valor desejado. Suas props, incluindo <code class=\"language-javascript\">onTemperatureChange</code>, foram fornecidas pelo seu componente pai, o <code class=\"language-javascript\">Calculator</code>.</li>\n<li>Quando renderizado previamente, o componente <code class=\"language-javascript\">Calculator</code> especificou que <code class=\"language-javascript\">onTemperatureChange</code> do <code class=\"language-javascript\">TemperatureInput</code> de Celsius \u00e9 o m\u00e9todo <code class=\"language-javascript\">handleCelsiusChange</code> do <code class=\"language-javascript\">Calculator</code>, e que <code class=\"language-javascript\">onTemperatureChange</code> do <code class=\"language-javascript\">TemperatureInput</code> de Fahrenheit \u00e9 o m\u00e9todo <code class=\"language-javascript\">handleFahrenheitChange</code> do <code class=\"language-javascript\">Calculator</code>. Ent\u00e3o um desses dois m\u00e9todos do <code class=\"language-javascript\">Calculator</code> ser\u00e1 executado dependendo de qual input for editado.</li>\n<li>Dentro desses m\u00e9todos, o componente <code class=\"language-javascript\">Calculator</code> pede ao React para ser renderizado novamente ao chamar <code class=\"language-javascript\">this.setState()</code> com o novo valor da temperatura e da escala do input rec\u00e9m editado.</li>\n<li>O React executa o m\u00e9todo <code class=\"language-javascript\">render</code> do componente <code class=\"language-javascript\">Calculator</code> para aprender como a interface deveria ficar. Os valores de ambos os inputs s\u00e3o recalculados com base na temperatura e escala atuais. A convers\u00e3o de temperatura \u00e9 realizada aqui.</li>\n<li>O React executa o m\u00e9todo <code class=\"language-javascript\">render</code> dos dois componentes <code class=\"language-javascript\">TemperatureInput</code> com suas novas props especificadas pelo <code class=\"language-javascript\">Calculator</code>. O React aprende como a interface do usu\u00e1rio deve ficar.</li>\n<li>O React executa o m\u00e9todo <code class=\"language-javascript\">render</code> do componente <code class=\"language-javascript\">BoilingVerdict</code>, passando a temperatura em Celsius como prop.</li>\n<li>O React DOM atualiza o DOM com o veredito e com os valores de input desej\u00e1veis. O input que acabamos de editar recebe seu valor atual e o outro input \u00e9 atualizado com a temperatura ap\u00f3s a convers\u00e3o.</li>\n</ul>\n<p>Toda edi\u00e7\u00e3o segue os mesmos passos ent\u00e3o os inputs ficam sincronizados.</p>\n<h2 id=\"lessons-learned\"><a class=\"anchor\" href=\"/react/lifting-state-up#lessons-learned\"></a>Li\u00e7\u00f5es Aprendidas </h2>\n<p>Deve haver uma \u00fanica \u201cfonte da verdade\u201d para quaisquer dados que sejam alterados em uma aplica\u00e7\u00e3o React. Geralmente, o state \u00e9 adicionado ao componente que necessita dele para renderizar. Depois, se outro componente tamb\u00e9m precisar desse state, voc\u00ea pode elev\u00e1-lo ao elemento pai comum mais pr\u00f3ximo de ambos os componentes. Ao inv\u00e9s de tentar sincronizar o state entre diferentes componentes, voc\u00ea deve contar com o <a href=\"/react/state-and-lifecycle#the-data-flows-down\">fluxo de dados de cima para baixo</a>.</p>\n<p>Elevar o state envolve escrever mais c\u00f3digo de estrutura do que as abordagens de two-way data bind, mas como benef\u00edcio, demanda menos trabalho para encontrar e isolar erros. J\u00e1 que o state \u201cvive\u201d em um componente e somente esse componente pode alter\u00e1-lo, a \u00e1rea de superf\u00edcie para encontrar os erros \u00e9 drasticamente reduzida. Al\u00e9m disso, \u00e9 poss\u00edvel implementar qualquer l\u00f3gica personalizada para rejeitar ou transformar o input do usu\u00e1rio.</p>\n<p>Se alguma coisa pode ser derivada tanto das props como do state, ela provavelmente n\u00e3o deveria estar no state. Por exemplo, ao inv\u00e9s de armazenar ambos <code class=\"language-javascript\">celsiusValue</code> e <code class=\"language-javascript\">fahrenheitValue</code>, armazenamos somente o valor da \u00faltima <code class=\"language-javascript\">temperature</code> editada e o valor de <code class=\"language-javascript\">scale</code>. O valor do outro input pode sempre ser calculado com base nessas informa\u00e7\u00f5es no m\u00e9todo <code class=\"language-javascript\">render()</code>. Isso permite limpar ou arredondar o valor no outro input sem perder precis\u00e3o no valor informado pelo usu\u00e1rio.</p>\n<p>Quando voc\u00ea v\u00ea algo de errado na interface do usu\u00e1rio, voc\u00ea pode utilizar o <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-devtools\">React Developer Tools</a> para inspecionar as props e subir a \u00e1rvore de elementos at\u00e9 encontrar o componente respons\u00e1vel por atualizar o state. Isso permite que voc\u00ea encontre a fonte dos erros:</p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//ef94afc3447d75cdc245c77efb0d63be/react-devtools-state.gif\">Image link</a></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/lifting-state-up.md\">Edit this page</a></p></div></article>", "path": "/react/lifting-state-up", "nav": ["/react/forms", "/react/composition-vs-inheritance"]}, {"key": "11. Composi\u00e7\u00e3o vs Heran\u00e7a", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>O React tem um poderoso modelo de composi\u00e7\u00e3o, e por isso recomendamos o uso de composi\u00e7\u00e3o ao inv\u00e9s de heran\u00e7a para reutilizar c\u00f3digo entre componentes.</p>\n<p>Nesta p\u00e1gina, iremos demonstrar alguns problemas encontrados pelos desenvolvedores que est\u00e3o iniciando com o React e esbarram em situa\u00e7\u00f5es com heran\u00e7a, e mostraremos como podemos resolver utilizando composi\u00e7\u00e3o.</p>\n<h2 id=\"containment\"><a class=\"anchor\" href=\"/react/composition-vs-inheritance#containment\"></a>Conten\u00e7\u00e3o </h2>\n<p>Alguns componentes n\u00e3o tem como saber quem ser\u00e3o seus elementos filhos. Isso \u00e9 muito comum para componentes como o <code class=\"language-javascript\">SideBar</code> ou <code class=\"language-javascript\">Dialog</code> que representam \u201ccaixas\u201d gen\u00e9ricas.</p>\n<p>Recomendamos que esses componentes utilizem a prop especial <code class=\"language-javascript\">children</code> para passar os elementos filhos diretos para sua respectiva sa\u00edda:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyBorder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'FancyBorder FancyBorder-'</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso permite outros componentes passar elementos filhos no pr\u00f3prio JSX:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">WelcomeDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyBorder</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        Bem-vindo</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        Obrigado por visitar a nossa espa\u00e7onave!</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyBorder</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ozqNOV?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Qualquer conte\u00fado dentro da tag JSX do componente <code class=\"language-javascript\">&lt;FancyBorder&gt;</code> vai ser passado ao componente <code class=\"language-javascript\">FancyBorder</code> como prop <code class=\"language-javascript\">children</code>. Desde que <code class=\"language-javascript\">FancyBorder</code> renderize a <code class=\"language-javascript\">{props.children}</code> dentro de uma <code class=\"language-javascript\">&lt;div&gt;</code>, os elementos ser\u00e3o renderizados no resultado final.</p>\n<p>Mesmo que seja incomum, as vezes pode ser que voc\u00ea precise de diversos \u201cburacos\u201d no componente. Em alguns casos voc\u00ea pode criar sua pr\u00f3pria conven\u00e7\u00e3o e n\u00e3o utilizar a prop <code class=\"language-javascript\">children</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">SplitPane</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SplitPane<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SplitPane-left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SplitPane-right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SplitPane</span></span>\n      <span class=\"token attr-name\">left</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Contacts</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>      <span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">right</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Chat</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>      <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwZOJp?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Os elementos React como <code class=\"language-javascript\">&lt;Contacts/&gt;</code> e <code class=\"language-javascript\">&lt;Chat/&gt;</code> s\u00e3o apenas objetos, e voc\u00ea pode pass\u00e1-los como props assim como faz com outros tipos de dados. Esta abordagem pode soar familiar como \u201cslots\u201d em outras bibliotecas, mas no React n\u00e3o existe limita\u00e7\u00f5es sobre o que pode ser passado como props.</p>\n<h2 id=\"specialization\"><a class=\"anchor\" href=\"/react/composition-vs-inheritance#specialization\"></a>Especializa\u00e7\u00e3o </h2>\n<p>Algumas vezes acabamos pensando em componentes como \u201ccasos especiais\u201d de outros componentes, por exemplo, podemos dizer que o componente <code class=\"language-javascript\">WelcomeDialog</code> \u00e9 um caso especial de <code class=\"language-javascript\">Dialog</code>. </p>\n<p>No React, isto tamb\u00e9m pode ser obtido atrav\u00e9s do uso de composi\u00e7\u00e3o, um componente espec\u00edfico renderiza um componente mais \u201cgen\u00e9rico\u201d e o configura com as suas respectivas props:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dialog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyBorder</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyBorder</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">WelcomeDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dialog</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Bem-vindo<span class=\"token punctuation\">\"</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Obrigado por visitar a nossa espa\u00e7onave!<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/kkEaOZ?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>A composi\u00e7\u00e3o tamb\u00e9m ir\u00e1 funcionar para componentes escritos utilizando classe:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dialog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyBorder</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyBorder</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUpDialog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSignUp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSignUp</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>login<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dialog</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Programa de Explora\u00e7\u00e3o de Marte<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Como gostaria de ser chamado?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSignUp<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          Cadastre-se!</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dialog</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>login<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleSignUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bem-vindo a bordo, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>login<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwZbYa?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<h2 id=\"so-what-about-inheritance\"><a class=\"anchor\" href=\"/react/composition-vs-inheritance#so-what-about-inheritance\"></a>E sobre a heran\u00e7a? </h2>\n<p>No Facebook, n\u00f3s usamos o React em milhares de componentes, e n\u00e3o encontramos nenhum caso que recomendar\u00edamos criar componentes utilizando hierarquia de heran\u00e7a.</p>\n<p>O uso de props e composi\u00e7\u00e3o ir\u00e1 te dar toda flexibilidade que voc\u00ea precisa para customizar o comportamento e apar\u00eancia dos componentes, de uma maneira expl\u00edcita e segura. Lembre-se de que os componentes podem aceitar um n\u00famero vari\u00e1vel de props, incluindo valores primitivos, como int, array, boolean; assim como elementos React e fun\u00e7\u00f5es.</p>\n<p>E se voc\u00ea desejar reutilizar funcionalidades (n\u00e3o gr\u00e1ficas) entre componentes, sugerimos que voc\u00ea a extraia em m\u00f3dulos JavaScript. Os componentes podem importar essa fun\u00e7\u00e3o, objeto ou classe sem precisar estender.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/composition-vs-inheritance.md\">Edit this page</a></p></div></article>", "path": "/react/composition-vs-inheritance", "nav": ["/react/lifting-state-up", "/react/thinking-in-react"]}, {"key": "12. Pensando do jeito React", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>React \u00e9, na nossa opini\u00e3o, o principal modo de se construir aplica\u00e7\u00f5es Web grandes e r\u00e1pidas com JavaScript. Ele tem escalado muito bem para n\u00f3s no Facebook e Instagram.</p>\n<p>Uma das muitas excelentes partes do React \u00e9 o modo que ele faz voc\u00ea pensar sobre apps enquanto os constr\u00f3i. Neste documento, n\u00f3s iremos ensinar o processo mental envolvido na constru\u00e7\u00e3o de uma tabela de produtos busc\u00e1veis utilizando o React.</p>\n<h2 id=\"start-with-a-mock\"><a class=\"anchor\" href=\"/react/thinking-in-react#start-with-a-mock\"></a>Comece Com Um Mock </h2>\n<p>Imagine que n\u00f3s tenhamos uma API JSON e um mock desenvolvido pelo nosso designer. O mock se parece com isso:</p>\n<p>\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/1071fbcc9eed01fddc115b41e193ec11/d4770/thinking-in-react-mock.png\">Image link</a>\n</span>\n</span>\n</p>\n<p>Nossa API JSON retorna dados como esses:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">[\n  {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\n  {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\n  {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\n  {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\n  {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\n  {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\n];</code></pre></div>\n<h2 id=\"step-1-break-the-ui-into-a-component-hierarchy\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-1-break-the-ui-into-a-component-hierarchy\"></a>Passo 1: Separe a UI Em Uma Hierarquia De Componentes</h2>\n<p>A primeira coisa que voc\u00ea vai querer fazer \u00e9 dar nomes e desenhar ret\u00e2ngulos em volta de cada componente (e subcomponente) do mock. Se voc\u00ea estiver trabalhando com designers, eles podem j\u00e1 ter feito isso, ent\u00e3o v\u00e1 falar com eles! Os nomes das camadas no Photoshop podem acabar sendo os nomes dos seus componentes React!</p>\n<p>Mas como voc\u00ea sabe o que deveria ser seu pr\u00f3prio componente? Use as mesmas t\u00e9cnicas que voc\u00ea usaria para decidir se voc\u00ea deveria criar uma nova fun\u00e7\u00e3o ou objeto. Uma dessas t\u00e9cnicas \u00e9 o <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">princ\u00edpio da responsabilidade \u00fanica</a>, ou seja, um componente deve idealmente fazer apenas uma coisa. Se ele acabar crescendo, dever\u00e1 ser decomposto em subcomponentes menores.</p>\n<p>Visto que voc\u00ea estar\u00e1 frequentemente exibindo um modelo de dados em JSON ao usu\u00e1rio, voc\u00ea perceber\u00e1 que caso o seu modelo esteja corretamente constru\u00eddo, sua UI (e portanto a sua estrutura de componente) ser\u00e1 mapeada satisfatoriamente. Isso acontece pois UI e modelo de dados tendem a aderir \u00e0 mesma <em>arquitetura de informa\u00e7\u00e3o</em>. Separe sua UI em componentes, onde cada componente corresponde a uma parte do seu modelo de dados.</p>\n<p>\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/9381f09e609723a8bb6e4ba1a7713b46/90cbd/thinking-in-react-components.png\">Image link</a>\n</span>\n</span>\n</p>\n<p>Voc\u00ea ver\u00e1 que n\u00f3s temos cinco componentes nessa aplica\u00e7\u00e3o. Em it\u00e1lico est\u00e3o os dados que cada componente representa. Os n\u00fameros na imagem correspondem aos n\u00fameros abaixo.</p>\n<ol>\n<li><strong><code class=\"language-javascript\">FilterableProductTable</code> (laranja):</strong> cont\u00e9m a totalidade do exemplo</li>\n<li><strong><code class=\"language-javascript\">SearchBar</code> (azul):</strong> recebe todo <em>input do usu\u00e1rio</em></li>\n<li><strong><code class=\"language-javascript\">ProductTable</code> (verde):</strong> exibe e filtra a <em>cole\u00e7\u00e3o de dados</em> baseado no <em>input do usu\u00e1rio</em></li>\n<li><strong><code class=\"language-javascript\">ProductCategoryRow</code> (turquesa):</strong> exibe um cabe\u00e7alho para cada <em>categoria</em></li>\n<li><strong><code class=\"language-javascript\">ProductRow</code> (vermelho):</strong> exibe uma linha para cada <em>produto</em></li>\n</ol>\n<p>Se voc\u00ea olhar para <code class=\"language-javascript\">ProductTable</code>, ver\u00e1 que o cabe\u00e7alho da tabela (contendo as etiquetas \u201cName\u201d and \u201cPrice\u201d) n\u00e3o \u00e9 um componente separado. Isso \u00e9 uma quest\u00e3o de prefer\u00eancia, e pode-se fazer um argumento contr\u00e1rio. Para esse exemplo, n\u00f3s o deixamos como parte de <code class=\"language-javascript\">ProductTable</code> pois o cabe\u00e7alho faz parte da renderiza\u00e7\u00e3o da <em>cole\u00e7\u00e3o de dados</em>, que \u00e9 responsabilidade de <code class=\"language-javascript\">ProductTable</code>. Entretanto, se a sua complexidade aumentar (e.g. se n\u00f3s adicion\u00e1ssemos a capacidade de ordena\u00e7\u00e3o), certamente faria sentido a cria\u00e7\u00e3o do componente <code class=\"language-javascript\">ProductTableHeader</code>.</p>\n<p>Agora que n\u00f3s j\u00e1 identificamos os componentes do nosso mock, vamos organiz\u00e1-los em uma hierarquia. Componentes que aparecem dentro de outros no mock devem aparecer como filhos na hierarquia:</p>\n<ul>\n<li>\n<p><code class=\"language-javascript\">FilterableProductTable</code></p>\n<ul>\n<li><code class=\"language-javascript\">SearchBar</code></li>\n<li>\n<p><code class=\"language-javascript\">ProductTable</code></p>\n<ul>\n<li><code class=\"language-javascript\">ProductCategoryRow</code></li>\n<li><code class=\"language-javascript\">ProductRow</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"step-2-build-a-static-version-in-react\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-2-build-a-static-version-in-react\"></a>Passo 2: Crie Uma Vers\u00e3o Est\u00e1tica Em React </h2>\n<p class=\"codepen\">Veja o Pen <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/BwWzwm\">Pensando em React: Passo 2</a> no <a class=\"external-link\" href=\"https://codepen.io\">CodePen</a>.</p>\n<script></script>\n<p>Agora que voc\u00ea j\u00e1 tem sua hierarquia de componentes, chegou a hora de implementar o seu app. O modo mais f\u00e1cil \u00e9 construir uma vers\u00e3o que recebe o seu modelo de dados e renderiza a UI, mas sem interatividade. \u00c9 melhor desacoplar esses processos uma vez que criar uma vers\u00e3o est\u00e1tica requer muita digita\u00e7\u00e3o e pouco pensamento, enquanto adicionar interatividade requer muito pensamento e pouca digita\u00e7\u00e3o. N\u00f3s veremos o porqu\u00ea.</p>\n<p>Para construir uma vers\u00e3o est\u00e1tica que renderiza seu modelo de dados, voc\u00ea quer criar componentes que reutilizem outros componentes e passem dados utilizando <em>props</em>. <em>props</em> s\u00e3o uma forma de passar dados de pai para filho. Se voc\u00ea \u00e9 familiar com o conceito de <em>state</em> (estado), <strong>n\u00e3o use o state</strong> para construir essa vers\u00e3o est\u00e1tica. State \u00e9 reservado apenas para interatividade, ou seja, dados que mudam com o tempo. Uma vez que essa \u00e9 uma vers\u00e3o est\u00e1tica do app, seu uso n\u00e3o ser\u00e1 necess\u00e1rio.</p>\n<p>Voc\u00ea pode seguir uma abordagem cima-para-baixo ou baixo-para-cima. Isso significa que voc\u00ea pode come\u00e7ar criando os componentes no topo da hierarquia (i.e. come\u00e7ar com <code class=\"language-javascript\">FilterableProductTable</code>) ou os da base (<code class=\"language-javascript\">ProductRow</code>). Em exemplos simples, cima-para-baixo \u00e9 normalmente mais f\u00e1cil, enquanto que para projetos maiores o melhor \u00e9 usar uma estrat\u00e9gia baixo-para-cima e escrever testes \u00e0 medida que voc\u00ea for avan\u00e7ando.</p>\n<p>No final dessa etapa, voc\u00ea ter\u00e1 uma biblioteca de componentes reutiliz\u00e1veis que renderizam seu modelo de dados. Seus componentes ter\u00e3o apenas o m\u00e9todo <code class=\"language-javascript\">render()</code> uma vez que \u00e9 apenas uma vers\u00e3o est\u00e1tica do seu app. O componente no topo da hierarquia (<code class=\"language-javascript\">FilterableProductTable</code>) receber\u00e1 o modelo de dados como uma prop. Se voc\u00ea fizer alguma altera\u00e7\u00e3o no seu modelo de dados e chamar <code class=\"language-javascript\">ReactDOM.render()</code> novamente, a UI ser\u00e1 atualizada. \u00c9 f\u00e1cil entender como sua UI \u00e9 atualizada e onde realizar as altera\u00e7\u00f5es. O <strong>fluxo de dados unidirecional</strong> (<em>one-way data flow</em>) do React (tamb\u00e9m chamado de <strong>liga\u00e7\u00e3o unidirecional</strong> <em>ou one-way binding</em>) mant\u00e9m tudo r\u00e1pido e modular.</p>\n<p>Recorra \u00e0 <a href=\"/react/getting-started\">documenta\u00e7\u00e3o do React</a> caso voc\u00ea precise de ajuda para executar esse passo.</p>\n<h3 id=\"a-brief-interlude-props-vs-state\"><a class=\"anchor\" href=\"/react/thinking-in-react#a-brief-interlude-props-vs-state\"></a>Um Breve Interl\u00fadio: Props vs State </h3>\n<p>Existem dois tipos de \u201cmodelo\u201d de dados em React: props e state. \u00c9 de suma import\u00e2ncia entender a distin\u00e7\u00e3o entre os dois; d\u00ea uma olhada na <a href=\"/react/interactivity-and-dynamic-uis\">documenta\u00e7\u00e3o oficial do React</a> caso voc\u00ea ainda n\u00e3o esteja certo da diferen\u00e7a. Tamb\u00e9m veja <a href=\"/react/faq-state#what-is-the-difference-between-state-and-props\">FAQ: Qual a diferen\u00e7a entre state e props?</a></p>\n<h2 id=\"step-3-identify-the-minimal-but-complete-representation-of-ui-state\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-3-identify-the-minimal-but-complete-representation-of-ui-state\"></a>Passo 3: Identifique a Representa\u00e7\u00e3o M\u00ednima (mas completa) do State da UI</h2>\n<p>Para tornar sua UI interativa, voc\u00ea precisa poder desencadear mudan\u00e7as no seu modelo de dados. React consegue isso com <strong>state</strong>.</p>\n<p>Para construir seu app corretamente, voc\u00ea primeiro deve pensar no conjunto m\u00ednimo de estados mut\u00e1veis que ele precisa. A chave aqui \u00e9 <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY: <em>Don\u2019t Repeat Yourself</em></a> (<em>N\u00e3o repita a si mesmo</em>). Descubra a representa\u00e7\u00e3o m\u00ednima do state que a sua aplica\u00e7\u00e3o precisa e compute todo o resto sob demanda. Por exemplo, se voc\u00ea est\u00e1 criando uma lista de afazeres, mantenha um array com cada item a ser feito; n\u00e3o tenha uma vari\u00e1vel de state separada para a contagem. Ao contr\u00e1rio, quando voc\u00ea quiser renderizar a quantidade de afazeres, simplesmente calcule o comprimento do array.</p>\n<p>Pense em todos os peda\u00e7os de dados do nosso exemplo. N\u00f3s temos:</p>\n<ul>\n<li>A lista original de produtos</li>\n<li>O texto de busca que o usu\u00e1rio digitou</li>\n<li>O valor do checkbox</li>\n<li>A lista filtrada de produtos</li>\n</ul>\n<p>Vamos analisar um a um e descobrir quais fazem parte do state. Fa\u00e7a tr\u00eas perguntas para cada peda\u00e7o de dado:</p>\n<ol>\n<li>Ele \u00e9 recebido pelo pai via props? Se sim, provavelmente n\u00e3o \u00e9 state.</li>\n<li>Ele se mant\u00e9m inalterado ao longo do tempo? Se sim, provavelmente n\u00e3o \u00e9 state.</li>\n<li>Ele pode ser computado atrav\u00e9s de qualquer outro state ou props do seu componente? Se sim, n\u00e3o \u00e9 state.</li>\n</ol>\n<p>A lista original de produtos \u00e9 passada via props, ent\u00e3o n\u00e3o \u00e9 state. O texto de busca e o checkbox parecem ser state uma vez que eles mudam com o tempo e n\u00e3o podem ser computados por qualquer outro valor. Finalmente, a lista filtrada de produtos n\u00e3o \u00e9 state pois pode ser computada ao se combinar a lista original com o texto de busca e o valor do checkbox.</p>\n<p>Ent\u00e3o, finalmente, nosso state \u00e9:</p>\n<ul>\n<li>O texto de busca que o usu\u00e1rio digitou</li>\n<li>O valor do checkbox</li>\n</ul>\n<h2 id=\"step-4-identify-where-your-state-should-live\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-4-identify-where-your-state-should-live\"></a>Passo 4: Identifique Onde o State Deve Ficar</h2>\n<p class=\"codepen\">Veja o Pen <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/qPrNQZ\">Pensando em React: Passo 4</a> no <a class=\"external-link\" href=\"https://codepen.io\">CodePen</a>.</p>\n<p>OK, ent\u00e3o n\u00f3s j\u00e1 identificamos qual \u00e9 o menor conjunto para o state da aplica\u00e7\u00e3o. Em seguida, n\u00f3s precisamos identificar quais componentes s\u00e3o mut\u00e1veis, ou <em>possuem</em> esse state.</p>\n<p>Lembre-se: React \u00e9 todo sobre fluxo de dados unidirecional atrav\u00e9s da hierarquia de componentes. Pode n\u00e3o ser imediatamente claro qual componente deve possuir o estado. <strong>Isso \u00e9 muitas vezes a parte mais desafiadora para os iniciantes entenderem,</strong> ent\u00e3o siga esses passos para descobrir:</p>\n<p>Para cada peda\u00e7o do estado da sua aplica\u00e7\u00e3o:</p>\n<ul>\n<li>Identifique todo componente que renderiza alguma coisa baseado no state.</li>\n<li>Ache um componente-pai comum (um \u00fanico componente acima dos outros na hierarquia que necessita do state).</li>\n<li>O componente-pai comum ou algum outro acima na hierarquia deve possuir o state.</li>\n<li>Caso voc\u00ea n\u00e3o consiga achar algum componente em que a posse do state fa\u00e7a sentido, crie um novo componente com o \u00fanico prop\u00f3sito de manter o state e o adicione em algum lugar da hierarquia acima do componente-pai.</li>\n</ul>\n<p>Vamos testar essa estrat\u00e9gia no nosso exemplo:</p>\n<ul>\n<li><code class=\"language-javascript\">ProductTable</code> precisa filtrar a lista de produtos baseado no state e <code class=\"language-javascript\">SearchBar</code> precisa exibir o texto de busca e o estado do checkbox.</li>\n<li>O componente-pai comum \u00e9 <code class=\"language-javascript\">FilterableProductTable</code>.</li>\n<li>Conceitualmente faz mais sentido que o texto de busca e o valor do checkbox fiquem em <code class=\"language-javascript\">FilterableProductTable</code>.</li>\n</ul>\n<p>Legal, ent\u00e3o n\u00f3s decidimos que nosso state fica em <code class=\"language-javascript\">FilterableProductTable</code>. Primeiro, adicione a propriedade <code class=\"language-javascript\">this.state = {filterText: '', inStockOnly: false}</code> ao <code class=\"language-javascript\">constructor</code> de <code class=\"language-javascript\">FilterableProductTable</code> de modo a refletir o estado inicial da aplica\u00e7\u00e3o. Ent\u00e3o, passe <code class=\"language-javascript\">filterText</code> e <code class=\"language-javascript\">inStockOnly</code> para <code class=\"language-javascript\">ProductTable</code> e <code class=\"language-javascript\">SearchBar</code> como uma prop. Finalmente, use essas props para filtrar as linhas em <code class=\"language-javascript\">ProductTable</code> e preencha os valores dos campos do formul\u00e1rio em <code class=\"language-javascript\">SearchBar</code>.</p>\n<p>Voc\u00ea come\u00e7ar\u00e1 a ver como a aplica\u00e7\u00e3o vai se comportar: assinale o valor de <code class=\"language-javascript\">filterText</code> para <code class=\"language-javascript\">\"ball\"</code> e atualize seu app. Voc\u00ea ver\u00e1 que a tabela \u00e9 atualizada corretamente.</p>\n<h2 id=\"step-5-add-inverse-data-flow\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-5-add-inverse-data-flow\"></a>Passo 5: Adicione o Fluxo de Dados Inverso </h2>\n<p class=\"codepen\">Veja o Pen <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/LzWZvb\">Pensando em React: Passo 5</a> no <a class=\"external-link\" href=\"https://codepen.io\">CodePen</a>.</p>\n<p>At\u00e9 aqui n\u00f3s constru\u00edmos um app que comporta-se como uma fun\u00e7\u00e3o das props e state que fluem atrav\u00e9s da hierarquia. Agora \u00e9 hora de suportar o fluxo no outro sentido: os elementos de formul\u00e1rio na base da hierarquia precisam atualizar o state em <code class=\"language-javascript\">FilterableProductTable</code>.</p>\n<p>React torna este fluxo de dados expl\u00edcito para ajud\u00e1-lo a entender como o seu programa funciona, mas isso requer um pouco mais de digita\u00e7\u00e3o que o a liga\u00e7\u00e3o bi-direcional de dados (two-way data binding) tradicional.</p>\n<p>Se voc\u00ea tentar digitar ou marcar a caixa na vers\u00e3o anterior do exemplo (etapa 4), perceber\u00e1 que o React ignorar\u00e1 o seu input. Isso \u00e9 intencional, uma vez que n\u00f3s estabelecemos que a prop <code class=\"language-javascript\">value</code> do input deve ser sempre igual ao <code class=\"language-javascript\">state</code> passado por <code class=\"language-javascript\">FilterableProductTable</code>.</p>\n<p>Vamos pensar um pouco sobre o que n\u00f3s queremos que aconte\u00e7a. Queremos ter certeza que sempre que o usu\u00e1rio modificar o formul\u00e1rio o state \u00e9 atualizado para refletir o input. Uma vez que componentes devem atualizar apenas o seu pr\u00f3prio state, <code class=\"language-javascript\">FilterableProductTable</code> passar\u00e1 para <code class=\"language-javascript\">SearchBar</code> callbacks que dever\u00e3o ser acionados sempre que o state precisar ser alterado. N\u00f3s podemos usar o evento <code class=\"language-javascript\">onChange</code> dos inputs para sermos notificados sobre isso. Os callbacks passados por <code class=\"language-javascript\">FilterableProductTable</code> ir\u00e3o chamar <code class=\"language-javascript\">setState()</code> e o app ser\u00e1 atualizado.</p>\n<h2 id=\"and-thats-it\"><a class=\"anchor\" href=\"/react/thinking-in-react#and-thats-it\"></a>E \u00c9 Isso </h2>\n<p>Com sorte, esse artigo lhe dar\u00e1 uma ideia de como pensar ao se construir aplica\u00e7\u00f5es com React. Embora possa ter um pouco mais de digita\u00e7\u00e3o do que voc\u00ea esteja acostumado, lembre-se que c\u00f3digos s\u00e3o lidos muito mais que escritos, e \u00e9 menos dif\u00edcil de ler um c\u00f3digo expl\u00edcito e modular. \u00c0 medida que voc\u00ea come\u00e7ar a criar grandes bibliotecas de componentes, voc\u00ea apreciar\u00e1 essa clareza e modularidade, e com o reuso de c\u00f3digo, suas linhas de c\u00f3digo come\u00e7ar\u00e3o a diminuir. :)</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/thinking-in-react.md\">Edit this page</a></p></div></article>", "path": "/react/thinking-in-react", "nav": ["/react/composition-vs-inheritance", "/react/accessibility"]}]}, {"key": "Guias Avan\u00e7ados", "values": [{"key": "Acessibilidade", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><h2 id=\"why-accessibility\"><a class=\"anchor\" href=\"/react/accessibility#why-accessibility\"></a>Por que Acessibilidade? </h2>\n<p>A acessibilidade da Web (tamb\u00e9m chamada de <a class=\"external-link\" href=\"https://en.wiktionary.org/wiki/a11y\">** a11y **</a>) \u00e9 o design e a cria\u00e7\u00e3o de sites que podem ser usados \u200b\u200bpor todos. O suporte \u00e0 acessibilidade \u00e9 necess\u00e1rio para permitir que tecnologias assistivas interpretem as p\u00e1ginas da web.</p>\n<p>React suporta totalmente a constru\u00e7\u00e3o de sites acess\u00edveis, muitas vezes usando t\u00e9cnicas HTML padr\u00e3o.</p>\n<h2 id=\"standards-and-guidelines\"><a class=\"anchor\" href=\"/react/accessibility#standards-and-guidelines\"></a>Padr\u00f5es e Diretrizes </h2>\n<h3 id=\"wcag\"><a class=\"anchor\" href=\"/react/accessibility#wcag\"></a>WCAG  </h3>\n<p>O <a class=\"external-link\" href=\"https://www.w3.org/WAI/intro/wcag\">Web Content Accessibility Guidelines</a> fornece diretrizes para a cria\u00e7\u00e3o de sites acess\u00edveis.</p>\n<p>As seguintes checklists das WCAG fornecem uma vis\u00e3o geral:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.wuhcag.com/wcag-checklist/\">WCAG checklist from Wuhcag</a></li>\n<li><a class=\"external-link\" href=\"https://webaim.org/standards/wcag/checklist\">WCAG checklist from WebAIM</a></li>\n<li><a class=\"external-link\" href=\"https://a11yproject.com/checklist.html\">Checklist from The A11Y Project</a></li>\n</ul>\n<h3 id=\"wai-aria\"><a class=\"anchor\" href=\"/react/accessibility#wai-aria\"></a>WAI-ARIA </h3>\n<p>O documento <a class=\"external-link\" href=\"https://www.w3.org/WAI/intro/aria\">Web Accessibility Initiative - Accessible Rich Internet Applications</a> cont\u00e9m t\u00e9cnicas para a cria\u00e7\u00e3o de widgets JavaScript totalmente acess\u00edveis.</p>\n<p>Note que todos os atributos HTML <code class=\"language-javascript\">aria-*</code> s\u00e3o totalmente suportados no JSX. Enquanto a maioria das propriedades e atributos do DOM no React s\u00e3o camelCase, esses atributos devem ser hyphen-case \u200b\u200b(tamb\u00e9m conhecidos como kebab-case, lisp-case, etc), pois est\u00e3o em HTML:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">aria-label</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>labelText<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">aria-required</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></span>  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onchangeHandler<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<h2 id=\"semantic-html\"><a class=\"anchor\" href=\"/react/accessibility#semantic-html\"></a>Linguagem HTML </h2>\n<p>Linguagem \u00e9 a base da acessibilidade em um aplicativo da web. Usando os elementos HTML corretamente para refor\u00e7ar o significado da informa\u00e7\u00e3o\nem nossos sites, muitas vezes a acessibilidade pode vir gratuitamente.</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">MDN HTML elements reference</a></li>\n</ul>\n<p>\u00c0s vezes, quebramos a sem\u00e2ntica de HTML quando adicionamos elementos <code class=\"language-javascript\">&lt;div&gt;</code> ao nosso JSX somente para fazer nosso c\u00f3digo React funcionar, especialmente ao trabalhar com listas (<code class=\"language-javascript\">&lt;ol&gt;</code>, <code class=\"language-javascript\">&lt;ul&gt;</code> e <code class=\"language-javascript\">&lt;dl&gt;</code>) e HTML <code class=\"language-javascript\">&lt;table&gt;</code>. Nesses casos, devemos usar <a href=\"/react/fragments\">React Fragments</a> para agrupar v\u00e1rios elementos.</p>\n<p>Por exemplo,</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Fragment <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ListaDeItems</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>descricao<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Glossario</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListaDeItems</span></span> <span class=\"token attr-name\">item</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voc\u00ea pode mapear uma cole\u00e7\u00e3o de items para uma matriz de fragmentos como faria com qualquer outro tipo de elemento:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Glossario</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// Fragments tamb\u00e9m aceitam `key`(chave) prop quando est\u00e3o mapeando cole\u00e7\u00f5es</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>descricao<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">&gt;</span></span></span>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando voc\u00ea n\u00e3o precisa de nenhum <code class=\"language-javascript\">prop</code> na tag Fragment voc\u00ea pode usar a <a href=\"/react/fragments#short-syntax\">syntax curta</a>, se a sua configura\u00e7\u00e3o suportar:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListaDeItems</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>descricao<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para mais informa\u00e7\u00f5es, veja a <a href=\"/react/fragments\">documenta\u00e7\u00e3o para Fragments</a>.</p>\n<h2 id=\"accessible-forms\"><a class=\"anchor\" href=\"/react/accessibility#accessible-forms\"></a>Formul\u00e1rios Acess\u00edveis </h2>\n<h3 id=\"labeling\"><a class=\"anchor\" href=\"/react/accessibility#labeling\"></a>R\u00f3tulos </h3>\n<p>Todos os elements de um formul\u00e1rio HTML, como <code class=\"language-javascript\">&lt;input&gt;</code> e <code class=\"language-javascript\">&lt;textarea&gt;</code>, precisam ser rotulados. Precisamos fornecer r\u00f3tulos descritivos pois s\u00e3o expostos aos leitores de tela.</p>\n<p>Os seguintes artigos nos mostram como fazer isso:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/WAI/tutorials/forms/labels/\">The W3C shows us how to label elements</a></li>\n<li><a class=\"external-link\" href=\"https://webaim.org/techniques/forms/controls\">WebAIM shows us how to label elements</a></li>\n<li><a class=\"external-link\" href=\"https://www.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/\">The Paciello Group explains accessible names</a></li>\n</ul>\n<p>Embora essas pr\u00e1ticas HTML padr\u00e3o possam ser usadas diretamente em React, observe que o atributo <code class=\"language-javascript\">for</code> est\u00e1 escrito como <code class=\"language-javascript\">htmlFor</code> em JSX:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nomeDaEntrada<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Nome:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nomeDaEntrada<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nome<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<h3 id=\"notifying-the-user-of-errors\"><a class=\"anchor\" href=\"/react/accessibility#notifying-the-user-of-errors\"></a>Notificando erros ao usu\u00e1rio </h3>\n<p>Situa\u00e7\u00f5es de erro precisam ser entendidas por todos os usu\u00e1rios. Os artigos a seguir nos mostram como expor os erros aos leitores de tela:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/WAI/tutorials/forms/notifications/\">The W3C demonstrates user notifications</a></li>\n<li><a class=\"external-link\" href=\"https://webaim.org/techniques/formvalidation/\">WebAIM looks at form validation</a></li>\n</ul>\n<h2 id=\"focus-control\"><a class=\"anchor\" href=\"/react/accessibility#focus-control\"></a>Controle de Foco </h2>\n<p>Certifique-se de que seu aplicativo da web seja totalmente naveg\u00e1vel apenas com o teclado:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/techniques/keyboard/\">WebAIM talks about keyboard accessibility</a></li>\n</ul>\n<h3 id=\"keyboard-focus-and-focus-outline\"><a class=\"anchor\" href=\"/react/accessibility#keyboard-focus-and-focus-outline\"></a>Foco no teclado e foco de contorno  </h3>\n<p>Foco no teclado se refere ao elemento no DOM que foi selecionado e aceita a\u00e7\u00f5es do teclado. Podemos ver o contorno do foco na imagem a seguir: </p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/dec0e6bcc1f882baf76ebc860d4f04e5/4fcfe/keyboard-focus.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/dec0e6bcc1f882baf76ebc860d4f04e5/4fcfe/keyboard-focus.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Somente use CSS que elimine este contorno, por exemplo, definindo <code class=\"language-javascript\">outline: 0</code>, se voc\u00ea for substitu\u00ed-lo por outra implementa\u00e7\u00e3o de esquema de foco.</p>\n<h3 id=\"mechanisms-to-skip-to-desired-content\"><a class=\"anchor\" href=\"/react/accessibility#mechanisms-to-skip-to-desired-content\"></a>Mecanismos para pular conte\u00fado </h3>\n<p>S\u00e3o mecanismos para permitir que os usu\u00e1rios ignorem as se\u00e7\u00f5es de navega\u00e7\u00e3o anteriores em seu aplicativo, pois isso ajuda e acelera a navega\u00e7\u00e3o pelo teclado.</p>\n<p>Skiplinks ou Links para Pular Navega\u00e7\u00e3o s\u00e3o links de navega\u00e7\u00e3o ocultos que s\u00f3 se tornam vis\u00edveis quando os usu\u00e1rios interagem com a p\u00e1gina usando o teclado. Eles s\u00e3o muito f\u00e1ceis de implementar com alguns estilos e \u00e2ncoras de p\u00e1ginas:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/techniques/skipnav/\">WebAIM - Skip Navigation Links</a></li>\n</ul>\n<p>Tamb\u00e9m use elementos e pontos de refer\u00eancia, como <code class=\"language-javascript\">&lt;main&gt;</code> e <code class=\"language-javascript\">&lt;aside&gt;</code>, para demarcar regi\u00f5es de p\u00e1ginas como tecnologia assistiva, permitindo que o usu\u00e1rio navegue rapidamente para estas se\u00e7\u00f5es.</p>\n<p>Leia mais sobre o uso desses elementos para melhorar a acessibilidade aqui:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.scottohara.me/blog/2018/03/03/landmarks.html\">Accessible Landmarks</a></li>\n</ul>\n<h3 id=\"programmatically-managing-focus\"><a class=\"anchor\" href=\"/react/accessibility#programmatically-managing-focus\"></a>Programaticamente gerenciando o foco </h3>\n<p>Aplica\u00e7\u00f5es em React modificam continuamente o HTML DOM durante o tempo de execu\u00e7\u00e3o, \u00e0s vezes levando \u00e0 perda de foco do teclado ou a um elemento inesperado. Para consertar isso, precisamos programar o foco do teclado na dire\u00e7\u00e3o certa, de maneira program\u00e1tica. Por exemplo, redefinindo o foco do teclado para um bot\u00e3o que abriu uma janela modal depois que essa janela restrita \u00e9 fechada.</p>\n<p>Voc\u00ea pode encontrar mais informa\u00e7\u00f5es de como fazer isto no MDN <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets\">navega\u00e7\u00e3o por teclado de JavaScript widgets</a>.</p>\n<p>Para definir o foco no React, podemos usar <a href=\"/react/refs-and-the-dom\">Refs para elementos no DOM</a>.</p>\n<p>Dessa maneira, primeiro criamos uma refer\u00eancia a um elemento no JSX de uma classe de componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EntradaDeTexto</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Cria um ref para guardar o inputDeTexto no DOM </span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputDeTexto <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Use a `ref` callback para guardar a referencia do texto no input dentro do DOM </span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// elemento em um campo (por exemplo, this.inputDeTexto).</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputDeTexto<span class=\"token punctuation\">}</span></span></span>      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ent\u00e3o podemos nos concentrar em outro lugar em nosso componente quando necess\u00e1rio:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Focalize explicitamente a entrada de texto usando a API DOM </span>\n  <span class=\"token comment\">// Nota: estamos acessando o DOM \"atual\" para obter o elemento</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>\u00c0s vezes, um componente pai precisa definir o foco para um elemento em um componente filho. N\u00f3s podemos fazer isso <a href=\"/react/refs-and-the-dom#exposing-dom-refs-to-parent-components\">expondo as refer\u00eancias DOM aos componentes pais</a>, atrav\u00e9s de um <code class=\"language-javascript\">prop</code> especial no componente filho que encaminha a refer\u00eancia do pai o elemento filho.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">EntradaDeTexto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentePai</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EntradaDeTexto</span></span> <span class=\"token attr-name\">inputRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Agora voc\u00ea pode definir o foco quando necess\u00e1rio.</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ao usar um <a href=\"/react/higher-order-components\">HOC</a>(Componente de alta ordem) para estender componentes \u00e9 recomendado <a href=\"/react/forwarding-refs\">encaminhar a ref</a> para o componente de menor order usando a fun\u00e7\u00e3o  de React <code class=\"language-javascript\">forwardRef</code>. Se um terceiro HOC n\u00e3o passar a refer\u00eancia, o padr\u00e3o acima ainda pode ser usado como fallback.</p>\n<p>Um \u00f3timo exemplo de gerenciamento de foco \u00e9 o <a class=\"external-link\" href=\"https://github.com/davidtheclark/react-aria-modal\">react-aria-modal</a>. Este \u00e9 um exemplo relativamente raro de uma janela modal totalmente acess\u00edvel. N\u00e3o s\u00f3 define o foco inicial o bot\u00e3o cancelar (impedindo o usu\u00e1rio do teclado de ativar acidentalmente a a\u00e7\u00e3o de sucesso) e interceptar o foco do teclado dentro do modal, ele tamb\u00e9m redefine o foco de volta para o elemento que inicialmente acionou o modal.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Embora esse seja um recurso de acessibilidade muito importante, tamb\u00e9m \u00e9 uma t\u00e9cnica que deve ser usada de maneira criteriosa.\nUse-o para reparar o comportamento do foco do teclado quando ele \u00e9 alterado, e n\u00e3o para tentar antecipar como os usu\u00e1rios desejam usar os aplicativos.</p>\n</div>\n<h2 id=\"mouse-and-pointer-events\"><a class=\"anchor\" href=\"/react/accessibility#mouse-and-pointer-events\"></a>Movimentos do mouse e ponteiro (cursor) </h2>\n<p>Certifique-se de que todas as funcionalidades expostas atrav\u00e9s do movimento de mouse ou ponteiro tamb\u00e9m possam ser acessadas usando apenas o teclado. Se depender apenas do movimento do mouse, haver\u00e1 muitos casos em que usu\u00e1rios de teclado n\u00e3o poder\u00e3o usar seu aplicativo.</p>\n<p>Para ilustrar isso, abaixo pode-se ver um exemplo cl\u00e1ssico de quebra da acessibilidade causada por cliques. Esse \u00e9 o padr\u00e3o de clique externo, em que um usu\u00e1rio pode desativar um popover aberto clicando fora do elemento.</p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//5523b05b22210c5a2fa0bd1f01339cb3/outerclick-with-mouse.gif\">Image link</a>\n<p>Isso geralmente \u00e9 implementado ao anexar um <code class=\"language-javascript\">click</code> ao objeto de janela que fecha o popover:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClickForaExemplo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOpen<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClickOutsideHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      isOpen<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>currentState<span class=\"token punctuation\">.</span>isOpen\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onClickOutsideHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isOpen<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Selecione uma op\u00e7\u00e3o</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Op\u00e7\u00e3o 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Op\u00e7\u00e3o 2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Op\u00e7\u00e3o 3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso pode funcionar bem para usu\u00e1rios com dispositivos com ponteiro, como um mouse. Mas, oper\u00e1-lo apenas com o teclado quebra a funcionalidade ao passar para o pr\u00f3ximo elemento, j\u00e1 que o objeto <code class=\"language-javascript\">window</code> nunca recebe um evento <code class=\"language-javascript\">click</code>. Isso pode levar a uma funcionalidade escondida que impede os usu\u00e1rios de usar seu aplicativo.</p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//eca0ca825c8c5e2aa609cee72ef47e27/outerclick-with-keyboard.gif\">Image link</a>\n<p>A mesma funcionalidade pode ser obtida usando manipuladores de eventos apropriados, como <code class=\"language-javascript\">onBlur</code> e <code class=\"language-javascript\">onFocus</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExamploDeBlur</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOpen<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onBlurHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onBlurHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFocusHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onFocusHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      isOpen<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>currentState<span class=\"token punctuation\">.</span>isOpen\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Fechamos o popover no pr\u00f3ximo tick usando setTimeout.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Isso \u00e9 necess\u00e1rio porque precisamos primeiro checar se</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// outro filho do elemento recebeu foco como</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// o evento blur \u00e9 acionado antes do novo evento de foco.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onBlurHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        isOpen<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Se o elemento filho receber foco, n\u00e3o feche o popover.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onFocusHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// O React nos ajuda cancelando o blur e</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// focando nos eventos do elemento pai.</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onBlur</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onBlurHandler<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">           <span class=\"token attr-name\">onFocus</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFocusHandler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler<span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">aria-haspopup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">aria-expanded</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Selecione uma op\u00e7\u00e3o</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Op\u00e7\u00e3o 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Op\u00e7\u00e3o 2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Op\u00e7\u00e3o 3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esse c\u00f3digo exp\u00f5e a funcionalidade para usu\u00e1rios de dispositivo de mouse e teclado. Observe tamb\u00e9m os <code class=\"language-javascript\">aria-*</code> <code class=\"language-javascript\">props</code> adicionados para suportar usu\u00e1rios de leitores de tela. Por motivos de simplicidade a intera\u00e7\u00e3o com as setas nas op\u00e7\u00f5es de popover n\u00e3o foram implementados.</p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//28ce2067489843caf05fe7ce22494542/blur-popover-close.gif\">Image link</a>\n<p>Este \u00e9 um exemplo de muitos casos em que, depender apenas dos eventos de ponteiro e o mouse, pode quebrar a funcionalidade para usu\u00e1rios de teclado. Sempre testar com o teclado real\u00e7ar\u00e1 imediatamente as \u00e1reas problem\u00e1ticas que podem ser corrigidas usando manipuladores de eventos com reconhecimento de teclado.</p>\n<h2 id=\"more-complex-widgets\"><a class=\"anchor\" href=\"/react/accessibility#more-complex-widgets\"></a>Widgets mais complexos </h2>\n<p>Uma experi\u00eancia do usu\u00e1rio mais complexa n\u00e3o significa ser menos acess\u00edvel. Considerando que a acessibilidade \u00e9 mais facilmente alcan\u00e7ada programando o mais pr\u00f3ximo poss\u00edvel do HTML, at\u00e9 mesmo o widget mais complexo pode ser programado de forma acess\u00edvel.</p>\n<p>Aqui, exigimos conhecimento de <a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria/#role\">ARIA Roles</a>, bem como <a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria/#states_and_properties\">ARIA States and Properties</a>.\nEstas s\u00e3o caixas de ferramentas preenchidas com atributos HTML que s\u00e3o totalmente suportados no JSX e nos permitem construir componentes em React totalmente funcionais e totalmente acess\u00edveis.</p>\n<p>Cada tipo de widget tem um padr\u00e3o de design espec\u00edfico e espera-se que funcione de certa forma por usu\u00e1rios e agentes do usu\u00e1rio:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria-practices/#aria_ex\">WAI-ARIA Authoring Practices - Design Patterns and Widgets</a></li>\n<li><a class=\"external-link\" href=\"https://heydonworks.com/article/practical-aria-examples/\">Heydon Pickering - ARIA Examples</a></li>\n<li><a class=\"external-link\" href=\"https://inclusive-components.design/\">Inclusive Components</a></li>\n</ul>\n<h2 id=\"other-points-for-consideration\"><a class=\"anchor\" href=\"/react/accessibility#other-points-for-consideration\"></a>Outros pontos a serem considera\u00e7\u00e3o </h2>\n<h3 id=\"setting-the-language\"><a class=\"anchor\" href=\"/react/accessibility#setting-the-language\"></a>Definindo o idioma </h3>\n<p>Indique o idioma dos textos de p\u00e1gina, pois o software leitor de tela usa isso para selecionar as configura\u00e7\u00f5es de voz correta:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/techniques/screenreader/#language\">WebAIM - Document Language</a></li>\n</ul>\n<h3 id=\"setting-the-document-title\"><a class=\"anchor\" href=\"/react/accessibility#setting-the-document-title\"></a>Definindo o t\u00edtulo do documento </h3>\n<p>Defina no documento <code class=\"language-javascript\">&lt;title&gt;</code> para descrever corretamente o conte\u00fado atual da p\u00e1gina, pois isso garante que o usu\u00e1rio permane\u00e7a ciente do contexto da p\u00e1gina atual:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-title.html\">WCAG - Understanding the Document Title Requirement</a></li>\n</ul>\n<p>Podemos definir o titulo usando <a class=\"external-link\" href=\"https://github.com/gaearon/react-document-title\">React Document Title Component</a>.</p>\n<h3 id=\"color-contrast\"><a class=\"anchor\" href=\"/react/accessibility#color-contrast\"></a>Contraste de Cor</h3>\n<p>Certifique-se de que todo o texto leg\u00edvel em seu site tenha contraste de cores suficiente para permanecer leg\u00edvel ao m\u00e1ximo por usu\u00e1rios com baixa vis\u00e3o:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html\">WCAG - Understanding the Color Contrast Requirement</a></li>\n<li><a class=\"external-link\" href=\"https://www.smashingmagazine.com/2014/10/color-contrast-tips-and-tools-for-accessibility/\">Everything About Color Contrast And Why You Should Rethink It</a></li>\n<li><a class=\"external-link\" href=\"https://a11yproject.com/posts/what-is-color-contrast/\">A11yProject - What is Color Contrast</a></li>\n</ul>\n<p>Pode ser entediante calcular manualmente as combina\u00e7\u00f5es de cores adequadas para todos os casos em seu site. Em vez disso, voc\u00ea pode <a class=\"external-link\" href=\"https://jxnblk.com/colorable/\">calcular uma paleta de cores inteira acess\u00edvel com Colorable</a>.</p>\n<p>As ferramentas abaixo aXe e WAVE incluem testes de contraste de cores e relatam erros de contraste.</p>\n<p>Se voc\u00ea quiser estender suas habilidades de teste de contraste, voc\u00ea pode usar estas ferramentas:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/resources/contrastchecker/\">WebAIM - Color Contrast Checker</a></li>\n<li><a class=\"external-link\" href=\"https://www.paciellogroup.com/resources/contrastanalyser/\">The Paciello Group - Color Contrast Analyzer</a></li>\n</ul>\n<h2 id=\"development-and-testing-tools\"><a class=\"anchor\" href=\"/react/accessibility#development-and-testing-tools\"></a>Ferramentas de Desenvolvimento e Teste </h2>\n<p>H\u00e1 v\u00e1rias ferramentas que podemos usar para ajudar na cria\u00e7\u00e3o de aplicativos acess\u00edveis.</p>\n<h3 id=\"the-keyboard\"><a class=\"anchor\" href=\"/react/accessibility#the-keyboard\"></a>O Teclado </h3>\n<p>H\u00e1 v\u00e1rias ferramentas que podemos usar para ajudar na cria\u00e7\u00e3o de aplicativos da Web acess\u00edveis.</p>\n<ol>\n<li>Desconectando o seu mouse.</li>\n<li>Usando <code class=\"language-javascript\">Tab</code> e <code class=\"language-javascript\">Shift+Tab</code> navegue pelo site.</li>\n<li>Usando <code class=\"language-javascript\">Enter</code> para clicar elementos.</li>\n<li>Se necess\u00e1rio, usando o teclado e as setas, interaja com alguns elementos, como menus e dropdowns.</li>\n</ol>\n<h3 id=\"development-assistance\"><a class=\"anchor\" href=\"/react/accessibility#development-assistance\"></a>Assist\u00eancia ao desenvolvimento </h3>\n<p>Podemos verificar alguns recursos de acessibilidade diretamente em nosso c\u00f3digo JSX. Frequentemente, as verifica\u00e7\u00f5es do intellisense j\u00e1 s\u00e3o fornecidas em IDEs JSX para as fun\u00e7\u00f5es, estados e propriedades do ARIA. N\u00f3s tamb\u00e9m temos acesso \u00e0 seguintes ferramentas:</p>\n<h4 id=\"eslint-plugin-jsx-a11y\"><a class=\"anchor\" href=\"/react/accessibility#eslint-plugin-jsx-a11y\"></a>eslint-plugin-jsx-a11y </h4>\n<p>O <a class=\"external-link\" href=\"https://github.com/evcohen/eslint-plugin-jsx-a11y\">eslint-plugin-jsx-a11y</a> plugin para ESLint fornece feedback sobre o linting da AST em rela\u00e7\u00e3o a problemas de acessibilidade no seu JSX. Muitos dos IDE permitem integrar essas descobertas diretamente na an\u00e1lise de c\u00f3digo e nas janelas de c\u00f3digo-fonte.</p>\n<p><a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a> tem este plugin com um subconjunto de regras ativadas. Se voc\u00ea quiser ativar ainda mais regras de acessibilidade, voc\u00ea pode criar um arquivo <code class=\"language-javascript\">.eslintrc</code> na raiz do seu projeto com este conte\u00fado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsxon\"><code class=\"language-javascript\">{\n  \"extends\": [\"react-app\", \"plugin:jsx-a11y/recommended\"],\n  \"plugins\": [\"jsx-a11y\"]\n}</code></pre></div>\n<h3 id=\"testing-accessibility-in-the-browser\"><a class=\"anchor\" href=\"/react/accessibility#testing-accessibility-in-the-browser\"></a>Testando acessibilidade no navegador </h3>\n<p>Existem v\u00e1rias ferramentas que podem executar auditorias de acessibilidade em p\u00e1ginas da Web em seu navegador. Por favor, use-as em combina\u00e7\u00e3o com outras verifica\u00e7\u00f5es de acessibilidade mencionadas aqui, pois elas podem somente testar a acessibilidade t\u00e9cnica do seu HTML.</p>\n<h4 id=\"axe-axe-core-and-react-axe\"><a class=\"anchor\" href=\"/react/accessibility#axe-axe-core-and-react-axe\"></a>aXe, aXe-core and react-axe </h4>\n<p>Deque Systems oferece <a class=\"external-link\" href=\"https://github.com/dequelabs/axe-core\">aXe-core</a> para testes de acessibilidade automatizados e de ponta a ponta de seus aplicativos. Este m\u00f3dulo inclui integra\u00e7\u00f5es para o Selenium.</p>\n<p><a class=\"external-link\" href=\"https://www.deque.com/products/axe/\">O mecanismo de acessibilidade aXe</a> \u00e9 uma extens\u00e3o de navegador de inspetor de acessibilidade constru\u00edda com <code class=\"language-javascript\">aXe-core</code>.</p>\n<p>Voc\u00ea tamb\u00e9m pode usar o <a class=\"external-link\" href=\"https://github.com/dequelabs/axe-core-npm/tree/develop/packages/react\">@axe-core/react</a>, um m\u00f3dulo para logar essas descobertas de acessibilidade diretamente no console durante o desenvolvimento e avalia\u00e7\u00e3o.</p>\n<h4 id=\"webaim-wave\"><a class=\"anchor\" href=\"/react/accessibility#webaim-wave\"></a>WebAIM WAVE </h4>\n<p>O <a class=\"external-link\" href=\"https://wave.webaim.org/extension/\">Web Accessibility Evaluation Tool</a> \u00e9 outra extens\u00e3o do navegador de acessibilidade.</p>\n<h4 id=\"accessibility-inspectors-and-the-accessibility-tree\"><a class=\"anchor\" href=\"/react/accessibility#accessibility-inspectors-and-the-accessibility-tree\"></a>Inspectores de Acessibilidade e a \u00c1rvore de Acessibilidade </h4>\n<p><a class=\"external-link\" href=\"https://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/\">The Accessibility Tree</a> \u00e9 um subconjunto da \u00e1rvore DOM que cont\u00e9m objetos acess\u00edveis para cada elemento DOM que deve ser exposto para tecnologia assistiva, como leitores de tela.</p>\n<p>Em alguns navegadores, podemos visualizar facilmente as informa\u00e7\u00f5es de acessibilidade de cada elemento na \u00e1rvore de acessibilidade:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector\">Using the Accessibility Inspector in Firefox</a></li>\n<li><a class=\"external-link\" href=\"https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#pane\">Using the Accessibility Inspector in Chrome</a></li>\n<li><a class=\"external-link\" href=\"https://developer.apple.com/library/content/documentation/Accessibility/Conceptual/AccessibilityMacOSX/OSXAXTestingApps.html\">Using the Accessibility Inspector in OS X Safari</a></li>\n</ul>\n<h3 id=\"screen-readers\"><a class=\"anchor\" href=\"/react/accessibility#screen-readers\"></a>Leitores de tela </h3>\n<p>Testar com um leitor de tela deve fazer parte de seus testes de acessibilidade.</p>\n<p>Observe que as combina\u00e7\u00f5es de navegador / leitor de tela s\u00e3o importantes. \u00c9 recomend\u00e1vel que voc\u00ea teste seu aplicativo no navegador mais adequado ao seu leitor de tela preferido.</p>\n<h3 id=\"commonly-used-screen-readers\"><a class=\"anchor\" href=\"/react/accessibility#commonly-used-screen-readers\"></a>Leitores de tela mais comumente usados </h3>\n<h4 id=\"nvda-in-firefox\"><a class=\"anchor\" href=\"/react/accessibility#nvda-in-firefox\"></a>NVDA no Firefox </h4>\n<p><a class=\"external-link\" href=\"https://www.nvaccess.org/\">NonVisual Desktop Access</a> ou NVDA \u00e9 um leitor de tela do Windows de c\u00f3digo aberto que \u00e9 amplamente utilizado.</p>\n<p>Consulte os seguintes guias sobre como usar melhor o NVDA:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/articles/nvda/\">WebAIM - Using NVDA to Evaluate Web Accessibility</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/nvda-keyboard-shortcuts\">Deque - NVDA Keyboard Shortcuts</a></li>\n</ul>\n<h4 id=\"voiceover-in-safari\"><a class=\"anchor\" href=\"/react/accessibility#voiceover-in-safari\"></a>VoiceOver no Safari </h4>\n<p>O VoiceOver \u00e9 um leitor de tela integrado em dispositivos Apple.</p>\n<p>Consulte os seguintes guias sobre como ativar e usar o VoiceOver:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/articles/voiceover/\">WebAIM - Using VoiceOver to Evaluate Web Accessibility</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/voiceover-keyboard-shortcuts\">Deque - VoiceOver for OS X Keyboard Shortcuts</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/voiceover-ios-shortcuts\">Deque - VoiceOver for iOS Shortcuts</a></li>\n</ul>\n<h4 id=\"jaws-in-internet-explorer\"><a class=\"anchor\" href=\"/react/accessibility#jaws-in-internet-explorer\"></a>JAWS no Internet Explorer </h4>\n<p><a class=\"external-link\" href=\"https://www.freedomscientific.com/Products/software/JAWS/\">Job Access With Speech</a> ou JAWS, \u00e9 um leitor de tela muito popular, utilizado no sistema Windows.</p>\n<p>Consulte os seguintes guias sobre como ativar e usar o JAWS:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://webaim.org/articles/jaws/\">WebAIM - Using JAWS to Evaluate Web Accessibility</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/jaws-keyboard-shortcuts\">Deque - JAWS Keyboard Shortcuts</a></li>\n</ul>\n<h3 id=\"other-screen-readers\"><a class=\"anchor\" href=\"/react/accessibility#other-screen-readers\"></a>Outros leitores de tela </h3>\n<h4 id=\"chromevox-in-google-chrome\"><a class=\"anchor\" href=\"/react/accessibility#chromevox-in-google-chrome\"></a>ChromeVox no Google Chrome </h4>\n<p><a class=\"external-link\" href=\"https://www.chromevox.com/\">ChromeVox</a> \u00e9 um leitor de tela integrado nos Chromebooks e est\u00e1 dispon\u00edvel <a class=\"external-link\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en\">como extens\u00e3o</a> para o Google Chrome.</p>\n<p>Consulte os guias a seguir sobre como usar melhor o ChromeVox:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://support.google.com/chromebook/answer/7031755?hl=en\">Google Chromebook Help - Use the Built-in Screen Reader</a></li>\n<li><a class=\"external-link\" href=\"https://www.chromevox.com/keyboard_shortcuts.html\">ChromeVox Classic Keyboard Shortcuts Reference</a></li>\n</ul></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/accessibility.md\">Edit this page</a></p></div></article>", "path": "/react/accessibility", "nav": ["/react/thinking-in-react", "/react/code-splitting"]}, {"key": "Dividindo o C\u00f3digo (Code-Splitting)", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><h2 id=\"bundling\"><a class=\"anchor\" href=\"/react/code-splitting#bundling\"></a>Empacotamento (Bundling) </h2>\n<p>A maioria das aplica\u00e7\u00f5es React ser\u00e3o \u201cempacotadas\u201d usando ferramentas como <a class=\"external-link\" href=\"https://webpack.js.org/\">Webpack</a>, <a class=\"external-link\" href=\"https://rollupjs.org/\">Rollup</a> ou <a class=\"external-link\" href=\"http://browserify.org/\">Browserify</a>. Empacotamento (Bundling) \u00e9 o processo onde v\u00e1rios arquivos importados s\u00e3o unidos em um \u00fanico arquivo: um \u201cpacote\u201d (bundle). Este pacote pode ser inclu\u00eddo em uma p\u00e1gina web para carregar uma aplica\u00e7\u00e3o toda de uma vez.</p>\n<h4 id=\"example\"><a class=\"anchor\" href=\"/react/code-splitting#example\"></a>Exemplo </h4>\n<p><strong>App:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// app.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./math.js'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// math.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Bundle:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Seu pacote provavelmente ser\u00e1 bem diferente que o mostrado acima.</p>\n</div>\n<p>Se voc\u00ea estiver usando o <a class=\"external-link\" href=\"https://create-react-app.dev/\">Create React App</a>, <a class=\"external-link\" href=\"https://nextjs.org/\">Next.js</a>, <a class=\"external-link\" href=\"https://www.gatsbyjs.org/\">Gatsby</a> ou alguma outra ferramenta semelhante, voc\u00ea ter\u00e1 uma configura\u00e7\u00e3o do Webpack pronta para empacotar a sua aplica\u00e7\u00e3o.</p>\n<p>Se n\u00e3o estiver usando, precisar\u00e1 configurar o empacotamento manualmente. Por exemplo, veja os guias de <a class=\"external-link\" href=\"https://webpack.js.org/guides/installation/\">Instala\u00e7\u00e3o</a> e <a class=\"external-link\" href=\"https://webpack.js.org/guides/getting-started/\">Introdu\u00e7\u00e3o</a> na documenta\u00e7\u00e3o do Webpack.</p>\n<h2 id=\"code-splitting\"><a class=\"anchor\" href=\"/react/code-splitting#code-splitting\"></a>Dividindo o C\u00f3digo (Code Splitting) </h2>\n<p>Empacotamento \u00e9 excelente, mas \u00e0 medida que sua aplica\u00e7\u00e3o cresce, seu pacote crescer\u00e1 tamb\u00e9m. Especialmente se voc\u00ea estiver usando grandes bibliotecas de terceiros. Voc\u00ea precisa ficar de olho em todo c\u00f3digo que est\u00e1 incluindo no seu pacote, pois assim voc\u00ea evitar\u00e1 que o mesmo fique t\u00e3o grande que fa\u00e7a sua aplica\u00e7\u00e3o levar um tempo maior para carregar.</p>\n<p>Para evitar acabar com um pacote grande, \u00e9 bom se antecipar ao problema e come\u00e7ar a \u201cdividir\u201d seu pacote. A divis\u00e3o de c\u00f3digo \u00e9 um recurso suportado por empacotadores como <a class=\"external-link\" href=\"https://webpack.js.org/guides/code-splitting/\">Webpack</a>, <a class=\"external-link\" href=\"https://rollupjs.org/guide/en/#code-splitting\">Rollup</a> e Browserify (atrav\u00e9s de <a class=\"external-link\" href=\"https://github.com/browserify/factor-bundle\">coeficiente de empacotamento (factor-bundle)</a>) no qual pode-se criar m\u00faltiplos pacotes que podem ser carregados dinamicamente em tempo de execu\u00e7\u00e3o.</p>\n<p>Dividir o c\u00f3digo de sua aplica\u00e7\u00e3o pode te ajudar a carregar somente o necess\u00e1rio ao usu\u00e1rio, o que pode melhorar dramaticamente o desempenho de sua aplica\u00e7\u00e3o. Embora voc\u00ea n\u00e3o tenha reduzido a quantidade total de c\u00f3digo de sua aplica\u00e7\u00e3o, voc\u00ea evitou carregar c\u00f3digo que o usu\u00e1rio talvez nunca precise e reduziu o c\u00f3digo inicial necess\u00e1rio durante o carregamento.</p>\n<h2 id=\"import\"><a class=\"anchor\" href=\"/react/code-splitting#import\"></a><code class=\"language-javascript\">import()</code> </h2>\n<p>A melhor forma de introduzir a divis\u00e3o de c\u00f3digo em sua aplica\u00e7\u00e3o \u00e9 atrav\u00e9s da sintaxe din\u00e2mica <code class=\"language-javascript\">import()</code>.</p>\n<p><strong>Antes:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./math'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Depois:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./math\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">math</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Quando o Webpack encontra esta sintaxe, automaticamente ele divide o c\u00f3digo de sua aplica\u00e7\u00e3o. Se voc\u00ea est\u00e1 usando o Create React App, isto j\u00e1 est\u00e1 configurado e voc\u00ea pode <a class=\"external-link\" href=\"https://create-react-app.dev/docs/code-splitting/\">come\u00e7ar a us\u00e1-lo</a> imediatamente. Tamb\u00e9m \u00e9 suportado por padr\u00e3o no <a class=\"external-link\" href=\"https://nextjs.org/docs/advanced-features/dynamic-import\">Next.js</a>.</p>\n<p>Se voc\u00ea est\u00e1 configurando o Webpack manualmente, provavelmente vai querer ler o <a class=\"external-link\" href=\"https://webpack.js.org/guides/code-splitting/\">guia de divis\u00e3o de c\u00f3digo</a> do Webpack. Sua configura\u00e7\u00e3o do Webpack dever\u00e1 ser parecida <a class=\"external-link\" href=\"https://gist.github.com/gaearon/ca6e803f5c604d37468b0091d9959269\">com isto</a>.</p>\n<p>Ao usar o <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a>, voc\u00ea precisa se certificar que o Babel consegue analisar a sintaxe de importa\u00e7\u00e3o din\u00e2mica mas n\u00e3o est\u00e1 a transformando. Para isso, voc\u00ea precisar\u00e1 do <a class=\"external-link\" href=\"https://classic.yarnpkg.com/en/package/@babel/plugin-syntax-dynamic-import\">@babel/plugin-syntax-dynamic-import</a>.</p>\n<h2 id=\"reactlazy\"><a class=\"anchor\" href=\"/react/code-splitting#reactlazy\"></a><code class=\"language-javascript\">React.lazy</code> </h2>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">React.lazy</code> e Suspense n\u00e3o est\u00e3o dispon\u00edveis para renderiza\u00e7\u00e3o no lado servidor. Se voc\u00ea deseja fazer divis\u00e3o de c\u00f3digo em uma aplica\u00e7\u00e3o renderizada no servidor, n\u00f3s recomendamos o pacote <a class=\"external-link\" href=\"https://github.com/gregberge/loadable-components\">Loadable Components</a>. Ele possui um \u00f3timo <a class=\"external-link\" href=\"https://loadable-components.com/docs/server-side-rendering/\">guia para divis\u00e3o de pacotes com renderiza\u00e7\u00e3o no servidor</a>.</p>\n</div>\n<p>A fun\u00e7\u00e3o do <code class=\"language-javascript\">React.lazy</code> \u00e9 permitir a voc\u00ea renderizar uma importa\u00e7\u00e3o din\u00e2mica como se fosse um componente comum.</p>\n<p><strong>Antes:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> OtherComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Depois:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Isto automaticamente carregar\u00e1 o pacote contendo o <code class=\"language-javascript\">OtherComponent</code> quando este componente \u00e9 renderizado pela primeira vez.</p>\n<p><code class=\"language-javascript\">React.lazy</code> recebe uma fun\u00e7\u00e3o que deve retornar um <code class=\"language-javascript\">import()</code>. Este \u00faltimo retorna uma <code class=\"language-javascript\">Promise</code> que \u00e9 resolvida para um m\u00f3dulo com um <code class=\"language-javascript\">export default</code> que cont\u00e9m um componente React.</p>\n<p>O componente lazy pode ser renderizado dentro de um componente <code class=\"language-javascript\">Suspense</code>, o que nos permite mostrar algum conte\u00fado de fallback (como um indicador de carregamento) enquanto aguardamos o carregamento do componente lazy.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Carregando...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A prop <code class=\"language-javascript\">fallback</code> aceita qualquer elemento React que voc\u00ea deseja renderizar enquanto se espera o componente ser carregado. Voc\u00ea pode colocar o componente <code class=\"language-javascript\">Suspense</code> em qualquer lugar acima do componente din\u00e2mico. Voc\u00ea pode at\u00e9 mesmo ter v\u00e1rios componentes din\u00e2micos envolvidos em um \u00fanico componente <code class=\"language-javascript\">Suspense</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> AnotherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./AnotherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Carregando...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnotherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"error-boundaries\"><a class=\"anchor\" href=\"/react/code-splitting#error-boundaries\"></a>Error boundaries </h3>\n<p>Se algum outro m\u00f3dulo n\u00e3o for carregado (por exemplo, devido a uma falha na conex\u00e3o), ser\u00e1 disparado um erro. Voc\u00ea pode manusear estes erros para mostrar uma \u00f3tima experi\u00eancia de usu\u00e1rio e gerenciar a recupera\u00e7\u00e3o atrav\u00e9s de <a href=\"/react/error-boundaries\">Error Boundaries</a>. Uma vez que tenha criado seu Error Boundary, voc\u00ea pode us\u00e1-lo em qualquer lugar acima de seus componentes din\u00e2micos para exibir uma mensagem de erro quando houver uma falha de conex\u00e3o.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MyErrorBoundary <span class=\"token keyword\">from</span> <span class=\"token string\">'./MyErrorBoundary'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> AnotherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./AnotherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Carregando...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnotherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"route-based-code-splitting\"><a class=\"anchor\" href=\"/react/code-splitting#route-based-code-splitting\"></a>Divis\u00e3o de C\u00f3digo Baseada em Rotas </h2>\n<p>Decidir onde introduzir a divis\u00e3o de c\u00f3digo em sua aplica\u00e7\u00e3o pode ser um pouco complicado. Voc\u00ea precisa ter certeza de escolher locais que dividir\u00e3o os pacotes de forma uniforme, mas que n\u00e3o interrompa a experi\u00eancia do usu\u00e1rio.</p>\n<p>Um bom lugar para come\u00e7ar \u00e9 nas rotas. A maioria das pessoas na web est\u00e3o acostumadas com transi\u00e7\u00f5es entre p\u00e1ginas que levam algum tempo para carregar. Voc\u00ea tamb\u00e9m tende a re-renderizar toda a p\u00e1gina de uma s\u00f3 vez para que seus usu\u00e1rios n\u00e3o interajam com outros elementos na p\u00e1gina ao mesmo tempo.</p>\n<p>Aqui est\u00e1 um exemplo de como configurar a divis\u00e3o de c\u00f3digo baseada em rotas na sua aplica\u00e7\u00e3o usando bibliotecas como o <a class=\"external-link\" href=\"https://reactrouter.com/\">React Router</a> com <code class=\"language-javascript\">React.lazy</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense<span class=\"token punctuation\">,</span> lazy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span> Routes<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Home <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/Home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> About <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/About'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Carregando...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Routes</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">element</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Home</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">element</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">About</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Routes</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"named-exports\"><a class=\"anchor\" href=\"/react/code-splitting#named-exports\"></a>Exporta\u00e7\u00f5es Nomeadas </h2>\n<p><code class=\"language-javascript\">React.lazy</code> atualmente suporta apenas <code class=\"language-javascript\">export default</code>. Se o m\u00f3dulo que voc\u00ea deseja importar usa exporta\u00e7\u00f5es nomeadas, voc\u00ea pode criar um m\u00f3dulo intermedi\u00e1rio que usa <code class=\"language-javascript\">export default</code>. Isso garante que o <code class=\"language-javascript\">tree shaking</code> continue funcionando e que voc\u00ea n\u00e3o importe componentes n\u00e3o utilizados.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// ManyComponents.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MyUnusedComponent <span class=\"token operator\">=</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// MyComponent.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> MyComponent <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ManyComponents.js\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// MyApp.js</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> lazy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./MyComponent.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/code-splitting.md\">Edit this page</a></p></div></article>", "path": "/react/code-splitting", "nav": ["/react/accessibility", "/react/context"]}, {"key": "Context", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Contexto (context) disponibiliza uma forma de passar dados entre a \u00e1rvore de componentes sem precisar passar props manualmente em cada n\u00edvel.</p>\n<p>Em uma aplica\u00e7\u00e3o t\u00edpica do React, os dados s\u00e3o passados de cima para baixo (de pai para filho) via props, mas esse uso pode ser complicado para certos tipos de props (como prefer\u00eancias locais ou tema de UI), que s\u00e3o utilizadas por muitos componentes dentro da aplica\u00e7\u00e3o. Contexto (context) fornece a forma de compartilhar dados como esses, entre todos componentes da mesma \u00e1rvore de componentes, sem precisar passar explicitamente props entre cada n\u00edvel.</p>\n<ul>\n<li><a href=\"/react/context#when-to-use-context\">Quando Usar Contexto</a></li>\n<li><a href=\"/react/context#before-you-use-context\">Antes de voc\u00ea usar Contexto</a></li>\n<li>\n<p><a href=\"/react/context#api\">API</a></p>\n<ul>\n<li><a href=\"/react/context#reactcreatecontext\">React.createContext</a></li>\n<li><a href=\"/react/context#contextprovider\">Context.Provider</a></li>\n<li><a href=\"/react/context#classcontexttype\">Class.contextType</a></li>\n<li><a href=\"/react/context#contextconsumer\">Context.Consumer</a></li>\n<li><a href=\"/react/context#contextdisplayname\">Context.displayName</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/context#examples\">Exemplos</a></p>\n<ul>\n<li><a href=\"/react/context#dynamic-context\">Contexto Din\u00e2mico</a></li>\n<li><a href=\"/react/context#updating-context-from-a-nested-component\">Atualizando o Contexto de um componente aninhado</a></li>\n<li><a href=\"/react/context#consuming-multiple-contexts\">Consumindo v\u00e1rios Contextos</a></li>\n</ul>\n</li>\n<li><a href=\"/react/context#caveats\">Ressalvas</a></li>\n<li><a href=\"/react/context#legacy-api\">API Legada</a></li>\n</ul>\n<h2 id=\"when-to-use-context\"><a class=\"anchor\" href=\"/react/context#when-to-use-context\"></a>Quando Usar Contexto </h2>\n<p>Contexto (context) \u00e9 indicado para compartilhar dados que podem ser considerados \u201cglobais\u201d para a \u00e1rvore de componentes do React. Usu\u00e1rio autenticado ou o idioma preferido, s\u00e3o alguns casos comuns. No exemplo do c\u00f3digo a seguir, n\u00f3s passamos um tema a fim de estilizar o componente Button.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// O componente Toolbar deve receber uma prop extra chamada \"theme\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// e repassar para o componente ThemedButton.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Isso pode ser bem trabalhoso porque, se cada bot\u00e3o na aplica\u00e7\u00e3o</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// precisar saber o tema, este (o tema) teria que ser repassado por</span></span>  <span class=\"token comment\">// todos os componentes.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Usando contexto, n\u00f3s podemos evitar passar prop atrav\u00e9s de elementos intermedi\u00e1rios.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Context nos permite passar um valor a fundo da \u00e1rvore de componente</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// sem explicitamente passa-la por cada componente.</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Crie um Context para o tema atual (com \"light\" como padr\u00e3o).</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Use um Provider para passar o tema atual para a \u00e1rvore abaixo.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Qualquer componente pode acessa-la, n\u00e3o importa qu\u00e3o profundo esteja.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Neste exemplo, n\u00f3s passamos \"dark\" como tema atual.</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Um componente antecessor n\u00e3o precisa mais</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// passar o tema explicitamente.</span></span><span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Atribua um contextType para ler o context do tema atual.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// React vai encontrar o Provider acima mais pr\u00f3ximo e vai usa-lo.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Neste exemplo, o tema atual \u00e9 \"dark\".</span></span>  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> ThemeContext<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h2 id=\"before-you-use-context\"><a class=\"anchor\" href=\"/react/context#before-you-use-context\"></a>Antes de voc\u00ea usar Contexto </h2>\n<p>Contexto (context) \u00e9 usado principalmente quando algum dado precisa ser acessado por <em>muitos</em> componentes em diferentes n\u00edveis. Use contexto moderadamente uma vez que isto pode dificultar a reutiliza\u00e7\u00e3o de componentes.</p>\n<p><strong>Se voc\u00ea apenas quer evitar passar algumas props por muitos n\u00edveis, <a href=\"/react/composition-vs-inheritance\">composi\u00e7\u00e3o de componente</a> geralmente \u00e9 uma solu\u00e7\u00e3o mais simples que Contexto (context).</strong></p>\n<p>Considere por exemplo o componente <code class=\"language-javascript\">Page</code> que passa as props <code class=\"language-javascript\">user</code> e <code class=\"language-javascript\">avatarSize</code> por v\u00e1rios n\u00edveis abaixo de modo que os componentes <code class=\"language-javascript\">Link</code> e <code class=\"language-javascript\">Avatar</code> profundamente aninhados, podem ler essas props.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavigationBar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Pode parecer redundante passar para baixo as props <code class=\"language-javascript\">user</code> e <code class=\"language-javascript\">avatarSize</code> atrav\u00e9s de v\u00e1rios n\u00edveis se no final apenas o componente <code class=\"language-javascript\">Avatar</code> realmente precisa usa-las. Al\u00e9m disso, \u00e9 inc\u00f4modo sempre que o componente <code class=\"language-javascript\">Avatar</code> precisar de mais props do topo, voc\u00ea tamb\u00e9m precisar adicionar todas elas por todos os n\u00edveis intermedi\u00e1rios.</p>\n<p>Uma forma de resolver este problema <strong>sem contexto</strong> \u00e9 <a href=\"/react/composition-vs-inheritance#containment\">atribuir o pr\u00f3prio componente Avatar a uma prop do componente Page</a>, assim os componentes intermedi\u00e1rios n\u00e3o precisam saber sobre a prop <code class=\"language-javascript\">user</code> ou o <code class=\"language-javascript\">avatarSize</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> userLink <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span> <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>userLink<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Agora temos:</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span> <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavigationBar</span></span> <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>userLink<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Com esta mudan\u00e7a, apenas o componente <code class=\"language-javascript\">Page</code> do topo precisa saber sobre os componentes <code class=\"language-javascript\">Link</code> e <code class=\"language-javascript\">Avatar</code> e das props <code class=\"language-javascript\">user</code> e <code class=\"language-javascript\">avatarSize</code>.</p>\n<p>Esta <em>invers\u00e3o de controle</em> pode fazer seu c\u00f3digo mais limpo em v\u00e1rios casos, reduzindo a quantidade de props que voc\u00ea precisa passar atrav\u00e9s da sua aplica\u00e7\u00e3o e dando mais controle para os componentes raiz. Essa invers\u00e3o, entretanto, n\u00e3o \u00e9 a escolha certa em todos os casos; mover mais complexabilidade para o topo da \u00e1rvore, faz com que estes componentes fiquem mais complicados e for\u00e7ando os componentes dos n\u00edveis mais abaixo ficarem mais flex\u00edveis do que voc\u00ea gostaria.</p>\n<p>Voc\u00ea n\u00e3o est\u00e1 limitado a um \u00fanico filho por componente, Voc\u00ea pode passar v\u00e1rios componentes filhos ou at\u00e9 mesmo ter v\u00e1rios <em>slots</em> de componentes filhos <a href=\"/react/composition-vs-inheritance#containment\">como documentado aqui</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Feed</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> topBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavigationBar</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">NavigationBar</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span>\n      <span class=\"token attr-name\">topBar</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>topBar<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">content</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este padr\u00e3o \u00e9 suficiente para v\u00e1rios casos onde voc\u00ea precisa separar um componente filho de seu pai imediato. Voc\u00ea pode ainda ir mais longe com <a href=\"/react/render-props\">render props</a> se o filho precisa se comunicar com o pai antes de ser renderizado.</p>\n<p>Contudo, \u00e0s vezes o mesmo dado precisa ser acessado por v\u00e1rios componentes na \u00e1rvore e em diferentes n\u00edveis de aninhamento. Contexto (context) deixa voc\u00ea \u201ctransmitir\u201d este dado e mudan\u00e7as do mesmo para todos componentes abaixo. Exemplos comuns onde usar contexto pode ser mais simples que as alternativas incluem o gerenciamento de localiza\u00e7\u00e3o atual, tema, ou um dado em cache.</p>\n<h2 id=\"api\"><a class=\"anchor\" href=\"/react/context#api\"></a>API </h2>\n<h3 id=\"reactcreatecontext\"><a class=\"anchor\" href=\"/react/context#reactcreatecontext\"></a><code class=\"language-javascript\">React.createContext</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cria um objeto Contexto (context). Quando o React renderiza um componente que assina este objeto Contexto (context), este vai ler o valor atual do <code class=\"language-javascript\">Provider</code> superior na \u00e1rvore que estiver mais pr\u00f3ximo.</p>\n<p>O argumento <code class=\"language-javascript\">defaultValue</code> (valor padr\u00e3o) \u00e9 usado <em>apenas</em> quando o componente n\u00e3o corresponder com um <code class=\"language-javascript\">Provider</code> acima dele na \u00e1rvore. Este valor padr\u00e3o pode ser \u00fatil para testar componentes isoladamente, sem envolv\u00ea-los. Observa\u00e7\u00e3o: passando <code class=\"language-javascript\">undefined</code> como um valor de Provider n\u00e3o faz com que os componentes consumidores do Provider usem <code class=\"language-javascript\">defaultValue</code>.</p>\n<h3 id=\"contextprovider\"><a class=\"anchor\" href=\"/react/context#contextprovider\"></a><code class=\"language-javascript\">Context.Provider</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* algum valor */</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Cada objeto Contexto (context) vem com um componente Provider que permite componentes consumidores a assinarem mudan\u00e7as no contexto.</p>\n<p>O componente Provider aceita uma prop <code class=\"language-javascript\">value</code> que pode ser passada para ser consumida por componentes que s\u00e3o descendentes deste Provider. Um Provider pode ser conectado a v\u00e1rios consumidores. Providers podem ser aninhados para substituir valores mais ao fundo da \u00e1rvore.</p>\n<p>Todos consumidores que s\u00e3o descendentes de um Provider ser\u00e3o renderizados novamente sempre que a prop <code class=\"language-javascript\">value</code> do Provider for alterada. A propaga\u00e7\u00e3o do Provider aos seus descendentes (inclu\u00eddo <a href=\"/react/context#classcontexttype\"><code class=\"language-javascript\">.contextType</code></a> e <a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a>), n\u00e3o est\u00e1 condicionada ao m\u00e9todo <code class=\"language-javascript\">shouldComponenteUpdate</code>, logo, o consumidor \u00e9 atualizado mesmo quando um componente antepassado ignora uma atualiza\u00e7\u00e3o.</p>\n<p>Mudan\u00e7as s\u00e3o determinadas comparando os valores novos com os anteriores usando o mesmo algor\u00edtimo de <a href=\"//developer.mozilla.org/en-US/react/Web/JavaScript/Reference/Global_Objects/Object/is#Description\"><code class=\"language-javascript\">Object.is</code></a>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>A forma como as mudan\u00e7as s\u00e3o determinadas, podem causar alguns problemas quando se atribui objetos como <code class=\"language-javascript\">value</code>: veja <a href=\"/react/context#caveats\">Ressalvas</a></p>\n</div>\n<h3 id=\"classcontexttype\"><a class=\"anchor\" href=\"/react/context#classcontexttype\"></a><code class=\"language-javascript\">Class.contextType</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* faz um side-effect na montagem utilizando o valor de MyContext */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* renderiza algo com base no valor de MyContext */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nMyClass<span class=\"token punctuation\">.</span>contextType <span class=\"token operator\">=</span> MyContext<span class=\"token punctuation\">;</span></code></pre></div>\n<p>A propriedade <code class=\"language-javascript\">contextType</code> pode ser atribu\u00edda a um objeto Contexto (Context) criado por <a href=\"/react/context#reactcreatecontext\"><code class=\"language-javascript\">React.createContext()</code></a>. Usar esta propriedade permite que voc\u00ea consuma o valor atual mais pr\u00f3ximo deste tipo de contexto usando <code class=\"language-javascript\">this.context</code>. Voc\u00ea pode referencia-lo em qualquer momento nos m\u00e9todos de ciclo-de-vida, incluindo a fun\u00e7\u00e3o <code class=\"language-javascript\">render</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Voc\u00ea pode assinar apenas um contexto usando esta API. Se voc\u00ea precisa ler mais de um contexto, veja <a href=\"/react/context#consuming-multiple-contexts\">Consumindo v\u00e1rios Contextos</a>.</p>\n<p>Se voc\u00ea est\u00e1 usando o recurso experimental <a class=\"external-link\" href=\"https://babeljs.io/docs/plugins/transform-class-properties/\">public class fields syntax</a>, voc\u00ea pode usar um campo <strong>est\u00e1tico</strong> da classe para inicializar o seu <code class=\"language-javascript\">contextType</code>.</p>\n</div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> MyContext<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* renderiza algo baseado no valor */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"contextconsumer\"><a class=\"anchor\" href=\"/react/context#contextconsumer\"></a><code class=\"language-javascript\">Context.Consumer</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">/* renderiza algo baseado no valor do context */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Um componente React que assina mudan\u00e7as de contexto. Usar este componente permite voc\u00ea assinar a um contexto por um <a href=\"/react/components-and-props#function-and-class-components\">function component</a>.</p>\n<p>Requer uma <a href=\"/react/render-props#using-props-other-than-render\"><em>function as a child</em></a>. A fun\u00e7\u00e3o recebe o valor atual do contexto e retorna um n\u00f3 React. O argumento <code class=\"language-javascript\">value</code> passado para a fun\u00e7\u00e3o ser\u00e1 igual ao <code class=\"language-javascript\">value</code> da prop do Provider do contexto mais pr\u00f3ximo acima na \u00e1rvore. Se n\u00e3o houver um Provider para este contexto acima, o argumento <code class=\"language-javascript\">value</code> ser\u00e1 igual a <code class=\"language-javascript\">defaultValue</code> que foi passado ao criar o contexto com <code class=\"language-javascript\">createContext()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Para mais informa\u00e7\u00f5es sobre o padr\u00e3o <em>\u201cfunction as a child\u201d</em> veja, <a href=\"/react/render-props\">render props</a>.</p>\n</div>\n<h3 id=\"contextdisplayname\"><a class=\"anchor\" href=\"/react/context#contextdisplayname\"></a><code class=\"language-javascript\">Context.displayName</code> </h3>\n<p>O objeto Context aceita uma propriedade string <code class=\"language-javascript\">displayName</code>. React DevTools usa essa string para determinar o que exibir para o contexto.</p>\n<p>Por exemplo, o seguinte componente aparecer\u00e1 como MyDisplayName no DevTools:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* algum valor */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">MyContext<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token string\">'MyDisplayName'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> // \"MyDisplayName.Provider\" in DevTools</span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> // \"MyDisplayName.Consumer\" in DevTools</span></code></pre></div>\n<h2 id=\"examples\"><a class=\"anchor\" href=\"/react/context#examples\"></a>Exemplos </h2>\n<h3 id=\"dynamic-context\"><a class=\"anchor\" href=\"/react/context#dynamic-context\"></a>Contexto Din\u00e2mico </h3>\n<p>Um exemplo mais complexo com valores din\u00e2micos para o tema:</p>\n<p><strong>theme-context.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> themes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  light<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    foreground<span class=\"token operator\">:</span> <span class=\"token string\">'#000000'</span><span class=\"token punctuation\">,</span>\n    background<span class=\"token operator\">:</span> <span class=\"token string\">'#eeeeee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  dark<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    foreground<span class=\"token operator\">:</span> <span class=\"token string\">'#ffffff'</span><span class=\"token punctuation\">,</span>\n    background<span class=\"token operator\">:</span> <span class=\"token string\">'#222222'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  themes<span class=\"token punctuation\">.</span>dark <span class=\"token comment\">// default value</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n</div></p>\n<p><strong>themed-button.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> theme <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>backgroundColor<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">ThemedButton<span class=\"token punctuation\">.</span>contextType <span class=\"token operator\">=</span> ThemeContext<span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemedButton<span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong>app.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">,</span> themes<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ThemedButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./themed-button'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Um componente intermedi\u00e1rio que usa componente ThemedButton</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>changeTheme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      Change Theme</span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemedButton</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      theme<span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toggleTheme</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        theme<span class=\"token operator\">:</span>\n          state<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">===</span> themes<span class=\"token punctuation\">.</span>dark\n            <span class=\"token operator\">?</span> themes<span class=\"token punctuation\">.</span>light\n            <span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// O ThemedButton button dentro de ThemeProvider</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// usa o tema do estado enquanto os demais usam</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// o tema padr\u00e3o dark</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token attr-name\">changeTheme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleTheme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Section</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Section</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Page</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<h3 id=\"updating-context-from-a-nested-component\"><a class=\"anchor\" href=\"/react/context#updating-context-from-a-nested-component\"></a>Atualizando o Contexto de um componente aninhado </h3>\n<p>Geralmente \u00e9 necess\u00e1rio atualizar o contexto de um componente que est\u00e1 aninhado em algum lugar da \u00e1rvore de componentes. Neste caso, voc\u00ea pode passar uma fun\u00e7\u00e3o para o contexto, permitindo assim que consumidores possam atualizar o contexto.</p>\n<p><strong>theme-context.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Make sure the shape of the default value passed to</span>\n<span class=\"token comment\">// createContext matches the shape that the consumers expect!</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  theme<span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">toggleTheme</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong>theme-toggler-button.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ThemeTogglerButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// The Theme Toggler Button receives not only the theme</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// but also a toggleTheme function from the context</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">,</span> toggleTheme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>toggleTheme<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>backgroundColor<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Toggle Theme</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemeTogglerButton<span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong>app.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">,</span> themes<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ThemeTogglerButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-toggler-button'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toggleTheme</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        theme<span class=\"token operator\">:</span>\n          state<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">===</span> themes<span class=\"token punctuation\">.</span>dark\n            <span class=\"token operator\">?</span> themes<span class=\"token punctuation\">.</span>light\n            <span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Estado tamb\u00e9m cont\u00e9m a fun\u00e7\u00e3o de atualiza\u00e7\u00e3o</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Passando para o provedor de contexto</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      theme<span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      toggleTheme<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleTheme<span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Todo o estado \u00e9 passado para o provedor</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeTogglerButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<h3 id=\"consuming-multiple-contexts\"><a class=\"anchor\" href=\"/react/context#consuming-multiple-contexts\"></a>Consumindo v\u00e1rios Contextos </h3>\n<p>Para que o contexto possa continuar renderizando rapidamente, o React precisa manter cada consumidor de contexto separado em um n\u00f3 da \u00e1rvore.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Theme context, default to light theme</span>\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Signed-in user context</span>\n<span class=\"token keyword\">const</span> UserContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Guest'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>signedInUser<span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Componente App fornece os valores inicias do context</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>signedInUser<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UserContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Sidebar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Um componente pode consumir v\u00e1rios contexts.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">theme</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProfilePage</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UserContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Se dois ou mais valores de contexto s\u00e3o utilizados juntos com frequ\u00eancia, voc\u00ea pode considerar criar o seu pr\u00f3prio <em>render prop</em>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Para mais informa\u00e7\u00f5es sobre render prop, veja <a href=\"/react/render-props\">render props</a>.</p>\n</div>\n<h2 id=\"caveats\"><a class=\"anchor\" href=\"/react/context#caveats\"></a>Ressalvas </h2>\n<p>Contexto (context) usa refer\u00eancia de identidade para determinar quando renderizar novamente, por este motivo, existem alguns casos que podem desencadear renderiza\u00e7\u00f5es n\u00e3o intencionais em consumidores quando algum componente que antecede um Provider \u00e9 renderizados. Por exemplo, o c\u00f3digo abaixo vai re-renderizar todos consumidores toda vez que o Provider re-renderizar porque um novo objeto \u00e9 sempre criado para <code class=\"language-javascript\">value</code>:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>something<span class=\"token operator\">:</span> <span class=\"token string\">'something'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Para contornar isso, mova a prop <code class=\"language-javascript\">value</code> para o state do n\u00edvel antecessor.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      value<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>something<span class=\"token operator\">:</span> <span class=\"token string\">'something'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h2 id=\"legacy-api\"><a class=\"anchor\" href=\"/react/context#legacy-api\"></a>API Legada </h2>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Vers\u00f5es anteriores do React foram disponibilizadas com uma vers\u00e3o experimental do context API. Esta vers\u00e3o antiga da API ser\u00e1 suportada em todas vers\u00f5es 16.x lan\u00e7adas mas, aplica\u00e7\u00f5es utilizando esta API, devem migrar para a nova vers\u00e3o. <a href=\"/react/legacy-context\">Leia aqui em API Legada</a>.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/context.md\">Edit this page</a></p></div></article>", "path": "/react/context", "nav": ["/react/code-splitting", "/react/error-boundaries"]}, {"key": "Error Boundaries", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>No passado, erros de JavaScript dentro de componentes costumavam corromper o estado interno do React e faz\u00ea-lo <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/4026\">emitir</a> <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/6895\">erros</a> <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/8579\">incompreens\u00edveis</a> nas pr\u00f3ximas renderiza\u00e7\u00f5es. Estes erros eram causados por um erro anterior no c\u00f3digo da aplica\u00e7\u00e3o, mas o React n\u00e3o fornecia um meio para trat\u00e1-los de forma graciosa nos componentes e n\u00e3o conseguia se recuperar deles.</p>\n<h2 id=\"introducing-error-boundaries\"><a class=\"anchor\" href=\"/react/error-boundaries#introducing-error-boundaries\"></a>Introduzindo Error Boundaries </h2>\n<p>Um erro de JavaScript em uma parte da UI n\u00e3o deve quebrar toda a aplica\u00e7\u00e3o. Para resolver este problema para usu\u00e1rios do React, o React 16 introduziu um novo conceito de \u201cerror boundary\u201d.</p>\n<p>Error boundaries s\u00e3o componentes React que <strong>capturam erros de JavaScript em qualquer lugar na sua \u00e1rvore de componentes filhos, registram esses erros e mostram uma UI alternativa</strong> em vez da \u00e1rvore de componentes que quebrou. Error boundaries capturam estes erros durante a renderiza\u00e7\u00e3o, em m\u00e9todos do ciclo de vida, e em construtores de toda a \u00e1rvore abaixo delas.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Error boundaries <strong>n\u00e3o</strong> capturam erros em:</p>\n<ul>\n<li>Manipuladores de evento (<a href=\"/react/error-boundaries#how-about-event-handlers\">saiba mais</a>)</li>\n<li>C\u00f3digo ass\u00edncrono (ex. callbacks de <code class=\"language-javascript\">setTimeout</code> ou <code class=\"language-javascript\">requestAnimationFrame</code>)</li>\n<li>Renderiza\u00e7\u00e3o no servidor</li>\n<li>Erros lan\u00e7ados na pr\u00f3pria error boundary (ao inv\u00e9s de em seus filhos)</li>\n</ul>\n</div>\n<p>Um componente de classe se torna uma error boundary se ele definir um (ou ambos) dos m\u00e9todos do ciclo de vida <a href=\"/react/react-component#static-getderivedstatefromerror\"><code class=\"language-javascript\">static getDerivedStateFromError()</code></a> ou <a href=\"/react/react-component#componentdidcatch\"><code class=\"language-javascript\">componentDidCatch()</code></a>. Use <code class=\"language-javascript\">static getDerivedStateFromError()</code> para renderizar uma UI alternativa ap\u00f3s o erro ter sido lan\u00e7ado. Use <code class=\"language-javascript\">componentDidCatch()</code> para registrar informa\u00e7\u00f5es do erro.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Atualiza o state para que a pr\u00f3xima renderiza\u00e7\u00e3o mostre a UI alternativa.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> errorInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Voc\u00ea tamb\u00e9m pode registrar o erro em um servi\u00e7o de relat\u00f3rios de erro</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">logErrorToMyService</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Voc\u00ea pode renderizar qualquer UI alternativa</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Algo deu errado.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E ent\u00e3o voc\u00ea pode us\u00e1-la como um componente qualquer:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyWidget</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Error boundaries funcionam como o bloco <code class=\"language-javascript\">catch {}</code> do JavaScript, mas para componentes. Apenas componentes de classe podem ser error boundaries. Na pr\u00e1tica, na maioria das vezes voc\u00ea ir\u00e1 declarar um componente error boundary uma vez e us\u00e1-lo em toda a aplica\u00e7\u00e3o.</p>\n<p>Note que <strong>as error boundaries apenas capturam erros nos componentes abaixo delas na \u00e1rvore</strong>. Uma error boundary n\u00e3o pode capturar um erro em si mesma. Se uma error boundary falhar ao tentar renderizar a mensagem de erro, o erro ser\u00e1 propagado para a error boundary mais pr\u00f3xima acima dela. Isto tamb\u00e9m \u00e9 parecido com a forma que o bloco <code class=\"language-javascript\">catch {}</code> funciona no JavaScript.</p>\n<h2 id=\"live-demo\"><a class=\"anchor\" href=\"/react/error-boundaries#live-demo\"></a>Demonstra\u00e7\u00e3o ao vivo </h2>\n<p>Veja <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/wqvxGa?editors=0010\">este exemplo de como declarar e usar uma error boundary</a> com <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2017/09/26/react-v16.0.html\">React 16</a>.</p>\n<h2 id=\"where-to-place-error-boundaries\"><a class=\"anchor\" href=\"/react/error-boundaries#where-to-place-error-boundaries\"></a>Onde colocar error boundaries </h2>\n<p>Voc\u00ea \u00e9 quem decide a granularidade das errors boundaries. Voc\u00ea pode envolver componentes da rota superior para exibir uma mensagem como \u201cAlgo deu errado\u201d para o usu\u00e1rio, da mesma forma que frameworks server-side costumam lidar com travamentos. Voc\u00ea tamb\u00e9m pode envolver widgets individuais em uma error boundary para proteg\u00ea-los de quebrar o restante da aplica\u00e7\u00e3o.</p>\n<h2 id=\"new-behavior-for-uncaught-errors\"><a class=\"anchor\" href=\"/react/error-boundaries#new-behavior-for-uncaught-errors\"></a>Novo comportamento para erros n\u00e3o tratados </h2>\n<p>Esta altera\u00e7\u00e3o tem uma implica\u00e7\u00e3o importante. <strong>A partir do React 16, erros que n\u00e3o forem tratados por uma error boundary ir\u00e3o fazer com que toda a \u00e1rvore de componentes React seja desmontada.</strong></p>\n<p>N\u00f3s debatemos esta decis\u00e3o, mas em nossa experi\u00eancia \u00e9 pior deixar uma UI corrompida ser exibida do que remov\u00ea-la completamente. Por exemplo, em um produto como o Messenger, deixar a UI quebrada vis\u00edvel poderia fazer com que algu\u00e9m envie uma mensagem para a pessoa errada. Do mesmo modo, \u00e9 pior para um app de pagamentos exibir um valor errado do que n\u00e3o renderizar nada.</p>\n<p>Esta altera\u00e7\u00e3o significa que quando voc\u00ea migrar para o React 16, voc\u00ea provavelmente ir\u00e1 descobrir alguns travamentos existentes em sua aplica\u00e7\u00e3o que antes passavam despercebidos. Adicionar errors boundaries permite que voc\u00ea forne\u00e7a uma experi\u00eancia de usu\u00e1rio melhor quando algo der errado.</p>\n<p>Por exemplo, o Facebook Messenger envolve o conte\u00fado da barra lateral, do painel de informa\u00e7\u00f5es, do hist\u00f3rico da conversa e do input de mensagem em error boundaries separadas. Se algum componente em uma destas \u00e1reas da UI quebrar, o restante continua funcionando.</p>\n<p>N\u00f3s tamb\u00e9m encorajamos que voc\u00ea use servi\u00e7os de relat\u00f3rio de erros JS (ou fa\u00e7a o seu pr\u00f3prio) para que voc\u00ea possa ficar sabendo sobre exce\u00e7\u00f5es n\u00e3o tratadas quando elas acontecerem em produ\u00e7\u00e3o e consert\u00e1-las.</p>\n<h2 id=\"component-stack-traces\"><a class=\"anchor\" href=\"/react/error-boundaries#component-stack-traces\"></a>Stack traces de componentes </h2>\n<p>O React 16 registra todos os erros ocorridos durante a renderiza\u00e7\u00e3o no console em desenvolvimento, mesmo que a aplica\u00e7\u00e3o absorva-os acidentalmente. Al\u00e9m da mensagem de erro e a stack do JavaScript, ele tamb\u00e9m fornece as stack traces do componente. Agora voc\u00ea pode ver onde exatamente na \u00e1rvore de componentes a falha aconteceu:</p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/f1276837b03821b43358d44c14072945/c3a47/error-boundaries-stack-trace.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/f1276837b03821b43358d44c14072945/1e088/error-boundaries-stack-trace.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Voc\u00ea tamb\u00e9m pode ver os nomes dos arquivos e n\u00fameros das linhas na stack trace do componente. Isto funciona por padr\u00e3o em projetos do <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>:</p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/45611d4fdbd152829b28ae2348d6dcba/6dd26/error-boundaries-stack-trace-line-numbers.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/45611d4fdbd152829b28ae2348d6dcba/1e088/error-boundaries-stack-trace-line-numbers.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Se voc\u00ea n\u00e3o usar o Create React App, voc\u00ea pode adicionar <a class=\"external-link\" href=\"https://www.npmjs.com/package/@babel/plugin-transform-react-jsx-source\">este plugin</a> manualmente na sua configura\u00e7\u00e3o do Babel. Note que isto \u00e9 destinado apenas para desenvolvimento e <strong>deve ser desativado em produ\u00e7\u00e3o</strong>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Os nomes de componentes exibidos na stack trace dependem da propriedade <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code class=\"language-javascript\">Function.name</code></a>. Se voc\u00ea der suporte a navegadores antigos e dispositivos que podem n\u00e3o fornecer isto nativamente (como o IE 11), considere a inclus\u00e3o de um poyfill de <code class=\"language-javascript\">Function.name</code> no bundle da sua aplica\u00e7\u00e3o, como o <a class=\"external-link\" href=\"https://github.com/JamesMGreene/Function.name\"><code class=\"language-javascript\">function.name-polyfill</code></a>. Outra alternativa \u00e9 definir a propriedade <a href=\"/react/react-component#displayname\"><code class=\"language-javascript\">displayName</code></a> explicitamente em todos os seus componentes.</p>\n</div>\n<h2 id=\"how-about-trycatch\"><a class=\"anchor\" href=\"/react/error-boundaries#how-about-trycatch\"></a>Que tal usar try/catch? </h2>\n<p><code class=\"language-javascript\">try</code> / <code class=\"language-javascript\">catch</code> \u00e9 \u00f3timo, mas s\u00f3 funciona para c\u00f3digo imperativo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">showButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Contudo, componentes React s\u00e3o declarativos e especificam <em>o que</em> deve ser renderizado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Error boundaries preservam a natureza declarativa do React e se comportam como voc\u00ea esperaria. Por exemplo, mesmo se um erro ocorrer em um m\u00e9todo <code class=\"language-javascript\">componentDidUpdate</code> causado por um <code class=\"language-javascript\">setState</code> em algum lugar profundo da \u00e1rvore, ele ainda vai propagar corretamente para a error boundary mais pr\u00f3xima.</p>\n<h2 id=\"how-about-event-handlers\"><a class=\"anchor\" href=\"/react/error-boundaries#how-about-event-handlers\"></a>Como ficam os manipuladores de evento? </h2>\n<p>Error boundaries <strong>n\u00e3o</strong> tratam erros dentro de manipuladores de evento.</p>\n<p>O React n\u00e3o precisa que as error boundaries se recuperem de erros em manipuladores de evento. Ao contr\u00e1rio do m\u00e9todo de renderiza\u00e7\u00e3o e dos m\u00e9todos do ciclo de vida, manipuladores de evento n\u00e3o acontecem durante a renderiza\u00e7\u00e3o. Ent\u00e3o, se eles quebrarem, o React ainda sabe o que exibir na tela.</p>\n<p>Se voc\u00ea precisar capturar um erro dentro de um manipulador de evento, use a declara\u00e7\u00e3o comum de <code class=\"language-javascript\">try</code> / <code class=\"language-javascript\">catch</code> do JavaScript:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Faz alguma coisa que pode quebrar</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Capturei um erro.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Clique em mim</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note que o exemplo acima est\u00e1 demonstrando um comportamento comum de JavaScript e n\u00e3o usa error boundaries.</p>\n<h2 id=\"naming-changes-from-react-15\"><a class=\"anchor\" href=\"/react/error-boundaries#naming-changes-from-react-15\"></a>Altera\u00e7\u00f5es de nomes do React 15 </h2>\n<p>O React 15 inclu\u00eda um suporte muito limitado para error boundaries sob um m\u00e9todo de nome diferente: <code class=\"language-javascript\">unstable_handleError</code>. Este m\u00e9todo n\u00e3o funciona mais e voc\u00ea precisar\u00e1 alter\u00e1-lo para <code class=\"language-javascript\">componentDidCatch</code> em seu c\u00f3digo a partir do primeiro release beta da vers\u00e3o 16.</p>\n<p>Para esta altera\u00e7\u00e3o, n\u00f3s fornecemos um <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#error-boundaries\">codemod</a> para migrar o seu c\u00f3digo automaticamente.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/error-boundaries.md\">Edit this page</a></p></div></article>", "path": "/react/error-boundaries", "nav": ["/react/context", "/react/forwarding-refs"]}, {"key": "Encaminhamento de Refs", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Encaminhamento de Ref \u00e9 uma t\u00e9cnica para passar automaticamente uma <a href=\"/react/refs-and-the-dom\">ref</a> atrav\u00e9s de um componente para um dos seus filhos. Isso normalmente n\u00e3o \u00e9 necess\u00e1rio para a maioria dos componentes na aplica\u00e7\u00e3o. Entretanto, pode ser \u00fatil para alguns tipos de componentes, especialmente em bibliotecas de componentes reutiliz\u00e1veis. Os cen\u00e1rios mais comuns est\u00e3o descritos abaixo.</p>\n<h2 id=\"forwarding-refs-to-dom-components\"><a class=\"anchor\" href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\"></a>Encaminhamento de refs para componentes do DOM </h2>\n<p>Considere um componente <code class=\"language-javascript\">FancyButton</code> que renderiza o elemento nativo <code class=\"language-javascript\">button</code> do DOM: <div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Componentes React escondem seus detalhes de implementa\u00e7\u00e3o, inclusive suas sa\u00eddas renderizadas. Outros componentes usando o <code class=\"language-javascript\">FancyButton</code> <strong>geralmente n\u00e3o precisar\u00e3o</strong> <a href=\"/react/refs-and-the-dom\">obter uma ref</a> para o elemento interno <code class=\"language-javascript\">button</code> do DOM. Isso \u00e9 bom pois previne os componentes de se basearem demasiadamente na estrutura do DOM de cada um.</p>\n<p>Embora essa encapsula\u00e7\u00e3o seja desej\u00e1vel para componentes com n\u00edvel de aplica\u00e7\u00e3o como <code class=\"language-javascript\">FeedStory</code> ou <code class=\"language-javascript\">Comment</code>, ela pode ser incoveniente para componentes \u201cfolhas\u201d altamente reutiliz\u00e1veis como <code class=\"language-javascript\">FancyButton</code> ou <code class=\"language-javascript\">MyTextInput</code>. Esses componentes tendem a serem usados em toda a aplica\u00e7\u00e3o de uma maneira similar como os elementos <code class=\"language-javascript\">button</code> e <code class=\"language-javascript\">input</code> do DOM, e acessar seus n\u00f3s do DOM pode ser inevit\u00e1vel para o gerenciamento de foco, sele\u00e7\u00e3o ou anima\u00e7\u00f5es.</p>\n<p><strong>Encaminhamento de ref \u00e9 um recurso opt-in que permite que alguns componentes tomem uma <code class=\"language-javascript\">ref</code> que eles recebam e a repassem para baixo (em outras palavras, \u201cencaminhem\u201d) para um filho.</strong></p>\n<p>No exemplo abaixo, <code class=\"language-javascript\">FancyButton</code> usa <code class=\"language-javascript\">React.forwardRef</code> para obter a <code class=\"language-javascript\">ref</code> passada para ele e ent\u00e3o a encaminha para o <code class=\"language-javascript\">button</code> do DOM que ele renderiza:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> FancyButton <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Voc\u00ea agora pode obter a ref diretamente para o button do DOM:</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyButton</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click me!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyButton</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Desta forma, componentes usando <code class=\"language-javascript\">FancyButton</code> podem obter uma refer\u00eancia ao n\u00f3 DOM <code class=\"language-javascript\">button</code> subjacente e acess\u00e1-lo se necess\u00e1rio \u2014 como se eles usassem um <code class=\"language-javascript\">button</code> DOM diretamente.</p>\n<p>Aqui est\u00e1 uma explica\u00e7\u00e3o passo-a-passo sobre o que acontece no exemplo acima:</p>\n<ol>\n<li>N\u00f3s criamos uma <a href=\"/react/refs-and-the-dom\">React ref</a> ao chamar <code class=\"language-javascript\">React.createRef</code> e atribu\u00ed-la a uma vari\u00e1vel <code class=\"language-javascript\">ref</code>.</li>\n<li>N\u00f3s passamos nossa <code class=\"language-javascript\">ref</code> para <code class=\"language-javascript\">&lt;FancyButton ref={ref}&gt;</code> especificando-a como um atributo JSX.</li>\n<li>O React passa a <code class=\"language-javascript\">ref</code> como um segundo argumento para a fun\u00e7\u00e3o <code class=\"language-javascript\">(props, ref) =&gt; ...</code> dentro de <code class=\"language-javascript\">fowardRef</code>.</li>\n<li>N\u00f3s encaminhamos esse argumento <code class=\"language-javascript\">ref</code> para <code class=\"language-javascript\">&lt;button ref={ref}&gt;</code> especificando-a como um atributo JSX.</li>\n<li>Quando a ref estiver anexada, <code class=\"language-javascript\">ref.current</code> ir\u00e1 apontar para o n\u00f3 <code class=\"language-javascript\">&lt;button&gt;</code> do DOM.</li>\n</ol>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>O segundo argumento <code class=\"language-javascript\">ref</code> s\u00f3 existe quando voc\u00ea define um componente com a chamada <code class=\"language-javascript\">React.forwardRef</code>. Componentes funcionais ou de classe n\u00e3o recebem o argumento <code class=\"language-javascript\">ref</code>, e ref tamb\u00e9m n\u00e3o est\u00e1 dispon\u00edvel nas props.</p>\n<p>Encaminhamento de ref n\u00e3o \u00e9 limitado aos componentes do DOM. Voc\u00ea pode encaminhar refs para componentes de classe tamb\u00e9m.</p>\n</div>\n<h2 id=\"note-for-component-library-maintainers\"><a class=\"anchor\" href=\"/react/forwarding-refs#note-for-component-library-maintainers\"></a>Nota para quem mant\u00e9m uma biblioteca de componentes </h2>\n<p><strong>Quando voc\u00ea come\u00e7ar a usar <code class=\"language-javascript\">fowardRef</code> em uma biblioteca de componentes, voc\u00ea deve tratar isso como uma mudan\u00e7a abrupta e lan\u00e7ar uma nova vers\u00e3o maior.</strong> Isso porque sua biblioteca provavelmente ter\u00e1 um comportamento observ\u00e1vel diferente (como para onde as refs s\u00e3o atribu\u00eddas, ou quais tipos s\u00e3o exportados) e isso pode ocasionar quebras em aplica\u00e7\u00f5es ou em outras bibliotecas que dependem do comportamento antigo.</p>\n<p>Aplicar <code class=\"language-javascript\">React.fowardRef</code> condicionalmente quando ele existe tamb\u00e9m n\u00e3o \u00e9 recomendado pelas mesmas raz\u00f5es: isso muda como sua biblioteca se comporta e potencialmente pode quebrar as aplica\u00e7\u00f5es para seus usu\u00e1rios quando eles derem upgrade no pr\u00f3prio React.</p>\n<h2 id=\"forwarding-refs-in-higher-order-components\"><a class=\"anchor\" href=\"/react/forwarding-refs#forwarding-refs-in-higher-order-components\"></a>Encaminhamento de refs em componentes de ordem superior </h2>\n<p>Esta t\u00e9cnica tamb\u00e9m pode ser particulamente \u00fatil com <a href=\"/react/higher-order-components\">componentes de ordem superior</a> (tamb\u00e9m conhecidos como HOCs). Vamos come\u00e7ar com o exemplo de um HOC que da log de props de componente para o console: <div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'props antigas:'</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'novas props:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> LogProps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>O HOC \u201clogProps\u201d passa todas as <code class=\"language-javascript\">props</code> para o componente que ele envolve, assim a sa\u00edda renderizada ser\u00e1 a mesma. Por exemplo, podemos usar este HOC para dar log em todas as props que s\u00e3o passadas para nosso componente \u201cfancy button\u201d: <div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FancyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Ao inv\u00e9s de exportar FancyButton, n\u00f3s exportamos LogProps.</span>\n<span class=\"token comment\">// De qualquer forma, isso ir\u00e1 renderizar o FancyButton</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>FancyButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n</div></p>\n<p>Existe uma ressalva sobre o exemplo acima: refs n\u00e3o ser\u00e3o aceitas. Isso porque <code class=\"language-javascript\">ref</code> n\u00e3o \u00e9 uma prop. Assim como <code class=\"language-javascript\">key</code> \u00e9 tratada de forma diferente pelo React. Se voc\u00ea adiciona uma ref a um HOC, a ref ir\u00e1 referir-se ao componente mais externo e n\u00e3o ao componente encapsulado.</p>\n<p>Isso significa que refs destinadas para nosso componente <code class=\"language-javascript\">FancyButton</code> ter\u00e3o que ser anexadas, na verdade, ao componente <code class=\"language-javascript\">LogProps</code>: <div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> FancyButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./FancyButton'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// O componente FancyButton que importamos \u00e9 o HOC LogProps</span>\n<span class=\"token comment\">// Mesmo que a sa\u00edda renderizada seja a mesma,</span>\n<span class=\"token comment\">// Nossa ref vai apontar para LogProps ao inv\u00eas do componente interno FancyButton!</span>\n<span class=\"token comment\">// Isso significa que n\u00f3s n\u00e3o podemos chamar e.g. ref.current.focus()</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyButton</span></span>\n  <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Click Me<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">handleClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Felizmente, n\u00f3s podemos encaminhar refs explicitamente para o componente interno <code class=\"language-javascript\">FancyButton</code> usando a API <code class=\"language-javascript\">React.forwardRef</code>. <code class=\"language-javascript\">React.forwardRef</code> aceita uma fun\u00e7\u00e3o de render que recebe par\u00e2metros <code class=\"language-javascript\">props</code> e <code class=\"language-javascript\">ref</code> e retorna um n\u00f3 React. Por exemplo: <div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'old props:'</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new props:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>forwardedRef<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></span>\n      <span class=\"token comment\">// Atribui a prop \"fowardRef\" como uma ref</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>forwardedRef<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Note o segundo par\u00e2metro \"ref\" fornecido pelo React.fowardRef.</span>\n  <span class=\"token comment\">// N\u00f3s podemos pass\u00e1-lo para LogProps como qualquer outra props regular, e.g. \"fowardedRef\"</span>\n  <span class=\"token comment\">// E ela pode ser anexada ao componente</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h2 id=\"displaying-a-custom-name-in-devtools\"><a class=\"anchor\" href=\"/react/forwarding-refs#displaying-a-custom-name-in-devtools\"></a>Exibindo um nome customiz\u00e1vel em DevTools </h2>\n<p><code class=\"language-javascript\">React.forwardRef</code> aceita uma fun\u00e7\u00e3o de renderiza\u00e7\u00e3o. React DevTools usa esta fun\u00e7\u00e3o para determinar o que exibir para o componente de encaminhamento de ref.</p>\n<p>Por exemplo, o componente a seguir vai aparecer como \u201d<em>ForwardRef</em>\u201d no DevTools:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> WrappedComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Se voc\u00ea nomear a fun\u00e7\u00e3o de renderiza\u00e7\u00e3o, DevTools tamb\u00e9m ir\u00e1 incluir seu nome (e.g. <em>ForwardRef(myFunction)</em>\u201d):</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> WrappedComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Voc\u00ea inclusive pode definir a propriedade <code class=\"language-javascript\">displayName</code> da fun\u00e7\u00e3o para incluir o componente que voc\u00ea est\u00e1 envolvendo:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// D\u00ea a este componente um nome mais visivelmente amig\u00e1vel no DevTools</span>\n  <span class=\"token comment\">// e.g. \"ForwardRef(logProps(MyComponent))\"</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> Component<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> Component<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  forwardRef<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">logProps(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>forwardRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/forwarding-refs.md\">Edit this page</a></p></div></article>", "path": "/react/forwarding-refs", "nav": ["/react/error-boundaries", "/react/fragments"]}, {"key": "Fragmentos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Um padr\u00e3o comum no React \u00e9 que um componente pode retornar m\u00faltiplos elementos. Os Fragmentos permitem agrupar uma lista de filhos sem adicionar n\u00f3s extras ao DOM.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildA</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildB</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildC</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>H\u00e1 tamb\u00e9m uma nova <a href=\"/react/fragments#short-syntax\">sintaxe curta</a> para declar\u00e1-las.</p>\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"/react/fragments#motivation\"></a>Motiva\u00e7\u00e3o </h2>\n<p>Um padr\u00e3o comum \u00e9 para um componente retornar uma lista de filhos. Considerando o c\u00f3digo React a seguir:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Table</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Columns</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">&lt;Columns /&gt;</code> precisaria retornar m\u00faltiplos elementos <code class=\"language-javascript\">&lt;td&gt;</code> para que o HTML renderizado fosse v\u00e1lido. Se um div pai for usado dentro do <code class=\"language-javascript\">render()</code> de <code class=\"language-javascript\">&lt;Columns /&gt;</code>, ent\u00e3o o HTML resultante ser\u00e1 inv\u00e1lido.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Resulta na seguinte <code class=\"language-javascript\">&lt;Table /&gt;</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Os Fragmentos resolvem este problema.</p>\n<h2 id=\"usage\"><a class=\"anchor\" href=\"/react/fragments#usage\"></a>Uso </h2>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>que resulta em uma <code class=\"language-javascript\">&lt;Table /&gt;</code> correta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h3 id=\"short-syntax\"><a class=\"anchor\" href=\"/react/fragments#short-syntax\"></a>Sintaxe curta </h3>\n<p>Existe uma sintaxe nova e mais curta que voc\u00ea pode usar para declarar fragmentos. Parecem tags vazias:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voc\u00ea pode usar <code class=\"language-javascript\">&lt;&gt;&lt;/&gt;</code> da mesma forma que voc\u00ea usaria qualquer outro elemento, exceto que ele n\u00e3o suporta chaves ou atributos.</p>\n<h3 id=\"keyed-fragments\"><a class=\"anchor\" href=\"/react/fragments#keyed-fragments\"></a>Fragmentos com chaves </h3>\n<p>Fragmentos  declarados com <code class=\"language-javascript\">&lt;React.Fragment&gt;</code> podem ter chaves. Um caso de uso para isso \u00e9 mapear uma cole\u00e7\u00e3o para um array de fragmentos - por exemplo, para criar uma lista de descri\u00e7\u00e3o:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// Sem a `key`, React ir\u00e1 disparar um aviso</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">key</code> \u00e9 o \u00fanico atributo que pode ser passado para o <code class=\"language-javascript\">Fragment</code>. No futuro, podemos adicionar suporte para outros atributos, como manipuladores de eventos.</p>\n<h3 id=\"live-demo\"><a class=\"anchor\" href=\"/react/fragments#live-demo\"></a>Demonstra\u00e7\u00e3o ao vivo </h3>\n<p>Voc\u00ea pode experimentar a nova sintaxe de fragmento JSX com este <a class=\"external-link\" href=\"https://codepen.io/reactjs/pen/VrEbjE?editors=1000\">CodePen</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/fragments.md\">Edit this page</a></p></div></article>", "path": "/react/fragments", "nav": ["/react/forwarding-refs", "/react/higher-order-components"]}, {"key": "Componentes de Alta-ordem", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Um componente de ordem superior (HOC, do ingl\u00eas Higher-Order Component) \u00e9 uma t\u00e9cnica avan\u00e7ada do React para reutilizar a l\u00f3gica de um componente. HOCs n\u00e3o s\u00e3o parte da API do React, per se. Eles s\u00e3o um padr\u00e3o que surgiu da pr\u00f3pria natureza de composi\u00e7\u00e3o do React.</p>\n<p>Concretamente, <strong>um componente de ordem superior \u00e9 uma fun\u00e7\u00e3o que recebe um componente e retorna um novo componente.</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">higherOrderComponent</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Enquanto um componente transforma props em UI, um componente de ordem superior transforma um componente em outro componente.</p>\n<p>HOCs s\u00e3o comuns em bibliotecas externas ao React, como o <a class=\"external-link\" href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\"><code class=\"language-javascript\">connect</code></a> do Redux e o <a class=\"external-link\" href=\"https://relay.dev/docs/v10.1.3/fragment-container/#createfragmentcontainer\"><code class=\"language-javascript\">createFragmentContainer</code></a> do Relay.</p>\n<p>Neste documento, n\u00f3s vamos discutir porque componentes de ordem superior s\u00e3o \u00fateis e como escrever o seu.</p>\n<h2 id=\"use-hocs-for-cross-cutting-concerns\"><a class=\"anchor\" href=\"/react/higher-order-components#use-hocs-for-cross-cutting-concerns\"></a>Usar HOCs para caracter\u00edsticas transversais. </h2>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Anteriormente, n\u00f3s recomendamos mixins como uma forma de lidar com caracter\u00edsticas transversais. Desde ent\u00e3o, percebemos que mixins criam mais problemas do que trazem valor. <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">Leia mais</a> sobre porque n\u00f3s deixamos os mixins de lado e como voc\u00ea pode fazer a transi\u00e7\u00e3o dos seus componentes existentes.</p>\n</div>\n<p>Componentes s\u00e3o a unidade prim\u00e1ria de reutiliza\u00e7\u00e3o de c\u00f3digo no React. Contudo, pode-se perceber que alguns padr\u00f5es n\u00e3o se encaixam t\u00e3o facilmente em componentes tradicionais.</p>\n<p>Por exemplo, digamos que voc\u00ea tem um componente <code class=\"language-javascript\">CommentList</code> que subscreve-se a uma fonte externa de dados para renderizar uma lista de coment\u00e1rios:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// \"DataSource\" \u00e9 uma fonte de dados global</span>\n      comments<span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Subscreve-se \u00e0s mudan\u00e7as</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Limpa o listener</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Atualiza o state do componente sempre que a fonte de dados muda</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      comments<span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">comment</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span></span> <span class=\"token attr-name\">comment</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Depois, voc\u00ea escreve um componente que se subscreve a um blog post, o qual segue um padr\u00e3o similar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPost</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      blogPost<span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      blogPost<span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TextBlock</span></span> <span class=\"token attr-name\">text</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>blogPost<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">CommentList</code> e <code class=\"language-javascript\">BlogPost</code> n\u00e3o s\u00e3o id\u00eanticos - eles chamam m\u00e9todos diferentes de <code class=\"language-javascript\">DataSource</code> e renderizam sa\u00eddas diferentes. Mas muito de suas implementa\u00e7\u00f5es \u00e9 igual:</p>\n<ul>\n<li>Em <code class=\"language-javascript\">mount</code>, adicione um change listener para <code class=\"language-javascript\">DataSource</code>.</li>\n<li>Dentro do listener, chame <code class=\"language-javascript\">setState</code> sempre que a fonte de dados mudar.</li>\n<li>Em <code class=\"language-javascript\">unmount</code>, remova o change listener.</li>\n</ul>\n<p>Voc\u00ea pode imaginar que em uma aplica\u00e7\u00e3o grande, esse mesmo padr\u00e3o de subscrever-se a <code class=\"language-javascript\">DataSource</code> e chamar <code class=\"language-javascript\">setState</code> ir\u00e1 ocorrer v\u00e1rias vezes. N\u00f3s queremos uma abstra\u00e7\u00e3o que permita-nos definir essa l\u00f3gica em um \u00fanico lugar e compartilh\u00e1-la com v\u00e1rios componentes. Isso \u00e9 onde componentes de ordem superior se destacam.</p>\n<p>N\u00f3s podemos escrever uma fun\u00e7\u00e3o que cria componentes, como <code class=\"language-javascript\">CommentList</code> e <code class=\"language-javascript\">BlogPost</code>, que subscrevem-se a <code class=\"language-javascript\">DataSource</code>. A fun\u00e7\u00e3o ir\u00e1 aceitar como um dos seus argumentos um componente filho que recebe o dado assinado como uma prop. Vamos chamar a fun\u00e7\u00e3o de <code class=\"language-javascript\">withSubscription</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> CommentListWithSubscription <span class=\"token operator\">=</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>\n  CommentList<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">DataSource</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> BlogPostWithSubscription <span class=\"token operator\">=</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>\n  BlogPost<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">DataSource<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O primeiro par\u00e2metro \u00e9 um componente encapsulado. O segundo par\u00e2metro acessa os dados que estamos interessados, dado um <code class=\"language-javascript\">DataSource</code> e as props atuais.</p>\n<p>Quando <code class=\"language-javascript\">CommentListWithSubscription</code> e <code class=\"language-javascript\">BlogPostWithSubscription</code> s\u00e3o renderizados, <code class=\"language-javascript\">CommentList</code> e <code class=\"language-javascript\">BlogPost</code> receber\u00e3o uma prop <code class=\"language-javascript\">data</code> com os dados mais recentes obtidos de <code class=\"language-javascript\">DataSource</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// A fun\u00e7\u00e3o recebe um componente...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent<span class=\"token punctuation\">,</span> selectData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...e retorna outro componente...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        data<span class=\"token operator\">:</span> <span class=\"token function\">selectData</span><span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ... que lida com a subscri\u00e7\u00e3o...</span>\n      DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        data<span class=\"token operator\">:</span> <span class=\"token function\">selectData</span><span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ... e renderiza o componente encapsulado com os dados novos!</span>\n      <span class=\"token comment\">// Note que n\u00f3s passamos diretamente qualquer prop adicional</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note que um HOC n\u00e3o modifica o componente de entrada, nem utiliza heran\u00e7a para copiar seu comportamento. Em vez disso, um HOC <em>comp\u00f5e</em> o componente original ao <em>envolv\u00ea-lo</em> (wrapping) em um componente container. Um HOC \u00e9 uma fun\u00e7\u00e3o pura sem efeitos colaterais.</p>\n<p>E \u00e9 isso! O componente encapsulado recebe todas as props do container, junto de uma nova prop, <code class=\"language-javascript\">data</code>, o qual a utiliza para renderizar sua sa\u00edda. O HOC n\u00e3o se preocupa com o como ou o porqu\u00ea de seus dados serem usados, e o componente encapsulado n\u00e3o se preocupa de onde os dados vieram.</p>\n<p>Por <code class=\"language-javascript\">withSubscription</code> ser uma fun\u00e7\u00e3o normal, voc\u00ea pode adicionar quantos argumentos quiser. Por exemplo, voc\u00ea pode querer fazer o nome da prop <code class=\"language-javascript\">data</code> ser configur\u00e1vel, para continuar a isolar o HOC do componente encapsulado. Ou voc\u00ea pode aceitar um argumento que configura <code class=\"language-javascript\">shouldComponentUpdate</code>, ou um que configura a fonte de dados. Todos esses casos s\u00e3o poss\u00edveis porque o HOC tem controle total sobre como o componente \u00e9 definido.</p>\n<p>Como componentes, o contrato entre <code class=\"language-javascript\">withSubscription</code> e o componente encapsulado \u00e9 completamente baseado em props. Isso faz com que seja f\u00e1cil trocar um HOC por outro, desde que eles providenciem as mesmas props para o componente encapsulado. Isso pode ser \u00fatil se voc\u00ea mudar de bibliotecas para obten\u00e7\u00e3o de dados, por exemplo.</p>\n<h2 id=\"dont-mutate-the-original-component-use-composition\"><a class=\"anchor\" href=\"/react/higher-order-components#dont-mutate-the-original-component-use-composition\"></a>N\u00e3o alterar o componente original. Usar composi\u00e7\u00e3o. </h2>\n<p>Resista \u00e0 tenta\u00e7\u00e3o de modificar o prototype de um componente (ou alter\u00e1-lo de qualquer outra forma) dentro de um HOC.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">InputComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">InputComponent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">componentDidUpdate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current props: '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Previous props: '</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// O fato de estarmos retornando a entrada original \u00e9 uma dica de que ela sofreu muta\u00e7\u00e3o.</span>\n  <span class=\"token keyword\">return</span> InputComponent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// EnhancedComponent criar\u00e1 logs sempre que uma prop for recebida</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>InputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Existem alguns problemas nisso. Primeiro, o componente de entrada n\u00e3o pode ser reutilizado separadamente do componente melhorado. Mais crucialmente, se voc\u00ea aplicar outro HOC para <code class=\"language-javascript\">EnhancedComponent</code> que <em>tamb\u00e9m</em> altera <code class=\"language-javascript\">componentDidUpdate</code>, a funcionalidade do primeiro HOC ser\u00e1 sobrescrita! Esse HOC tamb\u00e9m n\u00e3o funcionar\u00e1 com componentes funcionais, os quais n\u00e3o possuem m\u00e9todos de ciclo de vida.</p>\n<p>Realizar muta\u00e7\u00f5es em HOCs podem causar \u201cvazamentos\u201d - o consumidor deve saber como eles s\u00e3o implementados para evitar conflitos com outros HOCs.</p>\n<p>Em vez de muta\u00e7\u00f5es, HOCs devem utilizar composi\u00e7\u00e3o, encapsulando o componente de entrada em um componente container:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current props: '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Previous props: '</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Encapsula o componente de entrada em um container, sem alter\u00e1-lo. Excelente!</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esse HOC possui a mesma funcionalidade que a sua vers\u00e3o com muta\u00e7\u00e3o e evita o potencial de ocorrer conflitos. Ele funciona igualmente bem com componentes funcionais e controlados. E por ser uma fun\u00e7\u00e3o pura, pode ser combinado com outros HOCs, ou at\u00e9 com si mesmo.</p>\n<p>Voc\u00ea deve ter notado similaridades entre HOCs e um padr\u00e3o chamado <strong>componentes container</strong>. Componentes container s\u00e3o parte de uma estrat\u00e9gia de separa\u00e7\u00e3o de responsabilidade entre preocupa\u00e7\u00f5es de alto n\u00edvel e baixo n\u00edvel. Containers gerenciam coisas como subscri\u00e7\u00f5es e state, e passam props para componentes que lidam com coisas como renderiza\u00e7\u00e3o da UI. HOCs utilizam containers como parte de sua implementa\u00e7\u00e3o. Voc\u00ea pode pensar em HOCs como defini\u00e7\u00f5es de componentes container com par\u00e2metros.</p>\n<h2 id=\"convention-pass-unrelated-props-through-to-the-wrapped-component\"><a class=\"anchor\" href=\"/react/higher-order-components#convention-pass-unrelated-props-through-to-the-wrapped-component\"></a>Conven\u00e7\u00e3o: Passar props n\u00e3o relacionadas para o componente encapsulado </h2>\n<p>HOCs adicionam caracter\u00edsticas a um componente. Eles n\u00e3o devem alterar drasticamente o seu contrato. \u00c9 esperado que um componente retornado de um HOC tenha uma interface similar ao do componente encapsulado.</p>\n<p>HOCs devem passar props que n\u00e3o s\u00e3o relacionadas \u00e0s suas preocupa\u00e7\u00f5es espec\u00edficas. A maioria dos HOCs possuem um m\u00e9todo render que se parece com algo assim:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Filtra props extras que s\u00e3o espec\u00edficas a esse HOC e n\u00e3o devem ser</span>\n  <span class=\"token comment\">// passadas para o componente encapsulado.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> extraProp<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>passThroughProps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Injeta props no componente encapsulado.</span>\n  <span class=\"token comment\">// Estes geralmente s\u00e3o valores do state ou m\u00e9todos da inst\u00e2ncia.</span>\n  <span class=\"token keyword\">const</span> injectedProp <span class=\"token operator\">=</span> someStateOrInstanceMethod<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Passa as props para o componente encapsulado.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span>\n      <span class=\"token attr-name\">injectedProp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>injectedProp<span class=\"token punctuation\">}</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>passThroughProps<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Essa conven\u00e7\u00e3o ajuda a garantir que HOCs s\u00e3o t\u00e3o flex\u00edveis e reutiliz\u00e1ves quanto poss\u00edvel.</p>\n<h2 id=\"convention-maximizing-composability\"><a class=\"anchor\" href=\"/react/higher-order-components#convention-maximizing-composability\"></a>Conven\u00e7\u00e3o: Maximizando composabilidade </h2>\n<p>Nem todos os HOCs s\u00e3o iguais. \u00c0s vezes eles aceitam apenas um \u00fanico argumento, o componente encapsulado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> NavbarWithRouter <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>Navbar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Normalmente, HOCs aceitam argumentos adicionais. Neste exemplo do Relay, um objeto de configura\u00e7\u00e3o \u00e9 usado para especificar uma depend\u00eancia de dados de um componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> CommentWithRelay <span class=\"token operator\">=</span> Relay<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>Comment<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A assinatura mais comum para HOCs se parece com isso:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// `connect` do React Redux</span>\n<span class=\"token keyword\">const</span> ConnectedComment <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">,</span> commentActions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CommentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>O Que?!</em> Se voc\u00ea quebrar isso em partes, \u00e9 mais f\u00e1cil de ver o que est\u00e1 acontecendo.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// connect \u00e9 uma fun\u00e7\u00e3o que retorna outra fun\u00e7\u00e3o</span>\n<span class=\"token keyword\">const</span> enhance <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentListSelector<span class=\"token punctuation\">,</span> commentListActions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// A fun\u00e7\u00e3o retornada \u00e9 um HOC, que retorna um componente que est\u00e1 conectado</span>\n<span class=\"token comment\">// \u00e0 store do Redux</span>\n<span class=\"token keyword\">const</span> ConnectedComment <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>CommentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Em outras palavras, <code class=\"language-javascript\">connect</code> \u00e9 uma fun\u00e7\u00e3o de ordem superior que retorna um componente de ordem superior!</p>\n<p>Essa forma pode parecer confusa ou desnecess\u00e1ria, mas ela possui uma propriedade \u00fatil. HOCs com um \u00fanico argumento, como o retornado pela fun\u00e7\u00e3o <code class=\"language-javascript\">connect</code>, possuem a assinatura <code class=\"language-javascript\">Componente =&gt; Componente</code>. Fun\u00e7\u00f5es cujo tipo de sa\u00edda \u00e9 igual ao tipo da entrada s\u00e3o muito f\u00e1ceis de se compor.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Em vez de fazer isso...</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ... Voc\u00ea pode usar uma conveni\u00eancia de composi\u00e7\u00e3o de fun\u00e7\u00f5es</span>\n<span class=\"token comment\">// compose(f, g, h) \u00e9 o mesmo que (...args) =&gt; f(g(h(...args)))</span>\n<span class=\"token keyword\">const</span> enhance <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// Ambos s\u00e3o HOCs com um \u00fanico argumento</span>\n  withRouter<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span></code></pre></div>\n<p>(Essa mesma propriedade tamb\u00e9m permite que <code class=\"language-javascript\">connect</code> e outros enhancer-style HOCs sejam usados como decoradores, uma proposta experimental do JavaScript.)</p>\n<p>A fun\u00e7\u00e3o de conveni\u00eancia <code class=\"language-javascript\">compose</code> \u00e9 disponibilizada por v\u00e1rias bibliotecas de terceiros, incluindo lodash (como o <a class=\"external-link\" href=\"https://lodash.com/docs/#flowRight\"><code class=\"language-javascript\">lodash.flowRight</code></a>), <a class=\"external-link\" href=\"https://redux.js.org/docs/api/compose.html\">Redux</a>, e <a class=\"external-link\" href=\"https://ramdajs.com/docs/#compose\">Ramda</a>.</p>\n<h2 id=\"convention-wrap-the-display-name-for-easy-debugging\"><a class=\"anchor\" href=\"/react/higher-order-components#convention-wrap-the-display-name-for-easy-debugging\"></a>Conven\u00e7\u00e3o: Envolver o nome de exibi\u00e7\u00e3o para melhor depura\u00e7\u00e3o </h2>\n<p>Os componentes container criados por HOCs aparecem no <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-devtools\">React Developer Tools</a> como qualquer outro componente. Para facilitar a depura\u00e7\u00e3o, escolha um nome de exibi\u00e7\u00e3o que comunique que o componente \u00e9 o resultado de um HOC.</p>\n<p>A t\u00e9cnica mais comum \u00e9 encapsular o nome de exibi\u00e7\u00e3o do componente encapsulado. Ent\u00e3o, se o seu componente de ordem superior se chama <code class=\"language-javascript\">withSubscription</code>, e o nome de exibi\u00e7\u00e3o do componente encapsulado \u00e9 <code class=\"language-javascript\">CommentList</code>, use o nome de exibi\u00e7\u00e3o <code class=\"language-javascript\">WithSubscription(CommentList)</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithSubscription</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span>\n  WithSubscription<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">WithSubscription(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> WithSubscription<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> WrappedComponent<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> WrappedComponent<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">'Component'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"caveats\"><a class=\"anchor\" href=\"/react/higher-order-components#caveats\"></a>Ressalvas </h2>\n<p>Componentes de ordem superior v\u00eam com algumas ressalvas que n\u00e3o s\u00e3o imediatamente \u00f3bvias se voc\u00ea for novo no React.</p>\n<h3 id=\"dont-use-hocs-inside-the-render-method\"><a class=\"anchor\" href=\"/react/higher-order-components#dont-use-hocs-inside-the-render-method\"></a>N\u00e3o usar HOCs dentro do m\u00e9todo render </h3>\n<p>O algoritmo de compara\u00e7\u00e3o do React (chamado <a href=\"/react/reconciliation\">Reconcilia\u00e7\u00e3o</a>) usa a identidade do componente para determinar se ele deve atualizar a sub-\u00e1rvore existente ou jog\u00e1-la fora e montar uma nova. Se o componente que foi retornado do <code class=\"language-javascript\">render</code> \u00e9 id\u00eantico (<code class=\"language-javascript\">===</code>) ao componente do render anterior, o React atualizar\u00e1 a sub-\u00e1rvore comparando-a recursivamente com uma nova. Se elas n\u00e3o forem iguais, a sub-\u00e1rvore anterior ser\u00e1 completamente desmontada.</p>\n<p>Normalmente, voc\u00ea n\u00e3o precisa se preocupar com isso. Mas isso \u00e9 importante em HOCs porque n\u00e3o se pode aplicar um HOC em um componente dentro do m\u00e9todo render de um componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Uma nova vers\u00e3o de EnhancedComponent \u00e9 criada toda vez que render for chamado</span>\n  <span class=\"token comment\">// EnhancedComponent1 !== EnhancedComponent2</span>\n  <span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Isso faz com que a sub-\u00e1rvore seja completamente</span>\n  <span class=\"token comment\">// desmontada/remontada todas as vezes!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EnhancedComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O problema aqui n\u00e3o \u00e9 s\u00f3 na performance - remontar um componente causa a perda de todo o seu state e todos os seus filhos.</p>\n<p>Em vez disso, aplique HOCs fora da defini\u00e7\u00e3o do componente para que o componente resultante seja criado apenas uma vez. Ent\u00e3o, sua identidade ser\u00e1 consistente pelas renderiza\u00e7\u00f5es. De qualquer forma, isso geralmente \u00e9 o que voc\u00ea quer.</p>\n<p>Nesses casos raros em que \u00e9 preciso aplicar um HOC dinamicamente, isso tamb\u00e9m pode ser feito dentro dos m\u00e9todos de ciclo de vida do componente, ou no seu construtor.</p>\n<h3 id=\"static-methods-must-be-copied-over\"><a class=\"anchor\" href=\"/react/higher-order-components#static-methods-must-be-copied-over\"></a>M\u00e9todos est\u00e1ticos devem ser propagados </h3>\n<p>As vezes \u00e9 \u00fatil definir um m\u00e9todo est\u00e1tico em um componente do React. Por exemplo, containers do Relay exp\u00f5em um m\u00e9todo est\u00e1tico <code class=\"language-javascript\">getFragment</code> para facilitar a composi\u00e7\u00e3o de fragmentos do GraphQL.</p>\n<p>Mas, quando se aplica um HOC a um componente, o componente original \u00e9 encapsulado com um componente container. Isso significa que o novo componente n\u00e3o possui nenhum dos m\u00e9todos est\u00e1ticos do componente original.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Defina um m\u00e9todo est\u00e1tico</span>\nWrappedComponent<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">staticMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Agora aplique um HOC</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// O EnhancedComponent n\u00e3o possui m\u00e9todos est\u00e1ticos</span>\n<span class=\"token keyword\">typeof</span> EnhancedComponent<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>Para resolver isso, voc\u00ea pode copiar os m\u00e9todos no container antes de retorn\u00e1-lo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Deve-se saber exatamente qual m\u00e9todo copiar :(</span>\n  Enhance<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">=</span> WrappedComponent<span class=\"token punctuation\">.</span>staticMethod<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por\u00e9m, isso requer que voc\u00ea saiba exatamente quais m\u00e9todos precisam ser copiados. A biblioteca <a class=\"external-link\" href=\"https://github.com/mridgway/hoist-non-react-statics\">hoist-non-react-statics</a> pode ser usada para copiar automaticamente todos os m\u00e9todos est\u00e1ticos que n\u00e3o s\u00e3o do React:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> hoistNonReactStatic <span class=\"token keyword\">from</span> <span class=\"token string\">'hoist-non-react-statics'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">hoistNonReactStatic</span><span class=\"token punctuation\">(</span>Enhance<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Outra solu\u00e7\u00e3o poss\u00edvel \u00e9 exportar o m\u00e9todo est\u00e1tico do pr\u00f3prio componente, separadamente.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Em vez de...</span>\nMyComponent<span class=\"token punctuation\">.</span>someFunction <span class=\"token operator\">=</span> someFunction<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> MyComponent<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ... exporte o m\u00e9todo separadamente...</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> someFunction <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ... e no m\u00f3dulo que est\u00e1 consumindo, importe ambos</span>\n<span class=\"token keyword\">import</span> MyComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> someFunction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./MyComponent.js'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"refs-arent-passed-through\"><a class=\"anchor\" href=\"/react/higher-order-components#refs-arent-passed-through\"></a>Refs n\u00e3o s\u00e3o passadas diretamente </h3>\n<p>Enquanto a conven\u00e7\u00e3o para componentes de ordem superior \u00e9 passar diretamente todas as props para o componente encapsulado, isso n\u00e3o funciona para refs. Isso acontece porque <code class=\"language-javascript\">ref</code> n\u00e3o \u00e9 exatamente uma prop - tal como <code class=\"language-javascript\">key</code>, ela \u00e9 tratada de maneira especial pelo React. Se uma ref for adicionado a um elemento cujo componente \u00e9 o resultado de um HOC, a ref referenciar\u00e1 \u00e0 inst\u00e2ncia mais externa do componente container, n\u00e3o ao componente encapsulado.</p>\n<p>A solu\u00e7\u00e3o para esse problema \u00e9 usar a API <code class=\"language-javascript\">React.forwardRef</code> (introduzida com o React 16.3). <a href=\"/react/forwarding-refs\">Saiba mais sobre ela na se\u00e7\u00e3o de encaminhamento de refs</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/higher-order-components.md\">Edit this page</a></p></div></article>", "path": "/react/higher-order-components", "nav": ["/react/fragments", "/react/integrating-with-other-libraries"]}, {"key": "Integrando com outras Bibliotecas", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>React pode ser utilizado em qualquer aplica\u00e7\u00e3o web. Ele pode ser embutido em outras aplica\u00e7\u00f5es e com um pouco de cuidado, outras aplica\u00e7\u00f5es podem ser incorporadas ao React. Este guia vai examinar alguns dos mais comuns usos de caso, focando na integrac\u00e3o com <a class=\"external-link\" href=\"https://jquery.com/\">jQuery</a> e <a class=\"external-link\" href=\"https://backbonejs.org/\">Backbone</a>. Por\u00e9m, as mesmas ideias podem ser aplicadas para integrar componentes com qualquer c\u00f3digo existente.</p>\n<h2 id=\"integrating-with-dom-manipulation-plugins\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-dom-manipulation-plugins\"></a>Integrando com Plugins de Manipulac\u00e3o do DOM </h2>\n<p>React desconhece qualquer altera\u00e7\u00e3o feita no DOM fora do React. Ele determina as atualiza\u00e7\u00f5es com base na sua pr\u00f3pria representa\u00e7\u00e3o interna e se os mesmos n\u00f3s do DOM forem manipulados por outras bibliotecas, React fica confuso e n\u00e3o sabe como proceder.</p>\n<p>Isto n\u00e3o significa que \u00e9 imposs\u00edvel ou mesmo necessariamente dif\u00edcil de combinar React com outras maneiras de afetar o DOM, voc\u00ea apenas precisa estar atento ao que cada biblioteca est\u00e1 fazendo.</p>\n<p>A maneira mais f\u00e1cil de evitar conflitos \u00e9 evitando com que o componente React atualize. Voc\u00ea pode fazer isto, renderizando elementos que o React n\u00e3o tem motivos para atualizar, como uma <code class=\"language-javascript\">&lt;div /&gt;</code> vazia.</p>\n<h3 id=\"how-to-approach-the-problem\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#how-to-approach-the-problem\"></a>Como Abordar o Problema </h3>\n<p>Para demonstrar isto, vamos esbo\u00e7ar um <em>wrapper</em> para um plugin jQuery gen\u00e9rico.</p>\n<p>N\u00f3s vamos adicionar um <a href=\"/react/refs-and-the-dom\">ref</a> para o elemento raiz (<em>root</em>) no DOM. Dentro do <code class=\"language-javascript\">componentDidMount</code>, n\u00f3s vamos ter a refer\u00eancia desse elemento para passar para o plugin jQuery.</p>\n<p>Para evitar com que o React toque no DOM depois de montado, n\u00f3s vamos retornar uma <code class=\"language-javascript\">&lt;div /&gt;</code> vazia para o m\u00e9todo <code class=\"language-javascript\">render()</code>. O elemento <code class=\"language-javascript\">&lt;div /&gt;</code>, n\u00e3o possui propriedades ou filhos, assim o React n\u00e3o tem raz\u00e3o para atualiz\u00e1-lo, deixando o plugin jQuery livre para gerenciar esta parte do DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SomePlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">somePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">somePlugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note que n\u00f3s definimos ambos <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentWillUnmount</code> <a href=\"/react/react-component#the-component-lifecycle\">m\u00e9todos do ciclo de vida</a>. Muitos plugins jQuery adicionam listeners de eventos para o DOM, e \u00e9 importante remov\u00ea-los no <code class=\"language-javascript\">componentWillUnmount</code>. Se o plugin n\u00e3o fornece um m\u00e9todo para limpeza, voc\u00ea vai provavelmente ter que criar o seu pr\u00f3prio, lembrando de remover qualquer listener do plugin registrado para evitar vazamento de mem\u00f3ria.</p>\n<h3 id=\"integrating-with-jquery-chosen-plugin\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-jquery-chosen-plugin\"></a>Integrando com o plugin jQuery Chosen </h3>\n<p>Para um exemplo mais concreto desses conceitos, vamos escrever um wrapper m\u00ednimo para o plugin <a class=\"external-link\" href=\"https://harvesthq.github.io/chosen/\">Chosen</a>, que aumenta as op\u00e7\u00f5es (<option>) do <code class=\"language-javascript\">&lt;select&gt;</code>.</option></p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Apenas porque isto \u00e9 poss\u00edvel, n\u00e3o significa que esta \u00e9 a melhor maneira para apps React. N\u00f3s encorajamos voc\u00ea a utilizar componentes React quando voc\u00ea puder. Componentes React s\u00e3o f\u00e1ceis de reutilizar em aplicac\u00f5es React, e muitas vezes fornecem mais controle sobre seu comportamento e apar\u00eancia.</p>\n</div>\n<p>Primeiro, vamos olhar o que Chosen faz no DOM.</p>\n<p>Se voc\u00ea cham\u00e1-lo em um n\u00f3 DOM <code class=\"language-javascript\">&lt;select&gt;</code>, ele l\u00ea os atributos do n\u00f3 DOM original, esconde-os com um estilo <em>inline</em>, e ent\u00e3o adiciona um n\u00f3 DOM separado com sua pr\u00f3pria representa\u00e7\u00e3o visual, logo ap\u00f3s o <code class=\"language-javascript\">&lt;select&gt;</code>. Em seguida, ele dispara um evento do jQuery, para notificar sobre as altera\u00e7\u00f5es.</p>\n<p>Vamos supor que esta \u00e9 a API para o nosso React componente <code class=\"language-javascript\">&lt;Chosen&gt;</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Chosen</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">vanilla</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">chocolate</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">strawberry</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Chosen</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>N\u00f3s vamos implement\u00e1-lo como um <a href=\"/react/uncontrolled-components\">componente n\u00e3o controlado</a> pela simplicidade.</p>\n<p>Primeiro, vamos criar um component vazio com um m\u00e9todo <code class=\"language-javascript\">render()</code> onde n\u00f3s retornamos o <code class=\"language-javascript\">&lt;select&gt;</code> em volta de uma <code class=\"language-javascript\">&lt;div&gt;</code></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chosen</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note como envolvemos o <code class=\"language-javascript\">&lt;select&gt;</code> em uma <code class=\"language-javascript\">&lt;div&gt;</code> extra. Isto \u00e9 necess\u00e1rio porque Chosen vai adicionar um outro elemento DOM logo ap\u00f3s o <code class=\"language-javascript\">&lt;select&gt;</code> que passamos para ele. Contudo, no que diz respeito ao React, <code class=\"language-javascript\">&lt;div&gt;</code> sempre tem apenas um \u00fanico filho. Isto \u00e9 como n\u00f3s garantimos que as atualiza\u00e7\u00f5es do React n\u00e3o v\u00e3o conflitar com o n\u00f3 extra do DOM adicionado pelo Chosen. \u00c9 importante que se voc\u00ea modificar o DOM fora do fluxo do React, voc\u00ea deve garantir que React n\u00e3o tem um motivo para acessar esses n\u00f3s do DOM.</p>\n<p>Em seguida, vamos implementar os m\u00e9todos do ciclo de vida. N\u00f3s vamos precisar inicializar Chosen com a refer\u00eancia para o <code class=\"language-javascript\">&lt;select&gt;</code> no <code class=\"language-javascript\">componentDidMount</code>, e destru\u00ed-lo no <code class=\"language-javascript\">componentWillUnmount</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/qmqeQx?editors=0010\"><strong>Experimente no Codepen</strong></a></p>\n<p>Note que React n\u00e3o atribui nenhum significado especial para o campo <code class=\"language-javascript\">this.el</code>. Isto apenas funciona porque n\u00f3s atribuimos anteriormente um valor para este campo, com um <code class=\"language-javascript\">ref</code> no m\u00e9todo <code class=\"language-javascript\">render()</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Isto \u00e9 suficiente para renderizar o nosso componente, mas tamb\u00e9m queremos ser notificados quando os valores mudarem. Para fazer isto, vamos assinar os eventos de <code class=\"language-javascript\">change</code> do jQuery no <code class=\"language-javascript\">&lt;select&gt;</code> controlado pelo Chosen.</p>\n<p>N\u00f3s n\u00e3o vamos passar <code class=\"language-javascript\">this.props.onChange</code> diretamente para o Chosen porque as propriedades do componente, podem mudar ao longo do tempo e isto inclui os manipuladores de evento (<em>event handlers</em>) . Como alternativa, vamos declarar um m\u00e9todo <code class=\"language-javascript\">handleChange()</code> que chama o <code class=\"language-javascript\">this.props.onChange</code> e subscreve o evento <code class=\"language-javascript\">change</code> do jQuery:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/bWgbeE?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Finalmente, existe mais uma coisa a se fazer. Em React, propriedades podem mudar ao longo do tempo. Por exemplo, o componente <code class=\"language-javascript\">&lt;Chosen&gt;</code> pode ter diferentes filhos se o estado do componente pai alterar. Isto significa que nos pontos de integra\u00e7\u00e3o, \u00e9 importante que a atualiza\u00e7\u00e3o do DOM seja feita manualmente em resposta as atualiza\u00e7\u00f5es das propriedades, j\u00e1 que n\u00e3o vamos deixar o React gerenciar o DOM.</p>\n<p>A documenta\u00e7\u00e3o do Chosen, sugere que n\u00f3s podemos utilizar a API do jQuery <code class=\"language-javascript\">trigger()</code> para notificar sobre as mudan\u00e7as do elemento DOM original. N\u00f3s vamos deixar o React cuidar da atualiza\u00e7\u00e3o <code class=\"language-javascript\">this.props.children</code> dentro do <code class=\"language-javascript\">&lt;select&gt;</code>, mas tamb\u00e9m vamos adicionar um m\u00e9todo do ciclo de vida <code class=\"language-javascript\">componentDidUpdate()</code>, que notifica Chosen sobre as mudan\u00e7as na lista de filhos:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chosen:updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Desta forma, Chosen vai saber atualizar o DOM quando os filhos do <code class=\"language-javascript\">&lt;select&gt;</code> gerenciados pelo React mudarem.</p>\n<p>A implementa\u00e7\u00e3o completa do componente <code class=\"language-javascript\">Chosen</code> se parece com isto:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chosen</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chosen:updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/xdgKOz?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<h2 id=\"integrating-with-other-view-libraries\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-other-view-libraries\"></a>Integrando com Outras Bibliotecas de View </h2>\n<p>React pode ser incorporado em outras aplica\u00e7\u00f5es gra\u00e7as a flexibilidade do <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">ReactDOM.render()</code></a>.</p>\n<p>Apesar do React ser popularmente utilizado para carregar um \u00fanico componente no DOM, <code class=\"language-javascript\">ReactDOM.render()</code> tamb\u00e9m pode ser chamado m\u00faltiplas vezes por partes independentes da UI, que pode ser pequeno como um bot\u00e3o, ou grande como uma aplica\u00e7\u00e3o.</p>\n<p>De fato, isto \u00e9 exatamente como React \u00e9 utilizado no Facebook. Isto nos permite escrever aplica\u00e7\u00f5es por partes, e combin\u00e1-las com nosso template existente gerado pelo servidor e outros c\u00f3digos no cliente.</p>\n<h3 id=\"replacing-string-based-rendering-with-react\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#replacing-string-based-rendering-with-react\"></a>Substituindo Renderiza\u00e7\u00e3o baseada em String com React </h3>\n<p>Um padr\u00e3o comum em aplica\u00e7\u00f5es web mais antigas, \u00e9 descrever peda\u00e7os do DOM como uma string e inseri-las no DOM utilizando: <code class=\"language-javascript\">$el.html(htmlString)</code>. Estes pontos do c\u00f3digo, s\u00e3o perfeitos para introduzir React. Apenas reescreva a renderiza\u00e7\u00e3o baseada em string para um componente React.</p>\n<p>Ent\u00e3o, a seguinte implementa\u00e7\u00e3o com jQuery\u2026</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;button id=\"btn\"&gt;Say Hello&lt;/button&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>\u2026poderia ser reescrita utilizando um componente React:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Say Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A partir daqui, voc\u00ea pode iniciar movendo mais l\u00f3gica para o componente e come\u00e7ar adotando mais pr\u00e1ticas comuns do React. Por exemplo, em componentes \u00e9 melhor n\u00e3o confiar em IDs porque o mesmo componente pode ser renderizado diversas vezes.\nAo inv\u00e9s disso, n\u00f3s vamos utilizar o <a href=\"/react/handling-events\">sistema de eventos do React</a> e registrar o manipulador de clique diretamente no elemento <code class=\"language-javascript\">&lt;button&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Say Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HelloButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/RVKbvW?editors=1010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Voc\u00ea pode ter tantos componentes isolados voc\u00ea quiser, e usar <code class=\"language-javascript\">ReactDOM.render()</code> para renderiz\u00e1-los em diferentes containers do DOM. Gradualmente, com voc\u00ea convertendo mais da sua aplica\u00e7\u00e3o para React, voc\u00ea vai estar apto para combin\u00e1-los em componentes maiores, e mover algumas das chamadas do <code class=\"language-javascript\">ReactDOM.render()</code> para cima da hierarquia.</p>\n<h3 id=\"embedding-react-in-a-backbone-view\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#embedding-react-in-a-backbone-view\"></a>Incorporando React em Backbone </h3>\n<p><a class=\"external-link\" href=\"https://backbonejs.org/\">Backbone</a> tipicamente utiliza strings HTML, ou fun\u00e7\u00f5es template que geram strings, para criar o conte\u00fado para seus elementos DOM. Este processo, tamb\u00e9m, pode ser substituido por uma renderiza\u00e7\u00e3o de um componente React.</p>\n<p>Abaixo, n\u00f3s vamos criar uma view Backbone chamada <code class=\"language-javascript\">ParagraphView</code>.\nIsto vai subscrever a fun\u00e7\u00e3o <code class=\"language-javascript\">render()</code> do Backbone, para renderizar um componente <code class=\"language-javascript\">&lt;Paragraph&gt;</code> React no elemento DOM fornecido pelo Backbone (<code class=\"language-javascript\">this.el</code>).\nAqui, n\u00f3s tamb\u00e9m estamos utilizando <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">ReactDOM.render()</code></a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Paragraph</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> ParagraphView <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Paragraph</span></span> <span class=\"token attr-name\">text</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    Backbone<span class=\"token punctuation\">.</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gWgOYL?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>\u00c9 importante tamb\u00e9m chamar <code class=\"language-javascript\">ReactDOM.unmountComponentAtNode()</code> no m\u00e9todo <code class=\"language-javascript\">remove</code>, para que o React cancele os manipuladores de eventos e outros recursos associados com a \u00e1rvore do componente quando ele \u00e9 removido.</p>\n<p>Quando um componente \u00e9 removido <strong>de dentro</strong> de uma \u00e1rvore React, a limpeza ocorre automaticamente, mas como estamos removendo toda a \u00e1rvore na m\u00e3o, n\u00f3s devemos chamar este m\u00e9todo.</p>\n<h2 id=\"integrating-with-model-layers\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-model-layers\"></a>Integrando com um Modelo de Camadas </h2>\n<p>Embora seja geralmente recomendado a utiliza\u00e7\u00e3o de um fluxo de dados unidirecional como <a href=\"/react/lifting-state-up\">React state</a>, <a class=\"external-link\" href=\"https://facebook.github.io/flux/\">Flux</a>, ou <a class=\"external-link\" href=\"https://redux.js.org/\">Redux</a>, componentes React podem utilizar um modelo de camadas de outros frameworks e bibliotecas.</p>\n<h3 id=\"using-backbone-models-in-react-components\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#using-backbone-models-in-react-components\"></a>Utilizando Modelos Backbone em Componentes React </h3>\n<p>A maneira mais simples de se consumir modelos e cole\u00e7\u00f5es do <a class=\"external-link\" href=\"https://backbonejs.org/\">Backbone</a> para um componente React, \u00e9 assinar os v\u00e1rios eventos de mudan\u00e7a e manualmente for\u00e7ar uma atualiza\u00e7\u00e3o.</p>\n<p>Componentes respons\u00e1veis por renderizar modelos devem escutar os eventos de <code class=\"language-javascript\">'change'</code>, enquanto componentes respons\u00e1veis por renderizar cole\u00e7\u00f5es devem escutar os eventos de <code class=\"language-javascript\">'add'</code> e <code class=\"language-javascript\">'remove'</code>. Em ambos os casos, chame <a href=\"/react/react-component#forceupdate\"><code class=\"language-javascript\">this.forceUpdate()</code></a> para re-renderizar o componente com o novo dado.</p>\n<p>No exemplo abaixo, o componente <code class=\"language-javascript\">List</code> renderiza uma cole\u00e7\u00e3o do Backbone, usando o componente <code class=\"language-javascript\">Item</code> para renderizar cada item em individual.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'remove'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'remove'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">model</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>model<span class=\"token punctuation\">.</span>cid<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">model</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>model<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/GmrREm?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<h3 id=\"extracting-data-from-backbone-models\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#extracting-data-from-backbone-models\"></a>Extraindo Dados dos Modelos do Backbone </h3>\n<p>A abordagem acima, necessita que os componentes React tenham conhecimento dos modelos e cole\u00e7\u00f5es do Backbone. Se voc\u00ea planeja depois migrar para outra solu\u00e7\u00e3o de gerenciamento de dados, voc\u00ea pode querer concentrar o conhecimento sobre Backbone em poucas partes do c\u00f3digo.</p>\n<p>Uma solu\u00e7\u00e3o para isto, \u00e9 extrair os atributos do model como simples dados, e manter essa l\u00f3gica em um \u00fanico local. A seguir, temos um <a href=\"/react/higher-order-components\">higher-order component</a> que extrai todos os atributos de um model Backbone para o estado, passando o dado para o componente em volta.</p>\n<p>Desta forma, apenas o componente de ordem superior (<em>higher-order component</em>) precisa saber sobre implementa\u00e7\u00f5es internas do model Backbone, e mais componentes da aplica\u00e7\u00e3o podem continuar agn\u00f3sticos do Backbone.</p>\n<p>No exemplo abaixo, n\u00f3s vamos fazer uma c\u00f3pia dos atributos do model para formar o estado inicial. Vamos assinar o evento de <code class=\"language-javascript\">change</code> (e cancelar no unmounting), e quando isto acontecer, n\u00f3s atualizamos o estado com os atuais atributos do modelo. Finalmente, nos certificamos de que se a propriedade <code class=\"language-javascript\">model</code> mudar, n\u00f3s n\u00e3o esqueceremos de cancelar a assinatura do modelo antigo, e assinar para o novo.</p>\n<p>Note que este exemplo n\u00e3o pretende ser extenso no que diz respeito a trabalhar com Backbone, mas isto deve dar uma id\u00e9ia de como abordar de uma maneira mais gen\u00e9rica:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">connectToBackboneModel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BackboneComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">.</span>model <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">        nextProps<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">model</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">changedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> propsExceptModel <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> propsExceptModel<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>propsExceptModel<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para demonstrar, n\u00f3s vamos conectar um componente React <code class=\"language-javascript\">NameInput</code> em um modelo Backbone, e atualizar seu atributo <code class=\"language-javascript\">firstName</code> toda vez que o valor do input mudar:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NameInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      My name is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> BackboneNameInput <span class=\"token operator\">=</span> <span class=\"token function\">connectToBackboneModel</span><span class=\"token punctuation\">(</span>NameInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firstName'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BackboneNameInput</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">model</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">handleChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span></span></span>    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>Model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Frodo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Example</span></span> <span class=\"token attr-name\">model</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>model<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/PmWwwa?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Esta t\u00e9cnica n\u00e3o se limita para o Backbone. Voc\u00ea pode utilizar React com qualquer modelo de biblioteca, assinando as mudan\u00e7as nos m\u00e9todos de ciclo de vida e, opcionalmente, copiando os dados para o estado local do React.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/integrating-with-other-libraries.md\">Edit this page</a></p></div></article>", "path": "/react/integrating-with-other-libraries", "nav": ["/react/higher-order-components", "/react/jsx-in-depth"]}, {"key": "JSX In Depth", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Fundamentalmente, JSX \u00e9 somente um a\u00e7\u00facar sint\u00e1tico (syntactic sugar) para a fun\u00e7\u00e3o <code class=\"language-javascript\">React.createElement(component, props, ...children)</code>. O c\u00f3digo JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">shadowSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Clique aqui\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>\u00e9 compilado para:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  MyButton<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> shadowSize<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Clique aqui'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Voc\u00ea tamb\u00e9m pode fechar a tag imediatamente se n\u00e3o tiver elementos filhos. Ent\u00e3o:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sidebar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>\u00e9 compilado para:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>className<span class=\"token operator\">:</span> <span class=\"token string\">'sidebar'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Se voc\u00ea quiser testar como um JSX em espec\u00edfico \u00e9 convertido em JavaScript, voc\u00ea pode usar <a class=\"external-link\" href=\"https://babeljs.io/repl/#?presets=react&amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA\">o compilador online do Babel</a>.</p>\n<h2 id=\"specifying-the-react-element-type\"><a class=\"anchor\" href=\"/react/jsx-in-depth#specifying-the-react-element-type\"></a>Especificando o Tipo do Elemento React </h2>\n<p>A primeira parte de uma tag JSX determina o tipo do elemento React.</p>\n<p>Tipos que come\u00e7am com letra mai\u00fascula se referem a um componente React. Essas tags s\u00e3o compiladas para uma refer\u00eancia direta da vari\u00e1vel nomeada, ent\u00e3o se voc\u00ea usar a express\u00e3o JSX <code class=\"language-javascript\">&lt;Foo /&gt;</code>, <code class=\"language-javascript\">Foo</code> tem que estar no escopo.</p>\n<h3 id=\"react-must-be-in-scope\"><a class=\"anchor\" href=\"/react/jsx-in-depth#react-must-be-in-scope\"></a>O React Tem Que Estar no Escopo</h3>\n<p>J\u00e1 que JSX compila em chamadas para <code class=\"language-javascript\">React.createElement</code>, a biblioteca <code class=\"language-javascript\">React</code> tamb\u00e9m tem sempre que estar no escopo do seu c\u00f3digo JSX.</p>\n<p>Por exemplo, os dois imports s\u00e3o necess\u00e1rios nesse c\u00f3digo, apesar de que <code class=\"language-javascript\">React</code> e <code class=\"language-javascript\">CustomButton</code> n\u00e3o s\u00e3o referenciados diretamente pelo JavaScript:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> CustomButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./CustomButton'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">WarningButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// return React.createElement(CustomButton, {color: 'red'}, null);</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomButton</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se voc\u00ea n\u00e3o usa um bundler JavaScript e carrega o React de uma tag <code class=\"language-javascript\">&lt;script&gt;</code>, ele j\u00e1 estar\u00e1 no escopo global como <code class=\"language-javascript\">React</code>.</p>\n<h3 id=\"using-dot-notation-for-jsx-type\"><a class=\"anchor\" href=\"/react/jsx-in-depth#using-dot-notation-for-jsx-type\"></a>Usando Nota\u00e7\u00e3o Pontuada (<em>Dot Notation</em>) Para Tipos JSX </h3>\n<p>Voc\u00ea tamb\u00e9m pode se referir a um componente React usando nota\u00e7\u00e3o pontuada no pr\u00f3prio JSX. Isso \u00e9 conveniente se voc\u00ea tem um \u00fanico m\u00f3dulo que exporta v\u00e1rios componentes React. Por exemplo, se <code class=\"language-javascript\">MyComponents.DatePicker</code> \u00e9 um componente, voc\u00ea pode us\u00e1-lo diretamente no JSX como:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MyComponents <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">DatePicker</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DatePicker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Imagine um datepicker </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> aqui.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">BlueDatePicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponents.DatePicker</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"user-defined-components-must-be-capitalized\"><a class=\"anchor\" href=\"/react/jsx-in-depth#user-defined-components-must-be-capitalized\"></a>Componentes Defindos pelo Usu\u00e1rio Precisam Come\u00e7ar com Letras Mai\u00fasculas </h3>\n<p>Quando um tipo elemento come\u00e7ar com uma letra min\u00fascula, ele se refere a um componente interno <code class=\"language-javascript\">&lt;div&gt;</code> ou <code class=\"language-javascript\">&lt;span&gt;</code> e resulta na string <code class=\"language-javascript\">'div'</code> ou <code class=\"language-javascript\">'span'</code> passada para <code class=\"language-javascript\">React.createElement</code>. Tipos que come\u00e7am com letra mai\u00fascula como <code class=\"language-javascript\">&lt;Foo /&gt;</code> s\u00e3o compilados para <code class=\"language-javascript\">React.createElement(Foo)</code> e correspondem a um componente definido ou importado no seu arquivo JavaScript.</p>\n<p>N\u00f3s recomendamos nomear componentes com letras mai\u00fasculas. Se voc\u00ea realmente tiver um componente que comece com letra min\u00fascula, guarde-o em uma vari\u00e1vel que comece com letra mai\u00fascula antes de us\u00e1-lo no JSX.</p>\n<p>Por exemplo, esse c\u00f3digo n\u00e3o vai rodar como esperado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Errado! Isso \u00e9 um componente e devia come\u00e7ar com letra mai\u00fascula:</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// Correto! Esse uso da &lt;div&gt; \u00e9 leg\u00edtimo porque div \u00e9 uma tag HTML v\u00e1lida:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Errado! O React pensa que &lt;hello /&gt; \u00e9 uma tag HTML porque n\u00e3o come\u00e7a com letra mai\u00fascula:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hello</span> <span class=\"token attr-name\">toWhat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para consertar isso, n\u00f3s vamos renomear <code class=\"language-javascript\">hello</code> para <code class=\"language-javascript\">Hello</code> e usar <code class=\"language-javascript\">&lt;Hello /&gt;</code> quando nos referirmos a ele:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Correto! Isso \u00e9 um componente e deve come\u00e7ar com letra mai\u00fascula:</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// Correto! Esse uso da &lt;div&gt; \u00e9 leg\u00edtimo porque div \u00e9 uma tag HTML v\u00e1lida:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Correto! O React sabe que &lt;Hello /&gt; \u00e9 um componente porque ele come\u00e7a com letra mai\u00fascula.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">toWhat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"choosing-the-type-at-runtime\"><a class=\"anchor\" href=\"/react/jsx-in-depth#choosing-the-type-at-runtime\"></a>Escolhendo o Tipo em Tempo de Execu\u00e7\u00e3o </h3>\n<p>Voc\u00ea n\u00e3o pode usar uma express\u00e3o gen\u00e9rica como tipo do elemento React. Se voc\u00ea realmente quiser usar uma express\u00e3o gen\u00e9rica para indicar tipo do elemento, guarde-a em uma vari\u00e1vel que comece com letra mai\u00fascula primeiro. Isso geralmente \u00e9 usado quando voc\u00ea quer renderizar um componente diferente baseado em uma prop:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PhotoStory<span class=\"token punctuation\">,</span> VideoStory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./stories'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  photo<span class=\"token operator\">:</span> PhotoStory<span class=\"token punctuation\">,</span>\n  video<span class=\"token operator\">:</span> VideoStory\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Story</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Errado! O tipo do JSX n\u00e3o pode ser uma express\u00e3o.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>components<span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>storyType<span class=\"token punctuation\">]</span> story<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>story<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para consertar isso, n\u00f3s vamos guardar o tipo em uma vari\u00e1vel come\u00e7ando com letra mai\u00fascula primeiro:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PhotoStory<span class=\"token punctuation\">,</span> VideoStory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./stories'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  photo<span class=\"token operator\">:</span> PhotoStory<span class=\"token punctuation\">,</span>\n  video<span class=\"token operator\">:</span> VideoStory\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Story</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Correto! O tipo JSX pode ser uma vari\u00e1vel come\u00e7ando com letra mai\u00fascula.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> SpecificStory <span class=\"token operator\">=</span> components<span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>storyType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpecificStory</span></span> <span class=\"token attr-name\">story</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>story<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"props-in-jsx\"><a class=\"anchor\" href=\"/react/jsx-in-depth#props-in-jsx\"></a>Props no JSX </h2>\n<p>Existem v\u00e1rias maneiras de especificar uma prop em JSX.</p>\n<h3 id=\"javascript-expressions-as-props\"><a class=\"anchor\" href=\"/react/jsx-in-depth#javascript-expressions-as-props\"></a>Express\u00f5es JavaScript como Props </h3>\n<p>Voc\u00ea pode passar qualquer express\u00e3o JavaScript como prop, colocando ela em volta de <code class=\"language-javascript\">{}</code>. Por exemplo, nesse JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">foo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Para <code class=\"language-javascript\">MyComponent</code>, o valor de <code class=\"language-javascript\">props.foo</code> ser\u00e1 <code class=\"language-javascript\">10</code> porque a express\u00e3o <code class=\"language-javascript\">1 + 2 + 3 + 4</code> \u00e9 calculada.</p>\n<p>Declara\u00e7\u00f5es <code class=\"language-javascript\">if</code> e loops <code class=\"language-javascript\">for</code> n\u00e3o s\u00e3o express\u00f5es em JavaScript, ent\u00e3o elas n\u00e3o podem ser usadas no JSX diretamente. Ao inv\u00e9s disso, voc\u00ea pode coloc\u00e1-las no c\u00f3digo ao redor. Por exemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberDescriber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> description<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    description <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">even</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    description <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">odd</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> is an </span><span class=\"token punctuation\">{</span>description<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> number</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voc\u00ea pode aprender mais sobre <a href=\"/react/conditional-rendering\">renderiza\u00e7\u00e3o condicional</a> e <a href=\"/react/lists-and-keys\">loops</a> nas se\u00e7\u00f5es correspondentes.</p>\n<h3 id=\"string-literals\"><a class=\"anchor\" href=\"/react/jsx-in-depth#string-literals\"></a>String Literals </h3>\n<p>Voc\u00ea pode passar uma string literal como uma prop. Essas duas express\u00f5es JSX s\u00e3o equivalentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello world<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Quando voc\u00ea passa uma string literal, seu valor \u00e9 um HTML n\u00e3o escapado. Ent\u00e3o essas duas express\u00f5es s\u00e3o equivalentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token entity named-entity\">&amp;lt;</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'&lt;3'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>O comportamento geralmente n\u00e3o \u00e9 relevante. Ele s\u00f3 \u00e9 mencionado aqui pela integridade.</p>\n<h3 id=\"props-default-to-true\"><a class=\"anchor\" href=\"/react/jsx-in-depth#props-default-to-true\"></a>Props com Valor Padr\u00e3o \u201cTrue\u201d </h3>\n<p>Se voc\u00ea n\u00e3o passar nenhum valor para a prop, seu valor padr\u00e3o ser\u00e1 <code class=\"language-javascript\">true</code>. Essas duas express\u00f5es JSX s\u00e3o equivalentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyTextBox</span></span> <span class=\"token attr-name\">autocomplete</span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyTextBox</span></span> <span class=\"token attr-name\">autocomplete</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>No geral, n\u00f3s n\u00e3o recomendamos <em>n\u00e3o</em> a passagem de um valor para uma prop, porque pode ser confundido com <a class=\"external-link\" href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015\">abrevia\u00e7\u00e3o de objeto do ES6</a> <code class=\"language-javascript\">{foo}</code> que \u00e9 a abrevia\u00e7\u00e3o de <code class=\"language-javascript\">{foo: foo}</code> em vez de <code class=\"language-javascript\">{foo: true}</code>. Esse comportamente s\u00f3 est\u00e1 ai para estar de acordo com o comportamento do HTML.</p>\n<h3 id=\"spread-attributes\"><a class=\"anchor\" href=\"/react/jsx-in-depth#spread-attributes\"></a>Atributos com Spread </h3>\n<p>Se voc\u00ea j\u00e1 tiver <code class=\"language-javascript\">props</code> como um objeto e quiser passar em JSX, voc\u00ea pode usar <code class=\"language-javascript\">...</code> como uma sintaxe \u201cspread\u201d para passar todo o objeto props. Esses dois componentes s\u00e3o equivalentes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token attr-name\">firstName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Ben<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">lastName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hector<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Ben'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Hector'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voc\u00ea tamb\u00e9m pode escolher props espec\u00edficas que seu componente ir\u00e1 consumir enquanto passa todas as outras props usando a sintaxe de propaga\u00e7\u00e3o.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> kind<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> kind <span class=\"token operator\">===</span> <span class=\"token string\">\"primary\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"PrimaryButton\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"SecondaryButton\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>other<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">kind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Hello World!</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No exemplo acima, a prop <code class=\"language-javascript\">kind</code> \u00e9 consumida em seguran\u00e7a <em>e n\u00e3o</em> \u00e9 passada para o elemento <code class=\"language-javascript\">&lt;button&gt;</code> no DOM.\nTodas as outras props s\u00e3o passadas pelo objeto <code class=\"language-javascript\">...other</code> tornando esse componente bastante flex\u00edvel. Voc\u00ea pode ver que ele passa as props <code class=\"language-javascript\">onClick</code> e <code class=\"language-javascript\">children</code>.</p>\n<p>Atributos spread podem ser \u00fateis mas eles facilitam a passagem de props desnecess\u00e1rias para componentes que n\u00e3o precisam delas ou a passagem de atributos HTML inv\u00e1lidos para o DOM. N\u00f3s recomendamos us\u00e1-lo com modera\u00e7\u00e3o.  </p>\n<h2 id=\"children-in-jsx\"><a class=\"anchor\" href=\"/react/jsx-in-depth#children-in-jsx\"></a>Elementos Filhos em JSX </h2>\n<p>Nas express\u00f5es JSX que cont\u00eam tags para abrir e tags para fechar, o conte\u00fado entre essas tags \u00e9 passado na forma de uma prop especial <code class=\"language-javascript\">props.children</code>. Existem diversas formas diferentes de passar essa prop children:</p>\n<h3 id=\"string-literals-1\"><a class=\"anchor\" href=\"/react/jsx-in-depth#string-literals-1\"></a>String Literals </h3>\n<p>Voc\u00ea pode por uma string entre tags que abrem e tags que fecham e <code class=\"language-javascript\">props.children</code> ser\u00e1 essa string. Isso \u00e9 \u00fatil para v\u00e1rios dos elementos HTML internos. Por exemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Esse \u00e9 um JSX v\u00e1lido e <code class=\"language-javascript\">props.children</code> em <code class=\"language-javascript\">MyComponent</code> ser\u00e1 a string <code class=\"language-javascript\">\"Hello world!\"</code>. O HTML n\u00e3o \u00e9 escapado, ent\u00e3o voc\u00ea pode escrever JSX da mesma maneira que voc\u00ea escreveria HTML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>Esse \u00e9 um HTML v\u00e1lido <span class=\"token entity named-entity\">&amp;amp;</span> e JSX ao mesmo tempo.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>O JSX remove espa\u00e7os em branco no in\u00edcio e no final da linha. Ele tamb\u00e9m remove linhas vazias. Linhas novas adjacentes a tags s\u00e3o removidas; novas linhas que ocorrem no meio de uma string literal s\u00e3o condensadas em um \u00fanico espa\u00e7o. Ent\u00e3o todos esses s\u00e3o renderizados da mesma forma:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello World\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello\n  World\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n  Hello World\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h3 id=\"jsx-children\"><a class=\"anchor\" href=\"/react/jsx-in-depth#jsx-children\"></a>Elemento Filhos JSX </h3>\n<p>Voc\u00ea pode fornecer mais elementos JSX como elementos filhos. Isso \u00e9 \u00fatil para exibir componentes aninhados:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContainer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyFirstComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MySecondComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContainer</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Voc\u00ea pode misturar elementos filhos de tipos diferentes, assim voc\u00ea pode usar string literals com elementos filhos JSX. Essa \u00e9 outra forma em que o JSX \u00e9 como o HTML, ent\u00e3o isso \u00e9 ao mesmo tempo um HTML e um JSX v\u00e1lido:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  Aqui est\u00e1 uma lista:\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Item 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Item 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Um componente React pode retornar um array de elementos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// N\u00e3o h\u00e1 necessidade de envolver uma lista de itens em um elemento extra!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// N\u00e3o esque\u00e7a das keys :)</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">First item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>B<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Second item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>C<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Third item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"javascript-expressions-as-children\"><a class=\"anchor\" href=\"/react/jsx-in-depth#javascript-expressions-as-children\"></a>Express\u00f5es JavaScript como Elementos Filhos </h3>\n<p>Voc\u00ea pode passar express\u00f5es JavaScript como elementos filhos, envolvendo elas com <code class=\"language-javascript\">{}</code>. Por exemplo, essas express\u00f5es s\u00e3o equivalentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Isso \u00e9 geralmente \u00fatil para renderizar uma lista de express\u00f5es JSX de um tamanho arbitr\u00e1rio. Por exemplo, isso renderiza uma lista HTML:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Item</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'finish doc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'submit pr'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nag dan to review'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">message</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Express\u00f5es JavaScript podem ser misturadas com outros tipos de elementos filhos. Isso \u00e9 geralmente \u00fatil para templates de string:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>addressee<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"functions-as-children\"><a class=\"anchor\" href=\"/react/jsx-in-depth#functions-as-children\"></a>Fun\u00e7\u00f5es como Elementos Filhos </h3>\n<p>Normalmente, express\u00f5es JavaScript inseridas no JSX v\u00e3o ser avaliadas em uma string, um elemento React ou uma lista dessas coisas. No entando, <code class=\"language-javascript\">props.children</code> funciona como qualquer outra prop podendo passar qualquer tipo de dado, n\u00e3o somente os tipos que o React sabe renderizar. Por exemplo, se voc\u00ea tem um componente customizado, voc\u00ea pode faz\u00ea-lo receber um callback na forma de um <code class=\"language-javascript\">props.children</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Chama o callback do elemento filho numTimes para produzir um componente repetido</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> props<span class=\"token punctuation\">.</span>numTimes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ListOfTenThings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Repeat</span></span> <span class=\"token attr-name\">numTimes</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Esse \u00e9 o item </span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> na lista </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Repeat</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Elementos filhos passados a um componente customizado podem ser qualquer coisa, contanto que aquele componente transforme-os em algo que o React possa entender antes de renderiz\u00e1-lo. Esse tipo de uso n\u00e3o \u00e9 comum, mas funciona se voc\u00ea quiser estender o que o JSX \u00e9 capaz.</p>\n<h3 id=\"booleans-null-and-undefined-are-ignored\"><a class=\"anchor\" href=\"/react/jsx-in-depth#booleans-null-and-undefined-are-ignored\"></a>Booleans, Null, e Undefined s\u00e3o Ignorados </h3>\n<p><code class=\"language-javascript\">false</code>, <code class=\"language-javascript\">null</code>, <code class=\"language-javascript\">undefined</code>, e <code class=\"language-javascript\">true</code> s\u00e3o elementos filhos v\u00e1lidos. Eles somente n\u00e3o renderizam. Essas express\u00f5es JSX v\u00e3o todas renderizar da mesma forma::</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Isso pode ser \u00fatil para renderizar condicionalmente elementos React. Esse JSX renderiza o componente <code class=\"language-javascript\">&lt;Header /&gt;</code> apenas se <code class=\"language-javascript\">showHeader</code> for <code class=\"language-javascript\">true</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>showHeader <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Um problema \u00e9 que alguns <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">valores \u201cfalsy\u201d</a>, como o n\u00famero <code class=\"language-javascript\">0</code>, ainda s\u00e3o renderizados pelo React. Por exemplo, esse c\u00f3digo n\u00e3o vai se comportar como voc\u00ea espera porque <code class=\"language-javascript\">0</code> ser\u00e1 printado quando <code class=\"language-javascript\">props.messages</code> for um array vazio:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageList</span></span> <span class=\"token attr-name\">messages</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Para consertar isso, tenha certeza de que a express\u00e3o antes do <code class=\"language-javascript\">&amp;&amp;</code> \u00e9 sempre booleana:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageList</span></span> <span class=\"token attr-name\">messages</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>De modo inverso, se voc\u00ea quer que um valor como <code class=\"language-javascript\">false</code>, <code class=\"language-javascript\">true</code>, <code class=\"language-javascript\">null</code>, ou <code class=\"language-javascript\">undefined</code> apare\u00e7a na sa\u00edda, voc\u00ea tem que <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#String_conversion\">convert\u00ea-lo para uma string</a> primeiro:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  Minha vari\u00e1vel JavaScript \u00e9 </span><span class=\"token punctuation\">{</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>myVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/jsx-in-depth.md\">Edit this page</a></p></div></article>", "path": "/react/jsx-in-depth", "nav": ["/react/integrating-with-other-libraries", "/react/optimizing-performance"]}, {"key": "Otimizando o Desempenho", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Internamente, o React usa diversas t\u00e9cnicas inteligentes para minimizar o n\u00famero de opera\u00e7\u00f5es custosas de DOM que s\u00e3o necess\u00e1rias para alterar a UI. Para muitas aplica\u00e7\u00f5es, utilizar React far\u00e1 com que elas tenham uma r\u00e1pida interface sem fazer muito esfor\u00e7o para otimizar performance. No entanto, existem diversas maneiras para acelerar sua aplica\u00e7\u00e3o React.</p>\n<h2 id=\"use-the-production-build\"><a class=\"anchor\" href=\"/react/optimizing-performance#use-the-production-build\"></a>Use a build de produ\u00e7\u00e3o </h2>\n<p>Se voc\u00ea est\u00e1 fazendo benchmarking ou tendo problemas de performance em suas aplica\u00e7\u00f5es React, tenha certeza que voc\u00ea est\u00e1 testando com a build de produ\u00e7\u00e3o.</p>\n<p>Por padr\u00e3o, o React inclui diversos avisos \u00fateis. Esses avisos s\u00e3o muito \u00fateis em desenvolvimento. Contudo, eles tornam o React maior e mais lento, ent\u00e3o voc\u00ea precisa ter certeza que est\u00e1 usando a vers\u00e3o de produ\u00e7\u00e3o quando faz a publica\u00e7\u00e3o de seu app.</p>\n<p>Se voc\u00ea n\u00e3o tem certeza se seu processo de build est\u00e1 configurado corretamente, voc\u00ea pode verificar instalando a extens\u00e3o <a class=\"external-link\" href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React Developer Tools para o Chrome</a>. Se voc\u00ea visitar um site que usa React em produ\u00e7\u00e3o, o \u00edcone ter\u00e1 uma cor de fundo escura:</p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/d0f767f80866431ccdec18f200ca58f1/0a47e/devtools-prod.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/d0f767f80866431ccdec18f200ca58f1/0a47e/devtools-prod.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Se voc\u00ea visitar um site com React em modo de desenvolvimento, o \u00edcone ter\u00e1 um fundo vermelho:</p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/e434ce2f7e64f63e597edf03f4465694/0a47e/devtools-dev.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/e434ce2f7e64f63e597edf03f4465694/0a47e/devtools-dev.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>\u00c9 esperado que voc\u00ea use o modo de desenvolvimento enquanto trabalha em seu app, e o modo de produ\u00e7\u00e3o quando publicar ele para os usu\u00e1rios.</p>\n<p>Voc\u00ea ir\u00e1 encontrar instru\u00e7\u00f5es para construir seu app para produ\u00e7\u00e3o abaixo.</p>\n<h3 id=\"create-react-app\"><a class=\"anchor\" href=\"/react/optimizing-performance#create-react-app\"></a>Criando um app React (Create React App) </h3>\n<p>Se seu projeto \u00e9 constru\u00eddo com <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">npm run build</code></pre></div>\n<p>Isto ir\u00e1 criar uma build de produ\u00e7\u00e3o para seu app na pasta <code class=\"language-javascript\">build/</code> de seu projeto.</p>\n<p>Lembre que isto \u00e9 somente necess\u00e1rio antes de publicar para produ\u00e7\u00e3o. Para desenvolvimento normal, use <code class=\"language-javascript\">npm start</code>.</p>\n<h3 id=\"single-file-builds\"><a class=\"anchor\" href=\"/react/optimizing-performance#single-file-builds\"></a>Builds de \u00fanico arquivo </h3>\n<p>N\u00f3s oferecemos vers\u00f5es de produ\u00e7\u00e3o prontas do React e React DOM com arquivos \u00fanicos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@17/umd/react.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@17/umd/react-dom.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Lembre que somente arquivos React terminados com <code class=\"language-javascript\">.production.min.js</code> s\u00e3o adequados para produ\u00e7\u00e3o.</p>\n<h3 id=\"brunch\"><a class=\"anchor\" href=\"/react/optimizing-performance#brunch\"></a>Brunch </h3>\n<p>Para uma build de produ\u00e7\u00e3o do Brunch mais eficiente, instale o plugin <a class=\"external-link\" href=\"https://github.com/brunch/terser-brunch\"><code class=\"language-javascript\">terser-brunch</code></a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\"># Se voc\u00ea usa npm\nnpm install --save-dev terser-brunch\n\n# Se voc\u00ea usa Yarn\nyarn add --dev terser-brunch</code></pre></div>\n<p>Ent\u00e3o, para criar uma build de produ\u00e7\u00e3o, adicione o argumento <code class=\"language-javascript\">-p</code> no comando <code class=\"language-javascript\">build</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">brunch build -p</code></pre></div>\n<p>Lembre que voc\u00ea somente precisa fazer isso para builds de produ\u00e7\u00e3o. Voc\u00ea n\u00e3o deve passar o argumento <code class=\"language-javascript\">-p</code> ou aplicar esse plugin em desenvolvimento, porque ele ir\u00e1 esconder avisos \u00fateis do React e far\u00e1 as builds mais lentas.</p>\n<h3 id=\"browserify\"><a class=\"anchor\" href=\"/react/optimizing-performance#browserify\"></a>Browserify </h3>\n<p>Para uma build de produ\u00e7\u00e3o do Browserify mais eficiente, instale alguns plugins:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\"># Se voc\u00ea usa npm\nnpm install --save-dev envify terser uglifyify\n\n# Se voc\u00ea usa Yarn\nyarn add --dev envify terser uglifyify</code></pre></div>\n<p>Para criar uma build de produ\u00e7\u00e3o, tenha certeza que voc\u00ea adicionou esses transforms <strong>(a ordem faz diferen\u00e7a):</strong></p>\n<ul>\n<li>O <a class=\"external-link\" href=\"https://github.com/hughsk/envify\"><code class=\"language-javascript\">envify</code></a> assegura que o ambiente que a build est\u00e1 configurado \u00e9 o correto. Torne ele global (<code class=\"language-javascript\">-g</code>).</li>\n<li>O <a class=\"external-link\" href=\"https://github.com/hughsk/uglifyify\"><code class=\"language-javascript\">uglifyify</code></a> remove os imports de desenvolvimento. Torna ele global tamb\u00e9m (<code class=\"language-javascript\">-g</code>).</li>\n<li>Finalmente, o bundle gerado \u00e9 enviado para o <a class=\"external-link\" href=\"https://github.com/terser-js/terser\"><code class=\"language-javascript\">terser</code></a> para enxutar (<a class=\"external-link\" href=\"https://github.com/hughsk/uglifyify#motivationusage\">entenda o porqu\u00ea</a>).</li>\n</ul>\n<p>Por exemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">browserify ./index.js \\\n  -g [ envify --NODE_ENV production ] \\\n  -g uglifyify \\\n  | terser --compress --mangle &gt; ./bundle.js</code></pre></div>\n<p>Lembre que voc\u00ea somente precisar fazer isso para builds de produ\u00e7\u00e3o. Voc\u00ea n\u00e3o deve aplicar esses plugins em desenvolvimento porque eles v\u00e3o esconder avisos \u00fateis do React, e far\u00e3o as builds mais lentas.</p>\n<h3 id=\"rollup\"><a class=\"anchor\" href=\"/react/optimizing-performance#rollup\"></a>Rollup </h3>\n<p>Para uma build de produ\u00e7\u00e3o do Rollup mais eficiente, instale alguns plugins:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token comment\"># Se voc\u00ea usa npm</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-terser\n\n<span class=\"token comment\"># Se voc\u00ea usa Yarn</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-terser</code></pre></div>\n<p>Para criar uma build de produ\u00e7\u00e3o, tenha certeza que voc\u00ea adicionou esses plugins, <strong>(a ordem faz diferen\u00e7a)</strong></p>\n<ul>\n<li>O <a class=\"external-link\" href=\"https://github.com/rollup/rollup-plugin-replace\"><code class=\"language-javascript\">replace</code></a> assegura que o ambiente em que a build est\u00e1 configurado \u00e9 o correto.</li>\n<li>O <a class=\"external-link\" href=\"https://github.com/rollup/rollup-plugin-commonjs\"><code class=\"language-javascript\">commonjs</code></a> fornece suporte para CommonJS no Rollup.</li>\n<li>O <a class=\"external-link\" href=\"https://github.com/TrySound/rollup-plugin-terser\"><code class=\"language-javascript\">terser</code></a> comprime e enxuta o bundle final.</li>\n</ul>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup-plugin-replace'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'process.env.NODE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup-plugin-commonjs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup-plugin-terser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Para um exemplo completo de setup <a class=\"external-link\" href=\"https://gist.github.com/Rich-Harris/cb14f4bc0670c47d00d191565be36bf0\">veja esse gist</a>.</p>\n<p>Lembre que voc\u00ea somente precisa fazer isso para builds de produ\u00e7\u00e3o. Voc\u00ea n\u00e3o deve aplicar o <code class=\"language-javascript\">terser</code> ou o <code class=\"language-javascript\">replace</code> com o valor de <code class=\"language-javascript\">'production'</code>em desenvolvimento porque eles v\u00e3o esconder avisos \u00fateis do React, e far\u00e3o as builds mais lentas.</p>\n<h3 id=\"webpack\"><a class=\"anchor\" href=\"/react/optimizing-performance#webpack\"></a>webpack </h3>\n<div class=\"blockquote\">\n<strong>Observa\u00e7\u00e3o:</strong>\n<p>Se voc\u00ea est\u00e1 usando Create React App, por favor siga <a href=\"/react/optimizing-performance#create-react-app\">as instru\u00e7\u00f5es acima</a>.<br/>\nEsta se\u00e7\u00e3o \u00e9 somente relevante se voc\u00ea configura o webpack diretamente.</p>\n</div>\n<p>O Webpack v4+ ir\u00e1 diminuir seu c\u00f3digo por padr\u00e3o no modo de produ\u00e7\u00e3o.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> TerserPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'terser-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n  optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    minimizer<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TerserPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/* op\u00e7\u00f5es adicionais aqui */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Voc\u00ea pode aprender mais sobre isso na <a class=\"external-link\" href=\"https://webpack.js.org/guides/production/\">documenta\u00e7\u00e3o do webpack</a>.</p>\n<p>Lembre que voc\u00ea somente precisa fazer isso para builds de produ\u00e7\u00e3o. Voc\u00ea n\u00e3o deve aplicar <code class=\"language-javascript\">TerserPlugin</code> em desenvolvimento porque ele vai esconder avisos \u00fateis do React, e far\u00e3o as builds mais lentas.</p>\n<h2 id=\"profiling-components-with-the-devtools-profiler\"><a class=\"anchor\" href=\"/react/optimizing-performance#profiling-components-with-the-devtools-profiler\"></a>Analisando componentes com o DevTools Profiler </h2>\n<p><code class=\"language-javascript\">react-dom</code> 16.5+ e <code class=\"language-javascript\">react-native</code> 0.57+ fornecem melhorias nas capacidades de analise em modo de desenvolvimento com o React DevTools Profiler.</p>\n<p>Uma vis\u00e3o geral do Profiler pode ser encontrada nesse artigo <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/09/10/introducing-the-react-profiler.html\">\u201cIntroducing the React Profiler\u201d</a>.\nUm v\u00eddeo com o passo a passo do profiler tamb\u00e9m est\u00e1 <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=nySib7ipZdk\">dispon\u00edvel no YouTube</a>.</p>\n<p>Se voc\u00ea ainda n\u00e3o tem o React DevTools instalado, voc\u00ea pode encontr\u00e1-lo aqui:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\">Extens\u00e3o para Chrome</a></li>\n<li><a class=\"external-link\" href=\"https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/\">Extens\u00e3o para Firefox</a></li>\n<li><a class=\"external-link\" href=\"https://www.npmjs.com/package/react-devtools\">Pacote separado</a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Observa\u00e7\u00e3o</strong>\n<p>Uma analise de uma build de produ\u00e7\u00e3o do <code class=\"language-javascript\">react-dom</code> est\u00e1 dispon\u00edvel como <code class=\"language-javascript\">react-dom/profiling</code>.\nLeia mais sobre como usar esse pacote no <a class=\"external-link\" href=\"https://fb.me/react-profiling\">fb.me/react-profiling</a></p>\n</div>\n<div class=\"blockquote\">\n<strong>Observa\u00e7\u00e3o</strong>\n<p>Antes do React 17, usamos o padr\u00e3o <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\">User Timing API</a> para criar o perfil de componentes com a guia de desempenho do chrome.\nPara um passo a passo mais detalhado, confira <a class=\"external-link\" href=\"https://calibreapp.com/blog/react-performance-profiling-optimization\">este artigo de Ben Schwarz</a>.</p>\n</div>\n<h2 id=\"virtualize-long-lists\"><a class=\"anchor\" href=\"/react/optimizing-performance#virtualize-long-lists\"></a>Virtualizando Longas Listas </h2>\n<p>Se sua aplica\u00e7\u00e3o renderiza longas listas de informa\u00e7\u00e3o (milhares ou centenas de linhas), n\u00f3s recomendamos usar uma t\u00e9cnica conhecida como \u201cwindowing\u201d. Esta t\u00e9cnica somente renderiza um pequeno conjunto de suas linhas e pode reduzir drasticamente o tempo que ele leva para re-renderizar os componentes bem como o n\u00famero de n\u00f3s criados no DOM.</p>\n<p><a class=\"external-link\" href=\"https://react-window.now.sh/\">react-window</a> e <a class=\"external-link\" href=\"https://bvaughn.github.io/react-virtualized/\">react-virtualized</a> s\u00e3o as bibliotecas de windowing mais populares. Eles fornecem diversos componentes reutiliz\u00e1veis para exibir listas, grids e informa\u00e7\u00f5es tabulares. Voc\u00ea pode tamb\u00e9m pode criar seu pr\u00f3prio componente de windowing, como <a class=\"external-link\" href=\"https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3\">o Twitter fez</a>, se voc\u00ea quer algo mais espec\u00edfico para sua aplicac\u00e3o.</p>\n<h2 id=\"avoid-reconciliation\"><a class=\"anchor\" href=\"/react/optimizing-performance#avoid-reconciliation\"></a>Evite recompila\u00e7\u00e3o </h2>\n<p>O React cria e mant\u00e9m sua representa\u00e7\u00e3o interna da UI renderizada. Ele inclui os elementos do React que voc\u00ea retorna dos seus componentes. Essa representa\u00e7\u00e3o evita que o React crie n\u00f3s no DOM e acesse os existes sem necessidade, al\u00e9m do que essas opera\u00e7\u00f5es podem ser mais lentas do que opera\u00e7\u00f5es em objetos JavaScript. Algumas vezes esse processo \u00e9 referenciado como \u201cvirtual DOM\u201d, mas ele funciona da mesma forma no React Native.</p>\n<p>Quando uma propriedade ou estado de um componente \u00e9 alterado, o React decide se uma atualiza\u00e7\u00e3o do DOM atual \u00e9 necess\u00e1ria comparando o novo elemento retornado com o antigo. Quando eles n\u00e3o forem iguais, o React ir\u00e1 alterar o DOM.</p>\n<p>Embora o React somente altere os n\u00f3s de DOM alterados, o re-rendering ainda leva algum tempo. Em muitos casos isso n\u00e3o \u00e9 um problema, mas se a lentid\u00e3o \u00e9 percept\u00edvel, voc\u00ea pode aumentar velocidade dele sobrescrevendo a fun\u00e7\u00e3o de lifecycle <code class=\"language-javascript\">shouldComponentUpdate</code>, na qual \u00e9 chamada antes do processo de re-rendering come\u00e7ar. A implementa\u00e7\u00e3o padr\u00e3o dessa fun\u00e7\u00e3o retorna <code class=\"language-javascript\">true</code>, deixando o React performar a altera\u00e7\u00e3o:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se voc\u00ea sabe que em algumas situa\u00e7\u00f5es seu componente n\u00e3o precisa ser alterado, voc\u00ea pode retornar <code class=\"language-javascript\">false</code> no <code class=\"language-javascript\">shouldComponentUpdate</code> ao inv\u00e9s, para pular o todo o processo de renderiza\u00e7\u00e3o, incluindo a chamada de <code class=\"language-javascript\">render()</code> nesse componente e seus filhos:</p>\n<p>Na maioria dos casos, ao inv\u00e9s de escrever <code class=\"language-javascript\">shouldComponentUpdate()</code> na m\u00e3o, voc\u00ea pode herdar do <a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">React.PureComponent</code></a>. Ele equivale a implementa\u00e7\u00e3o do <code class=\"language-javascript\">shouldComponentUpdate()</code> com uma compara\u00e7\u00e3o rasa entre as anteriores e novas propriedades e estados </p>\n<h2 id=\"shouldcomponentupdate-in-action\"><a class=\"anchor\" href=\"/react/optimizing-performance#shouldcomponentupdate-in-action\"></a>shouldComponentUpdate em A\u00e7\u00e3o </h2>\n<p>Abaixo podemos ver uma sub-\u00e1rvore de componentes. Para cada uma, <code class=\"language-javascript\">SCU</code> define o que o <code class=\"language-javascript\">shouldComponentUpdate</code> retorna, e <code class=\"language-javascript\">vDOMEq</code> indica se os elementos renderizados pelo React s\u00e3o equivalentes. Finalmente, o c\u00edrculo de cores indica se o componente tinha de ser reconciliado ou n\u00e3o.</p>\n<figure>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/5ee1bdf4779af06072a17b7a0654f6db/cd039/should-component-update.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/5ee1bdf4779af06072a17b7a0654f6db/cd039/should-component-update.png\">Image link</a>\n</span>\n</span>\n</a>\n</figure>\n<p>J\u00e1 que <code class=\"language-javascript\">shouldComponentUpdate</code> retornou <code class=\"language-javascript\">false</code> na sub-\u00e1rvore iniciada no C2, React n\u00e3o tentou renderizar C2, e por consequ\u00eancia n\u00e3o invocou <code class=\"language-javascript\">shouldComponentUpdate</code> no C4 e C5.</p>\n<p>Para C1 e C3, <code class=\"language-javascript\">shouldComponentUpdate</code> retornou <code class=\"language-javascript\">true</code>, ent\u00e3o o React teve que descer at\u00e9 as folhas para chec\u00e1-los. Para o C6 <code class=\"language-javascript\">shouldComponentUpdate</code> retornou <code class=\"language-javascript\">true</code>, e j\u00e1 que os elementos renderizados n\u00e3o s\u00e3o iguais, o React teve que alterar o DOM.</p>\n<p>O \u00faltimo caso interessante \u00e9 o C8. React teve que renderizar este componente, mas j\u00e1 que os elementos que ele retornou eram iguais aos previamente renderizados, ele n\u00e3o teve que alterar o DOM. </p>\n<p>Note que o React somente teve de fazer muta\u00e7\u00f5es no DOM para o C6, no qual era inevit\u00e1vel. Para C8, ele abortou comparando os elementos React renderizados, e para a sub-\u00e1rvore do C2 e C7, ele nem mesmo teve que comparar os elementos pois abortou no <code class=\"language-javascript\">shouldComponentUpdate</code>, e <code class=\"language-javascript\">render</code> n\u00e3o foi chamado.</p>\n<h2 id=\"examples\"><a class=\"anchor\" href=\"/react/optimizing-performance#examples\"></a>Exemplos </h2>\n<p>Se seu componente muda quando as vari\u00e1veis <code class=\"language-javascript\">props.color</code> ou <code class=\"language-javascript\">state.count</code> mudam, voc\u00ea poderia ter um <code class=\"language-javascript\">shouldComponentUpdate</code> que checa isso:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> nextProps<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">!==</span> nextState<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Count: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nesse c\u00f3digo, <code class=\"language-javascript\">shouldComponentUpdate</code> s\u00f3 est\u00e1 checando se houve alguma mudan\u00e7a no <code class=\"language-javascript\">props.color</code> ou <code class=\"language-javascript\">state.count</code>. Se esses valores n\u00e3o s\u00e3o alterados, o componente n\u00e3o \u00e9 alterado. Se seu componente ficou mais complexo, voc\u00ea pode usar um padr\u00e3o similar fazendo uma compara\u00e7\u00e3o rasa (shallow comparison) entre todos os fields de <code class=\"language-javascript\">props</code> e <code class=\"language-javascript\">state</code> para determinar se o componente deve ser atualizado. Esse padr\u00e3o \u00e9 comum o suficiente para que o React forne\u00e7a um helper para usar essa l\u00f3gica - apenas herde de <code class=\"language-javascript\">React.PureComponent</code>. Ent\u00e3o, essa \u00e9 uma maneira mais simples de alcan\u00e7ar a mesma coisa:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Count: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Na maior parte das vezes, voc\u00ea pode usar <code class=\"language-javascript\">React.PureComponent</code> em vez de escrever seu pr\u00f3prio <code class=\"language-javascript\">shouldComponentUpdate</code>. Ele somente faz compara\u00e7\u00f5es rasas, ent\u00e3o voc\u00ea n\u00e3o pode us\u00e1-lo caso as props ou state tenham sido alteradas de uma  maneira que a compara\u00e7\u00e3o rasa n\u00e3o iria detectar.</p>\n<p>Isso pode ser um problema com estruturas mais complexas. Por exemplo, vamos dizer que voc\u00ea quer um componente <code class=\"language-javascript\">ListOfWords</code> para renderizar uma lista de palavras separas por v\u00edrgulas, com um componente pai <code class=\"language-javascript\">WordAdder</code> que deixa voc\u00ea clicar em um bot\u00e3o para adicionar uma palavra para a lista. Esse c\u00f3digo <em>n\u00e3o</em> faz o trabalho corretamente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListOfWords</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WordAdder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      words<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'marklar'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Essa parte \u00e9 um padr\u00e3o ruim e causa um bug</span>\n    <span class=\"token keyword\">const</span> words <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">;</span>\n    words<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marklar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>words<span class=\"token operator\">:</span> words<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListOfWords</span></span> <span class=\"token attr-name\">words</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O problema \u00e9 que <code class=\"language-javascript\">PureComponent</code> vai fazer um compara\u00e7\u00e3o simples entre o valores antigos e novos de <code class=\"language-javascript\">this.props.words</code>. J\u00e1 que esse c\u00f3digo muta a lista de <code class=\"language-javascript\">words</code> no m\u00e9todo <code class=\"language-javascript\">handleClick</code> do <code class=\"language-javascript\">WordAdder</code>, os antigos e novos valores de <code class=\"language-javascript\">this.props.words</code> ser\u00e3o comparados como iguais, mesmo que as atuais palavras da lista tenham mudado. A <code class=\"language-javascript\">ListOfWords</code> n\u00e3o ir\u00e1 alterar ainda que haja novas palavras que deveriam ser renderizadas.</p>\n<h2 id=\"the-power-of-not-mutating-data\"><a class=\"anchor\" href=\"/react/optimizing-performance#the-power-of-not-mutating-data\"></a>O Poder de N\u00e3o Mutar Dados </h2>\n<p>A maneira mais simples desse problema n\u00e3o acontecer \u00e9 evitar mutar valores que s\u00e3o usados como propriedades ou estado. Por exemplo, o m\u00e9todo <code class=\"language-javascript\">handleClick</code> abaixo poderia ser reescrito usando <code class=\"language-javascript\">concat</code> como:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    words<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'marklar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ES6 suporta a <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">sintaxe de espalhamento</a> no qual pode fazer isso mais f\u00e1cil. Se voc\u00ea est\u00e1 usando Creact React App, esta sintaxe \u00e9 dispon\u00edvel por padr\u00e3o.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    words<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">,</span> <span class=\"token string\">'marklar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Voc\u00ea pode tamb\u00e9m reescrever o c\u00f3digo que muta os objetos para evitar muta\u00e7\u00e3o, em uma maneira similar. Por exemplo, vamos dizer que n\u00f3s temos um objeto chamado <code class=\"language-javascript\">colormap</code> e n\u00f3s queremos escrever uma fun\u00e7\u00e3o que muda <code class=\"language-javascript\">colormap.right</code> para <code class=\"language-javascript\">'blue'</code>. Voc\u00ea poderia escrever:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateColorMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">colormap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  colormap<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para escrever isso sem mutar o objeto original, n\u00f3s poder\u00edamos usar o m\u00e9todo <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateColorMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">colormap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> colormap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>right<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">updateColorMap</code> agora retorna um novo objeto, ao inv\u00e9s de mutar o valor o antigo. <code class=\"language-javascript\">Object.assign</code> \u00e9 ES6 e requer um polyfill.</p>\n<p><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Object spread syntax</a> facilita a atualiza\u00e7\u00e3o de objetos sem muta\u00e7\u00e3o:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateColorMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">colormap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>colormap<span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este recurso foi adicionado ao JavaScript no ES2018.</p>\n<p>Se voc\u00ea est\u00e1 usando Create React App, ambos <code class=\"language-javascript\">Object.assign</code> e a sintaxe de espalhador de objeto est\u00e3o dispon\u00edveis por padr\u00e3o.</p>\n<p>Quando voc\u00ea lida com objetos profundamente aninhados, atualiz\u00e1-los de maneira imut\u00e1vel pode parecer complicado. Se voc\u00ea enfrentar esse problema, consulte <a class=\"external-link\" href=\"https://github.com/mweststrate/immer\">Immer</a> or <a class=\"external-link\" href=\"https://github.com/kolodny/immutability-helper\">immutability-helper</a>. Essas bibliotecas permitem escrever c\u00f3digo altamente leg\u00edvel sem perder os benef\u00edcios da imutabilidade.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/optimizing-performance.md\">Edit this page</a></p></div></article>", "path": "/react/optimizing-performance", "nav": ["/react/jsx-in-depth", "/react/portals"]}, {"key": "Portals", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Portals fornece uma forma elegante de renderizar um elemento filho dentro de um n\u00f3 DOM que existe fora da hierarquia do componente pai.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span></code></pre></div>\n<p>O primeiro argumento (<code class=\"language-javascript\">child</code>) \u00e9 qualquer <a href=\"/react/react-component#render\">elemento filho React renderiz\u00e1vel</a>, como um elemento, string ou fragmento. O segundo argumento (<code class=\"language-javascript\">container</code>) \u00e9 um elemento DOM.</p>\n<h2 id=\"usage\"><a class=\"anchor\" href=\"/react/portals#usage\"></a>Utiliza\u00e7\u00e3o </h2>\n<p>Normalmente, quando retornamos um elemento pelo m\u00e9todo render de um componente ele \u00e9 montado dentro do DOM como um filho do n\u00f3 pai mais pr\u00f3ximo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// React monta uma nova div e renderiza o filho dentro dela</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Entretanto, em algumas situa\u00e7\u00f5es \u00e9 \u00fatil inserir um elemento filho em um local diferente no DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// React *n\u00e3o* cria uma nova div. Ele renderiza os filhos dentro do `domNode`.</span>\n  <span class=\"token comment\">// `domNode` \u00e9 qualquer n\u00f3 DOM v\u00e1lido, independente da sua localiza\u00e7\u00e3o no DOM.</span>\n  <span class=\"token keyword\">return</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    domNode</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Um caso t\u00edpico do uso de portals \u00e9 quando um componente pai tem o estilo <code class=\"language-javascript\">overflow: hidden</code> ou <code class=\"language-javascript\">z-index</code>, mas voc\u00ea precisa que o filho visualmente \u201csaia\u201d desse cont\u00eainer. Por exemplo, caixas de di\u00e1logo, hovercards e tooltips.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Quando estiver trabalhando com portals, lembre-se que <a href=\"/react/accessibility#programmatically-managing-focus\">tratar o evento focus</a> se torna muito importante.</p>\n<p>No caso dos modals, assegure-se que todos possam interagir com eles seguindo as pr\u00e1ticas descritas em <a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal\">WAI-ARIA Modal Authoring Practices</a>.</p>\n</div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/yzMaBd\"><strong>Experimente no CodePen</strong></a></p>\n<h2 id=\"event-bubbling-through-portals\"><a class=\"anchor\" href=\"/react/portals#event-bubbling-through-portals\"></a>Propaga\u00e7\u00e3o de Eventos Atrav\u00e9s do Portals </h2>\n<p>Apesar de um portal poder estar em qualquer lugar na \u00e1rvore DOM, seu comportamento \u00e9 como o de qualquer outro elemento React filho. Funcionalidades como contexto funcionam da mesma forma independente se o filho \u00e9 um portal, pois o portal ainda existe na <em>\u00e1rvore React</em> independentemente da posi\u00e7\u00e3o que esteja na <em>\u00e1rvore DOM</em>.</p>\n<p>Isso inclui a propaga\u00e7\u00e3o de eventos. Um evento disparado dentro de um portal ser\u00e1 propagado para os elementos antecessores da <em>\u00e1rvore React</em>, mesmo que estes n\u00e3o sejam antecessores na <em>\u00e1rvore DOM</em>.\nConsidere a seguinte estrutura HTML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Um componente <code class=\"language-javascript\">Pai</code> em <code class=\"language-javascript\">#app-root</code> ser\u00e1 capaz de capturar a propaga\u00e7\u00e3o de um evento n\u00e3o tratado vindo do n\u00f3 irm\u00e3o <code class=\"language-javascript\">#modal-root</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Estes dois cont\u00eaineres s\u00e3o irm\u00e3os no DOM</span>\n<span class=\"token keyword\">const</span> appRoot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> modalRoot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'modal-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Modal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// O elemento portal \u00e9 inserido na \u00e1rvore DOM depois que</span>\n    <span class=\"token comment\">// os componentes filhos de `Modal` s\u00e3o montados, o que significa que os filhos</span>\n    <span class=\"token comment\">// ser\u00e3o montados em um n\u00f3 DOM separado. Se um componente</span>\n    <span class=\"token comment\">// filho precisa ser colocado na \u00e1rvore DOM</span>\n    <span class=\"token comment\">// imediatamente quando \u00e9 montado, por exemplo para medir um</span>\n    <span class=\"token comment\">// n\u00f3 DOM ou usar 'autoFocus' em um descendente, adicione</span>\n    <span class=\"token comment\">// state ao Modal e renderize o filho apenas quando o Modal</span>\n    <span class=\"token comment\">// estiver inserido na \u00e1rvore DOM.</span>\n    modalRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    modalRoot<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>clicks<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Isso \u00e9 disparado quando o bot\u00e3o no filho \u00e9 clicado,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// atualizando o state do componente Pai, mesmo que o filho</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// n\u00e3o seja um descendente direto no DOM.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      clicks<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>clicks <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">N\u00famero de cliques: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicks<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Abra o DevTools do navegador</span>\n<span class=\"token plain-text\">          para observar que o bot\u00e3o</span>\n<span class=\"token plain-text\">          n\u00e3o \u00e9 um filho da div</span>\n<span class=\"token plain-text\">          com o onClick.</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// O evento de clique nesse bot\u00e3o ir\u00e1 propagar para o ascendente,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// porque o atributo 'onClick' n\u00e3o est\u00e1 definido</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Clicar</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> appRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/jGBWpE\"><strong>Experimente no CodePen</strong></a></p>\n<p>Capturar um evento propagado a partir de um portal em um componente pai permite o desenvolvimento de abstra\u00e7\u00f5es mais flex\u00edveis que n\u00e3o dependem diretamente de portals. Por exemplo, se voc\u00ea renderizar um componente <code class=\"language-javascript\">&lt;Modal /&gt;</code>, o componente pai pode capturar seus eventos independentemente se s\u00e3o implementados usando portals.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/portals.md\">Edit this page</a></p></div></article>", "path": "/react/portals", "nav": ["/react/optimizing-performance", "/react/profiler"]}, {"key": "Profiler", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>O componente <code class=\"language-javascript\">Profiler</code> mede a frequ\u00eancia de renderiza\u00e7\u00e3o de uma aplica\u00e7\u00e3o React e o \u201ccusto\u201d dessa renderiza\u00e7\u00e3o.\nSeu objetivo  \u00e9 ajudar a identificar partes de aplica\u00e7\u00e3o que s\u00e3o lentas e podem se beneficiar de <a href=\"/react/hooks-faq#how-to-memoize-calculations\">otimiza\u00e7\u00f5es como a memoriza\u00e7\u00e3o</a></p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>O uso do <code class=\"language-javascript\">Profiler</code> adiciona uma sobrecarga de processamento, sendo portanto <strong>desabilitada no <a href=\"/react/optimizing-performance#use-the-production-build\"><em>build</em> de produ\u00e7\u00e3o</a></strong>.</p>\n<p>Ao optar pelo uso do <code class=\"language-javascript\">Profiler</code> em produ\u00e7\u00e3o, o React provisiona um <em>build</em> especial de produ\u00e7\u00e3o com o <code class=\"language-javascript\">Profiler</code> habilitado.\nLeia mais sobre como utilizar esse <em>build</em> em <a class=\"external-link\" href=\"https://fb.me/react-profiling\">fb.me/react-profiling</a></p>\n</div>\n<h2 id=\"usage\"><a class=\"anchor\" href=\"/react/profiler#usage\"></a>Utiliza\u00e7\u00e3o </h2>\n<p>O <code class=\"language-javascript\">Profiler</code> pode ser adicionado em qualquer lugar dentro da \u00e1rvore de React para mensurar o custo de renderiza\u00e7\u00e3o dessa parte da \u00e1rvore.\nEle exige duas <em>props</em>: um <code class=\"language-javascript\">id</code> (formato <em>string</em>) e uma fun\u00e7\u00e3o de callback <code class=\"language-javascript\">onRender</code>, o qual o react executa no momento em que a \u00e1rvore \u201cenvia\u201d uma atualiza\u00e7\u00e3o.</p>\n<p>Por exemplo, para executar um <em>profile</em> em um componente de <code class=\"language-javascript\">Navigation</code> e seus descendentes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Navigation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Navigation</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Main</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>M\u00faltiplos componentes <code class=\"language-javascript\">Profiler</code> podem ser utilizados para mensurar diferentes partes de uma aplica\u00e7\u00e3o:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Navigation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Navigation</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Main<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Main</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Componentes <code class=\"language-javascript\">Profiler</code> tamb\u00e9m podem estar aninhados para mensurar diferentes componentes em uma mesma sub\u00e1rvore:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Panel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Panel</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PreviewPane<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PreviewPane</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Panel</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Apesar do <code class=\"language-javascript\">Profiler</code> ser um componente leve, deve ser usado apenas quando necess\u00e1rio; cada uso traz uma carga adicional de CPU e mem\u00f3ria para uma aplica\u00e7\u00e3o.</p>\n</div>\n<h2 id=\"onrender-callback\"><a class=\"anchor\" href=\"/react/profiler#onrender-callback\"></a><em>Callback</em> <code class=\"language-javascript\">onRender</code> </h2>\n<p>O <code class=\"language-javascript\">Profiler</code> requer uma fun\u00e7\u00e3o <code class=\"language-javascript\">onRender</code> como <em>prop</em>.\nO React chama essa fun\u00e7\u00e3o em todo momento que o a \u00e1rvore dentro dele \u201cenvia\u201d uma atualiza\u00e7\u00e3o.\nEla recebe par\u00e2metros descrevendo o que foi renderizado e quanto tempo levou.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">onRenderCallback</span><span class=\"token punctuation\">(</span>\n  id<span class=\"token punctuation\">,</span> <span class=\"token comment\">// o prop \"id\" da \u00e1rvore Profiler que acabou de atualizar </span>\n  phase<span class=\"token punctuation\">,</span> <span class=\"token comment\">//  \"mount\" (se a \u00e1rvore acabou de ser montada) ou \"update\" (se foi renderizada novamente)</span>\n  actualDuration<span class=\"token punctuation\">,</span> <span class=\"token comment\">// tempo gasto renderizando a atualiza\u00e7\u00e3o enviada</span>\n  baseDuration<span class=\"token punctuation\">,</span> <span class=\"token comment\">// tempo estimado para renderizar totalmente a sub\u00e1rvore sem memoriza\u00e7\u00e3o</span>\n  startTime<span class=\"token punctuation\">,</span> <span class=\"token comment\">// quando o React come\u00e7ou renderizar essa atualiza\u00e7\u00e3o</span>\n  commitTime<span class=\"token punctuation\">,</span> <span class=\"token comment\">// quando o React enviou essa atualiza\u00e7\u00e3o</span>\n  interactions <span class=\"token comment\">// um Set de intera\u00e7\u00f5es pertencentes \u00e2 essa atualiza\u00e7\u00e3o</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Agregue ou registre os tempos de renderiza\u00e7\u00e3o..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vamos ver no detalhe cada uma dessas <em>props</em>:</p>\n<ul>\n<li><strong><code class=\"language-javascript\">id: string</code></strong> -\nO <code class=\"language-javascript\">id</code> da \u00e1rvore Profiler que acabou de atualizar.\nIsso pode ser utilizado para identificar qual parte da \u00e1rvore foi atualizada se voc\u00ea est\u00e1 utilizando m\u00faltiplos componentes <code class=\"language-javascript\">Profiler</code>.</li>\n<li><strong><code class=\"language-javascript\">phase: \"mount\" | \"update\"</code></strong> -\nIdentifica se a \u00e1rvore que foi montada pela primeira vez ou renderizada novamente por uma mudan\u00e7a na <em>props</em>, no estado ou por <em>hooks</em>.</li>\n<li><strong><code class=\"language-javascript\">actualDuration: number</code></strong> -\nTempo desprendido renderiza\u0144do o <code class=\"language-javascript\">Profiler</code> e seus descententes para a atualiza\u00e7\u00e3o corrente.\nIsso indica o qu\u00e3o bem essa sub\u00e1rvore faz o uso da memoriza\u00e7\u00e3o (e.g. <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a>, <a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a>, <a href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate</code></a>).\nIdealmente esse valor deve diminuir significativamente depois da montagem inicial visto que os descendentes s\u00f3 precisar\u00e3o renderizar novamente se as suas <em>props</em> espec\u00edficas forem alteradas.</li>\n<li><strong><code class=\"language-javascript\">baseDuration: number</code></strong> -\nA dura\u00e7\u00e3o da renderiza\u00e7\u00e3o mais recente para cada componente individual dentro da \u00e1rvore <code class=\"language-javascript\">Profiler</code>.\nEsse valor estima um pior cen\u00e1rio de renderiza\u00e7\u00e3o (por exemplo, a montagem inicial de uma \u00e1rvore sem memoriza\u00e7\u00e3o).</li>\n<li><strong><code class=\"language-javascript\">startTime: number</code></strong> -\n<em>Timestamp</em> de quando o React come\u00e7ou a renderizar a atualiza\u00e7\u00e3o corrente.</li>\n<li><strong><code class=\"language-javascript\">commitTime: number</code></strong> -\n<em>Timestamp</em> de quando o React enviou a atualiza\u00e7\u00e3o corrente.\nEsse valor \u00e9 compartilhado entre todos os componentes <code class=\"language-javascript\">Profiler</code> em um envio, permitindo o agrupamento deles se desej\u00e1vel.</li>\n<li><strong><code class=\"language-javascript\">interactions: Set</code></strong> -\n<em>Set</em> de <a class=\"external-link\" href=\"https://fb.me/react-interaction-tracing\">\u201cintera\u00e7\u00f5es\u201d</a> que estavam sendo rastreadas quando a atualiza\u00e7\u00e3o foi agendada (por exemplo, quando um <code class=\"language-javascript\">render</code> ou <code class=\"language-javascript\">setState</code> foi invocado).</li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Intera\u00e7\u00f5es podem ser usadas para identificar a causa de uma atualiza\u00e7\u00e3o, apesar da API para rastre\u00e1-las ainda ser experimental.</p>\n<p>Aprenda mais sobre em <a class=\"external-link\" href=\"https://fb.me/react-interaction-tracing\">fb.me/react-interaction-tracing</a></p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reference-profiler.md\">Edit this page</a></p></div></article>", "path": "/react/profiler", "nav": ["/react/portals", "/react/react-without-es6"]}, {"key": "React sem ES6", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Normalmente voc\u00ea definiria um componente React como uma simples classe JavaScript:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se voc\u00ea ainda n\u00e3o usa ES6, voc\u00ea pode usar o m\u00f3dulo <code class=\"language-javascript\">create-react-class</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> createReactClass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Greeting <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A API de classes do ES6 \u00e9 similar a <code class=\"language-javascript\">createReactClass()</code> com algumas exce\u00e7\u00f5es.</p>\n<h2 id=\"declaring-default-props\"><a class=\"anchor\" href=\"/react/react-without-es6#declaring-default-props\"></a>Declarando Props padr\u00e3o </h2>\n<p>Com fun\u00e7\u00f5es e classes ES6, <code class=\"language-javascript\">defaultProps</code> \u00e9 definido como uma propriedade do pr\u00f3prio componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nGreeting<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com <code class=\"language-javascript\">createReactClass()</code>, voc\u00ea precisa definir <code class=\"language-javascript\">getDefaultProps()</code> como uma fun\u00e7\u00e3o no objeto que \u00e9 passado como par\u00e2metro:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Greeting <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getDefaultProps</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"setting-the-initial-state\"><a class=\"anchor\" href=\"/react/react-without-es6#setting-the-initial-state\"></a>Configurando o State Inicial </h2>\n<p>Em classes ES6, voc\u00ea pode definir o state inicial ao definir <code class=\"language-javascript\">this.state</code> no construtor:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Com <code class=\"language-javascript\">createReactClass()</code>, voc\u00ea deve passar um m\u00e9todo <code class=\"language-javascript\">getInitialState</code> que retorna o state inicial:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Counter <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"autobinding\"><a class=\"anchor\" href=\"/react/react-without-es6#autobinding\"></a>Autobinding </h2>\n<p>Em componentes React declarados como classes ES6, m\u00e9todos seguem a mesma sem\u00e2ntica que classes ES6 regulares. Isso significa que elas n\u00e3o fazem bind do <code class=\"language-javascript\">this</code> da inst\u00e2ncia. Voc\u00ea ter\u00e1 que explicitamente usar <code class=\"language-javascript\">.bind(this)</code> no construtor:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>message<span class=\"token operator\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Esta linha \u00e9 importante!</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Devido `this.handleClick` ter sido amarrado, podemos us\u00e1-lo como um controlador de evento.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Say hello\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Com <code class=\"language-javascript\">createReactClass()</code>, isso n\u00e3o \u00e9 necess\u00e1rio por que ele faz bind de todos os m\u00e9todos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> SayHello <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>message<span class=\"token operator\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">handleClick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Say hello\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Isso significa que escrever classes ES6 necessita um pouco mais de c\u00f3digo boilerplate para controladores de eventos. Por outro lado, \u00e9 levemente mais perform\u00e1tico em aplica\u00e7\u00f5es de larga escala.</p>\n<p>Se voc\u00ea acha que c\u00f3digo boilerplate pouco atraente, voc\u00ea pode ativar a proposta de <a class=\"external-link\" href=\"https://babeljs.io/docs/plugins/transform-class-properties/\">Class Properties</a> <strong>experimentais</strong> com Babel:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>message<span class=\"token operator\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// AVISO: essa sintaxe \u00e9 experimental!</span>\n  <span class=\"token comment\">// Usar uma arrow function aqui j\u00e1 faz bind do m\u00e9todo</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Say hello\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por favor, notem que a sintaxe acima \u00e9 <strong>experimental</strong> e que a sintaxe pode mudar ou ainda, a proposta pode n\u00e3o ser implementada na linguagem.</p>\n<p>Se voc\u00ea prefere jogar seguro, voc\u00ea tem algumas op\u00e7\u00f5es:</p>\n<ul>\n<li>Fazer bind do m\u00e9todo no construtor.</li>\n<li>Usar arrow functions, e.g. <code class=\"language-javascript\">onClick={(e) =&gt; this.handleClick(e)}</code>.</li>\n<li>Continuar usando <code class=\"language-javascript\">createReactClass</code>.</li>\n</ul>\n<h2 id=\"mixins\"><a class=\"anchor\" href=\"/react/react-without-es6#mixins\"></a>Mixins </h2>\n<div class=\"blockquote\">\n<strong>Notas:</strong>\n<p>ES6 foi lan\u00e7ado sem suporte a mixins. Portanto, n\u00e3o h\u00e1 suporte para mixins quando voc\u00ea usar React com classes ES6.</p>\n<p><strong>N\u00f3s tamb\u00e9m descobrimos in\u00fameros problemas na base de c\u00f3digo usando mixins, <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">e n\u00e3o recomendamos usar em novos c\u00f3digos</a>.</strong></p>\n<p>Esta se\u00e7\u00e3o existe somente para refer\u00eancia.</p>\n</div>\n<p>Algumas vezes, componentes muito diferentes podem compartilhar alguma funcionalidade. Chamamos estes casos de <a class=\"external-link\" href=\"https://pt.wikipedia.org/wiki/Cross-cutting_concern\">cross-cutting concerns</a>. <code class=\"language-javascript\">createReactClass</code> permite que voc\u00ea use um sistema legado de <code class=\"language-javascript\">mixins</code> para isso.</p>\n<p>Um caso de uso comum \u00e9 um componente que quer se atualizar em um intervalo de tempo. \u00c9 f\u00e1cil de usar o <code class=\"language-javascript\">setInterval()</code>, mas \u00e9 importante do cancelar o intervalo quando voc\u00ea n\u00e3o precisa mais dele para economizar mem\u00f3ria. React fornece <a href=\"/react/react-component#the-component-lifecycle\">lifecycle methods</a> que permitem que voc\u00ea saiba quando um componente est\u00e1 prestes a ser criado ou destru\u00eddo. Vamos criar um <em>mixin</em> simples que usa esses m\u00e9todos para fornecer uma funcionalidade f\u00e1cil de <code class=\"language-javascript\">setInterval()</code> que ser\u00e1 limpa automaticamente quando seu componente for destru\u00eddo.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> SetIntervalMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">componentWillMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">setInterval</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">componentWillUnmount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>clearInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> createReactClass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> TickTock <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mixins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>SetIntervalMixin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Use o mixin</span>\n  <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>seconds<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">componentDidMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Chamada de um m\u00e9todo no mixin</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">tick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>seconds<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        React est\u00e1 rodando por </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> segundos.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TickTock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se um componente est\u00e1 usando m\u00faltiplos mixins e diversos desses mixins definem o mesmo lifecycle method (por ex. diversos mixins querem fazer uma limpeza quando um componente \u00e9 destru\u00eddo), todos os lifecycle methods ter\u00e3o garantia de serem chamados. M\u00e9todos definidos em um mixin s\u00e3o executados na ordem em que foram listados, seguidos por uma chamada de m\u00e9todo no componente.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/react-without-es6.md\">Edit this page</a></p></div></article>", "path": "/react/react-without-es6", "nav": ["/react/profiler", "/react/react-without-jsx"]}, {"key": "React sem JSX", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>JSX n\u00e3o \u00e9 obrigat\u00f3rio para utilizar o React. Utilizar o React sem JSX \u00e9 especialmente conveniente quando voc\u00ea n\u00e3o quer configurar compila\u00e7\u00e3o no seu ambiente de build.</p>\n<p>Cada elemento JSX \u00e9 apenas a\u00e7\u00facar sint\u00e1tico (<em>syntactic sugar</em>) para a chamada da fun\u00e7\u00e3o <code class=\"language-javascript\">React.createElement(component, props, ...children)</code>. Assim, quaisquer coisas que voc\u00ea pode fazer com JSX tamb\u00e9m podem ser feitas simplesmente com JavaScript.</p>\n<p>Por exemplo, esse c\u00f3digo escrito com JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">toWhat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>pode ser compilado para esse c\u00f3digo que n\u00e3o usa JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>toWhat<span class=\"token operator\">:</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se voc\u00ea estiver curioso para ver mais exemplos de como JSX \u00e9 convertido para JavaScript, pode checar <a class=\"external-link\" href=\"https://babeljs.io/repl/#?presets=react&amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA\">o compilador online do Babel</a>.</p>\n<p>O componente pode ser fornecido como uma string, como uma subclasse de <code class=\"language-javascript\">React.Component</code> ou  como uma fun\u00e7\u00e3o simples.</p>\n<p>Se voc\u00ea se cansar de ter que digitar sempre <code class=\"language-javascript\">React.createElement</code>, um padr\u00e3o comum \u00e9 atribuir a fun\u00e7\u00e3o \u00e0 uma vari\u00e1vel auxiliar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createElement<span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se voc\u00ea utilizar essa forma resumida de <code class=\"language-javascript\">React.createElement</code>, pode ser quase t\u00e3o conveniente de utilizar o React sem JSX.</p>\n<p>Por outro lado, voc\u00ea pode buscar por projetos da comunidade como <a class=\"external-link\" href=\"https://github.com/mlmorg/react-hyperscript\"><code class=\"language-javascript\">react-hyperscript</code></a> e <a class=\"external-link\" href=\"https://github.com/ohanhi/hyperscript-helpers\"><code class=\"language-javascript\">hyperscript-helpers</code></a> que oferecem uma sintaxe mais amig\u00e1vel.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/react-without-jsx.md\">Edit this page</a></p></div></article>", "path": "/react/react-without-jsx", "nav": ["/react/react-without-es6", "/react/reconciliation"]}, {"key": "Reconcilia\u00e7\u00e3o (Reconciliation)", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>O React prov\u00ea uma API declarativa, assim, voc\u00ea n\u00e3o precisa se preocupar em saber exatamente o que mudou em cada atualiza\u00e7\u00e3o. Isso torna mais f\u00e1cil a cria\u00e7\u00e3o de aplica\u00e7\u00f5es, apesar de n\u00e3o ser \u00f3bvia a forma como isso \u00e9 implementado no React. Este artigo explica as escolhas que fizemos no algoritmo de <em>diffing</em> para que as atualiza\u00e7\u00f5es nos componentes sejam previs\u00edveis e r\u00e1pidas o suficiente para aplica\u00e7\u00f5es de alta performance.</p>\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"/react/reconciliation#motivation\"></a>Motiva\u00e7\u00e3o </h2>\n<p>Quando utilizamos React, podemos imaginar a fun\u00e7\u00e3o <code class=\"language-javascript\">render()</code> como uma fun\u00e7\u00e3o respons\u00e1vel por gerar \u00e0 \u00e1rvore de Elementos React. Na pr\u00f3xima atualiza\u00e7\u00e3o de <code class=\"language-javascript\">state</code> ou <code class=\"language-javascript\">props</code>, a fun\u00e7\u00e3o <code class=\"language-javascript\">render()</code> retornar\u00e1 uma \u00e1rvore de Elementos React diferente. Dessa forma, o React precisar\u00e1 descobrir como ele pode atualizar a UI para sincronizar com a \u00e1rvore mais recente.</p>\n<p>Existem algumas solu\u00e7\u00f5es gen\u00e9ricas para o problema deste algoritmo de gerar o menor n\u00famero de opera\u00e7\u00f5es necess\u00e1rio para transformar uma \u00e1rvore em outra. Contudo, o <a class=\"external-link\" href=\"https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\">algoritmo de \u00faltima gera\u00e7\u00e3o</a> possui uma complexidade da ordem de O(n<sup>3</sup>), onde n \u00e9 o numero de elementos na \u00e0rvore.</p>\n<p>Se us\u00e1ssemos isso no React, exibir 1000 elementos iria requerer aproximadamente um bilh\u00e3o de compara\u00e7\u00f5es. Isso \u00e9, de longe, muito custoso. Em vez disso, o React implementa um algoritmo heur\u00edstico da ordem de O(n) baseado em duas suposi\u00e7\u00f5es:</p>\n<ol>\n<li>Dois elementos de tipos diferentes ir\u00e3o produzir \u00e1rvores diferentes.</li>\n<li>O desenvolvedor pode indicar quais elementos filhos est\u00e3o est\u00e1veis entre diferentes renderiza\u00e7\u00f5es atrav\u00e9s da propriedade <code class=\"language-javascript\">key</code></li>\n</ol>\n<p>Na pr\u00e1tica, essas suposi\u00e7\u00f5es s\u00e3o v\u00e1lidas para quase todos os casos pr\u00e1ticos.</p>\n<h2 id=\"the-diffing-algorithm\"><a class=\"anchor\" href=\"/react/reconciliation#the-diffing-algorithm\"></a>O Algoritmo de Diferencia\u00e7\u00e3o (<em>Diffing</em>) </h2>\n<p>Quando diferenciando duas \u00e1rvores, o React primeiro compara os dois elementos ra\u00edz. O comportamento \u00e9 diferente dependendo do tipo dos elementos ra\u00edz.</p>\n<h3 id=\"elements-of-different-types\"><a class=\"anchor\" href=\"/react/reconciliation#elements-of-different-types\"></a>Elementos de Tipos Diferentes </h3>\n<p>Sempre que os elementos ra\u00edz tiverem tipos diferentes, o React ir\u00e1 destruir a \u00e1rvore antiga e construir uma \u00e1rvore nova do zero. Indo de  <code class=\"language-javascript\">&lt;a&gt;</code> para <code class=\"language-javascript\">&lt;img&gt;</code>, ou de <code class=\"language-javascript\">&lt;Article&gt;</code> para <code class=\"language-javascript\">&lt;Comment&gt;</code>, ou de <code class=\"language-javascript\">&lt;Button&gt;</code> para <code class=\"language-javascript\">&lt;div&gt;</code> - qualquer uma dessas mudan\u00e7as resultar\u00e1 em uma reconstru\u00e7\u00e3o total.</p>\n<p>Quando destru\u00edmos uma \u00e1rvore, os n\u00f3s antigos do DOM s\u00e3o destru\u00eddos. Inst\u00e2ncias de componentes recebem <code class=\"language-javascript\">componentWillUnmount()</code>. Quando constru\u00edmos uma nova \u00e1rvore, novos n\u00f3s do DOM s\u00e3o inseridos no DOM. Inst\u00e2ncias de componentes recebem <code class=\"language-javascript\">UNSAFE_componentWillMount()</code> e depois <code class=\"language-javascript\">componentDidMount()</code>. Qualquer estado associado com a \u00e1rvore antiga \u00e9 perdido.</p>\n<p>Qualquer componente abaixo ir\u00e1 ser desmontado e ter seu estado destru\u00eddo.\nPor exemplo, quando diferenciando: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter</span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter</span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Isso ir\u00e1 destruir o antigo <code class=\"language-javascript\">Counter</code> e remontar um novo.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Esses m\u00e9todos s\u00e3o considerados legados e voc\u00ea deve <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evit\u00e1-los</a> no novo c\u00f3digo:</p>\n<ul>\n<li><code class=\"language-javascript\">UNSAFE_componentWillMount()</code></li>\n</ul>\n</div>\n<h3 id=\"dom-elements-of-the-same-type\"><a class=\"anchor\" href=\"/react/reconciliation#dom-elements-of-the-same-type\"></a>Elementos DOM de Mesmo Tipo </h3>\n<p>Quando comparando dois Elementos DOM React do mesmo tipo, React olhar\u00e1 para os atributos de ambos, mantendo os n\u00f3s DOM subjacentes e apenas atualizando os atributos modificados. Por exemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>before<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuff<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>after<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuff<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Comparando estes dois elementos, o React sabe que deve modificar apenas o <code class=\"language-javascript\">className</code> no n\u00f3 DOM subjacente.</p>\n<p>Quando atualizando o <code class=\"language-javascript\">style</code>, o React tamb\u00e9m sabe que deve atualizar apenas as propriedades modificadas. Por exemplo: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{color:</span> <span class=\"token attr-name\">'red',</span> <span class=\"token attr-name\"><span class=\"token namespace\">fontWeight:</span></span> <span class=\"token attr-name\">'bold'}}</span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{color:</span> <span class=\"token attr-name\">'green',</span> <span class=\"token attr-name\"><span class=\"token namespace\">fontWeight:</span></span> <span class=\"token attr-name\">'bold'}}</span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Quando convertendo entre estes dois elementos, o React sabe que precisa modificar apenas o estilo <code class=\"language-javascript\">color</code>, mas n\u00e3o o <code class=\"language-javascript\">fontWeight</code>.</p>\n<p>Depois de manipular o n\u00f3 do DOM, o React itera recursivamente sobre os filhos.</p>\n<h3 id=\"component-elements-of-the-same-type\"><a class=\"anchor\" href=\"/react/reconciliation#component-elements-of-the-same-type\"></a>Componentes de Elementos do Mesmo Tipo </h3>\n<p>Quando um componente atualiza, a inst\u00e2ncia continua a mesma, ent\u00e3o o estado \u00e9 mantido entre as renderiza\u00e7\u00f5es. O React atualiza as props das inst\u00e2ncias dos componentes subjacentes para sincronizar com o novo elemento e ent\u00e3o chama <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code>, <code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> e <code class=\"language-javascript\">componentDidUpdate()</code> na inst\u00e2ncia subjacente.</p>\n<p>Depois, o m\u00e9todo <code class=\"language-javascript\">render()</code> \u00e9 chamado e o Algoritmo de Diferencia\u00e7\u00e3o itera recursivamente no resultado anterior e no novo resultado.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Esses m\u00e9todos s\u00e3o considerados legados e voc\u00ea deve <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evit\u00e1-los</a> no novo c\u00f3digo:</p>\n<ul>\n<li><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code></li>\n<li><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code></li>\n</ul>\n</div>\n<h3 id=\"recursing-on-children\"><a class=\"anchor\" href=\"/react/reconciliation#recursing-on-children\"></a>Iterando Recursivamente nos Filhos </h3>\n<p>Por padr\u00e3o, quando iterando recursivamente nos filhos de um n\u00f3 DOM, o React apenas itera sobre ambas as listas de filhos ao mesmo tempo e gera uma muta\u00e7\u00e3o sempre que h\u00e1 uma diferen\u00e7a.</p>\n<p>Por exemplo, quando adicionado um elemento no final da lista de filhos, a convers\u00e3o entre essas duas \u00e1rvores funciona bem:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>first<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>second<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>first<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>second<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>third<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>O React ir\u00e1 sincronizar as duas \u00e1rvores <code class=\"language-javascript\">&lt;li&gt;first&lt;/li&gt;</code>, as duas \u00e1rvores <code class=\"language-javascript\">&lt;li&gt;second&lt;/li&gt;</code>, e ent\u00e3o inserir a \u00e1rvore <code class=\"language-javascript\">&lt;li&gt;third&lt;/li&gt;</code>.</p>\n<p>Se voc\u00ea implementar ingenuamente, inserir um elemento no in\u00edcio trar\u00e1 uma performance menor. Por exemplo, a convers\u00e3o entre essas duas \u00e1rvores t\u00eam um desempenho baixo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Connecticut<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>O React ir\u00e1 modificar todo filho em vez de perceber que poderia manter as sub\u00e1rvores <code class=\"language-javascript\">&lt;li&gt;Duke&lt;/li&gt;</code> e <code class=\"language-javascript\">&lt;li&gt;Villanova&lt;/li&gt;</code> intactas. Essa inefici\u00eancia poder\u00e1 ser um problema.</p>\n<h3 id=\"keys\"><a class=\"anchor\" href=\"/react/reconciliation#keys\"></a>Chaves </h3>\n<p>Para resolver esse problema, o React possui o atributo <code class=\"language-javascript\">key</code>. Quando os filhos possuem chaves, o React \u00e0s utiliza para igualar os filhos da \u00e1rvore original com os filhos da \u00e1rvore subsequente. Por exemplo, adicionando a <code class=\"language-javascript\">key</code> no nosso exemplo ineficiente acima, podemos fazer uma convers\u00e3o eficiente da \u00e1rvore:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2016<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2014<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Connecticut<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2016<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Agora o React sabe que o elemento com a chave <code class=\"language-javascript\">'2014'</code> \u00e9 o novo elemento, e os outros elementos com as chaves (<em>keys</em>) <code class=\"language-javascript\">'2015'</code> e <code class=\"language-javascript\">'2016'</code> apenas se moveram.</p>\n<p>Na pr\u00e1tica, achar uma chave (<em>key</em>) n\u00e3o \u00e9 dif\u00edcil. O elemento ao qual voc\u00ea ir\u00e1 exibir pode j\u00e1 possui um ID \u00fanico, ent\u00e3o a chave poderia ser gerada a partir do seu pr\u00f3prio dado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Quando n\u00e3o for o caso, voc\u00ea pode adicionar uma propriedade ID ao seu modelo ou utilizar um <em>hash</em> em algumas partes do dado para gerar uma chave (<em>key</em>). A chave deve ser \u00fanica apenas entre seus irm\u00e3os, e n\u00e3o \u00fanica de forma global.</p>\n<p>Como um \u00faltimo recurso, voc\u00ea pode passar o \u00edndice (<em>index</em>) do item de um array como chave. Isso pode funcionar bem para itens que nunca s\u00e3o reordenados, mas reorden\u00e1-los trar\u00e1 uma baixa performance.</p>\n<p>Reordenar pode tamb\u00e9m causar um problema com o estado do componente quando os \u00edndices (<em>indexes</em>) s\u00e3o utilizados como chaves  (<em>keys</em>). A inst\u00e2ncia do componente \u00e9 atualizada e reutilizada baseada na sua chave. Se a chave \u00e9 um \u00edndice (<em>index</em>), mover o item modifica a chave. Como resultado disso, o estado do componente para coisas como <em>inputs</em> n\u00e3o controlados podem ficar bagun\u00e7ados e atualizar de uma forma inesperada.</p>\n<p>Aqui \u00e9 <a class=\"external-link\" href=\"https://pt-br.reactjs.org//redirect-to-codepen/reconciliation/index-used-as-key\">um exemplo, de um problema que pode ser causado por usar \u00edndices como chaves</a> no CodePen, e aqui \u00e9 <a class=\"external-link\" href=\"https://pt-br.reactjs.org//redirect-to-codepen/reconciliation/no-index-used-as-key\">uma vers\u00e3o atualizada do mesmo exemplo mostrando como a n\u00e3o utiliza\u00e7\u00e3o dos \u00edndices como chaves resolve os problemas relacionados a reordena\u00e7\u00e3o, ordena\u00e7\u00e3o e adi\u00e7\u00e3o no in\u00edcio da lista</a>.</p>\n<h2 id=\"tradeoffs\"><a class=\"anchor\" href=\"/react/reconciliation#tradeoffs\"></a>Compensa\u00e7\u00f5es (<em>Tradeoffs</em>) </h2>\n<p>\u00c9 importante lembrar que o algoritmo de reconcilia\u00e7\u00e3o \u00e9 um detalhe de implementa\u00e7\u00e3o. o React poderia re-renderizar o aplicativo inteiro a cada a\u00e7\u00e3o; o resultado final seria o mesmo. Apenas para ser claro, re-renderizar neste contexto significa chamar o m\u00e9todo <code class=\"language-javascript\">render</code> para todos os componentes, isso n\u00e3o significa que o React ir\u00e1 desmontar e remont\u00e1-los. Isso significa apenas aplicar as diferen\u00e7as seguindo as regras mencionadas nas se\u00e7\u00f5es anteriores.</p>\n<p>N\u00f3s estamos regularmente refinando as heur\u00edsticas de modo a tornar mais r\u00e1pidos os casos mais comuns. Na implementa\u00e7\u00e3o atual, voc\u00ea pode dizer que uma sub\u00e1rvore foi movida para entre seus irm\u00e3os, mas n\u00e3o pode dizer que ela se moveu para qualquer outro lugar. O algoritmo ir\u00e1 re-renderizar toda a sub\u00e1rvore.</p>\n<p>Devido ao React ser baseado em heur\u00edsticas, se as suposi\u00e7\u00f5es por tr\u00e1s delas n\u00e3o encaixarem, a performance ser\u00e1 menor.</p>\n<ol>\n<li>O algoritmo n\u00e3o ir\u00e1 tentar sincronizar as sub\u00e1rvores de componentes de tipos diferentes. Se voc\u00ea perceber que est\u00e1 tentando alternar entre dois componentes de tipos diferentes com uma sa\u00edda muito similar, voc\u00ea ir\u00e1 querer que eles tenham o mesmo tipo. Na pr\u00e1tica n\u00f3s n\u00e3o achamos que isso \u00e9 um problema.</li>\n<li>Chaves devem ser est\u00e1veis, previs\u00edveis e \u00fanicas. Chaves inst\u00e1veis (como as produzidas por <code class=\"language-javascript\">Math.random()</code>) ir\u00e3o causar a re-cria\u00e7\u00e3o desnecess\u00e1ria de v\u00e1rias inst\u00e2ncias de componentes e n\u00f3s DOM, o que pode causar uma degrada\u00e7\u00e3o na performance e a perda do estado nos componentes filhos.</li>\n</ol></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reconciliation.md\">Edit this page</a></p></div></article>", "path": "/react/reconciliation", "nav": ["/react/react-without-jsx", "/react/refs-and-the-dom"]}, {"key": "Refs e o DOM", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Refs fornecem uma forma de acessar os n\u00f3s do DOM ou elementos React criados no m\u00e9todo render.</p>\n<p>Em um fluxo de dados t\u00edpico do React, as <a href=\"/react/components-and-props\">props</a> s\u00e3o a \u00fanica forma de componentes pais interagirem com seus filhos. Para modificar um componente filho, voc\u00ea ter\u00e1 que re-renderiz\u00e1-lo com as novas props. Por\u00e9m, existem alguns casos onde voc\u00ea precisa modificar imperativamente um componente filho fora do fluxo t\u00edpico de dados. O componente filho a ser modificado poderia ser uma inst\u00e2ncia de um componente React, ou ele poderia ser um elemento DOM. Para ambos os casos, o React fornece uma sa\u00edda.</p>\n<h3 id=\"when-to-use-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#when-to-use-refs\"></a>Quando Usar Refs </h3>\n<p>Existem algumas boas finalidades para o uso de refs:</p>\n<ul>\n<li>Gerenciamento de foco, sele\u00e7\u00e3o de texto, ou reprodu\u00e7\u00e3o de m\u00eddia.</li>\n<li>Engatilhar anima\u00e7\u00f5es imperativas.</li>\n<li>Integra\u00e7\u00e3o com bibliotecas DOM de terceiros.</li>\n</ul>\n<p>Evite usar refs para qualquer coisa que possa ser feita de forma declarativa.</p>\n<p>Por exemplo, ao inv\u00e9s de exp\u00f4r os m\u00e9todos <code class=\"language-javascript\">open()</code> e <code class=\"language-javascript\">close()</code> em um componente <code class=\"language-javascript\">Dialog</code>, passe a propriedade <code class=\"language-javascript\">isOpen</code> para ele.</p>\n<h3 id=\"dont-overuse-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#dont-overuse-refs\"></a>N\u00e3o Utilize Refs Excessivamente </h3>\n<p>Sua primeira atitude talvez seja usar refs para \u201cfazer as coisas acontecerem\u201d no seu app. Se este \u00e9 o caso,\ntire um momento para pensar de forma mais cr\u00edtica sobre onde o estado deveria ser mantido na hierarquia dos seus componentes. Frequentemente, isso torna claro que o lugar apropriado para \u201cmanter\u201d o estado \u00e9 no n\u00edvel mais alto da hierarquia. Veja o guia <a href=\"/react/lifting-state-up\">Subindo o Estado</a> para ver exemplos.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Os exemplos abaixo foram atualizados para usar a API <code class=\"language-javascript\">React.createRef()</code> introduzida no React 16.3. Se voc\u00ea est\u00e1 utilizando uma vers\u00e3o anterior do React, n\u00f3s recomendamos usar <a href=\"/react/refs-and-the-dom#callback-refs\">refs com callbacks</a>.</p>\n</div>\n<h3 id=\"creating-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#creating-refs\"></a>Criando Refs </h3>\n<p>Refs s\u00e3o criadas usando <code class=\"language-javascript\">React.createRef()</code> e anexadas aos elementos React por meio do atributo <code class=\"language-javascript\">ref</code>. As Refs s\u00e3o comumente atribu\u00eddas a uma propriedade de inst\u00e2ncia quando um componente \u00e9 constru\u00eddo para que ent\u00e3o elas possam ser referenciadas por todo o componente.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"accessing-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#accessing-refs\"></a>Acessando Refs </h3>\n<p>Quando uma ref \u00e9 passada para um elemento no <code class=\"language-javascript\">render</code>, uma refer\u00eancia para o n\u00f3 se torna acess\u00edvel no atributo <code class=\"language-javascript\">current</code> da ref.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span></code></pre></div>\n<p>O valor da ref difere dependendo do tipo do n\u00f3:</p>\n<ul>\n<li>Quando o atributo <code class=\"language-javascript\">ref</code> \u00e9 usado em um elemento HTML, a <code class=\"language-javascript\">ref</code> criada no construtor <code class=\"language-javascript\">React.createRef()</code> recebe um elemento DOM subjacente como a propriedade <code class=\"language-javascript\">current</code>.</li>\n<li>Quando o atributo <code class=\"language-javascript\">ref</code> \u00e9 usado em um componente de classe, o objeto <code class=\"language-javascript\">ref</code> recebe uma inst\u00e2ncia montada de um componente\nem sua propriedade <code class=\"language-javascript\">current</code>.</li>\n<li><strong>Voc\u00ea n\u00e3o pode usar o atributo <code class=\"language-javascript\">ref</code> em um componente funcional</strong>, j\u00e1 que eles n\u00e3o possuem inst\u00e2ncias.</li>\n</ul>\n<p>Os exemplos abaixo demonstram as diferen\u00e7as.</p>\n<h4 id=\"adding-a-ref-to-a-dom-element\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#adding-a-ref-to-a-dom-element\"></a>Adicionando uma Ref a um Elemento DOM </h4>\n<p>Este c\u00f3digo usa uma <code class=\"language-javascript\">ref</code> para armazenar uma refer\u00eancia a um n\u00f3 DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Cria uma ref para armazenar o elemento textInput do DOM</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Explicitamente foca o input de texto usando a API do DOM diretamente</span>\n    <span class=\"token comment\">// Nota: n\u00f3s estamos acessando o campo \"current\" para obter um n\u00f3 do DOM.</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Diz ao React que n\u00f3s queremos associar o atributo ref do &lt;input&gt;</span>\n    <span class=\"token comment\">// com o `textInput` que n\u00f3s criamos no construtor.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O React ir\u00e1 atribuir a propriedade <code class=\"language-javascript\">current</code> ao elemento DOM quando o componente for montado, e atribuir\u00e1 <code class=\"language-javascript\">null</code> de volta quando ele for desmontado. As atualiza\u00e7\u00f5es da <code class=\"language-javascript\">ref</code> acontecem antes dos m\u00e9todos de lifecycle <code class=\"language-javascript\">componentDidMount</code> ou <code class=\"language-javascript\">componentDidUpdate</code>.</p>\n<h4 id=\"adding-a-ref-to-a-class-component\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#adding-a-ref-to-a-class-component\"></a>Adicionando uma Ref a um Componente de Classe </h4>\n<p>Se n\u00f3s quisermos envolver o <code class=\"language-javascript\">CustomTextInput</code> acima para para simul\u00e1-lo sendo clicado imediatamente ap\u00f3s a montagem, n\u00f3s poderiamos usar uma ref para obter acesso ao input customizado e chamar o seu m\u00e9todo <code class=\"language-javascript\">focusTextInput</code> manualmente.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoFocusTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomTextInput</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note que isso s\u00f3 funciona se o <code class=\"language-javascript\">CustomTextInput</code> \u00e9 declarado como uma Classe:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"refs-and-function-components\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#refs-and-function-components\"></a>Refs e Componentes Funcionais </h4>\n<p>Por padr\u00e3o, <strong>voc\u00ea n\u00e3o deve usar um atributo <code class=\"language-javascript\">ref</code> em componentes funcionais</strong>, pois eles n\u00e3o possuem inst\u00e2ncias:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyFunctionComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Isto *n\u00e3o* vai funcionar!</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyFunctionComponent</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se voc\u00ea quer permitir que pessoas passem a <code class=\"language-javascript\">ref</code> para seu componente de fun\u00e7\u00e3o, voc\u00ea pode usar <a href=\"/react/forwarding-refs\"><code class=\"language-javascript\">forwardRef</code></a> (possivelmente em conjunto com <a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a>) ou voc\u00ea pode converter o componente para classe.</p>\n<p>Voc\u00ea pode, entretanto, <strong>usar um atributo <code class=\"language-javascript\">ref</code> dentro de um componente funcional</strong> contanto que voc\u00ea referencie um elemento DOM ou um componente de classe:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// textInput deve ser declarado aqui para ent\u00e3o a ref poder referenci\u00e1-lo.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> textInput <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"exposing-dom-refs-to-parent-components\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#exposing-dom-refs-to-parent-components\"></a>Expondo Refs do DOM para Componentes Pais </h3>\n<p>Em raros casos, voc\u00ea pode querer ter acesso ao n\u00f3 DOM do filho de um componente pai. Isso geralmente n\u00e3o \u00e9 recomendado, pois quebra o encapsulamento do componente, mas isso pode ser ocasionalmente \u00fatil para engatilhar foco ou medir o tamanho ou a posi\u00e7\u00e3o de um n\u00f3 DOM filho.</p>\n<p>Enquanto voc\u00ea poderia <a href=\"/react/refs-and-the-dom#adding-a-ref-to-a-class-component\">adicionar uma ref a um componente filho</a>, esta n\u00e3o \u00e9 a solu\u00e7\u00e3o ideal, pois voc\u00ea obteria apenas uma inst\u00e2ncia do componente ao inv\u00e9s de um n\u00f3 DOM. Adicionalmente, isto n\u00e3o funcionaria com componentes funcionais.</p>\n<p>Se voc\u00ea usa o React 16.3 ou acima, n\u00f3s recomendamos usar o <a href=\"/react/forwarding-refs\">encaminhamento de refs</a> para estes casos. <strong>Encaminhamento de Refs permitem que os componentes optem por exp\u00f4r a refer\u00eancia de qualquer componente filho como pr\u00f3prias</strong>. Voc\u00ea pode encontrar um exemplo detalhado de como exp\u00f4r n\u00f3 DOM de um componente filho para um componente pai na <a href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\">documenta\u00e7\u00e3o de encaminhamento de ref</a>.</p>\n<p>Se voc\u00ea usa React 16.2 ou abaixo, ou se voc\u00ea precisa de mais flexibilidade do que a fornecida pelo encaminhamento de ref, voc\u00ea pode usar <a class=\"external-link\" href=\"https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509\">esta abordagem alternativa</a> e explicitamente passar uma ref como uma prop diferentemente nomeada.</p>\n<p>Quando poss\u00edvel, desaconcelhamos a exposi\u00e7\u00e3o de n\u00f3s DOM, mas pode ser uma sa\u00edda \u00fatil. Note que esta abordagem requer que voc\u00ea adicione algum c\u00f3digo ao componente filho. Se voc\u00ea n\u00e3o tem controle absoluto sob a implementa\u00e7\u00e3o do componente filho, a sua \u00faltima op\u00e7\u00e3o \u00e9 usar o <a href=\"/react/react-dom#finddomnode\"><code class=\"language-javascript\">findDOMNode()</code></a>, mas isto \u00e9 desencorajado e descontinuado no <a href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\"><code class=\"language-javascript\">StrictMode</code></a>.</p>\n<h3 id=\"callback-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#callback-refs\"></a>Refs com Callback </h3>\n<p>O React tamb\u00e9m d\u00e1 suporte a outra forma de atribu\u00edr refs chamado \u201crefs com callback\u201d, que d\u00e1 um controle mais granular sob quando refs s\u00e3o atribu\u00eddas e desatribu\u00eddas.</p>\n<p>Em vez de passar um atributo <code class=\"language-javascript\">ref</code> criado pelo <code class=\"language-javascript\">createRef()</code>, voc\u00ea passa uma fun\u00e7\u00e3o. A fun\u00e7\u00e3o recebe uma inst\u00e2ncia de um componente React ou um elemento DOM HTML como seu argumento, que pode ser armazenado e acessado em outro lugar.</p>\n<p>O exemplo abaixo implementa um padr\u00e3o comum: utilizar <code class=\"language-javascript\">ref</code> com callback para armazenar uma refer\u00eancia para um n\u00f3 DOM em uma propriedade de inst\u00e2ncia.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setTextInputRef</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">element</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">focusTextInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Foca o input de texto usando a API DOM diretamente</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// auto-foca o input na montagem</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Utiliza a `ref` com callback para armazenar uma refer\u00eancia ao elemento DOM</span>\n    <span class=\"token comment\">// do input de texto em um campo de inst\u00e2ncia (por exemplo, this.textInput)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setTextInputRef<span class=\"token punctuation\">}</span></span></span>        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput<span class=\"token punctuation\">}</span></span></span>        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O React vai chamar o callback da <code class=\"language-javascript\">ref</code> com o elemento DOM quando o componente for montado, e cham\u00e1-lo com <code class=\"language-javascript\">null</code> quando ele for desmontado. Refs s\u00e3o garantidos de estarem atualizados antes do <code class=\"language-javascript\">componentDidMount</code> ou <code class=\"language-javascript\">componentDidUpdate</code> serem disparados.</p>\n<p>Voc\u00ea pode passar refs com callback entre componentes, assim como voc\u00ea faz com refs de objetos que foram criados com <code class=\"language-javascript\">React.createRef()</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomTextInput</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">inputRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span></span>      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No exemplo acima, <code class=\"language-javascript\">Parent</code> passa sua ref com callback como uma propriedade <code class=\"language-javascript\">inputRef</code> do <code class=\"language-javascript\">CustomTextInput</code>, e o <code class=\"language-javascript\">CustomTextInput</code> passa a mesma fun\u00e7\u00e3o como um atributo <code class=\"language-javascript\">ref</code> especial para o <code class=\"language-javascript\">&lt;input&gt;</code>. Como resultado, <code class=\"language-javascript\">this.inputElement</code> no <code class=\"language-javascript\">Parent</code> ser\u00e1 atribu\u00eddo para o n\u00f3 DOM correspondente ao elemento <code class=\"language-javascript\">&lt;input&gt;</code> no <code class=\"language-javascript\">CustomTextInput</code>.</p>\n<h3 id=\"legacy-api-string-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#legacy-api-string-refs\"></a>API Legada: Refs String </h3>\n<p>Se voc\u00ea trabalhou com React antes, voc\u00ea deve estar familiarizado com uma antiga API onde o atributo ref \u00e9 uma string, como <code class=\"language-javascript\">\"textInput\"</code>, e o n\u00f3 DOM \u00e9 acessado como <code class=\"language-javascript\">this.refs.textInput</code>. N\u00f3s n\u00e3o aconselhamos isto, pois refs string <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/8333#issuecomment-271648615\">tem alguns problemas</a>, s\u00e3o consideradas abandonadas, e <strong>prov\u00e1velmente ser\u00e3o removidas em um dos futuros releases</strong>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Se voc\u00ea est\u00e1 usando <code class=\"language-javascript\">this.refs.textInput</code> para acessar refs, n\u00f3s recomendamos ao inv\u00e9s disso utilizar o <a href=\"/react/refs-and-the-dom#callback-refs\">padr\u00e3o de callback</a> ou a <a href=\"/react/refs-and-the-dom#creating-refs\">API <code class=\"language-javascript\">createRef</code></a>.</p>\n</div>\n<h3 id=\"caveats-with-callback-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#caveats-with-callback-refs\"></a>Ressalvas com Refs com callback </h3>\n<p>Se a <code class=\"language-javascript\">ref</code> com callback \u00e9 definida como uma fun\u00e7\u00e3o inline, ela ser\u00e1 chamada duas vezes durante as atualiza\u00e7\u00f5es, primeiro com <code class=\"language-javascript\">null</code> e ent\u00e3o novamente com o elemento DOM. Isto porqu\u00ea uma nova inst\u00e2ncia da fun\u00e7\u00e3o \u00e9 criada com cada renderiza\u00e7\u00e3o, ent\u00e3o o React precisa limpar a refer\u00eancia antiga e atribuir a nova. Voc\u00ea pode evitar isso definindo a <code class=\"language-javascript\">ref</code> com callback como um m\u00e9todo ligado a classe, mas note que isto n\u00e3o deveria importar na maioria dos casos.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/refs-and-the-dom.md\">Edit this page</a></p></div></article>", "path": "/react/refs-and-the-dom", "nav": ["/react/reconciliation", "/react/render-props"]}, {"key": "Render Props", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>O termo <em><a class=\"external-link\" href=\"https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce\">\u201crender prop\u201d</a></em> se refere a uma t\u00e9cnica de compartilhar c\u00f3digo entre componentes React passando uma prop cujo valor \u00e9 uma fun\u00e7\u00e3o.</p>\n<p>Um componente com uma <em>render prop</em> recebe uma fun\u00e7\u00e3o que retorna um elemento React e a invoca no momento de renderiza\u00e7\u00e3o, n\u00e3o sendo necess\u00e1rio para o componente implementar uma l\u00f3gica pr\u00f3pria.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DataProvider</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Bibliotecas que usam render props incluem <a class=\"external-link\" href=\"https://reacttraining.com/react-router/web/api/Route/render-func\">React Router</a>, <a class=\"external-link\" href=\"https://github.com/paypal/downshift\">Downshift</a> e <a class=\"external-link\" href=\"https://github.com/jaredpalmer/formik\">Formik</a>.</p>\n<p>Nesse documento vamos discutir por que <em>render props</em> s\u00e3o \u00fateis e como escrev\u00ea-las.</p>\n<h2 id=\"use-render-props-for-cross-cutting-concerns\"><a class=\"anchor\" href=\"/react/render-props#use-render-props-for-cross-cutting-concerns\"></a>Uso de <em>Render Props</em> para Caracter\u00edsticas Transversais </h2>\n<p>Componentes s\u00e3o as principais unidades de reuso de c\u00f3digo em React, mas nem sempre \u00e9 f\u00e1cil compartilhar o estado ou comportamento que um componente encapsula para outros componentes utilizarem esses valores.</p>\n<p>Por exemplo, o componente abaixo captura a posi\u00e7\u00e3o do mouse em um aplicativo web:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The current mouse position is (</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Enquanto o cursor se move pela tela, o componente mostra suas coordenadas (x, y) em um <code class=\"language-javascript\">&lt;p&gt;</code></p>\n<p>A quest\u00e3o \u00e9: Como podemos reutilizar esse comportamento em outro componente? Em outras palavras, se outro componente precisar saber a posi\u00e7\u00e3o do cursor, podemos encapsular esse comportamento de forma que seja f\u00e1cil compartilh\u00e1-lo com outros componentes?</p>\n<p>Lembrando que componentes s\u00e3o a unidade b\u00e1sica de reuso de c\u00f3digo em React, vamos tentar refatorar esse c\u00f3digo para usar o componente <code class=\"language-javascript\">&lt;Mouse&gt;</code>, ele encapsula o comportamento que precisamos reutilizar. </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// O componente &lt;Mouse&gt; encapsula o comportamento que precisamos...</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ...mas como renderizar algo diferente de um &lt;p&gt;? */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The current mouse position is (</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora o componente <code class=\"language-javascript\">&lt;Mouse&gt;</code> encapsula todos os comportamentos associados aos eventos <code class=\"language-javascript\">mousemove</code> e guarda a posi\u00e7\u00e3o (x, y) do cursor, mas ainda n\u00e3o \u00e9 completamente reutiliz\u00e1vel.</p>\n<p>Por exemplo, suponha que temos o componente <code class=\"language-javascript\">&lt;Cat&gt;</code> que renderiza a image de um gato seguindo o mouse na tela.\nPoder\u00edamos usar uma <em>prop</em> <code class=\"language-javascript\">&lt;Cat mouse={{ x, y }}&gt;</code> que passaria as coordenadas do mouse para o componente de forma que este saberia onde posicionar a imagem na tela.</p>\n<p>Inicialmente, voc\u00ea poderia tentar renderizar <code class=\"language-javascript\">&lt;Cat&gt;</code> <em>dentro do m\u00e9todo render do <code class=\"language-javascript\">&lt;Mouse&gt;</code></em>, assim:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>mouse<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> position<span class=\"token operator\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> top<span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseWithCat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n          Poder\u00edamos simplesmente trocar o &lt;p&gt; por um &lt;Cat&gt; ... mas assim\n          ter\u00edamos que criar um componente &lt;MouseWithSomethingElse&gt;\n          separado toda vez que precisarmos us\u00e1-lo, ent\u00e3o &lt;MouseWithCat&gt;\n          n\u00e3o \u00e9 muito reutiliz\u00e1vel ainda.\n        */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MouseWithCat</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Essa abordagem funciona para o nosso caso em espec\u00edfico, mas ainda n\u00e3o atingimos o objetivo de encapsular o comportamento de uma maneira completamente reutiliz\u00e1vel. Agora, toda vez que precisarmos da posi\u00e7\u00e3o do mouse para outro caso, teremos que criar um novo componente (ou seja, outro <code class=\"language-javascript\">&lt;MouseWithCat&gt;</code>) que renderiza algo especificamente para esse caso.</p>\n<p>Aqui \u00e9 onde a <em>render prop</em> se encaixa: Ao inv\u00e9s de escrever um componente <code class=\"language-javascript\">&lt;Cat&gt;</code> dentro de <code class=\"language-javascript\">&lt;Mouse&gt;</code>, e mudar diretamente a sa\u00edda renderizada, podemos passar uma fun\u00e7\u00e3o como prop para <code class=\"language-javascript\">&lt;Mouse&gt;</code>, que vai cham\u00e1-la para determinar o que renderizar dinamicamente- essa \u00e9 a <em>render prop</em>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>mouse<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> position<span class=\"token operator\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> top<span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n          No lugar de fornecer uma representa\u00e7\u00e3o est\u00e1tica do que &lt;Mouse&gt; deve\n          renderizar, use a `render` prop para determinar o que renderizar\n          dinamicamente.\n        */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, no lugar de clonar o componente <code class=\"language-javascript\">&lt;Mouse&gt;</code> e escrever o m\u00e9todo <code class=\"language-javascript\">render</code> para resolver um caso espec\u00edfico, n\u00f3s passamos uma <em>render prop</em> que <code class=\"language-javascript\">&lt;Mouse&gt;</code> pode usar para determinar o que ele renderiza dinamicamente.</p>\n<p>Portanto, <strong>uma <em>render prop</em> \u00e9 uma fun\u00e7\u00e3o passada nas <em>props</em> que um componente utiliza para determinar o que renderizar.</strong></p>\n<p>Essa t\u00e9cnica torna o comportamento que precisamos compartilhar extremamente port\u00e1til. Para acessar esse comportamento, basta renderizar um <code class=\"language-javascript\">&lt;Mouse&gt;</code> com uma <code class=\"language-javascript\">render</code> <em>prop</em> que dir\u00e1 o que renderizar com o (x, y) atual do cursor.</p>\n<p>Algo interessante para notar sobre <em>render props</em> \u00e9 que voc\u00ea pode implementar a maioria dos <em><a href=\"/react/higher-order-components\">higher-order components</a></em> (HOC) utilizando um componente qualquer com uma <em>render prop</em>. Por exemplo, se voc\u00ea preferir ter um HOC <code class=\"language-javascript\">withMouse</code> no lugar de um componente <code class=\"language-javascript\">&lt;Mouse&gt;</code>, voc\u00ea poderia simplesmente criar um utilizando o <code class=\"language-javascript\">&lt;Mouse&gt;</code> com uma <em>render prop</em>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Se voc\u00ea realmente quer usar HOC por alguma raz\u00e3o, voc\u00ea</span>\n<span class=\"token comment\">// pode facilmente criar uma usando um componente qualquer</span>\n<span class=\"token comment\">// com uma render prop!</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">withMouse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ent\u00e3o, utilizar uma <em>render prop</em> torna poss\u00edvel qualquer um dos padr\u00f5es citados.</p>\n<h2 id=\"using-props-other-than-render\"><a class=\"anchor\" href=\"/react/render-props#using-props-other-than-render\"></a>Usando outras <em>Props</em> al\u00e9m de <code class=\"language-javascript\">render</code></h2>\n<p>\u00c9 importante lembrar que mesmo o nome padr\u00e3o sendo <em>\u201crender props\u201d</em>, n\u00e3o quer dizer que voc\u00ea deve ter uma <em>prop</em> chamada <code class=\"language-javascript\">render</code> para usar esse padr\u00e3o. Na verdade, <a class=\"external-link\" href=\"https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce\"><em>qualquer</em> <em>prop</em> que \u00e9 uma fun\u00e7\u00e3o usada por um componente para determinar o que renderizar \u00e9 uma <em>\u201crender prop\u201d</em></a>.</p>\n<p>Embora os exemplos acima usem a palavra <code class=\"language-javascript\">render</code>, poder\u00edamos usar a <em>prop</em> <code class=\"language-javascript\">children</code>!</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">children</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The mouse position is </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Lembre-se, a <em>prop</em> <code class=\"language-javascript\">children</code> n\u00e3o precisar estar nomeada na lista de \u201catributos\u201d do seu elemento JSX. Ao inv\u00e9s disso, voc\u00ea pode inser\u00ed-la <em>dentro</em> do seu elemento!</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The mouse position is </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Mouse</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Voc\u00ea pode ver essa t\u00e9cnica sendo usada na API <a class=\"external-link\" href=\"https://github.com/chenglou/react-motion\">react-motion</a>. </p>\n<p>Dado que essa \u00e9 uma t\u00e9cnica um pouco incomum, quando voc\u00ea estiver criando uma API como essa, voc\u00ea provavelmente vai querer definir nos seus <code class=\"language-javascript\">propTypes</code> que <code class=\"language-javascript\">children</code> deve ser uma fun\u00e7\u00e3o.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">Mouse<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"caveats\"><a class=\"anchor\" href=\"/react/render-props#caveats\"></a>Avisos </h2>\n<h3 id=\"be-careful-when-using-render-props-with-reactpurecomponent\"><a class=\"anchor\" href=\"/react/render-props#be-careful-when-using-render-props-with-reactpurecomponent\"></a>Tenha cuidado ao utilizar <em>Render Props</em> num React.PureComponent </h3>\n<p>Usar uma <em>render prop</em> pode anular a vantagem de utilizar <a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">React.PureComponent</code></a> se voc\u00ea criar uma fun\u00e7\u00e3o dentro de um m\u00e9todo <code class=\"language-javascript\">render</code>. Isso se deve \u00e0 compara\u00e7\u00e3o superficial de <em>prop</em> sempre retornar <code class=\"language-javascript\">false</code> para novas <em>props</em>, e, nesse caso, cada <code class=\"language-javascript\">render</code> vai gerar um novo valor para a <em>render prop</em>.</p>\n<p>Por exemplo, continuando com o componente <code class=\"language-javascript\">&lt;Mouse&gt;</code> acima, se <code class=\"language-javascript\">Mouse</code> estendesse <code class=\"language-javascript\">React.PureComponent</code> no lugar de <code class=\"language-javascript\">React.Component</code>, nosso exemplo seria assim:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Mesma implementa\u00e7\u00e3o de antes...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n          Isso \u00e9 ruim! O valor da prop `render` vai ser\n          diferente para cara render.\n        */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nesse exemplo, cada vez que <code class=\"language-javascript\">&lt;MouseTracker&gt;</code> renderiza, ele gera uma nova fun\u00e7\u00e3o como valor da prop <code class=\"language-javascript\">&lt;Mouse render&gt;</code>, anulando assim o efeito de <code class=\"language-javascript\">&lt;Mouse&gt;</code> estender <code class=\"language-javascript\">React.PureComponent</code>!</p>\n<p>Para contornar esse problema, voc\u00ea pode definir a prop como um m\u00e9todo de inst\u00e2ncia:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Definindo como um m\u00e9todo de inst\u00e2ncia, `this.renderTheCat`</span>\n  <span class=\"token comment\">// sempre se refere a *mesma* fun\u00e7\u00e3o quando chamamos na</span>\n  <span class=\"token comment\">// renderiza\u00e7\u00e3o</span>\n  <span class=\"token function\">renderTheCat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mouse</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderTheCat<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nos casos onde voc\u00ea n\u00e3o pode definir a prop estaticamente (por exemplo, quando voc\u00ea precisa esconder as props e o estado do componente), <code class=\"language-javascript\">&lt;Mouse&gt;</code> deveria estender <code class=\"language-javascript\">React.Component</code>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/render-props.md\">Edit this page</a></p></div></article>", "path": "/react/render-props", "nav": ["/react/refs-and-the-dom", "/react/static-type-checking"]}, {"key": "Verifica\u00e7\u00e3o de Tipo Est\u00e1tico", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Verificadores de tipos est\u00e1ticos, como <a class=\"external-link\" href=\"https://flow.org/\">Flow</a> e <a class=\"external-link\" href=\"https://www.typescriptlang.org/\">TypeScript</a>, identificam certos tipos de problemas mesmo antes do seu c\u00f3digo ser executado. Eles tamb\u00e9m melhoram o fluxo de trabalho do desenvolvedor adicionando features como preenchimento autom\u00e1tico. Por isso, recomendamos usar Flow ou TypeScript ao inv\u00e9s de <code class=\"language-javascript\">PropTypes</code> para bases de c\u00f3digo maiores.</p>\n<h2 id=\"flow\"><a class=\"anchor\" href=\"/react/static-type-checking#flow\"></a>Flow </h2>\n<p><a class=\"external-link\" href=\"https://flow.org/\">Flow</a> \u00e9 um verificador de tipos est\u00e1ticos para o seu c\u00f3digo JavaScript. \u00c9 desenvolvido no Facebook e frequentemente usado com o React. Ele permite que voc\u00ea fa\u00e7a anota\u00e7\u00f5es \u00e0s vari\u00e1veis, fun\u00e7\u00f5es e componentes do React com um tipo especial de sintaxe e capture erros cedo. Voc\u00ea pode ler a <a class=\"external-link\" href=\"https://flow.org/en/docs/getting-started/\">introdu\u00e7\u00e3o ao Flow</a> para aprender o b\u00e1sico.</p>\n<p>Para usar o Flow, voc\u00ea precisa:</p>\n<ul>\n<li>Adicionar o Flow como depend\u00eancia ao seu projeto.</li>\n<li>Garantir que a sintaxe do Flow seja removida do c\u00f3digo compilado.</li>\n<li>Adicionar anota\u00e7\u00f5es de tipo e executar o Flow para chec\u00e1-las.</li>\n</ul>\n<p>Explicaremos abaixo esses passos com detalhes.</p>\n<h3 id=\"adding-flow-to-a-project\"><a class=\"anchor\" href=\"/react/static-type-checking#adding-flow-to-a-project\"></a>Adicionando Flow a um Projeto </h3>\n<p>Primeiro, use o terminal e navegue at\u00e9 o diret\u00f3rio do seu projeto. Voc\u00ea precisar\u00e1 executar o seguinte comando:</p>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev flow-bin</code></pre></div>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev flow-bin</code></pre></div>\n<p>Este comando instala a vers\u00e3o mais recente do Flow no seu projeto.</p>\n<p>Agora, adicione <code class=\"language-javascript\">flow</code> \u00e0 se\u00e7\u00e3o <code class=\"language-javascript\">\"scripts\"</code> do seu <code class=\"language-javascript\">package.json</code> para conseguir usar isto no terminal:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"flow\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flow\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por fim, execute um dos comandos a seguir:</p>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> run flow init</code></pre></div>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> run flow init</code></pre></div>\n<p>Este comando criar\u00e1 um arquivo de configura\u00e7\u00e3o do Flow que voc\u00ea precisar\u00e1 fazer commit.</p>\n<h3 id=\"stripping-flow-syntax-from-the-compiled-code\"><a class=\"anchor\" href=\"/react/static-type-checking#stripping-flow-syntax-from-the-compiled-code\"></a>Separando a Sintaxe do Flow do C\u00f3digo Compilado </h3>\n<p>O Flow estende a linguagem JavaScript com uma sintaxe especial para anota\u00e7\u00f5es de tipo. Entretanto, os navegadores n\u00e3o est\u00e3o cientes desta sintaxe. Assim, precisamos ter certeza que a sintaxe do Flow n\u00e3o permane\u00e7a no c\u00f3digo JavaScript compilado que \u00e9 enviado ao navegador.</p>\n<p>A forma exata de fazer isso depende das ferramentas que voc\u00ea usa para compilar o JavaScript.</p>\n<h4 id=\"create-react-app\"><a class=\"anchor\" href=\"/react/static-type-checking#create-react-app\"></a>Create React App </h4>\n<p>Se o seu projeto foi configurado com <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>, parab\u00e9ns! As anota\u00e7\u00f5es do Flow j\u00e1 est\u00e3o sendo retiradas por padr\u00e3o, ent\u00e3o voc\u00ea n\u00e3o precisa fazer mais nada nesta etapa.</p>\n<h4 id=\"babel\"><a class=\"anchor\" href=\"/react/static-type-checking#babel\"></a>Babel </h4>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Estas instru\u00e7\u00f5es <em>n\u00e3o</em> s\u00e3o para usu\u00e1rios do Create React App. Apesar do Create React App usar Babel por baixo dos panos, ele j\u00e1 est\u00e1 configurado para entender o Flow. Siga estes passos somente se voc\u00ea <em>n\u00e3o</em> usa o Create React App.</p>\n</div>\n<p>Se voc\u00ea configurou o Babel manualmente no seu projeto, precisar\u00e1 instalar um preset especial para Flow.</p>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev @babel/preset-flow</code></pre></div>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/preset-flow</code></pre></div>\n<p>Ent\u00e3o adicione o preset <code class=\"language-javascript\">flow</code> \u00e0 sua <a class=\"external-link\" href=\"https://babeljs.io/docs/usage/babelrc/\">configura\u00e7\u00e3o do Babel</a>. Por exemplo, se voc\u00ea configura o Babel atrav\u00e9s do arquivo <code class=\"language-javascript\">.babelrc</code>, pode ficar parecido com isto:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"@babel/preset-flow\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token string\">\"react\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isto permitir\u00e1 que voc\u00ea use a sintaxe do Flow no seu c\u00f3digo.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>O Flow n\u00e3o requer o preset <code class=\"language-javascript\">react</code>, mas eles s\u00e3o frequentemente usados juntos. O Flow por si s\u00f3 j\u00e1 vem pronto para entender a sintaxe JSX.</p>\n</div>\n<h4 id=\"other-build-setups\"><a class=\"anchor\" href=\"/react/static-type-checking#other-build-setups\"></a>Outras Configura\u00e7\u00f5es de Build </h4>\n<p>Se voc\u00ea n\u00e3o usa Create React App nem Babel, voc\u00ea pode usar <a class=\"external-link\" href=\"https://github.com/flowtype/flow-remove-types\">flow-remove-types</a> para remover as anota\u00e7\u00f5es de tipos.</p>\n<h3 id=\"running-flow\"><a class=\"anchor\" href=\"/react/static-type-checking#running-flow\"></a>Executando o Flow </h3>\n<p>Se voc\u00ea seguiu os passos acima, deve ser capaz de executar o Flow pela primeira vez.</p>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> flow</code></pre></div>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> run flow</code></pre></div>\n<p>Voc\u00ea dever\u00e1 ver uma mensagem como esta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">No errors!\n\u2728  Done in 0.17s.</code></pre></div>\n<h3 id=\"adding-flow-type-annotations\"><a class=\"anchor\" href=\"/react/static-type-checking#adding-flow-type-annotations\"></a>Adicionando Anota\u00e7\u00f5es de Tipo do Flow </h3>\n<p>Por padr\u00e3o, o Flow checa apenas os arquivos que incluem esta anota\u00e7\u00e3o:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// @flow</span></code></pre></div>\n<p>Normalmente, \u00e9 posicionado no topo de um arquivo. Tente adicion\u00e1-la em alguns arquivos do seu projeto e execute <code class=\"language-javascript\">yarn flow</code> ou <code class=\"language-javascript\">npm run flow</code> para ver se o Flow j\u00e1 achou algum problema.</p>\n<p>Tamb\u00e9m h\u00e1 <a class=\"external-link\" href=\"https://flow.org/en/docs/config/options/#toc-all-boolean\">uma op\u00e7\u00e3o</a> para for\u00e7ar o Flow a checar <em>todos</em> os arquivos independente se h\u00e1 a anota\u00e7\u00e3o ou n\u00e3o. Isto pode ser meio turbulento para projetos j\u00e1 existentes, mas \u00e9 sensato para um novo projeto se voc\u00ea quer deix\u00e1-lo totalmente tipado com o Flow.</p>\n<p>Agora est\u00e1 tudo certo! Recomendamos dar uma lida nos seguintes recursos para aprender mais sobre o Flow (em ingl\u00eas):</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://flow.org/en/docs/types/\">Flow Documentation: Type Annotations</a></li>\n<li><a class=\"external-link\" href=\"https://flow.org/en/docs/editors/\">Flow Documentation: Editors</a></li>\n<li><a class=\"external-link\" href=\"https://flow.org/en/docs/react/\">Flow Documentation: React</a></li>\n<li><a class=\"external-link\" href=\"https://medium.com/flow-type/linting-in-flow-7709d7a7e969\">Linting in Flow</a></li>\n</ul>\n<h2 id=\"typescript\"><a class=\"anchor\" href=\"/react/static-type-checking#typescript\"></a>TypeScript </h2>\n<p>O <a class=\"external-link\" href=\"https://www.typescriptlang.org/\">TypeScript</a> \u00e9 uma linguagem de programa\u00e7\u00e3o desenvolvida pela Microsoft. \u00c9 um superset tipado do JavaScript e inclui seu pr\u00f3prio compilador. Sendo uma linguagem tipada, o TypeScript consegue detectar erros e bugs em tempo de compila\u00e7\u00e3o, muito antes do seu aplicativo iniciar. Voc\u00ea pode aprender mais sobre o uso do TypeScript com React <a class=\"external-link\" href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\">aqui</a>.</p>\n<p>Para usar o TypeScript voc\u00ea precisa:</p>\n<ul>\n<li>Adicionar o TypeScript como uma depend\u00eancia ao seu projeto</li>\n<li>Configurar as op\u00e7\u00f5es de compila\u00e7\u00e3o do TypeScript</li>\n<li>Usar as extens\u00f5es de arquivos corretas</li>\n<li>Adicionar defini\u00e7\u00f5es para bibliotecas que voc\u00ea usa</li>\n</ul>\n<p>Vamos passar por cada uma em detalhes.</p>\n<h3 id=\"using-typescript-with-create-react-app\"><a class=\"anchor\" href=\"/react/static-type-checking#using-typescript-with-create-react-app\"></a>Usando TypeScript com Create React App </h3>\n<p>O Create React App j\u00e1 vem com suporte para o TypeScript.</p>\n<p>Para criar um <strong>novo projeto</strong> com suporte ao TypeScript, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\">npx create-react-app my-app --template typescript</code></pre></div>\n<p>Voc\u00eb tamb\u00e9m pode adicion\u00e1-lo a um <strong>projeto Create React App existente</strong>, <a class=\"external-link\" href=\"https://facebook.github.io/create-react-app/docs/adding-typescript\">como est\u00e1 documentado aqui</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Se voc\u00ea usa Create React App, voc\u00ea pode <strong>pular o resto desta p\u00e1gina</strong>. Ela descreve a configura\u00e7\u00e3o manual no qual n\u00e3o se aplicam a usu\u00e1rios do Create React App.</p>\n</div>\n<h3 id=\"adding-typescript-to-a-project\"><a class=\"anchor\" href=\"/react/static-type-checking#adding-typescript-to-a-project\"></a>Adicionando TypeScript a um Projeto </h3>\n<p>Tudo come\u00e7a executando um comando no seu terminal.</p>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev typescript</code></pre></div>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev typescript</code></pre></div>\n<p>Parab\u00e9ns! Voc\u00ea instalou a vers\u00e3o mais recente do TypeScript no seu projeto. Instalar o TypeScript nos d\u00e1 acesso ao comando <code class=\"language-javascript\">tsc</code>. Antes da configura\u00e7\u00e3o, vamos adicionar <code class=\"language-javascript\">tsc</code> \u00e0 se\u00e7\u00e3o \u201cscripts\u201d no nosso <code class=\"language-javascript\">package.json</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"configuring-the-typescript-compiler\"><a class=\"anchor\" href=\"/react/static-type-checking#configuring-the-typescript-compiler\"></a>Configurando o Compilador do TypeScript </h3>\n<p>O compilador n\u00e3o \u00e9 de ajuda alguma at\u00e9 que o dizemos o que deve fazer. No TypeScript, essas regras s\u00e3o definidas em um arquivo especial chamado <code class=\"language-javascript\">tsconfig.json</code>. Para gerar esse arquivo execute:</p>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> run tsc --init</code></pre></div>\n<p>Se voc\u00ea usa <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\">npx tsc --init</code></pre></div>\n<p>Olhando o ent\u00e3o gerado <code class=\"language-javascript\">tsconfig.json</code>, voc\u00ea pode ver que h\u00e1 muitas op\u00e7\u00f5es que voc\u00ea pode usar para configurar o compilador. Para uma descri\u00e7\u00e3o detalhada de todas as op\u00e7\u00f5es, veja <a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">aqui</a>.</p>\n<p>Das muitas op\u00e7\u00f5es, daremos uma olhada em <code class=\"language-javascript\">rootDir</code> e <code class=\"language-javascript\">outDir</code>. Na sua forma verdadeira, o compilador receber\u00e1 arquivos typescript e gerar\u00e1 arquivos javascript. Entretanto, n\u00e3o queremos que nossos arquivos fontes e a sa\u00edda gerada fiquem confusos.</p>\n<p>Vamos cobrir isso em dois passos:</p>\n<ul>\n<li>Primeiramente, vamos organizar a estrutura do nosso projeto desta forma. Iremos colocar todo o nosso c\u00f3digo-fonte na pasta <code class=\"language-javascript\">src</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 index.ts\n\u2514\u2500\u2500 tsconfig.json</code></pre></div>\n<ul>\n<li>Depois, diremos ao compilador onde nosso c\u00f3digo-fonte est\u00e1 e para onde a sa\u00edda dever\u00e1 ir.</li>\n</ul>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// tsconfig.json</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span></span>    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>\u00d3timo! Agora quando executarmos o nosso script de build, o compilador vai colocar o JavaScript gerado na pasta <code class=\"language-javascript\">build</code>. O <a class=\"external-link\" href=\"https://github.com/Microsoft/TypeScript-React-Starter/blob/master/tsconfig.json\">TypeScript React Starter</a> oferece um <code class=\"language-javascript\">tsconfig.json</code> com um bom conjunto de regras para voc\u00ea come\u00e7ar.</p>\n<p>Geralmente, voc\u00ea n\u00e3o quer manter o JavaScript gerado no seu reposit\u00f3rio, ent\u00e3o tenha certeza de que adicionou a pasta do build no seu <code class=\"language-javascript\">.gitignore</code>.</p>\n<h3 id=\"file-extensions\"><a class=\"anchor\" href=\"/react/static-type-checking#file-extensions\"></a>Extens\u00f5es de Arquivos </h3>\n<p>No React, voc\u00ea provavelmente escrever\u00e1 seus componentes em um arquivo <code class=\"language-javascript\">.js</code>. No TypeScript temos 2 extens\u00f5es de arquivo:</p>\n<p><code class=\"language-javascript\">.ts</code> \u00e9 a extens\u00e3o de arquivo padr\u00e3o, enquanto <code class=\"language-javascript\">.tsx</code> \u00e9 uma extens\u00e3o especial usada em arquivos que cont\u00e9m <code class=\"language-javascript\">JSX</code>.</p>\n<h3 id=\"running-typescript\"><a class=\"anchor\" href=\"/react/static-type-checking#running-typescript\"></a>Executando o TypeScript </h3>\n<p>Se voc\u00ea seguiu as instru\u00e7\u00f5es acima, voc\u00ea dever\u00e1 ser capaz de executar o TypeScript pela primeira vez.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> build</code></pre></div>\n<p>Se voc\u00ea usa npm, execute:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> run build</code></pre></div>\n<p>Se voc\u00ea n\u00e3o v\u00ea um output, significa que completou com sucesso.</p>\n<h3 id=\"type-definitions\"><a class=\"anchor\" href=\"/react/static-type-checking#type-definitions\"></a>Defini\u00e7\u00f5es de Tipo </h3>\n<p>Para ser capaz de mostrar erros e dicas de outros pacotes, o compilador depende dos arquivos de declara\u00e7\u00e3o. Um arquivo de declara\u00e7\u00e3o oferece todo a informa\u00e7\u00e3o de tipos sobre uma biblioteca. Isso nos permite usar bibliotecas javascript, como as que est\u00e3o no npm, no nosso projeto.</p>\n<p>Existem duas formas principais de conseguir declara\u00e7\u00f5es para uma biblioteca:</p>\n<p><strong>Bundled</strong> - A biblioteca empacota o seu pr\u00f3prio arquivo de declara\u00e7\u00e3o. Isto \u00e9 \u00f3timo para n\u00f3s, pois tudo o que precisaremos fazer \u00e9 instalar a biblioteca e estaremos prontos para us\u00e1-la. Para verificar se uma biblioteca tem tipos empacotados, procure por um arquivo <code class=\"language-javascript\">index.d.ts</code> no projeto. Algumas bibliotecas ter\u00e1 o arquivo especificado em seus <code class=\"language-javascript\">package.json</code>, no campo <code class=\"language-javascript\">typings</code> ou <code class=\"language-javascript\">types</code>.</p>\n<p><strong><a class=\"external-link\" href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">DefinitelyTyped</a></strong> - DefinitelyTyped \u00e9 um reposit\u00f3rio enorme de declara\u00e7\u00f5es para bibliotecas que n\u00e3o empacotam um arquivo de declara\u00e7\u00e3o. As declara\u00e7\u00f5es s\u00e3o feitas pelo p\u00fablico e gerenciadas pela Microsoft e contribuidores de c\u00f3digo aberto. O React, por exemplo, n\u00e3o empacota seu pr\u00f3prio arquivo de declara\u00e7\u00e3o. Em vez disso, n\u00f3s podemos peg\u00e1-lo do DefinitelyTyped. Para isso, entre este comando no seu terminal:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token comment\"># yarn</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev @types/react\n\n<span class=\"token comment\"># npm</span>\n<span class=\"token function\">npm</span> i --save-dev @types/react</code></pre></div>\n<p><strong>Declara\u00e7\u00f5es Locais</strong>\nAlgumas vezes o pacote que voc\u00ea quer usar n\u00e3o empacota declara\u00e7\u00f5es nem est\u00e1 dispon\u00edvel no DefinitelyTyped. Neste caso, podemos ter um arquivo de declara\u00e7\u00e3o local. Para fazer isto, crie um arquivo <code class=\"language-javascript\">declarations.d.ts</code> na raiz da pasta do seu c\u00f3digo fonte. Uma declara\u00e7\u00e3o simples ficaria assim:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-typescript\"><code class=\"language-javascript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'querystring'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> object\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voc\u00e9 agora pode come\u00e7ar a programar! N\u00f3s recomendamos verificar os seguintes recursos para aprender mais sobre TypeScript (em ingl\u00eas):</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html\">TypeScript Documentation: Everyday Types</a></li>\n<li><a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html\">TypeScript Documentation: Migrating from JavaScript</a></li>\n<li><a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/react-&amp;-webpack.html\">TypeScript Documentation: React and Webpack</a></li>\n</ul>\n<h2 id=\"rescript\"><a class=\"anchor\" href=\"/react/static-type-checking#rescript\"></a>ReScript </h2>\n<p><a class=\"external-link\" href=\"https://rescript-lang.org/\">ReScript</a> is a typed language that compiles to JavaScript. Some of its core features are  guaranteed 100% type coverage, first-class JSX support and <a class=\"external-link\" href=\"https://rescript-lang.org/docs/react/latest/introduction\">dedicated React bindings</a> to allow integration in existing JS / TS React codebases.\nYou can find more infos on integrating ReScript in your existing JS / React codebase <a class=\"external-link\" href=\"https://rescript-lang.org/docs/manual/latest/installation#integrate-into-an-existing-js-project\">here</a>.</p>\n<h2 id=\"kotlin\"><a class=\"anchor\" href=\"/react/static-type-checking#kotlin\"></a>Kotlin </h2>\n<p><a class=\"external-link\" href=\"https://kotlinlang.org/\">Kotlin</a> \u00e9 uma linguagem estaticamente tipada desenvolvida pelo JetBrains. As plataformas alvo dela incluem o JVM, Android, LLVM e <a class=\"external-link\" href=\"https://kotlinlang.org/docs/reference/js-overview.html\">JavaScript</a>.</p>\n<p>JetBrains desenvolve e mant\u00e9m algumas ferramentas especificamente para a comunidade do React: <a class=\"external-link\" href=\"https://github.com/JetBrains/kotlin-wrappers\">liga\u00e7\u00f5es com o React</a> assim como <a class=\"external-link\" href=\"https://github.com/JetBrains/create-react-kotlin-app\">Create React Kotlin App</a>. A \u00faltima auxilia voc\u00ea a come\u00e7ar a construir aplica\u00e7\u00f5es React com Kotlin sem precisar configurar um build.</p>\n<h2 id=\"other-languages\"><a class=\"anchor\" href=\"/react/static-type-checking#other-languages\"></a>Outras Linguagens </h2>\n<p>Perceba que h\u00e1 outras linguagens estaticamente tipadas que compilam para JavaScript e assim s\u00e3o compat\u00edveis com React. Por exemplo, <a class=\"external-link\" href=\"https://fable.io/\">F#/Fable</a> com <a class=\"external-link\" href=\"https://elmish.github.io/react\">elmish-react</a>. Verifique os respectivos sites para mais informa\u00e7\u00f5es e sinta-se livre para adicionar a esta p\u00e1gina mais linguagens estaticamente tipadas que trabalham com React!</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/static-type-checking.md\">Edit this page</a></p></div></article>", "path": "/react/static-type-checking", "nav": ["/react/render-props", "/react/strict-mode"]}, {"key": "Modo Estrito (Strict Mode)", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>O modo estrito (<code class=\"language-javascript\">Strict Mode</code>) \u00e9 uma ferramenta para sinalizar potenciais problemas em uma aplica\u00e7\u00e3o. Assim como o <code class=\"language-javascript\">Fragment</code>, o <code class=\"language-javascript\">StrictMode</code> n\u00e3o renderiza nenhum elemento vis\u00edvel na interface. Ele ativa, no entanto, verifica\u00e7\u00f5es e avisos adicionais para os seus descendentes.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Verifica\u00e7\u00f5es do modo estrito s\u00e3o executadas somente em modo de desenvolvimento; <em>elas n\u00e3o impactam na build de produ\u00e7\u00e3o</em>.</p>\n</div>\n<p>Voc\u00ea pode habilitar o modo estrito para qualquer parte da sua aplica\u00e7\u00e3o, por exemplo:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ExampleApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentOne</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentTwo</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Footer</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>No exemplo acima, as verifica\u00e7\u00f5es do modo estrito <em>n\u00e3o</em> ser\u00e3o executadas nos componentes <code class=\"language-javascript\">Header</code> e <code class=\"language-javascript\">Footer</code>. No entanto, <code class=\"language-javascript\">ComponentOne</code> e <code class=\"language-javascript\">ComponentTwo</code>, assim como todos os seus componentes descendentes, ser\u00e3o verificados.</p>\n<p>O modo estrito ajuda atualmente com:</p>\n<ul>\n<li><a href=\"/react/strict-mode#identifying-unsafe-lifecycles\">Identifica\u00e7\u00e3o de m\u00e9todos de ciclo de vida (lifecycles) inseguros</a></li>\n<li><a href=\"/react/strict-mode#warning-about-legacy-string-ref-api-usage\">Avisos em rela\u00e7\u00e3o ao uso da antiga string ref API</a></li>\n<li><a href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\">Avisos em rela\u00e7\u00e3o ao uso do depreciado findDOMNode</a></li>\n<li><a href=\"/react/strict-mode#detecting-unexpected-side-effects\">Detec\u00e7\u00e3o de efeitos colaterais (side effects) inesperados</a></li>\n<li><a href=\"/react/strict-mode#detecting-legacy-context-api\">Detec\u00e7\u00e3o de uso da antiga API de contexto (Context API)</a></li>\n</ul>\n<p>Funcionalidades adicionais ser\u00e3o adicionadas em vers\u00f5es futuras do React.</p>\n<h3 id=\"identifying-unsafe-lifecycles\"><a class=\"anchor\" href=\"/react/strict-mode#identifying-unsafe-lifecycles\"></a>Identificar m\u00e9todos de ciclo de vida (lifecycles) inseguros </h3>\n<p>Como explicado <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">neste post</a>, alguns antigos m\u00e9todos de ciclo de vida (lifecycles) s\u00e3o inseguros de serem usados em aplica\u00e7\u00f5es ass\u00edncronas do React. Contudo, se a sua aplica\u00e7\u00e3o usa bibliotecas customizadas, pode ser dif\u00edcil de verificar que esses m\u00e9todos de ciclo de vida n\u00e3o est\u00e3o sendo usados. Felizmente, o modo estrito pode ajudar nisso!</p>\n<p>Quando o modo estrito est\u00e1 ativado, o React compila uma lista de todos os componentes classe que usam ciclos de vida inseguros e imprime no console uma mensagem de aviso com informa\u00e7\u00f5es relativas a estes componentes, como:</p>\n<p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/e4fdbff774b356881123e69ad88eda88/1628f/strict-mode-unsafe-lifecycles-warning.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/e4fdbff774b356881123e69ad88eda88/1e088/strict-mode-unsafe-lifecycles-warning.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>Resolver os problemas identificados pelo modo estrito <em>agora</em>, facilitar\u00e1 a utiliza\u00e7\u00e3o da renderiza\u00e7\u00e3o concorrente em vers\u00f5es futuras do React.</p>\n<h3 id=\"warning-about-legacy-string-ref-api-usage\"><a class=\"anchor\" href=\"/react/strict-mode#warning-about-legacy-string-ref-api-usage\"></a>Aviso em rela\u00e7\u00e3o ao uso da antiga string ref API </h3>\n<p>Anteriormente, o React fornecia duas maneiras de gerenciar refs: a antiga string ref API e a callback API. Embora a string ref API fosse a mais conveniente das duas, ela apresentava <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/1373\">v\u00e1rias desvantagens</a> e, portanto, nossa recomenda\u00e7\u00e3o oficial era <a href=\"/react/refs-and-the-dom#legacy-api-string-refs\">usar o formul\u00e1rio de callback</a>.</p>\n<p>O React 16.3 adicionou uma terceira op\u00e7\u00e3o que oferece a conveni\u00eancia da string ref sem qualquer desvantagem:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Como refs de objetos foram adicionadas como substitutos para as string refs, o modo estrito agora avisa em rela\u00e7\u00e3o ao uso da antiga string ref API.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Callback refs continuar\u00e3o a ter suporte juntamente com a nova <code class=\"language-javascript\">createRef</code> API (introduzida no React 16.3).</p>\n<p>Voc\u00ea n\u00e3o precisa substituir callback refs em seus componentes. Elas s\u00e3o um pouco mais flex\u00edveis, ent\u00e3o continuam a ser um recurso avan\u00e7ado.</p>\n</div>\n<p><a href=\"/react/refs-and-the-dom\">Saiba mais sobre a nova <code class=\"language-javascript\">createRef</code> API aqui.</a></p>\n<h3 id=\"warning-about-deprecated-finddomnode-usage\"><a class=\"anchor\" href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\"></a>Aviso em rela\u00e7\u00e3o ao uso do depreciado findDOMNode </h3>\n<p>O React costumava suportar <code class=\"language-javascript\">findDOMNode</code> para procurar na \u00e1rvore por um elemento DOM dada uma inst\u00e2ncia de classe. Normalmente, voc\u00ea n\u00e3o precisa disso, j\u00e1 que voc\u00ea pode <a href=\"/react/refs-and-the-dom#creating-refs\">anexar uma ref diretamente em um elemento DOM</a>.</p>\n<p><code class=\"language-javascript\">findDOMNode</code> tamb\u00e9m pode ser usado em componentes de classe, mas isso estava quebrando n\u00edveis de abstra\u00e7\u00e3o ao permitir que um componente pai demandasse que certos componentes filhos fossem renderizados. Ele cria um risco de refatora\u00e7\u00e3o em que voc\u00ea n\u00e3o pode alterar os detalhes de implementa\u00e7\u00e3o de um componente por que um componente pai pode estar alcan\u00e7ando o seu elemento DOM. <code class=\"language-javascript\">findDOMNode</code> somente retorna o primeiro filho, mas com o uso de fragmentos, \u00e9 poss\u00edvel que um componente renderize m\u00faltiplos elementos DOM. <code class=\"language-javascript\">findDOMNode</code> \u00e9 uma API de \u00fanica leitura. S\u00f3 enviava resposta quando voc\u00ea chamava. Se um componente filho renderiza um elemento diferente, n\u00e3o h\u00e1 como lidar com essa mudan\u00e7a. Portando, <code class=\"language-javascript\">findDOMNode</code> s\u00f3 funcionava se os componentes sempre retornassem um \u00fanico elemento DOM que nunca muda.</p>\n<p>Voc\u00ea pode deixar isso expl\u00edcito se passar uma ref para o seu componente customizado, passando-a atrav\u00e9s do DOM usando <a href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\"><code class=\"language-javascript\">encaminhamento de ref</code></a>.</p>\n<p>Voc\u00ea tamb\u00e9m pode adicionar um elemento DOM que envolve o seu componente e anexar uma ref diretamente a ele.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Em CSS, o atributo <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display#display_contents\"><code class=\"language-javascript\">display: contents</code></a> pode ser usado se voc\u00ea n\u00e3o quer que o elemento fa\u00e7a parte do <em>layout</em>.</p>\n</div>\n<h3 id=\"detecting-unexpected-side-effects\"><a class=\"anchor\" href=\"/react/strict-mode#detecting-unexpected-side-effects\"></a>Detectar efeitos colaterais (side effects) inesperados </h3>\n<p>Conceptualmente, o React funciona em duas fases:</p>\n<ul>\n<li>A <strong>fase de renderiza\u00e7\u00e3o</strong> determina quais mudan\u00e7as precisam ser feitas para, por exemplo, o DOM. Durante essa fase, o React chama <code class=\"language-javascript\">render</code> e compara o resultado com a renderiza\u00e7\u00e3o anterior.</li>\n<li>A <strong>fase de <em>commit</em></strong> \u00e9 quando o React aplica qualquer mudan\u00e7a. (No caso do React DOM, isso \u00e9 quando o React insere, atualiza ou remove n\u00f3s do DOM.) O React tamb\u00e9m chama m\u00e9todos de ciclo de vida como <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentDidUpdate</code> durante essa fase.</li>\n</ul>\n<p>A fase de <em>commit</em> \u00e9 geralmente muito r\u00e1pida, mas a renderiza\u00e7\u00e3o pode ser devagar. Por essa raz\u00e3o, o futuro <code class=\"language-javascript\">modo concorrente</code> (que ainda n\u00e3o \u00e9 habilitado por padr\u00e3o) quebra a renderiza\u00e7\u00e3o em peda\u00e7os, pausando e resumindo o trabalho para evitar bloquear o navegador. Isso significa que o React pode invocar ciclos de vida da fase de renderiza\u00e7\u00e3o mais de uma vez antes de <em>commitar</em>, ou pode ainda invoc\u00e1-los sem nem <em>commitar</em> (dado um eventual erro ou uma interrup\u00e7\u00e3o de maior prioridade).</p>\n<p>Os ciclos de vida da fase da renderiza\u00e7\u00e3o incluem os seguintes m\u00e9todos do componente classe:</p>\n<ul>\n<li><code class=\"language-javascript\">constructor</code></li>\n<li><code class=\"language-javascript\">componentWillMount</code> (ou <code class=\"language-javascript\">UNSAFE_componentWillMount</code>)</li>\n<li><code class=\"language-javascript\">componentWillReceiveProps</code> (ou <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps</code>)</li>\n<li><code class=\"language-javascript\">componentWillUpdate</code> (ou <code class=\"language-javascript\">UNSAFE_componentWillUpdate</code>)</li>\n<li><code class=\"language-javascript\">getDerivedStateFromProps</code></li>\n<li><code class=\"language-javascript\">shouldComponentUpdate</code></li>\n<li><code class=\"language-javascript\">render</code></li>\n<li><code class=\"language-javascript\">setState</code> fun\u00e7\u00f5es atualizadoras (o primeiro argumento)</li>\n</ul>\n<p>J\u00e1 que os m\u00e9todos acima podem ser chamados mais de uma vez, \u00e9 importante que eles n\u00e3o contenham efeitos colaterais. Ignorar essa regra pode levar a uma variedade de problemas, incluindo vazamento de mem\u00f3ria e estado inv\u00e1lido da aplica\u00e7\u00e3o. Infelizmente, pode ser dif\u00edcil detectar esses problemas, j\u00e1 que eles podem ser <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Deterministic_algorithm\">n\u00e3o determin\u00edsticos</a>.</p>\n<p>O modo estrito n\u00e3o pode detectar automaticamente efeitos colaterais para voc\u00ea, mas pode ajud\u00e1-lo a ach\u00e1-los ao torn\u00e1-los um pouco mais determin\u00edsticos. Isso \u00e9 feito ao invocar duas vezes seguidas as seguintes fun\u00e7\u00f5es:</p>\n<ul>\n<li>Os m\u00e9todos <code class=\"language-javascript\">constructor</code>, <code class=\"language-javascript\">render</code> e <code class=\"language-javascript\">shouldComponentUpdate</code> de componentes classe</li>\n<li>O m\u00e9todo est\u00e1tico <code class=\"language-javascript\">getDerivedStateFromProps</code> de componentes classe</li>\n<li>Corpo de componentes de fun\u00e7\u00e3o</li>\n<li>Fun\u00e7\u00f5es do atualizador de estado (o primeiro argumento para <code class=\"language-javascript\">setState</code>)</li>\n<li>Fun\u00e7\u00f5es passadas para <code class=\"language-javascript\">useState</code>, <code class=\"language-javascript\">useMemo</code> ou <code class=\"language-javascript\">useReducer</code></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Isso s\u00f3 se aplica em modo de desenvolvimento. <em>Ciclos de vida n\u00e3o ser\u00e3o invocados duas vezes em produ\u00e7\u00e3o.</em></p>\n</div>\n<p>Por exemplo, considere o seguinte c\u00f3digo:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TopLevelRoute</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    SharedApplicationState<span class=\"token punctuation\">.</span><span class=\"token function\">recordEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ExampleComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>\u00c0 primeira vista, este c\u00f3digo pode n\u00e3o parecer problem\u00e1tico. Mas se <code class=\"language-javascript\">SharedApplicationState.recordEvent</code> n\u00e3o for <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning\">idempotente</a>, ent\u00e3o instanciar este componente m\u00faltiplas vezes pode levar a um estado da aplica\u00e7\u00e3o inv\u00e1lido. Este tipo de erro pequeno e sutil pode n\u00e3o se manifestar durante o desenvolvimento, ou pode faz\u00ea-lo de forma inconsistente e, portanto, ser ignorado.</p>\n<p>Ao intencionalmente invocar os m\u00e9todos de ciclo de vida duas vezes, como o construtor do componente, o modo estrito pode tornar padr\u00f5es como este mais f\u00e1cil de localizar.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>A partir do React 17, o React modifica automaticamente os m\u00e9todos do console como <code class=\"language-javascript\">console.log()</code> para silenciar os logs na segunda chamada para fun\u00e7\u00f5es de ciclo de vida. No entanto, pode causar um comportamento indesejado em certos casos em que <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/20090#issuecomment-715927125\">uma solu\u00e7\u00e3o alternativa pode ser usada</a>.</p>\n</div>\n<h3 id=\"detecting-legacy-context-api\"><a class=\"anchor\" href=\"/react/strict-mode#detecting-legacy-context-api\"></a>Detectar o uso da antiga API de contexto (Context API) </h3>\n<p>A antiga API de contexto era propensa a erros, e ser\u00e1 removida em uma futura vers\u00e3o principal (<em>major version</em>). Ela ainda funciona para todas vers\u00f5es <code class=\"language-javascript\">16.x</code>, mas mostrar\u00e1 uma mensagem de aviso no modo estrito: </p>\n<p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/fca5c5e1fb2ef2e2d59afb100b432c12/51800/warn-legacy-context-in-strict-mode.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/fca5c5e1fb2ef2e2d59afb100b432c12/1e088/warn-legacy-context-in-strict-mode.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>Leia a <a href=\"/react/context\">documenta\u00e7\u00e3o da nova API de contexto</a> para ajud\u00e1-lo a migrar para a nova vers\u00e3o.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/strict-mode.md\">Edit this page</a></p></div></article>", "path": "/react/strict-mode", "nav": ["/react/static-type-checking", "/react/typechecking-with-proptypes"]}, {"key": "Checagem de tipos (Typechecking) com PropTypes", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">React.PropTypes</code> foi movido para um pacote diferente desde a vers\u00e3o 15.5 do React. Por favor, use <a class=\"external-link\" href=\"https://www.npmjs.com/package/prop-types\">a biblioteca <code class=\"language-javascript\">prop-types</code></a>.</p>\n<p>N\u00f3s fornecemos <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2017/04/07/react-v15.5.0.html#migrating-from-reactproptypes\">um script de codemod</a> para automatizar a convers\u00e3o.</p>\n</div>\n<p>Na medida em que sua aplica\u00e7\u00e3o cresce, voc\u00ea pode capturar muitos bugs com checagem de tipos. Em algumas aplica\u00e7\u00f5es, voc\u00ea pode usar extens\u00f5es do JavaScript como <a class=\"external-link\" href=\"https://flowtype.org/\">Flow</a> ou <a class=\"external-link\" href=\"https://www.typescriptlang.org/\">TypeScript</a> para checar os tipos de toda a sua aplica\u00e7\u00e3o. Por\u00e9m, mesmo se voc\u00ea n\u00e3o us\u00e1-las, React possui algumas habilidades de checagem de tipos nativas. Para executar a checagem de tipos nas props para um componente, voc\u00ea pode atribuir \u00e0 propriedade em especial <code class=\"language-javascript\">propTypes</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nGreeting<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Neste exemplo, estamos usando um componente de classe, mas a mesma funcionalidade tamb\u00e9m pode ser aplicada a componentes de fun\u00e7\u00e3o ou componentes criados por <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a> ou <a href=\"/react/react-api#reactforwardref\"><code class=\"language-javascript\">React.forwardRef</code></a>.</p>\n<p><code class=\"language-javascript\">PropTypes</code> exporta uma variedade de validadores que podem ser usados para certificar que os dados que voc\u00ea recebe s\u00e3o v\u00e1lidos. Neste exemplo, utilizamos <code class=\"language-javascript\">PropTypes.string</code>. Quando um valor inv\u00e1lido for fornecido a uma prop, um alerta ser\u00e1 exibido no console JavaScript. Por motivos de performance, <code class=\"language-javascript\">propTypes</code> \u00e9 checado apenas em modo de desenvolvimento.</p>\n<h3 id=\"proptypes\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#proptypes\"></a>PropTypes </h3>\n<p>Aqui est\u00e1 um exemplo documentando os diferentes tipos de validadores fornecidos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\nMyComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// You can declare that a prop is a specific JS type. By default, these</span>\n  <span class=\"token comment\">// are all optional.</span>\n  optionalArray<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">,</span>\n  optionalBool<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">,</span>\n  optionalFunc<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n  optionalNumber<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n  optionalObject<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">,</span>\n  optionalString<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n  optionalSymbol<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>symbol<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Anything that can be rendered: numbers, strings, elements or an array</span>\n  <span class=\"token comment\">// (or fragment) containing these types.</span>\n  optionalNode<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A React element.</span>\n  optionalElement<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A React element type (ie. MyComponent).</span>\n  optionalElementType<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>elementType<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can also declare that a prop is an instance of a class. This uses</span>\n  <span class=\"token comment\">// JS's instanceof operator.</span>\n  optionalMessage<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can ensure that your prop is limited to specific values by treating</span>\n  <span class=\"token comment\">// it as an enum.</span>\n  optionalEnum<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">oneOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'News'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Photos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object that could be one of many types</span>\n  optionalUnion<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">oneOfType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n    PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An array of a certain type</span>\n  optionalArrayOf<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object with property values of a certain type</span>\n  optionalObjectOf<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">objectOf</span><span class=\"token punctuation\">(</span>PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object taking on a particular shape</span>\n  optionalObjectWithShape<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// An object with warnings on extra properties</span>\n  optionalObjectWithStrictShape<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">exact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    quantity<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   \n\n  <span class=\"token comment\">// You can chain any of the above with `isRequired` to make sure a warning</span>\n  <span class=\"token comment\">// is shown if the prop isn't provided.</span>\n  requiredFunc<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A required value of any data type</span>\n  requiredAny<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>any<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can also specify a custom validator. It should return an Error</span>\n  <span class=\"token comment\">// object if the validation fails. Don't `console.warn` or throw, as this</span>\n  <span class=\"token comment\">// won't work inside `oneOfType`.</span>\n  <span class=\"token function-variable function\">customProp</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> componentName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">matchme</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Invalid prop `'</span> <span class=\"token operator\">+</span> propName <span class=\"token operator\">+</span> <span class=\"token string\">'` supplied to'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">' `'</span> <span class=\"token operator\">+</span> componentName <span class=\"token operator\">+</span> <span class=\"token string\">'`. Validation failed.'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// You can also supply a custom validator to `arrayOf` and `objectOf`.</span>\n  <span class=\"token comment\">// It should return an Error object if the validation fails. The validator</span>\n  <span class=\"token comment\">// will be called for each key in the array or object. The first two</span>\n  <span class=\"token comment\">// arguments of the validator are the array or object itself, and the</span>\n  <span class=\"token comment\">// current item's key.</span>\n  customArrayProp<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propValue<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> componentName<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> propFullName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">matchme</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>propValue<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Invalid prop `'</span> <span class=\"token operator\">+</span> propFullName <span class=\"token operator\">+</span> <span class=\"token string\">'` supplied to'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">' `'</span> <span class=\"token operator\">+</span> componentName <span class=\"token operator\">+</span> <span class=\"token string\">'`. Validation failed.'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"requiring-single-child\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#requiring-single-child\"></a>Exigindo Filho \u00danico (Single Child) </h3>\n<p>Com <code class=\"language-javascript\">PropTypes.element</code> voc\u00ea pode especificar que apenas um \u00fanico filho pode ser passado para um componente como <code class=\"language-javascript\">children</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This must be exactly one element or it will warn.</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nMyComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"default-prop-values\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#default-prop-values\"></a>Valores Padr\u00e3o de Props (Default Prop Values) </h3>\n<p>Voc\u00ea pode definir valores padr\u00e3o (default) para suas <code class=\"language-javascript\">props</code> atrav\u00e9s da atribui\u00e7\u00e3o \u00e0 propriedade especial <code class=\"language-javascript\">defaultProps</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Specifies the default values for props:</span>\nGreeting<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Stranger'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Renders \"Hello, Stranger\":</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se voc\u00ea est\u00e1 usando um plugin Babel como <a class=\"external-link\" href=\"https://babeljs.io/docs/en/babel-plugin-proposal-class-properties/\">plugin-proposal-class-properties</a>, voc\u00ea tamb\u00e9m poder\u00e1 declarar <code class=\"language-javascript\">defaultProps</code> como propriedade est\u00e1tica dentro de uma classe de componente React. Essa sintaxe ainda n\u00e3o foi finalizada e ir\u00e1 exigir uma etapa de compila\u00e7\u00e3o para funcionar em um navegador. Para mais informa\u00e7\u00f5es, veja <a class=\"external-link\" href=\"https://github.com/tc39/proposal-class-fields\">proposal-class-fields</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'stranger'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A <code class=\"language-javascript\">defaultProps</code> ser\u00e1 usada para garantir que <code class=\"language-javascript\">this.props.name</code> tenha um valor caso n\u00e3o tenha sido especificado pelo componente pai. A checagem de tipos de <code class=\"language-javascript\">propTypes</code> acontece ap\u00f3s <code class=\"language-javascript\">defaultProps</code> ser resolvida, logo a checagem tamb\u00e9m ser\u00e1 aplicada \u00e0 <code class=\"language-javascript\">defaultProps</code>.</p>\n<h3 id=\"function-components\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#function-components\"></a>Function Componentes </h3>\n<p>Se voc\u00ea estiver usando function componentes em seu desenvolvimento, pode desejar fazer algumas pequenas altera\u00e7\u00f5es para permitir que os PropTypes sejam aplicados corretamente.</p>\n<p>Digamos que voc\u00ea tenha um componente como este:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para adicionar PropTypes, voc\u00ea pode declarar o componente em uma fun\u00e7\u00e3o separada antes de exportar, da seguinte forma:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HelloWorldComponent</code></pre></div>\n<p>Ent\u00e3o, voc\u00ea pode adicionar PropTypes diretamente ao <code class=\"language-javascript\">HelloWorldComponent</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nHelloWorldComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HelloWorldComponent</code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/typechecking-with-proptypes.md\">Edit this page</a></p></div></article>", "path": "/react/typechecking-with-proptypes", "nav": ["/react/strict-mode", "/react/uncontrolled-components"]}, {"key": "Componentes n\u00e3o controlados", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Na maioria dos casos, recomendamos o uso de <a href=\"/react/forms#controlled-components\">componentes controlados</a> para implementar formul\u00e1rios. Em um componente controlado, os dados de formul\u00e1rio s\u00e3o manipulados por um componente React. A alternativa s\u00e3o componentes n\u00e3o controlados, onde os dados de formul\u00e1rio s\u00e3o controlados pelo pr\u00f3prio DOM.</p>\n<p>Para criar um componente n\u00e3o controlado, em vez de criar um manipulador de evento para cada atualiza\u00e7\u00e3o de estado, voc\u00ea pode <a href=\"/react/refs-and-the-dom\">usar ref</a> para obter os valores do formul\u00e1rio do DOM.</p>\n<p>Por exemplo, este c\u00f3digo aceita um \u00fanico nome em um componente n\u00e3o controlado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A name was submitted: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Name:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/WooRWa?editors=0010\"><strong>Experimente no CodePen</strong></a></p>\n<p>Como um componente n\u00e3o controlado mant\u00e9m a fonte de verdade no DOM, \u00e0s vezes \u00e9 mais f\u00e1cil integrar c\u00f3digo React e n\u00e3o React ao usar componentes n\u00e3o controlados. Tamb\u00e9m pode conter menos c\u00f3digo se voc\u00ea quiser fazer gambiarra. Caso contr\u00e1rio, voc\u00ea geralmente deve usar componentes controlados.</p>\n<p>Se ainda n\u00e3o estiver claro qual tipo de componente voc\u00ea deve usar para uma situa\u00e7\u00e3o espec\u00edfica, voc\u00ea pode achar \u00fatil este <a class=\"external-link\" href=\"https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/\">artigo sobre inputs controlados e n\u00e3o controlados</a>.</p>\n<h3 id=\"default-values\"><a class=\"anchor\" href=\"/react/uncontrolled-components#default-values\"></a>Valores padr\u00e3o </h3>\n<p>No ciclo de vida de renderiza\u00e7\u00e3o do React, o atributo <code class=\"language-javascript\">value</code> nos elementos de formul\u00e1rio substituir\u00e1 o valor no DOM. Com um componente n\u00e3o controlado, voc\u00ea geralmente deseja que o React especifique o valor inicial, mas que deixa as atualiza\u00e7\u00f5es subsequentes n\u00e3o controladas. Para lidar com esse tipo de caso, voc\u00ea pode especificar o atributo <code class=\"language-javascript\">defaultValue</code> em vez de <code class=\"language-javascript\">value</code>. Alterar o valor do atributo <code class=\"language-javascript\">defaultValue</code> ap\u00f3s a montagem de um componente n\u00e3o causar\u00e1 nenhuma atualiza\u00e7\u00e3o do valor no DOM.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Name:</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">defaultValue</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Bob<span class=\"token punctuation\">\"</span></span></span>          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Da mesma forma, <code class=\"language-javascript\">&lt;input type=\"checkbox\"&gt;</code> e <code class=\"language-javascript\">&lt;input type=\"radio\"&gt;</code> suporta <code class=\"language-javascript\">defaultChecked</code>, e <code class=\"language-javascript\">&lt;select&gt;</code> e <code class=\"language-javascript\">&lt;textarea&gt;</code> suporta <code class=\"language-javascript\">defaultValue</code>.</p>\n<h2 id=\"the-file-input-tag\"><a class=\"anchor\" href=\"/react/uncontrolled-components#the-file-input-tag\"></a>A Tag de input de arquivo </h2>\n<p>Em HTML, um <code class=\"language-javascript\">&lt;input type=\"file\"&gt;</code> permite que o usu\u00e1rio escolha um ou mais arquivos do armazenamento do dispositivo para serem carregados em um servidor ou manipulados por JavaScript por meio da <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/File/Using_files_from_web_applications\">API de arquivos</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>No React, um <code class=\"language-javascript\">&lt;input type=\"file\" /&gt;</code> \u00e9 sempre um componente n\u00e3o controlado porque seu valor s\u00f3 pode ser definido por um usu\u00e1rio e n\u00e3o programaticamente</p>\n<p>Voc\u00ea deve usar a API de arquivos para interagir com os arquivos. O exemplo a seguir mostra como criar um <a href=\"/react/refs-and-the-dom\">ref no n\u00f3 DOM</a> para acessar arquivo(s) em um manipulador de envio.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Selected file - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Upload file:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Submit</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FileInput</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><a class=\"external-link\" href=\"https://pt-br.reactjs.org//redirect-to-codepen/uncontrolled-components/input-type-file\"><b>Try it on CodePen</b></a></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/uncontrolled-components.md\">Edit this page</a></p></div></article>", "path": "/react/uncontrolled-components", "nav": ["/react/typechecking-with-proptypes", "/react/web-components"]}, {"key": "Componentes Web", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>React e <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/Web_Components\">Componentes Web</a> s\u00e3o constru\u00eddos para resolver problemas diferentes. Componentes Web fornecem forte encapsulamento para componentes reutiliz\u00e1veis. Enquanto que o React fornece uma biblioteca declarativa que mant\u00e9m o DOM em sincronia com os seus dados. Os dois objetivos s\u00e3o complementares. Como um desenvolvedor, voc\u00ea \u00e9 livre para usar o React nos seus Componentes Web ou usar Componentes Web no React ou ambos.</p>\n<p>A maioria das pessoas que usam o React n\u00e3o usam Componentes Web. Mas, talvez voc\u00ea queira, especialmente se voc\u00ea estiver utilizando componentes de UI de terceiros que foram escritos utilizando Componentes Web.</p>\n<h2 id=\"using-web-components-in-react\"><a class=\"anchor\" href=\"/react/web-components#using-web-components-in-react\"></a>Usando Componentes Web no React </h2>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloMessage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1 </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-search</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-search</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Componentes Web geralmente exp\u00f5em uma API imperativa. Por exemplo, um Componente Web <code class=\"language-javascript\">video</code> pode expor as fun\u00e7\u00f5es <code class=\"language-javascript\">play()</code> e <code class=\"language-javascript\">pause()</code>. Para acessar as APIs imperativas de um Componente Web, voc\u00ea precisar\u00e1 usar um ref para interagir diretamente com o n\u00f3 do DOM. Se voc\u00ea est\u00e1 utilizando Componentes Web de terceiros, a melhor solu\u00e7\u00e3o \u00e9 escrever um componente React que se comporte como um wrapper para o seu Componente Web.</p>\n<p>Os eventos emitidos por um Componente Web podem n\u00e3o se propagar apropriadamente atrav\u00e9s da \u00e1rvore de renderiza\u00e7\u00e3o do React.\nVoc\u00ea precisar\u00e1 anexar manualmente os manipuladores de eventos para lidar com esses eventos em seus componentes React.</p>\n</div>\n<p>Uma confus\u00e3o comum \u00e9 que os Componentes Web utilizam \u201cclass\u201d ao inv\u00e9s de \u201cclassName\u201d.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">BrickFlipbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>brick-flipbox</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">frente</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">verso</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>brick-flipbox</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"using-react-in-your-web-components\"><a class=\"anchor\" href=\"/react/web-components#using-react-in-your-web-components\"></a>Usando React nos seus Componentes Web </h2>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">XSearch</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mountPoint <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mountPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.google.com/search?q='</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span> mountPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x-search'</span><span class=\"token punctuation\">,</span> XSearch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Este c\u00f3digo <strong>n\u00e3o funcionar\u00e1</strong> se voc\u00ea transformar as classes com o Babel. Veja a discuss\u00e3o <a class=\"external-link\" href=\"https://github.com/w3c/webcomponents/issues/587\">nesta issue</a>.\nInclua o <a class=\"external-link\" href=\"https://github.com/webcomponents/polyfills/tree/master/packages/webcomponentsjs#custom-elements-es5-adapterjs\">custom-elements-es5-adapter</a> antes de carregar seus componentes web para resolver este problema.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/web-components.md\">Edit this page</a></p></div></article>", "path": "/react/web-components", "nav": ["/react/uncontrolled-components", "/react/react-api"]}]}, {"key": "Refer\u00eancia da API", "values": [{"key": "React", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><code class=\"language-javascript\">React</code> \u00e9 o ponto de entrada da biblioteca React. Se voc\u00ea carrega o React a partir de uma <em>tag</em> <code class=\"language-javascript\">&lt;script&gt;</code>, estas <em>API</em>s <em>top-level</em> estar\u00e3o dispon\u00edveis no <code class=\"language-javascript\">React</code> global. Se voc\u00ea usa ES6 com npm, voc\u00ea pode escrever <code class=\"language-javascript\">import React from 'react'</code>. Se voc\u00ea usa ES5 com npm, voc\u00ea pode escrever <code class=\"language-javascript\">var React = require('react')</code>.</p>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-api#overview\"></a>Vis\u00e3o Geral </h2>\n<h3 id=\"components\"><a class=\"anchor\" href=\"/react/react-api#components\"></a>Componentes </h3>\n<p>Os componentes React permitem que voc\u00ea divida a UI em peda\u00e7os independentes e reutiliz\u00e1veis para pensar em cada peda\u00e7o isoladamente. Os componentes em React podem ser definidos ao estender <code class=\"language-javascript\">React.Component</code> ou <code class=\"language-javascript\">React.PureComponent</code>.</p>\n<ul>\n<li><a href=\"/react/react-api#reactcomponent\"><code class=\"language-javascript\">React.Component</code></a></li>\n<li><a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">React.PureComponent</code></a></li>\n</ul>\n<p>Se voc\u00ea n\u00e3o utiliza classes do ES6, voc\u00ea pode usar o m\u00f3dulo <code class=\"language-javascript\">create-react-class</code>. Veja <a href=\"/react/react-without-es6\">Usando React sem ES6</a> para mais informa\u00e7\u00f5es.</p>\n<p>Os componentes em React tamb\u00e9m podem ser definidos como fun\u00e7\u00f5es que podem ser envoltas:</p>\n<ul>\n<li><a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a></li>\n</ul>\n<h3 id=\"creating-react-elements\"><a class=\"anchor\" href=\"/react/react-api#creating-react-elements\"></a>Criando Elementos em React </h3>\n<p>N\u00f3s recomendamos <a href=\"/react/introducing-jsx\">utilizar o JSX</a> para descrever como sua UI deve se parecer. Cada elemento JSX \u00e9 somente uma maneira alternativa de utilizar o <a href=\"/react/react-api#createelement\"><code class=\"language-javascript\">React.createElement()</code></a>. Em geral voc\u00ea n\u00e3o vai utilizar os m\u00e9todos seguintes caso esteja usando JSX.</p>\n<ul>\n<li><a href=\"/react/react-api#createelement\"><code class=\"language-javascript\">createElement()</code></a></li>\n<li><a href=\"/react/react-api#createfactory\"><code class=\"language-javascript\">createFactory()</code></a></li>\n</ul>\n<p>Veja <a href=\"/react/react-without-jsx\">Usando React sem JSX</a> para mais informa\u00e7\u00f5es.</p>\n<h3 id=\"transforming-elements\"><a class=\"anchor\" href=\"/react/react-api#transforming-elements\"></a>Transformando Elementos </h3>\n<p>O <code class=\"language-javascript\">React</code> prov\u00ea v\u00e1rias <em>API</em>s para manipula\u00e7\u00e3o de elementos:</p>\n<ul>\n<li><a href=\"/react/react-api#cloneelement\"><code class=\"language-javascript\">cloneElement()</code></a></li>\n<li><a href=\"/react/react-api#isvalidelement\"><code class=\"language-javascript\">isValidElement()</code></a></li>\n<li><a href=\"/react/react-api#reactchildren\"><code class=\"language-javascript\">React.Children</code></a></li>\n</ul>\n<h3 id=\"fragments\"><a class=\"anchor\" href=\"/react/react-api#fragments\"></a>Fragments </h3>\n<p>O <code class=\"language-javascript\">React</code> tamb\u00e9m prov\u00ea um componente para que voc\u00ea possa renderizar m\u00faltiplos elementos sem a necessidade de criar outro elemento que os envolva.</p>\n<ul>\n<li><a href=\"/react/react-api#reactfragment\"><code class=\"language-javascript\">React.Fragment</code></a></li>\n</ul>\n<h3 id=\"refs\"><a class=\"anchor\" href=\"/react/react-api#refs\"></a>Refs </h3>\n<ul>\n<li><a href=\"/react/react-api#reactcreateref\"><code class=\"language-javascript\">React.createRef</code></a></li>\n<li><a href=\"/react/react-api#reactforwardref\"><code class=\"language-javascript\">React.forwardRef</code></a></li>\n</ul>\n<h3 id=\"suspense\"><a class=\"anchor\" href=\"/react/react-api#suspense\"></a>Suspense </h3>\n<p>O <em>Suspense</em> permite que componentes \u201cesperem\u201d por algo antes de renderizar. Atualmente, o <em>Suspense</em> suporta somente uma finalidade: <a href=\"/react/code-splitting#reactlazy\">carregar componentes dinamicamente com <code class=\"language-javascript\">React.lazy</code></a>. Futuramente, ele prestar\u00e1 suporte para outras finalidades, como busca de dados.</p>\n<ul>\n<li><a href=\"/react/react-api#reactlazy\"><code class=\"language-javascript\">React.lazy</code></a></li>\n<li><a href=\"/react/react-api#reactsuspense\"><code class=\"language-javascript\">React.Suspense</code></a></li>\n</ul>\n<h3 id=\"hooks\"><a class=\"anchor\" href=\"/react/react-api#hooks\"></a>Hooks </h3>\n<p>Os <em>Hooks</em> s\u00e3o uma novidade no React 16.8. Eles permitem que voc\u00ea utilize o estado (<em>state</em>) e outras funcionalidades do React sem ter que escrever uma classe para isso. Os <em>Hooks</em> possuem uma <a href=\"/react/hooks-intro\">se\u00e7\u00e3o dedicada na documenta\u00e7\u00e3o</a> e uma refer\u00eancia da <em>API</em> separada:</p>\n<ul>\n<li>\n<p><a href=\"/react/hooks-reference#basic-hooks\"><em>Hooks</em> B\u00e1sicos</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a></li>\n<li><a href=\"/react/hooks-reference#useeffect\"><code class=\"language-javascript\">useEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-reference#additional-hooks\"><em>Hooks</em> Adicionais</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a></li>\n<li><a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a></li>\n<li><a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a></li>\n<li><a href=\"/react/hooks-reference#useref\"><code class=\"language-javascript\">useRef</code></a></li>\n<li><a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a></li>\n<li><a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usedebugvalue\"><code class=\"language-javascript\">useDebugValue</code></a></li>\n</ul>\n</li>\n</ul>\n\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-api#reference\"></a>Refer\u00eancia </h2>\n<h3 id=\"reactcomponent\"><a class=\"anchor\" href=\"/react/react-api#reactcomponent\"></a><code class=\"language-javascript\">React.Component</code> </h3>\n<p><code class=\"language-javascript\">React.Component</code> \u00e9 a classe base para componentes React quando eles s\u00e3o definidos usando <a class=\"external-link\" href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">classes ES6</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Consulte a <a href=\"/react/react-component\">refer\u00eancia da <em>API</em> para React.Component</a> para ver uma lista de m\u00e9todos e propriedades relacionadas \u00e0 classe base <code class=\"language-javascript\">React.Component</code>.</p>\n\n<h3 id=\"reactpurecomponent\"><a class=\"anchor\" href=\"/react/react-api#reactpurecomponent\"></a><code class=\"language-javascript\">React.PureComponent</code> </h3>\n<p><code class=\"language-javascript\">React.PureComponent</code> \u00e9 similar a <a href=\"/react/react-api#reactcomponent\"><code class=\"language-javascript\">React.Component</code></a>. A diferen\u00e7a entre eles \u00e9 que o <a href=\"/react/react-api#reactcomponent\"><code class=\"language-javascript\">React.Component</code></a> n\u00e3o implementa o  <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a>, enquanto o <code class=\"language-javascript\">React.PureComponent</code> a implementa com uma compara\u00e7\u00e3o superficial de props e state.</p>\n<p>Se o m\u00e9todo <code class=\"language-javascript\">render()</code> do seu componente React renderiza o mesmo resultado dados os mesmos props e state, voc\u00ea pode usar <code class=\"language-javascript\">React.PureComponent</code> para um aumento no desempenho em alguns casos.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>O m\u00e9todo <code class=\"language-javascript\">shouldComponentUpdate()</code> do <code class=\"language-javascript\">React.PureComponent</code> compara os objetos apenas superficialmente. Se eles contiverem estruturas de dados complexas, isto pode causar falso-negativos para diferen\u00e7as mais profundas. Estenda <code class=\"language-javascript\">PureComponent</code> quando voc\u00ea espera possuir props e state simples, ou ent\u00e3o use <a href=\"/react/react-component#forceupdate\"><code class=\"language-javascript\">forceUpdate()</code></a> quando voc\u00ea souber que ocorreram mudan\u00e7as profundas na estrutura de dados.</p>\n<p>Al\u00e9m disso, o m\u00e9todo <code class=\"language-javascript\">shouldComponentUpdate()</code> do <code class=\"language-javascript\">React.PureComponent</code> pula atualiza\u00e7\u00f5es de prop para toda a sub\u00e1rvore do componente. Esteja certo de que todos seus componentes que descendem dele tamb\u00e9m s\u00e3o \u201cpuros\u201d.</p>\n</div>\n\n<h3 id=\"reactmemo\"><a class=\"anchor\" href=\"/react/react-api#reactmemo\"></a><code class=\"language-javascript\">React.memo</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* renderize usando props */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">O React.memo</code> \u00e9 um <em><a href=\"/react/higher-order-components\">higher order component</a></em>.</p>\n<p>Se seu componente renderiza o mesmo resultado dados os mesmos props, voc\u00ea pode envolver nele uma chamada para <code class=\"language-javascript\">React.memo</code> para um aumento no desempenho em alguns casos, atrav\u00e9s da memoiza\u00e7\u00e3o do resultado. Isto significa que o React vai pular a renderiza\u00e7\u00e3o do componente e reutilizar o \u00faltimo resultado renderizado.</p>\n<p><code class=\"language-javascript\">React.memo</code> verifica apenas as altera\u00e7\u00f5es de prop. Se o seu componente de fun\u00e7\u00e3o envolvido em <code class=\"language-javascript\">React.memo</code> tiver um <a href=\"/react/hooks-state\"><code class=\"language-javascript\">useState</code></a>, <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> ou <a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a> Hook em sua implementa\u00e7\u00e3o, ele ainda ser\u00e1 renderizado quando o estado ou o contexto mudar.</p>\n<p>Por padr\u00e3o, ele ir\u00e1 comparar apenas superficialmente os objetos nos props. Se voc\u00ea quiser controle sob a compara\u00e7\u00e3o, voc\u00ea tamb\u00e9m pode prover uma fun\u00e7\u00e3o customizada de compara\u00e7\u00e3o como segundo argumento.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* renderize usando props */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">areEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*\n  se prevProps e nextProps renderizam o mesmo resultado,\n  retorne true.\n  caso contr\u00e1rio, retorne false.\n  */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">,</span> areEqual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Este m\u00e9todo existe somente como uma <strong><a href=\"/react/optimizing-performance\">otimiza\u00e7\u00e3o de performance</a>.</strong> N\u00e3o conte com ele para \u201cprevenir\u201d uma renderiza\u00e7\u00e3o, pois isso pode levar a <em>bugs</em>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Ao contr\u00e1rio do m\u00e9todo <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> de <em>class components</em>, a fun\u00e7\u00e3o <code class=\"language-javascript\">areEqual</code> retorna <code class=\"language-javascript\">true</code> se os props s\u00e3o iguais e <code class=\"language-javascript\">false</code> se os props n\u00e3o s\u00e3o iguais. \u00c9 o inverso de <code class=\"language-javascript\">shouldComponentUpdate</code>.</p>\n</div>\n\n<h3 id=\"createelement\"><a class=\"anchor\" href=\"/react/react-api#createelement\"></a><code class=\"language-javascript\">createElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  type<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>children<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cria e retorna um novo <a href=\"/react/rendering-elements\">elemento React</a> do tipo determinado. O argumento <code class=\"language-javascript\">type</code> pode ser uma <em>string</em> contendo a <em>tag name</em> (como, por exemplo, <code class=\"language-javascript\">'div'</code> ou <code class=\"language-javascript\">'span'</code>), um <a href=\"/react/components-and-props\">componente React</a> (uma classe ou uma fun\u00e7\u00e3o), ou um <a href=\"/react/react-api#reactfragment\">React <em>fragment</em></a>.</p>\n<p>C\u00f3digo escrito utilizando <a href=\"/react/introducing-jsx\">JSX</a> ser\u00e1 convertido para utilizar <code class=\"language-javascript\">React.createElement()</code>. Voc\u00ea tipicamente n\u00e3o invocar\u00e1 <code class=\"language-javascript\">React.createElement()</code> diretamente se voc\u00ea estiver usando JSX. Veja <a href=\"/react/react-without-jsx\">React sem JSX</a> para aprender mais.</p>\n\n<h3 id=\"cloneelement\"><a class=\"anchor\" href=\"/react/react-api#cloneelement\"></a><code class=\"language-javascript\">cloneElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">React.cloneElement(\n  element,\n  [config],\n  [...children]\n)</code></pre></div>\n<p>Clona e retorna um novo elemento React usando <code class=\"language-javascript\">element</code> como ponto de partida. <code class=\"language-javascript\">config</code> deve conter todos os novos adere\u00e7os, <code class=\"language-javascript\">key</code> ou <code class=\"language-javascript\">ref</code>. O elemento resultante ter\u00e1 os props do elemento original, com os novos props mesclados superficialmente. Novos elementos filhos substituir\u00e3o os existentes. <code class=\"language-javascript\">key</code> e <code class=\"language-javascript\">ref</code> do elemento original ser\u00e3o preservados se n\u00e3o houver <code class=\"language-javascript\">key</code> e <code class=\"language-javascript\">ref</code> presentes na <code class=\"language-javascript\">config</code>.</p>\n<p><code class=\"language-javascript\">React.cloneElement()</code> \u00e9 quase equivalente a:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element.type</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>element.type</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>No entanto, ele tamb\u00e9m preserva <code class=\"language-javascript\">ref</code>s. Isto significa que se voc\u00ea possui um elemento filho com um <code class=\"language-javascript\">ref</code> nele, voc\u00ea n\u00e3o o roubar\u00e1 acidentalmente do seu antecessor. Voc\u00ea ter\u00e1 o mesmo <code class=\"language-javascript\">ref</code> ligado ao seu novo elemento. A nova <code class=\"language-javascript\">ref</code> ou <code class=\"language-javascript\">key</code> ir\u00e1 substituir as antigas, se houver.</p>\n<p>Esta <em>API</em> foi introduzida como uma reposi\u00e7\u00e3o ao <code class=\"language-javascript\">React.addons.cloneWithProps()</code>, que foi descontinuado.</p>\n\n<h3 id=\"createfactory\"><a class=\"anchor\" href=\"/react/react-api#createfactory\"></a><code class=\"language-javascript\">createFactory()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createFactory</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna uma fun\u00e7\u00e3o que produz elementos React do tipo determinado. Assim como em <a href=\"/react/react-api#createelement\"><code class=\"language-javascript\">React.createElement()</code></a>, o argumento <code class=\"language-javascript\">type</code> pode ser uma <em>string</em> contendo o <em>tag name</em> (como, por exemplo, <code class=\"language-javascript\">'div'</code> ou <code class=\"language-javascript\">'span'</code>), um <a href=\"/react/components-and-props\">componente React</a> (uma classe ou uma fun\u00e7\u00e3o), ou um <a href=\"/react/react-api#reactfragment\">React <em>fragment</em></a>.</p>\n<p>Este <em>helper</em> \u00e9 considerado legado, e n\u00f3s encorajamos voc\u00ea a utilizar JSX ou <code class=\"language-javascript\">React.createElement()</code> diretamente como alternativa.</p>\n<p>Em geral voc\u00ea n\u00e3o invocar\u00e1 <code class=\"language-javascript\">React.createFactory()</code> diretamente se estiver utilizando JSX. Veja <a href=\"/react/react-without-jsx\">React sem JSX</a> para aprender mais.</p>\n\n<h3 id=\"isvalidelement\"><a class=\"anchor\" href=\"/react/react-api#isvalidelement\"></a><code class=\"language-javascript\">isValidElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Verifica se o objeto \u00e9 um elemento React. Retorna <code class=\"language-javascript\">true</code> ou <code class=\"language-javascript\">false</code>.</p>\n\n<h3 id=\"reactchildren\"><a class=\"anchor\" href=\"/react/react-api#reactchildren\"></a><code class=\"language-javascript\">React.Children</code> </h3>\n<p><code class=\"language-javascript\">React.Children</code> prov\u00ea utilit\u00e1rios para lidar com a estrutura de dados opaca <code class=\"language-javascript\">this.props.children</code>.</p>\n<h4 id=\"reactchildrenmap\"><a class=\"anchor\" href=\"/react/react-api#reactchildrenmap\"></a><code class=\"language-javascript\">React.Children.map</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Invoca uma fun\u00e7\u00e3o em cada elemento filho imediato contido em <code class=\"language-javascript\">children</code> com <code class=\"language-javascript\">this</code> definido para <code class=\"language-javascript\">thisArg</code>. Se <code class=\"language-javascript\">children</code> for um <em>array</em>, a fun\u00e7\u00e3o ser\u00e1 chamada para cada filho no <em>array</em>. Se <code class=\"language-javascript\">children</code> for <code class=\"language-javascript\">null</code> ou <code class=\"language-javascript\">undefined</code>, este m\u00e9todo retornar\u00e1 <code class=\"language-javascript\">null</code> ou <code class=\"language-javascript\">undefined</code> ao inv\u00e9s de um <em>array</em>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Se <code class=\"language-javascript\">children</code> for um <code class=\"language-javascript\">Fragment</code> ele ser\u00e1 tratado como um elemento filho \u00fanico.</p>\n</div>\n<h4 id=\"reactchildrenforeach\"><a class=\"anchor\" href=\"/react/react-api#reactchildrenforeach\"></a><code class=\"language-javascript\">React.Children.forEach</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Igual a <a href=\"/react/react-api#reactchildrenmap\"><code class=\"language-javascript\">React.Children.map()</code></a>, mas n\u00e3o retorna um <em>array</em>.</p>\n<h4 id=\"reactchildrencount\"><a class=\"anchor\" href=\"/react/react-api#reactchildrencount\"></a><code class=\"language-javascript\">React.Children.count</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna o n\u00famero total de componentes em <code class=\"language-javascript\">children</code>, igual ao n\u00famero de vezes que o <em>callback</em> passado para <code class=\"language-javascript\">map</code> ou <code class=\"language-javascript\">forEach</code> seria invocado.</p>\n<h4 id=\"reactchildrenonly\"><a class=\"anchor\" href=\"/react/react-api#reactchildrenonly\"></a><code class=\"language-javascript\">React.Children.only</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Verifica que <code class=\"language-javascript\">children</code> possui apenas um elemento filho (um elemento React) e o retorna. Caso contr\u00e1rio, este m\u00e9todo lan\u00e7a um erro.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>O <code class=\"language-javascript\">React.Children.only()</code> n\u00e3o aceita o valor retornado de <a href=\"/react/react-api#reactchildrenmap\"><code class=\"language-javascript\">React.Children.map()</code></a> pois este \u00e9 um array ao inv\u00e9s de um elemento React.</p>\n</div>\n<h4 id=\"reactchildrentoarray\"><a class=\"anchor\" href=\"/react/react-api#reactchildrentoarray\"></a><code class=\"language-javascript\">React.Children.toArray</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna a estrutura de dados opaca <code class=\"language-javascript\">children</code> como um <em>flat array</em> com as chaves atribu\u00eddas a cada elemento filho. \u00datil se voc\u00ea deseja manipular cole\u00e7\u00f5es de elementos filhos em seus m\u00e9todos de renderiza\u00e7\u00e3o, especialmente se voc\u00ea quiser reordenar ou repartir <code class=\"language-javascript\">this.props.children</code> antes de repass\u00e1-los.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">React.Children.toArray()</code> altera <code class=\"language-javascript\">key</code>s para preservar a sem\u00e2ntica de <em>arrays</em> aninhados quando realizando o <em>flatten</em> de listas de elementos filho. Isto \u00e9, <code class=\"language-javascript\">toArray</code> prefixa cada <code class=\"language-javascript\">key</code> no <em>array</em> retornado, de tal modo que o <code class=\"language-javascript\">key</code> de cada elemento possui o escopo do <em>array</em> que o cont\u00e9m.</p>\n</div>\n\n<h3 id=\"reactfragment\"><a class=\"anchor\" href=\"/react/react-api#reactfragment\"></a><code class=\"language-javascript\">React.Fragment</code> </h3>\n<p>O componente <code class=\"language-javascript\">React.Fragment</code> permite que voc\u00ea retorne m\u00faltiplos elementos num m\u00e9todo <code class=\"language-javascript\">render()</code> sem precisar criar um elemento DOM adicional:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Some text.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">A heading</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voc\u00ea tamb\u00e9m pode usar ele com a forma abreviada <code class=\"language-javascript\">&lt;&gt;&lt;/&gt;</code>. Para mais informa\u00e7\u00f5es, veja <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2017/11/28/react-v16.2.0-fragment-support.html\">React v16.2.0: Suporte Melhorado para <em>Fragments</em></a>.</p>\n<h3 id=\"reactcreateref\"><a class=\"anchor\" href=\"/react/react-api#reactcreateref\"></a><code class=\"language-javascript\">React.createRef</code> </h3>\n<p><code class=\"language-javascript\">React.createRef</code> cria uma <a href=\"/react/refs-and-the-dom\"><code class=\"language-javascript\">ref</code></a> que pode ser anexada a elementos React atrav\u00e9s do atributo <code class=\"language-javascript\">ref</code>.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h3 id=\"reactforwardref\"><a class=\"anchor\" href=\"/react/react-api#reactforwardref\"></a><code class=\"language-javascript\">React.forwardRef</code> </h3>\n<p><code class=\"language-javascript\">React.forwardRef</code> cria um componente React que encaminha o atributo <a href=\"/react/refs-and-the-dom\"><code class=\"language-javascript\">ref</code></a> que ele recebe para outro componente abaixo na \u00e1rvore. Esta t\u00e9cnica n\u00e3o \u00e9 muito comum, mas \u00e9 particularmente \u00fatil nos dois cen\u00e1rios:</p>\n<ul>\n<li><a href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\">Encaminhando <em>refs</em> para componentes DOM</a></li>\n<li><a href=\"/react/forwarding-refs#forwarding-refs-in-higher-order-components\">Encaminhando <em>refs</em> em <em>higher-order-components</em></a></li>\n</ul>\n<p><code class=\"language-javascript\">React.forwardRef</code> aceita uma fun\u00e7\u00e3o de renderiza\u00e7\u00e3o como argumento. React chamar\u00e1 esta fun\u00e7\u00e3o com <code class=\"language-javascript\">props</code> e <code class=\"language-javascript\">ref</code> como seus dois argumentos. Esta fun\u00e7\u00e3o deve retornar um React <em>node</em>.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> FancyButton <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// You can now get a ref directly to the DOM button:</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyButton</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click me!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyButton</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>No exemplo acima, React passa o <code class=\"language-javascript\">ref</code> dado para o elemento <code class=\"language-javascript\">&lt;FancyButton ref={ref}&gt;</code> como o segundo argumento para a fun\u00e7\u00e3o de renderiza\u00e7\u00e3o dentro da chamada <code class=\"language-javascript\">React.forwardRef</code>.</p>\n<p>Como resultado, ap\u00f3s React anexar o <code class=\"language-javascript\">ref</code>, <code class=\"language-javascript\">ref.current</code> ir\u00e1 apontar diretamente para a inst\u00e2ncia do elemento DOM <code class=\"language-javascript\">&lt;button&gt;</code></p>\n<p>Para mais informa\u00e7\u00f5es, veja <a href=\"/react/forwarding-refs\">encaminhando <em>refs</em></a>.</p>\n<h3 id=\"reactlazy\"><a class=\"anchor\" href=\"/react/react-api#reactlazy\"></a><code class=\"language-javascript\">React.lazy</code> </h3>\n<p><code class=\"language-javascript\">React.lazy()</code> permite que voc\u00ea defina um componente que \u00e9 carregado dinamicamente. Isto ajuda a reduzir o tamanho do <em>bundle</em>, retardando o carregamento de componentes que n\u00e3o s\u00e3o utilizados durante a renderiza\u00e7\u00e3o inicial.</p>\n<p>Voc\u00ea pode aprender como utilizar isto em nossa <a href=\"/react/code-splitting#reactlazy\">documenta\u00e7\u00e3o de <em>code splitting</em></a>. Voc\u00ea pode tamb\u00e9m querer ver <a class=\"external-link\" href=\"https://medium.com/@pomber/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d\">este artigo</a> explicando como utilizar mais detalhadamente.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Este componente \u00e9 carregado dinamicamente</span>\n<span class=\"token keyword\">const</span> SomeComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./SomeComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note que renderizar componentes <code class=\"language-javascript\">lazy</code> requer que exista um componente <code class=\"language-javascript\">&lt;React.Suspense&gt;</code> num n\u00edvel mais alto da \u00e1rvore de renderiza\u00e7\u00e3o. \u00c9 assim que voc\u00ea especifica um indicador de carregamento.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Usar <code class=\"language-javascript\">React.lazy</code> com <em>import</em> din\u00e2mico requer que <code class=\"language-javascript\">Promises</code> estejam dispon\u00edveis no ambiente JS. Isto requer um <em>polyfill</em> no IE11 e suas vers\u014des anteriores.</p>\n</div>\n<h3 id=\"reactsuspense\"><a class=\"anchor\" href=\"/react/react-api#reactsuspense\"></a><code class=\"language-javascript\">React.Suspense</code> </h3>\n<p><code class=\"language-javascript\">React.Suspense</code> permite especificar o indicador de carregamento em caso de alguns componentes abaixo na \u00e1rvore ainda n\u00e3o estarem prontos para renderizar. Atualmente, componentes de carregamento <em>lazy</em> s\u00e3o a <strong>\u00fanica</strong> finalidade que o <code class=\"language-javascript\">&lt;React.Suspense&gt;</code> presta suporte:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Este componente \u00e9 carregado dinamicamente</span>\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// Mostra &lt;Spinner&gt; enquanto OtherComponent carrega</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Spinner</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Suspense</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isto est\u00e1 documentado em nosso <a href=\"/react/code-splitting#reactlazy\">guia para <em>code splitting</em></a>. Note que componentes <code class=\"language-javascript\">lazy</code> podem estar em n\u00edveis profundos dentro da \u00e1rvore de <code class=\"language-javascript\">Suspense</code> \u2014 ele n\u00e3o precisa envolver cada um deles. A melhor pr\u00e1tica \u00e9 colocar <code class=\"language-javascript\">&lt;Suspense&gt;</code> onde voc\u00ea quer ver um indicador de carregamento, mas utilizar <code class=\"language-javascript\">lazy()</code> onde voc\u00ea quiser realizar <em>code splitting</em>.</p>\n<p>Enquanto o React n\u00e3o presta suporte a isto, no futuro n\u00f3s planejamos permitir que <code class=\"language-javascript\">Suspense</code> lide com mais cen\u00e1rios como busca de dados. Voc\u00ea pode ler sobre isso em <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/11/27/react-16-roadmap.html\">nosso <em>roadmap</em></a>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">React.lazy()</code> e <code class=\"language-javascript\">&lt;React.Suspense&gt;</code> ainda n\u00e3o tem suporte atrav\u00e9s do <code class=\"language-javascript\">ReactDOMServer</code>. Esta \u00e9 uma limita\u00e7\u00e3o conhecida que ser\u00e1 resolvida futuramente.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reference-react.md\">Edit this page</a></p></div></article>", "path": "/react/react-api", "nav": ["/react/web-components", "/react/react-component"]}, {"key": "React.Component", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Esta p\u00e1gina cont\u00e9m uma refer\u00eancia detalhada da API para a defini\u00e7\u00e3o de classes de componentes React. N\u00f3s assumimos que voc\u00ea possui familiaridade com conceitos fundamentais do React, como <a href=\"/react/components-and-props\">Componentes e Props</a>, bem como <a href=\"/react/state-and-lifecycle\">Estado e Ciclo de Vida</a>. Se isto n\u00e3o \u00e9 familiar para voc\u00ea, leia essas p\u00e1ginas primeiro.</p>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-component#overview\"></a>Vis\u00e3o Geral </h2>\n<p>React permite definirmos componentes como classes (<em>class components</em>) ou como fun\u00e7\u00f5es. Componentes definidos como classes possuem mais funcionalidades que ser\u00e3o detalhadas nesta p\u00e1gina. Para definir um <em>class component</em>, a classe precisa estender <code class=\"language-javascript\">React.Component</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O \u00fanico m\u00e9todo que voc\u00ea <em>deve</em> definir em uma subclasse de <code class=\"language-javascript\">React.Component</code> \u00e9 chamado <a href=\"/react/react-component#render\"><code class=\"language-javascript\">render()</code></a>. Todos os outros m\u00e9todos descritos nesta p\u00e1gina s\u00e3o opcionais.</p>\n<p><strong>N\u00f3s somos fortemente contra a cria\u00e7\u00e3o de seus pr\u00f3prios componentes base.</strong> Em componentes React, <a href=\"/react/composition-vs-inheritance\">o reuso do c\u00f3digo \u00e9 obtido primariamente atrav\u00e9s de composi\u00e7\u00e3o ao inv\u00e9s de heran\u00e7a</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>React n\u00e3o lhe obriga a utilizar a sintaxe ES6 para classes. Se preferir n\u00e3o us\u00e1-la, voc\u00ea pode usar o m\u00f3dulo <code class=\"language-javascript\">create-react-class</code> ou alguma outra abstra\u00e7\u00e3o similar. D\u00ea uma olhada em\n<a href=\"/react/react-without-es6\">Usando React sem ES6</a> para mais sobre este assunto.</p>\n</div>\n<h3 id=\"component-life-cycle\"><a class=\"anchor\" href=\"/react/react-component#component-life-cycle\"></a>O Ciclo de Vida de um Componente </h3>\n<p>Cada componente possui muitos \u201cm\u00e9todos do ciclo de vida\u201d que voc\u00ea pode sobrescrever para executar determinado c\u00f3digo em momentos particulares do processo. <strong>Voc\u00ea pode usar <a class=\"external-link\" href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">este diagrama do ciclo de vida</a> para consulta.</strong> Na lista abaixo, os m\u00e9todos do ciclo de vida mais usados est\u00e3o marcados em <strong>negrito</strong>. O resto deles, existe para o uso em casos relativamente raros.</p>\n<h4 id=\"mounting\"><a class=\"anchor\" href=\"/react/react-component#mounting\"></a>Montando (mounting) </h4>\n<p>Estes m\u00e9todos s\u00e3o chamados na seguinte ordem quando uma inst\u00e2ncia de um componente est\u00e1 sendo criada e inserida no DOM:</p>\n<ul>\n<li><a href=\"/react/react-component#constructor\"><strong><code class=\"language-javascript\">constructor()</code></strong></a></li>\n<li><a href=\"/react/react-component#static-getderivedstatefromprops\"><code class=\"language-javascript\">static getDerivedStateFromProps()</code></a></li>\n<li><a href=\"/react/react-component#render\"><strong><code class=\"language-javascript\">render()</code></strong></a></li>\n<li><a href=\"/react/react-component#componentdidmount\"><strong><code class=\"language-javascript\">componentDidMount()</code></strong></a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Estes m\u00e9todos s\u00e3o considerados legado e voc\u00ea deve <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evit\u00e1-los</a> em c\u00f3digo novo:</p>\n<ul>\n<li><a href=\"/react/react-component#unsafe_componentwillmount\"><code class=\"language-javascript\">UNSAFE_componentWillMount()</code></a></li>\n</ul>\n</div>\n<h4 id=\"updating\"><a class=\"anchor\" href=\"/react/react-component#updating\"></a>Atualizando </h4>\n<p>Uma atualiza\u00e7\u00e3o pode ser causada por altera\u00e7\u00f5es em props ou no state. Estes m\u00e9todos s\u00e3o chamados na seguinte ordem quando um componente esta sendo re-renderizado:</p>\n<ul>\n<li><a href=\"/react/react-component#static-getderivedstatefromprops\"><code class=\"language-javascript\">static getDerivedStateFromProps()</code></a></li>\n<li><a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a></li>\n<li><a href=\"/react/react-component#render\"><strong><code class=\"language-javascript\">render()</code></strong></a></li>\n<li><a href=\"/react/react-component#getsnapshotbeforeupdate\"><code class=\"language-javascript\">getSnapshotBeforeUpdate()</code></a></li>\n<li><a href=\"/react/react-component#componentdidupdate\"><strong><code class=\"language-javascript\">componentDidUpdate()</code></strong></a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Estes m\u00e9todos s\u00e3o considerados legado e voc\u00ea deve <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evit\u00e1-los</a> em c\u00f3digo novo:</p>\n<ul>\n<li><a href=\"/react/react-component#unsafe_componentwillupdate\"><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code></a></li>\n<li><a href=\"/react/react-component#unsafe_componentwillreceiveprops\"><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code></a></li>\n</ul>\n</div>\n<h4 id=\"unmounting\"><a class=\"anchor\" href=\"/react/react-component#unmounting\"></a>Desmontando (unmounting) </h4>\n<p>Estes m\u00e9todos s\u00e3o chamados quando um componente est\u00e1 sendo removido do DOM:</p>\n<ul>\n<li><a href=\"/react/react-component#componentwillunmount\"><strong><code class=\"language-javascript\">componentWillUnmount()</code></strong></a></li>\n</ul>\n<h4 id=\"error-handling\"><a class=\"anchor\" href=\"/react/react-component#error-handling\"></a>Tratando Erros </h4>\n<p>Estes m\u00e9todos s\u00e3o chamados quando existir um erro durante a renderiza\u00e7\u00e3o, em um m\u00e9todo do ciclo de vida, ou no construtor de qualquer componente-filho.</p>\n<ul>\n<li><a href=\"/react/react-component#static-getderivedstatefromerror\"><code class=\"language-javascript\">static getDerivedStateFromError()</code></a></li>\n<li><a href=\"/react/react-component#componentdidcatch\"><code class=\"language-javascript\">componentDidCatch()</code></a></li>\n</ul>\n<h3 id=\"other-apis\"><a class=\"anchor\" href=\"/react/react-component#other-apis\"></a>Outras APIs </h3>\n<p>Cada componente tamb\u00e9m fornece outras APIs:</p>\n<ul>\n<li><a href=\"/react/react-component#setstate\"><code class=\"language-javascript\">setState()</code></a></li>\n<li><a href=\"/react/react-component#forceupdate\"><code class=\"language-javascript\">forceUpdate()</code></a></li>\n</ul>\n<h3 id=\"class-properties\"><a class=\"anchor\" href=\"/react/react-component#class-properties\"></a>Propriedades da Classe </h3>\n<ul>\n<li><a href=\"/react/react-component#defaultprops\"><code class=\"language-javascript\">defaultProps</code></a></li>\n<li><a href=\"/react/react-component#displayname\"><code class=\"language-javascript\">displayName</code></a></li>\n</ul>\n<h3 id=\"instance-properties\"><a class=\"anchor\" href=\"/react/react-component#instance-properties\"></a>Propriedades da Inst\u00e2ncia </h3>\n<ul>\n<li><a href=\"/react/react-component#props\"><code class=\"language-javascript\">props</code></a></li>\n<li><a href=\"/react/react-component#state\"><code class=\"language-javascript\">state</code></a></li>\n</ul>\n\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-component#reference\"></a>Refer\u00eancia </h2>\n<h3 id=\"commonly-used-lifecycle-methods\"><a class=\"anchor\" href=\"/react/react-component#commonly-used-lifecycle-methods\"></a>M\u00e9todos Mais Usados do Ciclo de Vida </h3>\n<p>Os m\u00e9todos desta se\u00e7\u00e3o cobrem a grande maioria dos casos de uso que voc\u00ea encontrar\u00e1 criando componentes React. <strong>Para uma refer\u00eancia visual, veja : <a class=\"external-link\" href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">este diagrama do ciclo de vida</a>.</strong></p>\n<h3 id=\"render\"><a class=\"anchor\" href=\"/react/react-component#render\"></a><code class=\"language-javascript\">render()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>O m\u00e9todo <code class=\"language-javascript\">render()</code> \u00e9 o \u00fanico m\u00e9todo obrigat\u00f3rio em um class-component.</p>\n<p>Quando chamado, ele examina <code class=\"language-javascript\">this.props</code> e <code class=\"language-javascript\">this.state</code> e retorna um dos seguintes tipos:</p>\n<ul>\n<li><strong>Elementos React.</strong> Tipicamente criados via <a href=\"/react/introducing-jsx\">JSX</a>. Por exemplo, <code class=\"language-javascript\">&lt;div /&gt;</code> e <code class=\"language-javascript\">&lt;MyComponent /&gt;</code> s\u00e3o elementos React que instruem o React para renderizar um n\u00f3 do DOM, ou outro componente definido pelo usu\u00e1rio, respectivamente.</li>\n<li><strong>Arrays e fragmentos.</strong> Permitem que voc\u00ea retorne m\u00faltiplos elementos ao renderizar. Veja a documenta\u00e7\u00e3o em <a href=\"/react/fragments\">fragments</a> para mais detalhes.</li>\n<li><strong>Portals</strong>. Permitem que voc\u00ea renderize componentes-filhos em uma sub-\u00e1rvore diferente do DOM. Veja a documenta\u00e7\u00e3o em <a href=\"/react/portals\">portals</a> para mais detalhes.</li>\n<li><strong>String e n\u00fameros.</strong> Estes s\u00e3o renderizados como n\u00f3s de texto no DOM.</li>\n<li><strong>Booleanos ou <code class=\"language-javascript\">null</code></strong>. N\u00e3o renderizam nada.(A maioria existe para suportar  o padr\u00e3o <code class=\"language-javascript\">return test &amp;&amp; &lt;Child /&gt;</code> , onde <code class=\"language-javascript\">test</code> \u00e9 um booleano.)</li>\n</ul>\n<p>A fun\u00e7\u00e3o <code class=\"language-javascript\">render()</code> deve ser pura, o que significa que ela n\u00e3o modifica o state. Pois, ela retorna o mesmo resultado a cada vez que \u00e9 chamada e isso n\u00e3o interage diretamente com o browser.\nSe voc\u00ea precisar interagir com o browser, fa\u00e7a isto no m\u00e9todo <code class=\"language-javascript\">componentDidMount()</code> ou em outros m\u00e9todos do ciclo de vida. Manter <code class=\"language-javascript\">render()</code> puro faz com que os componentes sejam f\u00e1ceis de se trabalhar.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">render()</code> n\u00e3o ser\u00e1 invocado se  <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> retornar false.</p>\n</div>\n\n<h3 id=\"constructor\"><a class=\"anchor\" href=\"/react/react-component#constructor\"></a><code class=\"language-javascript\">constructor()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Se voc\u00ea n\u00e3o inicializar o state e n\u00e3o fizer o bind dos m\u00e9todos, voc\u00ea n\u00e3o precisa implementar um construtor para seu componente</strong></p>\n<p>O construtor para um componente React \u00e9 chamado antes que este componente seja montado. Quando estiver implementando o construtor para uma subclasse de <code class=\"language-javascript\">React.Component</code>, voc\u00ea deveria chamar <code class=\"language-javascript\">super(props)</code> antes de qualquer outra coisa.\nCaso contr\u00e1rio <code class=\"language-javascript\">this.props</code> ser\u00e1 indefinido no construtor, o que pode levar a bugs.</p>\n<p>Normalmente, em React, os construtores s\u00e3o usados somente para dois prop\u00f3sitos:</p>\n<ul>\n<li>Inicializar <a href=\"/react/state-and-lifecycle\">local state</a> atrav\u00e9s da atribui\u00e7\u00e3o de um objeto a <code class=\"language-javascript\">this.state</code>.</li>\n<li>Liga\u00e7\u00e3o (binding) de um m\u00e9todo <a href=\"/react/handling-events\">manipulador de eventos</a> \u00e0 uma inst\u00e2ncia.</li>\n</ul>\n<p>Voc\u00ea <strong>n\u00e3o deve chamar <code class=\"language-javascript\">setState()</code></strong>  no <code class=\"language-javascript\">constructor()</code>. Ao inv\u00e9s disso, se seu componente precisa de local state, <strong>atribua o initial state \u00e0 <code class=\"language-javascript\">this.state</code></strong> diretamente no construtor:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// N\u00e3o chame this.setState() aqui!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O m\u00e9todo construtor \u00e9 o \u00fanico lugar onde voc\u00ea deve atribuir <code class=\"language-javascript\">this.state</code> diretamente. Em todos os outros m\u00e9todos, voc\u00ea precisa usar <code class=\"language-javascript\">this.setState()</code>.</p>\n<p>Evite introduzir qualquer efeito colateral no construtor. Para estes casos use <code class=\"language-javascript\">componentDidMount()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><strong>Evite copiar props no state! Este \u00e9 um erro comum:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// N\u00e3o fa\u00e7a isso!</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O problema \u00e9 que isto \u00e9 desnecess\u00e1rio (voc\u00ea pode usar <code class=\"language-javascript\">this.props.color</code> diretamente), e cria bugs (atualiza\u00e7\u00f5es em <code class=\"language-javascript\">color</code> n\u00e3o ser\u00e3o refletidas no state).</p>\n<p><strong>Use este pattern somente se voc\u00ea quiser ignorar atualiza\u00e7\u00f5es em props intencionalmente.</strong> Neste caso, faz sentido renomear a prop para ser chamada <code class=\"language-javascript\">initialColor</code> ou <code class=\"language-javascript\">defaultColor</code>. \u00c9 poss\u00edvel ent\u00e3o for\u00e7ar um componente a \u201cresetar\u201d seu state interno atrav\u00e9s de  <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">mudando sua <code class=\"language-javascript\">chave</code></a> quando necess\u00e1rio.</p>\n<p>Leia nosso <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">post no blog sobre evitar deriva\u00e7\u00f5es no state</a> para aprender sobre o que fazer se voc\u00ea acha que precisa que o state dependa das props.</p>\n</div>\n\n<h3 id=\"componentdidmount\"><a class=\"anchor\" href=\"/react/react-component#componentdidmount\"></a><code class=\"language-javascript\">componentDidMount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">componentDidMount()</code> \u00c9 invocado imediatamente ap\u00f3s um componente ser montado (inserido na \u00e1rvore). Inicializa\u00e7\u00f5es que exijam n\u00f3s do DOM devem vir aqui. Se precisar carregar data de um endpoint remoto, este \u00e9 um bom lugar para instanciar sua requisi\u00e7\u00e3o.</p>\n<p>Este m\u00e9todo \u00e9 um bom lugar para colocar qualquer subscri\u00e7\u00e3o. Se fizer isto, n\u00e3o esque\u00e7a de desinscrever no <code class=\"language-javascript\">componentWillUnmount()</code>.</p>\n<p>Voc\u00ea <strong>pode chamar <code class=\"language-javascript\">setState()</code> diretamente</strong> dentro do <code class=\"language-javascript\">componentDidMount()</code>. Ele ir\u00e1 disparar uma renderiza\u00e7\u00e3o extra, mas isto ir\u00e1 ocorrer antes que o browser atualize a tela. Isso garante que mesmo que o <code class=\"language-javascript\">render()</code> seja chamado duas vezes neste caso, o usu\u00e1rio n\u00e3o ver\u00e1 o state intermedi\u00e1rio. Use este pattern com cuidado porque isto frequentemente causa issues de performance. Na maioria dos casos, voc\u00ea deve atribuir o initial state no <code class=\"language-javascript\">constructor()</code>. Isto pode, no entanto, ser necess\u00e1rio para casos como modais e tooltips quando voc\u00ea precisa mensurar um n\u00f3 do DOM antes de renderizar algo que dependa de seu tamanho ou posi\u00e7\u00e3o.</p>\n\n<h3 id=\"componentdidupdate\"><a class=\"anchor\" href=\"/react/react-component#componentdidupdate\"></a><code class=\"language-javascript\">componentDidUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">componentDidUpdate()</code> \u00e9 invocado imediatamente ap\u00f3s alguma atualiza\u00e7\u00e3o ocorrer. Este m\u00e9todo n\u00e3o \u00e9 chamado pelo initial render.</p>\n<p>Use isto como uma oportunidade para alterar o DOM quando o componente for atualizado. Este tamb\u00e9m \u00e9 um bom lugar para realizar requisi\u00e7\u00f5es de rede enquanto compara as props atuais com as props anteriores (e.g. uma chamada de rede pode n\u00e3o ser necess\u00e1ria se as props n\u00e3o mudaram).</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Uso t\u00edpico, (n\u00e3o esque\u00e7a de comparar as props):</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>userID <span class=\"token operator\">!==</span> prevProps<span class=\"token punctuation\">.</span>userID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voc\u00ea <strong>pode chamar <code class=\"language-javascript\">setState()</code> imediatamente</strong> dentro do <code class=\"language-javascript\">componentDidUpdate()</code> mas perceba que <strong>isto deve estar encapsulado em uma condi\u00e7\u00e3o</strong> como no exemplo abaixo, ou voc\u00ea ir\u00e1 causar um loop infinito. Isto tamb\u00e9m causaria uma re-renderiza\u00e7\u00e3o extra, que por mais que n\u00e3o seja vis\u00edvel para o usu\u00e1rio pode afetar a performance do componente. Se voc\u00ea est\u00e1 tentando \u201cespelhar\u201d algum state para uma prop vinda de cima, considere usar a prop diretamente. Leia mais sobre <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">porque copiar props no state causa bugs</a>.</p>\n<p>Se seu componente implementa o m\u00e9todo <code class=\"language-javascript\">getSnapshotBeforeUpdate()</code> (o que \u00e9 raro), o valor que ele retorna ser\u00e1 passado como o terceiro par\u00e2metro \u201csnapshot\u201d para <code class=\"language-javascript\">componentDidUpdate()</code>. Caso contr\u00e1rio este par\u00e2metro ser\u00e1 undefined.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">componentDidUpdate()</code> n\u00e3o ser\u00e1 invocado se <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> retornar false.</p>\n</div>\n\n<h3 id=\"componentwillunmount\"><a class=\"anchor\" href=\"/react/react-component#componentwillunmount\"></a><code class=\"language-javascript\">componentWillUnmount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">componentWillUnmount()</code> \u00e9 invocado imediatamente antes que um componente seja desmontado e destru\u00eddo. Qualquer limpeza necess\u00e1ria deve ser realizada neste m\u00e9todo, como invalidar timers, cancelar requisi\u00e7\u00f5es de rede, ou limpar qualquer subscri\u00e7\u00e3o que foi criada no <code class=\"language-javascript\">componentDidMount()</code>.</p>\n<p><strong>N\u00e3o se deve chamar <code class=\"language-javascript\">setState()</code></strong> em <code class=\"language-javascript\">componentWillUnmount()</code> porque o componente nunca ir\u00e1 ser\u00e1 renderizado novamente. Uma vez que a inst\u00e2ncia do componente foi desmontada, ela nunca ser\u00e1 montada de novo.</p>\n\n<h3 id=\"rarely-used-lifecycle-methods\"><a class=\"anchor\" href=\"/react/react-component#rarely-used-lifecycle-methods\"></a>M\u00e9todos Raramente Usados </h3>\n<p>Estes m\u00e9todos dessa se\u00e7\u00e3o correspondem a casos de uso incomuns. Eles s\u00e3o \u00fateis de vez em quando, mas na maioria das vezes, seus componentes provavelmente n\u00e3o ir\u00e3o precisar de nenhum deles. <strong>Pode ver a maioria dos m\u00e9todos abaixo <a class=\"external-link\" href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">neste diagrama do ciclo de vida</a> se clicar na checkbox \u201cMostrar ciclos de vida menos comuns\u201d no topo da p\u00e1gina.</strong></p>\n<h3 id=\"shouldcomponentupdate\"><a class=\"anchor\" href=\"/react/react-component#shouldcomponentupdate\"></a><code class=\"language-javascript\">shouldComponentUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Use <code class=\"language-javascript\">shouldComponentUpdate()</code> para permitir que o React saiba se o resultado de um componente n\u00e3o \u00e9 afetado pelas mudan\u00e7as atuais em state ou props. O comportamento padr\u00e3o \u00e9 para re-renderizar a cada mudan\u00e7a do state, e na grande maioria dos casos voc\u00ea deve confiar no comportamento padr\u00e3o.</p>\n<p><code class=\"language-javascript\">shouldComponentUpdate()</code> \u00e9 executado antes da renderiza\u00e7\u00e3o, quando novas props ou state s\u00e3o recebidos. O valor default \u00e9 <code class=\"language-javascript\">true</code>. Este m\u00e9todo n\u00e3o \u00e9 chamado na renderiza\u00e7\u00e3o inicial ou quando <code class=\"language-javascript\">forceUpdate()</code>\u00e9 usado.</p>\n<p>Este m\u00e9todo existe somente para <strong><a href=\"/react/optimizing-performance\">otimiza\u00e7\u00e3o de performance </a>.</strong> N\u00e3o confie nele para \u201cevitar\u201d a renderiza\u00e7\u00e3o, pois isso pode levar a bugs. <strong>Considere usar <a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">PureComponent</code></a></strong> no lugar de escrever <code class=\"language-javascript\">shouldComponentUpdate()</code> manualmente. <code class=\"language-javascript\">PureComponent</code> realiza uma compara\u00e7\u00e3o superficial das props e do state, e reduz as chances de pular um update necess\u00e1rio.</p>\n<p>Se voc\u00ea est\u00e1 confiante que quer escrever isto manualmente, pode comparar <code class=\"language-javascript\">this.props</code> com <code class=\"language-javascript\">nextProps</code> e <code class=\"language-javascript\">this.state</code> com <code class=\"language-javascript\">nextState</code>\ne retornar <code class=\"language-javascript\">false</code> para informar o React que o update pode ser pulado. Perceba que retornando <code class=\"language-javascript\">false</code> n\u00e3o evita que componentes filhos sejam renderizados novamente quando o state <em>deles</em> sofrer altera\u00e7\u00f5es.</p>\n<p>N\u00e3o recomendamos fazer verifica\u00e7\u00f5es de igualdade profundas ou usar <code class=\"language-javascript\">JSON.stringify()</code> dentro de <code class=\"language-javascript\">shouldComponentUpdate()</code>. Isto \u00e9 ineficiente e ir\u00e1 prejudicar a performance.</p>\n<p>Atualmente, se <code class=\"language-javascript\">shouldComponentUpdate()</code> retornar <code class=\"language-javascript\">false</code>, ent\u00e3o <a href=\"/react/react-component#unsafe_componentwillupdate\"><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code></a>, <a href=\"/react/react-component#render\"><code class=\"language-javascript\">render()</code></a>, e <a href=\"/react/react-component#componentdidupdate\"><code class=\"language-javascript\">componentDidUpdate()</code></a> n\u00e3o ser\u00e3o invocados. No futuro, React pode tratar  <code class=\"language-javascript\">shouldComponentUpdate()</code> como uma dica ao inv\u00e9s de uma rigorosa diretiva, e retornar <code class=\"language-javascript\">false</code> pode continuar resultando em re-renderiza\u00e7\u00e3o do componente.</p>\n\n<h3 id=\"static-getderivedstatefromprops\"><a class=\"anchor\" href=\"/react/react-component#static-getderivedstatefromprops\"></a><code class=\"language-javascript\">static getDerivedStateFromProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">getDerivedStateFromProps</code> \u00e9 invocado imediatamente antes de chamar o m\u00e9todo render, ambos na montagem inicial e nas atualiza\u00e7\u00f5es subsequente. Devem retornar um objeto para atualizar o state, ou <code class=\"language-javascript\">null</code> para n\u00e3o atualizar nada.</p>\n<p>Este m\u00e9todo existe para <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state\">casos de uso raros</a> onde o state depende de mudan\u00e7as nas props ao longo do tempo. Por exemplo, pode ser \u00fatil para implementar um componente <code class=\"language-javascript\">&lt;Transition&gt;</code> que compara seus filhos anteriores e pr\u00f3ximos para decidir quais deles devem ser animados.</p>\n<p>Derivando o state leva a c\u00f3digo verboso e faz seus componentes dif\u00edceis de compreender.\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">Tenha certeza de estar familiarizado com alternativas mais simples:</a></p>\n<ul>\n<li>Se precisar  <strong>executar um side effect</strong> (por exemplo, buscar dados ou uma anima\u00e7\u00e3o) em resposta a uma altera\u00e7\u00e3o em props, use <a href=\"/react/react-component#componentdidupdate\"><code class=\"language-javascript\">componentDidUpdate</code></a> no lugar.</li>\n<li>Se voc\u00ea quer <strong>recomputar alguns dados somente quando uma prop muda</strong>, <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization\">use um auxiliar de memoriza\u00e7\u00e3o no lugar</a>.</li>\n<li>Se voc\u00ea quer <strong>\u201cresetar\u201d o state quando uma prop muda</strong>, considere criar um componente <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component\">completamente controlado</a> ou <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">completamente controlado com uma <code class=\"language-javascript\">chave</code></a> instead.</li>\n</ul>\n<p>Este m\u00e9todo n\u00e3o tem acesso \u00e0 inst\u00e2ncia do componente. Se voc\u00ea quiser, pode reusar o c\u00f3digo entre o m\u00e9todo <code class=\"language-javascript\">getDerivedStateFromProps()</code> e os m\u00e9todos de outra classe extraindo fun\u00e7\u00f5es puras para as props e state do componente, fora da defini\u00e7\u00e3o da classe.</p>\n<p>Perceba que este m\u00e9todo \u00e9 disparado a <em>cada</em> renderiza\u00e7\u00e3o, independentemente da raz\u00e3o. Isto est\u00e1 em contraste com  <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps</code>, que dispara somente quando um componente pai causa uma re-renderiza\u00e7\u00e3o e n\u00e3o como resultado de uma chamada local a <code class=\"language-javascript\">setState</code>.</p>\n\n<h3 id=\"getsnapshotbeforeupdate\"><a class=\"anchor\" href=\"/react/react-component#getsnapshotbeforeupdate\"></a><code class=\"language-javascript\">getSnapshotBeforeUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">getSnapshotBeforeUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">getSnapshotBeforeUpdate()</code> \u00e9 invocado imediatamente antes que o retorno da renderiza\u00e7\u00e3o mais recente seja escrito e.g. no DOM. Isto permite que o componente capture alguma informa\u00e7\u00e3o do DOM (e.g. posi\u00e7\u00e3o do scroll) antes que ela seja potencialmente alterada. Qualquer valor retornado por este m\u00e9todo do ciclo de vida ser\u00e1 passado como par\u00e2metro para <code class=\"language-javascript\">componentDidUpdate()</code>.</p>\n<p>Este caso de uso n\u00e3o \u00e9 comum, mas pode ocorrer em UIs como um thread de um chat que precise tratar a posi\u00e7\u00e3o do scroll de uma maneira especial.</p>\n<p>A snapshot value (or <code class=\"language-javascript\">null</code>) should be returned.\nO valor do snapshot (ou <code class=\"language-javascript\">null</code>) deve ser retornado</p>\n<p>Por exemplo:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ScrollingList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getSnapshotBeforeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Are we adding new items to the list?</span>\n    <span class=\"token comment\">// Capture the scroll position so we can adjust scroll later.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> list<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">,</span> snapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If we have a snapshot value, we've just added new items.</span>\n    <span class=\"token comment\">// Adjust scroll so these new items don't push the old ones out of view.</span>\n    <span class=\"token comment\">// (snapshot here is the value returned from getSnapshotBeforeUpdate)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snapshot <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n      list<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> snapshot<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listRef<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ...contents... */</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>No exemplo acima, \u00e9 importante lermos a propriedade <code class=\"language-javascript\">scrollHeight</code> em <code class=\"language-javascript\">getSnapshotBeforeUpdate</code> porque podem ocorrer delays entre a fase do ciclo de vida \u201crenderiza\u00e7\u00e3o\u201d  (<code class=\"language-javascript\">render</code>) e a fase \u201ccommit\u201d (commit <code class=\"language-javascript\">getSnapshotBeforeUpdate</code> e <code class=\"language-javascript\">componentDidUpdate</code>).</p>\n\n<h3 id=\"error-boundaries\"><a class=\"anchor\" href=\"/react/react-component#error-boundaries\"></a>Error boundaries </h3>\n<p>Os <em><a href=\"/react/error-boundaries\">error boundaries</a></em> s\u00e3o componentes React que realizam o <em>catch</em> de erros de JavaScript em qualquer parte da sua \u00e1rvore de componentes filhos, realiza o <em>log</em> destes erros e exibe uma UI de <em>fallback</em> ao inv\u00e9s da \u00e1rvore de componentes que quebrou. Os <em>Error boundary</em> realizam o <em>catch</em> de erros durante a renderiza\u00e7\u00e3o, nos m\u00e9todos do lifecycle e em construtores de toda a sua \u00e1rvore descendente.</p>\n<p>Um <em>class component</em> se torna um <em>error boundary</em> caso ele defina um dos (ou ambos) m\u00e9todos do lifecycle <code class=\"language-javascript\">static getDerivedStateFromError()</code> ou <code class=\"language-javascript\">componentDidCatch()</code>. Atualizar o <em>state</em> a partir destes lifecycles permite que voc\u00ea capture um erro JavaScript n\u00e3o tratado na \u00e1rvore de descendentes e exiba uma UI de <em>fallback</em>.</p>\n<p>Somente utilize <em>error boundaries</em> para recupera\u00e7\u00e3o de exce\u00e7\u00f5es inesperadas; <strong>n\u00e3o tente utiliz\u00e1-lo para controlar o fluxo.</strong></p>\n<p>Para mais detalhes, veja <em><a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2017/07/26/error-handling-in-react-16.html\">Tratamento de Erros no React 16</a></em>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Os <em>error boundaries</em> somente realizam <em>catch</em> nos componentes <strong>abaixo</strong> dele na \u00e1rvore. Um <em>error boundary</em> n\u00e3o pode realizar o <em>catch</em> de um erro dentro de si pr\u00f3prio.</p>\n</div>\n<h3 id=\"static-getderivedstatefromerror\"><a class=\"anchor\" href=\"/react/react-component#static-getderivedstatefromerror\"></a><code class=\"language-javascript\">static getDerivedStateFromError()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Este <em>lifecycle</em> \u00e9 invocado ap\u00f3s um erro ser lan\u00e7ado por um componente descendente.\nEle recebe o erro que foi lan\u00e7ado como par\u00e2metro e deve retornar um valor para atualizar o <em>state</em>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Atualize o state para que a pr\u00f3xima renderiza\u00e7\u00e3o exiba a UI de fallback.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Voc\u00ea pode renderizar qualquer UI como fallback</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Something went wrong.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">getDerivedStateFromError()</code> \u00e9 chamado durante a fase de renderiza\u00e7\u00e3o, portanto efeitos colaterais (<em>side-effects</em>) n\u00e3o s\u00e3o permitidos.\nPara estes casos de uso, utilize <code class=\"language-javascript\">componentDidCatch()</code> como alternativa.</p>\n</div>\n\n<h3 id=\"componentdidcatch\"><a class=\"anchor\" href=\"/react/react-component#componentdidcatch\"></a><code class=\"language-javascript\">componentDidCatch()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Este lifecycle \u00e9 invocado ap\u00f3s um erro ter sido lan\u00e7ado por um componente descendente.\nEle recebe dois par\u00e2metros:</p>\n<ol>\n<li><code class=\"language-javascript\">error</code> - O erro que foi lan\u00e7ado.</li>\n<li><code class=\"language-javascript\">info</code> - Um objeto com uma chave <code class=\"language-javascript\">componentStack</code> contendo <a href=\"/react/error-boundaries#component-stack-traces\">informa\u00e7\u00f5es sobre qual componente lan\u00e7ou o erro</a>.</li>\n</ol>\n<p><code class=\"language-javascript\">componentDidCatch()</code> \u00e9 chamado durante a fase de \u201ccommit\u201d, portanto efeitos colaterais (<em>side-effects</em>) n\u00e3o s\u00e3o permitidos.\nEle deveria ser usado para, por exemplo, realizar o <em>log</em> de erros:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Atualize o state para que a pr\u00f3xima renderiza\u00e7\u00e3o exiba a UI de fallback.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Examplo de \"componentStack\":</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in ComponentThatThrows (created by App)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in ErrorBoundary (created by App)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in div (created by App)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in App</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">logComponentStackToMyService</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>componentStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Voc\u00ea pode renderizar qualquer UI como fallback</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Something went wrong.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As compila\u00e7\u00f5es de produ\u00e7\u00e3o e desenvolvimento do React diferem ligeiramente na maneira como <code class=\"language-javascript\">componentDidCatch()</code> lida com erros.</p>\n<p>No desenvolvimento, os erros ir\u00e3o borbulhar em <code class=\"language-javascript\">window</code>, isso significa que qualquer <code class=\"language-javascript\">window.onerror</code> ou <code class=\"language-javascript\">window.addEventListener('error', callback)</code> ir\u00e1 interceptar os erros que foram detectados por <code class=\"language-javascript\">componentDidCatch()</code>.</p>\n<p>Na produ\u00e7\u00e3o, em vez disso, os erros n\u00e3o surgir\u00e3o, o que significa que qualquer manipulador de erros ancestral receber\u00e1 apenas erros n\u00e3o explicitamente detectados por <code class=\"language-javascript\">componentDidCatch()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>No evento de um erro, voc\u00ea pode renderizar uma UI de <em>fallback</em> com <code class=\"language-javascript\">componentDidCatch()</code> chamando <code class=\"language-javascript\">setState</code>, mas isto ser\u00e1 depreciado numa <em>release</em> futura.\nUse <code class=\"language-javascript\">static getDerivedStateFromError()</code> para manipular a renderiza\u00e7\u00e3o de <em>fallback</em> como alternativa.</p>\n</div>\n\n<h3 id=\"legacy-lifecycle-methods\"><a class=\"anchor\" href=\"/react/react-component#legacy-lifecycle-methods\"></a>M\u00e9todos Legado do Ciclo de Vida </h3>\n<p>Os m\u00e9todos do ciclo de vida abaixo est\u00e3o marcados como \u201clegado\u201d. Eles ainda funcionam, mas n\u00e3o recomendamos utilizar eles em c\u00f3digo novo. Voc\u00ea pode aprender mais sobre a migra\u00e7\u00e3o de m\u00e9todos legado do ciclo de vida <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">neste post no blog</a>.</p>\n<h3 id=\"unsafe_componentwillmount\"><a class=\"anchor\" href=\"/react/react-component#unsafe_componentwillmount\"></a><code class=\"language-javascript\">UNSAFE_componentWillMount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">UNSAFE_componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Este lifecycle era nomeado <code class=\"language-javascript\">componentWillMount</code>. Este nome continuar\u00e1 a funcionar at\u00e9 a vers\u00e3o 17. Utilize o <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\">codemod <code class=\"language-javascript\">rename-unsafe-lifecycles</code></a> para atualizar automaticamente seus componentes.</p>\n</div>\n<p><code class=\"language-javascript\">UNSAFE_componentWillMount()</code> \u00e9 invocado antes que o <em>mounting</em> ocorra. Ele \u00e9 chamado antes de <code class=\"language-javascript\">render()</code>, portanto chamar <code class=\"language-javascript\">setState()</code> sincronamente neste m\u00e9todo n\u00e3o ir\u00e1 acarretar numa renderiza\u00e7\u00e3o extra. Geralmente, n\u00f3s recomendamos o <code class=\"language-javascript\">constructor()</code> como alternativa para inicializar o <em>state</em>.</p>\n<p>Evite introduzir quaisquer efeitos colaterais (<em>side-effects</em>) ou <em>subscriptions</em> neste m\u00e9todo. Para estes casos de uso, utilize <code class=\"language-javascript\">componentDidMount()</code>.</p>\n<p>Este \u00e9 o \u00fanico m\u00e9todo do lifecycle chamado na <em>renderiza\u00e7\u00e3o do servidor</em>.</p>\n\n<h3 id=\"unsafe_componentwillreceiveprops\"><a class=\"anchor\" href=\"/react/react-component#unsafe_componentwillreceiveprops\"></a><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">UNSAFE_componentWillReceiveProps</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Este lifecycle era nomeado <code class=\"language-javascript\">componentWillReceiveProps</code>. Este nome continuar\u00e1 a funcionar at\u00e9 a vers\u00e3o 17. Utilize o <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\">codemod <code class=\"language-javascript\">rename-unsafe-lifecycles</code></a> para atualizar automaticamente seus componentes.</p>\n</div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Utilizar este m\u00e9todo do lifecycle frequentemente acarreta em <em>bugs</em> e inconsist\u00eancias.</p>\n<ul>\n<li>Se voc\u00ea precisar causar um <em>side-effect</em> (por exemplo, buscar dados um realizar uma anima\u00e7\u00e3o) em resposta a uma mudan\u00e7a nas <em>props</em>, utilize o m\u00e9todo do lifecycle <a href=\"/react/react-component#componentdidupdate\"><code class=\"language-javascript\">componentDidUpdate</code></a> como alternativa.</li>\n<li>Se voc\u00ea usa <code class=\"language-javascript\">componentWillReceiveProps</code> para <strong>recomputar algum dado somente quando uma <em>prop</em> muda</strong>, <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization\">utilize um <em>memoization helper</em></a>.</li>\n<li>Se voc\u00ea usa <code class=\"language-javascript\">componentWillReceiveProps</code> para <strong>\u201cresetar\u201d algum <em>state</em> quando uma <em>prop</em> muda</strong>, considere ou criar um componente <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component\">completamente controlado</a> ou <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">completamente n\u00e3o controlado com uma <code class=\"language-javascript\">key</code></a> como alternativa.\nPara outros casos de uso, <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">siga as recomenda\u00e7\u00f5es neste <em>post</em> do <em>blog</em> sobre <em>derived state</em></a>.</li>\n</ul>\n</div>\n<p><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code> \u00e9 invocado antes que um componente montado receba novas <em>props</em>. Se voc\u00ea precisa atualizar o estado em resposta a mudan\u00e7as na <em>prop</em> (por exemplo, para reset\u00e1-lo), voc\u00ea pode comparar <code class=\"language-javascript\">this.props</code> e <code class=\"language-javascript\">nextProps</code> e realizar transi\u00e7\u00f5es de <em>state</em> utilizando <code class=\"language-javascript\">this.setState()</code> neste m\u00e9todo.</p>\n<p>Note que se um componente pai causar a re-renderiza\u00e7\u00e3o do seu componente, este m\u00e9todo ser\u00e1 chamado mesmo se as <em>props</em> n\u00e3o foram alteradas. Certifique-se de comparar o valor atual e o pr\u00f3ximo se voc\u00ea deseja somente manipular mudan\u00e7as.</p>\n<p>O React n\u00e3o chama <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code> com <em>props</em> iniciais durante o <em><a href=\"/react/react-component#mounting\">mounting</a></em>. Ele s\u00f3 chama este m\u00e9todo se alguma das <em>props</em> do componente puderem atualizar. Chamar <code class=\"language-javascript\">this.setState()</code> geralmente n\u00e3o desencadeia uma outra chamada <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code>.</p>\n\n<h3 id=\"unsafe_componentwillupdate\"><a class=\"anchor\" href=\"/react/react-component#unsafe_componentwillupdate\"></a><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">UNSAFE_componentWillUpdate</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Este lifecycle era nomeado <code class=\"language-javascript\">componentWillUpdate</code>. Este nome continuar\u00e1 a funcionar at\u00e9 a vers\u00e3o 17. Utilize o <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\">codemod <code class=\"language-javascript\">rename-unsafe-lifecycles</code></a> para atualizar automaticamente seus componentes.</p>\n</div>\n<p><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> \u00e9 invocado antes da renderiza\u00e7\u00e3o quando novas <em>props</em> ou <em>state</em> est\u00e3o sendo recebidos. Utilize este m\u00e9todo como uma oportunidade para realizar prepara\u00e7\u00f5es antes que uma atualiza\u00e7\u00e3o ocorra. Este m\u00e9todo n\u00e3o \u00e9 chamado para a renderiza\u00e7\u00e3o inicial.</p>\n<p>Note que voc\u00ea n\u00e3o pode chamar <code class=\"language-javascript\">this.setState()</code> aqui; e nem deveria fazer nada al\u00e9m (por exemplo, realizar o <em>dispatch</em> de uma <em>action</em> do <em>Redux</em>) que desencadearia uma atualiza\u00e7\u00e3o em um componente React antes que <code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> retorne.</p>\n<p>Tipicamente, este m\u00e9todo pode ser substitu\u00eddo por <code class=\"language-javascript\">componentDidUpdate()</code>. Se voc\u00ea estiver lendo do <em>DOM</em> neste m\u00e9todo (por exemplo, para salvar a posi\u00e7\u00e3o de rolagem), voc\u00ea pode mover esta l\u00f3gica para <code class=\"language-javascript\">getSnapshotBeforeUpdate()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> n\u00e3o ser\u00e1 invocado se <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> retornar <em>false</em>.</p>\n</div>\n\n<h2 id=\"other-apis-1\"><a class=\"anchor\" href=\"/react/react-component#other-apis-1\"></a>Outras APIs </h2>\n<p>Diferentemente dos m\u00e9todos do <em>lifecycle</em> acima (que o React chama por voc\u00ea), os m\u00e9todos abaixo s\u00e3o m\u00e9todos que <em>voc\u00ea</em> pode chamar a partir de seus componentes.</p>\n<p>Existem apenas dois deles: <code class=\"language-javascript\">setState()</code> e <code class=\"language-javascript\">forceUpdate()</code>.</p>\n<h3 id=\"setstate\"><a class=\"anchor\" href=\"/react/react-component#setstate\"></a><code class=\"language-javascript\">setState()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>updater<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">setState()</code> enfileira mudan\u00e7as ao <em>state</em> do componente e diz ao React que este componente e seus componentes filho precisam ser re-renderizados com a atualiza\u00e7\u00e3o do <em>state</em>. Este \u00e9 o principal m\u00e9todo que voc\u00ea utiliza para atualizar a UI em resposta a <em>event handlers</em> e \u00e0 resposta de servidores.</p>\n<p>Pense em <code class=\"language-javascript\">setState()</code> como uma <em>requisi\u00e7\u00e3o</em> ao inv\u00e9s de um comando imediato para atualizar o componente. Para uma melhoria na performance, o React pode atrasar a atualiza\u00e7\u00e3o, e ent\u00e3o atualizar diversos componentes numa s\u00f3 leva. O React n\u00e3o garante que as mudan\u00e7as no <em>state</em> s\u00e3o aplicadas imediatamente.</p>\n<p><code class=\"language-javascript\">setState()</code> nem sempre atualiza o componente imediatamente. Ele pode adiar a atualiza\u00e7\u00e3o para mais tarde. Isto torna a leitura de <code class=\"language-javascript\">this.state</code> logo ap\u00f3s chamar <code class=\"language-javascript\">setState()</code> uma potencial cilada. Como alternativa, utilize <code class=\"language-javascript\">componentDidUpdate</code> ou o <em>callback</em> de <code class=\"language-javascript\">setState</code> (<code class=\"language-javascript\">setState(updater, callback)</code>), ambos possuem a garantia de dispararem ap\u00f3s a aplica\u00e7\u00e3o da atualiza\u00e7\u00e3o. Se voc\u00ea precisa definir o <em>state</em> baseado no <em>state</em> anterior, leia sobre o argumento <code class=\"language-javascript\">updater</code> abaixo.</p>\n<p><code class=\"language-javascript\">setState()</code> vai sempre conduzir a uma re-renderiza\u00e7\u00e3o a menos que <code class=\"language-javascript\">shouldComponentUpdate()</code> retorne <code class=\"language-javascript\">false</code>. Se objetos mut\u00e1veis est\u00e3o sendo utilizados e l\u00f3gica de renderiza\u00e7\u00e3o condicional n\u00e3o puder ser implementada em <code class=\"language-javascript\">shouldComponentUpdate()</code>, chamar <code class=\"language-javascript\">setState()</code> somente quando o novo <em>state</em> diferir do <em>state</em> anterior ir\u00e1 evitar re-renderiza\u00e7\u00f5es desnecess\u00e1rias.</p>\n<p>O primeiro argumento \u00e9 uma fun\u00e7\u00e3o <code class=\"language-javascript\">updater</code> com a assinatura:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> stateChange</code></pre></div>\n<p><code class=\"language-javascript\">state</code> \u00e9 a refer\u00eancia ao <em>state</em> do componente no momento que a mudan\u00e7a est\u00e1 sendo aplicada. Ele n\u00e3o deve ser mutado diretamente. As mudan\u00e7as devem ser representadas construindo um novo objeto baseado no <em>input</em> de <em>state</em> e <em>props</em>. Por exemplo, suponha que queiramos incrementar um valor no <em>state</em> em <code class=\"language-javascript\">props.step</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>counter<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tanto <code class=\"language-javascript\">state</code> quanto <code class=\"language-javascript\">props</code> que foram recebidas pela fun\u00e7\u00e3o <code class=\"language-javascript\">updater</code> tem a garantia de estarem atualizados. A sa\u00edda do <em>updater</em> \u00e9 superficialmente mesclada com o <em>state</em>.</p>\n<p>O segundo par\u00e2metro de <code class=\"language-javascript\">setState()</code> \u00e9 uma fun\u00e7\u00e3o de <em>callback</em> opcional que ser\u00e1 executada assim que <code class=\"language-javascript\">setState</code> for completada e o componente re-renderizado. Geralmente, recomendamos utilizar <code class=\"language-javascript\">componentDidUpdate()</code> para implementar esta l\u00f3gica.</p>\n<p>Voc\u00ea tamb\u00e9m pode passar um objeto como primeiro argumento de <code class=\"language-javascript\">setState()</code> ao inv\u00e9s de uma fun\u00e7\u00e3o:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>stateChange<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Isto realiza uma mescla superficial de <code class=\"language-javascript\">stateChange</code> dentro no novo <em>state</em>. Por exemplo: para ajustar a quantidade de items no carrinho de compras:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>quantity<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Esta forma de <code class=\"language-javascript\">setState()</code> tamb\u00e9m \u00e9 ass\u00edncrona e m\u00faltiplas chamadas durante o mesmo ciclo podem ser agrupadas numa s\u00f3. Por exemplo, se voc\u00ea tentar incrementar a quantidade de itens mais que uma vez no mesmo ciclo, isto resultar\u00e1 no equivalente a:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n  previousState<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>quantity<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>quantity<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Chamadas subsequentes ir\u00e3o sobrescrever valores de chamadas anteriores no mesmo ciclo. Com isso, a quantidade ser\u00e1 incrementada somente uma vez. Se o pr\u00f3ximo estado depende do estado atual, recomendamos utilizar a fun\u00e7\u00e3o <em>updater</em> como alternativa:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>quantity<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para mais informa\u00e7\u00f5es, veja:</p>\n<ul>\n<li><a href=\"/react/state-and-lifecycle\">Guia de Estado e Ciclo de Vida</a></li>\n<li><a class=\"external-link\" href=\"https://stackoverflow.com/a/48610973/458193\">Em detalhes: Quando e por que <code class=\"language-javascript\">setState()</code> agrupa chamadas?</a></li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">Em detalhes: por que o <code class=\"language-javascript\">this.state</code> \u00e9 atualizado imediatamente?</a></li>\n</ul>\n\n<h3 id=\"forceupdate\"><a class=\"anchor\" href=\"/react/react-component#forceupdate\"></a><code class=\"language-javascript\">forceUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">component<span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Por padr\u00e3o, quando o <em>state</em> ou as <em>props</em> do seu componente s\u00e3o alteradas, seu componente renderizar\u00e1 novamente. Caso seu m\u00e9todo <code class=\"language-javascript\">render()</code> dependa de algum outro dado, voc\u00ea pode informar ao React que o componente precisa de uma re-renderiza\u00e7\u00e3o chamando <code class=\"language-javascript\">forceUpdate()</code>.</p>\n<p>Chamar <code class=\"language-javascript\">forceUpdate()</code> acarretar\u00e1 numa chamada de <code class=\"language-javascript\">render()</code> no componente, escapando <code class=\"language-javascript\">shouldComponentUpdate()</code>. Os m\u00e9todos normais do lifecycle para os componentes filho ser\u00e3o chamados, incluindo o m\u00e9todo <code class=\"language-javascript\">shouldComponentUpdate()</code> de cada filho. O React ainda ir\u00e1 atualizar o <em>DOM</em> caso realmente haja mudan\u00e7as.</p>\n<p>Normalmente, voc\u00ea deveria tentar evitar o uso de <code class=\"language-javascript\">forceUpdate()</code> e somente ler de <code class=\"language-javascript\">this.props</code> e <code class=\"language-javascript\">this.state</code> em <code class=\"language-javascript\">render()</code>.</p>\n\n<h2 id=\"class-properties-1\"><a class=\"anchor\" href=\"/react/react-component#class-properties-1\"></a>Propriedades da Classe </h2>\n<h3 id=\"defaultprops\"><a class=\"anchor\" href=\"/react/react-component#defaultprops\"></a><code class=\"language-javascript\">defaultProps</code> </h3>\n<p><code class=\"language-javascript\">defaultProps</code> pode ser definido como uma propriedade do <em>component class</em>, para definir as <em>props</em> padr\u00e3o para a classe. Isto \u00e9 aplicado a <em>props</em> cujo valor \u00e9 <code class=\"language-javascript\">undefined</code>, mas n\u00e3o para <code class=\"language-javascript\">null</code>. Por exemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nCustomButton<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se <code class=\"language-javascript\">props.color</code> n\u00e3o for informado, o seu valor ser\u00e1 definido como <code class=\"language-javascript\">'blue'</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomButton</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// props.color ser\u00e1 definido como 'blue'</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se <code class=\"language-javascript\">props.color</code> for igual a <code class=\"language-javascript\">null</code>, continuar\u00e1 como <code class=\"language-javascript\">null</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomButton</span></span> <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// props.color continuar\u00e1 null</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n\n<h3 id=\"displayname\"><a class=\"anchor\" href=\"/react/react-component#displayname\"></a><code class=\"language-javascript\">displayName</code> </h3>\n<p>A <em>string</em> <code class=\"language-javascript\">displayName</code> \u00e9 utilizada em mensagens de depura\u00e7\u00e3o. Normalmente, voc\u00ea n\u00e3o precisa defini-la explicitamente. Pois isto \u00e9 inferido do nome da fun\u00e7\u00e3o ou classe que definem o componente. Voc\u00ea pode querer defini-la explicitamente se quiser exibir um nome diferente para prop\u00f3sitos de depura\u00e7\u00e3o ou quando voc\u00ea cria um <em>higher-order component</em>. Veja <a href=\"/react/higher-order-components#convention-wrap-the-display-name-for-easy-debugging\">Envolva o Display Name para Facilitar a Depura\u00e7\u00e3o</a> para mais detalhes.</p>\n\n<h2 id=\"instance-properties-1\"><a class=\"anchor\" href=\"/react/react-component#instance-properties-1\"></a>Propriedades da Inst\u00e2ncia </h2>\n<h3 id=\"props\"><a class=\"anchor\" href=\"/react/react-component#props\"></a><code class=\"language-javascript\">props</code> </h3>\n<p><code class=\"language-javascript\">this.props</code> cont\u00e9m as <em>props</em> que foram definidas por quem chamou este componente. Veja <a href=\"/react/components-and-props\">Componentes e Props</a> para uma introdu\u00e7\u00e3o \u00e0s <em>props</em>.</p>\n<p>Em particular, <code class=\"language-javascript\">this.props.children</code> \u00e9 uma <em>prop</em> especial, normalmente definida pelas <em>tags</em> filhas na express\u00e3o JSX, ao inv\u00e9s de na pr\u00f3pria <em>tag</em>.</p>\n<h3 id=\"state\"><a class=\"anchor\" href=\"/react/react-component#state\"></a><code class=\"language-javascript\">state</code> </h3>\n<p>O <em>state</em> cont\u00e9m dados espec\u00edficos a este componente que podem mudar com o tempo. O <em>state</em> \u00e9 definido pelo usu\u00e1rio e deve ser um objeto JavaScript.</p>\n<p>Se algum valor n\u00e3o for usado para renderizamento ou para controle de <em>data flow</em> (por exemplo, um <em>ID</em> de <em>timer</em>), voc\u00ea n\u00e3o precisa colocar no <em>state</em>. Tais valores podem ser definidos como campos na inst\u00e2ncia do componente.</p>\n<p>Veja <a href=\"/react/state-and-lifecycle\">Estado e Ciclo de Vida</a> para mais informa\u00e7\u00f5es sobre o <em>state</em>.</p>\n<p>Nunca mude <code class=\"language-javascript\">this.state</code> diretamente, pois chamar <code class=\"language-javascript\">setState()</code> ap\u00f3s a muta\u00e7\u00e3o pode substituir a muta\u00e7\u00e3o realizada. Trate <code class=\"language-javascript\">this.state</code> como se ele fosse imut\u00e1vel.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reference-react-component.md\">Edit this page</a></p></div></article>", "path": "/react/react-component", "nav": ["/react/react-api", "/react/react-dom"]}, {"key": "ReactDOM", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Se voc\u00ea carregar o React atrav\u00e9s de uma tag <code class=\"language-javascript\">&lt;script&gt;</code>, essas APIs de n\u00edvel superior est\u00e3o dispon\u00edveis globalmente em <code class=\"language-javascript\">ReactDOM</code>. Se voc\u00ea usa ES6 com npm, voc\u00ea pode escrever <code class=\"language-javascript\">import ReactDOM from 'react-dom'</code>. Se voc\u00ea usa ES5 com npm, voc\u00ea pode escrever <code class=\"language-javascript\">var ReactDOM = require('react-dom')</code>.</p>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-dom#overview\"></a>Vis\u00e3o Geral </h2>\n<p>O pacote <code class=\"language-javascript\">react-dom</code> prov\u00ea m\u00e9todos espec\u00edficos para o DOM que podem ser usados no n\u00edvel superior de sua aplica\u00e7\u00e3o como uma v\u00e1lvula de escape para sair do modelo do React se voc\u00ea precisar. A maioria de seus componentes n\u00e3o devem precisar deste m\u00f3dulo.</p>\n<ul>\n<li><a href=\"/react/react-dom#render\"><code class=\"language-javascript\">render()</code></a></li>\n<li><a href=\"/react/react-dom#hydrate\"><code class=\"language-javascript\">hydrate()</code></a></li>\n<li><a href=\"/react/react-dom#unmountcomponentatnode\"><code class=\"language-javascript\">unmountComponentAtNode()</code></a></li>\n<li><a href=\"/react/react-dom#finddomnode\"><code class=\"language-javascript\">findDOMNode()</code></a></li>\n<li><a href=\"/react/react-dom#createportal\"><code class=\"language-javascript\">createPortal()</code></a></li>\n</ul>\n<h3 id=\"browser-support\"><a class=\"anchor\" href=\"/react/react-dom#browser-support\"></a>Suporte dos Navegadores </h3>\n<p>O React suporta todos os navegadores populares, incluindo Internet Explorer 9 e acima, apesar de <a href=\"/react/javascript-environment-requirements\">precisar de alguns <em>polyfills</em></a> para navegadores antigos como IE 9 e IE 10.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>N\u00f3s n\u00e3o temos suporte para navegadores antigos que n\u00e3o possuem suporte para m\u00e9todos ES5. Mas, voc\u00ea pode descobrir que suas aplica\u00e7\u00f5es funcionam em navegadores antigos se <em>polyfills</em> como <a class=\"external-link\" href=\"https://github.com/es-shims/es5-shim\">es5-shim and es5-sham</a> forem inclu\u00eddos na p\u00e1gina. Voc\u00ea estar\u00e1 por conta e risco se optar por seguir esse caminho.</p>\n</div>\n\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-dom#reference\"></a>Refer\u00eancia </h2>\n<h3 id=\"render\"><a class=\"anchor\" href=\"/react/react-dom#render\"></a><code class=\"language-javascript\">render()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderiza o um elemento do React no DOM no <code class=\"language-javascript\">container</code> fornecido e retorna uma <a href=\"/react/more-about-refs\">refer\u00eancia</a> ao componente (ou retorna <code class=\"language-javascript\">null</code> para <a href=\"/react/components-and-props#function-and-class-components\">componentes sem state</a>)</p>\n<p>Se o elemento do React foi previamente renderizado no <code class=\"language-javascript\">container</code>, isso vai realizar uma atualiza\u00e7\u00e3o nele e s\u00f3 alterar o DOM conforme necess\u00e1rio para refletir o elemento do React mais recente.</p>\n<p>Se a <em>callback</em> opcional for fornecida, ela ser\u00e1 executada depois do componente ser renderizado ou atualizado.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">ReactDOM.render()</code> controla o conte\u00fado do n\u00f3 cont\u00eainer que voc\u00ea passa. Qualquer elemento do DOM que existe dentro ser\u00e1 substitu\u00eddo na primeira chamada. As pr\u00f3ximas chamadas usam o algoritmo de diferencia\u00e7\u00e3o do React para atualiza\u00e7\u00f5es eficientes.</p>\n<p><code class=\"language-javascript\">ReactDOM.render()</code> n\u00e3o modifica o n\u00f3 cont\u00eainer (s\u00f3 modifica os filhos do cont\u00eainer). Pode ser poss\u00edvel inserir um componente em um n\u00f3 j\u00e1 existente no DOM sem sobrescrever os filhos existentes.</p>\n<p><code class=\"language-javascript\">ReactDOM.render()</code> atualmente retorna uma refer\u00eancia \u00e0 inst\u00e2ncia raiz de <code class=\"language-javascript\">ReactComponent</code>. Por\u00e9m, usar esse valor de retorno \u00e9 legado\ne deve ser evitado porque vers\u00f5es futuras do React podem renderizar componentes assincronamente em alguns casos. Se voc\u00ea precisa de uma refer\u00eancia da inst\u00e2ncia raiz de <code class=\"language-javascript\">ReactComponent</code>, a solu\u00e7\u00e3o preferida \u00e9 de anexar uma\n<a href=\"/react/refs-and-the-dom#callback-refs\">callback de ref</a> para o elemento raiz.</p>\n<p>Usar <code class=\"language-javascript\">ReactDOM.render()</code> para hidratar um cont\u00eainer renderizado no servidor est\u00e1 deprecado e ser\u00e1 removido no React 17. Ao inv\u00e9s disso, use <a href=\"/react/react-dom#hydrate\"><code class=\"language-javascript\">hydrate()</code></a>.</p>\n</div>\n\n<h3 id=\"hydrate\"><a class=\"anchor\" href=\"/react/react-dom#hydrate\"></a><code class=\"language-javascript\">hydrate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>O mesmo que <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">render()</code></a>, mas \u00e9 usado para hidratar um cont\u00eainer cujo o conte\u00fado HTML foi renderizado pelo <a href=\"/react/react-dom-server\"><code class=\"language-javascript\">ReactDOMServer</code></a>. O React tentar\u00e1 anexar <em>event listeners</em> ao <em>markup</em> existente.</p>\n<p>O React espera que o conte\u00fado renderizado seja id\u00eantico entre o servidor e o cliente. Ele pode consertar diferen\u00e7as no conte\u00fado de texto, mas voc\u00ea deve tratar incompatibilidades como erros e ajust\u00e1-las. Em modo de desenvolvimento, o React avisa sobre incompatibilidades durante a hidrata\u00e7\u00e3o. N\u00e3o existem garantias de que diferen\u00e7as entre atributos ser\u00e3o consertadas em caso de incompatibilidade. Isso \u00e9 importante por quest\u00f5es de performance porque na maioria dos aplicativos, incompatibilidades s\u00e3o raras e, portanto, validar todo o <em>markup</em> seria proibitivamente caro.</p>\n<p>Se um \u00fanico atributo de elemento ou conte\u00fado de texto \u00e9 inevitavelmente diferente entre o servidor e o cliente (como por exemplo, um <em>timestamp</em>), voc\u00ea pode silenciar o aviso adicionando <code class=\"language-javascript\">suppressHydrationWarning={true}</code> ao elemento. S\u00f3 funciona \u00e0 um n\u00edvel de profundidade, e destina-se a ser uma v\u00e1lvula de escape. N\u00e3o use em excesso. A n\u00e3o ser que o conte\u00fado seja um texto, o React ainda n\u00e3o vai tentar consertar, ent\u00e3o ele pode permanecer inconsistente at\u00e9 futuras atualiza\u00e7\u00f5es.</p>\n<p>Se voc\u00ea precisa propositalmente renderizar algo diferente no servidor e no cliente, voc\u00ea pode fazer uma renderiza\u00e7\u00e3o de dois passos. Componentes que renderizam algo diferente no cliente podem ler uma vari\u00e1vel de state como <code class=\"language-javascript\">this.state.isClient</code>, que voc\u00ea pode atribuir o valor <code class=\"language-javascript\">true</code> no <code class=\"language-javascript\">componentDidMount()</code>. Dessa forma o passo de renderiza\u00e7\u00e3o inicial ir\u00e1 renderizar o mesmo conte\u00fado que o servidor, evitando incompatibilidades, mas um passo adicional acontecer\u00e1 sincronamente logo ap\u00f3s a hidrata\u00e7\u00e3o. Note que essa abordagem far\u00e1 seus componentes mais lentos porque eles tem de renderizar duas vezes, ent\u00e3o use com cautela.</p>\n<p>Lembre-se de estar atento \u00e0 experi\u00eancia de usu\u00e1rio em conex\u00f5es lentas. O c\u00f3digo JavaScript pode carregar significativamente depois da renderiza\u00e7\u00e3o inicial do HTML, ent\u00e3o se voc\u00ea renderizar algo diferente no passo do cliente, a transi\u00e7\u00e3o pode ser \u00e1spera. No entanto, se executado bem, pode ser ben\u00e9fico renderizar uma \u201ccasca\u201d da aplica\u00e7\u00e3o no servidor, e s\u00f3 mostrar ferramentas extras no lado do cliente. Para aprender como fazer isso sem encontrar problemas de incompatibilidade do markup, consulte a explica\u00e7\u00e3o do par\u00e1grafo anterior.</p>\n\n<h3 id=\"unmountcomponentatnode\"><a class=\"anchor\" href=\"/react/react-dom#unmountcomponentatnode\"></a><code class=\"language-javascript\">unmountComponentAtNode()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Remove do DOM um componente React j\u00e1 montado e limpa seus manipuladores de evento (<em>event handlers</em>) e estado (<em>state</em>). Se nenhum componente foi montado no cont\u00eainer, chamar essa fun\u00e7\u00e3o n\u00e3o faz nada. Retorna <code class=\"language-javascript\">true</code> se um componente foi desmontado e <code class=\"language-javascript\">false</code> se n\u00e3o tinha nenhum componente para desmontar.</p>\n\n<h3 id=\"finddomnode\"><a class=\"anchor\" href=\"/react/react-dom#finddomnode\"></a><code class=\"language-javascript\">findDOMNode()</code> </h3>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">findDOMNode</code> \u00e9 uma v\u00e1lvula de escape usada para acessar o n\u00f3 subjacente do DOM. Na maioria dos casos, o uso dessa v\u00e1lvula de escape \u00e9 desencorajado porque perfura a abstra\u00e7\u00e3o do componente. <a href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\">Foi deprecado em <code class=\"language-javascript\">StrictMode</code>.</a></p>\n</div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">findDOMNode</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Se esse componente foi montado no DOM, isso retorna o elemento do DOM nativo do navegador. Esse m\u00e9todo \u00e9 \u00fatil para ler valores fora do DOM, como valores de campos de formul\u00e1rio e realizar medi\u00e7\u00f5es do DOM. <strong>Na maioria dos casos, voc\u00ea pode anexar uma ref ao n\u00f3 do DOM e evitar completamente o uso de <code class=\"language-javascript\">findDOMNode</code>.</strong></p>\n<p>Quando um componente renderiza <code class=\"language-javascript\">null</code> ou <code class=\"language-javascript\">false</code>, <code class=\"language-javascript\">findDOMNode</code> retorna <code class=\"language-javascript\">null</code>. Quando um componente renderiza uma string, <code class=\"language-javascript\">findDOMNode</code> retorna um n\u00f3 de texto do DOM contendo esse valor. A partir do React 16, um componente pode retornar um fragmento com m\u00faltiplos filhos, nesse caso <code class=\"language-javascript\">findDOMNode</code> ir\u00e1 retornar o n\u00f3 do DOM correspondente ao primeiro filho n\u00e3o vazio.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">findDOMNode</code> s\u00f3 funciona em componentes montados (ou seja, componentes que foram postos no DOM). Se voc\u00ea tentar chamar isso em um componente que n\u00e3o foi montado ainda (como chamar <code class=\"language-javascript\">findDOMNode()</code> no <code class=\"language-javascript\">render()</code> em um componente que ainda tem que ser criado) uma exce\u00e7\u00e3o ser\u00e1 lan\u00e7ada.</p>\n<p><code class=\"language-javascript\">findDOMNode</code> n\u00e3o pode ser usado em componentes funcionais.</p>\n</div>\n\n<h3 id=\"createportal\"><a class=\"anchor\" href=\"/react/react-dom#createportal\"></a><code class=\"language-javascript\">createPortal()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cria um portal. Portais prov\u00eam uma forma de <a href=\"/react/portals\">renderizar filhos em um n\u00f3 do DOM que existe fora da hierarquia do componente do DOM</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reference-react-dom.md\">Edit this page</a></p></div></article>", "path": "/react/react-dom", "nav": ["/react/react-component", "/react/react-dom-server"]}, {"key": "ReactDOMServer", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>O objeto <code class=\"language-javascript\">ReactDOMServer</code> permite que voc\u00ea renderize componentes para markup est\u00e1tico. Normalmente, \u00e9 usado em um servidor Node:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// M\u00f3dulos ES</span>\n<span class=\"token keyword\">import</span> ReactDOMServer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CommonJS</span>\n<span class=\"token keyword\">var</span> ReactDOMServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-dom-server#overview\"></a>Vis\u00e3o Geral </h2>\n<p>Os m\u00e9todos a seguir podem ser usados tanto em ambiente de servidor como de navegador:</p>\n<ul>\n<li><a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">renderToString()</code></a></li>\n<li><a href=\"/react/react-dom-server#rendertostaticmarkup\"><code class=\"language-javascript\">renderToStaticMarkup()</code></a></li>\n</ul>\n<p>Estes m\u00e9todos adicionais dependem do pacote (<code class=\"language-javascript\">stream</code>) que <strong>s\u00f3 est\u00e1 dispon\u00edvel no servidor</strong> e n\u00e3o ir\u00e3o funcionar no navegador.</p>\n<ul>\n<li><a href=\"/react/react-dom-server#rendertonodestream\"><code class=\"language-javascript\">renderToNodeStream()</code></a></li>\n<li><a href=\"/react/react-dom-server#rendertostaticnodestream\"><code class=\"language-javascript\">renderToStaticNodeStream()</code></a></li>\n</ul>\n\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-dom-server#reference\"></a>Refer\u00eancia </h2>\n<h3 id=\"rendertostring\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertostring\"></a><code class=\"language-javascript\">renderToString()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderiza um elemento React para o seu HTML inicial. O React retornar\u00e1 uma string HTML. Voc\u00ea pode usar este m\u00e9todo para gerar HTML no servidor e enviar o markup no request inicial para ter carregamentos de p\u00e1ginas mais r\u00e1pidos e para permitir que motores de pesquisa rastreiem suas p\u00e1ginas para fins de SEO.</p>\n<p>Se voc\u00ea invocar <a href=\"/react/react-dom#hydrate\"><code class=\"language-javascript\">ReactDOM.hydrate()</code></a> em um n\u00f3 que j\u00e1 tem o seu markup processado pelo servidor, o React vai preserv\u00e1-lo e apenas atribuir manipuladores de eventos, permitindo que voc\u00ea tenha uma experi\u00eancia de primeiro carregamento muito eficiente.</p>\n\n<h3 id=\"rendertostaticmarkup\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertostaticmarkup\"></a><code class=\"language-javascript\">renderToStaticMarkup()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticMarkup</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Semelhante a <a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">renderToString</code></a>, exceto que este n\u00e3o cria atributos DOM extras que o React usa internamente, como <code class=\"language-javascript\">data-reactroot</code>. Isso \u00e9 \u00fatil se voc\u00ea quiser usar o React como um simples gerador de p\u00e1ginas est\u00e1ticas, j\u00e1 que remover os atributos extras pode economizar alguns bytes.</p>\n<p>Se voc\u00ea planeja usar o React no cliente para tornar o markup interativo, n\u00e3o use este m\u00e9todo. Em vez disso, use <a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">renderToString</code></a> no servidor e <a href=\"/react/react-dom#hydrate\"><code class=\"language-javascript\">ReactDOM.hydrate()</code></a> no cliente.</p>\n\n<h3 id=\"rendertonodestream\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertonodestream\"></a><code class=\"language-javascript\">renderToNodeStream()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToNodeStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderiza um elemento React para seu HTML inicial. Retorna um <a class=\"external-link\" href=\"https://nodejs.org/api/stream.html#stream_readable_streams\">Readable Stream</a> que gera uma string HTML. A sa\u00edda HTML desse stream \u00e9 exatamente igual \u00e0 que <a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">ReactDOMServer.renderToString</code></a> retornaria. Voc\u00ea pode usar este m\u00e9todo para gerar HTML no servidor e enviar o markup no request inicial para ter carregamentos de p\u00e1gina mais r\u00e1pidos e para permitir que motores de busca rastreiem suas p\u00e1ginas para fins de SEO.</p>\n<p>Se voc\u00ea invocar <a href=\"/react/react-dom#hydrate\"><code class=\"language-javascript\">ReactDOM.hydrate()</code></a> em um n\u00f3 que j\u00e1 tem o seu markup processado pelo servidor, o React vai preserv\u00e1-lo e apenas atribuir manipuladores de eventos, permitindo que voc\u00ea tenha uma experi\u00eancia de primeiro carregamento muito eficiente.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Apenas para servidor. Esta API n\u00e3o est\u00e1 dispon\u00edvel no navegador.</p>\n<p>O stream retornado deste m\u00e9todo retornar\u00e1 um stream de bytes codificado em utf-8. Se voc\u00ea precisar de um stream em outra codifica\u00e7\u00e3o, d\u00ea uma olhada em um projeto como o <a class=\"external-link\" href=\"https://www.npmjs.com/package/iconv-lite\">iconv-lite</a>, que fornece streams de transforma\u00e7\u00e3o para transcodifica\u00e7\u00e3o de texto.</p>\n</div>\n\n<h3 id=\"rendertostaticnodestream\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertostaticnodestream\"></a><code class=\"language-javascript\">renderToStaticNodeStream()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticNodeStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Semelhante a <a href=\"/react/react-dom-server#rendertonodestream\"><code class=\"language-javascript\">renderToNodeStream</code></a>, exceto que este n\u00e3o cria atributos DOM extras que o React usa internamente, como <code class=\"language-javascript\">data-reactroot</code>. Isso \u00e9 \u00fatil se voc\u00ea quiser usar o React como um simples gerador de p\u00e1ginas est\u00e1ticas, j\u00e1 que remover os atributos extras pode economizar alguns bytes.</p>\n<p>A sa\u00edda HTML desse stream \u00e9 exatamente igual ao que <a href=\"/react/react-dom-server#rendertostaticmarkup\"><code class=\"language-javascript\">ReactDOMServer.renderToStaticMarkup</code></a> retornaria.</p>\n<p>Se voc\u00ea planeja usar o React no cliente para tornar o markup interativo, n\u00e3o use este m\u00e9todo. Em vez disso, use <a href=\"/react/react-dom-server#rendertonodestream\"><code class=\"language-javascript\">renderToNodeStream</code></a> no servidor e <a href=\"/react/react-dom#hydrate\"><code class=\"language-javascript\">ReactDOM.hydrate()</code></a> no cliente.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Apenas para servidor. Esta API n\u00e3o est\u00e1 dispon\u00edvel no navegador.</p>\n<p>O stream retornado deste m\u00e9todo retornar\u00e1 um stream de bytes codificado em utf-8. Se voc\u00ea precisar de um stream em outra codifica\u00e7\u00e3o, d\u00ea uma olhada em um projeto como o <a class=\"external-link\" href=\"https://www.npmjs.com/package/iconv-lite\">iconv-lite</a>, que fornece streams de transforma\u00e7\u00e3o para transcodifica\u00e7\u00e3o de texto.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reference-react-dom-server.md\">Edit this page</a></p></div></article>", "path": "/react/react-dom-server", "nav": ["/react/react-dom", "/react/dom-elements"]}, {"key": "Elementos do DOM", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>O React implementa um sistema DOM independente ao navegador visando performance e compatibilidade entre navegadores. Aproveitamos a oportunidade para melhorar algumas implementa\u00e7\u00f5es do DOM no navegador.</p>\n<p>No React, todas as propriedades e atributos (incluindo manipuladores de eventos) devem estar em <em>camelCase</em>. Por exemplo, o atributo HTML <code class=\"language-javascript\">tabindex</code> corresponde ao atributo <code class=\"language-javascript\">tabIndex</code> no React. As exce\u00e7\u00f5es s\u00e3o os atributos <code class=\"language-javascript\">aria-*</code> e <code class=\"language-javascript\">data-*</code>, os quais devem estar em <em>lowercase</em>. Por exemplo, voc\u00ea pode manter <code class=\"language-javascript\">aria-label</code> como <code class=\"language-javascript\">aria-label</code>.</p>\n<h2 id=\"differences-in-attributes\"><a class=\"anchor\" href=\"/react/dom-elements#differences-in-attributes\"></a>Diferen\u00e7as nos Atributos </h2>\n<p>Existem alguns atributos que funcionam de formas diferentes no React e no HTML:</p>\n<h3 id=\"checked\"><a class=\"anchor\" href=\"/react/dom-elements#checked\"></a>checked </h3>\n<p>O atributo <code class=\"language-javascript\">checked</code> \u00e9 suportado por componentes <code class=\"language-javascript\">&lt;input&gt;</code> do tipo (<em><code class=\"language-javascript\">type</code></em>) <code class=\"language-javascript\">checkbox</code> ou <code class=\"language-javascript\">radio</code>. Voc\u00ea pode us\u00e1-lo para definir se o componente est\u00e1 checado. Isso \u00e9 \u00fatil para constru\u00e7\u00e3o de componentes controlados (<em>controlled components</em>). <code class=\"language-javascript\">defaultChecked</code> \u00e9 o equivalente para componentes n\u00e3o controlados (<em>uncontrolled components</em>), que define se o componente est\u00e1 checado na primeira vez em que \u00e9 montado.</p>\n<h3 id=\"classname\"><a class=\"anchor\" href=\"/react/dom-elements#classname\"></a>className </h3>\n<p>Para especificar uma classe CSS, utilize o atributo <code class=\"language-javascript\">className</code>. Isso se aplica para todos os DOM e elementos SVG regulares como <code class=\"language-javascript\">&lt;div&gt;</code>, <code class=\"language-javascript\">&lt;a&gt;</code>, e outros.</p>\n<p>Se voc\u00ea usar React com Web Components (que \u00e9 uma pr\u00e1tica incomum), use o atributo <code class=\"language-javascript\">class</code>.</p>\n<h3 id=\"dangerouslysetinnerhtml\"><a class=\"anchor\" href=\"/react/dom-elements#dangerouslysetinnerhtml\"></a>dangerouslySetInnerHTML </h3>\n<p><code class=\"language-javascript\">dangerouslySetInnerHTML</code> \u00e9 o substituto do React para o uso do <code class=\"language-javascript\">innerHTML</code> no DOM do navegador. Em geral, adicionar HTML atrav\u00e9s de c\u00f3digo \u00e9 arriscado pois \u00e9 f\u00e1cil expor inadvertidamente seus usu\u00e1rios a um ataque de <a class=\"external-link\" href=\"https://pt.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting (XSS)</a>. Ent\u00e3o, voc\u00ea pode definir HTML diretamente atrav\u00e9s do React, mas voc\u00ea tem que digitar <code class=\"language-javascript\">dangerouslySetInnerHTML</code> e passar um objeto com a chave <code class=\"language-javascript\">__html</code>, para lhe relembrar que \u00e9 perigoso. Por exemplo: \u2014&gt;</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createMarkup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>__html<span class=\"token operator\">:</span> <span class=\"token string\">'First &amp;middot; Second'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">createMarkup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"htmlfor\"><a class=\"anchor\" href=\"/react/dom-elements#htmlfor\"></a>htmlFor </h3>\n<p>J\u00e1 que <code class=\"language-javascript\">for</code> \u00e9 uma palavra reservada em JavaScript, em vez disso elementos React usam <code class=\"language-javascript\">htmlFor</code>.</p>\n<h3 id=\"onchange\"><a class=\"anchor\" href=\"/react/dom-elements#onchange\"></a>onChange </h3>\n<p>O evento <code class=\"language-javascript\">onChange</code> se comporta como voc\u00ea esperaria que ele se comportasse: sempre que um campo do formul\u00e1rio muda, este evento \u00e9 disparado. N\u00f3s intencionalmente n\u00e3o utilizamos o comportamento existente do navegador porque <code class=\"language-javascript\">onChange</code> \u00e9 um termo inadequado para seu comportamento e o React depende deste evento para manipular input do usu\u00e1rio em tempo real.</p>\n<h3 id=\"selected\"><a class=\"anchor\" href=\"/react/dom-elements#selected\"></a>selected </h3>\n<p>Se voc\u00ea quiser marcar uma <code class=\"language-javascript\">&lt;option&gt;</code> como selecionada, fa\u00e7a refer\u00eancia ao valor dessa op\u00e7\u00e3o no <code class=\"language-javascript\">value</code> de sua <code class=\"language-javascript\">&lt;select&gt;</code>.\nConfira <a href=\"/react/forms#the-select-tag\">\u201cA tag de sele\u00e7\u00e3o\u201d</a> para obter instru\u00e7\u00f5es detalhadas.</p>\n<h3 id=\"style\"><a class=\"anchor\" href=\"/react/dom-elements#style\"></a>style </h3>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Alguns exemplos na documenta\u00e7\u00e3o utilizam <code class=\"language-javascript\">style</code> por conveni\u00eancia, mas <strong>usar o atributo <code class=\"language-javascript\">style</code> como a forma principal de estilizar elementos geralmente n\u00e3o \u00e9 recomendado.</strong> Na maioria dos casos, <a href=\"/react/dom-elements#classname\"><code class=\"language-javascript\">className</code></a> deve ser usado para referenciar classes definidas em um arquivo de estilo CSS externo. <code class=\"language-javascript\">style</code> \u00e9 geralmente usado em aplica\u00e7\u00f5es React para adicionar estilos computados dinamicamente em tempo de renderiza\u00e7\u00e3o. Veja tamb\u00e9m <a href=\"/react/faq-styling\">FAQ: Estiliza\u00e7\u00e3o e CSS</a>.</p>\n</div>\n<p>O atributo <code class=\"language-javascript\">style</code> aceita um objeto JavaScript com propriedades em <em>camelCase</em> ao inv\u00e9s de uma string CSS. Isso \u00e9 consistente com a propriedade do JavaScript <code class=\"language-javascript\">style</code> </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> divStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span>\n  backgroundImage<span class=\"token operator\">:</span> <span class=\"token string\">'url('</span> <span class=\"token operator\">+</span> imgUrl <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>divStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello World!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Perceba que estes estilos n\u00e3o s\u00e3o auto prefixados. Para serem compat\u00edveis com navegadores antigos voc\u00ea precisa fornecer as propriedades de estilos correspondentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> divStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  WebkitTransition<span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// perceba o 'W' mai\u00fasculo aqui</span>\n  msTransition<span class=\"token operator\">:</span> <span class=\"token string\">'all'</span> <span class=\"token comment\">// 'ms' \u00e9 o \u00fanico prefixo de fornecedor min\u00fasculo</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ComponentWithTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>divStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Isto deve funcionar em diferentes navegadores</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chaves de <em>style</em> s\u00e3o em <em>camelCase</em> com o intuito de serem consistentes com o acesso de propriedades que s\u00e3o n\u00f3s do DOM atrav\u00e9s do JS  (ex. <code class=\"language-javascript\">node.style.backgroundImage</code>). Prefixos de fornecedor (<em>vendor prefixes</em>) <a class=\"external-link\" href=\"https://www.andismith.com/blog/2012/02/modernizr-prefixed/\">diferentes de <code class=\"language-javascript\">ms</code></a> devem come\u00e7ar com a letra mai\u00fascula. \u00c9 por isso que <code class=\"language-javascript\">WebkitTransition</code> tem um \u201cW\u201d mai\u00fasculo.</p>\n<p>React vai acrescentar automaticamente um sufixo \u201cpx\u201d para determinadas propriedades num\u00e9ricas de <em>inline style</em>. Se voc\u00ea quiser usar unidades diferentes de \u201cpx\u201d, especifique o valor como uma string com a unidade desejada. Por exemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Style resultante: '10px'</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello World!\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// Style resultante: '10%'</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'10%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello World!\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Nem todas as propriedades de estilos s\u00e3o convertidas para strings pixel. Algumas permanecem sem unidade (exemplo: <code class=\"language-javascript\">zoom</code>, <code class=\"language-javascript\">order</code>, <code class=\"language-javascript\">flex</code>). Uma lista completa com as propriedades sem unidade pode ser vista <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/4131af3e4bf52f3a003537ec95a1655147c81270/src/renderers/dom/shared/CSSProperty.js#L15-L59\">aqui</a></p>\n<h3 id=\"suppresscontenteditablewarning\"><a class=\"anchor\" href=\"/react/dom-elements#suppresscontenteditablewarning\"></a>suppressContentEditableWarning </h3>\n<p>Normalmente, existe um alerta quando um elemento cont\u00e9m outros elementos que tamb\u00e9m est\u00e3o marcados como <code class=\"language-javascript\">contentEditable</code>. Assim sendo, n\u00e3o funcionar\u00e1. Esse atributo interrompe esse alerta. N\u00e3o fa\u00e7a uso dele. A n\u00e3o ser que voc\u00ea esteja construindo uma biblioteca como a <a class=\"external-link\" href=\"https://facebook.github.io/draft-js/\">Draft.js</a> que gerencia <code class=\"language-javascript\">contentEditable</code> manualmente.</p>\n<h3 id=\"suppresshydrationwarning\"><a class=\"anchor\" href=\"/react/dom-elements#suppresshydrationwarning\"></a>suppressHydrationWarning </h3>\n<p>Se voc\u00ea usa a renderiza\u00e7\u00e3o do React no lado do servidor, normalmente existe um alerta para quando o servidor e o lado do cliente renderizam conte\u00fado de formas diferentes. Entretanto, em alguns casos raros, \u00e9 muito dif\u00edcil ou imposs\u00edvel de garantir a correspond\u00eancia exata. Por exemplo, \u00e9 esperado que <em>timestamps</em> estejam diferentes no servidor e no cliente. </p>\n<p>Se voc\u00ea definir <code class=\"language-javascript\">suppressHydrationWarning</code> para <code class=\"language-javascript\">true</code>, o React n\u00e3o lhe avisar\u00e1 sobre incompatibilidades nos atributos e no conte\u00fado daquele elemento. Isto s\u00f3 funciona dentro de 1 n\u00edvel de profundidade e destina-se a ser usado como uma sa\u00edda de emerg\u00eancia. N\u00e3o use excessivamente. Voc\u00ea pode ler mais sobre <em>hydration</em> na <a href=\"/react/react-dom#hydrate\">documenta\u00e7\u00e3o do <code class=\"language-javascript\">ReactDOM.hydrate()</code></a>.</p>\n<h3 id=\"value\"><a class=\"anchor\" href=\"/react/dom-elements#value\"></a>value </h3>\n<p>O atributo <code class=\"language-javascript\">value</code> \u00e9 suportado pelos componentes <code class=\"language-javascript\">&lt;input&gt;</code>, <code class=\"language-javascript\">&lt;select&gt;</code> e <code class=\"language-javascript\">&lt;textarea&gt;</code>. Voc\u00ea pode us\u00e1-lo para definir o valor do componente. Isso \u00e9 \u00fatil para constru\u00e7\u00e3o de componentes controlados (<em>controlled components</em>). <code class=\"language-javascript\">defaultValue</code> \u00e9 o equivalente para componentes n\u00e3o controlados (<em>uncontrolled components</em>), que define o valor do componente quando este \u00e9 montado pela primeira vez.</p>\n<h2 id=\"all-supported-html-attributes\"><a class=\"anchor\" href=\"/react/dom-elements#all-supported-html-attributes\"></a>Todos os atributos HTML suportados </h2>\n<p>A partir do React 16, qualquer atributo padr\u00e3o <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2017/09/08/dom-attributes-in-react-16.html\">ou personalizado</a> \u00e9 totalmente suportado.</p>\n<p>O React sempre forneceu uma API centrada no JavaScript para o DOM. Uma vez que os componentes React geralmente recebem tanto props personalizadas quanto props relacionadas ao DOM, o React usa a conven\u00e7\u00e3o <code class=\"language-javascript\">camelCase</code> assim como as APIs do DOM:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>      <span class=\"token comment\">// Assim como node.tabIndex DOM API</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Button<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token comment\">// Assim como node.className DOM API</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">readOnly</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>  <span class=\"token comment\">// Assim como node.readOnly DOM API</span></code></pre></div>\n<p>Essas props funcionam de forma similar aos atributos HTML correspondentes, com exce\u00e7\u00e3o dos casos especiais documentados abaixo.</p>\n<p>Alguns dos elementos DOM suportados pelo React incluem: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">accept acceptCharset accessKey action allowFullScreen alt async autoComplete\nautoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked\ncite classID className colSpan cols content contentEditable contextMenu controls\ncontrolsList coords crossOrigin data dateTime default defer dir disabled\ndownload draggable encType form formAction formEncType formMethod formNoValidate\nformTarget frameBorder headers height hidden high href hrefLang htmlFor\nhttpEquiv icon id inputMode integrity is keyParams keyType kind label lang list\nloop low manifest marginHeight marginWidth max maxLength media mediaGroup method\nmin minLength multiple muted name noValidate nonce open optimum pattern\nplaceholder poster preload profile radioGroup readOnly rel required reversed\nrole rowSpan rows sandbox scope scoped scrolling seamless selected shape size\nsizes span spellCheck src srcDoc srcLang srcSet start step style summary\ntabIndex target title type useMap value width wmode wrap</code></pre></div>\n<p>Igualmente, todos os atributos SVG s\u00e3o totalmente suportados:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">accentHeight accumulate additive alignmentBaseline allowReorder alphabetic\namplitude arabicForm ascent attributeName attributeType autoReverse azimuth\nbaseFrequency baseProfile baselineShift bbox begin bias by calcMode capHeight\nclip clipPath clipPathUnits clipRule colorInterpolation\ncolorInterpolationFilters colorProfile colorRendering contentScriptType\ncontentStyleType cursor cx cy d decelerate descent diffuseConstant direction\ndisplay divisor dominantBaseline dur dx dy edgeMode elevation enableBackground\nend exponent externalResourcesRequired fill fillOpacity fillRule filter\nfilterRes filterUnits floodColor floodOpacity focusable fontFamily fontSize\nfontSizeAdjust fontStretch fontStyle fontVariant fontWeight format from fx fy\ng1 g2 glyphName glyphOrientationHorizontal glyphOrientationVertical glyphRef\ngradientTransform gradientUnits hanging horizAdvX horizOriginX ideographic\nimageRendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength\nkerning keyPoints keySplines keyTimes lengthAdjust letterSpacing lightingColor\nlimitingConeAngle local markerEnd markerHeight markerMid markerStart\nmarkerUnits markerWidth mask maskContentUnits maskUnits mathematical mode\nnumOctaves offset opacity operator order orient orientation origin overflow\noverlinePosition overlineThickness paintOrder panose1 pathLength\npatternContentUnits patternTransform patternUnits pointerEvents points\npointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits\nr radius refX refY renderingIntent repeatCount repeatDur requiredExtensions\nrequiredFeatures restart result rotate rx ry scale seed shapeRendering slope\nspacing specularConstant specularExponent speed spreadMethod startOffset\nstdDeviation stemh stemv stitchTiles stopColor stopOpacity\nstrikethroughPosition strikethroughThickness string stroke strokeDasharray\nstrokeDashoffset strokeLinecap strokeLinejoin strokeMiterlimit strokeOpacity\nstrokeWidth surfaceScale systemLanguage tableValues targetX targetY textAnchor\ntextDecoration textLength textRendering to transform u1 u2 underlinePosition\nunderlineThickness unicode unicodeBidi unicodeRange unitsPerEm vAlphabetic\nvHanging vIdeographic vMathematical values vectorEffect version vertAdvY\nvertOriginX vertOriginY viewBox viewTarget visibility widths wordSpacing\nwritingMode x x1 x2 xChannelSelector xHeight xlinkActuate xlinkArcrole\nxlinkHref xlinkRole xlinkShow xlinkTitle xlinkType xmlns xmlnsXlink xmlBase\nxmlLang xmlSpace y y1 y2 yChannelSelector z zoomAndPan</code></pre></div>\n<p>Voc\u00ea tamb\u00e9m pode usar atributos personalizados, desde que todos eles estejam em letras min\u00fasculas.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reference-dom-elements.md\">Edit this page</a></p></div></article>", "path": "/react/dom-elements", "nav": ["/react/react-dom-server", "/react/events"]}, {"key": "SyntheticEvent", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Este guia de refer\u00eancia documenta o agregador <code class=\"language-javascript\">SyntheticEvent</code> (evento sint\u00e9tico), que faz parte do sistema de eventos do React. Veja o guia <a href=\"/react/handling-events\">Manipulando Eventos</a> para saber mais.</p>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/events#overview\"></a>Vis\u00e3o geral </h2>\n<p>Os manipuladores de evento (<em>event handlers</em>) ser\u00e3o passados como inst\u00e2ncias do <code class=\"language-javascript\">SyntheticEvent</code>, um agregador <em>cross-browser</em> que envolve os eventos nativos do navegador. Ambos tem a mesma interface, incluindo <code class=\"language-javascript\">stopPropagation()</code> e <code class=\"language-javascript\">preventDefault()</code>, por\u00e9m funcionam de forma id\u00eantica em todos os navegadores.</p>\n<p>Caso voc\u00ea pense, por algum motivo, que precisa do evento original do navegador, basta utilizar o atributo <code class=\"language-javascript\">nativeEvent</code> para acess\u00e1-lo. Os eventos sint\u00e9ticos s\u00e3o diferentes e n\u00e3o s\u00e3o mapeados diretamente para os eventos nativos do navegador. Por exemplo, em <code class=\"language-javascript\">onMouseLeave</code> <code class=\"language-javascript\">event.nativeEvent</code> ir\u00e1 apontar para um evento <code class=\"language-javascript\">mouseout</code>. O mapeamento espec\u00edfico n\u00e3o faz parte da API p\u00fablica e pode ser alterado a qualquer momento. Cada objeto do <code class=\"language-javascript\">SyntheticEvent</code> tem os seguintes atributos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean bubbles\nboolean cancelable\nDOMEventTarget currentTarget\nboolean defaultPrevented\nnumber eventPhase\nboolean isTrusted\nDOMEvent nativeEvent\n<span class=\"token keyword\">void</span> <span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nboolean <span class=\"token function\">isDefaultPrevented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nboolean <span class=\"token function\">isPropagationStopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">persist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nDOMEventTarget target\nnumber timeStamp\nstring type</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>A partir da v17, <code class=\"language-javascript\">e.persist()</code> n\u00e3o faz nada porque o <code class=\"language-javascript\">SyntheticEvent</code> n\u00e3o \u00e9 mais <a href=\"/react/legacy-event-pooling\">agrupado</a>.</p>\n</div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>A partir da v0.14, retornar <code class=\"language-javascript\">false</code> de um <em>event handler</em> n\u00e3o ir\u00e1 mais parar a propaga\u00e7\u00e3o de eventos. Sendo assim, tanto o <code class=\"language-javascript\">e.stopPropagation()</code> quanto o <code class=\"language-javascript\">e.preventDefault()</code> deve ser acionado manualmente, quando apropriado.</p>\n</div>\n<h2 id=\"supported-events\"><a class=\"anchor\" href=\"/react/events#supported-events\"></a>Eventos Suportados </h2>\n<p>O React normaliza eventos para que eles possam ter propriedades consistentes entre os navegadores.</p>\n<p>Os manipuladores de evento (<em>event handlers</em>) abaixo s\u00e3o acionados por um evento na fase de propaga\u00e7\u00e3o (<em>bubbling</em>). Para registrar um manipulador de evento para a fase de captura, adicione <code class=\"language-javascript\">Capture</code> como sufixo do nome do evento. Por exemplo, ao inv\u00e9s de usar <code class=\"language-javascript\">onClick</code>, voc\u00ea usaria <code class=\"language-javascript\">onClickCapture</code> para manipular o evento de clique na fase de captura.</p>\n<ul>\n<li><a href=\"/react/events#clipboard-events\">Eventos do Clipboard</a></li>\n<li><a href=\"/react/events#composition-events\">Eventos de Composi\u00e7\u00e3o (Composition)</a></li>\n<li><a href=\"/react/events#keyboard-events\">Eventos do Teclado</a></li>\n<li><a href=\"/react/events#focus-events\">Eventos de Foco</a></li>\n<li><a href=\"/react/events#form-events\">Eventos de Formul\u00e1rio</a></li>\n<li><a href=\"/react/events#generic-events\">Eventos Gen\u00e9ricos</a></li>\n<li><a href=\"/react/events#mouse-events\">Eventos do Mouse</a></li>\n<li><a href=\"/react/events#pointer-events\">Eventos do Ponteiro (Pointer)</a></li>\n<li><a href=\"/react/events#selection-events\">Eventos de Sele\u00e7\u00e3o</a></li>\n<li><a href=\"/react/events#touch-events\">Eventos de Toque (Touch)</a></li>\n<li><a href=\"/react/events#ui-events\">Eventos da Interface do Usu\u00e1rio (UI)</a></li>\n<li><a href=\"/react/events#wheel-events\">Eventos de Rolagem (Wheel)</a></li>\n<li><a href=\"/react/events#media-events\">Eventos de M\u00eddia</a></li>\n<li><a href=\"/react/events#image-events\">Eventos de Imagem</a></li>\n<li><a href=\"/react/events#animation-events\">Eventos de Anima\u00e7\u00e3o</a></li>\n<li><a href=\"/react/events#transition-events\">Eventos de Transi\u00e7\u00e3o</a></li>\n<li><a href=\"/react/events#other-eventos\">Outros Eventos</a></li>\n</ul>\n\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/events#reference\"></a>Refer\u00eancia </h2>\n<h3 id=\"clipboard-events\"><a class=\"anchor\" href=\"/react/events#clipboard-events\"></a>Eventos do Clipboard </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onCopy onCut onPaste</code></pre></div>\n<p>Propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">DOMDataTransfer clipboardData</code></pre></div>\n\n<h3 id=\"composition-events\"><a class=\"anchor\" href=\"/react/events#composition-events\"></a>Eventos de Composi\u00e7\u00e3o (Composition) </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onCompositionEnd onCompositionStart onCompositionUpdate</code></pre></div>\n<p>Propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">string data</code></pre></div>\n\n<h3 id=\"keyboard-events\"><a class=\"anchor\" href=\"/react/events#keyboard-events\"></a>Eventos do Teclado </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onKeyDown onKeyPress onKeyUp</code></pre></div>\n<p>Propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean altKey\nnumber charCode\nboolean ctrlKey\nboolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\nstring key\nnumber keyCode\nstring locale\nnumber location\nboolean metaKey\nboolean repeat\nboolean shiftKey\nnumber which</code></pre></div>\n<p>A propriedade <code class=\"language-javascript\">key</code> pode receber quaisquer valores documentados na <a class=\"external-link\" href=\"https://www.w3.org/TR/uievents-key/#named-key-attribute-values\">especifica\u00e7\u00e3o de eventos do DOM Level 3</a>.</p>\n\n<h3 id=\"focus-events\"><a class=\"anchor\" href=\"/react/events#focus-events\"></a>Eventos de Foco </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onFocus onBlur</code></pre></div>\n<p>Esses eventos de foco funcionam em todos os elementos do React DOM, n\u00e3o apenas em elementos de formul\u00e1rio.</p>\n<p>Propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">DOMEventTarget relatedTarget</code></pre></div>\n<h4 id=\"onfocus\"><a class=\"anchor\" href=\"/react/events#onfocus\"></a>onFocus </h4>\n<p>O evento <code class=\"language-javascript\">onFocus</code> \u00e9 chamado quando o elemento (ou algum elemento dentro dele) recebe o foco. Por exemplo, \u00e9 chamado quando o usu\u00e1rio clica em um input de texto.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">onFocus</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Focos no input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onFocus \u00e9 acionado quando voc\u00ea clica nesta entrada.<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"onblur\"><a class=\"anchor\" href=\"/react/events#onblur\"></a>onBlur </h4>\n<p>O manipulador de eventos <code class=\"language-javascript\">onBlur</code> \u00e9 chamado quando o foco deixa o elemento (ou deixa algum elemento dentro dele). Por exemplo, \u00e9 chamado quando o usu\u00e1rio clica fora de um input de texto focado.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">onBlur</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Disparado porque esta entrada perdeu o foco'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onBlur \u00e9 acionado quando voc\u00ea clica nesta entrada e clica fora dela.<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"detecting-focus-entering-and-leaving\"><a class=\"anchor\" href=\"/react/events#detecting-focus-entering-and-leaving\"></a>Detec\u00e7\u00e3o de Foco Entrando e Saindo </h4>\n<p>Voc\u00ea pode usar <code class=\"language-javascript\">currentTarget</code> e <code class=\"language-javascript\">relatedTarget</code> para diferenciar se os eventos de foco ou desfoque originaram-se de <em>fora</em> do elemento pai. Aqui est\u00e1 uma demonstra\u00e7\u00e3o que voc\u00ea pode copiar e colar que mostra como detectar o foco de um elemento filho, focalizando o pr\u00f3prio elemento e o foco entrando ou saindo de toda a sub\u00e1rvore.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n      <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onFocus</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focos dele'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus no elemento filho'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>relatedTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// N\u00e3o acionado ao trocar o foco entre os elementos filhos</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foco entrou no proprio elemento'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onBlur</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'desfoque dele'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'desfoque no elemento filho'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>relatedTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// N\u00e3o acionado ao trocar o foco entre os elementos filhos</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>focos a esquerda<span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<h3 id=\"form-events\"><a class=\"anchor\" href=\"/react/events#form-events\"></a>Eventos de Formul\u00e1rio </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onChange onInput onInvalid onReset onSubmit </code></pre></div>\n<p>Para mais informa\u00e7\u00f5es sobre o evento onChange, veja <a href=\"/react/forms\">Formul\u00e1rios</a>.</p>\n\n<h3 id=\"generic-events\"><a class=\"anchor\" href=\"/react/events#generic-events\"></a>Eventos Gen\u00e9ricos </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onError onLoad</code></pre></div>\n\n<h3 id=\"mouse-events\"><a class=\"anchor\" href=\"/react/events#mouse-events\"></a>Eventos do Mouse </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit\nonDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave\nonMouseMove onMouseOut onMouseOver onMouseUp</code></pre></div>\n<p>Os eventos <code class=\"language-javascript\">onMouseEnter</code> e <code class=\"language-javascript\">onMouseLeave</code> propagam do elemento do lado esquerdo ao evento que est\u00e1 entrando, ao inv\u00e9s do <em>bubbling</em> comum e n\u00e3o tem uma fase de captura.</p>\n<p>Propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean altKey\nnumber button\nnumber buttons\nnumber clientX\nnumber clientY\nboolean ctrlKey\nboolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\nboolean metaKey\nnumber pageX\nnumber pageY\nDOMEventTarget relatedTarget\nnumber screenX\nnumber screenY\nboolean shiftKey</code></pre></div>\n\n<h3 id=\"pointer-events\"><a class=\"anchor\" href=\"/react/events#pointer-events\"></a>Eventos do Ponteiro </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onPointerDown onPointerMove onPointerUp onPointerCancel onGotPointerCapture\nonLostPointerCapture onPointerEnter onPointerLeave onPointerOver onPointerOut</code></pre></div>\n<p>Os eventos <code class=\"language-javascript\">onPointerEnter</code> e <code class=\"language-javascript\">onPointerLeave</code> propagam do elemento do lado esquerdo ao evento que est\u00e1 entrando, ao inv\u00e9s do <em>bubbling</em> comum e n\u00e3o tem uma fase de captura.</p>\n<p>Propriedades:</p>\n<p>Como definido na <a class=\"external-link\" href=\"https://www.w3.org/TR/pointerevents/\">especifica\u00e7\u00e3o da W3</a>, os eventos de ponteiro estendem os <a href=\"/react/events#mouse-events\">Eventos do Mouse</a> com as seguintes propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">number pointerId\nnumber width\nnumber height\nnumber pressure\nnumber tangentialPressure\nnumber tiltX\nnumber tiltY\nnumber twist\nstring pointerType\nboolean isPrimary</code></pre></div>\n<p>Uma nota em rela\u00e7\u00e3o a compatiblidade entre navegadores:</p>\n<p>Os eventos de ponteiro ainda n\u00e3o tem suporte em todos os navegadores (no momento da escrita deste artigo, navegadores que oferecem suporte s\u00e3o: Chrome, Firefox, Edge e Internet Explorer). O React deliberadamente n\u00e3o fornece um polyfill para outros navegadores, pois um polyfill que seja compilante com os padr\u014des aumentaria drasticamente o tamanho do <em>bundle</em> do <code class=\"language-javascript\">react-dom</code>.</p>\n<p>Se sua aplica\u00e7\u00e3o necessita de eventos de ponteiro, recomendamos adicionar um polyfill de terceiros.</p>\n\n<h3 id=\"selection-events\"><a class=\"anchor\" href=\"/react/events#selection-events\"></a>Eventos de Sele\u00e7\u00e3o </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onSelect</code></pre></div>\n\n<h3 id=\"touch-events\"><a class=\"anchor\" href=\"/react/events#touch-events\"></a>Eventos de Toque (Touch) </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onTouchCancel onTouchEnd onTouchMove onTouchStart</code></pre></div>\n<p>Propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean altKey\nDOMTouchList changedTouches\nboolean ctrlKey\nboolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\nboolean metaKey\nboolean shiftKey\nDOMTouchList targetTouches\nDOMTouchList touches</code></pre></div>\n\n<h3 id=\"ui-events\"><a class=\"anchor\" href=\"/react/events#ui-events\"></a>Eventos da Interface do Usu\u00e1rio (UI) </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onScroll</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Come\u00e7ando com React 17, o evento <code class=\"language-javascript\">onScroll</code> <strong>n\u00e3o borbulha</strong> no React. Isso corresponde ao comportamento do navegador e evita a confus\u00e3o quando um elemento rol\u00e1vel aninhado dispara eventos em um pai distante.</p>\n</div>\n<p>Propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">number detail\nDOMAbstractView view</code></pre></div>\n\n<h3 id=\"wheel-events\"><a class=\"anchor\" href=\"/react/events#wheel-events\"></a>Eventos de Rolagem (Wheel) </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onWheel</code></pre></div>\n<p>Propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">number deltaMode\nnumber deltaX\nnumber deltaY\nnumber deltaZ</code></pre></div>\n\n<h3 id=\"media-events\"><a class=\"anchor\" href=\"/react/events#media-events\"></a>Eventos de M\u00eddia </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted\nonEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay\nonPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend\nonTimeUpdate onVolumeChange onWaiting</code></pre></div>\n\n<h3 id=\"image-events\"><a class=\"anchor\" href=\"/react/events#image-events\"></a>Eventos de Imagem </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onLoad onError</code></pre></div>\n\n<h3 id=\"animation-events\"><a class=\"anchor\" href=\"/react/events#animation-events\"></a>Eventos de Anima\u00e7\u00e3o </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onAnimationStart onAnimationEnd onAnimationIteration</code></pre></div>\n<p>Propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">string animationName\nstring pseudoElement\nfloat elapsedTime</code></pre></div>\n\n<h3 id=\"transition-events\"><a class=\"anchor\" href=\"/react/events#transition-events\"></a>Eventos de Transi\u00e7\u00e3o </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onTransitionEnd</code></pre></div>\n<p>Propriedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">string propertyName\nstring pseudoElement\nfloat elapsedTime</code></pre></div>\n\n<h3 id=\"other-events\"><a class=\"anchor\" href=\"/react/events#other-events\"></a>Outros Eventos </h3>\n<p>Nome dos eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onToggle</code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reference-events.md\">Edit this page</a></p></div></article>", "path": "/react/events", "nav": ["/react/dom-elements", "/react/test-utils"]}, {"key": "Utilit\u00e1rios de Teste", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><strong>Importando</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> ReactTestUtils <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">var</span> ReactTestUtils <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES5 com npm</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/test-utils#overview\"></a>Vis\u00e3o Geral </h2>\n<p><code class=\"language-javascript\">ReactTestUtils</code> torna f\u00e1cil para testar componentes em React utilizando framework de teste \u00e0 sua escolha. No Facebook, n\u00f3s utilizamos <a class=\"external-link\" href=\"https://facebook.github.io/jest/\">Jest</a> para testar JavaScript sem dores. Aprenda como utilizar o Jest atrav\u00e9s do website do Jest <a class=\"external-link\" href=\"https://facebook.github.io/jest/docs/en/tutorial-react.html#content\">Tutorial para React</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>N\u00f3s recomendamos usar o <a class=\"external-link\" href=\"https://testing-library.com/react\"><code class=\"language-javascript\">react-testing-library</code></a> que \u00e9 projetado para permitir e encorajar escrita de testes que utilizam seus componentes como os usu\u00e1rios finais utilizar\u00e3o.</p>\n<p>Para vers\u00f5es do React &lt;= 16, a biblioteca <a class=\"external-link\" href=\"https://airbnb.io/enzyme/\">Enzyme</a> torna mais f\u00e1cil afirmar(assert), manipular e analisar a sa\u00edda dos componentes do React.</p>\n</div>\n<ul>\n<li><a href=\"/react/test-utils#act\"><code class=\"language-javascript\">act()</code></a></li>\n<li><a href=\"/react/test-utils#mockcomponent\"><code class=\"language-javascript\">mockComponent()</code></a></li>\n<li><a href=\"/react/test-utils#iselement\"><code class=\"language-javascript\">isElement()</code></a></li>\n<li><a href=\"/react/test-utils#iselementoftype\"><code class=\"language-javascript\">isElementOfType()</code></a></li>\n<li><a href=\"/react/test-utils#isdomcomponent\"><code class=\"language-javascript\">isDOMComponent()</code></a></li>\n<li><a href=\"/react/test-utils#iscompositecomponent\"><code class=\"language-javascript\">isCompositeComponent()</code></a></li>\n<li><a href=\"/react/test-utils#iscompositecomponentwithtype\"><code class=\"language-javascript\">isCompositeComponentWithType()</code></a></li>\n<li><a href=\"/react/test-utils#findallinrenderedtree\"><code class=\"language-javascript\">findAllInRenderedTree()</code></a></li>\n<li><a href=\"/react/test-utils#scryrendereddomcomponentswithclass\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithClass()</code></a></li>\n<li><a href=\"/react/test-utils#findrendereddomcomponentwithclass\"><code class=\"language-javascript\">findRenderedDOMComponentWithClass()</code></a></li>\n<li><a href=\"/react/test-utils#scryrendereddomcomponentswithtag\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithTag()</code></a></li>\n<li><a href=\"/react/test-utils#findrendereddomcomponentwithtag\"><code class=\"language-javascript\">findRenderedDOMComponentWithTag()</code></a></li>\n<li><a href=\"/react/test-utils#scryrenderedcomponentswithtype\"><code class=\"language-javascript\">scryRenderedComponentsWithType()</code></a></li>\n<li><a href=\"/react/test-utils#findrenderedcomponentwithtype\"><code class=\"language-javascript\">findRenderedComponentWithType()</code></a></li>\n<li><a href=\"/react/test-utils#renderintodocument\"><code class=\"language-javascript\">renderIntoDocument()</code></a></li>\n<li><a href=\"/react/test-utils#simulate\"><code class=\"language-javascript\">Simulate</code></a></li>\n</ul>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/test-utils#reference\"></a>Refer\u00eancia </h2>\n<h3 id=\"act\"><a class=\"anchor\" href=\"/react/test-utils#act\"></a><code class=\"language-javascript\">act()</code> </h3>\n<p>Para preparar um componente para determina\u00e7\u00f5es, coloque o c\u00f3digo de renderiza\u00e7\u00e3o e de atualiza\u00e7\u00f5es dentro de uma chamada <code class=\"language-javascript\">act()</code>. Isso faz com que o teste rode mais pr\u00f3ximo de como React funciona no browser.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Se voc\u00ea usa <code class=\"language-javascript\">react-test-renderer</code>, ele prov\u00ea um exportador de <code class=\"language-javascript\">act</code> que se comporta da mesma maneira.</p>\n</div>\n<p>Por exemplo, vamos dizer que n\u00f3s temos esse componente <code class=\"language-javascript\">Counter</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          Clique aqui\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aqui est\u00e1 como n\u00f3s podemos testar:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'./Counter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can render and update a counter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Teste da primeira renderiza\u00e7\u00e3o e componentDidMount</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Voc\u00ea clicou 0 vezes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Voc\u00ea clicou 0 vezes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Teste do segundo render e componentDidUpdate</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>bubbles<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Voc\u00ea clicou 1 vezes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Voc\u00ea clicou 1 vezes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>N\u00e3o esque\u00e7a que disparando eventos DOM apenas funciona quando o conte\u00fado do DOM  \u00e9 adicionado no <code class=\"language-javascript\">document</code>. Voc\u00ea pode usar um auxiliador como  <a class=\"external-link\" href=\"https://testing-library.com/react\"><code class=\"language-javascript\">react-testing-library</code></a> para reduzir o c\u00f3digo de boilerplate.</li>\n<li>O documento <a href=\"/react/testing-recipes\"><code class=\"language-javascript\">recipes</code></a> cont\u00e9m mais detalhes sobre como <code class=\"language-javascript\">act()</code> se comporta, como exemplos e uso.</li>\n</ul>\n\n<h3 id=\"mockcomponent\"><a class=\"anchor\" href=\"/react/test-utils#mockcomponent\"></a><code class=\"language-javascript\">mockComponent()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">mockComponent</span><span class=\"token punctuation\">(</span>\n  componentClass<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>mockTagName<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Passe um m\u00f3dulo de componente mockado para este m\u00e9todo para melhor\u00e1-lo com m\u00e9todos que permitem a utiliza\u00e7\u00e3o como um dummy componente React. Ao inv\u00e9s de renderizar como de costume, o componente vai se tornar um simples <code class=\"language-javascript\">&lt;div&gt;</code> (ou outra tag se <code class=\"language-javascript\">mockTagName</code> for fornecido) contendo qualquer filho fornecido.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">mockComponent()</code> \u00e9 uma API legada. N\u00f3s recomendamos utilizar <a class=\"external-link\" href=\"https://jestjs.io/docs/tutorial-react-native#mock-native-modules-using-jestmock\"><code class=\"language-javascript\">jest.mock()</code></a>.</p>\n</div>\n\n<h3 id=\"iselement\"><a class=\"anchor\" href=\"/react/test-utils#iselement\"></a><code class=\"language-javascript\">isElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isElement</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna <code class=\"language-javascript\">true</code> se <code class=\"language-javascript\">element</code> \u00e9 algum elemento React.</p>\n\n<h3 id=\"iselementoftype\"><a class=\"anchor\" href=\"/react/test-utils#iselementoftype\"></a><code class=\"language-javascript\">isElementOfType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isElementOfType</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna <code class=\"language-javascript\">true</code> se <code class=\"language-javascript\">element</code> \u00e9 um elemento React cujo tipo \u00e9 de um React <code class=\"language-javascript\">componentClass</code>.</p>\n\n<h3 id=\"isdomcomponent\"><a class=\"anchor\" href=\"/react/test-utils#isdomcomponent\"></a><code class=\"language-javascript\">isDOMComponent()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isDOMComponent</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna <code class=\"language-javascript\">true</code> se <code class=\"language-javascript\">instance</code> \u00e9 um componente DOM (como <code class=\"language-javascript\">&lt;div&gt;</code> ou <code class=\"language-javascript\">&lt;span&gt;</code>).</p>\n\n<h3 id=\"iscompositecomponent\"><a class=\"anchor\" href=\"/react/test-utils#iscompositecomponent\"></a><code class=\"language-javascript\">isCompositeComponent()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isCompositeComponent</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna <code class=\"language-javascript\">true</code> se <code class=\"language-javascript\">instance</code> \u00e9 um componente definido pelo usu\u00e1rio, como uma classe ou fun\u00e7\u00e3o.</p>\n\n<h3 id=\"iscompositecomponentwithtype\"><a class=\"anchor\" href=\"/react/test-utils#iscompositecomponentwithtype\"></a><code class=\"language-javascript\">isCompositeComponentWithType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isCompositeComponentWithType</span><span class=\"token punctuation\">(</span>\n  instance<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna <code class=\"language-javascript\">true</code> se <code class=\"language-javascript\">instance</code> \u00e9 um componente cujo tipo \u00e9 de um React <code class=\"language-javascript\">componentClass</code>.</p>\n\n<h3 id=\"findallinrenderedtree\"><a class=\"anchor\" href=\"/react/test-utils#findallinrenderedtree\"></a><code class=\"language-javascript\">findAllInRenderedTree()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findAllInRenderedTree</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  test\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cruza todos componentes em <code class=\"language-javascript\">tree</code> e acumula todos componentes em que <code class=\"language-javascript\">test(component)</code> seja <code class=\"language-javascript\">true</code>. N\u00e3o \u00e9 t\u00e3o \u00fatil sozinho, mas \u00e9 utilizado como primitivo para outros utilit\u00e1rios de teste.</p>\n\n<h3 id=\"scryrendereddomcomponentswithclass\"><a class=\"anchor\" href=\"/react/test-utils#scryrendereddomcomponentswithclass\"></a><code class=\"language-javascript\">scryRenderedDOMComponentsWithClass()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">scryRenderedDOMComponentsWithClass</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  className\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encontra todos elementos DOM dos componentes na \u00e1rvore de renderiza\u00e7\u00e3o que possuam o nome de classe igual a <code class=\"language-javascript\">className</code>.</p>\n\n<h3 id=\"findrendereddomcomponentwithclass\"><a class=\"anchor\" href=\"/react/test-utils#findrendereddomcomponentwithclass\"></a><code class=\"language-javascript\">findRenderedDOMComponentWithClass()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findRenderedDOMComponentWithClass</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  className\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Similar a <a href=\"/react/test-utils#scryrendereddomcomponentswithclass\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithClass()</code></a> mas espera apenas um resultado, e retorna esse resultado, ou lan\u00e7a uma exce\u00e7\u00e3o se existir mais de um equivalente.</p>\n\n<h3 id=\"scryrendereddomcomponentswithtag\"><a class=\"anchor\" href=\"/react/test-utils#scryrendereddomcomponentswithtag\"></a><code class=\"language-javascript\">scryRenderedDOMComponentsWithTag()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">scryRenderedDOMComponentsWithTag</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  tagName\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encontra todos elementos DOM do componente na \u00e1rvore de renderiza\u00e7\u00e3o que possua a tag com o nome igual a <code class=\"language-javascript\">tagName</code>.</p>\n\n<h3 id=\"findrendereddomcomponentwithtag\"><a class=\"anchor\" href=\"/react/test-utils#findrendereddomcomponentwithtag\"></a><code class=\"language-javascript\">findRenderedDOMComponentWithTag()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findRenderedDOMComponentWithTag</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  tagName\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Similar a <a href=\"/react/test-utils#scryrendereddomcomponentswithtag\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithTag()</code></a> mas espera apenas um resultado, e retorna esse resultado, ou lan\u00e7a uma exce\u00e7\u00e3o se existir mais de um equivalente.</p>\n\n<h3 id=\"scryrenderedcomponentswithtype\"><a class=\"anchor\" href=\"/react/test-utils#scryrenderedcomponentswithtype\"></a><code class=\"language-javascript\">scryRenderedComponentsWithType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">scryRenderedComponentsWithType</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encontra todas as inst\u00e2ncias do componente com tipo igual a <code class=\"language-javascript\">componentClass</code>.</p>\n\n<h3 id=\"findrenderedcomponentwithtype\"><a class=\"anchor\" href=\"/react/test-utils#findrenderedcomponentwithtype\"></a><code class=\"language-javascript\">findRenderedComponentWithType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findRenderedComponentWithType</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Similar a <a href=\"/react/test-utils#scryrenderedcomponentswithtype\"><code class=\"language-javascript\">scryRenderedComponentsWithType()</code></a> mas espera apenas um resultado, e retorna esse resultado, ou lan\u00e7a uma exce\u00e7\u00e3o se existir mais de um equivalente.</p>\n\n<h3 id=\"renderintodocument\"><a class=\"anchor\" href=\"/react/test-utils#renderintodocument\"></a><code class=\"language-javascript\">renderIntoDocument()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">renderIntoDocument</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderiza um elemento React em um n\u00f3 DOM desaclopado no documento. <strong>Esta fun\u00e7\u00e3o precisa de um DOM.</strong> \u00c9 efetivamente equivalente \u00e0:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> domContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> domContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Voc\u00ea precisa ter <code class=\"language-javascript\">window</code>, <code class=\"language-javascript\">window.document</code> e <code class=\"language-javascript\">window.document.createElement</code> dispon\u00edveis globalmente <strong>antes</strong> de importar <code class=\"language-javascript\">React</code>. Caso contr\u00e1rio o React vai pensar que n\u00e3o pode acessa o DOM e os m\u00e9todos como <code class=\"language-javascript\">setState</code> n\u00e3o funcionar\u00e3o.</p>\n</div>\n\n<h2 id=\"other-utilities\"><a class=\"anchor\" href=\"/react/test-utils#other-utilities\"></a>Outros Utilit\u00e1rios </h2>\n<h3 id=\"simulate\"><a class=\"anchor\" href=\"/react/test-utils#simulate\"></a><code class=\"language-javascript\">Simulate</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">Simulate<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>eventName<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>eventData<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Simule um dispacho de evento para um n\u00f3 do DOM com dados opcionais do evento <code class=\"language-javascript\">eventData</code>.</p>\n<p><code class=\"language-javascript\">Simulate</code> tem um m\u00e9todo para <a href=\"/react/events#supported-events\">cada evento que React entende</a></p>\n<p><strong>Clicando em um elemento</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// &lt;button ref={(node) =&gt; this.button = node}&gt;...&lt;/button&gt;</span>\n<span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">;</span>\nReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Alterando o valor de um campo de input e depois pressionando ENTER.</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// &lt;input ref={(node) =&gt; this.textInput = node} /&gt;</span>\n<span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">;</span>\nnode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'girafa'</span><span class=\"token punctuation\">;</span>\nReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>key<span class=\"token operator\">:</span> <span class=\"token string\">\"Enter\"</span><span class=\"token punctuation\">,</span> keyCode<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> which<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Voc\u00ea precisa fornecer alguma propriedade de evento que est\u00e1 sendo usado em seu componente (e.g. keyCode, which, etc\u2026) j\u00e1 que o React n\u00e3o est\u00e1 criando nenhum desses para voc\u00ea.</p>\n</div>\n</div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/addons-test-utils.md\">Edit this page</a></p></div></article>", "path": "/react/test-utils", "nav": ["/react/events", "/react/test-renderer"]}, {"key": "Test Renderer", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><strong>Importando</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">const</span> TestRenderer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES5 com npm</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/test-renderer#overview\"></a>Vis\u00e3o Geral </h2>\n<p>Este pacote fornece um renderizador React que pode ser usado para renderizar componentes React para objetos JavaScript puros, sem depender do DOM ou de um ambiente m\u00f3vel nativo.</p>\n<p>Essencialmente, esse pacote facilita a captura de um snapshot da hierarquia de visualiza\u00e7\u00e3o da plataforma (semelhante a uma \u00e1rvore DOM) processada por um componente React DOM ou React Native sem usar um navegador ou <a class=\"external-link\" href=\"https://github.com/tmpvar/jsdom\">jsdom</a>.</p>\n<p>Exemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Link</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> testRenderer <span class=\"token operator\">=</span> TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">page</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.facebook.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Facebook</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { type: 'a',</span>\n<span class=\"token comment\">//   props: { href: 'https://www.facebook.com/' },</span>\n<span class=\"token comment\">//   children: [ 'Facebook' ] }</span></code></pre></div>\n<p>Voc\u00ea pode usar o recurso de teste de snapshot do Jest para salvar automaticamente uma c\u00f3pia da \u00e1rvore JSON em um arquivo e verificar em seus testes que ela n\u00e3o foi alterada: <a class=\"external-link\" href=\"https://jestjs.io/docs/en/snapshot-testing\">aprenda mais</a>.</p>\n<p>Voc\u00ea tamb\u00e9m pode percorrer o resultado para encontrar n\u00f3s espec\u00edficos e fazer verifica\u00e7\u00f5es sobre eles.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SubComponent</span></span> <span class=\"token attr-name\">foo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sub<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sub</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> testRenderer <span class=\"token operator\">=</span> TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> testInstance <span class=\"token operator\">=</span> testRenderer<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span>SubComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>className<span class=\"token operator\">:</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Sub'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"testrenderer\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderer\"></a>TestRenderer </h3>\n<ul>\n<li><a href=\"/react/test-renderer#testrenderercreate\"><code class=\"language-javascript\">TestRenderer.create()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendereract\"><code class=\"language-javascript\">TestRenderer.act()</code></a></li>\n</ul>\n<h3 id=\"testrenderer-instance\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderer-instance\"></a>Inst\u00e2ncia de TestRenderer </h3>\n<ul>\n<li><a href=\"/react/test-renderer#testrenderertojson\"><code class=\"language-javascript\">testRenderer.toJSON()</code></a></li>\n<li><a href=\"/react/test-renderer#testrenderertotree\"><code class=\"language-javascript\">testRenderer.toTree()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendererupdate\"><code class=\"language-javascript\">testRenderer.update()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendererunmount\"><code class=\"language-javascript\">testRenderer.unmount()</code></a></li>\n<li><a href=\"/react/test-renderer#testrenderergetinstance\"><code class=\"language-javascript\">testRenderer.getInstance()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendererroot\"><code class=\"language-javascript\">testRenderer.root</code></a></li>\n</ul>\n<h3 id=\"testinstance\"><a class=\"anchor\" href=\"/react/test-renderer#testinstance\"></a>TestInstance </h3>\n<ul>\n<li><a href=\"/react/test-renderer#testinstancefind\"><code class=\"language-javascript\">testInstance.find()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindbytype\"><code class=\"language-javascript\">testInstance.findByType()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindbyprops\"><code class=\"language-javascript\">testInstance.findByProps()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindall\"><code class=\"language-javascript\">testInstance.findAll()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindallbytype\"><code class=\"language-javascript\">testInstance.findAllByType()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindallbyprops\"><code class=\"language-javascript\">testInstance.findAllByProps()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstanceinstance\"><code class=\"language-javascript\">testInstance.instance</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancetype\"><code class=\"language-javascript\">testInstance.type</code></a></li>\n<li><a href=\"/react/test-renderer#testinstanceprops\"><code class=\"language-javascript\">testInstance.props</code></a></li>\n<li><a href=\"/react/test-renderer#testinstanceparent\"><code class=\"language-javascript\">testInstance.parent</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancechildren\"><code class=\"language-javascript\">testInstance.children</code></a></li>\n</ul>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/test-renderer#reference\"></a>Refer\u00eancia </h2>\n<h3 id=\"testrenderercreate\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderercreate\"></a><code class=\"language-javascript\">TestRenderer.create()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cria uma inst\u00e2ncia do <code class=\"language-javascript\">TestRenderer</code> com o elemento React fornecido. Este m\u00e9todo n\u00e3o usa o DOM real, mas ainda renderiza completamente a \u00e1rvore de componentes na mem\u00f3ria para que voc\u00ea possa fazer verifica\u00e7\u00f5es sobre ela. Retorna uma <a href=\"/react/test-renderer#testrenderer-instance\">inst\u00e2ncia TestRender</a>.</p>\n<h3 id=\"testrendereract\"><a class=\"anchor\" href=\"/react/test-renderer#testrendereract\"></a><code class=\"language-javascript\">TestRenderer.act()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">act</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Similar to the <a href=\"/react/test-utils#act\"><code class=\"language-javascript\">act()</code> helper from <code class=\"language-javascript\">react-dom/test-utils</code></a>, <code class=\"language-javascript\">TestRenderer.act</code> prepares a component for assertions. Use this version of <code class=\"language-javascript\">act()</code> to wrap calls to <code class=\"language-javascript\">TestRenderer.create</code> and <code class=\"language-javascript\">testRenderer.update</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>create<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.js'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The component being tested</span>\n\n<span class=\"token comment\">// render the component</span>\n<span class=\"token keyword\">let</span> root<span class=\"token punctuation\">;</span> \n<span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  root <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// make assertions on root </span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// update with some different props</span>\n<span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// make assertions on root </span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"testrenderertojson\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderertojson\"></a><code class=\"language-javascript\">testRenderer.toJSON()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna um objeto representando a \u00e1rvore renderizada. Essa \u00e1rvore cont\u00e9m apenas os n\u00f3s espec\u00edficos da plataforma como <code class=\"language-javascript\">&lt;div&gt;</code> ou <code class=\"language-javascript\">&lt;View&gt;</code> e suas props, mas n\u00e3o cont\u00e9m nenhum componente criado pelo usu\u00e1rio. Isso \u00e9 \u00fatil para <a class=\"external-link\" href=\"https://facebook.github.io/jest/docs/en/snapshot-testing.html#snapshot-testing-with-jest\">testes de snapshot</a>.</p>\n<h3 id=\"testrenderertotree\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderertotree\"></a><code class=\"language-javascript\">testRenderer.toTree()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna um objeto representando a \u00e1rvore renderizada. A representa\u00e7\u00e3o \u00e9 mais detalhada que a fornecida por <code class=\"language-javascript\">toJSON()</code>, e inclui os componentes criados pelo usu\u00e1rio. Voc\u00ea provavelmente n\u00e3o precisa desse m\u00e9todo, a menos que esteja escrevendo sua pr\u00f3pria biblioteca de asser\u00e7\u00f5es sobre o renderizador de teste.</p>\n<h3 id=\"testrendererupdate\"><a class=\"anchor\" href=\"/react/test-renderer#testrendererupdate\"></a><code class=\"language-javascript\">testRenderer.update()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Re-renderiza a \u00e1rvore na mem\u00f3ria com um novo elemento raiz. Isso simula uma atualiza\u00e7\u00e3o do React na raiz. Se o novo elemento tiver o mesmo tipo e chave do elemento anterior, a \u00e1rvore ser\u00e1 atualizada; caso contr\u00e1rio, ele ir\u00e1 montar novamente uma nova \u00e1rvore.</p>\n<h3 id=\"testrendererunmount\"><a class=\"anchor\" href=\"/react/test-renderer#testrendererunmount\"></a><code class=\"language-javascript\">testRenderer.unmount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Desmonta a \u00e1rvore na mem\u00f3ria, acionando os eventos de ciclo de vida apropriados.</p>\n<h3 id=\"testrenderergetinstance\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderergetinstance\"></a><code class=\"language-javascript\">testRenderer.getInstance()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna a inst\u00e2ncia correspondente ao elemento raiz, se dispon\u00edvel. Isso n\u00e3o funcionar\u00e1 se o elemento raiz for um componente de fun\u00e7\u00e3o, porque eles n\u00e3o possuem inst\u00e2ncias.</p>\n<h3 id=\"testrendererroot\"><a class=\"anchor\" href=\"/react/test-renderer#testrendererroot\"></a><code class=\"language-javascript\">testRenderer.root</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span>root</code></pre></div>\n<p>Retorna o objeto raiz \u201cinst\u00e2ncia de teste\u201d que \u00e9 \u00fatil para fazer asser\u00e7\u00f5es sobre n\u00f3s espec\u00edficos na \u00e1rvore. Voc\u00ea pode us\u00e1-lo para encontrar outras \u201cinst\u00e2ncias de teste\u201d mais abaixo.</p>\n<h3 id=\"testinstancefind\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefind\"></a><code class=\"language-javascript\">testInstance.find()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encontra uma \u00fanica inst\u00e2ncia de teste descendente para a qual <code class=\"language-javascript\">test(testInstance)</code> retorne <code class=\"language-javascript\">true</code>. Se <code class=\"language-javascript\">test(testInstance)</code> n\u00e3o retornar <code class=\"language-javascript\">true</code> para exatamente uma inst\u00e2ncia de teste, isso causar\u00e1 um erro.</p>\n<h3 id=\"testinstancefindbytype\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindbytype\"></a><code class=\"language-javascript\">testInstance.findByType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encontra uma \u00fanica inst\u00e2ncia de teste descendente com o <code class=\"language-javascript\">type</code> fornecido. Se n\u00e3o houver exatamente uma inst\u00e2ncia de teste com o <code class=\"language-javascript\">type</code> fornecido, isso causar\u00e1 um erro.</p>\n<h3 id=\"testinstancefindbyprops\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindbyprops\"></a><code class=\"language-javascript\">testInstance.findByProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encontra uma \u00fanica inst\u00e2ncia de teste descendente com os <code class=\"language-javascript\">props</code> fornecidos. Se n\u00e3o houver exatamente uma inst\u00e2ncia de teste com os <code class=\"language-javascript\">props</code> fornecidos, isso causar\u00e1 um erro.</p>\n<h3 id=\"testinstancefindall\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindall\"></a><code class=\"language-javascript\">testInstance.findAll()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encontra todas as inst\u00e2ncias de teste descendentes para as quais <code class=\"language-javascript\">test(testInstance)</code> retorne <code class=\"language-javascript\">true</code>.</p>\n<h3 id=\"testinstancefindallbytype\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindallbytype\"></a><code class=\"language-javascript\">testInstance.findAllByType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encontra todas as inst\u00e2ncias de teste descendentes com o <code class=\"language-javascript\">type</code> fornecido.</p>\n<h3 id=\"testinstancefindallbyprops\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindallbyprops\"></a><code class=\"language-javascript\">testInstance.findAllByProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encontra todas as inst\u00e2ncias de teste descendentes com os <code class=\"language-javascript\">props</code> fornecidos.</p>\n<h3 id=\"testinstanceinstance\"><a class=\"anchor\" href=\"/react/test-renderer#testinstanceinstance\"></a><code class=\"language-javascript\">testInstance.instance</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>instance</code></pre></div>\n<p>A inst\u00e2ncia do componente correspondente a essa inst\u00e2ncia de teste. Est\u00e1 dispon\u00edvel apenas para componentes de classe, pois os componentes de fun\u00e7\u00e3o n\u00e3o possuem inst\u00e2ncias. Ele corresponde ao valor <code class=\"language-javascript\">this</code> dentro do componente fornecido.</p>\n<h3 id=\"testinstancetype\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancetype\"></a><code class=\"language-javascript\">testInstance.type</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>type</code></pre></div>\n<p>O tipo de componente correspondente a essa inst\u00e2ncia de teste. Por exemplo, um componente <code class=\"language-javascript\">&lt;Button /&gt;</code> tem o tipo <code class=\"language-javascript\">Button</code>.</p>\n<h3 id=\"testinstanceprops\"><a class=\"anchor\" href=\"/react/test-renderer#testinstanceprops\"></a><code class=\"language-javascript\">testInstance.props</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>props</code></pre></div>\n<p>Os props correspondentes a essa inst\u00e2ncia de teste. Por exemplo, um componente <code class=\"language-javascript\">&lt;Button size=\"small\"/&gt;</code> possui <code class=\"language-javascript\">{size: 'small'}</code> como props.</p>\n<h3 id=\"testinstanceparent\"><a class=\"anchor\" href=\"/react/test-renderer#testinstanceparent\"></a><code class=\"language-javascript\">testInstance.parent</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>parent</code></pre></div>\n<p>A inst\u00e2ncia de teste pai desta inst\u00e2ncia de teste.</p>\n<h3 id=\"testinstancechildren\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancechildren\"></a><code class=\"language-javascript\">testInstance.children</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>children</code></pre></div>\n<p>As inst\u00e2ncias de testes descendentes desta inst\u00e2ncia de teste.</p>\n<h2 id=\"ideas\"><a class=\"anchor\" href=\"/react/test-renderer#ideas\"></a>Ideias </h2>\n<p>Voc\u00ea pode passar a fun\u00e7\u00e3o <code class=\"language-javascript\">createNodeMock</code> para <code class=\"language-javascript\">TestRenderer.create</code> como op\u00e7\u00e3o, que permite mocks personalizados de refs.\n<code class=\"language-javascript\">createNodeMock</code> aceita o elemento atual e deve retornar um objeto mock de ref.\nIsso \u00e9 \u00fatil quando voc\u00ea testa um componente que depende de refs.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> focused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nTestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">createNodeMock</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// mock de uma fun\u00e7\u00e3o de focus</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            focused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>focused<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reference-test-renderer.md\">Edit this page</a></p></div></article>", "path": "/react/test-renderer", "nav": ["/react/test-utils", "/react/javascript-environment-requirements"]}, {"key": "Requisitos de Ambiente JavaScript", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>O React 16 depende de uma cole\u00e7\u00e3o de tipos <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a> e <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a>. Se voc\u00ea precisa manter o suporte para navegadores antigos e dispositivos que podem n\u00e3o disponibilizar esses recursos (ex. IE &lt; 11) ou tenham uma implementa\u00e7\u00e3o que n\u00e3o seja padr\u00e3o (ex. IE 11), considere incluir um polyfill global no bundle de sua aplica\u00e7\u00e3o, tal como o pacote <a class=\"external-link\" href=\"https://github.com/zloirock/core-js\">core-js</a>.</p>\n<p>Um ambiente com polyfill incluido para o React 16, usando core-js para prestar suporte a navegadores antigos, pode parecer assim:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'core-js/es/map'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'core-js/es/set'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1, mundo!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O React tamb\u00e9m depende da fun\u00e7\u00e3o <code class=\"language-javascript\">requestAnimationFrame</code> (mesmo em ambiente de teste).<br/>\nVoc\u00ea pode usar o pacote <a class=\"external-link\" href=\"https://www.npmjs.com/package/raf\">raf</a> como substituto para a fun\u00e7\u00e3o <code class=\"language-javascript\">requestAnimationFrame</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'raf/polyfill'</span><span class=\"token punctuation\">;</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reference-javascript-environment-requirements.md\">Edit this page</a></p></div></article>", "path": "/react/javascript-environment-requirements", "nav": ["/react/test-renderer", "/react/glossary"]}, {"key": "Gloss\u00e1rio", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><h2 id=\"single-page-application\"><a class=\"anchor\" href=\"/react/glossary#single-page-application\"></a>Aplica\u00e7\u00f5es Single-page </h2>\n<p>Uma aplica\u00e7\u00e3o single-page \u00e9 uma aplica\u00e7\u00e3o que carrega uma \u00fanica p\u00e1gina HTML e todos os assets (como JavaScript e CSS) necess\u00e1rios para a aplica\u00e7\u00e3o ser executada. Quaisquer intera\u00e7\u00f5es com a p\u00e1gina ou p\u00e1ginas subsequentes n\u00e3o necessitam outras requisi\u00e7\u00f5es para o servidor, o que significa que a p\u00e1gina n\u00e3o \u00e9 recarregada.</p>\n<p>Embora voc\u00ea possa criar uma aplica\u00e7\u00e3o single-page com React, isso n\u00e3o \u00e9 um requisito. React tamb\u00e9m pode ser usado para melhorar pequenas partes de websites existentes com intera\u00e7\u00f5es adicionais. C\u00f3digo escrito em React pode coexistir pacificamente com markup renderizado no servidor por PHP, ou com outras bibliotecas client-side. Na verdade, \u00e9 exatamente assim que o React est\u00e1 sendo usado no Facebook.</p>\n<h2 id=\"es6-es2015-es2016-etc\"><a class=\"anchor\" href=\"/react/glossary#es6-es2015-es2016-etc\"></a>ES6, ES2015, ES2016, etc </h2>\n<p>Todas essas siglas referem-se \u00e0s vers\u00f5es mais recentes do padr\u00e3o de especifica\u00e7\u00e3o da linguagem ECMAScript, no qual a linguagem JavaScript \u00e9 uma implementa\u00e7\u00e3o. A vers\u00e3o ES6 (tamb\u00e9m conhecida como ES2015) inclui muitas adi\u00e7\u00f5es \u00e0s vers\u00f5es anteriores, tais como: arrow functions, classes, template literals, e declara\u00e7\u00f5es <code class=\"language-javascript\">let</code> e <code class=\"language-javascript\">const</code>. Voc\u00ea pode aprender mais sobre vers\u00f5es espec\u00edficas <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/ECMAScript#Versions\">aqui</a>.</p>\n<h2 id=\"compilers\"><a class=\"anchor\" href=\"/react/glossary#compilers\"></a>Compiladores </h2>\n<p>Um compilador JavaScript pega o c\u00f3digo JavaScript, transforma-o e retorna o c\u00f3digo JavaScript em um formato diferente. O caso de uso mais comum \u00e9 pegar a sintaxe do ES6 e transform\u00e1-la na sintaxe que os navegadores mais antigos s\u00e3o capazes de interpretar. <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a> \u00e9 o compilador mais comumente usado com o React.</p>\n<h2 id=\"bundlers\"><a class=\"anchor\" href=\"/react/glossary#bundlers\"></a>Bundlers </h2>\n<p>Bundlers usam o c\u00f3digo CSS e JavaScript escrito como m\u00f3dulos separados (geralmente centenas deles) e os combinam em alguns arquivos melhor otimizados para os navegadores. Alguns empacotadores comumente usados em aplicativos React incluem [Webpack] (<a class=\"external-link\" href=\"https://webpack.js.org/\">https://webpack.js.org/</a>) e [Browserify] (<a class=\"external-link\" href=\"http://browserify.org/\">http://browserify.org/</a>).</p>\n<h2 id=\"package-managers\"><a class=\"anchor\" href=\"/react/glossary#package-managers\"></a>Gerenciadores de Pacotes </h2>\n<p>Gerenciadores de pacotes s\u00e3o ferramentas que permitem gerenciar depend\u00eancias em seu projeto. [npm] (<a class=\"external-link\" href=\"https://www.npmjs.com/\">https://www.npmjs.com/</a>) e [Yarn] (<a class=\"external-link\" href=\"https://yarnpkg.com/\">https://yarnpkg.com/</a>) s\u00e3o dois gerenciadores de pacotes comumente usados em aplicativos React. Ambos s\u00e3o clientes para o mesmo registro de pacotes npm.</p>\n<h2 id=\"cdn\"><a class=\"anchor\" href=\"/react/glossary#cdn\"></a>CDN </h2>\n<p>CDN significa Content Delivery Network. As CDNs fornecem conte\u00fado est\u00e1tico e em cache de uma rede de servidores em todo o mundo.</p>\n<h2 id=\"jsx\"><a class=\"anchor\" href=\"/react/glossary#jsx\"></a>JSX </h2>\n<p>JSX \u00e9 uma extens\u00e3o de sintaxe para JavaScript. \u00c9 semelhante a uma linguagem de template, mas com todo o poder do JavaScript. JSX \u00e9 compilado para chamadas <code class=\"language-javascript\">React.createElement ()</code> que retornam objetos JavaScript simples chamados \u201celementos React\u201d. Para ter uma introdu\u00e7\u00e3o b\u00e1sica ao JSX <a href=\"/react/introduction-jsx\">consulte os documentos aqui</a> e encontre um tutorial mais aprofundado sobre JSX <a href=\"/react/jsx-in-depth\">aqui</a>.</p>\n<p>React DOM usa a conven\u00e7\u00e3o de nomenclatura de propriedades camelCase em vez dos nomes de atributos HTML. Por exemplo, <code class=\"language-javascript\">tabindex</code> torna-se <code class=\"language-javascript\">tabIndex</code> em JSX. O atributo <code class=\"language-javascript\">class</code> tamb\u00e9m \u00e9 escrito como <code class=\"language-javascript\">className</code>, j\u00e1 que <code class=\"language-javascript\">class</code> \u00e9 uma palavra reservada em JavaScript:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> nome <span class=\"token operator\">=</span> <span class=\"token string\">'Clementine'</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Meu nome \u00e9 </span><span class=\"token punctuation\">{</span>nome<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"elements\"><a class=\"anchor\" href=\"/react/glossary#elements\"></a><a href=\"/react/rendering-elements\">Elementos</a> </h2>\n<p>Elementos React s\u00e3o os blocos de constru\u00e7\u00e3o de aplica\u00e7\u00f5es React. Pode-se confundir elementos com um conceito mais amplamente conhecido como \u201ccomponentes\u201d. Um elemento descreve o que voc\u00ea quer ver na tela. Elementos React s\u00e3o imut\u00e1veis.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> elemento <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1, mundo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tipicamente, elementos n\u00e3o s\u00e3o usados diretamente, mas s\u00e3o retornados dos componentes.</p>\n<h2 id=\"components\"><a class=\"anchor\" href=\"/react/glossary#components\"></a><a href=\"/react/components-and-props\">Componentes</a> </h2>\n<p>Componentes React s\u00e3o pequenas pe\u00e7as reus\u00e1veis de c\u00f3digo que retornam um elemento React para ser renderizado na p\u00e1gina. A vers\u00e3o mais simples de um componente React \u00e9 uma simples fun\u00e7\u00e3o JavaScript que retorna um elemento React:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">BemVindo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Componentes tamb\u00e9m podem ser ES6 classes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BemVindo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Ol\u00e1, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Componentes podem ser quebrados em pe\u00e7as distintas de funcionalidade e usados em outros componentes. Componentes podem retornar outros componentes, arrays, strings e n\u00fameros. Uma regra de ouro \u00e9 que se parte da sua UI \u00e9 usada v\u00e1rias vezes (Bot\u00e3o, Painel, Avatar), ou \u00e9 complexa suficiente (App, FeedStory, Comment), \u00e9 uma boa candidata para ser um componente reutilis\u00e1vel. Nomes de componentes devem tamb\u00e9m sempre come\u00e7ar com letra mai\u00fascula (<code class=\"language-javascript\">&lt;Wrapper/&gt;</code> <strong>ao inv\u00e9s de</strong> <code class=\"language-javascript\">&lt;wrapper/&gt;</code>). Veja <a href=\"/react/components-and-props#rendering-a-component\">esta documenta\u00e7\u00e3o</a> para mais informa\u00e7\u00f5es sobre renderiza\u00e7\u00e3o de componentes.</p>\n<h3 id=\"props\"><a class=\"anchor\" href=\"/react/glossary#props\"></a><a href=\"/react/components-and-props\"><code class=\"language-javascript\">props</code></a> </h3>\n<p><code class=\"language-javascript\">props</code> s\u00e3o entradas dos componentes React. Eles s\u00e3o dados passados por um componente pai para um componente filho.</p>\n<p>Lembre que <code class=\"language-javascript\">props</code> s\u00e3o somente leitura. Eles n\u00e3o devem ser modificados desta forma:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Errado!</span>\nprops<span class=\"token punctuation\">.</span>numero <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se voc\u00ea precisar modificar algum valor em resposta a uma entrada do usu\u00e1rio ou a uma resposta da rede, use <code class=\"language-javascript\">state</code> em vez disso.</p>\n<h3 id=\"propschildren\"><a class=\"anchor\" href=\"/react/glossary#propschildren\"></a><code class=\"language-javascript\">props.children</code> </h3>\n<p><code class=\"language-javascript\">props.children</code> est\u00e1 dispon\u00edvel em todos os componentes. Ele cont\u00e9m o conte\u00fado entre as tags de abertura e fechamento de um componente. Por exemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BemVindo</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">BemVindo</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>A string <code class=\"language-javascript\">Hello world!</code> est\u00e1 dispon\u00edvel em <code class=\"language-javascript\">props.children</code> no componente <code class=\"language-javascript\">BemVindo</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">BemVindo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para componentes definidos como classes, use <code class=\"language-javascript\">this.props.children</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BemVindo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"state\"><a class=\"anchor\" href=\"/react/glossary#state\"></a><a href=\"/react/state-and-lifecycle#adding-local-state-to-a-class\"><code class=\"language-javascript\">state</code></a> </h3>\n<p>Um componente precisa de <code class=\"language-javascript\">state</code> quando algum dado associado com este \u00e9 alterado com o tempo. Por exemplo, um <code class=\"language-javascript\">Checkbox</code> componente pode precisar da propriedade <code class=\"language-javascript\">isChecked</code> no seu estado (<em>state</em>), e um componente <code class=\"language-javascript\">NewsFeed</code> pode querer observar a propriedade <code class=\"language-javascript\">fetchedPosts</code> do seu estado.</p>\n<p>A diferen\u00e7a mais importante entre <code class=\"language-javascript\">state</code> e <code class=\"language-javascript\">props</code> \u00e9 que <code class=\"language-javascript\">props</code> \u00e9 passada de um componente pai, mas o <code class=\"language-javascript\">state</code> \u00e9 gerenciado pelo pr\u00f3prio componente. Um componente n\u00e3o pode alterar suas <code class=\"language-javascript\">props</code>, mas pode alterar seu <code class=\"language-javascript\">state</code>.</p>\n<p>Para cada parte espec\u00edfica de dados alterados, deve haver apenas um componente que o \u201cpossua\u201d em seu estado. N\u00e3o tente sincronizar estados de dois componentes diferentes. Em vez disso, [passe-o] (/ docs / lifting-state-up.html) para o seu ancestral compartilhado mais pr\u00f3ximo e passe-o para baixo como props para ambos.</p>\n<h2 id=\"lifecycle-methods\"><a class=\"anchor\" href=\"/react/glossary#lifecycle-methods\"></a><a href=\"/react/state-and-lifecycle#adding-lifecycle-methods-to-a-class\">M\u00e9todos de Ciclo de Vida</a> </h2>\n<p>M\u00e9todos de ciclo de vida s\u00e3o funcionalidades customizadas que s\u00e3o executadas durante as diferentes fases de um componente. H\u00e1 m\u00e9todos disponiv\u00e9is quando o componente \u00e9 criado e inserido no DOM (<a href=\"/react/react-component#mounting\">mounting</a>), quando o componente \u00e9 atualizado, e quando o componente \u00e9 desmontado e removido do DOM.</p>\n<h2 id=\"controlados-vs-componentes-n\u00e3o-controlados\"><a class=\"anchor\" href=\"/react/glossary#controlados-vs-componentes-n%C3%A3o-controlados\"></a><a href=\"/react/forms#controlled-components\">Controlados</a> vs. <a href=\"/react/uncontrolled-components\">Componentes N\u00e3o Controlados</a></h2>\n<p>React tem duas abordagens diferentes para lidar com inputs de formul\u00e1rios.</p>\n<p>Um elemento de input de formul\u00e1rio cujo valor \u00e9 controlado pelo React \u00e9 chamado de <em>componente controlado</em>. Quando o usu\u00e1rio insere dados em um componente controlado o evento que manipula essa altera\u00e7\u00e3o \u00e9 disparado e o seu codigo decide se o input \u00e9 v\u00e1lido (renderizado com o valor atualizado). Se voc\u00ea n\u00e3o re-renderizar o elemento de formul\u00e1rio permanecer\u00e1 inalterado.</p>\n<p>Um <em>componente n\u00e3o controlado</em> funciona como um elemento de formul\u00e1rio fora do React. Quando um usu\u00e1rio insere dados em um campo de formul\u00e1rio (um input box, dropbox, etc) a informa\u00e7\u00e3o atualizada \u00e9 refletida sem necessidade do React fazer nada. No entanto, isso tamb\u00e9m significa que voc\u00ea n\u00e3o pode for\u00e7ar o campo a ter um certo valor.</p>\n<p>Na maioria dos casos voc\u00ea deve usar componentes controlados.</p>\n<h2 id=\"keys\"><a class=\"anchor\" href=\"/react/glossary#keys\"></a><a href=\"/react/lists-and-keys\">Keys</a> </h2>\n<p>Uma \u201ckey\u201d (chave) \u00e9 um atributo de string especial que voc\u00ea precisa incluir quando estiver criando arrays de elementos. Chaves ajudam o React a identificar quais items foram alterados, quais foram adicionados, ou quais foram removidos. Chaves devem ser dadas a elementos em um array para dar a estes elementos uma identidade est\u00e1vel.</p>\n<p>As chaves precisam ser \u00fanicas entre os elementos de um mesmo array. Eles n\u00e3o precisam ser exclusivos em toda a aplica\u00e7\u00e3o ou at\u00e9 mesmo em um \u00fanico componente.</p>\n<p>N\u00e3o passe algo como <code class=\"language-javascript\">Math.random()</code> para as chaves. \u00c9 importante que as chaves tenham uma \u201cidentidade est\u00e1vel\u201d em re-renderiza\u00e7\u00f5es para que o React possa determinar quando os items s\u00e3o adicionados, removidos, ou re-ordenados. Idealmente, chaves devem corresponder a identificadores \u00fanicos e est\u00e1veis vindos dos seus dados, como <code class=\"language-javascript\">post.id</code>.</p>\n<h2 id=\"refs\"><a class=\"anchor\" href=\"/react/glossary#refs\"></a><a href=\"/react/refs-and-the-dom\">Refs</a> </h2>\n<p>React suporta um atributo especial que voc\u00ea pode adicionar a qualquer componente. O atributo <code class=\"language-javascript\">ref</code> pode ser um objeto criado por <a href=\"/react/react-api#reactcreateref\"><code class=\"language-javascript\">React.createRef()</code> function</a> ou uma fun\u00e7\u00e3o callback, ou uma string (em APIs legadas). Quando o atributo <code class=\"language-javascript\">ref</code> \u00e9 uma fun\u00e7\u00e3o callback, a fun\u00e7\u00e3o recebe o elemento DOM subjacente ou uma instancia de classe (dependendo do tipo de elemento) como argumento. Isso permite voc\u00ea ter acesso direto ao elemento DOM ou a inst\u00e2ncia do componente.</p>\n<p>Use refs com modera\u00e7\u00e3o. Se voc\u00ea se encontrar usando refs frequentemente para \u201cfazer as coisas acontecerem\u201d na sua aplica\u00e7\u00e3o, considere se familiarizar com <a href=\"/react/lifting-state-up\">top-down data flow</a>.</p>\n<h2 id=\"events\"><a class=\"anchor\" href=\"/react/glossary#events\"></a><a href=\"/react/handling-events\">Eventos</a> </h2>\n<p>Manipular eventos com elementos React tem algumas diferen\u00e7as sint\u00e1ticas:</p>\n<ul>\n<li>Manipuladores de eventos React usam camelCase, em vez de lowercase.</li>\n<li>Com JSX voc\u00ea passa uma fun\u00e7\u00e3o como manipulador de evento, em vez de uma string.</li>\n</ul>\n<h2 id=\"reconciliation\"><a class=\"anchor\" href=\"/react/glossary#reconciliation\"></a><a href=\"/react/reconciliation\">Reconcilia\u00e7\u00e3o</a> </h2>\n<p>Quando as props ou state de um componente s\u00e3o alterados, o React decide quando uma atualiza\u00e7\u00e3o do DOM \u00e9 necess\u00e1ria comparando o novo elemento retornado com o anterior renderizado. Quando eles n\u00e3o s\u00e3o iguais, React atualiza o DOM. Este processo \u00e9 chamado de \u201creconcilia\u00e7\u00e3o\u201d.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/reference-glossary.md\">Edit this page</a></p></div></article>", "path": "/react/glossary", "nav": ["/react/javascript-environment-requirements", "/react/hooks-intro"]}]}, {"key": "Hooks", "values": [{"key": "1. Introdu\u00e7\u00e3o aos Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><em>Hooks</em> s\u00e3o uma nova adi\u00e7\u00e3o ao React 16.8. Eles permitem que voc\u00ea use o state e outros recursos do React sem escrever uma classe.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declare uma nova vari\u00e1vel de state, a qual chamaremos de \"count\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Clique aqui</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Essa nova fun\u00e7\u00e3o <code class=\"language-javascript\">useState</code> \u00e9 o primeiro \u201cHook\u201d que n\u00f3s iremos aprender, mas este exemplo \u00e9 s\u00f3 um gostinho. N\u00e3o se preocupe se isso ainda n\u00e3o fizer sentido!</p>\n<p><strong>Voc\u00ea pode come\u00e7ar a aprender Hooks <a href=\"/react/hooks-overview\">na pr\u00f3xima p\u00e1gina</a>.</strong> Nesta p\u00e1gina, n\u00f3s iremos continuar explicando porque n\u00f3s estamos adicionando Hooks em React e como eles podem ajudar a escrever boas aplica\u00e7\u00f5es.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>React 16.8.0 \u00e9 o primeiro release com suporte a Hooks. Ao atualizar, n\u00e3o se esque\u00e7a de atualizar todos os pacotes, incluindo React DOM.\nReact Native suporta Hooks desde <a class=\"external-link\" href=\"https://reactnative.dev/blog/2019/03/12/releasing-react-native-059\">a vers\u00e3o 0.59 de React Native</a>.</p>\n</div>\n<h2 id=\"video-introduction\"><a class=\"anchor\" href=\"/react/hooks-intro#video-introduction\"></a>Introdu\u00e7\u00e3o em V\u00eddeo </h2>\n<p>Na React Conf 2018, Sophie Alpert e Dan Abramov introduziram Hooks, seguidos por Ryan Florence demonstrando como refatorar uma aplica\u00e7\u00e3o para us\u00e1-los. Assista ao v\u00eddeo em ingl\u00eas aqui:</p>\n<br/>\n<a class=\"external-link\" href=\"//www.youtube.com/embed/dpw9EHDh2bM\">link</a>\n<h2 id=\"no-breaking-changes\"><a class=\"anchor\" href=\"/react/hooks-intro#no-breaking-changes\"></a>Sem Quebras de Compatibilidade </h2>\n<p>Antes de continuar, note que Hooks s\u00e3o:</p>\n<ul>\n<li><strong>Completamente opcionais.</strong> Voc\u00ea pode experimentar Hooks em alguns componentes sem reescrever nenhum c\u00f3digo existente. Mas voc\u00ea n\u00e3o tem que aprender ou usar Hooks agora se n\u00e3o quiser.</li>\n<li><strong>100% retrocompat\u00edveis.</strong> Hooks n\u00e3o possuem nenhuma quebra de compatibilidade.</li>\n<li><strong>Dispon\u00edvel agora.</strong> Hooks est\u00e3o dispon\u00edveis no release v16.8.0.</li>\n</ul>\n<p><strong>N\u00e3o temos planos de remover classes do React.</strong> Voc\u00ea pode aprender mais sobre a estrat\u00e9gia de ado\u00e7\u00e3o gradual para Hooks na <a href=\"/react/hooks-intro#gradual-adoption-strategy\">se\u00e7\u00e3o inferior</a> desta p\u00e1gina.</p>\n<p><strong>Hooks n\u00e3o substituem seu conhecimento dos conceitos de React.</strong> Ao inv\u00e9s disso, Hooks proveem uma API mais direta para os conceitos de React que voc\u00ea j\u00e1 conhece: props, state, context, refs e ciclo de vida. Como iremos mostrar em breve, Hooks tamb\u00e9m oferecem uma poderosa nova forma de combin\u00e1-los.</p>\n<p><strong>Se voc\u00ea s\u00f3 quiser come\u00e7ar a aprender Hooks, sinta-se livre para <a href=\"/react/hooks-overview\">pular direto para a pr\u00f3xima p\u00e1gina!</a></strong> Voc\u00ea tamb\u00e9m pode continuar lendo esta p\u00e1gina para aprender mais sobre o porqu\u00ea de estarmos adicionando Hooks e como n\u00f3s iremos come\u00e7ar a us\u00e1-los sem reescrever nossas aplica\u00e7\u00f5es.</p>\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"/react/hooks-intro#motivation\"></a>Motiva\u00e7\u00e3o </h2>\n<p><em>Hooks</em> resolvem uma variedade de problemas aparentemente separados em React que encontramos ao longo de cinco anos escrevendo e mantendo milhares de componentes. Esteja voc\u00ea aprendendo React, usando diariamente, ou at\u00e9 mesmo se prefere outra biblioteca com um modelo de componente parecido, voc\u00ea reconhecer\u00e1 alguns destes problemas.</p>\n<h3 id=\"its-hard-to-reuse-stateful-logic-between-components\"><a class=\"anchor\" href=\"/react/hooks-intro#its-hard-to-reuse-stateful-logic-between-components\"></a>\u00c9 Dif\u00edcil Reutilizar L\u00f3gica com Estado entre Componentes </h3>\n<p>React n\u00e3o oferece uma forma de \u201cvincular\u201d comportamento reutiliz\u00e1vel em um componente (por exemplo, conectar um componente a uma store). Se voc\u00ea j\u00e1 trabalhou com React por um tempo, voc\u00ea pode estar familiarizado com padr\u00f5es como <a href=\"/react/render-props\">render props</a> e <a href=\"/react/higher-order-components\">higher-order components</a> que tentam resolver isso. Mas estes padr\u00f5es requerem que voc\u00ea reestruture seus componentes quando voc\u00ea os usa, o que pode parecer atrapalhado e tornar o c\u00f3digo mais dif\u00edcil de entender. Se voc\u00ea ver uma aplica\u00e7\u00e3o React t\u00edpica com React DevTools, voc\u00ea provavelmente ir\u00e1 encontrar um \u201cinferno de wrappers\u201d de componentes rodeados de camadas de providers, consumers, high-order components, render props, e outras abstra\u00e7\u00f5es. Apesar de podermos <a class=\"external-link\" href=\"https://github.com/facebook/react-devtools/pull/503\">filtrar eles na DevTools</a>, isso aponta para um problema mais profundo: React precisa de uma primitiva melhor para compartilhar l\u00f3gica com estado.</p>\n<p>Com Hooks, voc\u00ea pode extrair l\u00f3gica com estado de um componente de uma forma que possa ser testada independentemente e reutilizada. <strong>Hooks permitem reutilizar l\u00f3gica com estado sem mudar sua hierarquia de componentes.</strong> Isso torna f\u00e1cil de compartilhar Hooks com v\u00e1rios outros componentes ou com a comunidade.</p>\n<p>N\u00f3s iremos discutir mais sobre isso em <a href=\"/react/hooks-custom\">Construindo Seus Pr\u00f3prios Hooks</a>.</p>\n<h3 id=\"complex-components-become-hard-to-understand\"><a class=\"anchor\" href=\"/react/hooks-intro#complex-components-become-hard-to-understand\"></a>Componentes Complexos se Tornam Dif\u00edceis de Entender </h3>\n<p>N\u00f3s frequentemente temos que manter componentes que come\u00e7am simples mas crescem para uma bagun\u00e7a incontrol\u00e1vel de l\u00f3gica com estado e efeitos colaterais. Cada m\u00e9todo de ciclo de vida frequentemente cont\u00eam uma mistura de l\u00f3gicas que n\u00e3o se relacionam. Por exemplo, componentes podem pegar dados em <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentDidUpdate</code>. Contudo, o m\u00e9todo <code class=\"language-javascript\">componentDidMount</code> pode conter algumas l\u00f3gicas n\u00e3o relacionadas que configuram event listeners, com a limpeza deles em <code class=\"language-javascript\">componentWillUnmount</code>. C\u00f3digo mutuamente relacionado, que mudam juntos, acabam ficando separados, mas trechos de c\u00f3digo completamente n\u00e3o relacionados acabam ficando juntos em um \u00fanico m\u00e9todo. Isso torna muito f\u00e1cil a introdu\u00e7\u00e3o de bugs e inconsist\u00eancias.</p>\n<p>Em muitos casos n\u00e3o \u00e9 poss\u00edvel quebrar esses componentes em peda\u00e7os menores porque a l\u00f3gica com estado est\u00e1 espalhada por toda parte. Tamb\u00e9m \u00e9 dif\u00edcil de test\u00e1-los. Isso \u00e9 uma das raz\u00f5es pelas quais muitas pessoas preferem combinar React com uma biblioteca separada de gerenciamento de estado. Contudo, isso frequentemente introduz muitas abstra\u00e7\u00f5es, requer que voc\u00ea pule entre arquivos diferentes, e faz com que a reutiliza\u00e7\u00e3o de componentes seja mais dif\u00edcil.</p>\n<p>Para resolver isso, <strong>Hooks permitem que voc\u00ea divida um componente em fun\u00e7\u00f5es menores baseadas em peda\u00e7os que s\u00e3o relacionados (como configurar uma subscription ou captura de dados)</strong>, em vez de for\u00e7ar uma divis\u00e3o baseada nos m\u00e9todos de ciclo de vida. Voc\u00ea tamb\u00e9m pode optar por gerenciar o estado local com um reducer para torn\u00e1-lo mais previs\u00edvel.</p>\n<p>N\u00f3s iremos discutir mais sobre isso em <a href=\"/react/hooks-effect#tip-use-multiple-effects-to-separate-concerns\">Usando o Effect Hook</a>.</p>\n<h3 id=\"classes-confuse-both-people-and-machines\"><a class=\"anchor\" href=\"/react/hooks-intro#classes-confuse-both-people-and-machines\"></a>Classes Confundem tanto Pessoas quanto M\u00e1quinas </h3>\n<p>Al\u00e9m de deixar o reuso de c\u00f3digo e a organiza\u00e7\u00e3o de c\u00f3digo mais dif\u00edcil, n\u00f3s percebemos que classes podem ser uma grande barreira no aprendizado de React. Voc\u00ea tem que entender como o <code class=\"language-javascript\">this</code> funciona em JavaScript, o que pode ser diferente de como funciona na maioria das linguagens. Voc\u00ea tem que lembrar de fazer bind de event handlers. Sem <a class=\"external-link\" href=\"https://babeljs.io/docs/en/babel-plugin-transform-class-properties/\">propostas de sintaxe</a> inst\u00e1veis, o c\u00f3digo pode ficar muito verboso. As pessoas podem entender props, state e fluxo de dados de cima para baixo perfeitamente bem, mas ainda tem dificuldade com classes. A distin\u00e7\u00e3o entre componentes de classe e de fun\u00e7\u00e3o em React e quando utilizar cada um deles acabam levando a desentendimentos, mesmo entre desenvolvedores experientes de React.</p>\n<p>Adicionalmente, React j\u00e1 foi lan\u00e7ado h\u00e1 mais ou menos cinco anos e n\u00f3s quer\u00edamos ter certeza que ele se mantivesse relevante pelos pr\u00f3ximos cinco anos. Assim como <a class=\"external-link\" href=\"https://svelte.dev/\">Svelte</a>, <a class=\"external-link\" href=\"https://angular.io/\">Angular</a>, <a class=\"external-link\" href=\"https://glimmerjs.com/\">Glimmer</a>, e outros mostraram, <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Ahead-of-time_compilation\">compila\u00e7\u00e3o ahead-of-time</a> de componentes tem um grande potencial no futuro. Especialmente se n\u00e3o estiver limitado a templates. Recentemente, estivemos experimentando com <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/7323\">component folding</a> usando <a class=\"external-link\" href=\"https://prepack.io/\">Prepack</a> e estamos encontrando resultados promissores. Por\u00e9m, percebemos que componentes de classe podem encorajar padr\u00f5es n\u00e3o intencionais que fazem com que essas otimiza\u00e7\u00f5es recaiam em um caminho mais lento. Classes apresentam problemas para ferramentas dos dias de hoje, tamb\u00e9m. Por exemplo, classes n\u00e3o minificam muito bem e elas fazem com que hot reloading funcione de forma inconsistente e n\u00e3o confi\u00e1vel. N\u00f3s queremos disponibilizar uma API que torne mais prov\u00e1vel o c\u00f3digo permanecer no caminho otimiz\u00e1vel.</p>\n<p>Para resolver esses problemas, <strong><em>Hooks</em> permitem voc\u00ea usar mais das funcionalidades de React sem classes.</strong> Conceitualmente, componentes React sempre estiveram mais pr\u00f3ximos de fun\u00e7\u00f5es. Hooks adotam fun\u00e7\u00f5es, mas sem sacrificar o esp\u00edrito pr\u00e1tico de React. Hooks proveem acesso a v\u00e1lvulas de escape imperativas e n\u00e3o requerem voc\u00ea a aprender t\u00e9cnicas complexas de programa\u00e7\u00e3o funcional ou reativa.</p>\n<div class=\"blockquote\">\n<strong>Exemplos</strong>\n<p><a href=\"/react/hooks-overview\">Hooks at a Glance</a> \u00e9 um bom lugar para come\u00e7ar a aprender Hooks.</p>\n</div>\n<h2 id=\"gradual-adoption-strategy\"><a class=\"anchor\" href=\"/react/hooks-intro#gradual-adoption-strategy\"></a>Estrat\u00e9gia Gradual de Ado\u00e7\u00e3o </h2>\n<div class=\"blockquote\">\n<strong>TLDR: N\u00e3o h\u00e1 planos de remover classes de React.</strong>\n</div>\n<p>N\u00f3s sabemos que desenvolvedores React est\u00e3o focados em entregar produtos e n\u00e3o t\u00eam tempo de checar cada nova API que est\u00e1 sendo lan\u00e7ada. Hooks s\u00e3o muito novos e pode ser melhor esperar por mais exemplos e tutoriais antes de considerar aprender ou adot\u00e1-los.</p>\n<p>N\u00f3s tamb\u00e9m entendemos que o padr\u00e3o de novas primitivas, para serem adicionadas ao React, deva ser extremamente alto. Para leitores curiosos, n\u00f3s preparamos uma <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs/pull/68\">detalhada RFC</a> que vai a fundo na motiva\u00e7\u00e3o com mais detalhes e prov\u00ea uma perspectiva extra sobre decis\u00f5es espec\u00edficas de design e o estado da arte. </p>\n<p><strong>Crucialmente, Hooks funcionam lado a lado com c\u00f3digo existente para que voc\u00ea possa adot\u00e1-los gradualmente.</strong> N\u00e3o h\u00e1 pressa para migrar para Hooks. N\u00f3s recomendamos evitar \u201cgrandes reescritas\u201d de c\u00f3digo, especialmente para componentes de classe complexos j\u00e1 existentes. \u00c9 preciso mudar um pouco a mente para come\u00e7ar a \u201cpensar em hooks\u201d. Em nossa experi\u00eancia, \u00e9 melhor praticar a utiliza\u00e7\u00e3o de Hooks inicialmente em componentes novos e n\u00e3o cr\u00edticos e garantir que todo o time se sinta confort\u00e1vel com eles. Depois de experimentar Hooks, sinta-se livre para <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/new\">nos mandar feedback</a>, positivo ou negativo.</p>\n<p>N\u00f3s planejamos que os Hooks cubram todas os casos de uso existentes para classes, mas <strong>n\u00f3s iremos continuar a suportar componentes de classe por um bom tempo no futuro.</strong> No Facebook, n\u00f3s temos milhares de componentes escritos em React e n\u00f3s absolutamente n\u00e3o temos planos de reescrev\u00ea-los. Em vez disso, n\u00f3s estamos come\u00e7ando a usar Hooks em c\u00f3digo novo, lado a lado com classes.</p>\n<h2 id=\"frequently-asked-questions\"><a class=\"anchor\" href=\"/react/hooks-intro#frequently-asked-questions\"></a>Perguntas Frequentes </h2>\n<p>N\u00f3s preparamos uma <a href=\"/react/hooks-faq\">p\u00e1gina de Perguntas Frequentes sobre Hooks</a> que respondem \u00e0s perguntas mais comuns sobre Hooks.</p>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-intro#next-steps\"></a>Pr\u00f3ximos Passos </h2>\n<p>Ao final desta p\u00e1gina, voc\u00ea dever\u00e1 ter uma ideia aproximada de quais problemas <em>Hooks</em> est\u00e3o resolvendo, mas muitos detalhes provavelmente n\u00e3o est\u00e3o claros. N\u00e3o se preocupe! <strong>Vamos agora para a <a href=\"/react/hooks-overview\">pr\u00f3xima p\u00e1gina</a> onde n\u00f3s iremos aprender sobre <em>Hooks</em> com exemplos.</strong></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/hooks-intro.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-intro", "nav": ["/react/glossary", "/react/hooks-overview"]}, {"key": "2. Hooks de Forma Resumida", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><em>Hooks</em> s\u00e3o uma nova adi\u00e7\u00e3o no React 16.8. Eles permitem que voc\u00ea use o state e outros recursos do React sem escrever uma classe.</p>\n<p>Hooks s\u00e3o <a href=\"/react/hooks-intro#no-breaking-changes\">retrocompat\u00edveis</a>. Esta p\u00e1gina fornece uma vis\u00e3o geral de Hooks para usu\u00e1rios experientes em React. Esta \u00e9 uma vis\u00e3o geral r\u00e1pida. Se voc\u00ea se sentir confuso, procure uma caixa amarela com esta:</p>\n<div class=\"blockquote\">\n<strong>Explica\u00e7\u00e3o Detalhada</strong>\n<p>Leia a <a href=\"/react/hooks-intro#motivation\">Motiva\u00e7\u00e3o</a> para entender porque estamos introduzindo Hooks para o React.</p>\n</div>\n<p><strong>\u2191\u2191\u2191 Cada se\u00e7\u00e3o termina com uma caixa amarela como esta.</strong> Elas linkam para explica\u00e7\u00f5es detalhadas.</p>\n<h2 id=\"state-hook\"><a class=\"anchor\" href=\"/react/hooks-overview#state-hook\"></a>\ud83d\udccc State Hook </h2>\n<p>Este exemplo renderiza um contador. Quando voc\u00ea clica no bot\u00e3o, ele incrementa o valor:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declara uma nova vari\u00e1vel de state, que chamaremos de \"count\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Clique aqui</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aqui, <code class=\"language-javascript\">useState</code> \u00e9 um <em>Hook</em> (n\u00f3s vamos falar sobre o que isso significa em instantes). N\u00f3s o chamamos dentro de um componente funcional para adicionar alguns states locais a ele. React ir\u00e1 preservar este state entre re-renderiza\u00e7\u00f5es. <code class=\"language-javascript\">useState</code> retorna um par: o valor do state <em>atual</em> e uma fun\u00e7\u00e3o que permite atualiz\u00e1-lo. Voc\u00ea pode chamar essa fun\u00e7\u00e3o a partir de um manipulador de evento ou de qualquer outro lugar. \u00c9 parecido com <code class=\"language-javascript\">this.setState</code> em uma classe, exceto que n\u00e3o mescla o antigo state com o novo. (N\u00f3s iremos mostrar um exemplo comparando <code class=\"language-javascript\">useState</code> com <code class=\"language-javascript\">this.state</code> em <a href=\"/react/hooks-state\">Utilizando o State Hook</a>.)</p>\n<p>O \u00fanico argumento para <code class=\"language-javascript\">useState</code> \u00e9 o state inicial. No exemplo acima, \u00e9 <code class=\"language-javascript\">0</code> porque nosso contador come\u00e7a do zero. Perceba que diferente de <code class=\"language-javascript\">this.state</code>, o state n\u00e3o precisa ser um objeto \u2014 apesar de que possa ser se voc\u00ea quiser. O argumento de state inicial \u00e9 utilizado apenas durante a primeira renderiza\u00e7\u00e3o.</p>\n<h4 id=\"declaring-multiple-state-variables\"><a class=\"anchor\" href=\"/react/hooks-overview#declaring-multiple-state-variables\"></a>Declarando m\u00faltiplas vari\u00e1veis de state </h4>\n<p>Voc\u00ea pode utilizar o State Hook mais de uma vez em um \u00fanico componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ExampleWithManyStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Declara v\u00e1rias vari\u00e1veis de state!</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Learn Hooks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A sintaxe de <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring\">desestrutura\u00e7\u00e3o de arrays</a> nos permite atribuir diferentes nomes para as vari\u00e1veis de state que declaramos chamando <code class=\"language-javascript\">useState</code>. Esses nomes n\u00e3o fazem parte da API <code class=\"language-javascript\">useState</code>. Em vez disso, React presume que se voc\u00ea chamar <code class=\"language-javascript\">useState</code> muitas vezes, voc\u00ea faz isso na mesma ordem a cada renderiza\u00e7\u00e3o. Mais tarde, voltaremos no porqu\u00ea disso funcionar e quando ser\u00e1 \u00fatil.</p>\n<h4 id=\"but-what-is-a-hook\"><a class=\"anchor\" href=\"/react/hooks-overview#but-what-is-a-hook\"></a>Mas, o que \u00e9 um Hook? </h4>\n<p>Hooks s\u00e3o fun\u00e7\u00f5es que permitem a voc\u00ea \u201cligar-se\u201d aos recursos de state e ciclo de vida do React a partir de componentes funcionais. Hooks n\u00e3o funcionam dentro de classes \u2014 eles permitem que voc\u00ea use React sem classes. (N\u00f3s <a href=\"/react/hooks-intro#gradual-adoption-strategy\">n\u00e3o recomendamos</a> reescrever seus componentes j\u00e1 existentes de um dia para o outro, mas voc\u00ea pode come\u00e7ar a usar Hooks nos novos se voc\u00ea quiser.)</p>\n<p>React fornece alguns Hooks internos como <code class=\"language-javascript\">useState</code>. Voc\u00ea tamb\u00e9m pode criar os seus pr\u00f3prios Hooks para reutilizar o comportamento de state entre componentes diferentes. Vamos dar uma olhada nos Hooks internos primeiramente.</p>\n<div class=\"blockquote\">\n<strong>Explica\u00e7\u00e3o Detalhada</strong>\n<p>Voc\u00ea pode aprender mais sobre State Hook em sua p\u00e1gina dedicada: <a href=\"/react/hooks-state\">Utilizando o State Hook</a>.</p>\n</div>\n<h2 id=\"effect-hook\"><a class=\"anchor\" href=\"/react/hooks-overview#effect-hook\"></a>\u26a1\ufe0f Hook de Efeito </h2>\n<p>Voc\u00ea provavelmente j\u00e1 realizou obten\u00e7\u00e3o de dados (data fetching), subscri\u00e7\u00f5es (subscriptions) ou mudan\u00e7as manuais no DOM atrav\u00e9s de componentes React antes. N\u00f3s chamamos essas opera\u00e7\u00f5es de \u201cefeitos colaterais\u201d (side effects ou apenas effects) porque eles podem afetar outros componentes e n\u00e3o podem ser feitos durante a renderiza\u00e7\u00e3o.</p>\n<p>O Hook de Efeito, <code class=\"language-javascript\">useEffect</code>, adiciona a funcionalidade de executar efeitos colaterais atrav\u00e9s de um componente funcional. Segue a mesma finalidade do <code class=\"language-javascript\">componentDidMount</code>, <code class=\"language-javascript\">componentDidUpdate</code>, e <code class=\"language-javascript\">componentWillUnmount</code> em classes React, mas unificado em uma mesma API. (N\u00f3s mostraremos exemplos comparando <code class=\"language-javascript\">useEffect</code> com esses m\u00e9todos em <a href=\"/react/hooks-effect\">Utilizando o Hook de Efeito</a>.)</p>\n<p>Por exemplo, este componente define o t\u00edtulo da p\u00e1gina ap\u00f3s o React atualizar o DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Similar a componentDidMount e componentDidUpdate:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Atualiza o t\u00edtulo do documento utilizando a API do navegador</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Clique aqui</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando voc\u00ea chama <code class=\"language-javascript\">useEffect</code>, voc\u00ea est\u00e1 dizendo ao React para executar a sua fun\u00e7\u00e3o de \u201cefeito\u201d ap\u00f3s liberar as mudan\u00e7as para o DOM. Efeitos s\u00e3o declarados dentro do componente, para que eles tenham acesso as suas props e state. Por padr\u00e3o, React executa os efeitos ap\u00f3s cada renderiza\u00e7\u00e3o \u2014 <em>incluindo</em> a primeira renderiza\u00e7\u00e3o. (Falaremos mais sobre como isso se compara aos ciclos de vida das classes em <a href=\"/react/hooks-effect\">Utilizando o Hook de Efeito</a>.)</p>\n<p>Efeitos tamb\u00e9m podem opcionalmente especificar como \u201climpar\u201d (clean up) retornando uma fun\u00e7\u00e3o ap\u00f3s a execu\u00e7\u00e3o deles. Por exemplo, este componente utiliza um efeito para se subscrever ao status online de um amigo e limpa-se (clean up) cancelando a sua subscri\u00e7\u00e3o:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Neste exemplo, o React cancelaria a subscri\u00e7\u00e3o da nossa <code class=\"language-javascript\">ChatAPI</code> quando o componente se desmontar, e tamb\u00e9m antes de reexecutar o efeito devido a uma renderiza\u00e7\u00e3o subsequente. (Se voc\u00ea quiser, h\u00e1 uma maneira de <a href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\">dizer ao React para ignorar a nova subscri\u00e7\u00e3o</a> se o <code class=\"language-javascript\">props.friend.id</code> que passamos para <code class=\"language-javascript\">ChatAPI</code> n\u00e3o tiver mudado.)</p>\n<p>Assim como <code class=\"language-javascript\">useState</code>, voc\u00ea pode utilizar mais de um efeito em um componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatusWithCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Hooks permitem a voc\u00ea organizar efeitos colaterais <em>(side effects)</em> em um componente por partes relacionadas (como adicionar e remover uma subscri\u00e7\u00e3o), em vez de for\u00e7ar uma divis\u00e3o baseada nos m\u00e9todos de ciclo de vida.</p>\n<div class=\"blockquote\">\n<strong>Explica\u00e7\u00e3o Detalhada</strong>\n<p>Voc\u00ea pode aprender mais sobre <code class=\"language-javascript\">useEffect</code> na sua p\u00e1gina dedicada: <a href=\"/react/hooks-effect\">Utilizando o Hook de Efeito</a>.</p>\n</div>\n<h2 id=\"rules-of-hooks\"><a class=\"anchor\" href=\"/react/hooks-overview#rules-of-hooks\"></a>\u270c\ufe0f Regras dos Hooks </h2>\n<p>Hooks s\u00e3o fun\u00e7\u00f5es JavaScript, mas eles imp\u00f5es duas regras adicionais:</p>\n<ul>\n<li>Apenas chame Hooks <strong>no n\u00edvel mais alto</strong>. N\u00e3o chame Hooks dentro de loops, condi\u00e7\u00f5es ou fun\u00e7\u00f5es aninhadas.</li>\n<li>Apenas chame Hooks <strong>de componentes funcionais</strong>. N\u00e3o chame Hooks de fun\u00e7\u00f5es JavaScript comuns. (H\u00e1 apenas um outro lugar v\u00e1lido para se chamar Hooks \u2014 dentro dos seus pr\u00f3prios Hooks customizados. Iremos aprender sobre eles em breve.)</li>\n</ul>\n<p>N\u00f3s fornecemos um <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">plugin de linter</a> para assegurar essas regras automaticamente. Entendemos que essas regras podem parecer limitantes ou confusas a princ\u00edpio, mas s\u00e3o essenciais para fazer com que os Hooks funcionem bem.</p>\n<div class=\"blockquote\">\n<strong>Explica\u00e7\u00e3o Detalhada</strong>\n<p>Voc\u00ea pode aprender mais sobre essas regras na sua p\u00e1gina dedicada: <a href=\"/react/hooks-rules\">Regras dos Hooks</a>.</p>\n</div>\n<h2 id=\"building-your-own-hooks\"><a class=\"anchor\" href=\"/react/hooks-overview#building-your-own-hooks\"></a>\ud83d\udca1 Construindo Seus Pr\u00f3prios Hooks </h2>\n<p>\u00c0s vezes, queremos reutilizar algumas l\u00f3gicas de state entre componentes. Tradicionalmente, haviam duas solu\u00e7\u00f5es populares para este problema: <a href=\"/react/higher-order-components\">componentes de ordem superior</a> e <a href=\"/react/render-props\">renderiza\u00e7\u00e3o de props</a>. Hooks Customizados te permitem fazer isso, mas sem adicionar mais componentes para a sua \u00e1rvore.</p>\n<p>Anteriormente nesta p\u00e1gina, n\u00f3s introduzimos um componente <code class=\"language-javascript\">FriendStatus</code> que chama os Hooks <code class=\"language-javascript\">useState</code> e <code class=\"language-javascript\">useEffect</code> para subscrever-se ao status de online de um amigo. Digamos que tamb\u00e9m precisaremos reutilizar essa l\u00f3gica de subscri\u00e7\u00e3o em outro componente.</p>\n<p>Primeiramente, iremos extrair esta l\u00f3gica para um Hook customizado chamado <code class=\"language-javascript\">useFriendStatus</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Que recebe <code class=\"language-javascript\">friendID</code> como um argumento, e sempre retorna se nosso amigo est\u00e1 online.</p>\n<p>Agora podemos utilizar a partir dos dois componentes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O estado (state) de cada componente \u00e9 completamente independente. Hooks s\u00e3o a forma de reutilizar <em>l\u00f3gica de state</em>, n\u00e3o o state em si. De fato, cada <em>chamada</em> para um Hook tem um state completamente isolado \u2014 ent\u00e3o voc\u00ea pode at\u00e9 utilizar o mesmo Hook custom duas vezes em um componente.</p>\n<p>Hooks customizados s\u00e3o mais uma conven\u00e7\u00e3o do que uma funcionalidade. Se o nome de uma fun\u00e7\u00e3o come\u00e7a com \u201d<code class=\"language-javascript\">use</code>\u201d e chama outros Hooks, consideramos que \u00e9 um Hook customizado. A conven\u00e7\u00e3o de nome <code class=\"language-javascript\">useSomething</code> \u00e9 como nosso plugin de linter \u00e9 capaz de encontrar bugs no nosso c\u00f3digo que utiliza Hooks.</p>\n<p>Voc\u00ea pode escrever Hooks customizados que abrangem uma ampla gama de casos de uso, como manipula\u00e7\u00e3o de formul\u00e1rios, anima\u00e7\u00f5es, subscri\u00e7\u00f5es declarativas, temporizadores e provavelmente muitos outros que n\u00e3o consideramos. Estamos animados para ver quais Hooks customizados a comunidade React ir\u00e1 criar.</p>\n<div class=\"blockquote\">\n<strong>Explica\u00e7\u00e3o Detalhada</strong>\n<p>Voc\u00ea pode aprender mais sobre Hooks Customizados na sua p\u00e1gina dedicada: <a href=\"/react/hooks-custom\">Construindo Seus Pr\u00f3prios Hooks</a>.</p>\n</div>\n<h2 id=\"other-hooks\"><a class=\"anchor\" href=\"/react/hooks-overview#other-hooks\"></a>\ud83d\udd0c Outros Hooks </h2>\n<p>Existem alguns Hooks internos menos utilizados que voc\u00ea pode achar \u00fateis. Por exemplo, <a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a> permite subscrever-se para o context do React sem adicionar aninhamento:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> locale <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>LocaleContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> permite gerenciar state local de componentes complexos com um reducer:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// ...</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Explica\u00e7\u00e3o Detalhada</strong>\n<p>Voc\u00ea pode aprender mais sobre todos os Hooks internos na sua p\u00e1gina dedicada: <a href=\"/react/hooks-reference\">Refer\u00eancia da API de Hooks</a>.</p>\n</div>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-overview#next-steps\"></a>Pr\u00f3ximos Passos </h2>\n<p>Ufa, essa foi r\u00e1pida! Se algumas coisas n\u00e3o fizeram sentido ou se voc\u00ea quiser aprender mais detalhes, voc\u00ea pode ler as pr\u00f3ximas p\u00e1ginas, come\u00e7ando com a documenta\u00e7\u00e3o de <a href=\"/react/hooks-state\">State Hook</a>.</p>\n<p>Voc\u00ea tamb\u00e9m pode conferir a <a href=\"/react/hooks-reference\">Refer\u00eancia de API de Hooks </a> e o <a href=\"/react/hooks-faq\">FAQ de Hooks</a>.</p>\n<p>Por fim, n\u00e3o perca a <a href=\"/react/hooks-intro\">p\u00e1gina de introdu\u00e7\u00e3o</a> que explica <em>porque</em> estamos adicionando Hooks e como iremos come\u00e7ar a utiliz\u00e1-los lado a lado com as classes \u2014 sem reescrever os nossos apps.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/hooks-overview.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-overview", "nav": ["/react/hooks-intro", "/react/hooks-state"]}, {"key": "3. Usando State Hook", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><em>Hooks</em> s\u00e3o uma nova adi\u00e7\u00e3o ao React 16.8. Eles permitem que voc\u00ea use o state e outros recursos do React sem escrever uma classe.</p>\n<p>A <a href=\"/react/hooks-intro\">p\u00e1gina de introdu\u00e7\u00e3o</a> usou este exemplo para familiarizar com Hooks:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declarar uma nova vari\u00e1vel de state, na qual chamaremos de \"count\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Clique aqui</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vamos come\u00e7ar a aprender sobre Hooks comparando este c\u00f3digo com um exemplo equivalente utilizando classe.</p>\n<h2 id=\"equivalent-class-example\"><a class=\"anchor\" href=\"/react/hooks-state#equivalent-class-example\"></a>Exemplo Equivalente com Classe </h2>\n<p>Se voc\u00ea j\u00e1 usou classes no React, este c\u00f3digo deve parecer familiar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          Clique aqui\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O state come\u00e7a como <code class=\"language-javascript\">{ count: 0 }</code>, e aumentamos o <code class=\"language-javascript\">state.count</code> chamando <code class=\"language-javascript\">this.setState()</code> quando o usu\u00e1rio clica no bot\u00e3o. Vamos utilizar trechos dessa classe ao longo da p\u00e1gina.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Voc\u00ea pode estar se perguntando porque estamos usando um counter aqui ao inv\u00e9s de um exemplo mais realista. Isto \u00e9 pra nos ajudar a focar na API enquanto ainda damos os primeiros passos com Hooks.</p>\n</div>\n<h2 id=\"hooks-and-function-components\"><a class=\"anchor\" href=\"/react/hooks-state#hooks-and-function-components\"></a>Hooks e Componentes de Fun\u00e7\u00e3o </h2>\n<p>Para lembrar, componentes de fun\u00e7\u00e3o, no React, se parecem com isto:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Voc\u00ea pode usar Hooks aqui!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ou isto:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Voc\u00ea pode usar Hooks aqui!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voc\u00ea pode ter conhecido estes exemplos como \u201ccomponentes sem estado\u201d. N\u00f3s estamos introduzindo a habilidade de utilizar o state do React neles, portanto preferimos o nome \u201ccomponentes de fun\u00e7\u00e3o\u201d.</p>\n<p>Hooks <strong>n\u00e3o</strong> funcionam dentro de classes. Mas voc\u00ea pode us\u00e1-los em vez de escrever classes.</p>\n<h2 id=\"whats-a-hook\"><a class=\"anchor\" href=\"/react/hooks-state#whats-a-hook\"></a>O que \u00e9 um Hook? </h2>\n<p>Nosso novo exemplo come\u00e7a importando o <code class=\"language-javascript\">useState</code> Hook do React:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>O que \u00e9 um Hook?</strong> Um Hook \u00e9 uma fun\u00e7\u00e3o especial que te permite utilizar recursos do React. Por exemplo, <code class=\"language-javascript\">useState</code> \u00e9 um Hook que te permite adicionar o state do React a um componente de fun\u00e7\u00e3o. Vamos aprender outros Hooks mais tarde.</p>\n<p><strong>Quando eu deveria usar um Hook?</strong> Se voc\u00ea escreve um componente de fun\u00e7\u00e3o e percebe que precisa adicionar algum state para ele, anteriormente voc\u00ea tinha que convert\u00ea-lo para uma classe. Agora voc\u00ea pode usar um Hook dentro de um componente de fun\u00e7\u00e3o existente. Vamos fazer isso agora mesmo!</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Existem algumas regras especiais sobre onde voc\u00ea pode ou n\u00e3o utilizar Hooks dentro de um componente. Vamos aprender elas nas <a href=\"/react/hooks-rules\">Regras dos Hooks</a>.</p>\n</div>\n<h2 id=\"declaring-a-state-variable\"><a class=\"anchor\" href=\"/react/hooks-state#declaring-a-state-variable\"></a>Declarando uma Vari\u00e1vel State </h2>\n<p>Em uma classe, inicializamos o state <code class=\"language-javascript\">count</code> para <code class=\"language-javascript\">0</code> definindo <code class=\"language-javascript\">this.state</code> para <code class=\"language-javascript\">{ count: 0 }</code> no construtor:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      count<span class=\"token operator\">:</span> <span class=\"token number\">0</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Em um componente de fun\u00e7\u00e3o, n\u00e3o temos <code class=\"language-javascript\">this</code>, portanto n\u00e3o podemos definir ou ler <code class=\"language-javascript\">this.state</code>. Em vez disso, chamamos o Hook <code class=\"language-javascript\">useState</code> dentro do nosso component:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declarar uma nova vari\u00e1vel de state, na qual chamaremos de \"count\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><strong>O que o <code class=\"language-javascript\">useState</code> faz?</strong> Ele declara um vari\u00e1vel state. Nossa vari\u00e1vel \u00e9 chamada de <code class=\"language-javascript\">count</code> mas poder\u00edamos chamar de qualquer coisa, como <code class=\"language-javascript\">banana</code>. Esta \u00e9 uma maneira de \u201cpreservar\u201d alguns valores entre as chamadas de fun\u00e7\u00f5es \u2014 <code class=\"language-javascript\">useState</code> \u00e9 uma nova maneira de usar as mesmas capacidades que o <code class=\"language-javascript\">this.state</code> tem em uma classe. Normalmente, vari\u00e1veis \u201cdesaparecem\u201d quando a fun\u00e7\u00e3o sai mas vari\u00e1veis de state s\u00e3o preservadas pelo React.</p>\n<p><strong>O que passamos para o <code class=\"language-javascript\">useState</code> como argumento?</strong> O \u00fanico argumento para o Hook <code class=\"language-javascript\">useState()</code> \u00e9 o state inicial. Diferente de classes, o state n\u00e3o tem que ser um objeto. Podemos manter um n\u00famero ou uma string se for tudo que precisamos. No nosso exemplo, apenas queremos um n\u00famero para quantas vezes o usu\u00e1rio clicou, ent\u00e3o passamos 0 como state inicial para nossa vari\u00e1vel. (Se quis\u00e9ssemos guardar dois valores diferentes no state, chamar\u00edamos <code class=\"language-javascript\">useState()</code> duas vezes.)</p>\n<p><strong>O que <code class=\"language-javascript\">useState</code> retorna?</strong> Ele retorna um par de valores: o state atual e uma fun\u00e7\u00e3o que atualiza o state. \u00c9 por isso que escrevemos <code class=\"language-javascript\">const [count, setCount] = useState()</code>. Isto \u00e9 similar ao <code class=\"language-javascript\">this.state.count</code> e <code class=\"language-javascript\">this.setState</code> em uma classe, exceto o fato de peg\u00e1-los em par. Se voc\u00ea n\u00e3o est\u00e1 familiarizado com a sintaxe que usamos, vamos voltar nisso <a href=\"/react/hooks-state#tip-what-do-square-brackets-mean\">no final dessa p\u00e1gina</a>.</p>\n<p>Agora que sabemos o que o Hook <code class=\"language-javascript\">useState</code> faz, nosso exemplo deve fazer mais sentido:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declarar uma nova vari\u00e1vel de state, na qual chamaremos de \"count\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>N\u00f3s declaramos uma vari\u00e1vel state chamada <code class=\"language-javascript\">count</code> e definimos ela para 0. O React vai lembrar o valor atual entre cada re-renderiza\u00e7\u00e3o e fornecer o valor mais recente para nossa fun\u00e7\u00e3o. Se quisermos atualizar o <code class=\"language-javascript\">count</code> atual, podemos chamar <code class=\"language-javascript\">setCount</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Voc\u00ea pode estar se perguntando: Por que \u00e9 chamado <code class=\"language-javascript\">useState</code> ao inv\u00e9s de <code class=\"language-javascript\">createState</code>?</p>\n<p>\u201cCreate\u201d n\u00e3o seria muito preciso porque o state \u00e9 criado apenas na primeira vez que nosso componente renderiza. Durante as pr\u00f3ximas renderiza\u00e7\u00f5es, <code class=\"language-javascript\">useState</code> nos da o state atual. Caso contr\u00e1rio, n\u00e3o seria \u201cstate\u201d de qualquer maneira! Tamb\u00e9m tem outro motivo pelo qual nomes de Hook sempre come\u00e7am com <code class=\"language-javascript\">use</code>. Vamos aprender o porque depois, nas <a href=\"/react/hooks-rules\">Regras dos Hooks</a>.</p>\n</div>\n<h2 id=\"reading-state\"><a class=\"anchor\" href=\"/react/hooks-state#reading-state\"></a>Lendo o State </h2>\n<p>Quando queremos mostrar o count atual em classe, lemos <code class=\"language-javascript\">this.state.count</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Em uma fun\u00e7\u00e3o, podemos usar <code class=\"language-javascript\">count</code> diretamente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h2 id=\"updating-state\"><a class=\"anchor\" href=\"/react/hooks-state#updating-state\"></a>Atualizando o State </h2>\n<p>Em uma classe, podemos chamar <code class=\"language-javascript\">this.setState()</code> para atualizar o state <code class=\"language-javascript\">count</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    Clique aqui</span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Na fun\u00e7\u00e3o, j\u00e1 temos <code class=\"language-javascript\">setCount</code> e <code class=\"language-javascript\">count</code> como vari\u00e1veis ent\u00e3o n\u00e3o precisamos do <code class=\"language-javascript\">this</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    Clique aqui</span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h2 id=\"recap\"><a class=\"anchor\" href=\"/react/hooks-state#recap\"></a>Recapitula\u00e7\u00e3o </h2>\n<p>Vamos <strong>recapitular o que aprendemos linha por linha</strong> e checar nosso entendimento.</p>\n<!--\n  I'm not proud of this line markup. Please somebody fix this.\n  But if GitHub got away with it for years we can cheat.\n-->\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">1</span><span class=\"token operator\">:</span>  <span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n <span class=\"token number\">3</span><span class=\"token operator\">:</span>  <span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">4</span><span class=\"token operator\">:</span>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n <span class=\"token number\">6</span><span class=\"token operator\">:</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n <span class=\"token number\">7</span><span class=\"token operator\">:</span>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"> 8:        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\"> 9:        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">10:         Clique aqui</span>\n<span class=\"token plain-text\">11:        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">12:      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token number\">13</span><span class=\"token operator\">:</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">14</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>Linha 1:</strong> Importamos o Hook <code class=\"language-javascript\">useState</code> do React. Ele nos permite manter o state local em um componente de fun\u00e7\u00e3o.</li>\n<li><strong>Linha 4:</strong> Dentro do componente <code class=\"language-javascript\">Example</code>, declaramos uma nova vari\u00e1vel de state chamando o Hook <code class=\"language-javascript\">useState</code>. Ele retorna um par de valores, no qual damos nomes. Estamos chamando nossa vari\u00e1vel <code class=\"language-javascript\">count</code> porque ela mant\u00e9m o n\u00famero de cliques no bot\u00e3o. Inicializamos como zero passando <code class=\"language-javascript\">0</code> como o \u00fanico argumento do <code class=\"language-javascript\">useState</code>. O segundo item retornado \u00e9 a pr\u00f3pria fun\u00e7\u00e3o. Ela nos permite atualizar o <code class=\"language-javascript\">count</code> ent\u00e3o nomeamos para <code class=\"language-javascript\">setCount</code>.</li>\n<li><strong>Linha 9:</strong> Quando o usu\u00e1rio clica, chamamos <code class=\"language-javascript\">setCount</code> com um novo valor. O React ent\u00e3o vai re-renderizar o componente <code class=\"language-javascript\">Example</code>, passando o novo valor de <code class=\"language-javascript\">count</code> para ele.</li>\n</ul>\n<p>\u00c0 primeira vista pode parecer muita coisa. N\u00e3o se apresse! Se voc\u00ea est\u00e1 perdido na explica\u00e7\u00e3o, olhe o c\u00f3digo acima novamente e tente l\u00ea-lo de uma ponta a outra. Prometemos que a partir do momento que voc\u00ea \u201cesquecer\u201d como state funciona em classes e olhar este c\u00f3digo com novos olhos ir\u00e1 fazer sentido.</p>\n<h3 id=\"tip-what-do-square-brackets-mean\"><a class=\"anchor\" href=\"/react/hooks-state#tip-what-do-square-brackets-mean\"></a>Dica: O que os Colchetes Significam? </h3>\n<p>Voc\u00ea pode ter percebido os colchetes quando declaramos a vari\u00e1vel state:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Os nomes na esquerda n\u00e3o s\u00e3o parte da API do React. Voc\u00ea pode nomear suas pr\u00f3prias vari\u00e1veis <code class=\"language-javascript\">state</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esta sintaxe do JavaScript \u00e9 chamada de <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Atribuicao_via_desestruturacao\">\u201catribui\u00e7\u00e3o via desestrutura\u00e7\u00e3o\u201d</a>. Significa que estamos fazendo duas novas vari\u00e1veis <code class=\"language-javascript\">fruit</code> e <code class=\"language-javascript\">setFruit</code>, onde <code class=\"language-javascript\">fruit</code> \u00e9 definido para o primeiro valor retornado por <code class=\"language-javascript\">useState</code>, e <code class=\"language-javascript\">setFruit</code> \u00e9 o segundo. \u00c9 equivalente a este c\u00f3digo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> fruitStateVariable <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Retorna um par</span>\n  <span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> fruitStateVariable<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Primeiro item do par</span>\n  <span class=\"token keyword\">var</span> setFruit <span class=\"token operator\">=</span> fruitStateVariable<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Segundo item do par</span></code></pre></div>\n<p>Quando declaramos uma vari\u00e1vel com <code class=\"language-javascript\">useState</code>, ela retorna um par \u2014 um array com dois itens. O primeiro item \u00e9 o valor atual e o segundo \u00e9 uma fun\u00e7\u00e3o que nos permite atualiz\u00e1-la. Usar <code class=\"language-javascript\">[0]</code> e <code class=\"language-javascript\">[1]</code> para acess\u00e1-las \u00e9 um pouco confuso porque elas tem um significado espec\u00edfico. \u00c9 por isto que utilizamos atribui\u00e7\u00e3o via desestrutura\u00e7\u00e3o no lugar.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Voc\u00ea pode estar curioso como o React sabe qual componente o <code class=\"language-javascript\">useState</code> corresponde j\u00e1 que n\u00e3o passamos nada como <code class=\"language-javascript\">this</code> para o React. Vamos responder <a href=\"/react/hooks-faq#how-does-react-associate-hook-calls-with-components\">esta pergunta</a> e muitas outras na se\u00e7\u00e3o FAQ.</p>\n</div>\n<h3 id=\"tip-using-multiple-state-variables\"><a class=\"anchor\" href=\"/react/hooks-state#tip-using-multiple-state-variables\"></a>Dica: Usando M\u00faltiplas Vari\u00e1veis State </h3>\n<p>Declarar vari\u00e1veis de state como par de <code class=\"language-javascript\">[something, setSomething]</code> tamb\u00e9m \u00e9 \u00fatil porque nos permite dar <em>diferentes</em> nomes para diferentes vari\u00e1veis de state se quis\u00e9ssemos usar mais de uma:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ExampleWithManyStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Declarar m\u00faltiplas vari\u00e1veis de state!</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Aprender Hooks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No componente acima, temos <code class=\"language-javascript\">age</code>, <code class=\"language-javascript\">fruit</code> e <code class=\"language-javascript\">todos</code> como vari\u00e1veis locais e podemos atualiz\u00e1-las individualmente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">handleOrangeClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Similar ao this.setState({ fruit: 'orange' })</span>\n    <span class=\"token function\">setFruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voc\u00ea <strong>n\u00e3o tem que</strong> usar muitas vari\u00e1veis de state. Elas podem conter objetos e arrays muito bem. Portanto voc\u00ea ainda pode juntar dados relacionados. De qualquer maneira, diferente de <code class=\"language-javascript\">this.setState</code> em classe, ao atualizar uma vari\u00e1vel de state, ela sempre \u00e9 <em>substitu\u00edda</em> ao inv\u00e9s de incorporada.</p>\n<p>Damos mais recomenda\u00e7\u00f5es em separa\u00e7\u00e3o de vari\u00e1veis de state independentes <a href=\"/react/hooks-faq#should-i-use-one-or-many-state-variables\">no FAQ</a>.</p>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-state#next-steps\"></a>Pr\u00f3ximos Passos </h2>\n<p>Nesta p\u00e1gina aprendemos sobre um dos Hooks fornecido pelo React, chamado <code class=\"language-javascript\">useState</code>. Tamb\u00e9m, em algumas vezes, vamos nos referir como o \u201cState do Hook\u201d. Ele nos permite adicionar um state local a um componente de fun\u00e7\u00e3o \u2014 o que fizemos pela primeira vez!</p>\n<p>Tamb\u00e9m aprendemos um pouco mais sobre o que s\u00e3o Hooks. Hooks s\u00e3o fun\u00e7\u00f5es que permitem que voc\u00ea utilize recursos do React em componentes de fun\u00e7\u00e3o. Seus nomes sempre come\u00e7am com <code class=\"language-javascript\">use</code>, e existem mais Hooks que n\u00e3o vimos ainda.</p>\n<p><strong>Agora vamos continuar <a href=\"/react/hooks-effect\">aprendendo o pr\u00f3ximo Hook: <code class=\"language-javascript\">useEffect</code>.</a></strong> Ele permite que voc\u00ea execute efeitos colaterais em um componente e \u00e9 similar ao m\u00e9todo de ciclo de vida em classes.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/hooks-state.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-state", "nav": ["/react/hooks-overview", "/react/hooks-effect"]}, {"key": "4. Usando Effect Hook", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><em>Hooks</em> s\u00e3o uma nova adi\u00e7\u00e3o ao React 16.8. Eles permitem que voc\u00ea use o state e outros recursos do React sem escrever uma classe.</p>\n<p>O <em>Effect Hook</em> (Hook de Efeito) te permite executar efeitos colaterais em componentes funcionais:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Exemplo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Similar ao componentDidMount e componentDidUpdate:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Atualiza o t\u00edtulo do documento usando a API do browser</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Clique aqui</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esse trecho de c\u00f3digo \u00e9 baseado no <a href=\"/react/hooks-state\">exemplo de contador da p\u00e1gina anterior</a>, mas n\u00f3s adicionamos uma nova funcionalidade a ele: n\u00f3s definimos o t\u00edtulo do documento para ser uma mensagem customizada que inclua o n\u00famero de cliques.</p>\n<p>Buscar dados, configurar uma subscription, e mudar o DOM manualmente dentro dos componentes React s\u00e3o exemplos de efeitos colaterais. Esteja voc\u00ea acostumado ou n\u00e3o a chamar essas opera\u00e7\u00f5es de \u201cefeitos colaterais\u201d (ou somente \u201cefeitos\u201d), voc\u00ea provavelmente j\u00e1 usou eles em seus componentes antes.</p>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Se voc\u00ea est\u00e1 familiarizado com os m\u00e9todos do ciclo de vida do React, voc\u00ea pode pensar no Hook <code class=\"language-javascript\">useEffect</code> como <code class=\"language-javascript\">componentDidMount</code>, <code class=\"language-javascript\">componentDidUpdate</code>, e <code class=\"language-javascript\">componentWillUnmount</code> combinados.</p>\n</div>\n<p>Existem dois tipos comuns de efeitos colaterais nos componentes React: aqueles que n\u00e3o precisam de limpeza, e aqueles que precisam. Vamos ver as suas diferen\u00e7as mais detalhadamente.</p>\n<h2 id=\"effects-without-cleanup\"><a class=\"anchor\" href=\"/react/hooks-effect#effects-without-cleanup\"></a>Efeitos Sem Limpeza </h2>\n<p>De vez em quando, n\u00f3s queremos <strong>executar algum c\u00f3digo adicional depois que o React atualizou a DOM.</strong> Requisi\u00e7\u00f5es, muta\u00e7\u00f5es manuais do DOM e log s\u00e3o exemplos comuns de efeitos que n\u00e3o precisam de limpeza. N\u00f3s dizemos isso porque podemos executa-los e imediatamente esquecer deles. Vamos comparar como classes e Hooks nos permitem expressar tais efeitos colaterais.</p>\n<h3 id=\"example-using-classes\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-classes\"></a>Exemplo Usando Classes </h3>\n<p>Em um componente de classe do React, o m\u00e9todo <code class=\"language-javascript\">render</code> n\u00e3o deve causar efeitos colaterais. Seria muito cedo \u2014 n\u00f3s geralmente queremos executar nossos efeitos <em>depois</em> que o React atualizou a DOM.</p>\n<p>Isso \u00e9 o porque nas classes do React, n\u00f3s colocamos efeitos dentro de <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentDidUpdate</code>. Voltando ao nosso exemplo, aqui est\u00e1 um componente de classe do React chamado contador que atualiza o t\u00edtulo logo ap\u00f3s o React faz as mudan\u00e7as na DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Exemplo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Click me</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note que <strong>n\u00f3s temos que duplicar o c\u00f3digo entre esses dois m\u00e9todos do ciclo de vida na classe.</strong></p>\n<p>Isso acontece porque em muitos casos n\u00f3s queremos executar o mesmo efeito colateral n\u00e3o importando se o componente acabou de ser montado ou foi atualizado. Conceitualmente, n\u00f3s queremos que isso aconte\u00e7a em cada renderiza\u00e7\u00e3o \u2014 mas componentes de classe do React n\u00e3o tem um m\u00e9todo assim. N\u00f3s poder\u00edamos extrair um m\u00e9todo separado mas ainda assim ter\u00edamos que cham\u00e1-lo em dois lugares.</p>\n<p>Agora vamos ver como podemos fazer a mesma coisa com o Hook <code class=\"language-javascript\">useEffect</code>.</p>\n<h3 id=\"example-using-hooks\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-hooks\"></a>Exemplo Usando Hooks </h3>\n<p>N\u00f3s j\u00e1 vimos esse exemplo no topo da p\u00e1gina, mas vamos dar uma olhada mais de perto:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Voc\u00ea clicou </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> vezes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Clique aqui</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>O que o <code class=\"language-javascript\">useEffect</code> faz?</strong> Usando esse Hook, voc\u00ea diz ao React que o componente precisa fazer algo apenas depois da renderiza\u00e7\u00e3o. O React ira se lembrar da fun\u00e7\u00e3o que voc\u00ea passou (nos referiremos a ele como nosso \u201cefeito\u201d), e cham\u00e1-la depois que realizar as atualiza\u00e7\u00f5es do DOM. Nesse efeito, mudamos o t\u00edtulo do documento, mas podemos tamb\u00e9m realizar busca de dados ou chamar alguma API imperativa.</p>\n<p><strong>Por que <code class=\"language-javascript\">useEffect</code> \u00e9 chamado dentro de um componente?</strong> Colocando <code class=\"language-javascript\">useEffect</code> dentro do componente nos permite acessar o state <code class=\"language-javascript\">count</code> (ou qualquer outra prop) direto do efeito. N\u00f3s n\u00e3o precisamos de uma API especial para l\u00ea-los \u2014 j\u00e1 est\u00e1 no escopo da fun\u00e7\u00e3o. Hooks adotam as closures do JavaScript e evitam APIs especificas do React onde o JavaScript j\u00e1 prov\u00ea uma solu\u00e7\u00e3o.</p>\n<p><strong><code class=\"language-javascript\">useEffect</code> executa depois de toda renderiza\u00e7\u00e3o?</strong> Sim! Por padr\u00e3o, ele roda depois da primeira renderiza\u00e7\u00e3o <em>e</em> depois de toda atualiza\u00e7\u00e3o. (Falaremos sobre <a href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\">como customizar isso</a> depois.) Em vez de pensar em termos de \u201cmontando\u201d (\u201cmounting\u201d) e \u201catualizando\u201d (\u201cupdating\u201d), voc\u00ea pode achar mais f\u00e1cil pensar que efeitos acontecem \u201cdepois da renderiza\u00e7\u00e3o\u201d. React garante que o DOM foi atualizado na hora de executar os efeitos.</p>\n<h3 id=\"detailed-explanation\"><a class=\"anchor\" href=\"/react/hooks-effect#detailed-explanation\"></a>Explica\u00e7\u00e3o detalhada</h3>\n<p>Agora que j\u00e1 sabemos mais sobre os efeitos, essas linhas devem fazer sentido:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Declaramos o state <code class=\"language-javascript\">count</code>, e ent\u00e3o dizemos ao React que precisamos usar um efeito. Passamos uma fun\u00e7\u00e3o para o Hook <code class=\"language-javascript\">useEffect</code>. Essa fun\u00e7\u00e3o que passamos <em>\u00e9</em> o nosso efeito. Dentro do nosso efeito, definimos o t\u00edtulo do documento usando <code class=\"language-javascript\">document.title</code> da API do navegador. Podemos ler o \u00faltimo <code class=\"language-javascript\">count</code> dentro do nosso efeito por que ele est\u00e1 dentro do escopo da nossa fun\u00e7\u00e3o. Quando o React renderizar nosso componente, ele ira se lembrar do efeito que usamos, e ent\u00e3o executar os nossos efeitos depois de atualizar o DOM. Isso acontece para cada renderiza\u00e7\u00e3o, incluindo a primeira.</p>\n<p>Desenvolvedores JavaScript experientes podem perceber que a fun\u00e7\u00e3o passada para o <code class=\"language-javascript\">useEffect</code> vai ser diferente a cada renderiza\u00e7\u00e3o. Isso \u00e9 intencional. Na verdade, isso \u00e9 o que nos deixa ler o valor de <code class=\"language-javascript\">count</code> de dentro do efeito sem nos preocuparmos com ele ficar obsoleto. Toda vez que n\u00f3s re-renderizarmos, agendamos um efeito <em>diferente</em>, substituindo o antigo. De uma maneira, isso faz os efeitos se comportarem mais como o resultado da renderiza\u00e7\u00e3o \u2014 cada efeito \u201cpertence\u201d \u00e0 sua renderiza\u00e7\u00e3o especifica. Vamos ver mais claramente como isso pode ser \u00fatil <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">depois, nessa p\u00e1gina</a>.</p>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Ao contr\u00e1rio de <code class=\"language-javascript\">componentDidMount</code> ou <code class=\"language-javascript\">componentDidUpdate</code>, efeitos agendados com  <code class=\"language-javascript\">useEffect</code> n\u00e3o bloqueiam o navegador a atualizar a tela. Isso faz seu app parecer mais responsivo. A grande parte dos efeitos n\u00e3o precisam acontecer de forma s\u00edncrona. Nos casos incomuns em que eles precisam (como medir o layout), existe um Hook <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a> separado com uma API id\u00eantica ao <code class=\"language-javascript\">useEffect</code>.</p>\n</div>\n<h2 id=\"effects-with-cleanup\"><a class=\"anchor\" href=\"/react/hooks-effect#effects-with-cleanup\"></a>Efeitos Com Limpeza </h2>\n<p>Anteriormente, n\u00f3s vimos como expressar efeitos colaterais que n\u00e3o precisam de limpeza. Contudo, alguns efeitos precisam. Por exemplo, <strong>n\u00f3s podemos querer configurar uma subscription</strong> para alguma origem de dados externa. Nesse caso, \u00e9 importante limpar para que n\u00e3o causemos um vazamento de mem\u00f3ria! Vamos comparar como far\u00edamos isso com classes e com Hooks.</p>\n<h3 id=\"example-using-classes-1\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-classes-1\"></a>Exemplo Usando Classes </h3>\n<p>Em uma classe React, geralmente voc\u00ea configura uma subscription no <code class=\"language-javascript\">componentDidMount</code>, e limpa no <code class=\"language-javascript\">componentWillUnmount</code>. Por exemplo, digamos que n\u00f3s temos um m\u00f3dulo <code class=\"language-javascript\">ChatAPI</code> que nos permite fazer um subscribe ao status de online de um amigo. Aqui esta como n\u00f3s poder\u00edamos fazer o subscribe e mostrar o status usando uma classe:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendStatus</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOnline<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      isOnline<span class=\"token operator\">:</span> status<span class=\"token punctuation\">.</span>isOnline</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Preste aten\u00e7\u00e3o como <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentWillUnmount</code> precisam espelhar um ao outro. M\u00e9todos do ciclo de vida nos for\u00e7am a dividir essa l\u00f3gica mesmo quando conceitualmente o c\u00f3digo dos dois \u00e9 relacionado ao mesmo efeito.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Leitores atentos talvez notem que esse exemplo tamb\u00e9m precisa de um m\u00e9todo <code class=\"language-javascript\">componentDidUpdate</code> para ficar totalmente correto. N\u00f3s ignoraremos isso por enquanto, mas voltaremos nisso em uma <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">sess\u00e3o mais abaixo</a> nessa p\u00e1gina.</p>\n</div>\n<h3 id=\"example-using-hooks-1\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-hooks-1\"></a>Exemplo Usando Hooks </h3>\n<p>Vamos ver como poder\u00edamos escrever esse componente usando Hooks.</p>\n<p>Voc\u00ea pode pensar que precisamos de um efeito separado para executarmos a limpeza. Mas o c\u00f3digo para adicionar e remover uma subscription \u00e9 t\u00e3o relacionado um com o outro que o <code class=\"language-javascript\">useEffect</code> foi desenhado para mant\u00ea-los juntos. Se o seu efeito retornar uma fun\u00e7\u00e3o, o React ir\u00e1 execut\u00e1-la quando for a hora de limpar:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Especifique como limpar depois desse efeito:</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Por que precisamos retornar uma fun\u00e7\u00e3o dos nossos efeitos?</strong> Isso \u00e9 um mecanismo opcional de limpeza para efeitos. Cada efeito pode retornar uma fun\u00e7\u00e3o que ir\u00e1 limpar depois dela. Isso nos permite manter a l\u00f3gica para adicionar e remover subscriptions perto uma da outra. Elas s\u00e3o parte do mesmo efeito!</p>\n<p><strong>Quando exatamente o React limpa um efeito?</strong> O React executa a limpeza quando o componente desmonta. Contudo, como aprendemos anteriormente, efeitos rodam em todas as renderiza\u00e7\u00f5es e n\u00e3o apenas uma vez. \u00c9 por isso que o React <em>tamb\u00e9m</em> limpa os efeitos da renderiza\u00e7\u00e3o anterior antes de rodar os efeitos da pr\u00f3xima vez. N\u00f3s discutiremos o <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">porqu\u00ea disso evitar bugs</a> e <a href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\">como podemos desabilitar esse comportamento caso isso cause problemas de performance</a> abaixo.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>N\u00f3s n\u00e3o precisamos retornar uma fun\u00e7\u00e3o nomeada do efeito. N\u00f3s chamamos de <code class=\"language-javascript\">cleanup</code> aqui apenas para esclarecer seu prop\u00f3sito, mas n\u00f3s podemos retornar uma arrow function ou chamarmos de qualquer coisa diferente.</p>\n</div>\n<h2 id=\"recap\"><a class=\"anchor\" href=\"/react/hooks-effect#recap\"></a>Recapitulando </h2>\n<p>N\u00f3s aprendemos que <code class=\"language-javascript\">useEffect</code> nos deixa expressar diferentes tipos de efeitos colaterais depois que o componente renderiza. Alguns efeitos podem requerer limpeza, ent\u00e3o eles retornam uma fun\u00e7\u00e3o:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Outros efeitos n\u00e3o precisam ter a fase de limpeza, e n\u00e3o retornam nada.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O Effect Hook unifica ambos casos com uma \u00fanica API.</p>\n\n<p><strong>Se voc\u00ea acha que tem um bom entendimento de como o Effect Hook funciona, ou se voc\u00ea se sente sobrecarregado, voc\u00ea j\u00e1 pode pular para a <a href=\"/react/hooks-rules\">pr\u00f3xima p\u00e1gina sobre as Regras dos Hooks</a>.</strong></p>\n\n<h2 id=\"tips-for-using-effects\"><a class=\"anchor\" href=\"/react/hooks-effect#tips-for-using-effects\"></a>Dicas para Usar Efeitos </h2>\n<p>Vamos continuar essa p\u00e1gina com um olhar mais aprofundado em alguns aspectos do <code class=\"language-javascript\">useEffect</code> sobre os quais alguns usu\u00e1rios mais experientes do React provavelmente ficar\u00e3o curiosos. N\u00e3o se sinta obrigado a se aprofundar neles agora. Voc\u00ea sempre pode voltar nessa p\u00e1gina para saber mais sobe o Effect Hook.</p>\n<h3 id=\"tip-use-multiple-effects-to-separate-concerns\"><a class=\"anchor\" href=\"/react/hooks-effect#tip-use-multiple-effects-to-separate-concerns\"></a>Dica: Use M\u00faltiplos Efeitos para Separar Preocupa\u00e7\u00f5es </h3>\n<p>Um dos problemas que n\u00f3s levantamos na <a href=\"/react/hooks-intro#complex-components-become-hard-to-understand\">Motiva\u00e7\u00e3o</a> dos Hooks era que os m\u00e9todos do ciclo de vida das classes muitas vezes continham l\u00f3gicas n\u00e3o relacionadas, mas as l\u00f3gicas relacionadas (entre si) estavam separadas em v\u00e1rios m\u00e9todos. Aqui temos um componente que combina o contador e o indicador de status de amizade dos exemplos anteriores:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendStatusWithCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> isOnline<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      isOnline<span class=\"token operator\">:</span> status<span class=\"token punctuation\">.</span>isOnline\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Note como a l\u00f3gica que define <code class=\"language-javascript\">document.title</code> esta dividida entre <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentDidUpdate</code>. A l\u00f3gica do subscription tamb\u00e9m esta dividida entre <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentWillUnmount</code>. E o <code class=\"language-javascript\">componentDidMount</code> cont\u00e9m c\u00f3digo das duas tarefas.</p>\n<p>Ent\u00e3o, como Hook resolvem esse problema? Assim como <a href=\"/react/hooks-state#tip-using-multiple-state-variables\">voc\u00ea pode usar o Hooks <em>State</em> mais de uma vez</a>, voc\u00ea tamb\u00e9m pode usar v\u00e1rios efeitos. Isso nos permite separar l\u00f3gicas n\u00e3o relacionadas em diferentes efeitos:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatusWithCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Hooks nos permitem dividir o c\u00f3digo com base no que ele est\u00e1 fazendo</strong> em vez de encaix\u00e1-lo em algum nome dos m\u00e9todos do ciclo de vida. React ir\u00e1 aplicar <em>todos</em> os efeitos usados por um componente, na ordem em que eles foram especificados.</p>\n<h3 id=\"explanation-why-effects-run-on-each-update\"><a class=\"anchor\" href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\"></a>Explica\u00e7\u00e3o: Por Que Efeitos Executam em Cada Atualiza\u00e7\u00e3o </h3>\n<p>Se voc\u00ea est\u00e1 acostumado com classes, voc\u00ea pode estar se perguntando o porqu\u00ea da fase de limpeza dos efeitos acontecerem depois de cada re-renderiza\u00e7\u00e3o, e n\u00e3o apenas uma vez durante a desmontagem. Vamos dar uma olhada em um exemplo pr\u00e1tico para ver porque esse design nos ajuda a criar componentes com menos bugs.</p>\n<p><a href=\"/react/hooks-effect#example-using-classes-1\">Anteriormente nessa p\u00e1gina</a>, n\u00f3s introduzimos um componente de exemplo <code class=\"language-javascript\">FriendStatus</code> que mostra quando um amigo est\u00e1 online ou n\u00e3o. Nossa classe l\u00ea <code class=\"language-javascript\">friend.id</code> do <code class=\"language-javascript\">this.props</code>, faz subscribe no status do amigo ap\u00f3s a montagem do componente e faz unsubscribe durante a desmontagem:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Mas o que acontece se a prop <code class=\"language-javascript\">friend</code> mudar</strong> enquanto o componente est\u00e1 na tela? Nosso componente deveria continuar exibindo o status de online de um amigo diferente. Isso \u00e9 um bug. N\u00f3s tamb\u00e9m causar\u00edamos um memory leak ou um crash durante o desmonte, j\u00e1 que a chamada do unsubscribe estaria usando o id do amigo errado.</p>\n<p>Em componentes de classe, n\u00f3s precisariamos adicionar <code class=\"language-javascript\">componentDidUpdate</code> para cuidar desse caso:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Unsubscribe no friend.id antigo</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      prevProps<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Subscribe no pr\u00f3ximo friend.id</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esquecer de cuidar do <code class=\"language-javascript\">componentDidUpdate</code> devidamente \u00e9 uma fonte comum de bugs em aplica\u00e7\u00f5es React.</p>\n<p>Agora considere a vers\u00e3o desse componente que usa Hooks:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ele n\u00e3o sofre desse bug. (Mas n\u00f3s tamb\u00e9m n\u00e3o fizemos nenhuma mudan\u00e7a nele.)</p>\n<p>N\u00e3o existe nenhum c\u00f3digo especial para cuidar das atualiza\u00e7\u00f5es porque <code class=\"language-javascript\">useEffect</code> cuida delas <em>por padr\u00e3o</em>. Ele limpa os efeitos anteriores antes de aplicar os pr\u00f3ximos efeitos. Para ilustrar isso, aqui est\u00e1 a sequ\u00eancia de chamadas ao subscribe e unsubscribe que o componente fez ao longo do tempo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Monta com as props { friend: { id: 100 } }</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Executa o primeiro efeito</span>\n\n<span class=\"token comment\">// Atualiza as props para { friend: { id: 200 } }</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Limpa o efeito antigo</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Executa o pr\u00f3ximo efeito</span>\n\n<span class=\"token comment\">// Atualiza as props para { friend: { id: 300 } }</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Limpa o efeito antigo</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Executa o pr\u00f3ximo efeito</span>\n\n<span class=\"token comment\">// Desmonta</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Limpa o \u00faltimo efeito</span></code></pre></div>\n<p>Este comportamento garante a consist\u00eancia por padr\u00e3o e previne bugs que s\u00e3o comuns aos componente de classe devido \u00e0 falta da l\u00f3gica de atualiza\u00e7\u00e3o.</p>\n<h3 id=\"tip-optimizing-performance-by-skipping-effects\"><a class=\"anchor\" href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\"></a>Dica: Otimizando a Performance ao Pular Efeitos </h3>\n<p>Em alguns casos, limpar ou aplicar o efeito em cada renderiza\u00e7\u00e3o pode criar um problema de performance. Em componentes de classes, n\u00f3s resolvemos isso escrevendo uma compara\u00e7\u00e3o extra com <code class=\"language-javascript\">prevProps</code> ou <code class=\"language-javascript\">prevState</code> dentro do <code class=\"language-javascript\">componentDidUpdate</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">.</span>count <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esse requerimento \u00e9 comum o bastante para estar embutido na API do Hook <code class=\"language-javascript\">useEffect</code>. Voc\u00ea pode dizer ao React para <em>pular</em> a aplica\u00e7\u00e3o de um efeito se certos valores n\u00e3o tiverem mudado entre as renderiza\u00e7\u00f5es. Para fazer isso, passe uma array como um segundo argumento opcional ao <code class=\"language-javascript\">useEffect</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Voc\u00ea clicou </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> vezes</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Apenas re-execute o efeito quando o count mudar</span></span></code></pre></div>\n<p>No exemplo acima, n\u00f3s passamos o <code class=\"language-javascript\">[count]</code> como segundo argumento. O que isso quer dizer? Se <code class=\"language-javascript\">count</code> \u00e9 <code class=\"language-javascript\">5</code>, e o nosso componente re-renderiza com <code class=\"language-javascript\">count</code> ainda sendo <code class=\"language-javascript\">5</code>, o React ir\u00e1 comparar <code class=\"language-javascript\">[5]</code> da renderiza\u00e7\u00e3o passada e <code class=\"language-javascript\">[5]</code> da pr\u00f3xima renderiza\u00e7\u00e3o. Por todos os itens na array serem o mesmo (<code class=\"language-javascript\">5 === 5</code>), o React ira pular o efeito. Essa \u00e9 a nossa otimiza\u00e7\u00e3o.</p>\n<p>Quando n\u00f3s renderizamos com <code class=\"language-javascript\">count</code> atualizado para <code class=\"language-javascript\">6</code>, o React ir\u00e1 comparar os itens no array <code class=\"language-javascript\">[5]</code> da renderiza\u00e7\u00e3o passada com os items no array <code class=\"language-javascript\">[6]</code> da pr\u00f3xima renderiza\u00e7\u00e3o. Desta vez, o React ir\u00e1 re-aplicar o efeito porque <code class=\"language-javascript\">5 !== 6</code>. Se houver m\u00faltiplos itens no array, o React ir\u00e1 re-executar o efeitos mesmo se apenas um deles for diferente.</p>\n<p>Isso tamb\u00e9m funciona para efeitos que tenham uma fase de limpeza:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Apenas re-subscribe se props.friend.id mudar</span></span></code></pre></div>\n<p>No futuro, talvez o segundo argumento seja adicionado automaticamente por uma transforma\u00e7\u00e3o em tempo de build.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Se voc\u00ea usar essa otimiza\u00e7\u00e3o, tenha certeza de que a array inclua <strong>qualquer valor do escopo acima (como props e state) que mude com o tempo e que ele seja usado pelo efeito</strong>. Caso contr\u00e1rio, seu c\u00f3digo far\u00e1 refer\u00eancia a valores obsoletos de renderiza\u00e7\u00f5es anteriores. Saiba mais sobre <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">como lidar com fun\u00e7\u00f5es</a> e <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">o que fazer quando a matriz muda com muita frequ\u00eancia</a>.</p>\n<p>Se voc\u00ea quer executar um efeito e limp\u00e1-lo apenas uma vez (na montagem e desmontagem), voc\u00ea pode passar um array vazio (<code class=\"language-javascript\">[]</code>) como segundo argumento. Isso conta ao React que o seu efeito n\u00e3o depende de <em>nenhum</em> valor das props ou state, ent\u00e3o ele nunca precisa re-executar. Isso n\u00e3o \u00e9 tratado como um caso especial \u2014 segue diretamente de como o array de depend\u00eancias sempre funciona.</p>\n<p>Se voc\u00ea passar um array vazio (<code class=\"language-javascript\">[]</code>), a props e o state passados dentro do efeito sempre ter\u00e3o seus valores iniciais.  Enquanto passando <code class=\"language-javascript\">[]</code> como segundo par\u00e2metro aproxima-se do modelo mental familiar de <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentWillUnmount</code>, geralmente h\u00e1 <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">melhores</a> <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">solu\u00e7\u00f5es</a> para evitar efeitos repetidos com muita frequ\u00eancia. Al\u00e9m disso, n\u00e3o esque\u00e7a de que o React adia a execu\u00e7\u00e3o do <code class=\"language-javascript\">useEffect</code> at\u00e9 o navegador ser pintado, ent\u00e3o fazer trabalho extra \u00e9 menos problem\u00e1tico.</p>\n<p>Recomendamos usar as regras do <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> como parte do nosso pacote <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Ele avisa quando as depend\u00eancias s\u00e3o especificadas incorretamente e sugere uma corre\u00e7\u00e3o.</p>\n</div>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-effect#next-steps\"></a>Pr\u00f3ximos Passos </h2>\n<p>Parab\u00e9ns! Essa foi uma p\u00e1gina longa, mas com sorte ao fim a maioria das suas perguntas sobre efeitos foram respondidas. Voc\u00ea aprendeu sobre o Hook State e o Hook Effect, e h\u00e1 <em>muito</em> o que voc\u00ea pode fazer com os dois combinados. Eles cobrem a maioria dos casos de uso para classes \u2014 e para os que eles n\u00e3o cobrirem, talvez voc\u00ea encontre alguns <a href=\"/react/hooks-reference\">Hooks adicionais</a> \u00fateis.</p>\n<p>N\u00f3s tamb\u00e9m estamos come\u00e7ando a ver como Hooks resolvem problemas levantados na <a href=\"/react/hooks-intro#motivation\">Motiva\u00e7\u00e3o</a>. N\u00f3s vimos como a limpeza dos efeitos evitam duplica\u00e7\u00e3o de c\u00f3digo no <code class=\"language-javascript\">componentDidUpdate</code> e <code class=\"language-javascript\">componentWillUnmount</code>, mant\u00e9m c\u00f3digos relacionados juntos, e ajuda a evitar bugs. N\u00f3s tamb\u00e9m vimos como separar efeitos pelo seu prop\u00f3sito, que \u00e9 uma coisa que n\u00e3o consegu\u00edamos fazer com classes.</p>\n<p>Nesse ponto voc\u00ea pode estar se perguntando como Hooks funcionam. Como o React sabe qual chamada do <code class=\"language-javascript\">useState</code> corresponde a qual vari\u00e1vel de state entre as re-renderiza\u00e7\u00f5es? Como o React \u201ccompara\u201d os efeitos anteriores e os pr\u00f3ximos toda atualiza\u00e7\u00e3o? <strong>Na pr\u00f3xima p\u00e1gina nos iremos aprender sobre as <a href=\"/react/hooks-rules\">Regras dos Hooks</a> \u2014 elas s\u00e3o essenciais para fazer os Hooks funcionarem.</strong></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/hooks-effect.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-effect", "nav": ["/react/hooks-state", "/react/hooks-rules"]}, {"key": "5. Regras dos Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><em>Hooks</em> s\u00e3o uma nova adi\u00e7\u00e3o ao React 16.8. Eles permitem que voc\u00ea use o state e outros recursos do React sem escrever uma classe.</p>\n<p>Hooks s\u00e3o fun\u00e7\u00f5es JavaScript, mas voc\u00ea precisa seguir duas regras ao utiliz\u00e1-los. N\u00f3s providenciamos um <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">plugin ESLint</a> para aplicar essas regras automaticamente:</p>\n<h3 id=\"only-call-hooks-at-the-top-level\"><a class=\"anchor\" href=\"/react/hooks-rules#only-call-hooks-at-the-top-level\"></a>Use Hooks Apenas no N\u00edvel Superior </h3>\n<p><strong>N\u00e3o use Hooks dentro de loops, regras condicionais ou fun\u00e7\u00f5es aninhadas (fun\u00e7\u00f5es dentro de fun\u00e7\u00f5es).</strong> Em vez disso, sempre use Hooks no n\u00edvel superior de sua fun\u00e7\u00e3o React, antes de qualquer retorno antecipado. Seguindo essas regras, voc\u00ea garante que os Hooks ser\u00e3o chamados na mesma ordem a cada vez que o componente renderizar. \u00c9 isso que permite que o React preserve corretamente o estado dos Hooks quando s\u00e3o usadas v\u00e1rias chamadas a <code class=\"language-javascript\">useState</code> e <code class=\"language-javascript\">useEffect</code> na mesma fun\u00e7\u00e3o. (Se voc\u00ea ficou curioso, iremos explicar isso melhor <a href=\"/react/hooks-rules#explanation\">abaixo</a>.)</p>\n<h3 id=\"only-call-hooks-from-react-functions\"><a class=\"anchor\" href=\"/react/hooks-rules#only-call-hooks-from-react-functions\"></a>Use Hooks Apenas Dentro de Fun\u00e7\u00f5es do React </h3>\n<p><strong>N\u00e3o use Hooks dentro de fun\u00e7\u00f5es JavaScript comuns.</strong> Em vez disso, voc\u00ea pode:</p>\n<ul>\n<li>\u2705  Chamar Hooks em componentes React.</li>\n<li>\u2705  Chamar Hooks dentro de Hooks Customizados (N\u00f3s iremos aprender sobre eles <a href=\"/react/hooks-custom\">na pr\u00f3xima p\u00e1gina.</a>).</li>\n</ul>\n<p>Seguindo essas regras, voc\u00ea garante que toda l\u00f3gica de estado (<code class=\"language-javascript\">state</code>) no componente seja claramente vis\u00edvel no c\u00f3digo fonte.</p>\n<h2 id=\"eslint-plugin\"><a class=\"anchor\" href=\"/react/hooks-rules#eslint-plugin\"></a>ESLint Plugin </h2>\n<p>N\u00f3s liberamos um plugin ESLint chamado <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a> que aplica essas duas regras. Se voc\u00ea desejar pode adicionar este plugin ao seu projeto, dessa forma:</p>\n<p>Esse plugin est\u00e1 incluindo por padr\u00e3o no <a href=\"/react/create-a-new-react-app#create-react-app\">Create React App</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-react-hooks --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Sua Configura\u00e7\u00e3o ESLint</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">\"react-hooks\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">\"react-hooks/rules-of-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Verifica as regras dos Hooks</span>\n    <span class=\"token string\">\"react-hooks/exhaustive-deps\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span> <span class=\"token comment\">// Verifica as depend\u00eancias de effects</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Voc\u00ea pode pular para pr\u00f3xima p\u00e1gina agora, onde explicamos melhor como escrever <a href=\"/react/hooks-custom\">seus pr\u00f3prios Hooks</a>.</strong> Nessa p\u00e1gina continuaremos explicando o motivo por tr\u00e1s dessas regras.</p>\n<h2 id=\"explanation\"><a class=\"anchor\" href=\"/react/hooks-rules#explanation\"></a>Explica\u00e7\u00e3o </h2>\n<p>Assim como <a href=\"/react/hooks-state#tip-using-multiple-state-variables\">aprendemos anteriormente</a>, n\u00f3s podemos usar diversos Hooks (States ou Effects) em um \u00fanico componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Use a vari\u00e1vel de estado (state) name</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. Use um efeito para persistir o formul\u00e1rio</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. Use a vari\u00e1vel de estado (state) surname</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>surname<span class=\"token punctuation\">,</span> setSurname<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 4. Use um efeito para atualizar o t\u00edtulo</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">updateTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> surname<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, como o React sabe qual o estado (<code class=\"language-javascript\">state</code>) correspondente ao <code class=\"language-javascript\">useState</code> chamado? A resposta \u00e9 que o <strong>React depende da ordem em que os Hooks s\u00e3o chamados.</strong> Nosso exemplo funciona porque a ordem de chamada dos Hooks \u00e9 a mesma sempre que o componente \u00e9 renderizado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// ------------</span>\n<span class=\"token comment\">// Primeira renderiza\u00e7\u00e3o</span>\n<span class=\"token comment\">// ------------</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. Inicializa a vari\u00e1vel de estado (state) name com 'Mary'</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>persistForm<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 2. Adiciona um efeito para persistir o formul\u00e1rio</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 3. Inicializa a vari\u00e1vel de estado (state) surname com 'Poppins'</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 4. Adiciona um efeito para atualizar o t\u00edtulo</span>\n\n<span class=\"token comment\">// -------------</span>\n<span class=\"token comment\">// Segunda renderiza\u00e7\u00e3o</span>\n<span class=\"token comment\">// -------------</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. L\u00ea a vari\u00e1vel de estado (state) name (argumento ignorado)</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>persistForm<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 2. Substitui o efeito para persistir no formul\u00e1rio</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 3. L\u00ea a vari\u00e1vel de estado (state) surname (argumento ignorado)</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 4. Substitui o efeito que atualiza o t\u00edtulo</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Enquanto a ordem dos Hooks chamados for a mesma entre as renderiza\u00e7\u00f5es, o React pode associar um estado (<code class=\"language-javascript\">state</code>) local a cada um deles. Mas o que acontece se colocarmos uma chamada de Hook (por exemplo, o efeito <code class=\"language-javascript\">persistForm</code>) dentro de uma condi\u00e7\u00e3o?</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// \ud83d\udd34 N\u00f3s estaremos quebrando a primeira regra por usar um Hook dentro de uma condi\u00e7\u00e3o</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A condi\u00e7\u00e3o <code class=\"language-javascript\">name !== ''</code> \u00e9 <code class=\"language-javascript\">true</code> na primeira renderiza\u00e7\u00e3o, ent\u00e3o chamamos o Hook dentro da condi\u00e7\u00e3o. Entretanto, na pr\u00f3xima renderiza\u00e7\u00e3o o usu\u00e1rio pode limpar o formul\u00e1rio, fazendo com que a condi\u00e7\u00e3o seja <code class=\"language-javascript\">false</code>. Agora que pulamos este Hook durante a renderiza\u00e7\u00e3o, a ordem das chamadas dos Hooks foi alterada:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// \u2705  1. L\u00ea a vari\u00e1vel de estado (state) name (argumento \u00e9 ignorado)</span>\n<span class=\"token comment\">// useEffect(persistForm)  // \ud83d\udd34  Agora, este Hook foi ignorado!</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// \ud83d\udd34  Na ordem era pra ser 2 (mas foi 3). Falha ao ler a vari\u00e1vel de estado (state) surname</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \ud83d\udd34  Na ordem era pra ser 3 (mas foi 4). Falha ao substituir o efeito</span></code></pre></div>\n<p>O React n\u00e3o saberia o que retornar na segunda chamada do Hook <code class=\"language-javascript\">useState</code>. O React esperava que a segunda chamada de Hook nesse componente fosse ao efeito <code class=\"language-javascript\">persistForm</code>, assim como aconteceu na renderiza\u00e7\u00e3o anterior, mas a ordem foi alterada. A partir da\u00ed, toda vez que um Hook for chamado depois daquele que n\u00f3s pulamos, o pr\u00f3ximo tamb\u00e9m se deslocaria, levando a erros.</p>\n<p><strong>\u00c9 por isso que os Hooks devem ser chamados no n\u00edvel superior de nosso componente.</strong> Se n\u00f3s queremos executar um efeito condicional, n\u00f3s podemos colocar a condi\u00e7\u00e3o <em><strong>dentro</strong></em> de nosso Hook:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \ud83d\udc4d  Legal! Agora n\u00e3o quebramos mais a primeira regra.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Note que voc\u00ea n\u00e3o precisa se preocupar com esse problema, se voc\u00ea usar a <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">regra fornecida no plugin do ESLint</a></strong>. Mas agora voc\u00ea tamb\u00e9m sabe o <em>porqu\u00ea</em> dos Hooks funcionarem dessa maneira, e quais os problemas que essas regras previnem.</p>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-rules#next-steps\"></a>Pr\u00f3ximos Passos </h2>\n<p>Finalmente, estamos prontos para aprender sobre como <a href=\"/react/hooks-custom\">escrever nossos pr\u00f3prios Hooks</a>! Hooks Customizados permitem voc\u00ea combinar Hooks fornecidos pelo React em suas pr\u00f3prias abstra\u00e7\u00f5es, e reusar a l\u00f3gica do <code class=\"language-javascript\">state</code> entre diferentes componentes.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/hooks-rules.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-rules", "nav": ["/react/hooks-effect", "/react/hooks-custom"]}, {"key": "6. Criando Seus Pr\u00f3prios Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><em>Hooks</em> s\u00e3o uma nova adi\u00e7\u00e3o ao React 16.8. Eles permitem que voc\u00ea use o state e outros recursos do React sem escrever uma classe.</p>\n<p>Criar seus pr\u00f3prios Hooks permite que voc\u00ea extraia a l\u00f3gica de um componente em fun\u00e7\u00f5es reutiliz\u00e1veis.</p>\n<p>Quando est\u00e1vamos aprendendo sobre <a href=\"/react/hooks-effect#example-using-hooks-1\">usar o Hook de Efeito</a>, vimos esse componente de uma aplica\u00e7\u00e3o de chat que mostra uma mensagem indicando se um amigo est\u00e1 online ou offline:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, digamos que nossa aplica\u00e7\u00e3o de chat tamb\u00e9m possua uma lista de contatos e que queremos renderizar os nomes de usu\u00e1rios online com a cor verde. Poder\u00edamos copiar e colar a l\u00f3gica similar acima em nosso componente <code class=\"language-javascript\">FriendListItem</code>, mas isso n\u00e3o seria o ideal:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ao inv\u00e9s disso, gostar\u00edamos de compartilhar essa l\u00f3gica entre <code class=\"language-javascript\">FriendStatus</code> e <code class=\"language-javascript\">FriendListItem</code>.</p>\n<p>Tradicionalmente em React, t\u00ednhamos duas maneiras populares para compartilhar l\u00f3gica com estado entre componentes: <a href=\"/react/render-props\">render props</a> e <a href=\"/react/higher-order-components\">componentes de alta-ordem</a>. Iremos agora ver como os Hooks resolvem diversos dos mesmos problemas sem nos for\u00e7ar a adicionar mais componentes \u00e0 \u00e1rvore de renderiza\u00e7\u00e3o.</p>\n<h2 id=\"extracting-a-custom-hook\"><a class=\"anchor\" href=\"/react/hooks-custom#extracting-a-custom-hook\"></a>Extraindo um Hook Customizado </h2>\n<p>Quando queremos compartilhar l\u00f3gica entre duas fun\u00e7\u00f5es JavaScript, extra\u00edmos ela para uma terceira fun\u00e7\u00e3o. Ambos componentes e Hooks s\u00e3o fun\u00e7\u00f5es, ent\u00e3o isso funciona para eles tamb\u00e9m!</p>\n<p><strong>Um Hook customizado \u00e9 uma fun\u00e7\u00e3o JavaScript cujo nome come\u00e7a com \u201d<code class=\"language-javascript\">use</code>\u201d e que pode utilizar outros Hooks.</strong> Por exemplo, <code class=\"language-javascript\">useFriendStatus</code> abaixo \u00e9 nosso primeiro Hook customizado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>N\u00e3o h\u00e1 nenhuma novidade nele - a l\u00f3gica foi copiada dos componentes acima. Assim como em um componente, certifique-se de apenas chamar outros Hooks fora de condi\u00e7\u00f5es e no n\u00edvel mais alto do seu Hook customizado.</p>\n<p>Diferente de um componente React, um Hook customizado n\u00e3o precisa ter uma assinatura espec\u00edfica. Podemos decidir o que ele recebe como argumentos e o que ele retorna, caso necess\u00e1rio. Em outras palavras, \u00e9 como uma fun\u00e7\u00e3o normal. Seu nome deve sempre come\u00e7ar com <code class=\"language-javascript\">use</code> para que voc\u00ea possa ver de forma f\u00e1cil que <a href=\"/react/hooks-rules\">as regras dos Hooks</a> se aplicam a ele.</p>\n<p>O prop\u00f3sito do nosso Hook <code class=\"language-javascript\">useFriendStatus</code> \u00e9 nos dizer o status de um amigo. Por isso ele recebe <code class=\"language-javascript\">friendID</code> como argumento e retorna se esse amigo est\u00e1 online:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora vamos ver como podemos usar o nosso Hook customizado.</p>\n<h2 id=\"using-a-custom-hook\"><a class=\"anchor\" href=\"/react/hooks-custom#using-a-custom-hook\"></a>Usando um Hook Customizado </h2>\n<p>No come\u00e7o, nosso objetivo era remover a l\u00f3gica duplicada dos componentes <code class=\"language-javascript\">FriendStatus</code> e <code class=\"language-javascript\">FriendListItem</code>. Ambos precisam saber se um amigo est\u00e1 online ou n\u00e3o.</p>\n<p>Agora que extra\u00edmos essa l\u00f3gica para o Hook <code class=\"language-javascript\">useFriendStatus</code>, n\u00f3s podemos <em>apenas us\u00e1-lo:</em></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Esse c\u00f3digo equivale aos exemplos originais?</strong> Sim, ele funciona exatamente do mesmo modo. Se voc\u00ea olhar com aten\u00e7\u00e3o, ir\u00e1 ver que n\u00e3o fizemos nenhuma altera\u00e7\u00e3o ao comportamento. Apenas extra\u00edmos uma parte de c\u00f3digo comum entre as duas fun\u00e7\u00f5es para uma fun\u00e7\u00e3o separada. <strong>Hooks customizados s\u00e3o uma conven\u00e7\u00e3o que surgiu naturalmente do design dos Hooks, mais do que de uma funcionalidade do React.</strong></p>\n<p><strong>Eu tenho de nomear meus Hooks customizados come\u00e7ando com \u201d<code class=\"language-javascript\">use</code>\u201c?</strong> Por favor, fa\u00e7a isso. Essa conven\u00e7\u00e3o \u00e9 muito importante. Sem ela, n\u00e3o ser\u00edamos capazes de automaticamente verificar por viola\u00e7\u00f5es nas <a href=\"/react/hooks-rules\">regras dos Hooks</a> porque n\u00e3o poder\u00edamos dizer se certa fun\u00e7\u00e3o cont\u00e9m chamadas a Hooks dentro dela.</p>\n<p><strong>Dois componentes usando o mesmo Hook compartilham estado (<code class=\"language-javascript\">state</code>)?</strong> N\u00e3o. Hooks customizados s\u00e3o um mecanismo para reutilizar <em>l\u00f3gica com estado</em> (como configurar uma subscri\u00e7\u00e3o ou lembrar de um valor atual), mas sempre que voc\u00ea usa um Hook customizado, todo o estado (<code class=\"language-javascript\">state</code>) e os efeitos dentro dele s\u00e3o completamente isolados.</p>\n<p><strong>Como um Hook customizado isola o estado (<code class=\"language-javascript\">state</code>)?</strong> Cada <em>chamada</em> a um Hook gera um estado (<code class=\"language-javascript\">state</code>) isolado. Por utilizarmos <code class=\"language-javascript\">useFriendStatus</code> diretamente, do ponto de vista do React, nosso componente est\u00e1 apenas chamando <code class=\"language-javascript\">useState</code> e <code class=\"language-javascript\">useEffect</code>. E como <a href=\"/react/hooks-state#tip-using-multiple-state-variables\">aprendemos</a> <a href=\"/react/hooks-effect#tip-use-multiple-effects-to-separate-concerns\">anteriormente</a>, podemos chamar <code class=\"language-javascript\">useState</code> e <code class=\"language-javascript\">useEffect</code> diversas vezes em um componente e eles ir\u00e3o ser completamente independentes.</p>\n<h3 id=\"tip-pass-information-between-hooks\"><a class=\"anchor\" href=\"/react/hooks-custom#tip-pass-information-between-hooks\"></a>Dica: Passando Informa\u00e7\u00f5es entre Hooks </h3>\n<p>Visto que Hooks s\u00e3o fun\u00e7\u00f5es, podemos passar informa\u00e7\u00f5es entre eles.</p>\n<p>Para ilustrar isso, iremos utilizar outro componente do nosso exemplo hipot\u00e9tico de um chat. Esse \u00e9 um selecionador de destinat\u00e1rio para mensagens do chat que mostra se o amigo selecionado est\u00e1 online:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> friendList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Phoebe'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Rachel'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Ross'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChatRecipientPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>recipientID<span class=\"token punctuation\">,</span> setRecipientID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isRecipientOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>recipientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Circle</span></span> <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isRecipientOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>recipientID<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setRecipientID</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>friendList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friend</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>N\u00f3s colocamos o ID do atual amigo selecionado na vari\u00e1vel de estado (<code class=\"language-javascript\">state</code>) <code class=\"language-javascript\">recipientID</code> e atualizamos ela se o usu\u00e1rio escolher um amigo diferente no selecionador <code class=\"language-javascript\">&lt;select&gt;</code>.</p>\n<p>Pelo fato de o Hook <code class=\"language-javascript\">useState</code> nos fornecer o \u00faltimo valor da vari\u00e1vel de estado (<code class=\"language-javascript\">state</code>) <code class=\"language-javascript\">recipientID</code>, podemos pass\u00e1-la para nosso Hook customizado <code class=\"language-javascript\">useFriendStatus</code> como um par\u00e2metro:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>recipientID<span class=\"token punctuation\">,</span> setRecipientID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isRecipientOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>recipientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Isto nos informa se o amigo <em>atualmente selecionado</em> est\u00e1 online. Se escolhermos um amigo diferente e atualizarmos a vari\u00e1vel de estado <code class=\"language-javascript\">recipientID</code>, o nosso Hook <code class=\"language-javascript\">useFriendStatus</code> ir\u00e1 cancelar a subscri\u00e7\u00e3o do amigo selecionado anteriormente, e subscrever para o status do rec\u00e9m-selecionado. </p>\n<h2 id=\"useyourimagination\"><a class=\"anchor\" href=\"/react/hooks-custom#useyourimagination\"></a><code class=\"language-javascript\">useSuaImagina\u00e7\u00e3o()</code> </h2>\n<p>Hooks customizados oferecem a flexibilidade de compartilhar l\u00f3gica de uma forma que n\u00e3o era poss\u00edvel de fazer em componentes React anteriormente. Voc\u00ea pode escrever Hooks customizados que cobrem uma vasta gama de casos de uso como manipula\u00e7\u00e3o de formul\u00e1rios, anima\u00e7\u00f5es, subscri\u00e7\u00f5es declarativas, contadores e provavelmente muitas outras que n\u00e3o pensamos. Melhor ainda, voc\u00ea pode criar Hooks que s\u00e3o f\u00e1ceis de usar tanto quanto as funcionalidades nativas do React.</p>\n<p>Tente resistir \u00e0 tenta\u00e7\u00e3o de adicionar uma abstra\u00e7\u00e3o cedo demais. Agora que componentes de fun\u00e7\u00e3o podem fazer mais, provavelmente os componentes de fun\u00e7\u00e3o no seu c\u00f3digo ir\u00e3o se tornar maiores. Isso \u00e9 normal \u2014 n\u00e3o sinta que voc\u00ea <strong>t\u00eam</strong> de os separar imediatamente em Hooks. Mas tamb\u00e9m incentivamos voc\u00ea a come\u00e7ar a achar casos onde um Hook customizado pode esconder uma l\u00f3gica complexa atr\u00e1s de uma interface simples ou ajudar a organizar um componente bagun\u00e7ado.</p>\n<p>Por exemplo, voc\u00ea pode ter um componente complexo que tenha um estado local <code class=\"language-javascript\">state</code> grande que seja manipulado de forma ad-hoc. <code class=\"language-javascript\">useState</code> n\u00e3o torna mais f\u00e1cil a centraliza\u00e7\u00e3o da l\u00f3gica de atualiza\u00e7\u00e3o, ent\u00e3o voc\u00ea pode preferir escrever isso como um <em>reducer</em> do <a class=\"external-link\" href=\"https://redux.js.org/\">Redux</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">todosReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'add'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n        completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ... other actions ...</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reducers s\u00e3o muito convenientes para testar de forma isolada e escalonar para expressar uma l\u00f3gica complexa de atualiza\u00e7\u00e3o. Voc\u00ea pode ainda quebrar eles em reducers menores caso necess\u00e1rio. Contudo, voc\u00ea pode tamb\u00e9m gostar dos benef\u00edcios de utilizar a l\u00f3gica local (<code class=\"language-javascript\">state</code>) do React ou n\u00e3o queira instalar outra biblioteca.</p>\n<p>E se pud\u00e9ssemos escrever um Hook <code class=\"language-javascript\">useReducer</code> que nos permite gerenciar o estado <em>local</em> (<code class=\"language-javascript\">state</code>) do nosso componente com um reducer? Uma vers\u00e3o simplificada deveria ser mais ou menos assim:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer<span class=\"token punctuation\">,</span> initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> nextState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora podemos usar ele em nosso componente e deixar com que o reducer gerencie o estado (<code class=\"language-javascript\">state</code>) dele:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleAddClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A necessidade de se gerenciar o estado local (<code class=\"language-javascript\">state</code>) com um reducer em um componente complexo \u00e9 t\u00e3o comum que constru\u00edmos o Hook <code class=\"language-javascript\">useReducer</code> no pr\u00f3prio React. Voc\u00ea o achar\u00e1 juntamente com outros Hooks nativos na <a href=\"/react/hooks-reference\">refer\u00eancia da API dos Hooks</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/hooks-custom.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-custom", "nav": ["/react/hooks-rules", "/react/hooks-reference"]}, {"key": "7. Refer\u00eancia da API dos Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><em>Hooks</em> s\u00e3o uma nova adi\u00e7\u00e3o ao React 16.8. Eles permitem que voc\u00ea use o state e outros recursos do React sem escrever uma classe.</p>\n<p>Essa p\u00e1gina descreve as APIs internas dos Hooks no React.</p>\n<p>Se Hooks \u00e9 novidade pra voc\u00ea, talvez voc\u00ea queira primeiro ter uma <a href=\"/react/hooks-overview\">vis\u00e3o geral</a> de como funcionam os Hooks. Voc\u00ea tamb\u00e9m pode procurar informa\u00e7\u00f5es \u00fateis na se\u00e7\u00e3o de <a href=\"/react/hooks-faq\">perguntas mais frequentes</a>.</p>\n<ul>\n<li>\n<p><a href=\"/react/hooks-reference#basic-hooks\">Hooks B\u00e1sicos</a> </p>\n<ul>\n<li><a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a></li>\n<li><a href=\"/react/hooks-reference#useeffect\"><code class=\"language-javascript\">useEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-reference#additional-hooks\">Hooks Adicionais</a> </p>\n<ul>\n<li><a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a></li>\n<li><a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a></li>\n<li><a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a></li>\n<li><a href=\"/react/hooks-reference#useref\"><code class=\"language-javascript\">useRef</code></a></li>\n<li><a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a></li>\n<li><a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usedebugvalue\"><code class=\"language-javascript\">useDebugValue</code></a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"basic-hooks\"><a class=\"anchor\" href=\"/react/hooks-reference#basic-hooks\"></a>Hooks B\u00e1sicos </h2>\n<h3 id=\"usestate\"><a class=\"anchor\" href=\"/react/hooks-reference#usestate\"></a><code class=\"language-javascript\">useState</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Retorna um valor e uma fun\u00e7\u00e3o para atualizar o valor.</p>\n<p>Durante a renderiza\u00e7\u00e3o inicial, o estado retornado \u00e9 o mesmo que o valor passado como argumento inicial (<code class=\"language-javascript\">initialState</code>).</p>\n<p>A fun\u00e7\u00e3o <code class=\"language-javascript\">setState</code> \u00e9 usada para atualizar o estado. Ela aceita um novo valor de estado e coloca na fila de re-renderiza\u00e7\u00e3o do componente.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Durante as pr\u00f3ximas re-renderiza\u00e7\u00f5es, o primeiro valor retornado por <code class=\"language-javascript\">useState</code> sempre ser\u00e1 o estado mais recente ap\u00f3s a aplica\u00e7\u00e3o das atualiza\u00e7\u00f5es.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>React garante que a identidade da fun\u00e7\u00e3o <code class=\"language-javascript\">setState</code> \u00e9 est\u00e1vel e n\u00e3o ser\u00e1 alterada nos re-renderizadores. \u00c9 por isso que \u00e9 seguro omitir da lista de depend\u00eancias <code class=\"language-javascript\">useEffect</code> ou<code class=\"language-javascript\">useCallback</code>.</p>\n</div>\n<h4 id=\"functional-updates\"><a class=\"anchor\" href=\"/react/hooks-reference#functional-updates\"></a>Atualiza\u00e7\u00f5es Funcionais </h4>\n<p>Se um novo estado for calculado usando o estado anterior, voc\u00ea pode passar uma fun\u00e7\u00e3o para <code class=\"language-javascript\">setSate</code>. A fun\u00e7\u00e3o receber\u00e1 o valor anterior e retornar\u00e1 um valor atualizado. Aqui est\u00e1 um exemplo de um componente de contador que usa as duas formas de usar o <code class=\"language-javascript\">setState</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>initialCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Contador: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>initialCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Reiniciar</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevCount</span> <span class=\"token operator\">=&gt;</span> prevCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevCount</span> <span class=\"token operator\">=&gt;</span> prevCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Os bot\u00f5es \u201d+\u201d e \u201d-\u201d usam a forma funcional, porque o valor atualizado \u00e9 baseado no valor anterior. Mas o bot\u00e3o \u201cReiniciar\u201d usa a forma normal, porque ele sempre define a contagem de volta para o valor inicial.</p>\n<p>Se sua fun\u00e7\u00e3o de atualiza\u00e7\u00e3o retornar exatamente o mesmo valor que o estado atual, o renderizador subsequente ser\u00e1 ignorado completamente.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Ao contr\u00e1rio do m\u00e9todo <code class=\"language-javascript\">setState</code> encontrado em componentes de classe, <code class=\"language-javascript\">useState</code> n\u00e3o combina automaticamente os objetos atualizados. Voc\u00ea pode replicar esse comportamento por combinar a fun\u00e7\u00e3o que atualiza o objeto e o estado anterior usando a sintaxe <code class=\"language-javascript\">object spread</code></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Object.assign tamb\u00e9m funcionaria</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>updatedValues<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Outra op\u00e7\u00e3o \u00e9 o <code class=\"language-javascript\">useReducer</code>, que \u00e9 mais adequada para gerenciar objetos de estado que cont\u00eam v\u00e1rios sub-valores.</p>\n</div>\n<h4 id=\"lazy-initial-state\"><a class=\"anchor\" href=\"/react/hooks-reference#lazy-initial-state\"></a>Estado Inicial Pregui\u00e7oso </h4>\n<p>O argumento <code class=\"language-javascript\">initialState</code> \u00e9 o estado usado durante a primeira renderiza\u00e7\u00e3o. Nas pr\u00f3ximas renderiza\u00e7\u00f5es, ele \u00e9 desconsiderado. Se o estado inicial \u00e9 o resultado desse demorado processamento, voc\u00ea pode fornecer uma fun\u00e7\u00e3o, no qual ser\u00e1 executada apenas na primeira renderiza\u00e7\u00e3o:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">someExpensiveComputation</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"bailing-out-of-a-state-update\"><a class=\"anchor\" href=\"/react/hooks-reference#bailing-out-of-a-state-update\"></a>Pulando Atualiza\u00e7\u00e3o de Estado </h4>\n<p>Se voc\u00ea atualizar o estado do Hook com o mesmo valor do estado atual, React ir\u00e1 pular a atualiza\u00e7\u00e3o sem renderizar os filhos ou disparar os efeitos. (React usa o algoritmo de compara\u00e7\u00e3o <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description\"><code class=\"language-javascript\">Object.is</code></a>.)</p>\n<p>Note que o React pode ainda precisar renderizar esse componente espec\u00edfico novamente antes de sair. Isso n\u00e3o deveria ser uma preocupa\u00e7\u00e3o porque o React n\u00e3o ir\u00e1 ser \u201cmais profundo\u201d do que o necess\u00e1rio na \u00e1rvore. Se voc\u00ea est\u00e1 fazendo um processamento mais demorado enquanto renderiza, voc\u00ea pode otimizar isso usando <code class=\"language-javascript\">useMemo</code>.</p>\n<h3 id=\"useeffect\"><a class=\"anchor\" href=\"/react/hooks-reference#useeffect\"></a><code class=\"language-javascript\">useEffect</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>didUpdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Aceita uma fun\u00e7\u00e3o que cont\u00e9m um c\u00f3digo imperativo, possivelmente efetivo.</p>\n<p>Muta\u00e7\u00f5es, assinaturas, temporizadores, logs e outros <code class=\"language-javascript\">side effects</code> n\u00e3o s\u00e3o permitidos dentro do corpo principal de um componente funcional (React se refere a isso como <em>render phase</em>). Us\u00e1-los levar\u00e1 a erros confusos e inconsist\u00eancias na UI.</p>\n<p>Em vez disso, use <code class=\"language-javascript\">useEffect</code>. A fun\u00e7\u00e3o passada para <code class=\"language-javascript\">useEffect</code> ser\u00e1 executada depois que a renderiza\u00e7\u00e3o estiver dispon\u00edvel na tela. Pense em efeitos como um rota de fuga do mundo puramente funcional do React para o mundo imperativo.</p>\n<p>Por padr\u00e3o, os efeitos s\u00e3o executados ap\u00f3s cada renderiza\u00e7\u00e3o conclu\u00edda, mas voc\u00ea pode optar por dispar\u00e1-los <a href=\"/react/hooks-reference#conditionally-firing-an-effect\">somente quando determinados valores receberam atualiza\u00e7\u00e3o</a>.</p>\n<h4 id=\"cleaning-up-an-effect\"><a class=\"anchor\" href=\"/react/hooks-reference#cleaning-up-an-effect\"></a>Limpando um Efeito </h4>\n<p>Muitas vezes, os efeitos criam recursos que precisam ser limpos antes que o componente deixe a tela, como uma assinatura ou o ID de um temporizador. Para fazer isso, a fun\u00e7\u00e3o passada para <code class=\"language-javascript\">useEffect</code> pode retornar uma fun\u00e7\u00e3o de limpeza do efeito. Por exemplo, para criar uma assinatura:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Limpa a assinatura antes do componente deixar a tela</span>\n    subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A fun\u00e7\u00e3o de limpeza \u00e9 executada antes que o componente seja removido da UI para evitar vazamento de mem\u00f3ria. Entretanto, se um componente renderiza v\u00e1rias vezes (como eles normalmente fazem), o <strong>efeito anterior \u00e9 limpo antes de executar o pr\u00f3ximo efeito</strong>. No nosso exemplo, isto significa que uma nova assinatura \u00e9 criada em cada atualiza\u00e7\u00e3o. Para evitar disparar um efeito em cada atualiza\u00e7\u00e3o, consulte a pr\u00f3xima se\u00e7\u00e3o.</p>\n<h4 id=\"timing-of-effects\"><a class=\"anchor\" href=\"/react/hooks-reference#timing-of-effects\"></a>Tempo dos Efeitos </h4>\n<p>Ao contr\u00e1rio de <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentDidUpdate</code>, a fun\u00e7\u00e3o passada para <code class=\"language-javascript\">useEffect</code> dispara <strong>ap\u00f3s</strong> a renderiza\u00e7\u00e3o, durante o evento adiado. Isto torna o <code class=\"language-javascript\">useEffect</code> adequado para os muitos efeitos colaterais comuns, como a cria\u00e7\u00e3o de assinaturas e manipuladores de eventos, porque a maioria dos tipos de trabalho n\u00e3o deve bloquear o navegador ao atualizar a tela.</p>\n<p>No entanto, nem todos os efeitos podem ser adiados. Por exemplo, uma altera\u00e7\u00e3o no DOM vis\u00edvel para o usu\u00e1rio, deve disparar sincronizadamente antes da pr\u00f3xima renderiza\u00e7\u00e3o, para que o usu\u00e1rio n\u00e3o perceba uma inconsist\u00eancia visual. (A distin\u00e7\u00e3o \u00e9 conceitualmente semelhante a ouvintes de eventos ativos x passivos.) Para estes tipos de efeitos, React fornece um Hook adicional chamado <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a>. Tem a mesma estrutura que <code class=\"language-javascript\">useEffect</code>, mas \u00e9 diferente quando disparado.</p>\n<p>Embora <code class=\"language-javascript\">useEffect</code> seja adiado at\u00e9 a pr\u00f3xima renderiza\u00e7\u00e3o do navegador, \u00e9 mais garantido disparar antes de qualquer nova renderiza\u00e7\u00e3o. React sempre apagar\u00e1 os efeitos de uma renderiza\u00e7\u00e3o anterior antes de iniciar uma nova atualiza\u00e7\u00e3o.</p>\n<h4 id=\"conditionally-firing-an-effect\"><a class=\"anchor\" href=\"/react/hooks-reference#conditionally-firing-an-effect\"></a>Disparando um Efeito Condicionalmente </h4>\n<p>O comportamento padr\u00e3o para efeitos \u00e9 disparar o efeito ap\u00f3s cada renderiza\u00e7\u00e3o conclu\u00edda. Desta maneira, o efeito \u00e9 sempre recriado se uma de suas depend\u00eancias for alterada.</p>\n<p>No entanto, isto pode ser excessivo em alguns casos, como o exemplo de assinatura da se\u00e7\u00e3o anterior. N\u00f3s n\u00e3o precisamos criar uma nova assinatura toda vez que atualizar, apenas se a props <code class=\"language-javascript\">source</code> for alterada.</p>\n<p>Para implementar isso, passe um segundo argumento para <code class=\"language-javascript\">useEffect</code> que pode ser um array de valores em que o efeito observa. Nosso exemplo atualizado agora se parece com isso:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora, a assinatura s\u00f3 ser\u00e1 recriada quando <code class=\"language-javascript\">props.source</code> for alterado.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Se voc\u00ea usar essa otimiza\u00e7\u00e3o, tenha certeza de que a array inclua <strong>qualquer valor do escopo acima (como props e state) que mude com o tempo e que ele seja usado pelo efeito</strong>. Caso contr\u00e1rio, seu c\u00f3digo far\u00e1 refer\u00eancia a valores obsoletos de renderiza\u00e7\u00f5es anteriores. Saiba mais sobre <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">como lidar com fun\u00e7\u00f5es</a> e <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">o que fazer quando a matriz muda com muita frequ\u00eancia</a>.</p>\n<p>Se voc\u00ea quer executar um efeito e limp\u00e1-lo apenas uma vez (na montagem e desmontagem), voc\u00ea pode passar um array vazio (<code class=\"language-javascript\">[]</code>) como segundo argumento. Isso conta ao React que o seu efeito n\u00e3o depende de <em>nenhum</em> valor das props ou state, ent\u00e3o ele nunca precisa re-executar. Isso n\u00e3o \u00e9 tratado como um caso especial \u2014 ele segue diretamente a maneira como o array de entrada sempre funcionam.</p>\n<p>Se voc\u00ea passar um array vazio (<code class=\"language-javascript\">[]</code>), a props e o state passados dentro do efeito sempre ter\u00e3o seus valores iniciais. Enquanto passando <code class=\"language-javascript\">[]</code> como segundo par\u00e2metro aproxima-se do modelo mental familiar de <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentWillUnmount</code>, geralmente h\u00e1s <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">melhores</a> <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">solu\u00e7\u00f5es</a> para evitar efeitos repetidos com muita frequ\u00eancia. Al\u00e9m disso, n\u00e3o esque\u00e7a de que o React adia a execu\u00e7\u00e3o do <code class=\"language-javascript\">useEffect</code> at\u00e9 o navegador ser pintado, ent\u00e3o fazer trabalho extra \u00e9 menos problem\u00e1tico.</p>\n<p>Recomendamos usar as regras do <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> como parte do nosso pacote <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Ele avisa quando as depend\u00eancias s\u00e3o especificadas incorretamente e sugere uma corre\u00e7\u00e3o.</p>\n</div>\n<p>O array de depend\u00eancias n\u00e3o \u00e9 passada como argumentos para a fun\u00e7\u00e3o de efeito. Conceitualmente, no entanto, \u00e9 o que eles representam: todos os valores referenciados dentro da fun\u00e7\u00e3o de efeito tamb\u00e9m devem aparecer no array de depend\u00eancias. No futuro, um compilador suficientemente avan\u00e7ado poderia criar esse array automaticamente.</p>\n<h3 id=\"usecontext\"><a class=\"anchor\" href=\"/react/hooks-reference#usecontext\"></a><code class=\"language-javascript\">useContext</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MyContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Aceita um objeto de contexto (o valor retornado de <code class=\"language-javascript\">React.createContext</code>) e retorna o valor atual do contexto. O valor de contexto atual \u00e9 determinado pela prop <code class=\"language-javascript\">value</code> do <code class=\"language-javascript\">&lt;MyContext.Provider&gt;</code> mais pr\u00f3ximo acima do componente de chamada na \u00e1rvore.</p>\n<p>Quando o <code class=\"language-javascript\">&lt;MyContext.Provider&gt;</code> mais pr\u00f3ximo acima do componente for atualizado, este Hook acionar\u00e1 um novo renderizador com o <code class=\"language-javascript\">value</code> de contexto mais recente passando para o provedor <code class=\"language-javascript\">MyContext</code>. Mesmo que um ancestral use <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a> ou <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate</code></a>, um renderizador ainda ocorrer\u00e1 come\u00e7ando no pr\u00f3prio componente usando <code class=\"language-javascript\">useContext</code>.</p>\n<p>N\u00e3o esque\u00e7a que o argumento para <code class=\"language-javascript\">useContext</code> deve ser o <em>objeto de contexto em si</em>:</p>\n<ul>\n<li><strong>Correto:</strong> <code class=\"language-javascript\">useContext(MyContext)</code></li>\n<li><strong>Incorreto:</strong> <code class=\"language-javascript\">useContext(MyContext.Consumer)</code></li>\n<li><strong>Incorreto:</strong> <code class=\"language-javascript\">useContext(MyContext.Provider)</code></li>\n</ul>\n<p>Um componente que chama <code class=\"language-javascript\">useContext</code> ser\u00e1 sempre renderizado novamente quando o valor do contexto for alterado. Se voltar a renderizar o componente \u00e9 caro, voc\u00ea pode <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/15156#issuecomment-474590693\">otimiz\u00e1-lo usando o memoization</a>.</p>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Se voc\u00ea estiver familiarizado com a API de contexto antes de Hooks, <code class=\"language-javascript\">useContext (MyContext)</code> \u00e9 equivalente a <code class=\"language-javascript\">static contextType = MyContext</code> em uma classe, ou a <code class=\"language-javascript\">&lt;MyContext.Consumer&gt;</code>.</p>\n<p><code class=\"language-javascript\">useContext(MyContext)</code> s\u00f3 permite que voc\u00ea <em>leia</em> o contexto e assine suas altera\u00e7\u00f5es. Voc\u00ea ainda precisa de um <code class=\"language-javascript\">&lt;MyContext.Provider&gt;</code> acima na \u00e1rvore para <em>fornecer</em> o valor para este contexto.</p>\n</div>\n<p><strong>Juntar as pe\u00e7as com Context.Provider</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> themes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  light<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    foreground<span class=\"token operator\">:</span> <span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span>\n    background<span class=\"token operator\">:</span> <span class=\"token string\">\"#eeeeee\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  dark<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    foreground<span class=\"token operator\">:</span> <span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span>\n    background<span class=\"token operator\">:</span> <span class=\"token string\">\"#222222\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>themes<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ThemedButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> background<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>foreground <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      Eu sou estilizado pelo tema do contexto!</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este exemplo \u00e9 modificado para hooks a partir de um exemplo anterior no <a href=\"/react/context\">Guia Avan\u00e7ado de Context</a>, onde voc\u00ea pode encontrar mais informa\u00e7\u00f5es sobre quando e como usar o Context.</p>\n<h2 id=\"additional-hooks\"><a class=\"anchor\" href=\"/react/hooks-reference#additional-hooks\"></a>Hooks Adicionais </h2>\n<p>Os pr\u00f3ximos Hooks s\u00e3o varia\u00e7\u00f5es dos princ\u00edpios b\u00e1sicos da se\u00e7\u00e3o anterior ou apenas necess\u00e1rios para um caso de uso espec\u00edfico. N\u00e3o se estresse sobre aprend\u00ea-los antes dos princ\u00edpios b\u00e1sicos.</p>\n<h3 id=\"usereducer\"><a class=\"anchor\" href=\"/react/hooks-reference#usereducer\"></a><code class=\"language-javascript\">useReducer</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialArg<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Uma alternativa para <a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a>. Aceita um <code class=\"language-javascript\">reducer</code> do tipo <code class=\"language-javascript\">(state, action) =&gt; newState</code> e retorna o estado atual, junto com um m\u00e9todo <code class=\"language-javascript\">dispatch</code>. (Se voc\u00ea est\u00e1 familiarizado com o Redux, voc\u00ea j\u00e1 sabe como isso funciona.)</p>\n<p><code class=\"language-javascript\">useReducer</code> \u00e9 geralmente prefer\u00edvel em rela\u00e7\u00e3o ao <code class=\"language-javascript\">useState</code> quando se tem uma l\u00f3gica de estado complexa que envolve m\u00faltiplos sub-valores, ou quando o pr\u00f3ximo estado depende do estado anterior. <code class=\"language-javascript\">useReducer</code> tamb\u00e9m possibilita a otimiza\u00e7\u00e3o da performance de componentes que disparam atualiza\u00e7\u00f5es profundas porque <a class=\"external-link\" href=\"https://pt-br.reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\">\u00e9 poss\u00edvel passar o <code class=\"language-javascript\">dispatch</code> para baixo, ao inv\u00e9s de <code class=\"language-javascript\">callbacks</code></a>.</p>\n<p>Aqui est\u00e1 o exemplo do contador na se\u00e7\u00e3o <a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a>, reescrito para usar um <code class=\"language-javascript\">reducer</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Contador: </span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>React garante que a identidade da fun\u00e7\u00e3o <code class=\"language-javascript\">dispatch</code> seja est\u00e1vel e n\u00e3o ser\u00e1 alterada nos re-renderizadores. \u00c9 por isso que \u00e9 seguro omitir da lista de depend\u00eancias <code class=\"language-javascript\">useEffect</code> ou <code class=\"language-javascript\">useCallback</code>.</p>\n</div>\n<h4 id=\"specifying-the-initial-state\"><a class=\"anchor\" href=\"/react/hooks-reference#specifying-the-initial-state\"></a>Determinando o Estado Inicial </h4>\n<p>H\u00e1 duas maneiras diferentes de inicializar o estado <code class=\"language-javascript\">useReducer</code>. Pode voc\u00ea escolher qualquer uma dependendo do seu caso de uso. A maneira mais simples \u00e9 passar o estado inicial como um segundo argumento:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>\n    reducer<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>React n\u00e3o usa a conven\u00e7\u00e3o <code class=\"language-javascript\">state = initialState</code> popularizada pelo Redux. O valor inicial precisa \u00e0s vezes, depender de props e, portanto \u00e9 especificado a partir da chamada do Hook. Se voc\u00ea se sentir bem sobre isso, voc\u00ea pode chamar <code class=\"language-javascript\">useReducer(reducer, undefined, reducer)</code> para simular o comportamento do Redux, mas n\u00e3o encorajamos isso.</p>\n</div>\n<h4 id=\"lazy-initialization\"><a class=\"anchor\" href=\"/react/hooks-reference#lazy-initialization\"></a>Inicializa\u00e7\u00e3o Pregui\u00e7osa </h4>\n<p>Voc\u00ea pode tamb\u00e9m criar um estado inicial mais lento. Para fazer isso, voc\u00ea pode passar uma fun\u00e7\u00e3o <code class=\"language-javascript\">init</code> como terceiro argumento. O estado inicial ser\u00e1 setado para <code class=\"language-javascript\">init(initialArg)</code>.</p>\n<p>Isso nos permite extrair a l\u00f3gica que calcula o estado inicial para fora do <code class=\"language-javascript\">reducer</code>. Isso \u00e9 \u00fatil tamb\u00e9m para resetar um estado depois da resposta de uma a\u00e7\u00e3o:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'reset'</span><span class=\"token operator\">:</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>initialCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialCount<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      Contador: </span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Reiniciar</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"bailing-out-of-a-dispatch\"><a class=\"anchor\" href=\"/react/hooks-reference#bailing-out-of-a-dispatch\"></a>Pulando Fora da A\u00e7\u00e3o </h4>\n<p>Se voc\u00ea retornar o mesmo valor do Hook Reducer que o valor do <code class=\"language-javascript\">state</code> atual, React ir\u00e1 pular a a\u00e7\u00e3o sem renderizar os filhos ou disparar os efeitos. (React usa o algoritmo de compara\u00e7\u00e3o <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description\"><code class=\"language-javascript\">Object.is</code></a>.)</p>\n<p>Note que o React ainda pode precisar renderizar aquele componente espec\u00edfico novamente antes de pular para fora da a\u00e7\u00e3o. Isso n\u00e3o deve ser um problema porque o React n\u00e3o vai se aprofundar desnecessariamente na \u00e1rvore. Se voc\u00ea est\u00e1 fazendo c\u00e1lculos de alto custo enquanto renderiza, voc\u00ea pode otimiz\u00e1-los usando o <code class=\"language-javascript\">useMemo</code>.</p>\n<h3 id=\"usecallback\"><a class=\"anchor\" href=\"/react/hooks-reference#usecallback\"></a><code class=\"language-javascript\">useCallback</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Retorna um callback <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Memoization\">memoizado</a>.</p>\n<p>Recebe como argumentos, um callback e um array. <code class=\"language-javascript\">useCallback</code> retornar\u00e1 uma vers\u00e3o memoizada do <code class=\"language-javascript\">callback</code> que s\u00f3 muda se uma das entradas tiverem sido alteradas. Isto \u00e9 \u00fatil quando utilizamos callbacks a fim de otimizar componentes filhos, que dependem da igualdade de refer\u00eancia para evitar renderiza\u00e7\u00f5es desnecess\u00e1rias (como por exemplo <code class=\"language-javascript\">shouldComponentUpdate</code>).</p>\n<p><code class=\"language-javascript\">useCallback(fn, inputs)</code> \u00e9 equivalente a <code class=\"language-javascript\">useMemo(() =&gt; fn, inputs)</code></p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>O array n\u00e3o \u00e9 usado como argumento para o callback. Conceitualmente, por\u00e9m, \u00e9 isso que eles representam: todos os valores referenciados dentro da fun\u00e7\u00e3o tamb\u00e9m devem aparecer no array passado como argumento. No futuro, um compilador suficientemente avan\u00e7ado poderia criar este array automaticamente.</p>\n<p>Recomendamos usar as regras do <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> como parte do nosso pacote <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Ele avisa quando as depend\u00eancias s\u00e3o especificadas incorretamente e sugere uma corre\u00e7\u00e3o.</p>\n</div>\n<h3 id=\"usememo\"><a class=\"anchor\" href=\"/react/hooks-reference#usememo\"></a><code class=\"language-javascript\">useMemo</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Retorna um valor <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Memoization\">memoizado</a>.</p>\n<p>Recebe uma fun\u00e7\u00e3o <code class=\"language-javascript\">create</code> e um array como argumentos. O <code class=\"language-javascript\">useMemo</code> s\u00f3 recuperar\u00e1 o valor memoizado quando o array receber uma atualiza\u00e7\u00e3o. Esta otimiza\u00e7\u00e3o ajuda a evitar c\u00e1lculos caros em cada renderiza\u00e7\u00e3o.</p>\n<p>Lembre-se de que a fun\u00e7\u00e3o passada para <code class=\"language-javascript\">useMemo</code> ser\u00e1 executa durante a renderiza\u00e7\u00e3o. N\u00e3o fa\u00e7a nada l\u00e1 que voc\u00ea normalmente n\u00e3o faria ao renderizar. Por exemplo, os <code class=\"language-javascript\">side effects</code> pertencem a <code class=\"language-javascript\">useEffect</code>, n\u00e3o \u00e0 <code class=\"language-javascript\">useMemo</code>.</p>\n<p>Se nenhum array for fornecido, um novo valor ser\u00e1 calculado em cada renderiza\u00e7\u00e3o.</p>\n<p><strong>Voc\u00ea pode confiar em <code class=\"language-javascript\">useMemo</code> como uma otimiza\u00e7\u00e3o de desempenho, n\u00e3o como uma garantia sem\u00e2ntica.</strong> No futuro, o React pode escolher \u201cesquecer\u201d alguns valores anteriormente agrupados e recalcul\u00e1-los na pr\u00f3xima renderiza\u00e7\u00e3o, por exemplo, para liberar mem\u00f3ria para outros componentes. Escreva seu c\u00f3digo para que ele ainda funcione sem <code class=\"language-javascript\">useMemo</code> \u2014 e depois adicione-o para otimizar o desempenho.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>O array de entradas n\u00e3o \u00e9 passado como argumento para a fun\u00e7\u00e3o. Conceitualmente, por\u00e9m, \u00e9 isso que eles representam: todos os valores referenciados dentro da fun\u00e7\u00e3o tamb\u00e9m devem aparecer no array passado como argumento. No futuro, um compilador suficientemente avan\u00e7ado poderia criar este array automaticamente.</p>\n<p>Recomendamos usar as regras do <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> como parte do nosso pacote <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Ele avisa quando as depend\u00eancias s\u00e3o especificadas incorretamente e sugere uma corre\u00e7\u00e3o.</p>\n</div>\n<h3 id=\"useref\"><a class=\"anchor\" href=\"/react/hooks-reference#useref\"></a><code class=\"language-javascript\">useRef</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> refContainer <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">useRef</code> retorna um objeto <code class=\"language-javascript\">ref</code> mut\u00e1vel, no qual a propriedade <code class=\"language-javascript\">.current</code> \u00e9 inicializada para o argumento passado (<code class=\"language-javascript\">initialValue</code>). O objeto retornado persistir\u00e1 durante todo o ciclo de vida do componente.</p>\n<p>Um caso comum de uso \u00e9 o acesso imperativamente a um componente filho:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TextInputWithFocusButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputEl <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// `current` aponta para o evento de `focus` gerado pelo campo de texto</span>\n    inputEl<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputEl<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onButtonClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Focus no input</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Essencialmente, <code class=\"language-javascript\">useRef</code> \u00e9 como uma \u201ccaixa\u201d que pode conter um valor mut\u00e1vel em sua propriedade <code class=\"language-javascript\">.current</code>.</p>\n<p>Voc\u00ea pode estar familiarizado com os refs principalmente como uma forma de <a href=\"/react/refs-and-the-dom\">acessar o DOM</a>. Se voc\u00ea passar um objeto ref para React com <code class=\"language-javascript\">&lt;div ref = {myRef} /&gt;</code>, React definir\u00e1 sua propriedade <code class=\"language-javascript\">.current</code> para o n\u00f3 DOM correspondente sempre que esse n\u00f3 for alterado.</p>\n<p>No entanto, <code class=\"language-javascript\">useRef ()</code> \u00e9 \u00fatil para mais do que o atributo <code class=\"language-javascript\">ref</code>. \u00c9 <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">\u00fatil para manter qualquer valor mut\u00e1vel em torno</a>, semelhante a como voc\u00ea usaria campos de inst\u00e2ncia em classes.</p>\n<p>Isso funciona porque <code class=\"language-javascript\">useRef ()</code> cria um objeto JavaScript simples. A \u00fanica diferen\u00e7a entre <code class=\"language-javascript\">useRef ()</code> e a cria\u00e7\u00e3o de um objeto <code class=\"language-javascript\">{current: ...}</code> \u00e9 que <code class=\"language-javascript\">useRef</code> lhe dar\u00e1 o mesmo objeto ref em cada render.</p>\n<p>Tenha em mente que o <code class=\"language-javascript\">useRef</code> <em>n\u00e3o</em> avisa quando o conte\u00fado \u00e9 alterado. Mover a propriedade <code class=\"language-javascript\">.current</code> n\u00e3o causa uma nova renderiza\u00e7\u00e3o. Se voc\u00ea quiser executar algum c\u00f3digo quando o React anexar ou desanexar um ref a um n\u00f3 DOM, conv\u00e9m usar um <a href=\"/react/hooks-faq#how-can-i-measure-a-dom-node\">callback ref</a>.</p>\n<h3 id=\"useimperativehandle\"><a class=\"anchor\" href=\"/react/hooks-reference#useimperativehandle\"></a><code class=\"language-javascript\">useImperativeHandle</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> createHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>deps<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">useImperativeHandle</code> personaliza o valor da inst\u00e2ncia que est\u00e1 exposta aos componentes pai ao usar <code class=\"language-javascript\">ref</code>. Como sempre, na maioria dos casos, seria bom evitar um c\u00f3digo imperativo usando refs. O <code class=\"language-javascript\">useImperativeHandle</code> deve ser usado com <a href=\"/react/react-api#reactforwardref\"><code class=\"language-javascript\">forwardRef</code></a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nFancyInput <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>FancyInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Neste exemplo, um componente pai que renderiza <code class=\"language-javascript\">&lt;FancyInput ref={inputRef} /&gt;</code> seria capaz de chamar <code class=\"language-javascript\">inputRef.current.focus()</code>.</p>\n<h3 id=\"uselayouteffect\"><a class=\"anchor\" href=\"/react/hooks-reference#uselayouteffect\"></a><code class=\"language-javascript\">useLayoutEffect</code> </h3>\n<p>A assinatura \u00e9 id\u00eantica a <code class=\"language-javascript\">useEffect</code>, mas dispara sincronizadamente ap\u00f3s todas as altera\u00e7\u00f5es no DOM. Use isto para ler o layout do DOM e renderizar sincronizadamente. Atualiza\u00e7\u00f5es agendadas dentro de <code class=\"language-javascript\">useLayoutEffect</code> ser\u00e3o liberadas de forma s\u00edncrona, antes que o navegador tenha a chance de atualizar.</p>\n<p>Prefira o padr\u00e3o <code class=\"language-javascript\">useEffect</code> quando poss\u00edvel, para evitar bloquear atualiza\u00e7\u00f5es visuais.</p>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Se voc\u00ea est\u00e1 migrando c\u00f3digo de um componente de classe, <code class=\"language-javascript\">useLayoutEffect</code> dispara na mesma fase que <code class=\"language-javascript\">componentDidMount</code> e <code class=\"language-javascript\">componentDidUpdate</code>, No entanto, <strong>recomendamos iniciar com <code class=\"language-javascript\">useEffect</code> primeiro</strong> e apenas tentar <code class=\"language-javascript\">useLayoutEffect</code> se isso causar algum problema.</p>\n<p>Se voc\u00ea usar a renderiza\u00e7\u00e3o do servidor, tenha em mente que <em>nem</em> <code class=\"language-javascript\">useLayoutEffect</code> nem <code class=\"language-javascript\">useEffect</code> podem ser executados at\u00e9 que o JavaScript seja baixado. \u00c9 por isso que React avisa quando um componente renderizado pelo servidor cont\u00e9m <code class=\"language-javascript\">useLayoutEffect</code>. Para corrigir isso, mova essa l\u00f3gica para <code class=\"language-javascript\">useEffect</code> (se n\u00e3o for necess\u00e1rio para a primeira renderiza\u00e7\u00e3o) ou retarde a exibi\u00e7\u00e3o desse componente at\u00e9 depois que o cliente renderizar (se o HTML parecer quebrado at\u00e9 que <code class=\"language-javascript\">useLayoutEffect</code> seja executado).</p>\n<p>Para excluir um componente que precisa de efeitos de layout do HTML renderizado pelo servidor, renderize-o condicionalmente com <code class=\"language-javascript\">showChild &amp;&amp; &lt;Child /&gt;</code> e adie a exibi\u00e7\u00e3o dele com <code class=\"language-javascript\">useEffect (() =&gt; { setShowChild(true); }, [])</code>. Dessa forma, a UI n\u00e3o parece quebrada antes da hidrata\u00e7\u00e3o.</p>\n</div>\n<h3 id=\"usedebugvalue\"><a class=\"anchor\" href=\"/react/hooks-reference#usedebugvalue\"></a><code class=\"language-javascript\">useDebugValue</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useDebugValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">useDebugValue</code> pode ser usado para exibir um <code class=\"language-javascript\">label</code> em um <em>custom hook</em> em React DevTools.</p>\n<p>Por exemplo, considere o custom hook <code class=\"language-javascript\">useFriendStatus</code> descrito em <a href=\"/react/hooks-custom\">\u201cCriando seus pr\u00f3prios Hooks\u201d</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Mostra um `label` no DevTools ao lado desse hook</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ex. \"FriendStatus: Online\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useDebugValue</span><span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>N\u00e3o recomendamos adicionar valores de depura\u00e7\u00e3o a cada custom hook criado. \u00c9 mais valioso para <code class=\"language-javascript\">custom hooks</code> que s\u00e3o partes de bibliotecas compartilhadas.</p>\n</div>\n<h4 id=\"defer-formatting-debug-values\"><a class=\"anchor\" href=\"/react/hooks-reference#defer-formatting-debug-values\"></a>Adiar a formata\u00e7\u00e3o de valores de depura\u00e7\u00e3o </h4>\n<p>Em alguns casos, exibir um valor formatado pode ser uma opera\u00e7\u00e3o cara. Tamb\u00e9m \u00e9 desnecess\u00e1rio a menos que um hook seja realmente inspecionado.</p>\n<p>Por esta raz\u00e3o, <code class=\"language-javascript\">useDebugValue</code> aceita uma fun\u00e7\u00e3o de formata\u00e7\u00e3o como um segundo par\u00e2metro opcional. Esta fun\u00e7\u00e3o s\u00f3 \u00e9 chamada se os hooks forem inspecionados. Ele recebe o valor de depura\u00e7\u00e3o como par\u00e2metro e deve retornar um valor de exibi\u00e7\u00e3o formatado.</p>\n<p>Por exemplo, um <code class=\"language-javascript\">custom hook</code> que retornou um valor <code class=\"language-javascript\">Date</code> poderia evitar chamar a fun\u00e7\u00e3o <code class=\"language-javascript\">toDateString</code> desnecessariamente passando o seguinte formatador:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useDebugValue</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token parameter\">date</span> <span class=\"token operator\">=&gt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toDateString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/hooks-reference.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-reference", "nav": ["/react/hooks-custom", "/react/hooks-faq"]}, {"key": "8. Hooks FAQ", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p><em>Hooks</em> s\u00e3o uma nova adi\u00e7\u00e3o ao React 16.8. Eles permitem que voc\u00ea use o state e outros recursos do React sem escrever uma classe.</p>\n<p>Esta p\u00e1gina responde algumas das perguntas mais frequentes sobre <a href=\"/react/hooks-overview\">Hooks</a>.</p>\n<!--\n  if you ever need to regenerate this, this snippet in the devtools console might help:\n\n  $$('.anchor').map(a =>\n    `${' '.repeat(2 * +a.parentNode.nodeName.slice(1))}` +\n    `[${a.parentNode.textContent}](${a.getAttribute('href')})`\n  ).join('\\n')\n-->\n<ul>\n<li>\n<p><strong><a href=\"/react/hooks-faq#adoption-strategy\">Estrat\u00e9gia de Ado\u00e7\u00e3o</a></strong></p>\n<ul>\n<li><a href=\"/react/hooks-faq#which-versions-of-react-include-hooks\">Quais vers\u00f5es do React incluem Hooks?</a></li>\n<li><a href=\"/react/hooks-faq#do-i-need-to-rewrite-all-my-class-components\">Preciso reescrever todos os meus componentes com classe?</a></li>\n<li><a href=\"/react/hooks-faq#what-can-i-do-with-hooks-that-i-couldnt-with-classes\">O que eu posso fazer com Hooks que eu n\u00e3o podia fazer com classes?</a></li>\n<li><a href=\"/react/hooks-faq#how-much-of-my-react-knowledge-stays-relevant\">Quanto do meu conhecimento de React continua relevante?</a></li>\n<li><a href=\"/react/hooks-faq#should-i-use-hooks-classes-or-a-mix-of-both\">Devo usar Hooks, classes ou um misto dos dois?</a></li>\n<li><a href=\"/react/hooks-faq#do-hooks-cover-all-use-cases-for-classes\">Hooks cobrem todos os casos de uso para classes?</a></li>\n<li><a href=\"/react/hooks-faq#do-hooks-replace-render-props-and-higher-order-components\">Hooks substituem render props e HOC (componente de alta-ordem, do ingl\u00eas <em>high-order component</em>)?</a></li>\n<li><a href=\"/react/hooks-faq#what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router\">O que Hooks significam para APIs populares como o connect() do Redux e o React Router?</a></li>\n<li><a href=\"/react/hooks-faq#do-hooks-work-with-static-typing\">Hooks funcionam com tipagem est\u00e1tica?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-test-components-that-use-hooks\">Como testar componentes que usam Hooks?</a></li>\n<li><a href=\"/react/hooks-faq#what-exactly-do-the-lint-rules-enforce\">O que exatamente as regras de lint imp\u00f5em?</a></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"/react/hooks-faq#from-classes-to-hooks\">De Classes para Hooks</a></strong></p>\n<ul>\n<li><a href=\"/react/hooks-faq#how-do-lifecycle-methods-correspond-to-hooks\">Como os m\u00e9todos de ciclo de vida correspondem aos Hooks?</a></li>\n<li><a href=\"/react/hooks-faq#how-can-i-do-data-fetching-with-hooks\">Como posso fazer a busca de dados com Hooks?</a></li>\n<li><a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">Existe algo como vari\u00e1veis de inst\u00e2ncia?</a></li>\n<li><a href=\"/react/hooks-faq#should-i-use-one-or-many-state-variables\">Devo usar uma ou muitas vari\u00e1veis de estado?</a></li>\n<li><a href=\"/react/hooks-faq#can-i-run-an-effect-only-on-updates\">Posso usar um efeito somente em updates?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-get-the-previous-props-or-state\">Como acessar as props ou o estado anterior?</a></li>\n<li><a href=\"/react/hooks-faq#why-am-i-seeing-stale-props-or-state-inside-my-function\">Por que estou vendo props obsoletos ou state dentro da minha fun\u00e7\u00e3o?</a></li>\n<li><a href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\">Como implementar getDerivedStateFromProps?</a></li>\n<li><a href=\"/react/hooks-faq#is-there-something-like-forceupdate\">Existe algo como forceUpdate?</a></li>\n<li><a href=\"/react/hooks-faq#can-i-make-a-ref-to-a-function-component\">Posso fazer uma ref para um componente de fun\u00e7\u00e3o?</a></li>\n<li><a href=\"/react/hooks-faq#how-can-i-measure-a-dom-node\">Como posso medir um n\u00f3 DOM?</a></li>\n<li><a href=\"/react/hooks-faq#what-does-const-thing-setthing--usestate-mean\">O que const [thing, setThing] = useState() significa?</a></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"/react/hooks-faq#performance-optimizations\">Otimiza\u00e7\u00f5es de Performance</a></strong></p>\n<ul>\n<li><a href=\"/react/hooks-faq#can-i-skip-an-effect-on-updates\">Posso pular um efeito nos updates?</a></li>\n<li><a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">\u00c9 seguro omitir fun\u00e7\u00f5es da lista de depend\u00eancias?</a></li>\n<li><a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">O que posso fazer se minhas depend\u00eancias de efeito mudarem com muita frequ\u00eancia?</a></li>\n<li><a href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\">Como implementar shouldComponentUpdate?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-memoize-calculations\">Como memorizar c\u00e1lculos?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\">Como criar objetos custosos a demanda?</a></li>\n<li><a href=\"/react/hooks-faq#are-hooks-slow-because-of-creating-functions-in-render\">Hooks s\u00e3o mais lentos por criar fun\u00e7\u00f5es no render?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\">Como evitar passar callbacks para baixo?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-read-an-often-changing-value-from-usecallback\">Como ler um valor frequentemente vari\u00e1vel de useCallback?</a></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"/react/hooks-faq#under-the-hood\">Por detr\u00e1s das cortinas</a></strong></p>\n<ul>\n<li><a href=\"/react/hooks-faq#how-does-react-associate-hook-calls-with-components\">Como o React associa chamadas de Hooks com componentes?</a></li>\n<li><a href=\"/react/hooks-faq#what-is-the-prior-art-for-hooks\">Quais s\u00e3o as refer\u00eancias que influ\u00eanciaram a cria\u00e7\u00e3o dos Hooks?</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"adoption-strategy\"><a class=\"anchor\" href=\"/react/hooks-faq#adoption-strategy\"></a>Estrat\u00e9gia de Ado\u00e7\u00e3o </h2>\n<h3 id=\"which-versions-of-react-include-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#which-versions-of-react-include-hooks\"></a>Quais vers\u00f5es do React incluem Hooks? </h3>\n<p>Come\u00e7ando com 16.8.0, React inclui uma implementa\u00e7\u00e3o est\u00e1vel dos Hooks para:</p>\n<ul>\n<li>React DOM</li>\n<li>React Native</li>\n<li>React DOM Server</li>\n<li>React Test Renderer</li>\n<li>React Shallow Renderer</li>\n</ul>\n<p>Note que <strong>para habilitar Hooks, todos os pacotes precisam estar na vers\u00e3o 16.8.0 ou maior</strong>. Hooks n\u00e3o v\u00e3o funcionar se voc\u00ea esquecer de atualizar, por exemplo, o React DOM.</p>\n<p><a class=\"external-link\" href=\"https://reactnative.dev/blog/2019/03/12/releasing-react-native-059\">React Native 0.59</a> e superiores suportam Hooks.</p>\n<h3 id=\"do-i-need-to-rewrite-all-my-class-components\"><a class=\"anchor\" href=\"/react/hooks-faq#do-i-need-to-rewrite-all-my-class-components\"></a>Preciso reescrever todos os meus componentes usando classe? </h3>\n<p>N\u00e3o. N\u00e3o existe <a href=\"/react/hooks-intro#gradual-adoption-strategy\">nenhum plano</a> para remover classes do React \u2014 todos n\u00f3s precisamos continuar entregando produtos e n\u00e3o podemos reescrever tudo. Recomendamos tentar usar Hooks em c\u00f3digo novo.</p>\n<h3 id=\"what-can-i-do-with-hooks-that-i-couldnt-with-classes\"><a class=\"anchor\" href=\"/react/hooks-faq#what-can-i-do-with-hooks-that-i-couldnt-with-classes\"></a>O que eu posso fazer com Hooks que eu n\u00e3o podia fazer com classes? </h3>\n<p>Hooks oferecem uma nova maneira, poderosa e expressiva, de reutilizar funcionalidade entre componentes. <a href=\"/react/hooks-custom\">\u201cConstruindo Seu Pr\u00f3prio Hook\u201d</a> fornece um vislumbre do que \u00e9 poss\u00edvel. <a class=\"external-link\" href=\"https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889\">Este artigo</a> feito por um membro da equipe principal do React mergulha fundo nas novas possibilidades desbloqueadas por Hooks.</p>\n<h3 id=\"how-much-of-my-react-knowledge-stays-relevant\"><a class=\"anchor\" href=\"/react/hooks-faq#how-much-of-my-react-knowledge-stays-relevant\"></a>Quanto do meu conhecimento de React continua relevante? </h3>\n<p>Hooks s\u00e3o uma maneira mais direta de usar as funcionalidades do React que voc\u00ea j\u00e1 conhece \u2014 como estado, ciclo de vida, context e refs. Eles n\u00e3o mudam fundamentalmente como o React funciona e seu conhecimento de componentes, props e fluxo de dados de cima para baixo continua relevante.</p>\n<p>Hooks tem sua curva de aprendizado. Se tiver algo faltando nessa documenta\u00e7\u00e3o, <a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/issues/new\">abra um issue</a> e n\u00f3s vamos tentar ajudar.</p>\n<h3 id=\"should-i-use-hooks-classes-or-a-mix-of-both\"><a class=\"anchor\" href=\"/react/hooks-faq#should-i-use-hooks-classes-or-a-mix-of-both\"></a>Devo usar Hooks, classes ou um misto dos dois? </h3>\n<p>Quando voc\u00ea estiver pronto, encorajamos voc\u00ea a come\u00e7ar usando Hooks em novos componentes que voc\u00ea escrever. Tenha certeza que todos no seu time est\u00e3o de acordo em us\u00e1-los e est\u00e3o familiarizados com a documenta\u00e7\u00e3o. N\u00f3s n\u00e3o recomendamos reescrever suas classes existentes para Hooks a menos que voc\u00ea tenha planejado reescrev\u00ea-las previamente (por exemplo, para arrumar bugs).</p>\n<p>Voc\u00ea n\u00e3o pode usar Hooks <em>dentro</em> de um componente classe, mas voc\u00ea definitivamente pode misturar classes e fun\u00e7\u00f5es com Hooks em uma \u00fanica \u00e1rvore. Se um componente \u00e9 uma classe ou uma fun\u00e7\u00e3o que usa Hooks \u00e9 um detalhe de implementa\u00e7\u00e3o daquele componente. A longo prazo, n\u00f3s esperamos que Hooks sejam a principal maneira que as pessoas escrevam componentes React.</p>\n<h3 id=\"do-hooks-cover-all-use-cases-for-classes\"><a class=\"anchor\" href=\"/react/hooks-faq#do-hooks-cover-all-use-cases-for-classes\"></a>Hooks cobrem todos os casos de uso para classes? </h3>\n<p>Nosso objetivo \u00e9 que Hooks cubra todos os casos de uso o mais r\u00e1pido poss\u00edvel. Ainda n\u00e3o h\u00e1 Hook equivalente para os ciclos de vida <code class=\"language-javascript\">getSnapshotBeforeUpdate</code>, <code class=\"language-javascript\">getDerivedStateFromError</code> e <code class=\"language-javascript\">componentDidCatch</code>, que s\u00e3o mais incomuns, mas planejamos adiciona-los em breve.</p>\n<h3 id=\"do-hooks-replace-render-props-and-higher-order-components\"><a class=\"anchor\" href=\"/react/hooks-faq#do-hooks-replace-render-props-and-higher-order-components\"></a>Hooks substituem render props e HOC (componente de alta-ordem, do ingl\u00eas <em>high-order component</em>)? </h3>\n<p>Frequentemente, render props e HOC renderizam somente um filho. N\u00f3s achamos que Hooks s\u00e3o uma maneira mais simples de atender esse caso de uso. Ainda existe lugar para ambos os padr\u00f5es (por exemplo, um componente de scroll virtual talvez tenha uma prop <code class=\"language-javascript\">renderItem</code>, ou um container visual talvez tenha sua pr\u00f3pria estrutura DOM). Mas na maioria dos casos, Hooks ser\u00e3o suficiente e podem ajudar a reduzir o aninhamento na sua \u00e1rvore.</p>\n<h3 id=\"what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router\"><a class=\"anchor\" href=\"/react/hooks-faq#what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router\"></a>O que Hooks significam para APIs populares como o <code class=\"language-javascript\">connect()</code> do Redux e o React Router? </h3>\n<p>Voc\u00ea pode continuar a usar exatamente as mesmas APIs que sempre usou; elas v\u00e3o continuar funcionando.</p>\n<p>React Redux desde a v7.1.0 <a class=\"external-link\" href=\"https://react-redux.js.org/api/hooks\">suporta Hooks API</a> e exp\u00f5e hooks como <code class=\"language-javascript\">useDispatch</code> ou <code class=\"language-javascript\">useSelector</code>.</p>\n<p>React Router <a class=\"external-link\" href=\"https://reacttraining.com/react-router/web/api/Hooks\">suporta hooks</a> desde a v5.1.</p>\n<p>Outras bibliotecas tamb\u00e9m podem suportar hooks no futuro.</p>\n<h3 id=\"do-hooks-work-with-static-typing\"><a class=\"anchor\" href=\"/react/hooks-faq#do-hooks-work-with-static-typing\"></a>Hooks funcionam com tipagem est\u00e1tica? </h3>\n<p>Hooks foram planejados com tipagem est\u00e1tica em mente. Como eles s\u00e3o fun\u00e7\u00f5es, eles s\u00e3o mais f\u00e1ceis de tipar corretamente do que padr\u00f5es como high-order components. As \u00faltimas defini\u00e7\u00f5es do React para Flow e Typescript incluem suporte para React Hooks.</p>\n<p>Importante observar, que Hooks customizados te d\u00e3o o poder de restringir a API do React se voc\u00ea quiser usa-la de alguma maneira mais rigorosa. React te d\u00e1 as primitivas mas voc\u00ea pode combina-las de diferentes maneiras al\u00e9m das que fornecemos.</p>\n<h3 id=\"how-to-test-components-that-use-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-test-components-that-use-hooks\"></a>Como testar componentes que usam Hooks? </h3>\n<p>Do ponto de vista do React, um componente usando Hooks \u00e9 somente um componente regular. Se sua solu\u00e7\u00e3o para testes n\u00e3o depende do funcionamento interno do React, testar componentes com Hooks n\u00e3o deveria ser diferente de como voc\u00ea normalmente testa componentes.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Em <a href=\"/react/testing-recipes\">Testing Recipes</a> tem muitos exemplos que voc\u00ea pode copiar e colar.</p>\n</div>\n<p>Por exemplo, digamos que temos este componente contador:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Click me\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>N\u00f3s vamos testa-lo usando React DOM. Para garantir que o comportamento corresponde ao que acontece no browser, n\u00f3s vamos envolver o c\u00f3digo que renderiza e atualiza com <a href=\"/react/test-utils#act\"><code class=\"language-javascript\">ReactTestUtils.act()</code></a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'./Counter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can render and update a counter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Testa a primeira renderiza\u00e7\u00e3o e efeito</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 0 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 0 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Testa segunda renderiza\u00e7\u00e3o e efeito</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>bubbles<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 1 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 1 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As chamadas para <code class=\"language-javascript\">act()</code> tamb\u00e9m v\u00e3o descarregar os efeitos dentro dele.</p>\n<p>Se voc\u00ea precisa testar um Hook customizado, voc\u00ea pode faze-lo criando um componente no seu teste e usando o seu Hook nele. Ent\u00e3o voc\u00ea pode testar o componente que escreveu.</p>\n<p>Para reduzir o boilerplate, n\u00f3s recomendamos usar <a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a> que \u00e9 projetada para incentivar a escrever testes que usam seus componentes como usu\u00e1rios finais usam.</p>\n<p>Para mais informa\u00e7\u00f5es, confira <a href=\"/react/testing-recipes\">Testing Recipes</a>.</p>\n<h3 id=\"what-exactly-do-the-lint-rules-enforce\"><a class=\"anchor\" href=\"/react/hooks-faq#what-exactly-do-the-lint-rules-enforce\"></a>O que exatamente as <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">regras de lint</a> imp\u00f5em? </h3>\n<p>N\u00f3s fornecems um <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">plugin ESLint</a> que imp\u00f5em <a href=\"/react/hooks-rules\">regras de Hooks</a> para evitar bugs. Elas assumem que qualquer fun\u00e7\u00e3o come\u00e7ando com \u201d<code class=\"language-javascript\">use</code>\u201d e uma letra mai\u00fascula em segunda \u00e9 um Hook. N\u00f3s reconhecemos que esta heur\u00edstica n\u00e3o \u00e9 perfeita e que talvez aconte\u00e7am alguns falso positivos mas sem uma conven\u00e7\u00e3o simplesmente n\u00e3o h\u00e1 como fazer Hooks funcionarem bem \u2014 e nomes mais longos iriam desencorajar pessoas tanto de adotar Hooks ou de seguir a conven\u00e7\u00e3o.</p>\n<p>Em particular, a regra imp\u00f5e que:</p>\n<ul>\n<li>Chamadas para Hooks ocorrem ou dentro de uma fun\u00e7\u00e3o usando <code class=\"language-javascript\">PascalCase</code> (tratada como componente) ou dentro de outra fun\u00e7\u00e3o <code class=\"language-javascript\">useSomething</code> (tratada como um Hook customizado).</li>\n<li>Hooks s\u00e3o chamados na mesma ordem em toda renderiza\u00e7\u00e3o.</li>\n</ul>\n<p>Existem mais algumas heur\u00edsticas e talvez elas mudem ao longo do tempo conforme n\u00f3s regulamos as regras para balancear entre encontrar bugs e evitar falsos positivos.</p>\n<h2 id=\"from-classes-to-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#from-classes-to-hooks\"></a>De Classes para Hooks </h2>\n<h3 id=\"how-do-lifecycle-methods-correspond-to-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#how-do-lifecycle-methods-correspond-to-hooks\"></a>Como os m\u00e9todos de ciclo de vida correspondem aos Hooks? </h3>\n<ul>\n<li><code class=\"language-javascript\">constructor</code>: Fun\u00e7\u00f5es n\u00e3o precisam de um constructor. Voc\u00ea pode inicializar o estado com o <a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a>. Se calcular o estado for custoso, voc\u00ea pode passar uma fun\u00e7\u00e3o para o <code class=\"language-javascript\">useState</code>.</li>\n<li><code class=\"language-javascript\">getDerivedStateFromProps</code>: N\u00e3o \u00e9 necess\u00e1rio, agende um update <a href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\">enquanto estiver renderizando</a>.</li>\n<li><code class=\"language-javascript\">shouldComponentUpdate</code>: Veja <code class=\"language-javascript\">React.memo</code> <a href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\">abaixo</a>.</li>\n<li><code class=\"language-javascript\">render</code>: Este \u00e9 o pr\u00f3prio corpo da fun\u00e7\u00e3o.</li>\n<li><code class=\"language-javascript\">componentDidMount</code>, <code class=\"language-javascript\">componentDidUpdate</code>, <code class=\"language-javascript\">componentWillUnmount</code>: O <a href=\"/react/hooks-reference#useeffect\">Hook <code class=\"language-javascript\">useEffect</code></a> pode expressar todas as combina\u00e7\u00f5es desses, (incluindo casos <a href=\"/react/hooks-faq#can-i-skip-an-effect-on-updates\">menos</a> <a href=\"/react/hooks-faq#can-i-run-an-effect-only-on-updates\">comuns</a>).</li>\n<li><code class=\"language-javascript\">getSnapshotBeforeUpdate</code>, <code class=\"language-javascript\">componentDidCatch</code> e <code class=\"language-javascript\">getDerivedStateFromError</code>: N\u00e3o h\u00e1 Hooks equivalentes para esses m\u00e9todos ainda, mas eles ser\u00e3o adicionados em breve.</li>\n</ul>\n<h3 id=\"how-can-i-do-data-fetching-with-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#how-can-i-do-data-fetching-with-hooks\"></a>Como posso fazer a busca de dados com Hooks? </h3>\n<p>Aqui est\u00e1 uma <a class=\"external-link\" href=\"https://codesandbox.io/s/jvvkoo8pq3\">pequena demonstra\u00e7\u00e3o</a> para voc\u00ea come\u00e7ar. Para saber mais, confira <a class=\"external-link\" href=\"https://www.robinwieruch.de/react-hooks-fetch-data/\">o artigo</a> sobre a obten\u00e7\u00e3o de dados com Hooks.</p>\n<h3 id=\"is-there-something-like-instance-variables\"><a class=\"anchor\" href=\"/react/hooks-faq#is-there-something-like-instance-variables\"></a>Existe algo como vari\u00e1veis de inst\u00e2ncia? </h3>\n<p>Sim! O Hook <a href=\"/react/hooks-reference#useref\"><code class=\"language-javascript\">useRef()</code></a> n\u00e3o \u00e9 somente para DOM. O objeto \u201cref\u201d \u00e9 um container gen\u00e9rico no qual a propriedade <code class=\"language-javascript\">current</code> \u00e9 mut\u00e1vel e pode conter qualquer valor, similar a uma propriedade de inst\u00e2ncia de uma classe.</p>\n<p>Voc\u00ea pode escrever nele de dentro do <code class=\"language-javascript\">useEffect</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> intervalRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    intervalRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se n\u00f3s s\u00f3 quis\u00e9ssemos criar um intervalo, n\u00e3o precisar\u00edamos de ref (<code class=\"language-javascript\">id</code> poderia ser local do efeito), mas \u00e9 \u00fatil se quisermos limpar o intervalo usando um manipulador de eventos:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleCancelClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Conceitualmente, voc\u00ea pode pensar em refs como similares a vari\u00e1vels de inst\u00e2ncia em uma classe. A menos que voc\u00ea esteja fazendo <a href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\">inicializa\u00e7\u00e3o lazy</a>, evite definir refs durante a renderiza\u00e7\u00e3o \u2014 isso pode levar a comportamentos inesperados. Ao inv\u00e9s disso, normalmente voc\u00ea deseja modificar as refs nos manipuladores de eventos e efeitos.</p>\n<h3 id=\"should-i-use-one-or-many-state-variables\"><a class=\"anchor\" href=\"/react/hooks-faq#should-i-use-one-or-many-state-variables\"></a>Devo usar uma ou muitas vari\u00e1veis de estado? </h3>\n<p>Se voc\u00ea est\u00e1 vindo de classes, voc\u00ea pode ser tentado a sempre chamar <code class=\"language-javascript\">useState()</code> uma vez e por todo o estado em um \u00fanico objeto. Voc\u00ea pode fazer isso se quiser. Aqui segue um exemplo de um componente que segue o movimento do mouse. N\u00f3s guardamos sua posi\u00e7\u00e3o e tamanho no estado local:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> left<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> top<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora vamos dizer que queremos escrever uma l\u00f3gica que muda <code class=\"language-javascript\">left</code> e <code class=\"language-javascript\">top</code> quando o usu\u00e1rio move o seu mouse. Note que n\u00f3s temos que mesclar esses campos no estado anterior manualmente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleWindowMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Espalhando \"...state\" garante que width e height n\u00e3o se \"percam\"</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> top<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Nota: essa implementa\u00e7\u00e3o \u00e9 um pouco simplificada</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> handleWindowMouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> handleWindowMouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Isto \u00e9 porque quando atualizamos uma vari\u00e1vel de estado, n\u00f3s <em>substituimos</em> seu valor. \u00c9 diferente de <code class=\"language-javascript\">this.setState</code> em uma classe, que <em>mescla</em> os campos atualizados no objeto.</p>\n<p>Se voc\u00ea sente falta da mesclagem autom\u00e1tica, voc\u00ea poderia escrever um Hook customizado, <code class=\"language-javascript\">useLegacyState</code>, que mescla o update no objeto. No entanto, <strong>n\u00f3s recomendamos dividir o estado em m\u00faltiplas vari\u00e1veis de estado baseado nos valores que tendem a mudar juntos.</strong></p>\n<p>Por exemplo, poder\u00edamos dividir nosso componente em <code class=\"language-javascript\">position</code> e <code class=\"language-javascript\">size</code> e sempre substituir <code class=\"language-javascript\">position</code> sem a necessidade de mesclar:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">,</span> setPosition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> left<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> top<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">,</span> setSize<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleWindowMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> left<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> top<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Separar o estado em vari\u00e1veis independentes tamb\u00e9m tem outro benef\u00edcio. Torna mais f\u00e1cil para extrair uma l\u00f3gica relacionada para um Hook customizado posteriormente, como por exemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> position <span class=\"token operator\">=</span> <span class=\"token function\">useWindowPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">,</span> setSize<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">,</span> setPosition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> left<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> top<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> position<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note como n\u00f3s conseguimos mover a chamada <code class=\"language-javascript\">useState</code> da vari\u00e1vel de estado <code class=\"language-javascript\">position</code> e o efeito relacionado para um Hook customizado sem alterar o seu c\u00f3digo. Se todo o estado estivesse em um \u00fanico objeto, extrair seria mais dif\u00edcil.</p>\n<p>Tanto colocar todo estado em um \u00fanico <code class=\"language-javascript\">useState</code> e usar m\u00faltiplos <code class=\"language-javascript\">useState</code> para cada campo pode funcionar. Componentes tendem a ser mais leg\u00edveis quando voc\u00ea encontra um balan\u00e7o entre esses dois extremos e agrupa estados relacionados em algunas vari\u00e1veis de estado independentes. Se a l\u00f3gica do estado se torna muito complexa, n\u00f3s recomendamos <a href=\"/react/hooks-reference#usereducer\">gerenci\u00e1-la com um reducer</a> ou com um Hook customizado.</p>\n<h3 id=\"can-i-run-an-effect-only-on-updates\"><a class=\"anchor\" href=\"/react/hooks-faq#can-i-run-an-effect-only-on-updates\"></a>Posso usar um efeito somente em updates? </h3>\n<p>Esse \u00e9 um caso de uso raro. Se voc\u00ea precisar, voc\u00ea pode <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">usar uma ref mut\u00e1vel</a> para manualmente armazenar um valor boleano correspondente a se voc\u00ea est\u00e1 no primeiro render ou num subsequente, usando ent\u00e3o essa flag no seu efeito. (Se voc\u00ea se encontrar fazendo isso regularmente, pode criar um Hook customizado pra isso.)</p>\n<h3 id=\"how-to-get-the-previous-props-or-state\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-get-the-previous-props-or-state\"></a>Como acessar as props ou o estado anterior? </h3>\n<p>Atualmente, voc\u00ea pode fazer isso manualmente <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">com uma ref</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> prevCountRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    prevCountRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> prevCount <span class=\"token operator\">=</span> prevCountRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Now: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, before: </span><span class=\"token punctuation\">{</span>prevCount<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso pode ser um pouco confuso mas voc\u00ea pode extrair para um Hook customizado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> prevCount <span class=\"token operator\">=</span> <span class=\"token function\">usePrevious</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Now: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, before: </span><span class=\"token punctuation\">{</span>prevCount<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">usePrevious</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note como isso funcionaria para props, state ou qualquer outro valor calculado.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> calculation <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> prevCalculation <span class=\"token operator\">=</span> <span class=\"token function\">usePrevious</span><span class=\"token punctuation\">(</span>calculation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>\u00c9 poss\u00edvel que no futuro o React forne\u00e7a um Hook <code class=\"language-javascript\">usePrevious</code> pois esse \u00e9 um caso de uso relativamente comum.</p>\n<p>Veja tamb\u00e9m <a href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\">o padr\u00e3o recomendado para estado derivado</a>.</p>\n<h3 id=\"why-am-i-seeing-stale-props-or-state-inside-my-function\"><a class=\"anchor\" href=\"/react/hooks-faq#why-am-i-seeing-stale-props-or-state-inside-my-function\"></a>Por que estou vendo props obsoletos ou state dentro da minha fun\u00e7\u00e3o? </h3>\n<p>Qualquer fun\u00e7\u00e3o dentro de um componente, incluindo manipuladores de eventos e efeitos, \u201cv\u00ea\u201d as props e o state da renderiza\u00e7\u00e3o em que foi criado. Por exemplo, considere este c\u00f3digo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleAlertClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Voc\u00ea clicou: '</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Mostrar\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleAlertClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Mostrar aviso\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se voc\u00ea clicar primeiro em \u201cMostrar aviso\u201d e incrementar o contador, o alerta mostrar\u00e1 a vari\u00e1vel <code class=\"language-javascript\">count</code> <strong>no momento em que clicou no bot\u00e3o \u201cMostrar alerta\u201d</strong>. Isso evita erros causados pelo c\u00f3digo assumindo props e state n\u00e3o muda.</p>\n<p>Se voc\u00ea intencionalmente queser ler o state <em>lastest</em> de algum retorno de chamada assincrono, voc\u00ea poderia mant\u00ea-lo em <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">uma ref</a>, mude-o e leia a partir dele.</p>\n<p>Finalmente, outro poss\u00edvel motivo que voc\u00ea est\u00e1 vendo props obsoletos ou state \u00e9 se voc\u00ea usa a otimiza\u00e7\u00e3o do \u201carray de depend\u00eancia\u201d, mas n\u00e3o especificou corretamente todas as depend\u00eancias. Por exemplo, se um efeito especifica <code class=\"language-javascript\">[]</code> como o segundo argumento mas l\u00ea <code class=\"language-javascript\">someProp</code> dentro, ele continuar\u00e1 \u201cvendo\u201d o valor inicial de <code class=\"language-javascript\">someProps</code>. A solu\u00e7\u00e3o \u00e9 remover o array de depend\u00eancias ou corrigi-lo. Aqui est\u00e1 <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">como voc\u00ea pode lidar com fun\u00e7\u00f5es</a>, e aqui est\u00e1 <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">outras estrat\u00e9gias comuns</a> para executar efeitos com menos frequ\u00eancia sem ignorar incorretamente as depend\u00eancias.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Recomendamos usar as regras do <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> como parte do nosso pacote <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Ele avisa quando as depend\u00eancias s\u00e3o especificadas incorretamente e sugere uma corre\u00e7\u00e3o.</p>\n</div>\n<h3 id=\"how-do-i-implement-getderivedstatefromprops\"><a class=\"anchor\" href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\"></a>Como implementar <code class=\"language-javascript\">getDerivedStateFromProps</code>? </h3>\n<p>Enquanto voc\u00ea provavelmente <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">n\u00e3o precisa dele</a>, nos raros casos que voc\u00ea precisar (como ao implementar um componente de <code class=\"language-javascript\">&lt;Transition&gt;</code>), voc\u00ea pode atualizar o estado enquanto estiver renderizando. React vai re-renderizar o componente com o estado atualizado imediatamente ap\u00f3s sair do primeiro render, ent\u00e3o n\u00e3o seria custoso.</p>\n<p>Aqui, n\u00f3s guardamos o valor anterior da prop <code class=\"language-javascript\">row</code> em uma vari\u00e1vel de estado para que possamos comparar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ScrollView</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>row<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isScrollingDown<span class=\"token punctuation\">,</span> setIsScrollingDown<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>prevRow<span class=\"token punctuation\">,</span> setPrevRow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">!==</span> prevRow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Row mudou desde a ultima renderiza\u00e7\u00e3o. Atualize isScrollingDown.</span>\n    <span class=\"token function\">setIsScrollingDown</span><span class=\"token punctuation\">(</span>prevRow <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> row <span class=\"token operator\">&gt;</span> prevRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setPrevRow</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Scrolling down: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>isScrollingDown<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isto pode parecer estranho a princ\u00edpio, mas um update durante o render \u00e9 exatamente o que <code class=\"language-javascript\">getDerivedStateFromProps</code> sempre foi conceitualmente.</p>\n<h3 id=\"is-there-something-like-forceupdate\"><a class=\"anchor\" href=\"/react/hooks-faq#is-there-something-like-forceupdate\"></a>Existe algo como forceUpdate? </h3>\n<p>Ambos os Hooks <code class=\"language-javascript\">useState</code> e <code class=\"language-javascript\">useReducer</code> <a href=\"/react/hooks-reference#bailing-out-of-a-state-update\">evitam atualiza\u00e7\u00f5es</a> se o pr\u00f3ximo valor \u00e9 igual ao anterior. Alterar o estado diretamente e chamar <code class=\"language-javascript\">setState</code> n\u00e3o vai causar uma re-renderiza\u00e7\u00e3o.</p>\n<p>Normalmente, voc\u00ea n\u00e3o deve alterar o estado local no React. No entanto, como uma alternativa, voc\u00ea pode usar um contador incremental para for\u00e7ar um re-render mesmo se o estado n\u00e3o mudou:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>ignored<span class=\"token punctuation\">,</span> forceUpdate<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tente evitar esse padr\u00e3o se poss\u00edvel.</p>\n<h3 id=\"can-i-make-a-ref-to-a-function-component\"><a class=\"anchor\" href=\"/react/hooks-faq#can-i-make-a-ref-to-a-function-component\"></a>Posso fazer uma ref para um componente de fun\u00e7\u00e3o? </h3>\n<p>Enquanto voc\u00ea n\u00e3o deve precisar muito disso, voc\u00ea pode expor alguns m\u00e9todos imperativos para um parente com o Hook <a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a>.</p>\n<h3 id=\"how-can-i-measure-a-dom-node\"><a class=\"anchor\" href=\"/react/hooks-faq#how-can-i-measure-a-dom-node\"></a>Como posso medir um n\u00f3 DOM? </h3>\n<p>Uma maneira rudimentar de medir a posi\u00e7\u00e3o ou o tamanho de um n\u00f3 DOM \u00e9 usar um <a href=\"/react/refs-and-the-dom#callback-refs\">callback ref</a>. React chamar\u00e1 esse callback sempre que a ref for anexado a um n\u00f3 diferente. Aqui est\u00e1 uma <a class=\"external-link\" href=\"https://codesandbox.io/s/l7m0v5x4v9\">pequena demonstra\u00e7\u00e3o</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MeasureExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">,</span> setHeight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> measuredRef <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>measuredRef<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">O header acima tem </span><span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">px de altura</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>N\u00f3s n\u00e3o escolhemos <code class=\"language-javascript\">useRef</code> neste exemplo porque um objeto ref n\u00e3o nos avisa sobre <em>altera\u00e7\u00f5es</em> para o valor atual da ref. A utiliza\u00e7\u00e3o de um callback ref garante que <a class=\"external-link\" href=\"https://codesandbox.io/s/818zzk8m78\">mesmo que um componente filho exiba o n\u00f3 medido posteriormente</a> (e.g. em resposta a um clique), ainda somos notificados sobre isso no componente pai e podemos atualizar as medi\u00e7\u00f5es.</p>\n<p>Note que n\u00f3s passamos <code class=\"language-javascript\">[]</code> como um array de depend\u00eancias para <code class=\"language-javascript\">useCallback</code>. Isso garante que nosso ref callback n\u00e3o seja alterado entre as novas renderiza\u00e7\u00f5es e, portanto, o React n\u00e3o o chamar\u00e1 desnecessariamente.</p>\n<p>Neste exemplo, a ref de callback ser\u00e1 chamado somente quando o componente for montado e desmontado, pois o componente renderizado <code class=\"language-javascript\">&lt;h1&gt;</code> permance presente em todos os repetidores. Se voc\u00ea deseja ser notificado sempre que um componente \u00e9 redimensionado, voc\u00ea pode usar <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"><code class=\"language-javascript\">ResizeObserver</code></a> ou uma Hook de terceiros constru\u00eddo sobre ele.</p>\n<p>Se voc\u00ea quiser, voc\u00ea pode <a class=\"external-link\" href=\"https://codesandbox.io/s/m5o42082xy\">extrair essa l\u00f3gica</a> em um Hook reutiliz\u00e1vel:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MeasureExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rect<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>rect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">O header acima tem </span><span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">px de altura</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rect<span class=\"token punctuation\">,</span> setRect<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setRect</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>rect<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"what-does-const-thing-setthing--usestate-mean\"><a class=\"anchor\" href=\"/react/hooks-faq#what-does-const-thing-setthing--usestate-mean\"></a>O que <code class=\"language-javascript\">const [thing, setThing] = useState()</code> significa? </h3>\n<p>Se essa sintaxe n\u00e3o \u00e9 familiar para voc\u00ea, confira a <a href=\"/react/hooks-state#tip-what-do-square-brackets-mean\">explica\u00e7\u00e3o</a> na documenta\u00e7\u00e3o do Hook State.</p>\n<h2 id=\"performance-optimizations\"><a class=\"anchor\" href=\"/react/hooks-faq#performance-optimizations\"></a>Otimiza\u00e7\u00f5es de Performance </h2>\n<h3 id=\"can-i-skip-an-effect-on-updates\"><a class=\"anchor\" href=\"/react/hooks-faq#can-i-skip-an-effect-on-updates\"></a>Posso pular um efeito nos updates? </h3>\n<p>Sim. Veja <a href=\"/react/hooks-reference#conditionally-firing-an-effect\">disparando um efeito condicionalmente</a>. Note que esquecer de lidar com updates geralmente <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">introduz bugs</a>, por isso que este n\u00e3o \u00e9 o comportamento padr\u00e3o.</p>\n<h3 id=\"is-it-safe-to-omit-functions-from-the-list-of-dependencies\"><a class=\"anchor\" href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\"></a>\u00c9 seguro omitir fun\u00e7\u00f5es da lista de depend\u00eancias? </h3>\n<p>De um modo geral, n\u00e3o.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> someProp <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \ud83d\udd34 Isto n\u00e3o \u00e9 seguro (ele chama `doSomething` que usa` someProp`)</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>\u00c9 dif\u00edcil lembrar quais props ou state s\u00e3o usados por fun\u00e7\u00f5es fora do efeito. \u00c9 por isso que <strong>normalmente voc\u00ea vai querer declarar fun\u00e7\u00f5es necess\u00e1rias para um efeito <em>dentro</em> dele.</strong> Ent\u00e3o \u00e9 f\u00e1cil ver em quais valores do escopo do componente esse efeito depende:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> someProp <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>someProp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 OK (nosso efeito usa apenas `someProp`)</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se depois disso ainda n\u00e3o usarmos nenhum valor do escopo do componente, \u00e9 seguro especificar <code class=\"language-javascript\">[]</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 OK neste exemplo porque n\u00e3o usamos *nenhum* dos valores do escopo do componente</span></span></code></pre></div>\n<p>Dependendo do seu caso de uso, existem mais algumas op\u00e7\u00f5es descritas abaixo.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>N\u00f3s fornecemos o <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> regras do ESLint como parte do pacote <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Ele ajuda voc\u00ea a encontrar componentes que n\u00e3o lidam com atualiza\u00e7\u00f5es de forma consistente.</p>\n</div>\n<p>Vamos ver porque isso \u00e9 importante.</p>\n<p>Se voc\u00ea especificar uma <a href=\"/react/hooks-reference#conditionally-firing-an-effect\">lista de depend\u00eancias</a> como o \u00faltimo argumento para <code class=\"language-javascript\">useEffect</code>, <code class=\"language-javascript\">useLayoutEffect</code>, <code class=\"language-javascript\">useMemo</code>, <code class=\"language-javascript\">useCallback</code>, ou <code class=\"language-javascript\">useImperativeHandle</code>, ele deve incluir todos os valores usados dentro do callback e participar do fluxo de dados React. Isso inclui props, state e qualquer coisa derivada deles.</p>\n<p>\u00c9 <strong>somente</strong> seguro omitir uma fun\u00e7\u00e3o da lista de depend\u00eancias se nada nela (ou as fun\u00e7\u00f5es chamadas por ela) referenciar props, state ou valores derivados deles. Este exemplo tem um erro:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProductPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> productId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>product<span class=\"token punctuation\">,</span> setProduct<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://myapi/product/'</span> <span class=\"token operator\">+</span> productId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// // Usando productId prop</span></span>    <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \ud83d\udd34 Inv\u00e1lido porque `fetchProduct` usa `productId`</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>A corre\u00e7\u00e3o recomendada \u00e9 mover essa fun\u00e7\u00e3o <em>inside</em> do seu efeito</strong>. Isso torna mais f\u00e1cil ver quais props ou state seu efeito usa e garantir que todos sejam declarados:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProductPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> productId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>product<span class=\"token punctuation\">,</span> setProduct<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Ao mover essa fun\u00e7\u00e3o dentro do efeito, podemos ver claramente os valores que ela usa.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://myapi/product/'</span> <span class=\"token operator\">+</span> productId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>productId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 V\u00e1lido porque nosso efeito usa somente productId</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso tamb\u00e9m permite que voc\u00ea gerencie respostas fora de ordem com uma vari\u00e1vel local dentro do efeito:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> ignore <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://myapi/product/'</span> <span class=\"token operator\">+</span> productId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ignore<span class=\"token punctuation\">)</span> <span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> ignore <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>productId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>N\u00f3s movemos a fun\u00e7\u00e3o dentro do efeito para que n\u00e3o precise estar em sua lista de depend\u00eancias.</p>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Confira <a class=\"external-link\" href=\"https://codesandbox.io/s/jvvkoo8pq3\">esta pequena demostra\u00e7\u00e3o</a> e <a class=\"external-link\" href=\"https://www.robinwieruch.de/react-hooks-fetch-data/\">este artigo</a> para saber mais sobre a obten\u00e7\u00e3o de dados com Hooks.</p>\n</div>\n<p><strong>Se por alguma raz\u00e3o voc\u00ea <em>n\u00e3o pode</em> mover uma fun\u00e7\u00e3o dentro de um efeito, existem mais algumas op\u00e7\u00f5es:</strong></p>\n<ul>\n<li><strong>Voc\u00ea pode tentar mover essa fun\u00e7\u00e3o para fora do seu componente</strong>. Nesse caso, a fun\u00e7\u00e3o \u00e9 garantida para n\u00e3o referenciar nenhum props ou state, e tamb\u00e9m n\u00e3o precisa estar na lista de depend\u00eancias.</li>\n<li>Se a fun\u00e7\u00e3o que voc\u00ea est\u00e1 chamando \u00e9 um c\u00e1lculo puro e \u00e9 seguro ligar enquanto renderiza, voc\u00ea pode <strong>cham\u00e1-lo fora do efeito em vez disso,</strong> e fazer o efeito depender do valor retornado.</li>\n<li>Como \u00faltimo recurso, voc\u00ea pode <strong>adicione uma fun\u00e7\u00e3o na depend\u00eancia do efeito, mas <em>envolva sua defini\u00e7\u00e3o</em></strong> no <a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a> Hook. Isso garante que ele n\u00e3o seja alterado em todas as renderiza\u00e7\u00f5es, a menos que <em>suas pr\u00f3prias</em> depend\u00eancias tamb\u00e9m sejam alteradas:</li>\n</ul>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProductPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> productId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// \u2705 Envolva com useCallback para evitar altera\u00e7\u00f5es em todos os renderizadores</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> fetchProduct <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// ... Faz algo com productId ...</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>productId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Todas as depend\u00eancias useCallback s\u00e3o especificadas</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProductDetails</span></span> <span class=\"token attr-name\">fetchProduct</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fetchProduct<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ProductDetails</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> fetchProduct <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>fetchProduct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Todas as depend\u00eancias do useEffect s\u00e3o especificadas</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note que no exemplo acima n\u00f3s <strong>precisamos</strong> para manter a fun\u00e7\u00e3o na lista de depend\u00eancias. Isso garante que uma mudan\u00e7a na <code class=\"language-javascript\">productId</code> prop do <code class=\"language-javascript\">ProductPage</code> aciona automaticamente uma busca no componente <code class=\"language-javascript\">ProductDetails</code>.</p>\n<h3 id=\"what-can-i-do-if-my-effect-dependencies-change-too-often\"><a class=\"anchor\" href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\"></a>O que posso fazer se minhas depend\u00eancias de efeito mudarem com muita frequ\u00eancia? </h3>\n<p>\u00c0s vezes, seu efeito pode estar usando o state que muda com muita freq\u00fc\u00eancia. Voc\u00ea pode ser tentado a omitir esse state de uma lista de depend\u00eancias, mas isso geralmente leva a erros:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Este efeito depende do estado `count`</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \ud83d\udd34 Bug: `count` n\u00e3o \u00e9 especificado como uma depend\u00eancia</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O conjunto vazio de depend\u00eancias, <code class=\"language-javascript\">[]</code>, significa que o efeito s\u00f3 ser\u00e1 executado uma vez quando o componente for montado, e n\u00e3o em todas as re-renderiza\u00e7\u00f5es. O problema \u00e9 que dentro do callback <code class=\"language-javascript\">setInterval</code>, o valor de <code class=\"language-javascript\">count</code> n\u00e3o muda, porque n\u00f3s criamos um fechamento com o valor de <code class=\"language-javascript\">count</code> configurando para <code class=\"language-javascript\">0</code> como era quando o retorno de chamada do efeito era executado. A cada segundo, este callback ent\u00e3o chama <code class=\"language-javascript\">setCount(0 + 1)</code>, ent\u00e3o a contagem nunca vai acima de 1.</p>\n<p>Especificando <code class=\"language-javascript\">[count]</code> como uma lista de depend\u00eancias iria corrigir o bug, mas faria com que o intervalo fosse redefinido em cada altera\u00e7\u00e3o. Efetivamente, cada <code class=\"language-javascript\">setInterval</code> teria uma chance de executar antes de ser limpo (semelhante a um <code class=\"language-javascript\">setTimeout</code>). Isso pode n\u00e3o ser desej\u00e1vel. Para corrigir isso, podemos usar o <a href=\"/react/hooks-reference#functional-updates\">form de atualiza\u00e7\u00e3o funcional do <code class=\"language-javascript\">setState</code></a>. Ele nos permite especificar <em>como</em> o state precisa mudar sem referenciar o state <em>atual</em>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=&gt;</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Isso n\u00e3o depende da vari\u00e1vel `count` fora</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Nosso efeito n\u00e3o usa nenhuma vari\u00e1vel no escopo do componente</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(A identidade da fun\u00e7\u00e3o <code class=\"language-javascript\">setCount</code> \u00e9 garantida como est\u00e1vel, ent\u00e3o \u00e9 seguro omitir.)</p>\n<p>Agora, o retorno de chamada <code class=\"language-javascript\">setInterval</code> \u00e9 executado uma vez por segundo, mas sempre que a chamada interna para <code class=\"language-javascript\">setCount</code> pode usar um valor atualizado para <code class=\"language-javascript\">count</code> (chamado <code class=\"language-javascript\">c</code> no retorno do callback aqui.)</p>\n<p>Em casos mais complexos (como se um state dependesse de outro state), tente mover a l\u00f3gica de atualiza\u00e7\u00e3o de state para fora do efeito com o <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code> Hook</a>. <a class=\"external-link\" href=\"https://adamrackis.dev/state-and-use-reducer/\">O artigo</a> oferece um exemplo de como voc\u00ea pode fazer isso. <strong>A identidade da fun\u00e7\u00e3o <code class=\"language-javascript\">dispatch</code> do <code class=\"language-javascript\">useReducer</code> \u00e9 sempre est\u00e1vel</strong> \u2014 mesmo se a fun\u00e7\u00e3o reducer for declarada dentro do componente e ler seus props.</p>\n<p>Como \u00faltimo recurso, se voc\u00ea quer algo como <code class=\"language-javascript\">this</code> em uma classe, voc\u00ea precisa <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">usar uma ref</a> para manter uma vari\u00e1vel mut\u00e1vel. Ent\u00e3o voc\u00ea pode escrever e ler para ele. Por exemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Mantenha as \u00faltimas props em um ref.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> latestProps <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    latestProps<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Leia as \u00faltimas props a qualquer momento</span></span><span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>latestProps<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Esse efeito nunca \u00e9 executado novamente</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>S\u00f3 fa\u00e7a isso se voc\u00ea n\u00e3o conseguir encontrar uma alternativa melhor, confiar em muta\u00e7\u00e3o torna os componentes menos previs\u00edveis. Se houver um padr\u00e3o espec\u00edfico que n\u00e3o seja bem traduzido, <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/new\">abra uma issue</a> com um c\u00f3digo de exemplo execut\u00e1vel e podemos tentar ajudar.</p>\n<h3 id=\"how-do-i-implement-shouldcomponentupdate\"><a class=\"anchor\" href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\"></a>Como implementar <code class=\"language-javascript\">shouldComponentUpdate</code>? </h3>\n<p>Voc\u00ea pode envolver o componente de fun\u00e7\u00e3o com <code class=\"language-javascript\">React.memo</code> para comparar superficialmente suas props:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// seu componente</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Este n\u00e3o \u00e9 um Hook porque n\u00e3o comp\u00f5e como um Hook normalmente faz. <code class=\"language-javascript\">React.memo</code> \u00e9 o equivalente de <code class=\"language-javascript\">PureComponent</code>, mas compara somente props. (Voc\u00ea pode tamb\u00e9m adicionar um segundo argumento para especificar uma fun\u00e7\u00e3o de compara\u00e7\u00e3o que recebe as props velhas e novas. Se esta retorna true, o update \u00e9 evitado.)</p>\n<p><code class=\"language-javascript\">React.memo</code> n\u00e3o compara estado porque n\u00e3o h\u00e1 nenhum \u00fanico objeto de estado para comparar. Mas voc\u00ea pode tornar filhos puros tamb\u00e9m, ou at\u00e9 <a href=\"/react/hooks-faq#how-to-memoize-calculations\">otimizar filhos espec\u00edficos com <code class=\"language-javascript\">useMemo</code></a>.</p>\n<h3 id=\"how-to-memoize-calculations\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-memoize-calculations\"></a>Como memorizar c\u00e1lculos? </h3>\n<p>O Hook <a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a> permite que voc\u00ea evite c\u00e1culos entre m\u00faltiplas renderiza\u00e7\u00f5es se \u201clembrando\u201d dos c\u00e1lculos feitos anteriormente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esse c\u00f3digo chama <code class=\"language-javascript\">computeExpensiveValue(a, b)</code>. Mas se as depend\u00eancias <code class=\"language-javascript\">[a, b]</code> n\u00e3o mudaram desde o \u00faltimo valor, <code class=\"language-javascript\">useMemo</code> n\u00e3o chama a fun\u00e7\u00e3o novamente e simplesmente retorna o valor retornado anteriormente.</p>\n<p>Lembre-se que a fun\u00e7\u00e3o passada para <code class=\"language-javascript\">useMemo</code> \u00e9 executada durante a renderiza\u00e7\u00e3o. N\u00e3o fa\u00e7a nada que voc\u00ea normalmente n\u00e3o faria durante a renderiza\u00e7\u00e3o. Por exemplo, efeitos colaterais devem ser feitos usando <code class=\"language-javascript\">useEffect</code>, n\u00e3o <code class=\"language-javascript\">useMemo</code>.</p>\n<p><strong>Voc\u00ea pode confiar em <code class=\"language-javascript\">useMemo</code> como uma otimiza\u00e7\u00e3o de performace, n\u00e3o como uma garantia sem\u00e2ntica.</strong> No futuro, React pode optar por \u201cesquecer\u201d alguns valores previamente memorizados e recalcular eles na pr\u00f3xima renderiza\u00e7\u00e3o, por exemplo para liberar mem\u00f3ria para componentes fora da tela. Escreva seu c\u00f3digo de maneira que ele funcione sem <code class=\"language-javascript\">useMemo</code> \u2014 e ent\u00e3o adicione-o para otimizar o desempenho. (Para raros casos aonde um valor <em>nunca</em> deve ser recomputado, voc\u00ea pode <a href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\">inicializar posteriomente</a> uma ref.)</p>\n<p>Convenientemente, <code class=\"language-javascript\">useMemo</code> tamb\u00e9m deixa voc\u00ea pular uma re-renderiza\u00e7\u00e3o custosa de um filho:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Somente re-renderizado se `a` muda:</span>\n  <span class=\"token keyword\">const</span> child1 <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child1</span></span> <span class=\"token attr-name\">a</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Somente re-renderizado se `b` muda:</span>\n  <span class=\"token keyword\">const</span> child2 <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child2</span></span> <span class=\"token attr-name\">b</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>child1<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>child2<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note que essa abordagem n\u00e3o vai funcionar em um loop porque Hooks <a href=\"/react/hooks-rules\">n\u00e3o podem</a> ser postos dentro de loops. Mas voc\u00ea pode extrair um componente separado para os items da lista e chamar <code class=\"language-javascript\">useMemo</code> nele.</p>\n<h3 id=\"how-to-create-expensive-objects-lazily\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\"></a>Como criar objetos custosos a demanda? </h3>\n<p><code class=\"language-javascript\">useMemo</code> permite <a href=\"/react/hooks-faq#how-to-memoize-calculations\">memorizar um c\u00e1lculo custoso</a> se as depend\u00eancias s\u00e3o as mesmas. No entanto, ele n\u00e3o <em>garante</em> que a computa\u00e7\u00e3o n\u00e3o ser\u00e1 re-executada. Algumas vezes voc\u00ea precisa ter certeza que um objeto s\u00f3 \u00e9 criado uma vez.</p>\n<p><strong>O primeiro caso de uso comum \u00e9 quando criar o estado inicial \u00e9 custoso:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \u26a0\ufe0f createRows() \u00e9 executada em todo render</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">,</span> setRows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRows</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para evitar re-criar o estado inicial, podemos passar uma <strong>fun\u00e7\u00e3o</strong> para <code class=\"language-javascript\">useState</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \u2705 createRows() s\u00f3 \u00e9 executada uma vez</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">,</span> setRows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">createRows</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React s\u00f3 vai executar essa fun\u00e7\u00e3o durante a primeira renderiza\u00e7\u00e3o. Veja a <a href=\"/react/hooks-reference#usestate\">API do <code class=\"language-javascript\">useState</code></a>.</p>\n<p><strong>Voc\u00ea tamb\u00e9m pode ocasionalmente querer evitar recriar o valor inicial de <code class=\"language-javascript\">useRef()</code>.</strong> Por exemplo, talvez voc\u00ea quer garantir que algumas inst\u00e2ncias de classe imperativa s\u00f3 seja criada uma vez:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \u26a0\ufe0f IntersectionObserver \u00e9 criado em todo render</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>onIntersect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">useRef</code> <strong>n\u00e3o</strong> aceita uma fun\u00e7\u00e3o como <code class=\"language-javascript\">useState</code>. Ao inv\u00e9s disso, voc\u00ea pode criar sua pr\u00f3pria fun\u00e7\u00e3o que cria e define-o posteriormente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// \u2705 IntersectionObserver \u00e9 criado somente uma vez</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>onIntersect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Quando voc\u00ea precisar, execute getObserver()</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isto evita criar um objeto custoso at\u00e9 que ele seja realmente necess\u00e1rio pela primeira vez. Se voc\u00ea usa Flow ou TypeScript, voc\u00ea pode tamb\u00e9m dar <code class=\"language-javascript\">getObserver()</code> um tipo n\u00e3o nulo por conveni\u00eancia.</p>\n<h3 id=\"are-hooks-slow-because-of-creating-functions-in-render\"><a class=\"anchor\" href=\"/react/hooks-faq#are-hooks-slow-because-of-creating-functions-in-render\"></a>Hooks s\u00e3o mais lentos por criar fun\u00e7\u00f5es no render? </h3>\n<p>N\u00e3o. Nos browsers modernos, o desempenho bruto de closures comparados \u00e0 classes n\u00e3o difere significantemente exceto em casos extremos.</p>\n<p>Em adi\u00e7\u00e3o, considere que o design de Hooks \u00e9 mais eficiente por alguns motivos:</p>\n<ul>\n<li>Hooks evitam muito da sobrecarga que classes exigem, como o custo de criar inst\u00e2ncas de classes e fazer o bind the manipuladores de eventos no constructor.</li>\n<li><strong>C\u00f3digo idiom\u00e1tico usando Hooks evita aninhamento profundo de componentes</strong> que prevalece nas codebases que usam HOC, render props e context. Com \u00e1rvores de componentes menores, React tem menos trabalho a fazer.</li>\n</ul>\n<p>Tradicionalmente, preocupa\u00e7\u00f5es de desempenho sobre fun\u00e7\u00f5es inline no React tem sido relacionadas a como passar novas callbacks em cada renderiza\u00e7\u00e3o quebra as otimiza\u00e7\u00f5es de <code class=\"language-javascript\">shouldComponentUpdate</code> nos componentes filho. Hooks abordam esse problema de tr\u00eas maneiras.</p>\n<ul>\n<li>\n<p>O Hook <a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a> permite que voc\u00ea mantenha a mesma callback entre re-renderiza\u00e7\u00f5es para que <code class=\"language-javascript\">shouldComponentUpdate</code> continue a funcionar:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// N\u00e3o vai mudar a menos que `a` ou `b` mude</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>O Hook <a href=\"/react/hooks-faq#how-to-memoize-calculations\"><code class=\"language-javascript\">useMemo</code></a> torna mais f\u00e1cil controlar quando filhos espec\u00edficos atualizam, reduzindo a necessidade de pure components.</li>\n<li>Finalmente, o Hook <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> reduz a necessidade de passar callbacks profundamente, como explicado abaixo.</li>\n</ul>\n<h3 id=\"how-to-avoid-passing-callbacks-down\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\"></a>Como evitar passar callbacks para baixo? </h3>\n<p>N\u00f3s descobrimos que a maioria das pessoas n\u00e3o gostam de passar callbacks manualmente atrav\u00e9s de cada n\u00edvel de uma \u00e1rvore de componente. Mesmo sendo mais expl\u00edcito, pode parecer como um monte de \u201cencanamento\u201d.</p>\n<p>Em \u00e1rvores grandes de componentes, uma alternativa que recomendamos \u00e9 passar para baixo a fun\u00e7\u00e3o <code class=\"language-javascript\">dispatch</code> do <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> via context:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> TodosDispatch <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodosApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Nota: `dispatch` n\u00e3o vai mudar entre re-renderiza\u00e7\u00f5es</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodosDispatch.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DeepTree</span></span> <span class=\"token attr-name\">todos</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">TodosDispatch.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Qualquer filho na \u00e1rvore dentro de <code class=\"language-javascript\">TodosApp</code> pode usar a fun\u00e7\u00e3o <code class=\"language-javascript\">dispatch</code> para disparar a\u00e7\u00f5es para o <code class=\"language-javascript\">TodosApp</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">DeepChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Se queremos executar uma a\u00e7\u00e3o, podemos pegar dispatch do context.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>TodosDispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Add todo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso \u00e9 mais mais conveniente do ponto de vista de manuten\u00e7\u00e3o (n\u00e3o h\u00e1 a necessidade de passar callbacks) e evita o problema de passar callbacks como um todo. Passando <code class=\"language-javascript\">dispatch</code> desta maneira \u00e9 o padr\u00e3o recomendado para atualiza\u00e7\u00f5es profundas.</p>\n<p>Note que voc\u00ea ainda pode escolher entre passar o estado da aplica\u00e7\u00e3o para baixo como props (mais expl\u00edcito) ou como context (mais conveniente para atualiza\u00e7\u00f5es bem profundas). Se voc\u00ea tamb\u00e9m usar context para o estado, use dois tipos de context diferentes \u2014 o <code class=\"language-javascript\">dispatch</code> nunca muda, ent\u00e3o componentes que leem ele n\u00e3o precisam re-renderizar a menos que precisem tamb\u00e9m do estado da aplica\u00e7\u00e3o.</p>\n<h3 id=\"how-to-read-an-often-changing-value-from-usecallback\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-read-an-often-changing-value-from-usecallback\"></a>Como ler um valor frequentemente vari\u00e1vel de <code class=\"language-javascript\">useCallback</code>? </h3>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Recomendamos <a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\">passar <code class=\"language-javascript\">dispatch</code> para baixo com context</a> ao inv\u00e9s de callbacks individuais em props. A abordagem abaixo s\u00f3 \u00e9 mencionada aqui para a integralidade e como v\u00e1lvula de escape.</p>\n</div>\n<p>Em alguns casos raros voc\u00ea pode precirar memorizar uma callback com <a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a> mas a memoriza\u00e7\u00e3o n\u00e3o funciona muito bem porque a fun\u00e7\u00e3o interna tem que ser recriada muitas vezes. Se a fun\u00e7\u00e3o que voc\u00ea est\u00e1 memorizando \u00e9 um manipulador de eventos e n\u00e3o \u00e9 usado durante a renderiza\u00e7\u00e3o, voc\u00ea pode usar <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">ref como uma vari\u00e1vel de inst\u00e2ncia</a> e salvar o \u00faltimo valor nela manualmente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> updateText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> textRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    textRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Guarda o valor na ref</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> handleSubmit <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> currentText <span class=\"token operator\">=</span> textRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Le o valor da ref</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>currentText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>textRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// N\u00e3o recria handleSubmit como [text] faria</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">updateText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ExpensiveTree</span></span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este \u00e9 um padr\u00e3o um tanto confuso mas mostra que voc\u00ea pode usar essa v\u00e1lvula de escape se precisar. \u00c9 mais suport\u00e1vel se voc\u00ea extrair para um Hook customizado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> updateText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Ser\u00e1 memorizado mesmo se `text` mudar:</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> handleSubmit <span class=\"token operator\">=</span> <span class=\"token function\">useEventCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">updateText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ExpensiveTree</span></span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useEventCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> dependencies</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot call an event handler while rendering.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>dependencies<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ref<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Em ambos os casos, <strong>n\u00e3o recomendamos esse padr\u00e3o</strong> e s\u00f3 estamos mostrando aqui para integralidade. \u00c9 melhor <a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\">evitar passar callbacks para baixo</a>.</p>\n<h2 id=\"under-the-hood\"><a class=\"anchor\" href=\"/react/hooks-faq#under-the-hood\"></a>Por detr\u00e1s das cortinas </h2>\n<h3 id=\"how-does-react-associate-hook-calls-with-components\"><a class=\"anchor\" href=\"/react/hooks-faq#how-does-react-associate-hook-calls-with-components\"></a>Como o React associa chamadas de Hooks com componentes? </h3>\n<p>React acompanha o componente que est\u00e1 renderizando. Gra\u00e7as as <a href=\"/react/hooks-rules\">Regras dos Hooks</a>, sabemos que Hooks s\u00e3o chamados somente dentro de componentes React (ou Hooks customizados \u2014 que tamb\u00e9m s\u00f3 s\u00e3o chamados dentro de componentes React).</p>\n<p>Existe uma lista interna de \u201cc\u00e9lulas de mem\u00f3ria\u201d associadas a cada componente. Elas s\u00e3o somente objetos JavaScript aonde podemos colocar alguns dados. Quando voc\u00ea chama um Hook como <code class=\"language-javascript\">useState()</code>, \u00e9 lido a c\u00e9lula atual (ou inicializada durante a primeira renderiza\u00e7\u00e3o), e ent\u00e3o move o ponteiro para a pr\u00f3xima. \u00c9 assim que m\u00faltiplas chamadas de <code class=\"language-javascript\">useState()</code> recebem seu estado local independente.</p>\n<h3 id=\"what-is-the-prior-art-for-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#what-is-the-prior-art-for-hooks\"></a>Quais s\u00e3o as refer\u00eancias que influ\u00eanciaram a cria\u00e7\u00e3o dos Hooks? </h3>\n<p>Hooks sintetizam ideias de diferentes fontes:</p>\n<ul>\n<li>Nossos velhos experimentos com APIs funcionais no reposit\u00f3rio <a class=\"external-link\" href=\"https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State\">react-future</a>.</li>\n<li>Experimentos da comunidade React com APIs de prop de renderiza\u00e7\u00e3o, incluindo <a class=\"external-link\" href=\"https://github.com/reactions/component\">Reactions Component</a> feito por <a class=\"external-link\" href=\"https://github.com/ryanflorence\">Ryan Florence</a>.</li>\n<li>A proposta da <a class=\"external-link\" href=\"https://gist.github.com/trueadm/17beb64288e30192f3aa29cad0218067\">palavra chave <code class=\"language-javascript\">adopt</code></a> como um auxiliar para render props, feito por <a class=\"external-link\" href=\"https://github.com/trueadm\">Dominic Gannaway</a>.</li>\n<li>Vari\u00e1veis de estado e c\u00e9lulas de estado em <a class=\"external-link\" href=\"http://displayscript.org/introduction.html\">DisplayScript</a>.</li>\n<li><a class=\"external-link\" href=\"https://reasonml.github.io/reason-react/docs/en/state-actions-reducer.html\">Reducer components</a> em ReasonReact.</li>\n<li><a class=\"external-link\" href=\"http://reactivex.io/rxjs/class/es6/Subscription.js~Subscription.html\">Subscriptions</a> em Rx.</li>\n<li><a class=\"external-link\" href=\"https://github.com/ocamllabs/ocaml-effects-tutorial#2-effectful-computations-in-a-pure-setting\">Efeitos alg\u00e9bricos</a> em Multicore OCaml.</li>\n</ul>\n<p><a class=\"external-link\" href=\"https://github.com/sebmarkbage\">Sebastian Markb\u00e5ge</a> criou o design original de Hooks, refinado posteriormente por <a class=\"external-link\" href=\"https://github.com/acdlite\">Andrew Clark</a>, <a class=\"external-link\" href=\"https://github.com/sophiebits\">Sophie Alpert</a>, <a class=\"external-link\" href=\"https://github.com/trueadm\">Dominic Gannaway</a>, e outros membros do time principal do React.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/hooks-faq.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-faq", "nav": ["/react/hooks-reference", "/react/testing"]}]}, {"key": "Testando", "values": [{"key": "Vis\u00e3o Geral de Testes", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Voc\u00ea pode testar componentes React de forma similar a como testa outros c\u00f3digos JavaScript.</p>\n<p>H\u00e1 algumas maneiras de testar componentes React. Em geral, os testes podem ser feitos de duas formas:</p>\n<ul>\n<li><strong>Renderizando \u00e1rvores de componentes</strong> em um ambiente de testes simplificado e confirmando o seu output.</li>\n<li><strong>Executando uma aplica\u00e7\u00e3o completa</strong> em um ambiente de navegador real (tamb\u00e9m conhecido como testes \u201c<em>end-to-end</em>\u201d).</li>\n</ul>\n<p>Esta se\u00e7\u00e3o da documenta\u00e7\u00e3o se concentra nas estrat\u00e9gias de teste para o primeiro caso. Embora os testes <em>end-to-end</em> completos possam ser muito \u00fateis para impedir regress\u00f5es em casos importantes, esses testes n\u00e3o est\u00e3o relacionados a componentes React em particular e est\u00e3o fora do escopo desta se\u00e7\u00e3o.</p>\n<h3 id=\"tradeoffs\"><a class=\"anchor\" href=\"/react/testing#tradeoffs\"></a>Tradeoffs </h3>\n<p>Ao escolher uma ferramenta de teste, vale a pena considerar alguns tradeoffs:</p>\n<ul>\n<li><strong>Velocidade de itera\u00e7\u00e3o vs Ambiente real:</strong> Algumas ferramentas oferecem um ciclo de feedback muito r\u00e1pido entre fazer uma altera\u00e7\u00e3o e ver o resultado, mas n\u00e3o reflete o comportamento do navegador com precis\u00e3o. Outras ferramentas podem usar um ambiente de navegador real, mas reduzem a velocidade da itera\u00e7\u00e3o e s\u00e3o mais prec\u00e1rias em um servidor de integra\u00e7\u00e3o cont\u00ednua.</li>\n<li><strong>Quanto <em>mock</em> eu devo usar:</strong> Nos componentes, a diferen\u00e7a entre um teste de \u201cunidade\u201d e um de \u201cintegra\u00e7\u00e3o\u201d pode ser confusa. Se voc\u00ea estiver testando um formul\u00e1rio, o teste tamb\u00e9m deve testar os bot\u00f5es dentro dele? Ou um componente de bot\u00e3o deve ter seu pr\u00f3prio conjunto de testes? A refatora\u00e7\u00e3o de um bot\u00e3o deve falhar o teste do formul\u00e1rio?</li>\n</ul>\n<p>Diferentes respostas podem funcionar para diferentes times e produtos.</p>\n<h3 id=\"tools\"><a class=\"anchor\" href=\"/react/testing#tools\"></a>Ferramentas recomendadas </h3>\n<p><strong><a class=\"external-link\" href=\"https://facebook.github.io/jest/\">Jest</a></strong> \u00e9 um <em>test runner</em> JavaScript que permite a voc\u00ea acessar o DOM atrav\u00e9s do <a href=\"/react/testing-environments#mocking-a-rendering-surface\"><code class=\"language-javascript\">jsdom</code></a>. Mesmo o jsdom sendo apenas uma aproxima\u00e7\u00e3o de como um navegador funciona, \u00e9 bom o suficiente para testar componentes React. Jest oferece uma excelente velocidade de itera\u00e7\u00e3o combinada com recursos poderosos como <em>mock</em> de <a href=\"/react/testing-environments#mocking-modules\">m\u00f3dulos</a> e <a href=\"/react/testing-environments#mocking-timers\">temporizadores</a> para que voc\u00ea tenha mais controle sobre como o c\u00f3digo \u00e9 executado.</p>\n<p><strong><a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a></strong> \u00e9 um conjunto de utilit\u00e1rios que permitem testar componentes React sem depender dos detalhes de implementa\u00e7\u00e3o. Essa abordagem facilita a refatora\u00e7\u00e3o e tamb\u00e9m te orienta para as melhores pr\u00e1ticas de acessibilidade. Embora n\u00e3o forne\u00e7a uma maneira de renderizar \u201csuperficialmente\u201d um componente sem seus filhos, um <em>test runner</em> como o Jest permite fazer isso atrav\u00e9s de <a href=\"/react/testing-recipes#mocking-modules\">mock</a>.</p>\n<h3 id=\"learn-more\"><a class=\"anchor\" href=\"/react/testing#learn-more\"></a>Saiba Mais </h3>\n<p>Esta se\u00e7\u00e3o est\u00e1 dividida em duas p\u00e1ginas:</p>\n<ul>\n<li><a href=\"/react/testing-recipes\">Receitas</a>: Padr\u00f5es conhecidos ao escrever testes para componentes React.</li>\n<li><a href=\"/react/testing-environments\">Ambientes</a>: O que considerar ao configurar um ambiente de teste para componentes React .</li>\n</ul></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/testing.md\">Edit this page</a></p></div></article>", "path": "/react/testing", "nav": ["/react/hooks-faq", "/react/testing-recipes"]}, {"key": "Receitas de Teste", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Padr\u00f5es de teste comuns para componentes React.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Esta p\u00e1gina assume que voc\u00ea est\u00e1 utilizando o <a class=\"external-link\" href=\"https://jestjs.io/\">Jest</a> como executor de testes. Se voc\u00ea est\u00e1 utilizando um executor de testes diferente, pode ser necess\u00e1rio ajustar a API, mas no geral o desenho da solu\u00e7\u00e3o provavelmente ser\u00e1 o mesmo. Leia mais detalhes sobre como configurar um ambiente de testes na p\u00e1gina <a href=\"/react/testing-environments\">Ambientes de Teste</a>.</p>\n</div>\n<p>Nessa p\u00e1gina, n\u00f3s iremos primeiramente usar componentes funcionais. Entretanto, essas estrat\u00e9gias n\u00e3o dependem desses detalhes de implementa\u00e7\u00e3o e tamb\u00e9m funcionam em componentes de classe.</p>\n<ul>\n<li><a href=\"/react/testing-recipes#setup--teardown\">Detalhamento da configura\u00e7\u00e3o</a></li>\n<li><a href=\"/react/testing-recipes#act\"><code class=\"language-javascript\">act()</code></a></li>\n<li><a href=\"/react/testing-recipes#rendering\">Renderizando</a></li>\n<li><a href=\"/react/testing-recipes#data-fetching\">Busca de dados</a></li>\n<li><a href=\"/react/testing-recipes#mocking-modules\">Transformando m\u00f3dulos em <em>mock</em></a></li>\n<li><a href=\"/react/testing-recipes#events\">Eventos</a></li>\n<li><a href=\"/react/testing-recipes#timers\">Temporizadores</a></li>\n<li><a href=\"/react/testing-recipes#snapshot-testing\">Testes de Snapshot</a></li>\n<li><a href=\"/react/testing-recipes#multiple-renderers\">Renderiza\u00e7\u00f5es M\u00faltiplas</a></li>\n<li><a href=\"/react/testing-recipes#something-missing\">Algo faltando?</a></li>\n</ul>\n\n<h3 id=\"setup--teardown\"><a class=\"anchor\" href=\"/react/testing-recipes#setup--teardown\"></a>Detalhamento da configura\u00e7\u00e3o </h3>\n<p>Para cada teste, n\u00f3s geralmente queremos renderizar nossa \u00e1rvore React para um elemento do DOM que est\u00e1 atrelado a um <code class=\"language-javascript\">documento</code>. Isso \u00e9 importante para que ele receba eventos do DOM. Quando o teste finaliza, n\u00f3s queremos realizar uma \u201climpeza\u201d e desmontar a \u00e1rvore do <code class=\"language-javascript\">documento</code>.</p>\n<p>Um jeito comum de se realizar isso \u00e9 usar a combina\u00e7\u00e3o dos blocos <code class=\"language-javascript\">beforeEach</code> e <code class=\"language-javascript\">afterEach</code> para que eles sempre sejam executados e isolem o bloco de teste.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Configura um elemento do DOM como alvo do teste</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Limpar ao sair</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Voc\u00ea pode utilizar um padr\u00e3o diferente, mas tenha em mente que queremos executar uma limpeza <em>mesmo que o teste falhe</em>. Caso contr\u00e1rio, os testes podem impactar outros, alterando o comportamento. Isso faz com que eles sejam dif\u00edceis de serem depurados.</p>\n\n<h3 id=\"act\"><a class=\"anchor\" href=\"/react/testing-recipes#act\"></a><code class=\"language-javascript\">act()</code> </h3>\n<p>Quando estiver escrevendo testes de UI, tarefas como renderiza\u00e7\u00e3o, eventos de usu\u00e1rio ou busca de testes podem ser considerados como \u201cunidades\u201d de intera\u00e7\u00e3o com a interface do usu\u00e1rio. <code class=\"language-javascript\">react-dom/test-utils</code> prov\u00ea um auxiliar chamado <a href=\"/react/test-utils#act\"><code class=\"language-javascript\">act()</code></a> que garante que todas as atualiza\u00e7\u00f5es relacionadas a esses \u201cusu\u00e1rios\u201d estejam sendo processadas e aplicadas ao DOM antes que voc\u00ea fa\u00e7a alguma declara\u00e7\u00e3o de testes.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// renderizar componentes</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// fazer declara\u00e7\u00f5es de testes</span></code></pre></div>\n<p>Isso ajuda seus testes a serem executados pr\u00f3ximo do que os usu\u00e1rios experimentariam quando estiverem usando sua aplica\u00e7\u00e3o. O restante dos exemplos utilizam a fun\u00e7\u00e3o <code class=\"language-javascript\">act()</code> para ter essas garantias.</p>\n<p>Voc\u00ea pode achar que utilizar o <code class=\"language-javascript\">act()</code> diretamente um pouco verboso demais. Para evitar um pouco do <em>boilerplate</em>, voc\u00ea pode usar uma biblioteca como a <a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a>, cujo as fun\u00e7\u00f5es auxiliares s\u00e3o encapsuladas com o <code class=\"language-javascript\">act()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>O nome <code class=\"language-javascript\">act</code> vem do padr\u00e3o <a class=\"external-link\" href=\"http://wiki.c2.com/?ArrangeActAssert\"><em>Arrange-Act-Assert</em></a>.</p>\n</div>\n\n<h3 id=\"rendering\"><a class=\"anchor\" href=\"/react/testing-recipes#rendering\"></a>Renderizando </h3>\n<p>Popularmente, voc\u00ea deseja testar se um componente renderiza corretamente dado a <em>prop</em> recebida. Considere um componente simples que renderiza uma mensagem baseado em uma <em>prop</em>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// hello.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hey, stranger</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>N\u00f3s podemos criar o seguinte teste para esse componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// hello.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">\"./hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar o elemento do DOM como o alvo da renderiza\u00e7\u00e3o</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Limpar ao sair</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders with or without a name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hey, stranger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Jenny<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Jenny!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Margaret<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Margaret!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"data-fetching\"><a class=\"anchor\" href=\"/react/testing-recipes#data-fetching\"></a>Busca de Dados </h3>\n<p>Ao inv\u00e9s de realizar chamadas reais para uma API, voc\u00ea pode transformar a requisi\u00e7\u00e3o em <em>mock</em> com dados fict\u00edcios. Transformando o dado em <em>mock</em> com dados \u201cfalsos\u201d previne testes incompletos por causa de um <em>backend</em> indispon\u00edvel, al\u00e9m de torn\u00e1-los mais r\u00e1pidos. Nota: Voc\u00ea ainda pode querer executar um subconjunto de testes usando um <em>framework</em> <a href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\">\u201d<em>end-to-end</em>\u201d</a> que valida se a aplica\u00e7\u00e3o inteira est\u00e1 funcionando em conjunto.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// user.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"loading...\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> years old\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      lives in </span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>N\u00f3s podemos escrever os testes para o componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// user.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">\"./user\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar o elemento do DOM como o alvo da renderiza\u00e7\u00e3o</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpar na sa\u00edda</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders user data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> fakeUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Joni Baez\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    age<span class=\"token operator\">:</span> <span class=\"token string\">\"32\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    address<span class=\"token operator\">:</span> <span class=\"token string\">\"123, Charming Avenue\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function-variable function\">json</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// Usar a vers\u00e3o ass\u00edncrona de act para aplicar Promises resolvidas</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"summary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// remover o mock para garantir que os testes est\u00e3o completamente isolados</span></span><span class=\"gatsby-highlight-code-line\">  global<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">.</span><span class=\"token function\">mockRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"mocking-modules\"><a class=\"anchor\" href=\"/react/testing-recipes#mocking-modules\"></a>Transformando m\u00f3dulos em <em>mock</em> </h3>\n<p>Alguns m\u00f3dulos podem n\u00e3o funcionar corretamente dentro de um ambiente de testes ou podem n\u00e3o ser essenciais para o teste em s\u00ed. Transformando eles em <em>mock</em> com dados fict\u00edcios pode facilitar a escrita dos testes para seu pr\u00f3prio c\u00f3digo.</p>\n<p>Considere um componente <code class=\"language-javascript\">Contact</code> que possui um componente terceiro <code class=\"language-javascript\">GoogleMap</code> embutido:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// map.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LoadScript<span class=\"token punctuation\">,</span> GoogleMap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-google-maps\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadScript</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script-loader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">googleMapsApiKey</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>YOUR_API_KEY<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GoogleMap</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example-map<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LoadScript</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// contact.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Map <span class=\"token keyword\">from</span> <span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Contact</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Contact </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> via</span><span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"mailto:\"</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          email\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        or on their </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          website\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se n\u00f3s n\u00e3o queremos carregar esse componente nos nossos testes, n\u00f3s podemos transformar a depend\u00eancia em <em>mock</em> de um componente fict\u00edcio e executar o teste:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// contact.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Contact <span class=\"token keyword\">from</span> <span class=\"token string\">\"./contact\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MockedMap <span class=\"token keyword\">from</span> <span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DummyMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>lat<span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>long<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar o elemento do DOM como o alvo da renderiza\u00e7\u00e3o</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpar na sa\u00edda</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should render contact information\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> center <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> lat<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> long<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Contact</span></span>\n        <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Joni Baez<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">email</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test@example.com<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">site</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://test.com<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>center<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n      container\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid='email']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mailto:test@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"site\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://test.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"map\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"0:0\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"events\"><a class=\"anchor\" href=\"/react/testing-recipes#events\"></a>Eventos </h3>\n<p>N\u00f3s recomendamos despachar eventos reais de elementos do DOM e ent\u00e3o afirmar no seu resultado. Considere um componente <code class=\"language-javascript\">Toggle</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// toggle.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Toggle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>previousState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Turn off\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Poder\u00edamos escrever testes para isso:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// toggle.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Toggle <span class=\"token keyword\">from</span> <span class=\"token string\">\"./toggle\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar o elemento do DOM como o alvo da renderiza\u00e7\u00e3o</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpar na sa\u00edda</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changes value when clicked\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onChange <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toggle</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// buscar pelo elemento do bot\u00e3o e disparar alguns eventos de click nele</span>\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid=toggle]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> bubbles<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn off\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> bubbles<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Os diferentes eventos do DOM e suas propriedades est\u00e3o descritas em <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\">MDN</a>. Note que voc\u00ea precisa passar <code class=\"language-javascript\">{ bubbles: true }</code> em cada evento que for criado para que ele chegue ao React Listener pois o React delega os eventos ao root automaticamente.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><em>React Testing Library</em> oferece um <a class=\"external-link\" href=\"https://testing-library.com/docs/dom-testing-library/api-events\">auxiliar mais conciso</a> para disparar eventos</p>\n</div>\n\n<h3 id=\"timers\"><a class=\"anchor\" href=\"/react/testing-recipes#timers\"></a>Temporizadores </h3>\n<p>Seu c\u00f3digo pode usar fun\u00e7\u00f5es baseadas em tempo como <code class=\"language-javascript\">setTimeout</code> para programar mais trabalhos no futuro. Nesse exemplo abaixo, um painel de m\u00faltipla escolha espera por uma sele\u00e7\u00e3o e avan\u00e7a, esgotando o tempo se uma sele\u00e7\u00e3o n\u00e3o \u00e9 feita em 5 segundos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// card.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> timeoutID <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>onSelect<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">choice</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>N\u00f3s podemos escrever testes para esse componente usando os <a class=\"external-link\" href=\"https://jestjs.io/docs/en/timer-mocks\">mocks de temporizador do Jest</a> e testando os diferentes estados que ele pode estar.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// card.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> Card <span class=\"token keyword\">from</span> <span class=\"token string\">\"./card\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar o elemento do DOM como o alvo da renderiza\u00e7\u00e3o</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpar na sa\u00edda</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">useRealTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should select null after timing out\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// move ahead in time by 100ms</span></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// and then move ahead by 5 seconds</span></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should cleanup on being removed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// unmount the app</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should accept selections\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    container\n      <span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid='2']\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> bubbles<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Voc\u00ea pode usar os temporizadores fict\u00edcios apenas em alguns testes. Acima, n\u00f3s habilitamos eles usando <code class=\"language-javascript\">jest.useFakeTimers()</code>. A principal vantagem que eles fornecem \u00e9 que seus testes n\u00e3o precisam esperar os 5 segundos para executar e voc\u00ea tamb\u00e9m n\u00e3o precisa fazer o c\u00f3digo ser mais convoluto apenas para o teste.</p>\n\n<h3 id=\"snapshot-testing\"><a class=\"anchor\" href=\"/react/testing-recipes#snapshot-testing\"></a>Testes de <em>Snapshot</em> </h3>\n<p>Frameworks como o Jest tamb\u00e9m permitem voc\u00ea salvar \u201csnapshots\u201d de dados com <a class=\"external-link\" href=\"https://jestjs.io/docs/en/snapshot-testing\"><code class=\"language-javascript\">toMatchSnapshot</code> / <code class=\"language-javascript\">toMatchInlineSnapshot</code></a>. Com essas fun\u00e7\u00f5es, n\u00f3s podemos \u201csalvar\u201d o resultado do componente renderizado e garantir que uma mudan\u00e7a nele precisa ser explicitamente apontada como uma mudan\u00e7a no <em>snapshot</em>.</p>\n<p>Nesse exemplo, n\u00f3s renderizamos um componente e formatamos o HTML renderizado com o pacote <a class=\"external-link\" href=\"https://www.npmjs.com/package/pretty\"><code class=\"language-javascript\">pretty</code></a>, antes de salv\u00e1-lo como um <em>inline snapshot</em>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// hello.test.js, again</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> pretty <span class=\"token keyword\">from</span> <span class=\"token string\">\"pretty\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">\"./hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar o elemento do DOM como o alvo da renderiza\u00e7\u00e3o</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpar na sa\u00edda</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should render a greeting\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... gets filled automatically by jest ... */</span></span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Jenny<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... gets filled automatically by jest ... */</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Margaret<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... gets filled automatically by jest ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tipicamente \u00e9 melhor fazer afirma\u00e7\u00f5es mais espec\u00edficas do que utilizar snapshots. Esse tipo de teste inclui detalhes de implementa\u00e7\u00e3o e portanto podem facilmente quebrar. Seletivamente <a href=\"/react/testing-recipes#mocking-modules\">transformar alguns componentes filhos em mock</a> pode reduzir o tamanho do snapshot e mant\u00ea-los leg\u00edveis para o review de c\u00f3digo.</p>\n\n<h3 id=\"multiple-renderers\"><a class=\"anchor\" href=\"/react/testing-recipes#multiple-renderers\"></a>Renderiza\u00e7\u00f5es m\u00faltiplas </h3>\n<p>Em casos raros, voc\u00ea pode estar executando um teste em um componente que utiliza m\u00faltiplos renderizadores. Por exemplo, voc\u00ea pode estar executando testes de <em>snapshot</em> em um componente com <code class=\"language-javascript\">react-test-renderer</code>, que internamente usa <code class=\"language-javascript\">ReactDOM.render</code> dentro de um componente filho para renderizar algum conte\u00fado. Nesse cen\u00e1rio, voc\u00ea pode encapsular as atualiza\u00e7\u00f5es com o respectivo <code class=\"language-javascript\">act()</code> dos seus renderizadores.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token keyword\">as</span> domAct <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token keyword\">as</span> testAct<span class=\"token punctuation\">,</span> create <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-test-renderer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">let</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token function\">domAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">testAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    root <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"something-missing\"><a class=\"anchor\" href=\"/react/testing-recipes#something-missing\"></a>Algo faltando? </h3>\n<p>Se algum cen\u00e1rio comum n\u00e3o estiver coberto, por favor nos avise na p\u00e1gina de <a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/issues\"><em>issues</em></a> no reposit\u00f3rio da documenta\u00e7\u00e3o oficial do site.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/testing-recipes.md\">Edit this page</a></p></div></article>", "path": "/react/testing-recipes", "nav": ["/react/testing", "/react/testing-environments"]}, {"key": "Ambientes de teste", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><!-- This document is intended for folks who are comfortable with JavaScript, and have probably written tests with it. It acts as a reference for the differences in testing environments for React components, and how those differences affect the tests that they write. This document also assumes a slant towards web-based react-dom components, but has notes for other renderers. -->\n<p>Este documento aborda fatores que podem afetar o seu ambiente de testes assim como recomenda\u00e7\u00f5es para alguns cen\u00e1rios.</p>\n<h3 id=\"test-runners\"><a class=\"anchor\" href=\"/react/testing-environments#test-runners\"></a>Test runners </h3>\n<p><em>Test runners</em> como <a class=\"external-link\" href=\"https://jestjs.io/\">Jest</a>, <a class=\"external-link\" href=\"https://mochajs.org/\">mocha</a>, <a class=\"external-link\" href=\"https://github.com/avajs/ava\">ava</a> te permitem escrever su\u00edtes de teste na forma de JavaScript, e executa-las como parte do seu processo de desenvolvimento. Adicionalmente, su\u00edtes de teste s\u00e3o executadas como parte da integra\u00e7\u00e3o cont\u00ednua.</p>\n<ul>\n<li>Jest \u00e9 amplamente compat\u00edvel com projetos em React, dando suporte \u00e0 funcionalidades como mock de <a href=\"/react/testing-environments#mocking-modules\">m\u00f3dulos</a> e <a href=\"/react/testing-environments#mocking-timers\">temporizadores</a>, e suporte \u00e0 <a href=\"/react/testing-environments#mocking-a-rendering-surface\"><code class=\"language-javascript\">jsdom</code></a>. <strong>Se voc\u00ea utiliza o Create React App, o <a class=\"external-link\" href=\"https://facebook.github.io/create-react-app/docs/running-tests\">Jest j\u00e1 vem incluso desde o come\u00e7o</a> com configura\u00e7\u00f5es padr\u00e3o \u00fateis.</strong></li>\n<li>Bibliotecas como <a class=\"external-link\" href=\"https://mochajs.org/#running-mocha-in-the-browser\">mocha</a> funcionam bem em ambientes com navegadores de verdade, e podem ajudar em testes que dependam explicitamente de navegadores.</li>\n<li>Testes <em>end-to-end</em> s\u00e3o utilizados para testar fluxos mais longos atrav\u00e9s de v\u00e1rias p\u00e1ginas, e requerem uma <a href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\">configura\u00e7\u00e3o diferente</a>.</li>\n</ul>\n<h3 id=\"mocking-a-rendering-surface\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-a-rendering-surface\"></a>Fazendo o mock de uma superf\u00edcie de renderiza\u00e7\u00e3o </h3>\n<p>\u00c9 comum que testes sejam executados em um ambiente que n\u00e3o possui acesso a uma superf\u00edcie de renderiza\u00e7\u00e3o real como um navegador. Para esses ambientes, n\u00f3s recomendamos simular um navegador com <a class=\"external-link\" href=\"https://github.com/jsdom/jsdom\"><code class=\"language-javascript\">jsdom</code></a>, uma implementa\u00e7\u00e3o de um navegador com um tamanho leve que \u00e9 executada em Node.js.</p>\n<p>Na maioria dos casos, jsdom se comporta da mesma forma que um navegador comum, mas ela n\u00e3o tem funcionalidades como <a class=\"external-link\" href=\"https://github.com/jsdom/jsdom#unimplemented-parts-of-the-web-platform\">layout e navega\u00e7\u00e3o</a>. Ainda assim, ela continua sendo \u00fatil para a maioria dos testes de componentes web, j\u00e1 que ela consegue ser executada de forma mais r\u00e1pida do que tendo que iniciar um navegador para cada teste. Ela tamb\u00e9m \u00e9 executada no mesmo processo dos seus testes, o que possibilita que voc\u00ea escreva testes para examinar e fazer asser\u00e7\u00f5es sobre o DOM renderizado.</p>\n<p>Assim como em um navegador de verdade, jsdom nos permite modelar intera\u00e7\u00f5es de usu\u00e1rio; testes podem disparar eventos em n\u00f3s do DOM, e assim observar e fazer verifica\u00e7\u00f5es sobre os efeitos colaterais dessas a\u00e7\u00f5es <a href=\"/react/testing-recipes#events\"><small>(exemplo)</small></a>.</p>\n<p>Uma grande parte dos testes de UI podem ser escritos com a seguinte configura\u00e7\u00e3o: Jest sendo usado como <em>test runner</em>, renderiza\u00e7\u00e3o feita com o uso de jsdom, e com intera\u00e7\u00f5es de usu\u00e1rio definidas a partir de sequ\u00eancias de eventos do navegador, com o uso da fun\u00e7\u00e3o auxiliar<code class=\"language-javascript\">act()</code> <a href=\"/react/testing-recipes\"><small>(exemplo)</small></a>. Grande parte dos testes da pr\u00f3pria biblioteca do React s\u00e3o escritas com essa combina\u00e7\u00e3o, por exemplo.</p>\n<p>Se voc\u00ea est\u00e1 criando uma biblioteca que testa em sua maioria comportamentos espec\u00edficos de um navegador, e necessita de um comportamento nativo de um navegador como <em>layout</em> ou <em>inputs</em> de verdade, voc\u00ea pode usar um <em>framework</em> como <a class=\"external-link\" href=\"https://mochajs.org/\">mocha</a>.</p>\n<p>Em um ambiente onde voc\u00ea <em>n\u00e3o pode</em> simular um DOM (por exemplo, testes de componentes do React Native no Node.js), voc\u00ea poderia usar <a href=\"/react/test-utils#simulate\">fun\u00e7\u00f5es auxiliares de simula\u00e7\u00e3o de eventos</a> para simular intera\u00e7\u00f5es com elementos. Como uma outra alternativa, voc\u00ea pode usar a fun\u00e7\u00e3o auxiliar<code class=\"language-javascript\">fireEvent</code> da <a class=\"external-link\" href=\"https://testing-library.com/docs/react-native-testing-library/intro\"><code class=\"language-javascript\">@testing-library/react-native</code></a>.</p>\n<p>Frameworks como <a class=\"external-link\" href=\"https://www.cypress.io/\">Cypress</a>, <a class=\"external-link\" href=\"https://github.com/GoogleChrome/puppeteer\">puppeteer</a> e <a class=\"external-link\" href=\"https://www.seleniumhq.org/projects/webdriver/\">webdriver</a> s\u00e3o \u00fateis para executar <a href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\">testes end-to-end</a>.</p>\n<h3 id=\"mocking-functions\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-functions\"></a>Fazendo o mock de fun\u00e7\u00f5es </h3>\n<p>Ao escrever testes, n\u00f3s gostar\u00edamos de fazer o mock nas partes do nosso c\u00f3digo que n\u00e3o possuem um equivalente dentro do nosso ambiente de testes (por exemplo, checar o status <code class=\"language-javascript\">navigator.onLine</code> dentro do Node.js). Testes tamb\u00e9m podem espiar algumas fun\u00e7\u00f5es e observar como outras partes do teste interagem com elas. Portanto, a possibilidade de fazer o mock de fun\u00e7\u00f5es selecionadas por vers\u00f5es mais amig\u00e1veis para testes \u00e9 algo bem \u00fatil.</p>\n<p>Isso \u00e9 algo especialmente \u00fatil para a obten\u00e7\u00e3o de dados (data fetching). Prefere-se normalmente que sejam usados dados \u201cfalsos\u201d para testes a fim de evitar a lentid\u00e3o e a inconst\u00e2ncia causada pelo fetching de endpoints de uma API de verdade <a href=\"/react/testing-recipes#data-fetching\"><small>(exemplo)</small></a>. Isso ajuda a fazer com que os testes sejam previs\u00edveis. Bibliotecas como <a class=\"external-link\" href=\"https://jestjs.io/\">Jest</a> e <a class=\"external-link\" href=\"https://sinonjs.org/\">sinon</a>, dentre outras, suportam o mock de fun\u00e7\u00f5es. Para testes <em>end-to-end</em>, fazer o mock da sua rede de internet pode ser mais dif\u00edcil, mas voc\u00ea provavelmente ir\u00e1 querer testar os endpoints da API de verdade ao faz\u00ea-los.</p>\n<h3 id=\"mocking-modules\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-modules\"></a>Fazendo o mock de m\u00f3dulos </h3>\n<p>Alguns componentes dependem de m\u00f3dulos que podem n\u00e3o funcionar corretamente em ambientes de testes, ou que n\u00e3o s\u00e3o essenciais para os nossos testes. Um mock seletivo desses m\u00f3dulos pode ser \u00fatil, com o uso de substitutos adequados<a href=\"/react/testing-recipes#mocking-modules\"><small>(exemplo)</small></a>.</p>\n<p>No Node.js, executadores de teste como o Jest <a class=\"external-link\" href=\"https://jestjs.io/docs/en/manual-mocks\">d\u00e3o suporte ao mock de m\u00f3dulos</a>. Voc\u00ea tamb\u00e9m pode usar bibliotecas como <a class=\"external-link\" href=\"https://www.npmjs.com/package/mock-require\"><code class=\"language-javascript\">mock-require</code></a>.</p>\n<h3 id=\"mocking-timers\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-timers\"></a>Fazendo o mock de temporizadores </h3>\n<p>Alguns componentes podem estar usando fun\u00e7\u00f5es com base no tempo como <code class=\"language-javascript\">setTimeout</code>, <code class=\"language-javascript\">setInterval</code>, ou <code class=\"language-javascript\">Date.now</code>. Em ambientes de teste, fazer o mock dessas fun\u00e7\u00f5es com substitutos que lhe permitam \u201cavan\u00e7ar no tempo\u201d pode ser de grande ajuda. Isso \u00e9 \u00f3timo para garantir que os seus testes executem de forma r\u00e1pida! Testes que dependem de temporizadores ainda seriam resolvidos ordenadamente, mas de forma mais r\u00e1pida<a href=\"/react/testing-recipes#timers\"><small>(exemplo)</small></a>. A maioria dos frameworks, incluindo o <a class=\"external-link\" href=\"https://jestjs.io/docs/en/timer-mocks\">Jest</a>, <a class=\"external-link\" href=\"https://sinonjs.org/releases/v7.3.2/fake-timers/\">sinon</a> e <a class=\"external-link\" href=\"https://github.com/sinonjs/lolex\">lolex</a>, permitem que voc\u00ea fa\u00e7a o mock de temporizadores nos seus testes.</p>\n<p>\u00c0s vezes, voc\u00ea pode n\u00e3o querer fazer o mock de temporizadores. Por exemplo, talvez voc\u00ea est\u00e1 testando uma anima\u00e7\u00e3o, ou interagindo com um endpoint que \u00e9 sens\u00edvel a tempo (como uma API com um limitador de requisi\u00e7\u00f5es). Bibliotecas com mocks de temporizadores te permitem habilitar e desabilitar esses mocks para cada teste/su\u00edte de testes, de forma que voc\u00ea pode explicitamente escolher como esses testes ir\u00e3o ser executados.</p>\n<h3 id=\"end-to-end-tests-aka-e2e-tests\"><a class=\"anchor\" href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\"></a>Testes end-to-end </h3>\n<p>Testes <em>end-to-end</em> s\u00e3o \u00fateis para testar grandes fluxos de trabalho, especialmente quando eles s\u00e3o cr\u00edticos para o seu neg\u00f3cio (por exemplo, pagamentos ou cria\u00e7\u00e3o de contas). Para esses testes, voc\u00ea provavelmente ir\u00e1 querer testar n\u00e3o s\u00f3 a forma que um navegador de verdade renderiza a aplica\u00e7\u00e3o inteira, como tamb\u00e9m a forma em que ele busca dados dos endpoints da API de verdade, usa sess\u00f5es e cookies, e navega entre links diferentes. Voc\u00ea tamb\u00e9m pode querer fazer verifica\u00e7\u00f5es n\u00e3o somente no estado do DOM, como tamb\u00e9m nos dados da aplica\u00e7\u00e3o (por exemplo, verificar se as atualiza\u00e7\u00f5es foram persistidas ou n\u00e3o para o banco de dados).</p>\n<p>Nesse cen\u00e1rio, poderiam ser utilizados frameworks como <a class=\"external-link\" href=\"https://www.cypress.io/\">Cypress</a>, <a class=\"external-link\" href=\"https://playwright.dev\">Playwright</a> ou uma biblioteca como <a class=\"external-link\" href=\"https://pptr.dev/\">Puppeteer</a> para que voc\u00ea possa navegar entre m\u00faltiplas rotas e fazer asser\u00e7\u00f5es sobre efeitos colaterais n\u00e3o somente no navegador, mas tamb\u00e9m possivelmente no backend.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/testing-environments.md\">Edit this page</a></p></div></article>", "path": "/react/testing-environments", "nav": ["/react/testing-recipes", "/react/how-to-contribute"]}]}, {"key": "Contributing", "values": [{"key": "Como Contribuir", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>React \u00e9 um dos primeiros projetos de c\u00f3digo aberto do Facebook que est\u00e1 sendo desenvolvido muito ativamente, al\u00e9m de ser usado para entregar c\u00f3digo para todos em <a class=\"external-link\" href=\"https://www.facebook.com\">facebook.com</a>. N\u00f3s ainda estamos trabalhando para tornar esse projeto mais transparente e f\u00e1cil poss\u00edvel, mas ainda n\u00e3o estamos l\u00e1. Esperamos que essa documenta\u00e7\u00e3o torne esse processo de contribui\u00e7\u00e3o mais clara e responda algumas perguntas que voc\u00ea possa ter.</p>\n<h3 id=\"code-of-conduct\"><a class=\"anchor\" href=\"/react/how-to-contribute#code-of-conduct\"></a><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md\">C\u00f3digo de Conduta</a> </h3>\n<p>O Facebook adotou o <a class=\"external-link\" href=\"https://www.contributor-covenant.org/\">Conv\u00eanio do Contribuinte</a> como seu C\u00f3digo de Conduta, e esperamos que os participantes do projeto o adotem. Por favor, <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md\">leia o texto completo</a> para que voc\u00ea possa entender quais a\u00e7\u00f5es ser\u00e3o ou n\u00e3o toleradas.</p>\n<h3 id=\"open-development\"><a class=\"anchor\" href=\"/react/how-to-contribute#open-development\"></a>Desenvolvimento Aberto </h3>\n<p>Todo trabalho no React acontece diretamente no <a class=\"external-link\" href=\"https://github.com/facebook/react\">GitHub</a>. Tanto membros do <strong><em>Core Team</em></strong> quanto contribuidores externos devem enviar <strong><em>pull requests</em></strong> que v\u00e3o passar pelo mesmo processo de revis\u00e3o.</p>\n<h3 id=\"semantic-versioning\"><a class=\"anchor\" href=\"/react/how-to-contribute#semantic-versioning\"></a>Versionamento Sem\u00e2ntico </h3>\n<p>O React segue o <a class=\"external-link\" href=\"http://semver.org/\">versionamento sem\u00e2ntico</a>. Lan\u00e7amos vers\u00f5es de <strong><em>patch</em></strong> para corre\u00e7\u00f5es cr\u00edticas, vers\u00f5es secund\u00e1rias (minor version) para novos recursos e vers\u00f5es principais (major version) para qualquer altera\u00e7\u00e3o de quebra. Quando fazemos altera\u00e7\u00f5es significativas, tamb\u00e9m introduzimos alguns avisos de descontinuidade em uma vers\u00e3o secund\u00e1ria para que nossos usu\u00e1rios tenham conhecimento sobre as pr\u00f3ximas altera\u00e7\u00f5es e migrem seu c\u00f3digo com anteced\u00eancia. Saiba mais sobre nosso compromisso com a estabilidade e a migra\u00e7\u00e3o incremental em <a href=\"/react/faq-versioning\">nossa pol\u00edtica de vers\u00e3o</a>.</p>\n<p>Toda mudan\u00e7a significativa \u00e9 documentada na <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CHANGELOG.md\"><strong><em>changelog</em></strong></a>.</p>\n<h3 id=\"branch-organization\"><a class=\"anchor\" href=\"/react/how-to-contribute#branch-organization\"></a>Organiza\u00e7\u00e3o de Branches </h3>\n<p>Envie todas as altera\u00e7\u00f5es para a <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/master\"><code class=\"language-javascript\">branch master</code></a>. N\u00e3o usamos ramifica\u00e7\u00f5es separadas para desenvolvimento ou para os pr\u00f3ximos lan\u00e7amentos. Fazemos o poss\u00edvel para manter a <code class=\"language-javascript\">master</code> em boas condi\u00e7\u00f5es, com testes passando todas as vezes.</p>\n<p>O c\u00f3digo que chega na <code class=\"language-javascript\">master</code> deve ser compat\u00edvel com a vers\u00e3o est\u00e1vel mais recente. Pode conter recursos adicionais, mas nenhuma altera\u00e7\u00e3o de \u00faltima hora. Dever\u00edamos ser capazes de lan\u00e7ar uma nova vers\u00e3o secund\u00e1ria apartir da <code class=\"language-javascript\">master</code> a qualquer momento.</p>\n<h3 id=\"feature-flags\"><a class=\"anchor\" href=\"/react/how-to-contribute#feature-flags\"></a>Feature Flags </h3>\n<p>Para manter o ramo da <code class=\"language-javascript\">master</code> em um estado liber\u00e1vel, as altera\u00e7\u00f5es de interrup\u00e7\u00e3o e os recursos experimentais devem ser colocados atr\u00e1s de uma feature flag.</p>\n<p>Feature flags s\u00e3o definidas em <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/packages/shared/ReactFeatureFlags.js\"><code class=\"language-javascript\">packages/shared/ReactFeatureFlags.js</code></a>. Algums builds do React podem ativar conjuntos diferentes de features flags; por exemplo, o React Native build pode ser configurado de maneira diferente que o React DOM. Essas flags s\u00e3o encontradas em <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/shared/forks\"><code class=\"language-javascript\">packages/shared/forks</code></a>. Feature flags s\u00e3o digitados estaticamente pelo Flow, para que voc\u00ea possa executar o <code class=\"language-javascript\">yarn flow</code> para confirmar que atualizou todos os arquivos necess\u00e1rios.</p>\n<p>O sistema de build do React remover\u00e1 as branches de recursos desativados antes da publica\u00e7\u00e3o. Um trabalho de integra\u00e7\u00e3o cont\u00ednua \u00e9 executado em todas as confirma\u00e7\u00f5es para verificar altera\u00e7\u00f5es no tamanho do pacote. Voc\u00ea pode usar a altera\u00e7\u00e3o de tamanho como um sinal de que o recurso foi bloqueado corretamente.</p>\n<h3 id=\"bugs\"><a class=\"anchor\" href=\"/react/how-to-contribute#bugs\"></a>Bugs </h3>\n<h4 id=\"where-to-find-known-issues\"><a class=\"anchor\" href=\"/react/how-to-contribute#where-to-find-known-issues\"></a>Onde Encontrar Problemas Conhecidos </h4>\n<p>N\u00f3s estamos utilizando as <a class=\"external-link\" href=\"https://github.com/facebook/react/issues\">GitHub Issues</a> para nossas p\u00e1ginas p\u00fablicas. N\u00f3s vamos ficar de olho e tentar manter claro quando estamos trabalhando internamente na corre\u00e7\u00e3o de algum bug. Antes de preencher uma nova tarefa, verifique se o problema j\u00e1 existe.</p>\n<h4 id=\"reporting-new-issues\"><a class=\"anchor\" href=\"/react/how-to-contribute#reporting-new-issues\"></a>Relatando novos problemas </h4>\n<p>A melhor maneira de corrigir o problema \u00e9 fornecer um caso de teste reduzido. Este <a class=\"external-link\" href=\"https://jsfiddle.net/Luktwrdm/\">template no JSFiddle</a> \u00e9 um excelente ponto de partida.</p>\n<h4 id=\"security-bugs\"><a class=\"anchor\" href=\"/react/how-to-contribute#security-bugs\"></a>Bugs de Seguran\u00e7a </h4>\n<p>O Facebook tem um <a class=\"external-link\" href=\"https://www.facebook.com/whitehat/\">programa de recompensas</a> para a divulga\u00e7\u00e3o segura de bugs de seguran\u00e7a. Com isso em mente, n\u00e3o reporte esses problemas de forma p\u00fablica. Percorra o processo descrito nessa p\u00e1gina.</p>\n<h3 id=\"how-to-get-in-touch\"><a class=\"anchor\" href=\"/react/how-to-contribute#how-to-get-in-touch\"></a>Como entrar em contato </h3>\n<ul>\n<li>IRC: <a class=\"external-link\" href=\"https://webchat.freenode.net/?channels=reactjs\">#reactjs on freenode</a></li>\n<li><a class=\"external-link\" href=\"https://pt-br.reactjs.org//community/support.html#popular-discussion-forums\">F\u00f3runs de discuss\u00e3o</a></li>\n</ul>\n<p>H\u00e1 tamb\u00e9m uma comunidade ativa de usu\u00e1rios do React na plataforma no <a class=\"external-link\" href=\"http://www.reactiflux.com/\">Discord</a> caso voc\u00ea precise de ajuda.</p>\n<h3 id=\"proposing-a-change\"><a class=\"anchor\" href=\"/react/how-to-contribute#proposing-a-change\"></a>Propondo uma altera\u00e7\u00e3o </h3>\n<p>Se voc\u00ea pretende alterar a API p\u00fablica ou fazer altera\u00e7\u00f5es n\u00e3o triviais na implementa\u00e7\u00e3o, recomendamos <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/new\">abrir uma <strong><em>issue</em></strong></a>. Isso nos permite chegar a um acordo sobre sua proposta antes de colocar um esfor\u00e7o significativo nela.</p>\n<p>Se voc\u00ea est\u00e1 apenas corrigindo um bug, n\u00e3o tem problema em enviar uma <strong><em>pull request</em></strong> diretamente, mas ainda sim recomendamos abrir uma <strong><em>issue</em></strong> com detalhes sobre o que voc\u00ea est\u00e1 corrigindo. Isso \u00e9 \u00fatil caso n\u00e3o aceitemos essa corre\u00e7\u00e3o espec\u00edfica, mas queremos acompanhar o problema.</p>\n<h3 id=\"your-first-pull-request\"><a class=\"anchor\" href=\"/react/how-to-contribute#your-first-pull-request\"></a>Seu primeiro <strong><em>Pull Request</em></strong> </h3>\n<p>Trabalhando em seu primeiro <strong><em>Pull Request</em></strong>. Voc\u00ea pode aprender como desta s\u00e9rie de v\u00eddeos gratuitos:</p>\n<p><strong><a class=\"external-link\" href=\"https://app.egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github\">Como contribuir para um projeto de c\u00f3digo aberto no GitHub</a></strong></p>\n<p>Para ajudar voc\u00ea a se familiarizar com o nosso processo de contribui\u00e7\u00e3o, temos uma lista de <a class=\"external-link\" href=\"https://github.com/facebook/react/issues?q=is:open+is:issue+label:%22good+first+issue%22\">boas primeiras <strong><em>issues</em></strong></a> que cont\u00e9m erros que t\u00eam um escopo relativamente limitado. Este \u00e9 um \u00f3timo lugar para come\u00e7ar.</p>\n<p>Se voc\u00ea decidir corrigir um bug, por favor, verifique o t\u00f3pico do coment\u00e1rio caso algu\u00e9m j\u00e1 esteja trabalhando em uma corre\u00e7\u00e3o. Se ningu\u00e9m estiver trabalhando no momento, por favor deixe um coment\u00e1rio dizendo que voc\u00ea pretende trabalhar nele para que outras pessoas n\u00e3o dupliquem sem querer seu esfor\u00e7o.</p>\n<p>Se algu\u00e9m assumir uma <strong><em>issue</em></strong>, mas n\u00e3o fizer o acompanhamento por mais de duas semanas, n\u00e3o h\u00e1 problema em voc\u00ea assumir, mas mesmo assim voc\u00ea ainda deve deixar um coment\u00e1rio.</p>\n<h3 id=\"sending-a-pull-request\"><a class=\"anchor\" href=\"/react/how-to-contribute#sending-a-pull-request\"></a>Enviando um <strong><em>Pull Request</em></strong> </h3>\n<p>O Core Team est\u00e1 monitorando os <strong><em>pull requests</em></strong>. Analisaremos seu envio e fazermos o <strong><em>merge</em></strong>, solicitaremos altera\u00e7\u00f5es ou podemos fech\u00e1-la com uma explica\u00e7\u00e3o plaus\u00edvel. Para altera\u00e7\u00f5es de API, podemos precisar corrigir nossos usos internos no Facebook.com, o que pode causar algum atraso. Faremos o nosso melhor para fornecer atualiza\u00e7\u00f5es e feedback durante todo o processo.</p>\n<p><strong>Antes de enviar o seu pull request,</strong> certifique-se de ter feito os seguintes passos:</p>\n<ol>\n<li>Fa\u00e7a fork do <a class=\"external-link\" href=\"https://github.com/facebook/react\">reposit\u00f3rio oficial</a> and criou sua branch da <code class=\"language-javascript\">master</code>.</li>\n<li>Execute <code class=\"language-javascript\">yarn</code> no reposit\u00f3rio ra\u00edz.</li>\n<li>Se voc\u00ea corrigiu um bug ou um c\u00f3digo adicionado que deve ser testado, adicione testes!</li>\n<li>Certifique-se de que a su\u00edte de teste passe (<code class=\"language-javascript\">yarn test</code>). Dica: <code class=\"language-javascript\">yarn test --watch TestName</code> \u00e9 \u00fatil no desenvolvimento.</li>\n<li>Execute <code class=\"language-javascript\">yarn test --prod</code> para testar no ambiente de produ\u00e7\u00e3o. Suporta as mesmas op\u00e7\u00f5es que <code class=\"language-javascript\">yarn test</code>.</li>\n<li>Se voc\u00ea precisar de um depurador, execute <code class=\"language-javascript\">yarn debug-test --watch TestName</code>, abra <code class=\"language-javascript\">chrome://inspect</code>e aperte em \u201cInspecionar\u201d.</li>\n<li>Formate seu c\u00f3digo com <a class=\"external-link\" href=\"https://github.com/prettier/prettier\">prettier</a> (<code class=\"language-javascript\">yarn prettier</code>).</li>\n<li>Certifique-se de que seus c\u00f3digos foram verificados com linters (<code class=\"language-javascript\">yarn lint</code>). Dica: <code class=\"language-javascript\">yarn linc</code> verifica somente os arquivos alterados.</li>\n<li>Rode o <a class=\"external-link\" href=\"https://flowtype.org/\">Flow</a> para typechecks (<code class=\"language-javascript\">yarn flow</code>).</li>\n<li>Se ainda n\u00e3o fez, preencha o CLA.</li>\n</ol>\n<h3 id=\"contributor-license-agreement-cla\"><a class=\"anchor\" href=\"/react/how-to-contribute#contributor-license-agreement-cla\"></a>Licen\u00e7a de Acordo de Contribuidor (<strong><em>Contributor License Agreement</em></strong> - CLA) </h3>\n<p>Para aceitar seu <strong><em>pull request</em></strong>, precisamos que voc\u00ea envie um CLA. Voc\u00ea s\u00f3 precisa fazer isso uma vez, ent\u00e3o se voc\u00ea fez isso para outro projeto de c\u00f3digo aberto do Facebook, voc\u00ea est\u00e1 pronto para continuar. Se voc\u00ea estiver enviando um <strong><em>pull request</em></strong> pela primeira vez, nos informe que voc\u00ea concluiu o CLA e ent\u00e3o podemos fazer uma verifica\u00e7\u00e3o cruzada com seu GitHub</p>\n<p><strong><a class=\"external-link\" href=\"https://code.facebook.com/cla\">Preencha sua CLA aqui.</a></strong></p>\n<h3 id=\"contribution-prerequisites\"><a class=\"anchor\" href=\"/react/how-to-contribute#contribution-prerequisites\"></a>Pr\u00e9-requisitos de Contribui\u00e7\u00e3o </h3>\n<ul>\n<li>Possuir o <a class=\"external-link\" href=\"https://nodejs.org\">Node</a> instalado na vers\u00e3o v8.0.0+ e <a class=\"external-link\" href=\"https://yarnpkg.com/en/\">Yarn</a> na vers\u00e3o v1.2.0+.</li>\n<li>Possuir o <a class=\"external-link\" href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a> instalado.</li>\n<li>Voc\u00ea deve ter o <code class=\"language-javascript\">gcc</code> instalado ou est\u00e1 confort\u00e1vel em instalar um compilador, se necess\u00e1rio. Algumas de nossas depend\u00eancias podem exigir uma etapa de compila\u00e7\u00e3o. No OS X, as Ferramentas de Linha de Comando do Xcode cobrir\u00e3o isso. No Ubuntu, <code class=\"language-javascript\">apt-get install build-essential</code> instalar\u00e1 os pacotes requeridos. Comandos semelhantes devem funcionar em outras distribui\u00e7\u00f5es Linux. O Windows ir\u00e1 requerer alguns passos adicionais, veja as instru\u00e7\u00f5es de instala\u00e7\u00e3o do <a class=\"external-link\" href=\"https://github.com/nodejs/node-gyp#installation\">node-gyp</a> para detalhes.</li>\n<li>Voc\u00ea deve ser familiarizado com o Git.</li>\n</ul>\n<h3 id=\"development-workflow\"><a class=\"anchor\" href=\"/react/how-to-contribute#development-workflow\"></a>Fluxo de Trabalho de Desenvolvimento </h3>\n<p>Depois de clonar o React, execute <code class=\"language-javascript\">yarn</code> para buscar suas depend\u00eancias. Ent\u00e3o, voc\u00ea pode executar v\u00e1rios comandos:</p>\n<ul>\n<li><code class=\"language-javascript\">yarn lint</code> verifica o estilo de c\u00f3digo.</li>\n<li><code class=\"language-javascript\">yarn linc</code> funciona como o <code class=\"language-javascript\">yarn lint</code>, mas \u00e9 mais r\u00e1pido porque verifica apenas os arquivos que diferem na sua <strong><em>branch</em></strong>.</li>\n<li><code class=\"language-javascript\">yarn test</code> executa o conjunto de testes completo.</li>\n<li><code class=\"language-javascript\">yarn test --watch</code> executa um observador de testes interativo.</li>\n<li><code class=\"language-javascript\">yarn test --prod</code> executa testes no ambiente de produ\u00e7\u00e3o.</li>\n<li><code class=\"language-javascript\">yarn test &lt;pattern&gt;</code> executa testes com nomes de arquivos correspondentes.</li>\n<li><code class=\"language-javascript\">yarn debug-test</code> \u00e9 como <code class=\"language-javascript\">yarn test</code> mas com um depurador. Abra <code class=\"language-javascript\">chrome://inspect</code> e clique em \u201cInspecionar\u201d.</li>\n<li><code class=\"language-javascript\">yarn flow</code> executa o typecheck do <a class=\"external-link\" href=\"https://flowtype.org/\">Flow</a> .</li>\n<li><code class=\"language-javascript\">yarn build</code> cria uma pasta <code class=\"language-javascript\">build</code> com todos os pacotes.</li>\n<li><code class=\"language-javascript\">yarn build react/index,react-dom/index --type=UMD</code> cria compila\u00e7\u00f5es UMD somente com o React e ReactDOM.</li>\n</ul>\n<p>Recomendamos executar o <code class=\"language-javascript\">yarn test</code> (ou suas varia\u00e7\u00f5es acima) para garantir que voc\u00ea n\u00e3o introduza nenhuma regress\u00e3o enquanto trabalha na sua mudan\u00e7a. No entanto, pode ser \u00fatil testar sua vers\u00e3o do React em um projeto real.</p>\n<p>Primeiro, execute <code class=\"language-javascript\">yarn build</code>. Isto ir\u00e1 produzir pacotes pr\u00e9-constru\u00eddos na pasta <code class=\"language-javascript\">build</code>, bem como ir\u00e1 preparar pacotes npm dentro da pasta <code class=\"language-javascript\">build/packages</code>.</p>\n<p>A maneira mais f\u00e1cil de testar suas altera\u00e7\u00f5es \u00e9 rodar <code class=\"language-javascript\">yarn build react/index,react-dom/index --type=UMD</code> e depois abrir <code class=\"language-javascript\">fixtures/packaging/babel-standalone/dev.html</code>. Este arquivo j\u00e1 usa o <code class=\"language-javascript\">react.development.js</code> a partir da pasta <code class=\"language-javascript\">build</code> para que ele possa pegar suas altera\u00e7\u00f5es.</p>\n<p>Se voc\u00ea quiser experimentar as altera\u00e7\u00f5es no seu projeto React existente, poder\u00e1 copiar <code class=\"language-javascript\">build/node_modules/react/umd/react.development.js</code>, <code class=\"language-javascript\">build/node_modules/react-dom/umd/react-dom.development.js</code> ou qualquer outro build em seu aplicativo e us\u00e1-los em vez da vers\u00e3o est\u00e1vel.</p>\n<p>Se o seu projeto usa React from npm, voc\u00ea pode excluir <code class=\"language-javascript\">react</code> e <code class=\"language-javascript\">react-dom</code> em suas depend\u00eancias e usar o <code class=\"language-javascript\">yarn link</code> para apont\u00e1-los para a pasta local <code class=\"language-javascript\">build</code>. Note que <strong>em vez de <code class=\"language-javascript\">--type = UMD</code>, voc\u00ea desejar\u00e1 passar <code class=\"language-javascript\">--type = NODE</code> ao criar</strong>. Voc\u00ea tamb\u00e9m precisar\u00e1 criar o pacote <code class=\"language-javascript\">scheduler</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-sh\"><code class=\"language-javascript\">cd ~/path_to_your_react_clone/\nyarn build react/index,react/jsx,react-dom/index,scheduler --type=NODE\n\ncd build/node_modules/react\nyarn link\ncd build/node_modules/react-dom\nyarn link\n\ncd ~/path/to/your/project\nyarn link react react-dom</code></pre></div>\n<p>Toda vez que voc\u00ea executar <code class=\"language-javascript\">yarn build</code> na pasta React, as vers\u00f5es atualizadas aparecer\u00e3o no <code class=\"language-javascript\">node_modules</code> do seu projeto. Voc\u00ea pode ent\u00e3o reconstruir seu projeto para testar suas altera\u00e7\u00f5es.</p>\n<p>Se algum pacote ainda estiver faltando (por exemplo, talvez voc\u00ea use <code class=\"language-javascript\">react-dom/server</code> em seu projeto), voc\u00ea sempre poder\u00e1 fazer uma compila\u00e7\u00e3o completa com <code class=\"language-javascript\">yarn build</code>. Observe que executar o <code class=\"language-javascript\">yarn build</code> sem op\u00e7\u00f5es leva muito tempo.</p>\n<p>Ainda exigimos que seu <strong><em>pull request</em></strong> contenha testes de unidade para qualquer nova funcionalidade. Dessa forma, podemos garantir que n\u00e3o quebremos seu c\u00f3digo no futuro.</p>\n<h3 id=\"style-guide\"><a class=\"anchor\" href=\"/react/how-to-contribute#style-guide\"></a>Guia de Estilo </h3>\n<p>Usamos um formatador de c\u00f3digo autom\u00e1tico chamado <a class=\"external-link\" href=\"https://prettier.io/\">Prettier</a>. Execute o <code class=\"language-javascript\">yarn prettier</code> depois de fazer qualquer altera\u00e7\u00e3o no seu c\u00f3digo.</p>\n<p>Ent\u00e3o, nosso linter ir\u00e1 capturar a maioria dos problemas que possam existir em seu c\u00f3digo. Voc\u00ea pode verificar o status do seu estilo de c\u00f3digo simplesmente executando <code class=\"language-javascript\">yarn linc</code>.</p>\n<p>No entanto, ainda existem alguns estilos que o linter n\u00e3o consegue captar. Se voc\u00ea n\u00e3o tem certeza sobre alguma coisa, veja o <a class=\"external-link\" href=\"https://github.com/airbnb/javascript\">Guia de Estilos do Airbnb</a> para te direcionar no caminho certo.</p>\n<h3 id=\"request-for-comments-rfc\"><a class=\"anchor\" href=\"/react/how-to-contribute#request-for-comments-rfc\"></a>Pedido de Coment\u00e1rios (Request for Comments - RFC) </h3>\n<p>Muitas altera\u00e7\u00f5es, incluindo corre\u00e7\u00f5es de bugs e melhorias na documenta\u00e7\u00e3o, podem ser implementadas e revisadas por meio do fluxo de trabalho normal de <strong><em>pull requests</em></strong> do GitHub.</p>\n<p>Algumas mudan\u00e7as, entretanto, s\u00e3o \u201csubstanciais\u201d e pedimos que estas sejam submetidas a um pequeno processo de design e produzam um consenso entre o Core Team do React.</p>\n<p>O processo \u201cRFC\u201d (pedido de coment\u00e1rios) destina-se a fornecer um caminho consistente e controlado para que novos recursos entrem no projeto. Voc\u00ea pode contribuir visitando o reposit\u00f3rio <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs\">rfcs</a>.</p>\n<h3 id=\"license\"><a class=\"anchor\" href=\"/react/how-to-contribute#license\"></a>Licen\u00e7a </h3>\n<p>Ao contribuir com o React, voc\u00ea concorda que suas contribui\u00e7\u00f5es ser\u00e3o licenciadas sob sua licen\u00e7a do MIT.</p>\n<h3 id=\"what-next\"><a class=\"anchor\" href=\"/react/how-to-contribute#what-next\"></a>O que vem a seguir? </h3>\n<p>Leia a <a href=\"/react/codebase-overview\">pr\u00f3xima se\u00e7\u00e3o</a> para saber como a base de c\u00f3digo \u00e9 organizada.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/how-to-contribute.md\">Edit this page</a></p></div></article>", "path": "/react/how-to-contribute", "nav": ["/react/testing-environments", "/react/codebase-overview"]}, {"key": "Vis\u00e3o Geral do Codebase", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><!-- OBS: Perguntei na issue do \"gloss\u00e1rio\" como codebase ficaria em ptbr e disseram c\u00f3digo-base ao inv\u00e9s de base de c\u00f3digo, se ficar muito estranho por favor avisem :like: -->\n<p>Esta se\u00e7\u00e3o fornecer\u00e1 uma vis\u00e3o geral da organiza\u00e7\u00e3o do c\u00f3digo-base React, suas conven\u00e7\u00f5es e implementa\u00e7\u00e3o.</p>\n<p>Se voc\u00ea quer <a href=\"/react/how-to-contribute\">contribuir para o React</a>, esperamos que este guia ajude voc\u00ea a se sentir mais \u00e0 vontade para fazer mudan\u00e7as.</p>\n<p>N\u00e3o recomendamos necessariamente nenhuma dessas conven\u00e7\u00f5es nos aplicativos React. Muitas delas existem por raz\u00f5es hist\u00f3ricas e podem mudar com o tempo.</p>\n<h3 id=\"top-level-folders\"><a class=\"anchor\" href=\"/react/codebase-overview#top-level-folders\"></a>Pastas de n\u00edvel superior </h3>\n<p>Depois de clonar o <a class=\"external-link\" href=\"https://github.com/facebook/react\">reposit\u00f3rio do React</a>, voc\u00ea ver\u00e1 algumas pastas no n\u00edvel superior:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages\"><code class=\"language-javascript\">packages</code></a> cont\u00e9m metadados (como <code class=\"language-javascript\">package.json</code>) e o c\u00f3digo fonte (subdiret\u00f3rio <code class=\"language-javascript\">src</code>) para todos os pacotes no reposit\u00f3rio React. <strong>Se a sua altera\u00e7\u00e3o est\u00e1 relacionada ao c\u00f3digo, o subdiret\u00f3rio <code class=\"language-javascript\">src</code> de cada pacote \u00e9 onde voc\u00ea passar\u00e1 a maior parte do seu tempo.</strong></li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/fixtures\"><code class=\"language-javascript\">fixtures</code></a> cont\u00e9m alguns pequenos aplicativos de teste do React para os contribuidores.</li>\n<li><code class=\"language-javascript\">build</code> \u00e9 a sa\u00edda de compila\u00e7\u00e3o do React. N\u00e3o est\u00e1 no reposit\u00f3rio, mas aparecer\u00e1 no seu clone do React depois de voc\u00ea <a href=\"/react/how-to-contribute#development-workflow\">fizer o <em>build</em></a> pela primeira vez.</li>\n</ul>\n<p>A documenta\u00e7\u00e3o est\u00e1 hospedada <a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org\">em um reposit\u00f3rio separado do React</a>.</p>\n<p>Existem algumas outras pastas no n\u00edvel superior, mas elas s\u00e3o usadas principalmente para as ferramentas e voc\u00ea provavelmente nunca as encontrar\u00e1 ao contribuir.</p>\n<h3 id=\"colocated-tests\"><a class=\"anchor\" href=\"/react/codebase-overview#colocated-tests\"></a>Testes Colocados </h3>\n<p>N\u00f3s n\u00e3o temos um diret\u00f3rio no n\u00edvel superior para testes unit\u00e1rios. Em vez disso, n\u00f3s os colocamos em um diret\u00f3rio chamado <code class=\"language-javascript\">__tests__</code> relativo aos arquivos que eles testam.</p>\n<p>Por exemplo, um teste para <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/87724bd87506325fcaf2648c70fc1f43411a87be/src/renderers/dom/client/utils/setInnerHTML.js\"><code class=\"language-javascript\">setInnerHTML.js</code></a> est\u00e1 localizado em <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/87724bd87506325fcaf2648c70fc1f43411a87be/src/renderers/dom/client/utils/__tests__/setInnerHTML-test.js\"><code class=\"language-javascript\">__tests__/setInnerHTML-test.js</code></a> ao lado dele.</p>\n<h3 id=\"warnings-and-invariants\"><a class=\"anchor\" href=\"/react/codebase-overview#warnings-and-invariants\"></a>Avisos e Invariantes </h3>\n<p>O c\u00f3digo-base do React usa <code class=\"language-javascript\">console.error</code> para exibir avisos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Algo est\u00e1 errado.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Os alertas s\u00f3 s\u00e3o ativados no desenvolvimento. Na produ\u00e7\u00e3o, eles s\u00e3o  retirados. Se voc\u00ea precisar impedir a execu\u00e7\u00e3o de algum caminho do c\u00f3digo, use o m\u00f3dulo <code class=\"language-javascript\">invariant</code> em vez disso:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> invariant <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'invariant'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">invariant</span><span class=\"token punctuation\">(</span>\n  <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Voc\u00ea n\u00e3o vai passar!'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>O invariant \u00e9 lan\u00e7ado quando a condi\u00e7\u00e3o <code class=\"language-javascript\">invariant</code> \u00e9 <code class=\"language-javascript\">false</code>.</strong></p>\n<p>\u201cInvariant\u201d \u00e9 apenas uma maneira de dizer \u201cessa condi\u00e7\u00e3o sempre \u00e9 verdadeira\u201d. Voc\u00ea pode pensar nisso como fazer uma afirma\u00e7\u00e3o.</p>\n<p>\u00c9 importante manter o comportamento de desenvolvimento e produ\u00e7\u00e3o similares. Ent\u00e3o o <code class=\"language-javascript\">invariant</code> \u00e9 lan\u00e7ado tanto no desenvolvimento quanto na produ\u00e7\u00e3o. As mensagens de erro s\u00e3o substitu\u00eddas automaticamente por c\u00f3digos de erro em produ\u00e7\u00e3o para evitar afetar negativamente o tamanho do byte.</p>\n<h3 id=\"development-and-production\"><a class=\"anchor\" href=\"/react/codebase-overview#development-and-production\"></a>Desenvolvimento e produ\u00e7\u00e3o </h3>\n<p>Voc\u00ea pode usar a vari\u00e1vel pseudo-global <code class=\"language-javascript\">__DEV__</code> no c\u00f3digo-base para proteger blocos de c\u00f3digo usados apenas no desenvolvimento.</p>\n<p>Ele \u00e9 embutido durante a etapa de compila\u00e7\u00e3o e se transforma em verifica\u00e7\u00f5es <code class=\"language-javascript\">process.env.NODE_ENV! == 'production'</code> nos builds do CommonJS.</p>\n<p>Para builds aut\u00f4nomas, ele se torna <code class=\"language-javascript\">true</code> na build n\u00e3o-minificada e \u00e9 completamente eliminado com os blocos <code class=\"language-javascript\">if</code> que ele guarda na constru\u00e7\u00e3o minificada.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Esse c\u00f3digo vai executar apenas no desenvolvimento.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"flow\"><a class=\"anchor\" href=\"/react/codebase-overview#flow\"></a>Flow </h3>\n<p>Recentemente, come\u00e7amos a introduzir verifica\u00e7\u00f5es do <a class=\"external-link\" href=\"https://flow.org/\">Flow</a> no c\u00f3digo-base. Os arquivos marcados com a anota\u00e7\u00e3o <code class=\"language-javascript\">@ flow</code> no coment\u00e1rio do cabe\u00e7alho da licen\u00e7a est\u00e3o sendo verificados com typecheck.</p>\n<p>Aceitamos pull requests <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/7600/files\">adicionando anota\u00e7\u00f5es do Flow ao c\u00f3digo existente</a>. Anota\u00e7\u00f5es de fluxo s\u00e3o assim:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactRef<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">detachRefs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">instance<span class=\"token operator\">:</span> ReactInstance<span class=\"token punctuation\">,</span>\n  element<span class=\"token operator\">:</span> ReactElement <span class=\"token operator\">|</span> string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando poss\u00edvel, o novo c\u00f3digo deve usar anota\u00e7\u00f5es do Flow.\nVoc\u00ea pode executar o <code class=\"language-javascript\">yarn flow</code> localmente para verificar seu c\u00f3digo com o Flow.</p>\n<h3 id=\"multiple-packages\"><a class=\"anchor\" href=\"/react/codebase-overview#multiple-packages\"></a>Pacotes M\u00faltiplos </h3>\n<p>React \u00e9 um <a class=\"external-link\" href=\"https://danluu.com/monorepo/\">monorepo</a>. Seu reposit\u00f3rio cont\u00e9m v\u00e1rios pacotes separados para que suas altera\u00e7\u00f5es possam ser coordenadas em conjunto e os problemas residam em um s\u00f3 lugar.</p>\n<h3 id=\"react-core\"><a class=\"anchor\" href=\"/react/codebase-overview#react-core\"></a>React Core </h3>\n<p>O \u201ccore\u201d do React inclui todas as <a href=\"/react/react-api#react\"><code class=\"language-javascript\">React</code> APIs de n\u00edvel superior</a>, por exemplo:</p>\n<ul>\n<li><code class=\"language-javascript\">React.createElement()</code></li>\n<li><code class=\"language-javascript\">React.Component</code></li>\n<li><code class=\"language-javascript\">React.Children</code></li>\n</ul>\n<p><strong>O core React inclui apenas as APIs necess\u00e1rias para definir os componentes.</strong> N\u00e3o inclui o algoritmo de <a href=\"/react/reconciliation\">reconcilia\u00e7\u00e3o</a> ou qualquer c\u00f3digo espec\u00edfico da plataforma. Ele \u00e9 usado pelos componentes React DOM e React Native.</p>\n<p>O c\u00f3digo do React core est\u00e1 localizado em <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react\"><code class=\"language-javascript\">packages/react</code></a> na \u00e1rvore de origem. Est\u00e1 dispon\u00edvel no npm como o pacote <a class=\"external-link\" href=\"https://www.npmjs.com/package/react\"><code class=\"language-javascript\">react</code></a>. A constru\u00e7\u00e3o do navegador independente correspondente \u00e9 chamada <code class=\"language-javascript\">react.js</code>,e exporta um global chamado <code class=\"language-javascript\">React</code>.</p>\n<h3 id=\"renderers\"><a class=\"anchor\" href=\"/react/codebase-overview#renderers\"></a>Renderizadores </h3>\n<p>O React foi originalmente criado para o DOM, mas depois foi adaptado para tamb\u00e9m suportar plataformas nativas com o <a class=\"external-link\" href=\"https://reactnative.dev/\">React Native</a>. Isso introduziu o conceito de \u201crenderizadores\u201d para as partes internas do React.</p>\n<p><strong>Os renderizadores gerenciam como uma \u00e1rvore no React se transforma nas chamadas de subjacentes da plataforma.</strong></p>\n<p>Renderizadores tamb\u00e9m s\u00e3o encontrados em <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/\"><code class=\"language-javascript\">packages/</code></a>:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-dom\">Renderizador de React DOM</a> renderiza componentes React para o DOM. Implementa <a href=\"/react/react-dom\">APIs do <code class=\"language-javascript\">React</code> de n\u00edvel superior</a> e est\u00e1 dispon\u00edvel como pacote npm <a class=\"external-link\" href=\"https://www.npmjs.com/package/react-dom\"><code class=\"language-javascript\">react-dom</code></a>. Ele tamb\u00e9m pode ser usado como um pacote de navegador aut\u00f4nomo chamado <code class=\"language-javascript\">react-dom.js</code> que exporta um global do <code class=\"language-javascript\">ReactDOM</code>.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-native-renderer\">Renderizador do React Native</a> renderiza componentes React para views nativas. \u00c9 usado internamente pelo React Native.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-test-renderer\">Renderizador de testes do React</a> renderiza componentes React para \u00e1rvores JSON. \u00c9 usado pela funcionalidade de <a class=\"external-link\" href=\"https://facebook.github.io/jest/blog/2016/07/27/jest-14.html\">teste de Snapshot</a> atributo do <a class=\"external-link\" href=\"https://facebook.github.io/jest\">Jest</a> e est\u00e1 dispon\u00edvel como pacote npm <a class=\"external-link\" href=\"https://www.npmjs.com/package/react-test-renderer\">react-test-renderer</a> .</li>\n</ul>\n<p>O \u00fanico outro renderizador oficialmente suportado \u00e9 o <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-art\"><code class=\"language-javascript\">react-art</code></a>. Costumava estar em um <a class=\"external-link\" href=\"https://github.com/reactjs/react-art\">reposit\u00f3rio GitHub</a> separado mas n\u00f3s os movemos para a \u00e1rvore de c\u00f3digo principal.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Tecnicamente o <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-native-renderer\"><code class=\"language-javascript\">react-native-renderer</code></a> \u00e9 uma camada muito fina que ensina o React a interagir com a implementa\u00e7\u00e3o do React Native. O c\u00f3digo espec\u00edfico da plataforma real que gerencia as views nativas reside no <a class=\"external-link\" href=\"https://github.com/facebook/react-native\">reposit\u00f3rio do React Native</a> junto com seus componentes.</p>\n</div>\n<h3 id=\"reconcilers\"><a class=\"anchor\" href=\"/react/codebase-overview#reconcilers\"></a>Reconciliadores </h3>\n<p>At\u00e9 mesmo renderizadores muito diferentes, como o React DOM e o React Native, precisam compartilhar muita l\u00f3gica. Em particular, o algoritmo de  <a href=\"/react/reconciliation\">reconcilia\u00e7\u00e3o</a> deve ser o mais semelhante poss\u00edvel para que a renderiza\u00e7\u00e3o declarativa, os componentes personalizados, o state, os lifecycle methods e os refs funcionem de maneira consistente em todas as plataformas.</p>\n<p>Para resolver isso, diferentes renderizadores compartilham algum c\u00f3digo entre eles. N\u00f3s chamamos essa parte do React de \u201creconciliador\u201d. Quando uma atualiza\u00e7\u00e3o como <code class=\"language-javascript\">setState()</code> est\u00e1 agendado, o reconciliador chama o m\u00e9todo <code class=\"language-javascript\">render()</code> em componentes na \u00e1rvore e monta, atualiza ou desmonta.</p>\n<p>Os reconciliadores n\u00e3o s\u00e3o empacotados separadamente porque atualmente n\u00e3o possuem uma API p\u00fablica. Em vez disso, eles s\u00e3o usados exclusivamente por renderizadores como React DOM e React Native.</p>\n<h3 id=\"stack-reconciler\"><a class=\"anchor\" href=\"/react/codebase-overview#stack-reconciler\"></a>Reconciliador Stack </h3>\n<p>O reconciliador \u201cstack\u201d \u00e9 a implementa\u00e7\u00e3o que energiza o React 15 e o anterior. Desde ent\u00e3o, paramos de us\u00e1-lo, mas est\u00e1 documentado em detalhes na <a href=\"/react/implementation-notes\">pr\u00f3xima se\u00e7\u00e3o</a>.</p>\n<h3 id=\"fiber-reconciler\"><a class=\"anchor\" href=\"/react/codebase-overview#fiber-reconciler\"></a>Reconciliador Fiber </h3>\n<p>O reconciliador de \u201cfiber\u201d \u00e9 um novo esfor\u00e7o com o objetivo de resolver os problemas inerentes ao reconciliador de pilha e corrigir alguns problemas de longa data. Foi o reconciliador padr\u00e3o desde o React 16.</p>\n<p>Seus principais objetivos s\u00e3o:</p>\n<ul>\n<li>Capacidade de dividir o trabalho ininterrupto em blocos.</li>\n<li>Capacidade de priorizar, rebaixar e reutilizar o trabalho em andamento.</li>\n<li>Capacidade de retroceder entre pais e filhos para dar suporte ao layout no React.</li>\n<li>Capacidade de retornar v\u00e1rios elementos do m\u00e9todo <code class=\"language-javascript\">render()</code>.</li>\n<li>Melhor suporte para limites de erro.</li>\n</ul>\n<p>Voc\u00ea pode ler mais sobre a arquitetura do React Fiber <a class=\"external-link\" href=\"https://github.com/acdlite/react-fiber-architecture\">aqui</a> e <a class=\"external-link\" href=\"https://blog.ag-grid.com/inside-fiber-an-in-depth-overview-of-the-new-reconciliation-algorithm-in-react\">aqui</a>. Embora tenha sido fornecido com o React 16, os recursos ass\u00edncronos ainda n\u00e3o est\u00e3o habilitados por padr\u00e3o.</p>\n<p>Seu c\u00f3digo-fonte est\u00e1 localizado em <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-reconciler\"><code class=\"language-javascript\">packages/react-reconciler</code></a>.</p>\n<h3 id=\"event-system\"><a class=\"anchor\" href=\"/react/codebase-overview#event-system\"></a>Sistema de Eventos  </h3>\n<p>O React implementa uma camada sobre eventos nativos para suavizar as diferen\u00e7as entre navegadores. Seu c\u00f3digo fonte est\u00e1 localizado em <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-dom/src/events\"><code class=\"language-javascript\">packages/react-dom/src/events</code></a>.</p>\n<h3 id=\"what-next\"><a class=\"anchor\" href=\"/react/codebase-overview#what-next\"></a>Qual o proximo passo? </h3>\n<p>Leia a <a href=\"/react/implementation-notes\">pr\u00f3xima se\u00e7\u00e3o</a>para aprender sobre a implementa\u00e7\u00e3o do reconciliador antes do React 16 em mais detalhes. Ainda n\u00e3o documentamos os componentes internos do novo reconciliador.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/codebase-overview.md\">Edit this page</a></p></div></article>", "path": "/react/codebase-overview", "nav": ["/react/how-to-contribute", "/react/implementation-notes"]}, {"key": "Notas de Implementa\u00e7\u00e3o", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Esta se\u00e7\u00e3o \u00e9 um conjunto de notas de implementa\u00e7\u00e3o para o <a href=\"/react/codebase-overview#stack-reconciler\">reconciliador de pilha</a>.</p>\n<p>Ela \u00e9 bastante t\u00e9cnica e assume um forte entendimento da API p\u00fablica do React, assim como da sua divis\u00e3o em n\u00facleos, renderizadores e o pr\u00f3prio reconciliador. Se voc\u00ea n\u00e3o estiver muito familiarizado com o c\u00f3digo do React, leia a <a href=\"/react/codebase-overview\">vis\u00e3o geral da base de c\u00f3digo</a> primeiro.</p>\n<p>Tamb\u00e9m \u00e9 pressuposto o entendimento da <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2015/12/18/react-components-elements-and-instances.html\">diferen\u00e7a entre componentes React, suas inst\u00e2ncias e elementos</a>.</p>\n<p>O reconciliador de pilha foi usado no React 15 e em vers\u00f5es anteriores. Est\u00e1 localizado em <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/15-stable/src/renderers/shared/stack/reconciler\">src/renderers/shared/stack/reconciler</a>.</p>\n<h3 id=\"video-building-react-from-scratch\"><a class=\"anchor\" href=\"/react/implementation-notes#video-building-react-from-scratch\"></a>V\u00eddeo: Construindo React do zero </h3>\n<p><a class=\"external-link\" href=\"https://twitter.com/zpao\">Paul O\u2019Shannessy</a> deu uma palestra sobre <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=_MAD4Oly9yg\">construir React do zero</a> que muito inspirou esse documento.</p>\n<p>Tanto este texto quanto a palestra s\u00e3o simplifica\u00e7\u00f5es da real base de c\u00f3digo, ent\u00e3o se familiarizar com os dois pode resultar em um entendimento melhor.</p>\n<h3 id=\"overview\"><a class=\"anchor\" href=\"/react/implementation-notes#overview\"></a>Vis\u00e3o geral </h3>\n<p>O reconciliador em si n\u00e3o possui uma API p\u00fablica. <a href=\"/react/codebase-overview#renderers\">Renderizadores</a> como o React DOM e React Native usam-no para atualizar a interface do usu\u00e1rio de acordo com os componentes React escritos pelo usu\u00e1rio.</p>\n<h3 id=\"mounting-as-a-recursive-process\"><a class=\"anchor\" href=\"/react/implementation-notes#mounting-as-a-recursive-process\"></a>Montagem como um Processo Recursivo </h3>\n<p>Vamos considerar a primeira vez que voc\u00ea monta um componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O React DOM passar\u00e1 <code class=\"language-javascript\">&lt;App /&gt;</code> para o reconciliador. Lembre-se que <code class=\"language-javascript\">&lt;App /&gt;</code> \u00e9 um elemento React, isto \u00e9, uma descri\u00e7\u00e3o <em>do qu\u00ea</em> renderizar. Voc\u00ea pode pensar nele como um simples objeto:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { type: App, props: {} }</span></code></pre></div>\n<p>O reconciliador ir\u00e1 verificar se <code class=\"language-javascript\">App</code> \u00e9 uma classe ou uma fun\u00e7\u00e3o.</p>\n<p>Se <code class=\"language-javascript\">App</code> for uma fun\u00e7\u00e3o, o reconciliador chamar\u00e1 <code class=\"language-javascript\">App(props)</code> para obter o elemento renderizado.</p>\n<p>Se <code class=\"language-javascript\">App</code> for uma classe, o reconciliador instanciar\u00e1 <code class=\"language-javascript\">App</code> com <code class=\"language-javascript\">new App(props)</code>, chamar\u00e1 o m\u00e9todo de ciclo de vida <code class=\"language-javascript\">componentWillMount()</code>, e por fim chamando o m\u00e9todo render()` para obter o elemento renderizado.</p>\n<p>De qualquer forma, o reconciliador saber\u00e1 em que elemento o <code class=\"language-javascript\">App</code> foi \u201crenderizado\u201d.</p>\n<p>Esse processo \u00e9 recursivo. <code class=\"language-javascript\">App</code> talvez seja renderizado para um <code class=\"language-javascript\">&lt;Greeting /&gt;</code>, <code class=\"language-javascript\">Greeting</code> talvez seja renderizado para um <code class=\"language-javascript\">&lt;Button /&gt;</code>, e assim por diante. O reconciliador ir\u00e1 \u201cinvestigar\u201d os componentes definidos pelo usu\u00e1rio recursivamente enquanto ele aprende para o qu\u00ea cada um ser\u00e1 renderizado.</p>\n<p>Voc\u00ea pode imaginar esse processo como um pseudo-c\u00f3digo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Subclasses React.Component possuem essa flag</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Essa fun\u00e7\u00e3o recebe um elemento React (e.g. &lt;App /&gt;)</span>\n<span class=\"token comment\">// e retorna um DOM ou n\u00f3 Nativo representando a \u00e1rvore montada.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// N\u00f3s vamos determinar o elemento renderizado</span>\n  <span class=\"token comment\">// executando o tipo como fun\u00e7\u00e3o</span>\n  <span class=\"token comment\">// ou criando uma inst\u00e2ncia e chamando render().</span>\n  <span class=\"token keyword\">var</span> renderedElement<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componente de classe</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Define as props</span>\n    publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Chama o ciclo de vida se necess\u00e1rio</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Obt\u00eam o elemento renderizado ao chamar render()</span>\n    renderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componente de fun\u00e7\u00e3o</span>\n    renderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Esse processo \u00e9 recursivo pois um componente pode</span>\n  <span class=\"token comment\">// retornar um elemento com o tipo de outro componente.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Nota: essa implementa\u00e7\u00e3o \u00e9 incompleta e recorre infinitamente!</span>\n  <span class=\"token comment\">// Ela s\u00f3 lida com elementos &lt;App /&gt; ou &lt;Button /&gt;.</span>\n  <span class=\"token comment\">// Ela n\u00e3o lida com elementos como &lt;div /&gt; ou &lt;p /&gt; ainda.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrootEl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Isso realmente <em>\u00e9</em> um pseudoc\u00f3digo. N\u00e3o \u00e9 semelhante a implementa\u00e7\u00e3o real. Causar\u00e1 um estouro de pilha porque n\u00e3o discutimos quando parar a recurs\u00e3o.</p>\n</div>\n<p>Recapitulando alguns conceitos chaves do exemplo acima:</p>\n<ul>\n<li>Os elementos do React s\u00e3o objetos simples que representam o tipo do componente (e.g. <code class=\"language-javascript\">App</code>) e as props.</li>\n<li>Componentes definidos pelo usu\u00e1rio (e.g. <code class=\"language-javascript\">App</code>) podem ser classes ou fun\u00e7\u00f5es mas todos eles \u201cse renderizam\u201d a um elemento.</li>\n<li>\u201cMontagem\u201d \u00e9 um processo recursivo que cria uma \u00e1rvore DOM ou Nativa dado um elemento React de n\u00edvel superior (e.g. <code class=\"language-javascript\">&lt;App /&gt;</code>).</li>\n</ul>\n<h3 id=\"mounting-host-elements\"><a class=\"anchor\" href=\"/react/implementation-notes#mounting-host-elements\"></a>Montando Elementos Hospedeiros </h3>\n<p>Esse processo seria in\u00fatil se o resultado n\u00e3o fosse renderizar algo na tela.</p>\n<p>Al\u00e9m dos componentes definidos pelo usu\u00e1rio (\u201ccompostos\u201d), elementos React podem tamb\u00e9m representar componentes (\u201chospedeiros\u201d) para plataformas espec\u00edficas. Por exemplo, <code class=\"language-javascript\">Button</code> pode retornar uma <code class=\"language-javascript\">&lt;div /&gt;</code> no seu m\u00e9todo render.</p>\n<p>Se a propriedade <code class=\"language-javascript\">type</code> for uma string, estamos lidando com um elemento hospedeiro:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { type: 'div', props: {} }</span></code></pre></div>\n<p>N\u00e3o h\u00e1 c\u00f3digo definido pelo usu\u00e1rio associado com elementos do tipo hospedeiro.</p>\n<p>Quando o reconciliador encontra um elemento hospedeiro, ele permite que o renderizador cuide da montagem. Por exemplo, o React DOM criaria um n\u00f3 do DOM.</p>\n<p>Se o elemento hospedeiro possuir filhos, o reconciliador recursivamente os monta seguindo o mesmo algoritmo descrito acima. N\u00e3o importa se os filhos s\u00e3o hospedeiros (como <code class=\"language-javascript\">&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;</code>) ou se s\u00e3o compostos (como <code class=\"language-javascript\">&lt;div&gt;&lt;Button /&gt;&lt;/div&gt;</code>), ou os dois.</p>\n<p>Os n\u00f3s DOM produzidos pelos componentes filhos ser\u00e3o anexados ao n\u00f3 DOM pai, e, recursivamente, a completa estrutura DOM ser\u00e1 constru\u00edda.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>O reconciliador em si n\u00e3o est\u00e1 ligado ao DOM. O exato resultado da montagem (por vezes chamada de \u201cmount image\u201d no c\u00f3digo fonte) depende do renderizador, e pode ser um n\u00f3 do DOM (React DOM), uma string (React DOM Server), ou um n\u00famero representando uma view nativa (React Native).</p>\n</div>\n<p>Se f\u00f4ssemos estender o c\u00f3digo para lidar com elementos hospedeiros, ficaria assim:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Subclasses React.Component possuem essa flag</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Essa fun\u00e7\u00e3o apenas lida com elementos do tipo composto.</span>\n<span class=\"token comment\">// Por exemplo, ela lida com &lt;App /&gt; e &lt;Button /&gt;, mas n\u00e3o com uma &lt;div /&gt;.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mountComposite</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> renderedElement<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componente de classe</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Define as props</span>\n    publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Chama o ciclo de vida se necess\u00e1rio</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    renderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componente de fun\u00e7\u00e3o</span>\n    renderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Isso \u00e9 recursivo mas eventualmente chegaremos no fim da recurs\u00e3o quando</span>\n  <span class=\"token comment\">// o elemento for o hospedeiro (e.g. &lt;div /&gt;) ao inv\u00e9s de composto (e.g. &lt;App /&gt;):</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Essa fun\u00e7\u00e3o apenas lida com elementos do tipo hospedeiro.</span>\n<span class=\"token comment\">// Por exemplo, ela lida com &lt;div /&gt; e &lt;p /&gt; mas n\u00e3o com um &lt;App /&gt;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mountHost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Esse bloco de c\u00f3digo n\u00e3o deveria estar no reconciliador.</span>\n  <span class=\"token comment\">// Renderizadores diferentes podem inicializar n\u00f3s diferentemente.</span>\n  <span class=\"token comment\">// Por exemplo, React Native iria criar views de iOS ou Android.</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Monta os filhos</span>\n  children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childElement</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Filhos podem ser hospedeiros (e.g. &lt;div /&gt;) ou compostos (e.g &lt;Button /&gt;).</span>\n    <span class=\"token comment\">// Tamb\u00e9m os montaremos recursivamente:</span>\n    <span class=\"token keyword\">var</span> childNode <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>childElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Essa linha de c\u00f3digo tamb\u00e9m \u00e9 espec\u00edfica do renderizador.</span>\n    <span class=\"token comment\">// Ela seria diferente dependendo do renderizador:</span>\n    node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Retorna o n\u00f3 do DOM como resultado da montagem.</span>\n  <span class=\"token comment\">// Aqui \u00e9 onde a recurs\u00e3o acaba.</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componentes definidos pelo usu\u00e1rio</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">mountComposite</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componentes de plataformas espec\u00edficas</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">mountHost</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrootEl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Isto funciona mas ainda est\u00e1 longe de como o reconciliador \u00e9 realmente implementado. O ingrediente que falta \u00e9 o suporte para atualiza\u00e7\u00f5es.</p>\n<h3 id=\"introducing-internal-instances\"><a class=\"anchor\" href=\"/react/implementation-notes#introducing-internal-instances\"></a>Introduzindo inst\u00e2ncias Internas </h3>\n<p>A caracter\u00edstica principal do React \u00e9 que voc\u00ea pode re-renderizar tudo, e ele n\u00e3o ir\u00e1 recriar o DOM ou resetar o estado.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Deve reutilizar o DOM existente:</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Contudo, a nossa implementa\u00e7\u00e3o acima apenas sabe como montar a \u00e1rvore inicial. Ela n\u00e3o executa atualiza\u00e7\u00f5es na \u00e1rvore pois n\u00e3o armazena todas as informa\u00e7\u00f5es necess\u00e1rias, como todas as <code class=\"language-javascript\">publicInstance</code>s, ou quais n\u00f3s do DOM correspondem a qual componente.</p>\n<p>O c\u00f3digo do reconciliador de pilha resolve isso fazendo a fun\u00e7\u00e3o <code class=\"language-javascript\">mount()</code> um m\u00e9todo e a colocando em uma classe. Existem desvantagens para essa abordagem, e nos iremos na dire\u00e7\u00e3o oposta na <a href=\"/react/codebase-overview#fiber-reconciler\">atual reescrita do reconciliador</a>. No entanto, \u00e9 assim que funciona atualmente.</p>\n<p>Ao inv\u00e9s de fun\u00e7\u00f5es <code class=\"language-javascript\">mountHost</code> e <code class=\"language-javascript\">mountComposite</code> separadas, n\u00f3s criaremos duas classes: <code class=\"language-javascript\">DOMComponent</code> e <code class=\"language-javascript\">CompositeComponent</code>.</p>\n<p>Ambas as classes possuem um construtor aceitando o <code class=\"language-javascript\">element</code>, assim como um m\u00e9todo <code class=\"language-javascript\">mount()</code> retornando o n\u00f3 montado. N\u00f3s iremos trocar a fun\u00e7\u00e3o de n\u00edvel superior <code class=\"language-javascript\">mount()</code> com uma <em>factory</em> que instancia a classe correta.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompositeComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Componentes definidos pelo usu\u00e1rio</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componentes de plataformas espec\u00edficas</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Primeiro, vamos considerar a implementa\u00e7\u00e3o de <code class=\"language-javascript\">CompositeComponent</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Para componentes compostos, exponha a inst\u00e2ncia da classe.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> publicInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> renderedElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Componente de classe</span>\n      publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Define as props</span>\n      publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Chama o ciclo de vida se necess\u00e1rio</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      renderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Componente de fun\u00e7\u00e3o</span>\n      publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      renderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Salva a inst\u00e2ncia p\u00fablica</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Instancia a inst\u00e2ncia interna filha de acordo com o elemento.</span>\n    <span class=\"token comment\">// Seria algo como um DOMComponent para &lt;div /&gt; ou &lt;p /&gt;,</span>\n    <span class=\"token comment\">// e um CompositeComponent para &lt;App /&gt; ou &lt;Button /&gt;:</span>\n    <span class=\"token keyword\">var</span> renderedComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent <span class=\"token operator\">=</span> renderedComponent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Monta o output renderizado</span>\n    <span class=\"token keyword\">return</span> renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso n\u00e3o \u00e9 muito diferente da nossa implementa\u00e7\u00e3o anterior de <code class=\"language-javascript\">mountComposite</code>, mas agora podemos salvar algumas informa\u00e7\u00f5es, como <code class=\"language-javascript\">this.currentElement</code>, <code class=\"language-javascript\">this.renderedComponent</code>, e <code class=\"language-javascript\">this.publicInstance</code> , para usar durante atualiza\u00e7\u00f5es.</p>\n<p>Note que uma inst\u00e2ncia de <code class=\"language-javascript\">CompositeComponent</code> n\u00e3o \u00e9 a mesma coisa que uma inst\u00e2ncia de um <code class=\"language-javascript\">element.type</code> fornecida pelo usu\u00e1rio. <code class=\"language-javascript\">CompositeComponent</code> \u00e9 um detalhe de implementa\u00e7\u00e3o do nosso reconciliador e nunca \u00e9 exposto para o usu\u00e1rio. A classe definida pelo usu\u00e1rio \u00e9 quem l\u00ea de <code class=\"language-javascript\">element.type</code> e <code class=\"language-javascript\">CompositeComponent</code> cria uma inst\u00e2ncia dela.</p>\n<p>Para evitar confus\u00e3o, n\u00f3s vamos chamar inst\u00e2ncias de <code class=\"language-javascript\">CompositeComponent</code> e <code class=\"language-javascript\">DOMComponent</code> de \u201cinst\u00e2ncias internas\u201d. Elas existem para que possamos associ\u00e1-las a alguns dados de longa vida. Apenas o renderizador e o reconciliador sabem que elas existem.</p>\n<p>Em contraste, n\u00f3s chamamos uma inst\u00e2ncia de uma classe definida pelo usu\u00e1rio uma \u201cinst\u00e2ncia p\u00fablica\u201d. A inst\u00e2ncia p\u00fablica \u00e9 o que voc\u00ea v\u00ea como <code class=\"language-javascript\">this</code> no <code class=\"language-javascript\">render()</code> e outros m\u00e9todos de seus componentes customizados.</p>\n<p>A fun\u00e7\u00e3o <code class=\"language-javascript\">mountHost()</code>, refatorada para ser um m\u00e9todo <code class=\"language-javascript\">mount()</code> na classe <code class=\"language-javascript\">DOMComponent</code>, tamb\u00e9m \u00e9 familiar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// For DOM components, only expose the DOM node.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Cria e salva o n\u00f3</span>\n    <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Define os atributos</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Cria e salva os filhos contidos.</span>\n    <span class=\"token comment\">// Cada um deles pode ser um DOMComponent ou um CompositeComponent</span>\n    <span class=\"token comment\">// dependendo se o tipo do elemento \u00e9 uma string ou uma fun\u00e7\u00e3o.</span>\n    <span class=\"token keyword\">var</span> renderedChildren <span class=\"token operator\">=</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>instantiateComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren <span class=\"token operator\">=</span> renderedChildren<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Coleta nos DOM retornados na montagem</span>\n    <span class=\"token keyword\">var</span> childNodes <span class=\"token operator\">=</span> renderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=&gt;</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    childNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childNode</span> <span class=\"token operator\">=&gt;</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Retorna o n\u00f3 do DOM como resultado da montagem</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A diferen\u00e7a principal depois de refatorar <code class=\"language-javascript\">mountHost()</code> \u00e9 que agora n\u00f3s podemos deixar <code class=\"language-javascript\">this.node</code> e <code class=\"language-javascript\">this.renderedChildren</code> associados com a inst\u00e2ncia interna do componente DOM. N\u00f3s tamb\u00e9m os usaremos para aplicar atualiza\u00e7\u00f5es n\u00e3o destrutivas no futuro.</p>\n<p>Como resultado, cada inst\u00e2ncia interna, composta ou hospedeira, agora aponta para sua inst\u00e2ncia interna filha. Para auxiliar na visualiza\u00e7\u00e3o disso, se o componente de fun\u00e7\u00e3o <code class=\"language-javascript\">&lt;App&gt;</code> renderiza um componente de classe, e a classe <code class=\"language-javascript\">Button</code> renderiza a <code class=\"language-javascript\">&lt;div&gt;</code>, a \u00e1rvore da inst\u00e2ncia interna ficaria assim:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>object CompositeComponent<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  currentElement<span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  publicInstance<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  renderedComponent<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object CompositeComponent<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    currentElement<span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n    publicInstance<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object Button<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    renderedComponent<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object DOMComponent<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      currentElement<span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n      node<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object HTMLDivElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      renderedChildren<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No DOM voc\u00ea apenas veria a <code class=\"language-javascript\">&lt;div&gt;</code>. No entanto, a \u00e1rvore da inst\u00e2ncia interna possui ambas inst\u00e2ncias internas: composta e hospedeira.</p>\n<p>A inst\u00e2ncia interna composta precisa armazenar:</p>\n<ul>\n<li>O elemento atual.</li>\n<li>A inst\u00e2ncia p\u00fablica se o tipo do elemento for uma classe.</li>\n<li>A inst\u00e2ncia interna \u00fanica renderizada. Pode ser tanto um <code class=\"language-javascript\">DOMComponent</code> ou um <code class=\"language-javascript\">CompositeComponent</code>.</li>\n</ul>\n<p>A inst\u00e2ncia interna hospedeira precisa armazenar:</p>\n<ul>\n<li>O elemento atual.</li>\n<li>O n\u00f3 do DOM.</li>\n<li>Todas as inst\u00e2ncias internas filhas. Cada uma delas pode ser tanto um <code class=\"language-javascript\">DOMComponent</code> ou um <code class=\"language-javascript\">CompositeComponent</code>.</li>\n</ul>\n<p>Se voc\u00ea est\u00e1 tendo dificuldades para imaginar como uma \u00e1rvore de inst\u00e2ncias internas \u00e9 estruturada em aplica\u00e7\u00f5es mais complexas, <a class=\"external-link\" href=\"https://github.com/facebook/react-devtools\">React DevTools</a> pode te dar uma boa aproxima\u00e7\u00e3o, pois inst\u00e2ncias hospedeiras s\u00e3o marcadas com cinza, e inst\u00e2ncias compostas com roxo:</p>\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/d96fec10d250eace9756f09543bf5d58/00d43/implementation-notes-tree.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://pt-br.reactjs.org//static/d96fec10d250eace9756f09543bf5d58/1e088/implementation-notes-tree.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Para completar essa refatora\u00e7\u00e3o, n\u00f3s vamos introduzir a fun\u00e7\u00e3o que monta a \u00e1rvore completa em um n\u00f3 cont\u00eainer, assim como faz <code class=\"language-javascript\">ReactDOM.render()</code>. Ela retorna uma inst\u00e2ncia p\u00fablica, tamb\u00e9m como <code class=\"language-javascript\">ReactDOM.render()</code> faz.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create a inst\u00e2ncia interna de n\u00edvel superior</span>\n  <span class=\"token keyword\">var</span> rootComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Monta o componente de n\u00edvel superior no cont\u00eainer</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  containerNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Retorna a inst\u00e2ncia p\u00fablica que \u00e9 provida</span>\n  <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> publicInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"unmounting\"><a class=\"anchor\" href=\"/react/implementation-notes#unmounting\"></a>Desmontando </h3>\n<p>Agora que temos inst\u00e2ncias internas que possuem seus filhos e n\u00f3s do DOM, podemos implementar a desmontagem. Para um componente composto, desmontar executa um m\u00e9todo do ciclo de vida em recurs\u00e3o.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Chama o m\u00e9todo de ciclo de vida se necess\u00e1rio</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillUnmount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Desmonta o componente renderizado</span>\n    <span class=\"token keyword\">var</span> renderedComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent<span class=\"token punctuation\">;</span>\n    renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para o <code class=\"language-javascript\">DOMComponent</code>, desmontar pede para que todo filho se desmonte:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Desmonta todos os filhos</span>\n    <span class=\"token keyword\">var</span> renderedChildren <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren<span class=\"token punctuation\">;</span>\n    renderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=&gt;</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Na pr\u00e1tica, desmontar componentes DOM tamb\u00e9m remove os event listeners e limpa alguns caches, mas vamos pular esses detalhes.</p>\n<p>Podemos agora adicionar uma nova fun\u00e7\u00e3o de alto n\u00edvel chamada <code class=\"language-javascript\">unmountTree(containerNode)</code> que \u00e9 semelhante a <code class=\"language-javascript\">ReactDOM.unmountComponentAtNode()</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">unmountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// L\u00ea a inst\u00e2ncia interna de um n\u00f3 do DOM:</span>\n  <span class=\"token comment\">// (Isso ainda n\u00e3o funciona, n\u00f3s vamos precisar mudar mountTree() para guarda-la)</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> rootComponent <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>_internalInstance<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Desmonta a \u00e1rvore e limpa o cont\u00eainer</span>\n  rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  containerNode<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para que isso funcione, n\u00f3s precisamos ler uma inst\u00e2ncia interna raiz de um n\u00f3 do DOM. N\u00f3s vamos modificar <code class=\"language-javascript\">mountTree()</code> para adicionar a propriedade <code class=\"language-javascript\">_internalInstance</code> ao n\u00f3 do DOM raiz. N\u00f3s tamb\u00e9m ensinaremos a <code class=\"language-javascript\">mountTree()</code> como destruir qualquer \u00e1rvore existente para que ela possa ser chamada m\u00faltiplas vezes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Destr\u00f3i qualquer \u00e1rvore existente</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unmountTree</span><span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Cria a inst\u00e2ncia interna de n\u00edvel superior</span>\n  <span class=\"token keyword\">var</span> rootComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Monta o componente de nivel superior no cont\u00eainer</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  containerNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Salva uma refer\u00eancia para a inst\u00e2ncia interna</span>\n  node<span class=\"token punctuation\">.</span>_internalInstance <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Retorna a inst\u00e2ncia p\u00fablica que \u00e9 provida</span>\n  <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> publicInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, executando <code class=\"language-javascript\">unmountTree()</code> ou executando <code class=\"language-javascript\">mountTree()</code> repetidamente, remover\u00e1 a \u00e1rvore antiga e em seguida executa o m\u00e9todo de ciclo de vida <code class=\"language-javascript\">componentWillUnmount()</code> nos componentes.</p>\n<h3 id=\"updating\"><a class=\"anchor\" href=\"/react/implementation-notes#updating\"></a>Atualizando </h3>\n<p>Na se\u00e7\u00e3o anterior, n\u00f3s implementamos a desmontagem. Contudo, o React n\u00e3o seria muito \u00fatil se cada mudan\u00e7a de prop desmontasse e montasse a \u00e1rvore toda. O objetivo do reconciliador \u00e9 reutilizar inst\u00e2ncias existentes quando poss\u00edvel para preservar o DOM e o estado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Deve reutilizar o DOM existente:</span>\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>N\u00f3s iremos estender esse contrato da inst\u00e2ncia interna com mais um m\u00e9todo. Alem do <code class=\"language-javascript\">mount()</code> e <code class=\"language-javascript\">unmount()</code>, ambos <code class=\"language-javascript\">DOMComponent</code> e <code class=\"language-javascript\">CompositeComponent</code> v\u00e3o implementar um novo m\u00e9todo chamado <code class=\"language-javascript\">receive(nextElement)</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sua responsabilidade \u00e9 fazer o que for necess\u00e1rio para atualizar o componente (e qualquer um de seus filhos) com a descri\u00e7\u00e3o dada pelo <code class=\"language-javascript\">nextElement</code>.</p>\n<p>Essa \u00e9 a parte geralmente descrita como \u201cdiff do DOM virtual\u201d embora o que realmente acontece \u00e9 que andamos pela \u00e1rvore interna recursivamente e permitimos que cada inst\u00e2ncia receba uma atualiza\u00e7\u00e3o.</p>\n<h3 id=\"updating-composite-components\"><a class=\"anchor\" href=\"/react/implementation-notes#updating-composite-components\"></a>Atualizando Componentes Compostos </h3>\n<p>Quando um componente composto recebe um novo elemento, n\u00f3s executamos o m\u00e9todo de ciclo de vida <code class=\"language-javascript\">componentWillUpdate()</code>.</p>\n<p>Ent\u00e3o re-renderizamos o componente com as novas props, e capturamos o pr\u00f3ximo elemento renderizado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> prevProps <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevRenderedComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevRenderedElement <span class=\"token operator\">=</span> prevRenderedComponent<span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Atualiza *o pr\u00f3prio* elemento</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextProps <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Descobre qual \u00e9 o pr\u00f3ximo resultado do render()</span>\n    <span class=\"token keyword\">var</span> nextRenderedElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Componente de classe</span>\n      <span class=\"token comment\">// Chama o ciclo de vida se necess\u00e1rio</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Atualiza as props</span>\n      publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> nextProps<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Re-renderiza</span>\n      nextRenderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Componente de fun\u00e7\u00e3o</span>\n      nextRenderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Ap\u00f3s isso, n\u00f3s podemos olhar para o <code class=\"language-javascript\">type</code> do elemento renderizado. Se o <code class=\"language-javascript\">type</code> n\u00e3o mudou desde a \u00faltima renderiza\u00e7\u00e3o, o componente abaixo tamb\u00e9m pode ser atualizado.</p>\n<p>Por exemplo, se retorna <code class=\"language-javascript\">&lt;Button color=\"red\" /&gt;</code> na primeira vez, e <code class=\"language-javascript\">&lt;Button color=\"blue\" /&gt;</code> na segunda vez, n\u00f3s podemos apenas dizer a inst\u00e2ncia interna correspondente para receber (<code class=\"language-javascript\">receive()</code>) o segundo elemento:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Se o tipo do elemento renderizado n\u00e3o mudou</span>\n    <span class=\"token comment\">// reutilize a inst\u00e2ncia existente do componente e retorne.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevRenderedElement<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> nextRenderedElement<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prevRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>nextRenderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Contudo, se o pr\u00f3ximo elemento renderizado possuir um <code class=\"language-javascript\">type</code> diferente do anterior, n\u00e3o podemos atualizar a inst\u00e2ncia interna. Um <code class=\"language-javascript\">&lt;button&gt;</code> n\u00e3o pode \u201cse tornar\u201d um <code class=\"language-javascript\">&lt;input&gt;</code>.</p>\n<p>Nesse caso, temos que desmontar a inst\u00e2ncia interna existente e montar a nova correspondente ao tipo do elemento renderizado. Por exemplo, \u00e9 isso que acontece quando um componente que previamente renderizava um <code class=\"language-javascript\">&lt;button /&gt;</code> renderiza um <code class=\"language-javascript\">&lt;input /&gt;</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Se chegamos nesse ponto, n\u00f3s precisamos desmontar o componente</span>\n    <span class=\"token comment\">// montado anteriormente, montar o novo, e trocar seus n\u00f3s.</span>\n\n    <span class=\"token comment\">// Encontra o n\u00f3 antigo pois ser\u00e1 necess\u00e1rio troc\u00e1-lo</span>\n    <span class=\"token keyword\">var</span> prevNode <span class=\"token operator\">=</span> prevRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Desmonta o filho antigo e monta o novo</span>\n    prevRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextRenderedComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>nextRenderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextNode <span class=\"token operator\">=</span> nextRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Substitui a refer\u00eancia ao filho</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent <span class=\"token operator\">=</span> nextRenderedComponent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Substitui o n\u00f3 antigo com o novo</span>\n    <span class=\"token comment\">// Nota: isso \u00e9 c\u00f3digo espec\u00edfico do renderizador e</span>\n    <span class=\"token comment\">// idealmente deveria viver fora do CompositeComponent</span>\n    prevNode<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">,</span> prevNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para resumir isso tudo, quando um componente composto recebe um novo elemento, ele pode ou n\u00e3o delegar a atualiza\u00e7\u00e3o a sua inst\u00e2ncia interna renderizada, ou a desmontar e montar uma nova em seu lugar.</p>\n<p>Existe outra condi\u00e7\u00e3o na qual um componente vai remontar ao inv\u00e9s de receber um elemento, e isso \u00e9 quando a chave do elemento mudou. N\u00f3s n\u00e3o discutimos sobre como lidar com chaves nesse documento pois adicionaria mais complexidade a um tutorial j\u00e1 complexo.</p>\n<p>Note que n\u00f3s precisamos adicionar um m\u00e9todo chamado <code class=\"language-javascript\">getHostNode()</code> ao contrato de uma inst\u00e2ncia interna para que ela possa localizar o n\u00f3 espec\u00edfico da plataforma e o trocar durante a atualiza\u00e7\u00e3o. Sua implementa\u00e7\u00e3o \u00e9 bem direta para ambas as classes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Pe\u00e7a ao componente renderizado para fornec\u00ea-lo.</span>\n    <span class=\"token comment\">// Isso ir\u00e1 acessar recursivamente quaisquer elementos compostos.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"updating-host-components\"><a class=\"anchor\" href=\"/react/implementation-notes#updating-host-components\"></a>Atualizando Componentes Hospedeiros </h3>\n<p>Implementa\u00e7\u00f5es de componentes hospedeiros, como a de <code class=\"language-javascript\">DOMComponent</code>, atualizam de maneira diferente. Quando recebem um elemento, \u00e9 preciso atualizar a view espec\u00edfica da plataforma subjacente. No caso de React DOM, isso significa atualizar os atributos DOM:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevElement <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevProps <span class=\"token operator\">=</span> prevElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextProps <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Remove atributos antigos</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>nextProps<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Define os pr\u00f3ximos atributos.</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Ent\u00e3o, o componente hospedeiro precisa atualizar seus filhos. Diferentemente de componentes compostos, eles podem conter mais de um filho.</p>\n<p>Neste simples exemplo, n\u00f3s usamos um array de inst\u00e2ncias internas e iteramos sobre ele, atualizando ou trocando as inst\u00e2ncias internas, dependendo se o <code class=\"language-javascript\">type</code> recebido \u00e9 igual ao <code class=\"language-javascript\">type</code> anterior. O verdadeiro reconciliador tamb\u00e9m leva a chave do elemento em conta e rastreia movimentos, al\u00e9m de inser\u00e7\u00f5es e deletes, mas omitiremos essa l\u00f3gica.</p>\n<p>N\u00f3s coletamos opera\u00e7\u00f5es DOM feitas em n\u00f3s filhos em uma lista para que possamos execut\u00e1-las em lotes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Esses s\u00e3o vetores de elementos React:</span>\n    <span class=\"token keyword\">var</span> prevChildren <span class=\"token operator\">=</span> prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>prevChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prevChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>prevChildren<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> nextChildren <span class=\"token operator\">=</span> nextProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nextChildren<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Esses s\u00e3o vetores de inst\u00e2ncias internas:</span>\n    <span class=\"token keyword\">var</span> prevRenderedChildren <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextRenderedChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// \u00c0 medida que iteramos os filhos, adicionaremos opera\u00e7\u00f5es ao vetor.</span>\n    <span class=\"token keyword\">var</span> operationQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// Nota: a se\u00e7\u00e3o abaixo est\u00e1 extremamente simplificada!</span>\n    <span class=\"token comment\">// Ela n\u00e3o lida com re-ordena\u00e7\u00f5es, filhos com furos, ou chaves.</span>\n    <span class=\"token comment\">// Ela s\u00f3 existe para ilustrar o fluxo geral, n\u00e3o os detalhes.</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nextChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Tenta obter uma inst\u00e2ncia interna existente para esse filho</span>\n      <span class=\"token keyword\">var</span> prevChild <span class=\"token operator\">=</span> prevRenderedChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Se n\u00e3o houver inst\u00e2ncias internas nesse \u00edndice,</span>\n      <span class=\"token comment\">// um filho foi anexado at\u00e9 o fim. Cria uma nova inst\u00e2ncia</span>\n      <span class=\"token comment\">// interna, a monta, e usa seu n\u00f3.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prevChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> nextChild <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> nextChild<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Grava que precisamos anexar um n\u00f3</span>\n        operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextRenderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nextChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// N\u00f3s podemos atualizar a inst\u00e2ncia apenas se o tipo do elemento for compat\u00edvel.</span>\n      <span class=\"token comment\">// Por exemplo, &lt;Button size=\"small\" /&gt; pode ser atualizado para</span>\n      <span class=\"token comment\">// &lt;Button size=\"large\" /&gt; mas n\u00e3o para um &lt;App /&gt;.</span>\n      <span class=\"token keyword\">var</span> canUpdate <span class=\"token operator\">=</span> prevChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Se n\u00e3o podemos atualizar uma inst\u00e2ncia existente, temos que desmont\u00e1-la</span>\n      <span class=\"token comment\">// e montar uma nova no seu lugar.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>canUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> prevNode <span class=\"token operator\">=</span> prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> nextChild <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> nextNode <span class=\"token operator\">=</span> nextChild<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Lembre que precisamos trocar os n\u00f3s.</span>\n        operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'REPLACE'</span><span class=\"token punctuation\">,</span> prevNode<span class=\"token punctuation\">,</span> nextNode<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextRenderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nextChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Se pudermos atualizar uma inst\u00e2ncia interna existente,</span>\n      <span class=\"token comment\">// deixe-a receber o pr\u00f3ximo elemento e lidar com sua pr\u00f3pria atualiza\u00e7\u00e3o.</span>\n      prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nextRenderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prevChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Finalmente, desmonte qualquer filho que n\u00e3o exista:</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> nextChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> prevChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> prevChild <span class=\"token operator\">=</span> prevRenderedChildren<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Grave que precisamos remover o n\u00f3</span>\n      operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'REMOVE'</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Aponta a lista de elementos renderizados para a vers\u00e3o atualizada.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren <span class=\"token operator\">=</span> nextRenderedChildren<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Como passo final, n\u00f3s executamos as opera\u00e7\u00f5es DOM. Novamente, o c\u00f3digo do reconciliador real \u00e9 mais complexo pois tamb\u00e9m envolve movimentos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Processa a fila de opera\u00e7\u00f5es.</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>operationQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> operation <span class=\"token operator\">=</span> operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'ADD'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'REPLACE'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>nextNode<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">.</span>prevNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'REMOVE'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E isto \u00e9 a atualiza\u00e7\u00e3o de componentes hospedeiros.</p>\n<h3 id=\"top-level-updates\"><a class=\"anchor\" href=\"/react/implementation-notes#top-level-updates\"></a>Atualiza\u00e7\u00f5es de N\u00edvel Superior </h3>\n<p>Agora que ambos <code class=\"language-javascript\">CompositeComponent</code> e <code class=\"language-javascript\">DOMComponent</code> implementam o m\u00e9todo <code class=\"language-javascript\">receive(nextElement)</code>, podemos mudar a fun\u00e7\u00e3o <code class=\"language-javascript\">mountTree()</code> de n\u00edvel superior para que seja usada quando o tipo do elemento for o mesmo da \u00faltima vez:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Verifica se h\u00e1 uma \u00e1rvore existente</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> prevNode <span class=\"token operator\">=</span> containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevRootComponent <span class=\"token operator\">=</span> prevNode<span class=\"token punctuation\">.</span>_internalInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevElement <span class=\"token operator\">=</span> prevRootComponent<span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Se pudermos, reutilizamos o componente raiz existente</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevElement<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prevRootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Do contr\u00e1rio, desmonte a \u00e1rvore existente.</span>\n    <span class=\"token function\">unmountTree</span><span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora executar mountTree() duas vezes com o mesmo tipo n\u00e3o \u00e9 destrutivo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Reutiliza o DOM existente:</span>\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esse \u00e9 o b\u00e1sico de como o React funciona internamente.</p>\n<h3 id=\"what-we-left-out\"><a class=\"anchor\" href=\"/react/implementation-notes#what-we-left-out\"></a>O Que Omitimos </h3>\n<p>Esse documento \u00e9 simples comparado com o c\u00f3digo real. Existem alguns aspectos importantes que n\u00e3o abordamos:</p>\n<ul>\n<li>Componentes podem renderizar <code class=\"language-javascript\">null</code>, e o reconciliador pode lidar com \u201cespa\u00e7os vazios\u201d em arrays e em resultados renderizados.</li>\n<li>O reconciliador tamb\u00e9m l\u00ea a chave de seus elementos, e a usa para estabelecer qual inst\u00e2ncia interna corresponde a qual elemento em um array. Muita da complexidade da implementa\u00e7\u00e3o real do React est\u00e1 relacionado a isto.</li>\n<li>Al\u00e9m de classes de inst\u00e2ncia interna composta e hospedeira, existem tamb\u00e9m classes para componentes texto e componentes vazios. Eles representam n\u00f3s textuais e os \u201cespa\u00e7os vazios\u201d voc\u00ea obt\u00e9m renderizando <code class=\"language-javascript\">null</code>.</li>\n<li>Renderizadores usam <a href=\"/react/codebase-overview#dynamic-injection\">inje\u00e7\u00e3o</a> para passar a classe interna do host ao reconciliador. Por exemplo, o React DOM pede para o reconciliador usar <code class=\"language-javascript\">ReactDOMComponent</code> como a implementa\u00e7\u00e3o da inst\u00e2ncia interna hospedeira.</li>\n<li>A l\u00f3gica para atualizar a lista de filhos \u00e9 extra\u00eddo em um mixin chamado <code class=\"language-javascript\">ReactMultiChild</code> que \u00e9 usada pela implementa\u00e7\u00e3o da classe de inst\u00e2ncia interna hospedeira tanto no React DOM quanto no React Native.</li>\n<li>O Reconciliador tamb\u00e9m implementa suporte para <code class=\"language-javascript\">setState()</code> em elementos compostos. M\u00faltiplas atualiza\u00e7\u00f5es dentro de manipuladores de eventos s\u00e3o realizadas em uma s\u00f3 atualiza\u00e7\u00e3o.</li>\n<li>O reconciliador tamb\u00e9m lida com anexar e desanexar refs a componentes compostos e n\u00f3s hospedeiros.</li>\n<li>M\u00e9todos de ciclo de vida s\u00e3o chamados ap\u00f3s o DOM estar pronto, como <code class=\"language-javascript\">componentDidMount()</code> e <code class=\"language-javascript\">componentDidUpdate()</code>, s\u00e3o coletados em \u201cfilas de callback\u201d e s\u00e3o executadas em um s\u00f3 lote.</li>\n<li>O React coloca informa\u00e7\u00f5es sobre a atualiza\u00e7\u00e3o atual em um objeto interno chamado de \u201ctransa\u00e7\u00e3o\u201d. Transa\u00e7\u00f5es s\u00e3o \u00fateis para observar a fila de m\u00e9todos de ciclo de vida pendentes, o aninhamento do DOM atual para alertas e qualquer outra coisa que seja \u201cglobal\u201d a uma atualiza\u00e7\u00e3o espec\u00edfica. Transa\u00e7\u00f5es tamb\u00e9m garantem que o React \u201climpe tudo\u201d ap\u00f3s atualiza\u00e7\u00f5es. Por exemplo, a classe de transa\u00e7\u00e3o provida pelo React DOM restaura a sele\u00e7\u00e3o de input ap\u00f3s qualquer atualiza\u00e7\u00e3o.</li>\n</ul>\n<h3 id=\"jumping-into-the-code\"><a class=\"anchor\" href=\"/react/implementation-notes#jumping-into-the-code\"></a>Mergulhando no C\u00f3digo </h3>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/dom/client/ReactMount.js\"><code class=\"language-javascript\">ReactMount</code></a> \u00e9 onde o c\u00f3digo como <code class=\"language-javascript\">mountTree()</code> e <code class=\"language-javascript\">unmountTree()</code> deste tutorial vive.  Ele cuida da montagem e desmontagem de componentes de n\u00edvel superior. <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/native/ReactNativeMount.js\"><code class=\"language-javascript\">ReactNativeMount</code></a> \u00e9 o an\u00e1logo para React Native.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/dom/shared/ReactDOMComponent.js\"><code class=\"language-javascript\">ReactDOMComponent</code></a> \u00e9 o equivalente de <code class=\"language-javascript\">DOMComponent</code> neste tutorial. Ele implementa o componente de classe hospedeira para o renderizador React DOM.<a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/native/ReactNativeBaseComponent.js\"><code class=\"language-javascript\">ReactNativeBaseComponent</code></a> \u00e9 o an\u00e1logo para React Native.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js\"><code class=\"language-javascript\">ReactCompositeComponent</code></a> \u00e9 o equivalente de <code class=\"language-javascript\">CompositeComponent</code> neste tutorial. Ele lida com a chamada de componentes definidos pelo usu\u00e1rio e manter seu estado.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/instantiateReactComponent.js\"><code class=\"language-javascript\">instantiateReactComponent</code></a> cont\u00e9m o comutador que seleciona a correta classe de inst\u00e2ncia interna para construir um elemento. \u00c9 equivalente a <code class=\"language-javascript\">instantiateComponent()</code> neste tutorial.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactReconciler.js\"><code class=\"language-javascript\">ReactReconciler</code></a> \u00e9 um wrapper com os m\u00e9todos <code class=\"language-javascript\">mountComponent()</code>, <code class=\"language-javascript\">receiveComponent()</code> e <code class=\"language-javascript\">unmountComponent()</code>. Ele chama as implementa\u00e7\u00f5es subjacentes nas inst\u00e2ncias internas, mas tamb\u00e9m inclui c\u00f3digo que \u00e9 compartilhado por todas as implementa\u00e7\u00f5es de inst\u00e2ncias internas.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactChildReconciler.js\"><code class=\"language-javascript\">ReactChildReconciler</code></a> implementa a l\u00f3gica para montar, atualizar e desmontar filhos de acordo com a chave de seus elementos.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactMultiChild.js\"><code class=\"language-javascript\">ReactMultiChild</code></a> implementa o processamento da fila de opera\u00e7\u00f5es para inser\u00e7\u00f5es, exclus\u00f5es e movimenta\u00e7\u00f5es independentemente do renderizador.</li>\n<li><code class=\"language-javascript\">mount()</code>, <code class=\"language-javascript\">receive()</code> e <code class=\"language-javascript\">unmount()</code> s\u00e3o chamados de <code class=\"language-javascript\">mountComponent()</code>, <code class=\"language-javascript\">receiveComponent()</code> e <code class=\"language-javascript\">unmountComponent()</code> na base de c\u00f3digo React por raz\u00f5es legadas, mas eles recebem elementos.</li>\n<li>As propriedades nas inst\u00e2ncias internas come\u00e7am com um sublinhado, e.g. <code class=\"language-javascript\">_currentElement</code>. Elas s\u00e3o consideradas como campos p\u00fablicos de apenas leitura em toda a base de c\u00f3digo.</li>\n</ul>\n<h3 id=\"future-directions\"><a class=\"anchor\" href=\"/react/implementation-notes#future-directions\"></a>Dire\u00e7\u00f5es Futuras </h3>\n<p>O reconciliador de pilha tem limita\u00e7\u00f5es inerentes, como ser s\u00edncrono e incapaz de interromper trabalhos ou dividi-los em partes. H\u00e1 um projeto em andamento no <a href=\"/react/codebase-overview#fiber-reconciler\">novo Reconciliador Fiber</a> com uma <a class=\"external-link\" href=\"https://github.com/acdlite/react-fiber-architecture\">arquitetura completamente diferente</a>. No futuro, pretendemos substituir o reconciliador de pilha por ele, mas no momento est\u00e1 longe de estar completo.</p>\n<h3 id=\"next-steps\"><a class=\"anchor\" href=\"/react/implementation-notes#next-steps\"></a>Pr\u00f3ximos Passos </h3>\n<p>Leia a <a href=\"/react/design-principles\">pr\u00f3xima se\u00e7\u00e3o</a> para aprender sobre os princ\u00edpios orientadores que usamos para o desenvolvimento do React.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/implementation-notes.md\">Edit this page</a></p></div></article>", "path": "/react/implementation-notes", "nav": ["/react/codebase-overview", "/react/design-principles"]}, {"key": "Princ\u00edpios de Design", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>Escrevemos este documento para que se tenha uma melhor compreens\u00e3o sobre como decidimos o que o React faz e o que n\u00e3o faz e como \u00e9 nossa filosofia de desenvolvimento. Embora aguardamos ansiosos as contribui\u00e7\u00f5es da comunidade, n\u00e3o tomaremos um caminho que viole um ou mais desses princ\u00edpios.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Este documento pressup\u00f5e um forte entendimento do React. Ele descreve os princ\u00edpios de design do <em>React em si</em>, n\u00e3o de seus componentes ou aplica\u00e7\u00f5es.</p>\n<p>Para uma introdu\u00e7\u00e3o ao React, verificar <a href=\"/react/thinking-in-react\">Pensando em React </a>.</p>\n</div>\n<h3 id=\"composition\"><a class=\"anchor\" href=\"/react/design-principles#composition\"></a>Composi\u00e7\u00e3o </h3>\n<p>A principal caracter\u00edstica do React s\u00e3o os componentes. Componentes escritos por diferentes pessoas, devem funcionar bem juntos. \u00c9 importante para n\u00f3s que voc\u00ea possa adicionar funcionalidade a um componente, sem gerar efeitos colaterais no c\u00f3digo.</p>\n<p>Por exemplo, \u00e9 poss\u00edvel introduzir um state (estado) local dentro de um componente, sem alterar nenhum dos componentes que usam o mesmo. Da mesma forma, ser\u00e1 poss\u00edvel adicionar c\u00f3digo de inicializa\u00e7\u00e3o e \u201cdestrui\u00e7\u00e3o\u201d em qualquer componente quando necess\u00e1rio.</p>\n<p>N\u00e3o h\u00e1 nada de \u201cerrado\u201d em usar state (estado) ou m\u00e9todos do ciclo de vida nos componentes. Como qualquer funcionalidade poderosa, eles devem ser usados com modera\u00e7\u00e3o. Por\u00e9m, n\u00e3o temos a inten\u00e7\u00e3o de remov\u00ea-los. Pelo contr\u00e1rio, pensamos que eles s\u00e3o partes importantes do que torna o React \u00fatil. Poderemos permitir <a class=\"external-link\" href=\"https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State\">mais padr\u00f5es funcionais</a> no futuro. Por\u00e9m, tanto state (estado) local e m\u00e9todos do ciclo de vida ser\u00e3o parte desse modelo.</p>\n<p>Componentes geralmente s\u00e3o descritos como \u201capenas fun\u00e7\u00f5es\u201d. Por\u00e9m, pelo nosso ponto de vista, eles precisam ser mais do que isso para serem \u00fateis. No React, os componentes descrevem qualquer comportamento \u201ccomposable\u201d, incluindo rendering (renderiza\u00e7\u00e3o), lifecycle (ciclo de vida) e state. Algumas bibliotecas, como <a class=\"external-link\" href=\"https://facebook.github.io/relay/\">Relay (Retransmiss\u00e3o)</a> aumentam a responsabilidade dos componentes, como por exemplo descrever a depend\u00eancia de dados. \u00c9 poss\u00edvel que essas ideias possam voltar para o React tamb\u00e9m de alguma forma.</p>\n<h3 id=\"common-abstraction\"><a class=\"anchor\" href=\"/react/design-principles#common-abstraction\"></a>Abstra\u00e7\u00e3o comum </h3>\n<p>Normalmente n\u00f3s <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=4anAwXYqLG8\">resistimos \u00e0 adi\u00e7\u00e3o de funcionalidades</a> que podem ser implementadas pela comunidade. Pois n\u00e3o queremos encher as suas aplica\u00e7\u00f5es com c\u00f3digo de bibliotecas desnecess\u00e1rias. No entanto, h\u00e1 algumas exce\u00e7\u00f5es.</p>\n<p>Por exemplo, se o React n\u00e3o fornecesse suporte para state (estado) local e m\u00e9todos do ciclo de vida, as pessoas criariam abstra\u00e7\u00f5es personalizadas para eles. E, quando h\u00e1 v\u00e1rias abstra\u00e7\u00f5es competindo, o React n\u00e3o pode for\u00e7ar ou tirar vantagem das propriedades de nenhum dessas abstra\u00e7\u00f5es. Deve-se ter um m\u00ednimo padr\u00e3o a ser seguido.</p>\n<p>Por isso, ocasionalmente, adicionamos recursos ao React em si. Se soubermos que h\u00e1 v\u00e1rios componentes implementando uma certa funcionalidade de maneira incompat\u00edvel ou ineficiente, preferimos implement\u00e1-las como parte do React. Embora n\u00e3o fa\u00e7amos isso com frequ\u00eancia. Quando fizermos \u00e9 porque acreditamos que, aumentando o n\u00edvel de abstra\u00e7\u00e3o, iremos beneficiar todo o sistema. State, m\u00e9todos do ciclo de vida, eventos de normaliza\u00e7\u00e3o cross-browser s\u00e3o bons exemplos disso.</p>\n<p>Sempre debatemos melhorias com a comunidade. Voc\u00ea pode achar alguns desses debates pela label <a class=\"external-link\" href=\"https://github.com/facebook/react/issues?q=is:open+is:issue+label:%22Type:+Big+Picture%22\">\u201cbig picture\u201d</a> nas issues do React.</p>\n<h3 id=\"escape-hatches\"><a class=\"anchor\" href=\"/react/design-principles#escape-hatches\"></a>Sa\u00edda de Emerg\u00eancia </h3>\n<p>O React \u00e9 pragm\u00e1tico. Guiado pelas necessidades dos projetos desenvolvidos no Facebook. Embora seja influenciado por alguns paradigmas que ainda n\u00e3o s\u00e3o muito utilizados, tais como programa\u00e7\u00e3o funcional, manter-se  acess\u00edvel para uma grande variedade de desenvolvedores, com diferentes n\u00edveis de habilidades e experi\u00eancia,  \u00e9 um dos principais objetivos do projeto.</p>\n<p>Se quisermos depreciar algum padr\u00e3o que n\u00e3o gostamos, \u00e9 de nossa responsabilidade considerar todas as situa\u00e7\u00f5es para isso e <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">educar a comunidade para que pense em alternativas</a>, antes de o depreciarmos. Se houver algum padr\u00e3o bastante utilizado para constru\u00e7\u00e3o das aplica\u00e7\u00f5es, por\u00e9m complexo para expressar de modo declarativo, iremos <a href=\"/react/more-about-refs\">oferecer uma API imperativa</a> para isso. Se n\u00e3o fornecemos uma API perfeita, para alguma situa\u00e7\u00e3o que achamos necess\u00e1ria em diversas aplica\u00e7\u00f5es, iremos fornecer <a href=\"/react/legacy-context\">uma API tempor\u00e1ria</a> desde que seja poss\u00edvel nos livrarmos dela mais tarde e ela deixe a porta aberta para futuras melhorias.</p>\n<h3 id=\"stability\"><a class=\"anchor\" href=\"/react/design-principles#stability\"></a>Estabilidade </h3>\n<p>Valorizamos APIs est\u00e1veis. No Facebook, temos mais de 50 mil componentes utilizando React. Muitas outras empresas, como <a class=\"external-link\" href=\"https://twitter.com/\">Twitter</a> e <a class=\"external-link\" href=\"https://www.airbnb.com/\">Airbnb</a>, tamb\u00e9m utilizam bastante o React. Estes s\u00e3o os motivos de evitarmos altera\u00e7\u00f5es nas APIs p\u00fablicas ou no comportamento do React.</p>\n<p>Entretanto, quando pensamos em estabilidade, n\u00e3o dizemos que \u201cn\u00e3o haver\u00e1 mudan\u00e7as\u201d. Pois assim, rapidamente ir\u00e1 paralisar. Em vez disso, preferimos definir estabilidade como \u201cAmplamente utilizado em produ\u00e7\u00e3o e quando ocorrer alguma altera\u00e7\u00e3o, haver\u00e1 um caminho claro (e preferencialmente automatizado) para realizar a migra\u00e7\u00e3o.\u201d</p>\n<p>Quando n\u00f3s depreciamos um padr\u00e3o, estudamos seu uso interno no Facebook e adicionamos avisos de deprecia\u00e7\u00e3o. Permitindo-nos avaliar o impacto da mudan\u00e7a. \u00c0s vezes voltamos atr\u00e1s se percebermos que foi uma a\u00e7\u00e3o precoce e que necessitamos pensar mais estrategicamente sobre colocar o c\u00f3digo em um patamar onde ele est\u00e1 pronto para essa mudan\u00e7a.</p>\n<p>Se estamos confiantes que a mudan\u00e7a n\u00e3o \u00e9 t\u00e3o disruptivas e a estrat\u00e9gia de migra\u00e7\u00e3o \u00e9 vi\u00e1vel para todos os contextos, n\u00f3s lan\u00e7amos alertas de deprecia\u00e7\u00e3o para a comunidade. Estamos em contato com diversos usu\u00e1rios do React fora do Facebook e monitoramos diversos projetos open source e orientamos essas equipes para corrigir essas deprecia\u00e7\u00f5es.</p>\n<p>Dado o tamanho do c\u00f3digo-base de React no Facebook, realizar uma migra\u00e7\u00e3o interna bem sucedida \u00e9 geralmente um bom indicador que outras empresas n\u00e3o ter\u00e3o problemas tamb\u00e9m. Entretanto, h\u00e1 situa\u00e7\u00f5es em que os usu\u00e1rios descrevem situa\u00e7\u00f5es que n\u00e3o pensamos e nestes casos, acrescentamos caminhos alternativos para eles ou repensamos nossa abordagem.</p>\n<p>N\u00e3o iremos depreciar nada se n\u00e3o for por uma boa raz\u00e3o. Sabemos que a deprecia\u00e7\u00e3o ir\u00e1, em alguns momentos, causar frustra\u00e7\u00e3o. Por\u00e9m, fazemos isso para melhorar a legibilidade para futuras melhorias e funcionalidades que s\u00e3o consideradas muito valiosas, tanto para n\u00f3s quanto para a comunidade.</p>\n<p>Por exemplo, adicionamos um <a class=\"external-link\" href=\"https://pt-br.reactjs.org//warnings/unknown-prop.html\">aviso sobre DOM props desconhecidas</a> no React 15.2.0. Muitas pessoas foram afetadas por isso. No entanto, este aviso, \u00e9 importante para que possamos introduzir o suporte para <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/140\">atributos personalizados</a> do React. Existe uma raz\u00e3o, como esta, por tr\u00e1s de cada deprecia\u00e7\u00e3o que adicionamos.</p>\n<p>Quando adicionamos um alerta de deprecia\u00e7\u00e3o, n\u00f3s o mantemos para o resto da vers\u00e3o principal atual e <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2016/02/19/new-versioning-scheme.html\">alteramos o comportamento na pr\u00f3xima vers\u00e3o</a>. Se tiver muito trabalho manual repetitivo envolvido, disponibilizaremos um <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=d0pOgY8__JM\">codemod</a> que automatiza a maioria dessas mudan\u00e7as. Codemods nos permitem progredir, sem paralisar, em uma quantidade massiva de c\u00f3digo-base e encorajamos voc\u00ea a us\u00e1-los tamb\u00e9m.</p>\n<p>\u00c9 poss\u00edvel encontrar os codemods que lan\u00e7amos no reposit\u00f3rio <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod\">react-codemod</a>.</p>\n<h3 id=\"interoperability\"><a class=\"anchor\" href=\"/react/design-principles#interoperability\"></a>Interoperabilidade </h3>\n<p>N\u00f3s valorizamos a interoperabilidade com sistemas j\u00e1 existentes e com ado\u00e7\u00e3o gradual. O Facebook possui bastante c\u00f3digo que n\u00e3o \u00e9 em React. Seu site usa uma mistura de um sistema de componente server-side (lado do servidor) chamado XHP, bibliotecas internas de UI que vieram antes do React e o pr\u00f3prio React. \u00c9 importante que qualquer equipe do produto consiga <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=BF58ZJ1ZQxY\">come\u00e7ar a utilizar o React para pequenas funcionalidades</a> em vez de reescrever todo seu c\u00f3digo para apostar totalmente nele.</p>\n<p>Por isso o React fornece diferentes sa\u00eddas para trabalhar com modelos mut\u00e1veis e tenta funcionar corretamente com outras bibliotecas de UI. Voc\u00ea pode envolver uma UI imperativa existente em um componente declarativo e vice-versa. Isso \u00e9 essencial para ado\u00e7\u00e3o gradual.</p>\n<h3 id=\"scheduling\"><a class=\"anchor\" href=\"/react/design-principles#scheduling\"></a>Agendamento </h3>\n<p>Mesmo quando seus componentes s\u00e3o descritos como fun\u00e7\u00f5es, no React voc\u00ea n\u00e3o os chama diretamente. Todo componente retorna uma <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2015/12/18/react-components-elements-and-instances.html#elements-describe-the-tree\">descri\u00e7\u00e3o do que necessita ser renderizado</a> e esta descri\u00e7\u00e3o pode incluir ambos os componentes do usu\u00e1rio, como <code class=\"language-javascript\">&lt;LikeButton&gt;</code> e componentes da plataforma, como <code class=\"language-javascript\">&lt;div&gt;</code>. Cabe ao React \u201cdesenrolar\u201d <code class=\"language-javascript\">&lt;LikeButton&gt;</code>, em certo ponto no futuro e realmente aplicar altera\u00e7\u00f5es \u00e0 \u00e1rvore da UI de acordo com os resultados de renderiza\u00e7\u00e3o dos componentes de forma recursiva.\u2019</p>\n<p>Esta \u00e9 uma distin\u00e7\u00e3o sutil, mas poderosa. Como voc\u00ea n\u00e3o chama a fun\u00e7\u00e3o do componente, mas permite que o React a chame, isso significa que o React tem o poder de atrasar a chamada, se necess\u00e1rio. Em sua implementa\u00e7\u00e3o atual, o React percorre a \u00e1rvore recursivamente e chama fun\u00e7\u00f5es de renderiza\u00e7\u00e3o de toda a \u00e1rvore atualizada durante um \u00fanico tic. No entanto, no futuro, ele pode come\u00e7ar <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/6170\">atrasando algumas atualiza\u00e7\u00f5es para evitar a queda de quadros (frames)</a>.</p>\n<p>Este \u00e9 um tema comum no design do React. Algumas bibliotecas populares implementam a abordagem \u201cpush\u201d, onde os c\u00e1lculos s\u00e3o realizadas quando os novos dados est\u00e3o dispon\u00edveis. No entanto no React, segue \u00e0 abordagem \u201cpull\u201d, em que os c\u00e1lculos podem ser atrasados at\u00e9 que sejam necess\u00e1rios.</p>\n<p>React n\u00e3o \u00e9 uma biblioteca gen\u00e9rica de processamento de dados. \u00c9 uma biblioteca para construir interfaces de usu\u00e1rio. Achamos que ele est\u00e1 posicionado em um aplicativo exclusivamente para saber quais c\u00e1lculos s\u00e3o relevantes no momento e quais n\u00e3o s\u00e3o.</p>\n<p>Se algo estiver fora da tela, podemos atrasar qualquer l\u00f3gica relacionada a ele. Se os dados chegarem mais r\u00e1pido que a taxa de quadros, poderemos reunir e atualizar em lote. Podemos priorizar o trabalho proveniente de intera\u00e7\u00f5es do usu\u00e1rio (como uma anima\u00e7\u00e3o causada por um clique de um bot\u00e3o) sobre um trabalho de segundo plano menos importante (como renderizar novo conte\u00fado carregado da rede) para evitar a queda de quadros.</p>\n<p>Para ser claro, n\u00f3s n\u00e3o estamos tirando proveito disso por agora. No entanto, a liberdade de fazer algo assim \u00e9 porque preferimos ter controle sobre o agendamento e porque <code class=\"language-javascript\">setState()</code> \u00e9 ass\u00edncrono. Conceitualmente, pensamos nisso como \u201cagendar uma atualiza\u00e7\u00e3o\u201d.</p>\n<p>O controle sobre o agendamento seria mais dif\u00edcil para n\u00f3s ganharmos se deix\u00e1ssemos o usu\u00e1rio compor views diretamente com um paradigma baseado em \u201cpush\u201d, comum em algumas varia\u00e7\u00f5es da <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Functional_reactive_programming\">Programa\u00e7\u00e3o Funcional Reativa</a>. N\u00f3s queremos possuir o c\u00f3digo \u201cgrudento\u201d</p>\n<p>\u00c9 uma meta importante para o React que a quantidade de c\u00f3digo do usu\u00e1rio que \u00e9 executada antes de retornar ao React seja m\u00ednima. Isso garante que o React mantenha a capacidade de agendar e dividir o trabalho em partes de acordo com o que ele sabe sobre a UI.</p>\n<p>Existe uma piada interna do time que o React deveria ter sido chamado de \u201cSchedule\u201d, porque o React n\u00e3o quer ser totalmente \u201creativo\u201d.</p>\n<h3 id=\"developer-experience\"><a class=\"anchor\" href=\"/react/design-principles#developer-experience\"></a>Experi\u00eancia do Desenvolvedor </h3>\n<p>Proporcionar uma boa experi\u00eancia para o desenvolvedor \u00e9 importante para n\u00f3s.</p>\n<p>Por exemplo, mantemos uma ferramenta <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-devtools\">React DevTools</a> na qual \u00e9 poss\u00edvel inspecionar a \u00e1rvore de componentes do React no Chrome e Firefox. Sabemos que esta ferramenta melhorou a produtividade, tanto para os engenheiros do Facebook, quanto para a comunidade.</p>\n<p>N\u00f3s tamb\u00e9m nos esfor\u00e7amos para providenciar avisos de desenvolvedor \u00fateis. Por exemplo, React o avisa se, no desenvolvimento, voc\u00ea aninhou as tags de certa forma que o navegador n\u00e3o entende ou se haver algum erro de digita\u00e7\u00e3o na API. Alertas para o desenvolvedor e as verifica\u00e7\u00f5es relacionadas s\u00e3o a principal raz\u00e3o da vers\u00e3o de desenvolvimento do React ser mais lenta do que a vers\u00e3o de produ\u00e7\u00e3o.</p>\n<p>Os padr\u00f5es de uso que vemos internamente no Facebook nos ajuda a entender quais s\u00e3o os erros comuns e como prevenir eles antecipadamente. Quando adicionamos novas funcionalidades, tentamos antecipar esses erros e avisar sobre eles.</p>\n<p>Estamos sempre procurando formas de melhorar a experi\u00eancia do desenvolvedor. Adoramos ouvir suas sugest\u00f5es e aceitar as suas contribui\u00e7\u00f5es para torn\u00e1-la ainda melhor.</p>\n<h3 id=\"debugging\"><a class=\"anchor\" href=\"/react/design-principles#debugging\"></a>Depura\u00e7\u00e3o </h3>\n<p>Quando algo acontece de errado \u00e9 importante que voc\u00ea tenha uma trilha para rastrear o erro at\u00e9 a sua origem no c\u00f3digo. No React, props e state (estado) s\u00e3o essas trilhas.</p>\n<p>Se verificar algo de errado em sua tela, voc\u00ea pode abrir o React DevTools, encontrar o componente respons\u00e1vel pela renderiza\u00e7\u00e3o, e verificar se as props e o state est\u00e3o corretos. Se eles estiverem, voc\u00ea sabe que o problema est\u00e1 fun\u00e7\u00e3o <code class=\"language-javascript\">render()</code> do componente, ou alguma fun\u00e7\u00e3o que \u00e9 chamado pelo <code class=\"language-javascript\">render()</code>. \u00c9 um problema isolado.</p>\n<p>Se o state (estado) estiver errado, voc\u00ea sabe que o problema \u00e9 causado por alguma das chamadas <code class=\"language-javascript\">setState()</code> deste arquivo. Este problema tamb\u00e9m \u00e9 f\u00e1cil de localizar e corrigir, pois geralmente existem somente algumas chamadas <code class=\"language-javascript\">setState()</code> em um \u00fanico arquivo.</p>\n<p>Se as props estiverem erradas, voc\u00ea pode percorrer pela \u00e1rvore do React no inspetor, procurando pelo primeiro elemento que causou o erro, passando as props erradas para os filhos.</p>\n<p>Essa capacidade de rastrear qualquer UI at\u00e9 os dados que a produziram na forma de props e state (estado) atuais \u00e9 muito importante para o React. \u00c9 um objetivo de design expl\u00edcito que o state (estado) n\u00e3o esteja \u201cpreso\u201d em closures e combinadores e esteja dispon\u00edvel para o React diretamente.</p>\n<p>Embora a UI seja din\u00e2mica, acreditamos que as fun\u00e7\u00f5es <code class=\"language-javascript\">render()</code> s\u00edncronas de props e de state (estado) transformam a depura\u00e7\u00e3o. O que era um trabalho de adivinha\u00e7\u00e3o passa a ser um procedimento chato, por\u00e9m finito. Gostar\u00edamos de preservar essa restri\u00e7\u00e3o no React mesmo que isso torne alguns casos de uso, como anima\u00e7\u00f5es complexas mais dif\u00edceis.</p>\n<h3 id=\"configuration\"><a class=\"anchor\" href=\"/react/design-principles#configuration\"></a>Configura\u00e7\u00e3o </h3>\n<p>N\u00f3s achamos que as op\u00e7\u00f5es globais de configura\u00e7\u00e3o de tempo de execu\u00e7\u00e3o s\u00e3o problem\u00e1ticas.</p>\n<p>Por exemplo, \u00e9 ocasionalmente solicitado que implementemos uma fun\u00e7\u00e3o como <code class=\"language-javascript\">React.configure(options)</code> ou <code class=\"language-javascript\">React.register(component)</code>. No entanto, isso exp\u00f5e v\u00e1rios problemas e n\u00e3o estamos cientes de boas solu\u00e7\u00f5es para eles.</p>\n<p>E se algu\u00e9m chamar tal fun\u00e7\u00e3o de uma biblioteca de componentes de terceiros? E se um aplicativo React incorporar outro aplicativo React e suas configura\u00e7\u00f5es desejadas forem incompat\u00edveis? Como um componente de terceiros pode especificar que requer uma configura\u00e7\u00e3o espec\u00edfica? Pensamos que a configura\u00e7\u00e3o global n\u00e3o funciona bem com a composi\u00e7\u00e3o. Como a composi\u00e7\u00e3o \u00e9 fundamental para o React, n\u00e3o fornecemos configura\u00e7\u00e3o global no c\u00f3digo.</p>\n<p>No entanto, fornecemos algumas configura\u00e7\u00f5es globais no n\u00edvel de constru\u00e7\u00e3o. Por exemplo, fornecemos builds separadas de desenvolvimento e produ\u00e7\u00e3o. Tamb\u00e9m podemos <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/6627\">adicionar uma build de cria\u00e7\u00e3o de perfil</a> no futuro e estamos abertos a considerar outras flags de builds.</p>\n<h3 id=\"beyond-the-dom\"><a class=\"anchor\" href=\"/react/design-principles#beyond-the-dom\"></a>Al\u00e9m do DOM </h3>\n<p>A grande vantagem do React \u00e9 a maneira que ele nos permite desenvolver componentes com menos bugs e que possam ser integrados juntos. DOM \u00e9 o destino original de renderiza\u00e7\u00e3o para o React, mas o <a class=\"external-link\" href=\"https://reactnative.dev/\">React Native</a> \u00e9 t\u00e3o importante quanto, tanto para o Facebook quanto para a comunidade.</p>\n<p>Ser \u201crenderer-agnostic\u201d \u00e9 uma importante restri\u00e7\u00e3o de design do React. Isso adiciona alguma sobrecarga nas representa\u00e7\u00f5es internas. Por outro lado, quaisquer melhorias no n\u00facleo s\u00e3o traduzidas em todas as plataformas.</p>\n<p>Ter um \u00fanico modelo de programa\u00e7\u00e3o nos permite formar equipes de engenharia em torno de produtos em vez de plataformas. At\u00e9 agora, a compensa\u00e7\u00e3o valeu a pena para n\u00f3s.</p>\n<h3 id=\"implementation\"><a class=\"anchor\" href=\"/react/design-principles#implementation\"></a>Implementa\u00e7\u00e3o </h3>\n<p>Tentamos fornecer APIs elegantes sempre que poss\u00edvel. Estamos muito menos preocupados com a implementa\u00e7\u00e3o ser elegante. O mundo real est\u00e1 longe de ser perfeito e, at\u00e9 certo ponto, preferimos colocar o c\u00f3digo feio na biblioteca, se isso significar que o usu\u00e1rio n\u00e3o precise escrev\u00ea-lo. Quando avaliamos novos c\u00f3digo, estamos procurando uma implementa\u00e7\u00e3o que seja correta, que tenha um bom desempenho e proporcione uma boa experi\u00eancia para o desenvolvedor. Eleg\u00e2ncia \u00e9 secund\u00e1rio.</p>\n<p>N\u00f3s preferimos c\u00f3digo chato do que c\u00f3digo inteligente. C\u00f3digo \u00e9 descart\u00e1vel e muitas vezes muda. Portanto, \u00e9 importante que <a class=\"external-link\" href=\"https://youtu.be/4anAwXYqLG8?t=13m9s\">n\u00e3o introduza novas abstra\u00e7\u00f5es internas a menos que seja absolutamente necess\u00e1rio</a>. C\u00f3digo verboso que \u00e9 f\u00e1cil de mover, alterar e remover \u00e9 prefer\u00edvel ao c\u00f3digo elegante, que \u00e9 prematuramente abstra\u00eddo e dif\u00edcil de alterar.</p>\n<h3 id=\"optimized-for-tooling\"><a class=\"anchor\" href=\"/react/design-principles#optimized-for-tooling\"></a>Optimizado para Tooling </h3>\n<p>Algumas APIs comumente usadas t\u00eam nomes verbosos. Por exemplo, usamos <code class=\"language-javascript\">componentDidMount()</code> em vez de <code class=\"language-javascript\">didMount()</code> ou <code class=\"language-javascript\">onMount()</code>. Isso \u00e9 <a class=\"external-link\" href=\"https://github.com/reactjs/react-future/issues/40#issuecomment-142442124\">intencional</a>. O objetivo \u00e9 tornar os pontos de intera\u00e7\u00e3o com a biblioteca altamente vis\u00edveis.</p>\n<p>Em um c\u00f3digo-base enorme como o Facebook, poder pesquisar usos de APIs espec\u00edficas \u00e9 muito importante. Valorizamos nomes verbosos distintos, especialmente pelas funcionalidades que devem ser usados com modera\u00e7\u00e3o. Por exemplo, <code class=\"language-javascript\">dangerouslySetInnerHTML</code> \u00e9 dif\u00edcil de passar batido em uma revis\u00e3o de c\u00f3digo.</p>\n<p>A otimiza\u00e7\u00e3o para pesquisa tamb\u00e9m \u00e9 importante devido \u00e0 nossa confian\u00e7a nos <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=d0pOgY8__JM\">codemods</a> para fazer altera\u00e7\u00f5es significativas (que quebrariam o c\u00f3digo). Queremos que seja f\u00e1cil e seguro aplicar vastas altera\u00e7\u00f5es automatizadas em toda o c\u00f3digo-base, e nomes verbosos distintos nos ajudam a conseguir isso. Da mesma forma, nomes distintos facilitam escrever <a class=\"external-link\" href=\"https://github.com/yannickcr/eslint-plugin-react\">regras de lint</a> personalizadas sobre como usar o React sem se preocupar com poss\u00edveis falsos positivos.</p>\n<p><a href=\"/react/introducing-jsx\">JSX</a> desempenha um papel semelhante. Embora n\u00e3o seja necess\u00e1rio com o React, n\u00f3s o usamos extensivamente no Facebook, tanto por raz\u00f5es est\u00e9ticas quanto pragm\u00e1ticas.</p>\n<p>Em nosso c\u00f3digo-base, o JSX fornece uma dica n\u00e3o amb\u00edgua para as ferramentas de que elas est\u00e3o lidando com uma \u00e1rvore de elementos React. Isso torna poss\u00edvel adicionar otimiza\u00e7\u00f5es em tempo de build, como <a class=\"external-link\" href=\"https://babeljs.io/docs/plugins/transform-react-constant-elements/\">elevar elementos constantes</a>, seguramente aplicar o lint e executar o \u201ccodemodar\u201d nos usos de componentes internos, e <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/6771\">incluir o local de origem do JSX</a> nos avisos.</p>\n<h3 id=\"dogfooding\"><a class=\"anchor\" href=\"/react/design-principles#dogfooding\"></a>Dogfooding </h3>\n<p>Trabalhamos ao m\u00e1ximo para resolver todos os problemas reportados pela comunidade. No entanto, priorizamos as issues que as pessoas <em>tamb\u00e9m</em> est\u00e3o sofrendo internamente no Facebook. Ironicamente,  n\u00f3s pensamos que est\u00e1 \u00e9 a principal raz\u00e3o da comunidade apostar no React.</p>\n<p>O uso intensivo interno do React nos d\u00e1 confian\u00e7a de que ele n\u00e3o ir\u00e1 desaparecer amanh\u00e3. O React foi criado pelo Facebook para resolver problemas do pr\u00f3prio Facebook. Traz valor comercial tang\u00edvel para a empresa e \u00e9 usado em muitos de seus produtos. <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Eating_your_own_dog_food\">Usar nosso pr\u00f3prio produto (Dogfooding)</a> significa que nossa vis\u00e3o permanece n\u00edtida e temos uma dire\u00e7\u00e3o focada daqui para frente.</p>\n<p>N\u00e3o significa que ignoramos os problemas reportados pela comunidade. Por exemplo, n\u00f3s adicionamos suporte \u00e0 <a href=\"/react/webcomponents\">web components</a> e <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/6243\">SVG</a> no React, mesmo que n\u00e3o os utilizamos internamente. Estamos constantemente <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/2686\">atentos \u00e0s suas reclama\u00e7\u00f5es</a> e <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2016/07/11/introducing-reacts-error-code-system.html\">iremos solucion\u00e1-las</a> da melhor maneira poss\u00edvel. A comunidade \u00e9 o que faz o React t\u00e3o especial para n\u00f3s e \u00e9 uma honra podermos retribuir de volta.</p>\n<p>Depois de lan\u00e7ar muitos projetos open source no Facebook, aprendemos que tentar fazer todos felizes ao mesmo tempo produziu projetos com foco ruim que n\u00e3o cresceram bem. Em vez disso, descobrimos que escolher um p\u00fablico pequeno e focar em torn\u00e1-lo feliz traz um efeito positivo. Foi exatamente isso que fizemos com o React e at\u00e9 agora a solu\u00e7\u00e3o dos problemas encontrados pelas equipes de produtos do Facebook se traduziu bem na comunidade open source.</p>\n<p>A desvantagem \u00e9 que, em alguns momentos, n\u00e3o damos aten\u00e7\u00e3o suficiente aos pontos em que as equipes do Facebook n\u00e3o lidam, tal como a experi\u00eancia dos iniciantes no projeto. Estamos cientes disto e pensamos constantemente em como melhorar esta situa\u00e7\u00e3o, visando beneficiar toda a comunidade, sem cometer os mesmos erros de quando trabalhamos com projetos open source anteriormente.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/design-principles.md\">Edit this page</a></p></div></article>", "path": "/react/design-principles", "nav": ["/react/implementation-notes", "/react/faq-ajax"]}]}, {"key": "FAQ", "values": [{"key": "AJAX and APIs", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><h3 id=\"how-can-i-make-an-ajax-call\"><a class=\"anchor\" href=\"/react/faq-ajax#how-can-i-make-an-ajax-call\"></a>Como fazer uma requisi\u00e7\u00e3o AJAX? </h3>\n<p>Voc\u00ea pode usar qualquer biblioteca AJAX que desejar com React. Algumas populares s\u00e3o <a class=\"external-link\" href=\"https://github.com/axios/axios\">Axios</a>, <a class=\"external-link\" href=\"https://api.jquery.com/jQuery.ajax/\">jQuery AJAX</a>, e o nativo do navegador <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Fetch_API\">window.fetch</a>.</p>\n<h3 id=\"where-in-the-component-lifecycle-should-i-make-an-ajax-call\"><a class=\"anchor\" href=\"/react/faq-ajax#where-in-the-component-lifecycle-should-i-make-an-ajax-call\"></a>Onde eu devo fazer uma requisi\u00e7\u00e3o AJAX no ciclo de vida do componente? </h3>\n<p>Voc\u00ea deve preencher dados com requisi\u00e7\u00f5es AJAX no m\u00e9todo <a href=\"/react/react-component#mounting\"><code class=\"language-javascript\">componentDidMount</code></a> do ciclo de vida. Isto \u00e9 para que voc\u00ea consiga usar <code class=\"language-javascript\">setState</code> para atualizar seu componente quando os dados forem recebidos.</p>\n<h3 id=\"example-using-ajax-results-to-set-local-state\"><a class=\"anchor\" href=\"/react/faq-ajax#example-using-ajax-results-to-set-local-state\"></a>Exemplo: Usando resultados AJAX para definir o estado local </h3>\n<p>O componente abaixo demonstra como deve fazer uma requisi\u00e7\u00e3o AJAX no <code class=\"language-javascript\">componentDidMount</code> para preencher o estado (state) local. </p>\n<p>A API de exemplo retorna um objeto JSON como este:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">{\n  \"items\": [\n    { \"id\": 1, \"name\": \"Apples\",  \"price\": \"$2\" },\n    { \"id\": 2, \"name\": \"Peaches\", \"price\": \"$5\" }\n  ] \n}</code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      isLoaded<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      items<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.example.com/items\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isLoaded<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            items<span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>items\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Nota: \u00c9 importante lidar com os erros aqui</span>\n        <span class=\"token comment\">// em vez de um bloco catch() para n\u00e3o recebermos</span>\n        <span class=\"token comment\">// exce\u00e7\u00f5es de erros dos componentes.</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isLoaded<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            error\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> isLoaded<span class=\"token punctuation\">,</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Error: </span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aqui est\u00e1 o equivalente com <a class=\"external-link\" href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a>: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoaded<span class=\"token punctuation\">,</span> setIsLoaded<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">,</span> setItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Nota: O array [] deps vazio significa</span>\n  <span class=\"token comment\">// este useEffect ser\u00e1 executado uma vez</span>\n  <span class=\"token comment\">// semelhante ao componentDidMount()</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.example.com/items\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setIsLoaded</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Nota: \u00e9 importante lidar com errros aqui</span>\n        <span class=\"token comment\">// em vez de um bloco catch() para n\u00e3o receber</span>\n        <span class=\"token comment\">// exce\u00e7\u00f5es de erros reais nos componentes.</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setIsLoaded</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Error: </span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/faq-ajax.md\">Edit this page</a></p></div></article>", "path": "/react/faq-ajax", "nav": ["/react/design-principles", "/react/faq-build"]}, {"key": "Babel, JSX e Etapas de Build", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><h3 id=\"do-i-need-to-use-jsx-with-react\"><a class=\"anchor\" href=\"/react/faq-build#do-i-need-to-use-jsx-with-react\"></a>Eu preciso usar JSX com React? </h3>\n<p>N\u00e3o! Confira <a href=\"/react/react-without-jsx\">\u201cReact Sem JSX\u201d</a> para saber mais.</p>\n<h3 id=\"do-i-need-to-use-es6--with-react\"><a class=\"anchor\" href=\"/react/faq-build#do-i-need-to-use-es6--with-react\"></a>Eu preciso usar ES6 (+) com React? </h3>\n<p>N\u00e3o! Confira <a href=\"/react/react-without-es6\">\u201cReact Sem ES6\u201d</a> para saber mais.</p>\n<h3 id=\"how-can-i-write-comments-in-jsx\"><a class=\"anchor\" href=\"/react/faq-build#how-can-i-write-comments-in-jsx\"></a>Como posso escrever coment\u00e1rios em JSX? </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Aqui vai o comentario */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  Ola, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Tamb\u00e9m funciona em\n  coment\u00e1rios com v\u00e1rias linhas. */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  Ola, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">! \n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/faq-build.md\">Edit this page</a></p></div></article>", "path": "/react/faq-build", "nav": ["/react/faq-ajax", "/react/faq-functions"]}, {"key": "Passando Fun\u00e7\u00f5es para Componentes", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><h3 id=\"how-do-i-pass-an-event-handler-like-onclick-to-a-component\"><a class=\"anchor\" href=\"/react/faq-functions#how-do-i-pass-an-event-handler-like-onclick-to-a-component\"></a>Como eu passo um manipulador de eventos (como onClick) para um componente? </h3>\n<p>Passando manipuladores de evento e outras fun\u00e7\u00f5es como props para componentes filhos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Se voc\u00ea precisa ter acesso ao componente pai no manipulador, voc\u00ea tamb\u00e9m precisa dar bind em uma fun\u00e7\u00e3o na inst\u00e2ncia do componente (veja abaixo)</p>\n<h3 id=\"how-do-i-bind-a-function-to-a-component-instance\"><a class=\"anchor\" href=\"/react/faq-functions#how-do-i-bind-a-function-to-a-component-instance\"></a>Como eu dou bind em uma fun\u00e7\u00e3o na inst\u00e2ncia de um componente? </h3>\n<p>Dependendo da sintaxe e etapas de build que voc\u00ea est\u00e1 usando, existem diversas maneiras de ter certeza que as fun\u00e7\u00f5es tem acesso aos atributos dos componentes como <code class=\"language-javascript\">this.props</code> e <code class=\"language-javascript\">this.state</code>.</p>\n<h4 id=\"bind-in-constructor-es2015\"><a class=\"anchor\" href=\"/react/faq-functions#bind-in-constructor-es2015\"></a>Bind no Constructor (ES2015) </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clicado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Clique em mim!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"class-properties-stage-3-proposal\"><a class=\"anchor\" href=\"/react/faq-functions#class-properties-stage-3-proposal\"></a>Propriedades de Classe (Stage 3 Proposal)  </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Nota: esta sintaxe \u00e9 experimental e ainda n\u00e3o padronizada.</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clicado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Clique em mim!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"bind-in-render\"><a class=\"anchor\" href=\"/react/faq-functions#bind-in-render\"></a>Bind no Render </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clicado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Clique em mim!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Ao usar <code class=\"language-javascript\">Function.prototype.bind</code> no render, uma nova fun\u00e7\u00e3o \u00e9 criada cada vez que o componente \u00e9 renderizado, o que pode afetar a performance (veja abaixo).</p>\n</div>\n<h4 id=\"arrow-function-in-render\"><a class=\"anchor\" href=\"/react/faq-functions#arrow-function-in-render\"></a>Arrow Function no Render </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clicado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Clique em mim!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Ao usar uma arrow function no render, uma nova fun\u00e7\u00e3o \u00e9 criada cada vez que o componente \u00e9 renderizado, que pode quebrar otimiza\u00e7\u00f5es com base em compara\u00e7\u00e3o de identidade <code class=\"language-javascript\">on strict</code>.</p>\n</div>\n<h3 id=\"is-it-ok-to-use-arrow-functions-in-render-methods\"><a class=\"anchor\" href=\"/react/faq-functions#is-it-ok-to-use-arrow-functions-in-render-methods\"></a>Devemos usar arrow functions em m\u00e9todos de render? </h3>\n<p>De um modo geral, sim, \u00e9 certo. E muitas das vezes \u00e9 a maneira mais f\u00e1cil de enviar par\u00e2metros para fun\u00e7\u00f5es de callback.</p>\n<p>Se voc\u00ea tiver problemas de performance, de qualquer jeito, otimize!</p>\n<h3 id=\"why-is-binding-necessary-at-all\"><a class=\"anchor\" href=\"/react/faq-functions#why-is-binding-necessary-at-all\"></a>Porqu\u00ea binding \u00e9 necess\u00e1rio afinal? </h3>\n<p>Em JavaScript, estes dois code snippets <strong>n\u00e3o</strong> s\u00e3o equivalentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n<span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>M\u00e9todos de binding ajudam a garantir que o segundo snippet funcione da mesma maneira que o primeiro.</p>\n<p>Com React, tipicamente voc\u00ea precisa dar bind apenas nos m\u00e9todos que voc\u00ea <em>passa</em> para outros componentes. Por exemplo, <code class=\"language-javascript\">&lt;button onClick={this.handleClick}&gt;</code> passa <code class=\"language-javascript\">this.handleCLick</code> logo voc\u00ea deve dar bind nele. Entretanto, \u00e9 desnecess\u00e1rio usar bind no m\u00e9todo <code class=\"language-javascript\">render</code> ou nos m\u00e9todos do ciclo de vida: n\u00f3s n\u00e3o passamos ele \u00e0 outros componentes.</p>\n<p><a class=\"external-link\" href=\"https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/\">Este post por Yehuda Katz</a> explica o que binding \u00e9 e como funcionam as fun\u00e7\u00f5es do JavaScript, em detalhes.</p>\n<h3 id=\"why-is-my-function-being-called-every-time-the-component-renders\"><a class=\"anchor\" href=\"/react/faq-functions#why-is-my-function-being-called-every-time-the-component-renders\"></a>Porqu\u00ea minha fun\u00e7\u00e3o \u00e9 chamada toda vez que o componente renderiza? </h3>\n<p>Certifique-se que voc\u00ea n\u00e3o est\u00e1 <em>chamando a fun\u00e7\u00e3o</em> quando for passar para o componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Errado: handleClick \u00e9 chamado ao inv\u00e9s de ser passado como refer\u00eancia!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Clique em mim!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Em vez disso, <em>passe a pr\u00f3pria fun\u00e7\u00e3o</em> (sem parent\u00eases):</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Correto: handleClick \u00e9 passado como refer\u00eancia!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click em mim!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"how-do-i-pass-a-parameter-to-an-event-handler-or-callback\"><a class=\"anchor\" href=\"/react/faq-functions#how-do-i-pass-a-parameter-to-an-event-handler-or-callback\"></a>Como eu passo um par\u00e2metro para um manipulador de evento ou um callback? </h3>\n<p>Voc\u00ea pode usar uma arrow function para envolver um manipulador de eventos e passar par\u00e2metros:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Isto \u00e9 equivalente que chamar o <code class=\"language-javascript\">.bind</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<h4 id=\"exemplo-passando-par\u00e2metros-usando-arrow-functions-exemplo-passando-par\u00e2metros-usando-arrow-functions\"><a class=\"anchor\" href=\"/react/faq-functions#exemplo-passando-par%C3%A2metros-usando-arrow-functions-exemplo-passando-par%C3%A2metros-usando-arrow-functions\"></a>Exemplo: Passando par\u00e2metros usando arrow functions {#exemplo-passando-par\u00e2metros-usando-arrow-functions}</h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span> <span class=\"token comment\">// c\u00f3gido de caractere ASCII</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alphabet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      justClicked<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      letters<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>length<span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> justClicked<span class=\"token operator\">:</span> letter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Voc\u00ea clicou: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>justClicked<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>letters<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span> <span class=\"token operator\">=&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"example-passing-params-using-data-attributes\"><a class=\"anchor\" href=\"/react/faq-functions#example-passing-params-using-data-attributes\"></a>Exemplo: Passando par\u00e2metros usando data-attributes </h4>\n<p>Em vez disso, voc\u00ea pode usar APIs do DOM para armazenar dados necess\u00e1rios para manipuladores de evento. Considere este approach caso voc\u00ea precise otimizar um grande n\u00famero de elementos ou possua uma render tree que depende de verifica\u00e7\u00f5es de igualdade do React.PureComponent.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span> <span class=\"token comment\">// c\u00f3digo de caractere ASCII</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alphabet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      justClicked<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      letters<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>length<span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      justClicked<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>letter\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Voc\u00ea clicou: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>justClicked<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>letters<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span> <span class=\"token operator\">=&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">data-letter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row\"><a class=\"anchor\" href=\"/react/faq-functions#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row\"></a>Como eu posso evitar que uma fun\u00e7\u00e3o seja chamada muito rapidamente ou chamada muitas vezes em seguida? </h3>\n<p>Se voc\u00ea tem um manipulador de eventos como <code class=\"language-javascript\">onClick</code> ou <code class=\"language-javascript\">onScroll</code> e quer evitar que o callback seja ativado muito rapidamente, ent\u00e3o voc\u00ea pode limitar a taxa em que o callback \u00e9 executado.\nIsso pode ser feito usando:</p>\n<ul>\n<li><strong>throttling</strong>: amostra de mudan\u00e7as com base em uma frequ\u00eancia baseada no tempo (eg <a class=\"external-link\" href=\"https://lodash.com/docs#throttle\"><code class=\"language-javascript\">_.throttle</code></a>)</li>\n<li><strong>debouncing</strong>: publica altera\u00e7\u00f5es ap\u00f3s um per\u00edodo de inatividade (eg <a class=\"external-link\" href=\"https://lodash.com/docs#debounce\"><code class=\"language-javascript\">_.debounce</code></a>)</li>\n<li><strong><code class=\"language-javascript\">requestAnimationFrame</code> throttling</strong>: amostra de mudan\u00e7as baseadas em <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Window/requestAnimationFrame\"><code class=\"language-javascript\">requestAnimationFrame</code></a> (eg <a class=\"external-link\" href=\"https://github.com/alexreardon/raf-schd\"><code class=\"language-javascript\">raf-schd</code></a>)</li>\n</ul>\n<p>Veja <a class=\"external-link\" href=\"http://demo.nimius.net/debounce_throttle/\">esta visualiza\u00e7\u00e3o</a> para uma compara\u00e7\u00e3o entre as fun\u00e7\u00f5es <code class=\"language-javascript\">throttle</code> e <code class=\"language-javascript\">debounce</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">_.debounce</code>, <code class=\"language-javascript\">_.throttle</code> e <code class=\"language-javascript\">raf-schd</code> fornecem um m\u00e9todo <code class=\"language-javascript\">cancel</code> para cancelar callbacks atrasados. Voc\u00ea deve chamar este m\u00e9todo a partir de <code class=\"language-javascript\">componentWillUnmount</code> <em>ou</em> verificar se o componente ainda est\u00e1 montado dentro da fun\u00e7\u00e3o atrasada.</p>\n</div>\n<h4 id=\"throttle\"><a class=\"anchor\" href=\"/react/faq-functions#throttle\"></a>Throttle </h4>\n<p>O <em>throttling</em> impede a fun\u00e7\u00e3o de ser chamada mais de uma vez em uma certa janela de tempo. O exemplo abaixo <em>throttles</em>  o manipulador do evento \u201cClick\u201d para impedi-lo de ser chamado mais de uma vez por segundo.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> throttle <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash.throttle'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadMoreButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClickThrottled <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClickThrottled<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClickThrottled<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Load More</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">loadMore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"debounce\"><a class=\"anchor\" href=\"/react/faq-functions#debounce\"></a>Debounce </h4>\n<p>O <em>Debouncing</em> garante que a fun\u00e7\u00e3o n\u00e3o vai ser executada at\u00e9 que uma certa quantidade de tempo tenha passado desde sua \u00faltima chamada. Isso pode ser \u00fatil quando voc\u00ea tem que executar algum c\u00e1lculo pesado em resposta a um evento que pode despachar rapidamente (eg rolagem ou evento de teclas). O exemplo abaixo <em>debounces</em> o texto com um atraso de 250ms.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> debounce <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash.debounce'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Searchbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitChangeDebounced <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitChange<span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitChangeDebounced<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Search...<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">defaultValue</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emitChangeDebounced</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">emitChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"requestanimationframe-throttling\"><a class=\"anchor\" href=\"/react/faq-functions#requestanimationframe-throttling\"></a><code class=\"language-javascript\">requestAnimationFrame</code> throttling </h4>\n<p><a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Window/requestAnimationFrame\"><code class=\"language-javascript\">requestAnimationFrame</code></a> \u00e9 uma maneira de enfileirar uma fun\u00e7\u00e3o para ser executada no browser no tempo ideal para a performance de renderiza\u00e7\u00e3o. A fun\u00e7\u00e3o que \u00e9 enfileirada com <code class=\"language-javascript\">requestAnimationFrame</code> vai disparar no pr\u00f3ximo frame. O browser trabalhar\u00e1 duro para garantir que haja 60 frames por segundo(60 fps). Entretanto, se o browser for incapaz disso, ele vai naturalmente <em>limitar</em> a quantidade de frames por segundo. Por exemplo, um dispostivo pode ser capaz de aguentar apenas 30fps e ent\u00e3o voc\u00ea s\u00f3 tera 30 frames por segundo. Usar <code class=\"language-javascript\">requestAnimationFrame</code> para <em>throttling</em> \u00e9 uma t\u00e9cnica \u00fatil para prevenir voc\u00ea de fazer mais de 60 atualiza\u00e7\u00f5es em um segundo. Se voc\u00ea est\u00e1 fazendo 100 atualiza\u00e7\u00f5es em um segundo, isso cria trabalho adicional para o browser que de qualquer maneira o usu\u00e1rio n\u00e3o ser\u00e1 capaz de ver.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Usar esta t\u00e9cnica capturar\u00e1 apenas o \u00faltimo valor publicado em um frame. Voc\u00ea pode ver um exemplo de como esta otimiza\u00e7\u00e3o funciona em <a class=\"external-link\" href=\"https://developer.mozilla.org/pt-BR/docs/Web/Events/scroll\"><code class=\"language-javascript\">MDN</code></a></p>\n</div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> rafSchedule <span class=\"token keyword\">from</span> <span class=\"token string\">'raf-schd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ScrollListener</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleScroll <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleScroll</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Cria uma nova fun\u00e7\u00e3o para agendar atualiza\u00e7\u00f5es.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scheduleUpdate <span class=\"token operator\">=</span> <span class=\"token function\">rafSchedule</span><span class=\"token punctuation\">(</span>\n      <span class=\"token parameter\">point</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onScroll</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Quando recebemos um evento de scroll, agenda-se uma atualiza\u00e7\u00e3o.</span>\n    <span class=\"token comment\">// Se recebermos muitos updates em um frames, publicaremos apenas o \u00faltimo valor.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Cancela qualquer atualiza\u00e7\u00e3o pendente j\u00e1 que estamos desmontando o componente.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scheduleUpdate<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> overflow<span class=\"token operator\">:</span> <span class=\"token string\">'scroll'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onScroll</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleScroll<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/my-huge-image.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"testing-your-rate-limiting\"><a class=\"anchor\" href=\"/react/faq-functions#testing-your-rate-limiting\"></a>Testando sua taxa limitante </h4>\n<p>Ao testar que o seu c\u00f3digo de limita\u00e7\u00e3o de taxa funciona corretamente \u00e9 \u00fatil ter a capacidade de avan\u00e7ar o tempo. Se voc\u00ea esta usando <a class=\"external-link\" href=\"https://facebook.github.io/jest/\"><code class=\"language-javascript\">jest</code></a> ent\u00e3o voc\u00ea pdoe usar <a class=\"external-link\" href=\"https://facebook.github.io/jest/docs/en/timer-mocks.html\"><code class=\"language-javascript\">mock timers</code></a> para avan\u00e7ar o tempo. Se voc\u00ea est\u00e1 usando <code class=\"language-javascript\">requestAnimationFrame</code> <em>throttling</em> voc\u00ea pode achar <a class=\"external-link\" href=\"https://github.com/alexreardon/raf-stub\"><code class=\"language-javascript\">raf-stub</code></a> uma ferramenta \u00fatil para controlar o instate dos quadros das anima\u00e7\u00f5es.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/faq-functions.md\">Edit this page</a></p></div></article>", "path": "/react/faq-functions", "nav": ["/react/faq-build", "/react/faq-state"]}, {"key": "State dos Componentes", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><h3 id=\"what-does-setstate-do\"><a class=\"anchor\" href=\"/react/faq-state#what-does-setstate-do\"></a>O que <code class=\"language-javascript\">setState</code> faz? </h3>\n<p><code class=\"language-javascript\">setState()</code> agenda uma atualiza\u00e7\u00e3o para o objeto <code class=\"language-javascript\">state</code> de um componente. Quando o state muda, o componente responde renderizando novamente.</p>\n<h3 id=\"what-is-the-difference-between-state-and-props\"><a class=\"anchor\" href=\"/react/faq-state#what-is-the-difference-between-state-and-props\"></a>Qual \u00e9 a diferen\u00e7a entre <code class=\"language-javascript\">state</code> e <code class=\"language-javascript\">props</code>? </h3>\n<p><a href=\"/react/components-and-props\"><code class=\"language-javascript\">props</code></a> (abrevia\u00e7\u00e3o de \u201d<i>properties</i>\u201d) e <a href=\"/react/state-and-lifecycle\"><code class=\"language-javascript\">state</code></a> s\u00e3o ambos objetos JavaScript. Apesar de ambos guardarem informa\u00e7\u00f5es que influenciam no resultado da renderiza\u00e7\u00e3o, eles s\u00e3o diferentes por uma raz\u00e3o importante: <code class=\"language-javascript\">props</code> s\u00e3o <em>passados</em> para o componente (como par\u00e2metros de fun\u00e7\u00f5es), enquanto <code class=\"language-javascript\">state</code> \u00e9 gerenciado <em>de dentro</em> do componente (como vari\u00e1veis declaradas dentro de uma fun\u00e7\u00e3o).</p>\n<p>Aqui est\u00e3o alguns bons recursos para ler mais sobre quando usar <code class=\"language-javascript\">props</code> vs <code class=\"language-javascript\">state</code> (ambos em ingl\u00eas):</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\">Props vs State</a></li>\n<li><a class=\"external-link\" href=\"https://lucybain.com/blog/2016/react-state-vs-pros/\">ReactJS: Props vs. State</a></li>\n</ul>\n<h3 id=\"why-is-setstate-giving-me-the-wrong-value\"><a class=\"anchor\" href=\"/react/faq-state#why-is-setstate-giving-me-the-wrong-value\"></a>Por que <code class=\"language-javascript\">setState</code> est\u00e1 me dando o valor errado? </h3>\n<p>Em React, tanto <code class=\"language-javascript\">this.props</code> quanto <code class=\"language-javascript\">this.state</code> representam os valores <em>renderizados</em>, ou seja, o que est\u00e1 atualmente na tela.</p>\n<p>Chamadas para <code class=\"language-javascript\">setState</code> s\u00e3o ass\u00edncronas - n\u00e3o confie que <code class=\"language-javascript\">this.state</code> v\u00e1 refletir o novo valor imediatamente ap\u00f3s chamar <code class=\"language-javascript\">setState</code>. Use uma fun\u00e7\u00e3o de atualiza\u00e7\u00e3o ao inv\u00e9s de um objeto se voc\u00ea precisa calcular valores baseado no state atual (veja abaixo para mais detalhes).</p>\n<p>Exemplo de c\u00f3digo que <em>n\u00e3o</em> vai funcionar como esperado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Nota: isso *n\u00e3o* vai funcionar como esperado.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">handleSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Digamos que `this.state.count` come\u00e7a em 0.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Quando o React renderizar novamente o componente, `this.state.count` ser\u00e1 1, mas voc\u00ea esperava 3.</span>\n\n  <span class=\"token comment\">// Isso \u00e9 porque a fun\u00e7\u00e3o `incrementCount()` usa `this.state.count`,</span>\n  <span class=\"token comment\">// mas o React n\u00e3o atualiza `this.state.count` at\u00e9 o componente ser renderizado novamente.</span>\n  <span class=\"token comment\">// Ent\u00e3o `incrementCount()` acaba lendo `this.state.count` como 0 todas as vezes, e muda seu valor para 1.</span>\n\n  <span class=\"token comment\">// A solu\u00e7\u00e3o \u00e9 exibida abaixo!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Veja abaixo como solucionar esse problema.</p>\n<h3 id=\"how-do-i-update-state-with-values-that-depend-on-the-current-state\"><a class=\"anchor\" href=\"/react/faq-state#how-do-i-update-state-with-values-that-depend-on-the-current-state\"></a>Como eu atualizo o state com valores que dependem do state atual? </h3>\n<p>Passe uma fun\u00e7\u00e3o ao inv\u00e9s de um objeto para <code class=\"language-javascript\">setState</code> para garantir que a chamada sempre use o valor mais recente do state (veja abaixo).</p>\n<h3 id=\"what-is-the-difference-between-passing-an-object-or-a-function-in-setstate\"><a class=\"anchor\" href=\"/react/faq-state#what-is-the-difference-between-passing-an-object-or-a-function-in-setstate\"></a>Qual \u00e9 a diferen\u00e7a entre passar um objeto e uma fun\u00e7\u00e3o em <code class=\"language-javascript\">setState</code>? </h3>\n<p>Passar uma fun\u00e7\u00e3o de atualiza\u00e7\u00e3o permite que voc\u00ea acesse o valor atual do state dentro dela. Como as chamadas de <code class=\"language-javascript\">setState</code> s\u00e3o feitas em lotes, isso permite que voc\u00ea encadeie atualiza\u00e7\u00f5es e garanta que elas se componham ao inv\u00e9s de entrar em conflito:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Importante: use `state` em vez de `this.state` quando estiver atualizando.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">handleSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Digamos que `this.state.count` come\u00e7a em 0.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Se voc\u00ea ler `this.state.count` agora, ele ainda seria 0.</span>\n  <span class=\"token comment\">// Mas quando o React renderizar novamente o componente, ele ser\u00e1 3.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/react/react-component#setstate\">Saiba mais sobre setState</a></p>\n<h3 id=\"when-is-setstate-asynchronous\"><a class=\"anchor\" href=\"/react/faq-state#when-is-setstate-asynchronous\"></a>Quando <code class=\"language-javascript\">setState</code> \u00e9 ass\u00edncrono? </h3>\n<p>Atualmente, <code class=\"language-javascript\">setState</code> \u00e9 ass\u00edncrono dentro de manipuladores de evento.</p>\n<p>Isso garante que, por exemplo, caso tanto <code class=\"language-javascript\">Parent</code> quanto <code class=\"language-javascript\">Child</code> chamem <code class=\"language-javascript\">setState</code> ap\u00f3s um evento de clique, <code class=\"language-javascript\">Child</code> n\u00e3o seja renderizado duas vezes. Em vez disso, React executa todas as atualiza\u00e7\u00f5es de estado ao final do evento do navegador. Isso resulta numa melhoria de performance significativa para aplicativos maiores.</p>\n<p>Isso \u00e9 um detalhe de implementa\u00e7\u00e3o, ent\u00e3o evite depender disso diretamente. Em vers\u00f5es futuras, o React far\u00e1 atualiza\u00e7\u00f5es em lotes em mais casos.</p>\n<h3 id=\"why-doesnt-react-update-thisstate-synchronously\"><a class=\"anchor\" href=\"/react/faq-state#why-doesnt-react-update-thisstate-synchronously\"></a>Por que o React n\u00e3o atualiza <code class=\"language-javascript\">this.state</code> s\u00edncronamente? </h3>\n<p>Como explicado na se\u00e7\u00e3o anterior, React intencionalmente \u201cespera\u201d at\u00e9 todos os componentes terem chamado <code class=\"language-javascript\">setState()</code> em seus manipuladores de evento antes de come\u00e7ar a renderizar novamente. Isso aumenta performance por evitar renderiza\u00e7\u00f5es desnecess\u00e1rias.</p>\n<p>No entanto, voc\u00ea pode ainda estar se perguntando porque o React simplesmene n\u00e3o atualiza <code class=\"language-javascript\">this.state</code> imediatamente, sem renderizar novamente.</p>\n<p>Existem duas principais raz\u00f5es:</p>\n<ul>\n<li>Isso quebraria a consist\u00eancia entre <code class=\"language-javascript\">props</code> e <code class=\"language-javascript\">state</code>, causando problemas muito dif\u00edceis de debugar.</li>\n<li>Isso tornaria algumas das novas funcionalidades em que estamos trabalhando imposs\u00edveis de implementar.</li>\n</ul>\n<p>Esse <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">coment\u00e1rio no GitHub</a> se aprofunda em exemplos espec\u00edficos.</p>\n<h3 id=\"should-i-use-a-state-management-library-like-redux-or-mobx\"><a class=\"anchor\" href=\"/react/faq-state#should-i-use-a-state-management-library-like-redux-or-mobx\"></a>Eu devo usar uma biblioteca de gerenciamento de state, como Redux ou MobX? </h3>\n<p><a class=\"external-link\" href=\"https://redux.js.org/faq/general#when-should-i-use-redux\">Talvez.</a></p>\n<p>\u00c9 uma boa ideia se aprofundar em React primeiro, antes de adicionar bibliotecas. Voc\u00ea pode fazer aplicativos bastante complexos apenas com React.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/faq-state.md\">Edit this page</a></p></div></article>", "path": "/react/faq-state", "nav": ["/react/faq-functions", "/react/faq-styling"]}, {"key": "Estiliza\u00e7\u00e3o e CSS", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><h3 id=\"how-do-i-add-css-classes-to-components\"><a class=\"anchor\" href=\"/react/faq-styling#how-do-i-add-css-classes-to-components\"></a>Como eu adiciono classes de CSS nos componentes? </h3>\n<p>Passe a string para a prop <code class=\"language-javascript\">className</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>menu navigation-menu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Menu</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>\u00c9 comum para classes do CSS dependerem de props ou o state do componente.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> className <span class=\"token operator\">=</span> <span class=\"token string\">'menu'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    className <span class=\"token operator\">+=</span> <span class=\"token string\">' menu-active'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Menu</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Dica</strong>\n<p>Se voc\u00ea frequentemente se v\u00ea escrevendo c\u00f3digo assim, o pacote <a class=\"external-link\" href=\"https://www.npmjs.com/package/classnames#usage-with-reactjs\">classnames</a> pode simplicar isso.</p>\n</div>\n<h3 id=\"can-i-use-inline-styles\"><a class=\"anchor\" href=\"/react/faq-styling#can-i-use-inline-styles\"></a>Posso utilizar estilo inline? </h3>\n<p>Sim, veja os docs sobre estiliza\u00e7\u00e3o <a href=\"/react/dom-elements#style\">aqui</a>.</p>\n<h3 id=\"are-inline-styles-bad\"><a class=\"anchor\" href=\"/react/faq-styling#are-inline-styles-bad\"></a>\u00c9 ruim utilizar estilos inline? </h3>\n<p>Classes CSS geralmente possuem melhor performance que estilos inline.</p>\n<h3 id=\"what-is-css-in-js\"><a class=\"anchor\" href=\"/react/faq-styling#what-is-css-in-js\"></a>O que \u00e9 CSS-in-JS? </h3>\n<p>\u201cCSS-in-JS\u201d se refere a um padr\u00e3o onde o CSS \u00e9 definido utilizando JavaScript no lugar de arquivos externos.</p>\n<p><em>Note que esta funcionalidade n\u00e3o faz parte do React, mas \u00e9 fornecida por bibliotecas de terceiros.</em> React n\u00e3o possui uma opini\u00e3o sobre como os estilos s\u00e3o definidos; se estiver em d\u00favida, um bom ponto de partida \u00e9 definir seus estilos em um arquivo <code class=\"language-javascript\">.css</code> separado e referenci\u00e1-los usando <a href=\"/react/dom-elements#classname\"><code class=\"language-javascript\">className</code></a>.</p>\n<h3 id=\"can-i-do-animations-in-react\"><a class=\"anchor\" href=\"/react/faq-styling#can-i-do-animations-in-react\"></a>Posso fazer anima\u00e7\u00f5es em React? </h3>\n<p>O React pode ser usado para anima\u00e7\u00f5es. Veja <a class=\"external-link\" href=\"https://reactcommunity.org/react-transition-group/\">React Transition Group</a>, <a class=\"external-link\" href=\"https://github.com/chenglou/react-motion\">React Motion</a>, <a class=\"external-link\" href=\"https://github.com/react-spring/react-spring\">React Spring</a> ou <a class=\"external-link\" href=\"https://framer.com/motion\">Framer Motion</a> por exemplo.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/faq-styling.md\">Edit this page</a></p></div></article>", "path": "/react/faq-styling", "nav": ["/react/faq-state", "/react/faq-structure"]}, {"key": "Estrutura de Arquivos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><h3 id=\"is-there-a-recommended-way-to-structure-react-projects\"><a class=\"anchor\" href=\"/react/faq-structure#is-there-a-recommended-way-to-structure-react-projects\"></a>Existe uma maneira recomendada para estruturar os projetos em React? </h3>\n<p>O React n\u00e3o opina sobre como voc\u00ea deve estruturar o projeto. Dito isso, existem algumas abordagens populares que voc\u00ea pode experimentar.</p>\n<h4 id=\"grouping-by-features-or-routes\"><a class=\"anchor\" href=\"/react/faq-structure#grouping-by-features-or-routes\"></a>Agrupar por funcionalidades ou rotas </h4>\n<p>Uma maneira bem comum para estruturar os projetos \u00e9 colocar CSS, JS e testes juntos dentro de pastas agrupadas por funcionalidades ou rotas.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">common/\n  Avatar.js\n  Avatar.css\n  APIUtils.js\n  APIUtils.test.js\nfeed/\n  index.js\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  FeedAPI.js\nprofile/\n  index.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n  ProfileAPI.js</code></pre></div>\n<p>A defini\u00e7\u00e3o de \u201cfuncionalidade\u201d n\u00e3o \u00e9 universal e cabe a voc\u00ea escolher a granularidade. Se voc\u00ea n\u00e3o conseguir criar uma lista de pastas de alto n\u00edvel, voc\u00ea pode perguntar para os usu\u00e1rios do seu produto quais s\u00e3o as partes principais que ele cont\u00e9m e usar o modelo mental como um plano.</p>\n<h4 id=\"grouping-by-file-type\"><a class=\"anchor\" href=\"/react/faq-structure#grouping-by-file-type\"></a>Agrupar por tipo de arquivo </h4>\n<p>Outra maneira popular de estruturar projetos \u00e9 agrupar arquivos semelhantes pelo tipo, por exemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">api/\n  APIUtils.js\n  APIUtils.test.js\n  ProfileAPI.js\n  UserAPI.js\ncomponents/\n  Avatar.js\n  Avatar.css\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css</code></pre></div>\n<p>Algumas pessoas tamb\u00e9m preferem ir al\u00e9m, e separar os componentes em pastas diferentes, dependendo do papel que desempenham na aplica\u00e7\u00e3o. Por exemplo o <a class=\"external-link\" href=\"http://bradfrost.com/blog/post/atomic-web-design/\">Atomic Design</a> que \u00e9 uma metodologia de design constru\u00edda sobre este princ\u00edpio. Lembre-se de que \u00e9 mais produtivo tratar essas metodologias como exemplos \u00fateis, ao inv\u00e9s de seguir regras estritas.</p>\n<h4 id=\"avoid-too-much-nesting\"><a class=\"anchor\" href=\"/react/faq-structure#avoid-too-much-nesting\"></a>Evite muito aninhamento </h4>\n<p>H\u00e1 diversos pontos problem\u00e1ticos associados ao aninhamento de pastas em projetos JavaScript. Torna-se mais dif\u00edcil gravar importa\u00e7\u00f5es relativas entre elas ou atualiz\u00e1-las quando os arquivos s\u00e3o movidos. A menos que voc\u00ea tenha um motivo muito convincente para usar uma estrutura de pastas aninhadas, considere limitar-se a um m\u00e1ximo de tr\u00eas ou quatro pastas aninhadas em um \u00fanico projeto. Claro, isso \u00e9 apenas uma recomenda\u00e7\u00e3o e pode n\u00e3o ser relevante para o seu projeto.</p>\n<h4 id=\"dont-overthink-it\"><a class=\"anchor\" href=\"/react/faq-structure#dont-overthink-it\"></a>N\u00e3o pense muito </h4>\n<p>Se voc\u00ea est\u00e1 apenas come\u00e7ando um projeto, <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Analysis_paralysis\">n\u00e3o gaste mais do que cinco minutos</a> na escolha de uma estrutura de arquivos. Escolha qualquer uma das abordagens acima (ou crie as suas pr\u00f3prias) e comece a escrever o c\u00f3digo! Voc\u00ea provavelmente vai querer repens\u00e1-lo de qualquer jeito depois de ter escrito algum c\u00f3digo.</p>\n<p>Se voc\u00ea se sentir completamente preso, comece mantendo todos os arquivos em uma \u00fanica pasta. Eventualmente ele crescer\u00e1 o suficiente para que voc\u00ea deseje separar alguns arquivos dos demais. A essa altura, voc\u00ea ter\u00e1 conhecimento suficiente para saber quais arquivos s\u00e3o modificados juntos com mais frequ\u00eancia. Em geral, \u00e9 uma boa ideia manter os arquivos que costumam ser alterados juntos, pr\u00f3ximos uns dos outros. Este princ\u00edpio \u00e9 chamado de \u201ccolocation\u201d.</p>\n<p>\u00c0 medida que os projetos v\u00e3o crescendo, eles costumam usar uma mistura de ambas as abordagens acima na pr\u00e1tica. Ent\u00e3o escolher a abordagem \u201ccerta\u201d no come\u00e7o n\u00e3o \u00e9 muito importante.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/faq-structure.md\">Edit this page</a></p></div></article>", "path": "/react/faq-structure", "nav": ["/react/faq-styling", "/react/faq-versioning"]}, {"key": "Pol\u00edtica de Vers\u00e3o", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><p>O React segue os princ\u00edpios de <a class=\"external-link\" href=\"https://semver.org/\">versionamento sem\u00e2ntico (semver)</a>.</p>\n<p>Isso significa que com um n\u00famero de vers\u00e3o <strong>x.y.z</strong>:  </p>\n<ul>\n<li>Ao liberarmos uma <strong>corre\u00e7\u00e3o de um bug cr\u00edtico</strong>, fazemos um <strong>patch release</strong> alterando o n\u00famero <strong>z</strong> (ex: 15.6.2 para 15.6.3).</li>\n<li>Ao liberarmos uma <strong>atualiza\u00e7\u00e3o com novas funcionalidades</strong>, fazemos uma <strong>minor release</strong> alterando o n\u00famero <strong>y</strong> (ex: 15.6.2 para 15.7.0).</li>\n<li>Ao liberarmos uma <strong>atualiza\u00e7\u00e3o que quebra compatibilidade</strong>, fazemos uma <strong>major release</strong> alterando o n\u00famero <strong>x</strong> (ex: 15.6.2 para 16.0.0).</li>\n</ul>\n<p>Atualiza\u00e7\u00f5es que quebram compatibilidade podem tamb\u00e9m conter novas funcionalidades, e qualquer vers\u00e3o pode incluir corre\u00e7\u00e3o de erros.</p>\n<p>Vers\u00f5es minor s\u00e3o o tipo mais comum de vers\u00e3o.</p>\n<div class=\"blockquote\">\n<strong>Esta pol\u00edtica de controle de vers\u00e3o n\u00e3o se aplica \u00e0s compila\u00e7\u00f5es de pr\u00e9-lan\u00e7amento nos canais Next ou Experimental. Saiba mais sobre pr\u00e9-lan\u00e7amentos.</strong>\n</div>\n<h3 id=\"breaking-changes\"><a class=\"anchor\" href=\"/react/faq-versioning#breaking-changes\"></a>Atualiza\u00e7\u00f5es que quebram compatibilidade </h3>\n<p>Atualiza\u00e7\u00f5es que quebram compatibilidade s\u00e3o inconvenientes para todos, sendo assim, tentamos diminuir o n\u00famero de major releases \u2013 por exemplo, React 15 foi lan\u00e7ado em Abril de 2016 e React 16 foi lan\u00e7ado em Setembro de 2017 e React 17 foi lan\u00e7ado em outubro de 2020.</p>\n<p>Todavia, lan\u00e7amos novas funcionalidades em vers\u00f5es menores. Isso significa que updates menores s\u00e3o mais interessantes e convenientes que vers\u00f5es maiores, apesar de parecer o contr\u00e1rio.</p>\n<h3 id=\"commitment-to-stability\"><a class=\"anchor\" href=\"/react/faq-versioning#commitment-to-stability\"></a>Compromisso com a Estabilidade </h3>\n<p>Conforme o React \u00e9 alterado, tentamos minimizar o esfor\u00e7o necess\u00e1rio para tirar um melhor proveito das novas funcionalidades. Quando poss\u00edvel mantemos uma vers\u00e3o anterior da API em funcionamento, mesmo que isso signifique coloc\u00e1-la em outro pacote. Por exemplo, <a class=\"external-link\" href=\"https://pt-br.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">mixins s\u00e3o desencorajados h\u00e1 anos</a> por\u00e9m atualmente continuam sendo suportados <a href=\"/react/react-without-es6#mixins\">via create-react-class</a> e muitas bases de c\u00f3digo continuam a us\u00e1-los em vers\u00f5es est\u00e1veis e legadas.</p>\n<p>Mais de um milh\u00e3o de desenvolvedores utilizam o React, coletivamente mantendo milh\u00f5es de componentes. Apenas o c\u00f3digo base do Facebook possui mais de 50.000 componentes. Isso significa que precisamos deix\u00e1-lo o mais simples poss\u00edvel para atualizar para novas vers\u00f5es; Se n\u00f3s realizarmos grandes mudan\u00e7as sem um plano de migra\u00e7\u00e3o, as pessoas poder\u00e3o ficar presas em vers\u00f5es anteriores. As atualiza\u00e7\u00f5es s\u00e3o testadas no pr\u00f3prio Facebook \u2013 se nosso time de menos de 10 pessoas consegue atualizar 50.000+ de componentes sozinhos, n\u00f3s esperamos que a atualiza\u00e7\u00e3o seja poss\u00edvel para qualquer um que use o React. Em muitos casos, escrevemos <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod\">scripts</a> afim de atualizar a sintaxe dos componentes, nos quais inclu\u00edmos na vers\u00e3o de c\u00f3digo fonte para uso de todos.</p>\n<h3 id=\"gradual-upgrades-via-warnings\"><a class=\"anchor\" href=\"/react/faq-versioning#gradual-upgrades-via-warnings\"></a>Atualiza\u00e7\u00f5es Graduais atrav\u00e9s de Advert\u00eancias </h3>\n<p>Aplica\u00e7\u00f5es desenvolvidas em React incluem muitas advert\u00eancias \u00fateis. Sempre que poss\u00edvel, n\u00f3s adicionamos advert\u00eancias afim de preparar para grandes altera\u00e7\u00f5es futuras que possam quebrar a compatibilidade. Dessa forma, se a sua aplica\u00e7\u00e3o n\u00e3o possui nenhuma advert\u00eancia na \u00faltima vers\u00e3o, ela ser\u00e1 compat\u00edvel com a pr\u00f3xima grande atualiza\u00e7\u00e3o. Isso permitir\u00e1 a voc\u00ea atualizar os componentes do seu aplicativo um a um.  </p>\n<p>As advert\u00eancias de desenvolvimento n\u00e3o afetar\u00e3o o desempenho da sua aplica\u00e7\u00e3o. Dessa maneira, voc\u00ea pode se sentir confiante de que sua aplica\u00e7\u00e3o se comportar\u00e1 da mesma maneira entre as vers\u00f5es de desenvolvimento e produ\u00e7\u00e3o \u2013 as \u00fanicas diferen\u00e7as ser\u00e3o de que a vers\u00e3o de produ\u00e7\u00e3o n\u00e3o apresentar\u00e1 logs de advert\u00eancia, tornando-a mais eficiente. (Caso voc\u00ea note o contr\u00e1rio, por gentileza, abra uma issue).</p>\n<h3 id=\"what-counts-as-a-breaking-change\"><a class=\"anchor\" href=\"/react/faq-versioning#what-counts-as-a-breaking-change\"></a>O que Conta como uma Atualiza\u00e7\u00e3o que Quebra Compatibilidade? </h3>\n<p>No geral, <em>n\u00e3o</em> alteramos o n\u00famero de major version por altera\u00e7\u00f5es como:</p>\n<ul>\n<li><strong>Advert\u00eancias de Desenvolvimento.</strong> J\u00e1 que estas n\u00e3o afetam o comportamento de produ\u00e7\u00e3o, n\u00f3s podemos adicionar novas advert\u00eancias ou modificar as existentes entre novas vers\u00f5es. De fato, isso \u00e9 o que nos permite garantir a seguran\u00e7a das pr\u00f3ximas vers\u00f5es. </li>\n<li><strong>APIs comen\u00e7ando com <code class=\"language-javascript\">unstable_</code>.</strong> Estas s\u00e3o providas como funcionalidades experimentais das quais ainda n\u00e3o possu\u00edmos certa estabilidade das APIs. Ao liberarmos estas com um prefixo <code class=\"language-javascript\">unstable_</code>, podemos rapidamente iterar e tornar a API est\u00e1vel de forma mais r\u00e1pida.  </li>\n<li><strong>Vers\u00f5es alpha e canary do React.</strong> N\u00f3s provemos vers\u00f5es alpha do React como uma maneira de testar novas funcionalidades de forma mais r\u00e1pida, por\u00e9m precisamos da flexibilidade para realizar altera\u00e7\u00f5es baseadas no que aprendemos com o per\u00edodo da vers\u00e3o alpha. Caso voc\u00ea fa\u00e7a uso destas vers\u00f5es, note que as APIs podem mudar antes do lan\u00e7amento da vers\u00e3o est\u00e1vel. </li>\n<li><strong>APIs n\u00e3o documentadas e estrutura de dados interna.</strong> Se voc\u00ea acessa propriedades com nomes internos como <code class=\"language-javascript\">__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED</code> ou <code class=\"language-javascript\">__reactInternalInstance$uk43rzhitjg</code>, n\u00e3o h\u00e1 garantia alguma. Voc\u00ea est\u00e1 por conta pr\u00f3pria.</li>\n</ul>\n<p>Este documento \u00e9 destinado a ser pragm\u00e1tico: obviamente, n\u00e3o queremos causar dores de cabe\u00e7a a voc\u00ea. Se n\u00f3s alterarmos a major version para todas essas mudan\u00e7as, n\u00f3s terminar\u00edamos liberando mais major versions e consequentemente causando mais dores de versionamento para a comunidade. Isso tamb\u00e9m significaria que n\u00e3o poder\u00edamos melhorar o React t\u00e3o r\u00e1pido quanto gostar\u00edamos.</p>\n<p>Dito isso, se n\u00f3s percebermos que uma mudan\u00e7a desta lista possa causar problemas na comunidade, ainda faremos o nosso melhor para prover um plano gradual de migra\u00e7\u00e3o.</p>\n<h3 id=\"minors-versus-patches\"><a class=\"anchor\" href=\"/react/faq-versioning#minors-versus-patches\"></a>Se uma vers\u00e3o secund\u00e1ria n\u00e3o inclui novos recursos, por que n\u00e3o \u00e9 um Patch? </h3>\n<p>\u00c9 poss\u00edvel que uma vers\u00e3o minor n\u00e3o inclua novos recursos. <a class=\"external-link\" href=\"https://semver.org/#spec-item-7\">Isso \u00e9 permitido por semver</a>, que afirma que <strong>\u201d[uma vers\u00e3o minor] PODE ser incrementada se novas funcionalidades substanciais ou melhorias forem introduzidas no c\u00f3digo privado. Como PODE incluir altera\u00e7\u00f5es no n\u00edvel do patch.\u201d</strong></p>\n<p>No entanto, levanta a quest\u00e3o de por que esses lan\u00e7amentos n\u00e3o s\u00e3o versionados como patches.</p>\n<p>A resposta \u00e9 que qualquer altera\u00e7\u00e3o no React (ou outro software) acarreta algum risco de quebra de maneiras inesperadas. Imagine um cen\u00e1rio em que uma vers\u00e3o de patch que corrija um bug introduza acidentalmente um bug diferente. Isso n\u00e3o s\u00f3 prejudicaria os desenvolvedores, mas tamb\u00e9m prejudicaria sua confian\u00e7a em futuros lan\u00e7amentos de patches. \u00c9 especialmente lament\u00e1vel se a corre\u00e7\u00e3o original for um bug que raramente \u00e9 encontrado na pr\u00e1tica.</p>\n<p>Temos um hist\u00f3rico muito bom para manter as vers\u00f5es React livres de bugs, mas as vers\u00f5es de patches t\u00eam uma barra ainda mais alta de de confiabilidade, porque a maioria dos desenvolvedores sup\u00f5e que elas podem ser adotadas sem consequ\u00eancias adversas.</p>\n<p>Por esses motivos, reservamos vers\u00f5es de patches apenas para os bugs mais cr\u00edticos e vulnerabilidades de seguran\u00e7a.</p>\n<p>Se uma vers\u00e3o incluir altera\u00e7\u00f5es n\u00e3o essenciais - como refatores internos, altera\u00e7\u00f5es nos detalhes de implementa\u00e7\u00e3o, melhorias de desempenho ou corre\u00e7\u00f5es menores - n\u00f3s iremos colidir com a vers\u00e3o secund\u00e1ria mesmo quando n\u00e3o houver novos recursos.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/faq-versioning.md\">Edit this page</a></p></div></article>", "path": "/react/faq-versioning", "nav": ["/react/faq-structure", "/react/faq-internals"]}, {"key": "Virtual DOM e Objetos Internos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-15weewl\"><h3 id=\"what-is-the-virtual-dom\"><a class=\"anchor\" href=\"/react/faq-internals#what-is-the-virtual-dom\"></a>O que \u00e9 o Virtual DOM? </h3>\n<p>O virtual DOM (VDOM) \u00e9 um conceito de programa\u00e7\u00e3o onde uma representa\u00e7\u00e3o ideal, ou \u201cvirtual\u201d, da interface do usu\u00e1rio \u00e9 mantida em mem\u00f3ria e sincronizada com o DOM \u201creal\u201d por uma biblioteca como o ReactDOM. Esse processo \u00e9 chamado de <a href=\"/react/reconciliation\">reconcilia\u00e7\u00e3o</a>.</p>\n<p>Essa abordagem permite a API declarativa do React: Voc\u00ea diz ao React qual o state que voc\u00ea quer que a interface do usu\u00e1rio esteja, e ele garante que o DOM seja igual ao state. Isso abstrai a manipula\u00e7\u00e3o de atributos, manipula\u00e7\u00e3o de eventos e atualiza\u00e7\u00e3o manual do DOM que, caso ao contrario, voc\u00ea teria que usar para construir o seu app.</p>\n<p>Dado que \u201cvirtual DOM\u201d \u00e9 mais um padr\u00e3o do que uma tecnologia espec\u00edfica, as pessoas \u00e0s vezes o citam querendo dizer coisas diferentes. No mundo do React, o termo \u201cvirtual DOM\u201d \u00e9 geralmente associado aos <a href=\"/react/rendering-elements\">Elementos do React</a> uma vez que eles s\u00e3o objetos representando a interface do usu\u00e1rio. O React, contudo, tamb\u00e9m usa objetos internos chamados \u201cfibers\u201d para conter informa\u00e7\u00f5es adicionais sobre a \u00e1rvore de componentes. Eles tamb\u00e9m podem ser considerados parte da implementa\u00e7\u00e3o do \u201cvirtual DOM\u201d no React.</p>\n<h3 id=\"is-the-shadow-dom-the-same-as-the-virtual-dom\"><a class=\"anchor\" href=\"/react/faq-internals#is-the-shadow-dom-the-same-as-the-virtual-dom\"></a>O Shadow DOM \u00e9 a mesma coisa que o Virtual DOM? </h3>\n<p>N\u00e3o, eles s\u00e3o diferentes. O Shadow DOM \u00e9 uma tecnologia do navegador desenhada principalmente para conter vari\u00e1veis e CSS no escopo dos web components. O virtual DOM \u00e9 um conceito implementado por bibliotecas em JavaScript em cima das APIs do navegador.</p>\n<h3 id=\"what-is-react-fiber\"><a class=\"anchor\" href=\"/react/faq-internals#what-is-react-fiber\"></a>O que \u00e9 \u201cReact Fiber\u201d? </h3>\n<p>Fiber \u00e9 um novo motor de reconcilia\u00e7\u00e3o no React 16. Seu objetivo principal \u00e9 habilitar renderiza\u00e7\u00e3o incremental no virtual DOM. <a class=\"external-link\" href=\"https://github.com/acdlite/react-fiber-architecture\">Leia mais</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/tree/main/content/docs/faq-internals.md\">Edit this page</a></p></div></article>", "path": "/react/faq-internals", "nav": ["/react/faq-versioning"]}]}]