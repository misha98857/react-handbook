[{"key": "Instalaci\u00f3n", "values": [{"key": "Empezando", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Esta p\u00e1gina es un resumen de la documentaci\u00f3n de React y recursos relacionados.</p>\n<p><strong>React</strong> es una biblioteca Javascript para crear interfaces de usuario. Aprende todo de lo que trata React en <a class=\"external-link\" href=\"https://es.reactjs.org//\">nuestra p\u00e1gina principal</a> o <a class=\"external-link\" href=\"https://es.reactjs.org//tutorial/tutorial.html\">en este tutorial</a>.</p>\n\n<ul>\n<li><a href=\"/react/getting-started#try-react\">Prueba React</a></li>\n<li><a href=\"/react/getting-started#learn-react\">Aprende React</a></li>\n<li><a href=\"/react/getting-started#staying-informed\">Mantente Informado</a></li>\n<li><a href=\"/react/getting-started#versioned-documentation\">Documentaci\u00f3n por Versiones</a></li>\n<li><a href=\"/react/getting-started#something-missing\">\u00bfAlgo hace falta?</a></li>\n</ul>\n<h2 id=\"try-react\"><a class=\"anchor\" href=\"/react/getting-started#try-react\"></a>Prueba React </h2>\n<p>React ha sido dise\u00f1ado desde su inicio para ser adoptado gradualmente, as\u00ed puedes <strong>usar tan poco o mucho de React como necesites.</strong> Si quieres una prueba de React, agregar interactividad a una simple p\u00e1gina HTML o empezar una aplicaci\u00f3n compleja con React, los enlaces de esta secci\u00f3n te ayudar\u00e1n a empezar.</p>\n<h3 id=\"online-playgrounds\"><a class=\"anchor\" href=\"/react/getting-started#online-playgrounds\"></a>\u00c1rea de juegos </h3>\n<p>Si est\u00e1s interesado en jugar un poco con React, puedes usar un editor de c\u00f3digo online. Prueba la plantilla \u201cHola mundo\u201d en <a class=\"external-link\" href=\"https://es.reactjs.org//redirect-to-codepen/hello-world\">CodePen</a>, <a class=\"external-link\" href=\"https://codesandbox.io/s/new\">CodeSandbox</a> o <a class=\"external-link\" href=\"https://stackblitz.com/fork/react\">Stackblitz</a>.</p>\n<p>Si prefieres usar tu propio editor, tambi\u00e9n puedes <a class=\"external-link\" href=\"https://raw.githubusercontent.com/reactjs/reactjs.org/main/static/html/single-file-example.html\">descargar este archivo HTML</a>, editarlo, y abrirlo desde tu sistema de archivos al navegador. Esto realiza una transformaci\u00f3n de c\u00f3digo lenta, as\u00ed que solo recomendamos esto para pruebas simples.</p>\n<h3 id=\"add-react-to-a-website\"><a class=\"anchor\" href=\"/react/getting-started#add-react-to-a-website\"></a>Agregar React a un sitio web. </h3>\n<p>Puedes <a href=\"/react/add-react-to-a-website\">agregar React a un HTML en un minuto</a>. Puedes o bien ir agreg\u00e1ndolo gradualmente, o mantenerlo contenido en unos cuantos <em>widgets</em> din\u00e1micos.</p>\n<h3 id=\"create-a-new-react-app\"><a class=\"anchor\" href=\"/react/getting-started#create-a-new-react-app\"></a>Crea una aplicaci\u00f3n React nueva </h3>\n<p>Cuando se empieza un proyecto con React, <a href=\"/react/add-react-to-a-website\">una simple p\u00e1gina HTML con una etiqueta de tipo <em>script</em></a> puede ser la mejor opci\u00f3n. Solo toma un minuto para configurarse.</p>\n<p>A medida que tu aplicaci\u00f3n crezca, puede que consideres una configuraci\u00f3n m\u00e1s integrada. Hay una gran variedad de herramientas que recomendamos para aplicaciones m\u00e1s grandes. Cada una de ellas puede funcionar con poca configuraci\u00f3n, y te permite tomar toda la ventaja de un ambiente React completo. <a href=\"/react/create-a-new-react-app\">Aprende c\u00f3mo</a>.</p>\n<h2 id=\"learn-react\"><a class=\"anchor\" href=\"/react/getting-started#learn-react\"></a>Aprende React </h2>\n<p>Las personas vienen a React de distintos or\u00edgenes y de diferentes estilos de aprendizaje. Si prefieres un enfoque m\u00e1s te\u00f3rico o pr\u00e1ctico, esperamos que encuentres esta secci\u00f3n \u00fatil.</p>\n<ul>\n<li>Si prefieres <strong>aprender mediante pr\u00e1ctica</strong>, empieza con nuestro <a class=\"external-link\" href=\"https://es.reactjs.org//tutorial/tutorial.html\">tutorial pr\u00e1ctico</a>.</li>\n<li>Si prefieres <strong>aprender los conceptos paso a paso</strong>, empieza con nuestra <a href=\"/react/hello-world\">gu\u00eda a los conceptos principales</a>.</li>\n</ul>\n<p>Como cualquier tecnolog\u00eda desconocida, React tiene una curva de aprendizaje. Con pr\u00e1ctica y un poco de paciencia, <em>obtendr\u00e1s</em> habilidad sobre esta.</p>\n<h3 id=\"first-examples\"><a class=\"anchor\" href=\"/react/getting-started#first-examples\"></a>Primeros ejemplos </h3>\n<p>La <a class=\"external-link\" href=\"https://es.reactjs.org//\">p\u00e1gina principal de React</a> tiene unos cuantos ejemplos peque\u00f1os de React con un editor en vivo. Incluso si no sabes nada de React a\u00fan, prueba cambiando el c\u00f3digo y mira c\u00f3mo afecta el resultado.</p>\n<h3 id=\"react-for-beginners\"><a class=\"anchor\" href=\"/react/getting-started#react-for-beginners\"></a>React para principiantes </h3>\n<p>Si sientes que la documentaci\u00f3n de React va a un ritmo mayor del que te sientes c\u00f3modo, mira este <a class=\"external-link\" href=\"https://www.taniarascia.com/getting-started-with-react/\">resumen de React por Tania Rascia</a>. Introduce los conceptos m\u00e1s importantes de React de una forma m\u00e1s detallada y amigable para los principiantes. Una vez que lo termines, intenta leer la documentaci\u00f3n de nuevo.</p>\n<h3 id=\"react-for-designers\"><a class=\"anchor\" href=\"/react/getting-started#react-for-designers\"></a>React para dise\u00f1adores </h3>\n<p>Si vienes con experiencia como dise\u00f1ador, <a class=\"external-link\" href=\"https://reactfordesigners.com/\">estos recursos</a> son un gran lugar para empezar.</p>\n<h3 id=\"javascript-resources\"><a class=\"anchor\" href=\"/react/getting-started#javascript-resources\"></a>Recursos JavaScript </h3>\n<p>La documentaci\u00f3n de React asume cierta familiaridad con la programaci\u00f3n en Javascript. No necesitas ser un experto, pero es m\u00e1s dif\u00edcil aprender React y Javascript al mismo tiempo.</p>\n<p>Recomendamos pasar por este <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">resumen de Javascript</a> para medir tu nivel de conocimiento. Te tomar\u00e1 entre treinta minutos y una hora, pero te sentir\u00e1s m\u00e1s seguro aprendiendo React.</p>\n<div class=\"blockquote\">\n<strong>Consejo</strong>\n<p>Cuando te sientas confundido sobre algo de Javascript, <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript\">MDN</a> y <a class=\"external-link\" href=\"https://javascript.info/\">javascript.info</a> son sitios incre\u00edbles para revisar. Tambi\u00e9n hay un <a class=\"external-link\" href=\"https://es.reactjs.org//community/support.html\">foro de asistencia por la comunidad</a> donde puedes pedir ayuda.</p>\n</div>\n<h3 id=\"practical-tutorial\"><a class=\"anchor\" href=\"/react/getting-started#practical-tutorial\"></a>Tutorial pr\u00e1ctico </h3>\n<p>Si prefieres <strong>aprender mediante la pr\u00e1ctica</strong> mira nuestro <a class=\"external-link\" href=\"https://es.reactjs.org//tutorial/tutorial.html\">tutorial pr\u00e1ctico</a>. En este tutorial  construimos el juego <em>tres en raya</em> en React. Puede que te sientas tentado a salt\u00e1rtelo porque no te interesa mucho el desarrollo de juegos, pero dale una oportunidad. Las t\u00e9cnicas que aprender\u00e1s en el tutorial son fundamentales para desarrollar cualquier aplicaci\u00f3n con React, y dominarlas te dar\u00e1 un entendimiento mucho m\u00e1s profundo.</p>\n<h3 id=\"step-by-step-guide\"><a class=\"anchor\" href=\"/react/getting-started#step-by-step-guide\"></a>Gu\u00eda paso a paso </h3>\n<p>Si prefieres <strong>aprender los conceptos paso a paso</strong>, nuestra <a href=\"/react/hello-world\">gu\u00eda a los conceptos principales</a> es el mejor lugar para empezar. Cada cap\u00edtulo en ella parte del conocimiento introducido en cap\u00edtulos anteriores, por lo que no te perder\u00e1s nada a medida que avanzas.</p>\n<h3 id=\"thinking-in-react\"><a class=\"anchor\" href=\"/react/getting-started#thinking-in-react\"></a>Pensando en React </h3>\n<p>Muchos usuarios de React dan cr\u00e9dito a leer <a href=\"/react/thinking-in-react\">Pensando en React</a> como el momento en el que React finalmente tuvo \u201csentido\u201d para ellos. Es probablemente el paso a paso m\u00e1s viejo, pero a\u00fan es igual de relevante.</p>\n<h3 id=\"recommended-courses\"><a class=\"anchor\" href=\"/react/getting-started#recommended-courses\"></a>Cursos recomendados </h3>\n<p>A veces las personas consiguen libros de terceros o recursos de video m\u00e1s \u00fatiles que la misma documentaci\u00f3n. Mantenemos una <a class=\"external-link\" href=\"https://es.reactjs.org//community/courses.html\">lista de recursos usualmente recomendados</a>, algunos de ellos son gratis.</p>\n<h3 id=\"advanced-concepts\"><a class=\"anchor\" href=\"/react/getting-started#advanced-concepts\"></a>Conceptos avanzados </h3>\n<p>Una vez que te sientas c\u00f3modo con los <a href=\"/react/hello-world\">conceptos principales</a> y hayas jugado con React un poco, puede que est\u00e9s interesado en temas m\u00e1s avanzados. Esta secci\u00f3n te presentar\u00e1 funcionalidades poderosas, pero menos conocidas de React como <a href=\"/react/context\">contexto</a> o <a href=\"/react/refs-and-the-dom\">referencias</a>.</p>\n<h3 id=\"api-reference\"><a class=\"anchor\" href=\"/react/getting-started#api-reference\"></a>Referencia de la API </h3>\n<p>Esta secci\u00f3n de la documentaci\u00f3n es \u00fatil si quieres aprender detalles sobre una API de React en espec\u00edfico. Por ejemplo, <a href=\"/react/react-component\">la referencia de React.Component</a> te puede dar detalles en c\u00f3mo funciona <code class=\"language-javascript\">setState()</code>, y para qu\u00e9 sirven diferentes m\u00e9todos del ciclo de vida del componente.</p>\n<h3 id=\"glossary-and-faq\"><a class=\"anchor\" href=\"/react/getting-started#glossary-and-faq\"></a>Glosario y preguntas frecuentes </h3>\n<p>El <a href=\"/react/glossary\">glosario</a> contiene un resumen de los t\u00e9rminos m\u00e1s comunes que ver\u00e1s en la documentaci\u00f3n de React. Tambi\u00e9n hay una secci\u00f3n de preguntas frecuentes dedicada a preguntas cortas y respuestas sobre temas comunes, incluyendo <a href=\"/react/faq-ajax\">realizar solicitudes con AJAX</a>, <a href=\"/react/faq-state\">estado de un componente</a>, y <a href=\"/react/faq-structure\">estructura de archivos</a>.</p>\n<h2 id=\"staying-informed\"><a class=\"anchor\" href=\"/react/getting-started#staying-informed\"></a>Mantente informado </h2>\n<p>El <a class=\"external-link\" href=\"https://es.reactjs.org//blog/\">Blog de React</a> es la fuente oficial de actualizaciones por parte del equipo de React. Cualquier informaci\u00f3n importante, incluyendo notas sobre lanzamientos o notas de depreciaci\u00f3n, ser\u00e1n puestas all\u00ed primero.</p>\n<p>Tambi\u00e9n puedes seguir la <a class=\"external-link\" href=\"https://twitter.com/reactjs\">cuenta de @reactjs</a> en Twitter, pero no te perder\u00e1s de nada esencial si solo lees el blog.</p>\n<p>No todos los lanzamientos de React ameritan su propia publicaci\u00f3n en el blog, pero puedes encontrar una lista detallada de cambios para cada lanzamiento en el <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CHANGELOG.md\">archivo CHANGELOG.MD en el repositorio de React</a>, as\u00ed como tambi\u00e9n en la p\u00e1gina de <a class=\"external-link\" href=\"https://github.com/facebook/react/releases\">Lanzamientos</a>.</p>\n<h2 id=\"versioned-documentation\"><a class=\"anchor\" href=\"/react/getting-started#versioned-documentation\"></a>Documentaci\u00f3n por versiones </h2>\n<p>Esta documentaci\u00f3n siempre refleja la \u00faltima versi\u00f3n estable de React. Desde React 16, puedes encontrar versiones m\u00e1s antiguas de la documentaci\u00f3n en una <a class=\"external-link\" href=\"https://es.reactjs.org//versions\">p\u00e1gina separada</a>. Recuerda que la documentaci\u00f3n para versiones m\u00e1s antiguas es una copia exacta a la del tiempo en que fue lanzada, por lo que no es constantemente actualizada.</p>\n<h2 id=\"something-missing\"><a class=\"anchor\" href=\"/react/getting-started#something-missing\"></a>\u00bfAlgo hace falta? </h2>\n<p>Si algo hace falta en la documentaci\u00f3n, o si estas confundido, por favor <a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/issues/new\">abre un caso en el repositorio de la documentaci\u00f3n</a> con tus sugerencias para mejoras, o env\u00eda un tweet a la <a class=\"external-link\" href=\"https://twitter.com/reactjs\">cuenta de @reactjs</a>. \u00a1Nos encanta saber de ti!</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/getting-started.md\">Edit this page</a></p></div></article>", "path": "/react/getting-started", "nav": ["/react", "/react/add-react-to-a-website"]}, {"key": "Agregar React a un sitio web", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Utiliza s\u00f3lo lo que necesites de React.</p>\n<p>React fue dise\u00f1ado desde el principio para que se pudiera adoptar de forma gradual, y <strong>puedas utilizar s\u00f3lo las cosas que necesites de React</strong>. Quiz\u00e1s solo quieras agregar una \u201cpizca de interactividad\u201d a una p\u00e1gina existente. Los componentes de React son una gran manera de hacer eso.</p>\n<p>La mayor\u00eda de sitios web no son, y no necesitan ser, aplicaciones de una s\u00f3la p\u00e1gina. Con <strong>unas pocas l\u00edneas de c\u00f3digo y sin herramientas de compilaci\u00f3n</strong>, puedes probar React en lugares peque\u00f1os de tu sitio web. Y de all\u00ed puedes expandir su presencia de forma gradual, o mantenerlo contenido a unos pocos en unos widgets din\u00e1micos.</p>\n\n<ul>\n<li><a href=\"/react/add-react-to-a-website#add-react-in-one-minute\">Agrega React en Un Minuto</a></li>\n<li><a href=\"/react/add-react-to-a-website#optional-try-react-with-jsx\">Opcional: Prueba React con JSX</a> (sin necesidad de usar bundler!)</li>\n</ul>\n<h2 id=\"add-react-in-one-minute\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#add-react-in-one-minute\"></a>Agrega React en un minuto </h2>\n<p>En esta secci\u00f3n, vamos a mostrarte como agregar un componente de React a una p\u00e1gina HTML existente. Puedes seguir los pasos en tu sitio web, o crear un nuevo archivo HTML para practicar.</p>\n<p>No habr\u00e1 necesidad de usar herramientas complicadas u otros requerimientos para instalar \u2014 <strong>para completar esta secci\u00f3n, s\u00f3lo necesitas de una conexi\u00f3n a internet y un minuto de tu tiempo.</strong></p>\n<p>Opcional: <a class=\"external-link\" href=\"https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/87f0b6f34238595b44308acfb86df6ea43669c08.zip\">Descargar el ejemplo completo (2KB comprimido)</a></p>\n<h3 id=\"step-1-add-a-dom-container-to-the-html\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#step-1-add-a-dom-container-to-the-html\"></a>Paso 1: Agrega un contenedor del DOM al HTML </h3>\n<p>Para iniciar, abre la p\u00e1gina HTML que deseas editar. Agrega una etiqueta <code class=\"language-javascript\">&lt;div&gt;</code> vac\u00eda para marcar el lugar donde deseas visualizar algo con React. Por ejemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token comment\">&lt;!-- ... HTML existente ... --&gt;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>like_button_container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"token comment\">&lt;!-- ... HTML existente ... --&gt;</span></code></pre></div>\n<p>A este <code class=\"language-javascript\">&lt;div&gt;</code> le agregamos un atributo HTML <code class=\"language-javascript\">id</code> que es \u00fanico. Esto nos permitir\u00e1 encontrarlo desde el c\u00f3digo Javascript m\u00e1s adelante y visualizar un componente de React adentro de este.</p>\n<div class=\"blockquote\">\n<strong>Consejo</strong>\n<p>Puedes agregar un \u201ccontenedor\u201d <code class=\"language-javascript\">&lt;div&gt;</code> como este en <strong>cualquier sitio</strong> dentro de la etiqueta <code class=\"language-javascript\">&lt;body&gt;</code>. Puedes tener la cantidad de contenedores independientes en el DOM que desees. Por lo general \u00e9stos est\u00e1n vac\u00edos \u2014 React reemplazar\u00e1 cualquier contenido existente dentro de los contenedores del DOM.</p>\n</div>\n<h3 id=\"step-2-add-the-script-tags\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#step-2-add-the-script-tags\"></a>Paso 2: Agrega las etiquetas de script </h3>\n<p>Lo siguiente es agregar tres etiquetas <code class=\"language-javascript\">&lt;script&gt;</code> a la p\u00e1gina HTML justo antes de cerrar la etiqueta <code class=\"language-javascript\">&lt;/body&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\">  <span class=\"token comment\">&lt;!-- ... m\u00e1s HTML ... --&gt;</span>\n\n  <span class=\"token comment\">&lt;!-- Cargar React. --&gt;</span>\n  <span class=\"token comment\">&lt;!-- Nota: cuando se despliegue, reemplazar \"development.js\" con \"production.min.js\". --&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@18/umd/react.development.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@18/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n  <span class=\"token comment\">&lt;!-- Cargamos nuestro componente de React. --&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>like_button.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Las primeras dos etiquetas cargan React. La tercera carga tu c\u00f3digo del componente.</p>\n<h3 id=\"step-3-create-a-react-component\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#step-3-create-a-react-component\"></a>Paso 3: Crea un componente de React </h3>\n<p>Crea un archivo llamado <code class=\"language-javascript\">like_button.js</code> en el mismo lugar donde tienes tu archivo HTML.</p>\n<p>Abre <strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js\">este c\u00f3digo inicial</a></strong> y p\u00e9galo en el archivo que acabaste de crear.</p>\n<div class=\"blockquote\">\n<strong>Consejo</strong>\n<p>Este c\u00f3digo define un componente de React llamado <code class=\"language-javascript\">LikeButton</code>. No te preocupes si a\u00fan no lo entiendes \u2014 vamos a cubrir los elementos b\u00e1sicos de React luego en nuestro <a class=\"external-link\" href=\"https://es.reactjs.org//tutorial/tutorial.html\">tutorial pr\u00e1ctico</a> y <a href=\"/react/hello-world\">gu\u00eda de conceptos principal</a>. Por ahora, \u00a1vamos a hacer que se muestre en la pantalla!</p>\n</div>\n<p>Despu\u00e9s <strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js\">en el c\u00f3digo inicial</a></strong>, agrega tres l\u00edneas al final de <code class=\"language-javascript\">like_button.js</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// ... el c\u00f3digo inicial que pegaste ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> domContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#like_button_container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>domContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>LikeButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Estas tres l\u00edneas de c\u00f3digo encuentran el <code class=\"language-javascript\">&lt;div&gt;</code> que agregamos en nuestro HTML en el primer paso y muestran el componente de React para nuestro bot\u00f3n de \u201cLike\u201d dentro del mismo.</p>\n<h3 id=\"thats-it\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#thats-it\"></a>\u00a1Eso es todo! </h3>\n<p>No hay un cuarto paso. <strong>Ya agregaste tu primer componente de React a tu sitio web.</strong></p>\n<p>Dale un vistazo a las siguientes secciones para m\u00e1s consejos sobre como integrar React.</p>\n<p><strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605\">Mira el c\u00f3digo fuente del ejemplo completo</a></strong></p>\n<p><strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/87f0b6f34238595b44308acfb86df6ea43669c08.zip\">Descargar el ejemplo completo (2KB comprimido)</a></strong></p>\n<h3 id=\"tip-reuse-a-component\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#tip-reuse-a-component\"></a>Consejo: Reusar un componente </h3>\n<p>Por lo general, es deseado mostrar componentes de React en m\u00faltiples lugares de una p\u00e1gina HTML. Aqu\u00ed hay un ejemplo que muestra el bot\u00f3n de \u201cLike\u201d tres veces y le pasa algunos datos al mismo:</p>\n<p><a class=\"external-link\" href=\"https://gist.github.com/gaearon/faa67b76a6c47adbab04f739cba7ceda\">Mira el c\u00f3digo fuente del ejemplo completo</a></p>\n<p><a class=\"external-link\" href=\"https://gist.github.com/gaearon/faa67b76a6c47adbab04f739cba7ceda/archive/279839cb9891bd41802ebebc5365e9dec08eeb9f.zip\">Descargar el ejemplo completo (2KB comprimido)</a></p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Esta estrateg\u00eda es \u00fatil cuando las partes de la p\u00e1gina que funcionan en React est\u00e1n aisladas entre s\u00ed. En c\u00f3digo de React, es mucho m\u00e1s f\u00e1cil usar <a href=\"/react/components-and-props#composing-components\">composici\u00f3n de componentes</a> en su lugar.</p>\n</div>\n<h3 id=\"tip-minify-javascript-for-production\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#tip-minify-javascript-for-production\"></a>Consejo: Compactar JavaScript para producci\u00f3n </h3>\n<p>Antes de desplegar tu sitio web a producci\u00f3n, debes ser consciente que no compactar tu JavaScript puede disminuir de forma considerable la carga de tu p\u00e1gina.</p>\n<p>Si ya has compactado los scripts de tu aplicaci\u00f3n, <strong>tu sitio estar\u00e1 listo para producci\u00f3n</strong> si aseguras que el HTML desplegado carga las versiones de React finalizadas en <code class=\"language-javascript\">production.min.js</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@18/umd/react.production.min.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@18/umd/react-dom.production.min.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Si no tienes un paso para compactar tus scripts, <a class=\"external-link\" href=\"https://gist.github.com/gaearon/42a2ffa41b8319948f9be4076286e1f3\">aqu\u00ed hay una forma en que puedes establecerlo</a>.</p>\n<h2 id=\"optional-try-react-with-jsx\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#optional-try-react-with-jsx\"></a>Opcional: Prueba React con JSX </h2>\n<p>En los ejemplos anteriores, hemos dependido solamente de caracter\u00edsticas que son compatibles de forma nativa con los navegadores. Es por esto que usamos una llamada a una funci\u00f3n de JavaScript para decirle a React que mostrar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createElement<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Muestra un &lt;button&gt; que contenga \"Like\"</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">liked</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Like'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sin embargo, React tambi\u00e9n ofrece la opci\u00f3n para usar <a href=\"/react/introducing-jsx\">JSX</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Muestra un &lt;button&gt; que contenga \"Like\"</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">liked</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    Like\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Estos dos fragmentos de c\u00f3digo son equivalentes. Mientras <strong>JSX es <a href=\"/react/react-without-jsx\">completamente opcional</a></strong>, muchas personas lo encuentran \u00fatil para escribir c\u00f3digo relacionado con la interfaz de usuario \u2014 ya sea usando React o con otras bibliotecas.</p>\n<p>Puedes experimentar con JSX usando <a class=\"external-link\" href=\"https://babeljs.io/en/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=DwIwrgLhD2B2AEcDCAbAlgYwNYF4DeAFAJTw4B88EAFmgM4B0tAphAMoQCGETBe86WJgBMAXJQBOYJvAC-RGWQBQ8FfAAyaQYuAB6cFDhkgA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=7.15.7\">este conversor en l\u00ednea</a>.</p>\n<h3 id=\"quickly-try-jsx\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#quickly-try-jsx\"></a>Prueba JSX de forma r\u00e1pida </h3>\n<p>La forma m\u00e1s r\u00e1pida de probar JSX en tu proyecto es agregando esta etiqueta <code class=\"language-javascript\">&lt;script&gt;</code> en tu p\u00e1gina:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/babel-standalone@6/babel.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Ahora puedes usar JSX en cualquier etiqueta de <code class=\"language-javascript\">&lt;script&gt;</code> al agregarle el atributo <code class=\"language-javascript\">type=\"text/babel\"</code>. Aqu\u00ed hay <a class=\"external-link\" href=\"https://raw.githubusercontent.com/reactjs/reactjs.org/main/static/html/single-file-example.html\">un ejemplo de un archivo HTML con JSX</a> que puedes descargar y experimentar con \u00e9l.</p>\n<p>Este enfoque est\u00e1 bien mientras aprendes o creas demostraciones simples. Sin embargo, hace que tu sitio web sea lento y <strong>no es apropiado para utilizarse en producci\u00f3n</strong>. Cuando est\u00e9s listo para seguir adelante, elimina esta etiqueta de <code class=\"language-javascript\">&lt;script&gt;</code> y los atributos <code class=\"language-javascript\">type=\"text/babel\"</code> que hayas agregado. En la siguiente secci\u00f3n vas a configurar un preprocesador de JSX que convertir\u00e1 todas tus etiquetas de <code class=\"language-javascript\">&lt;script&gt;</code> autom\u00e1ticamente.</p>\n<h3 id=\"add-jsx-to-a-project\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#add-jsx-to-a-project\"></a>Agregar JSX a un proyecto </h3>\n<p>Agregar JSX a un proyecto no necesita de herramientas complicadas como un bundler o un servidor de desarrollo. B\u00e1sicamente, agregar JSX <strong>es muy parecido a agregar un preprocesador de CSS.</strong> El \u00fanico requisito es que tengas <a class=\"external-link\" href=\"https://nodejs.org/\">Node.js</a> instalado en tu computador.</p>\n<p>En tu terminal, ve a la carpeta que contiene tu proyecto y pega estos dos comandos:</p>\n<ol>\n<li><strong>Paso 1:</strong> Ejecuta <code class=\"language-javascript\">npm init -y</code> (si falla, <a class=\"external-link\" href=\"https://gist.github.com/gaearon/246f6380610e262f8a648e3e51cad40d\">aqu\u00ed est\u00e1 como arreglarlo</a>)</li>\n<li><strong>Paso 2:</strong> Ejecuta <code class=\"language-javascript\">npm install babel-cli@6 babel-preset-react-app@3</code></li>\n</ol>\n<div class=\"blockquote\">\n<strong>Consejo</strong>\n<p>Aqu\u00ed <strong>s\u00f3lo estamos usando npm para instalar el preprocesador de JSX;</strong> no lo vas a necesitar para nada m\u00e1s. Tanto React como el c\u00f3digo de la aplicaci\u00f3n pueden seguir como una etiqueta de <code class=\"language-javascript\">&lt;script&gt;</code> sin cambio alguno.</p>\n</div>\n<p>\u00a1Felicitaciones! Acabas de agregar una <strong>configuraci\u00f3n de JSX lista para producci\u00f3n</strong> a tu proyecto.</p>\n<h3 id=\"run-jsx-preprocessor\"><a class=\"anchor\" href=\"/react/add-react-to-a-website#run-jsx-preprocessor\"></a>Ejecuta el preprocesador de JSX </h3>\n<p>Crea una carpeta llamada <code class=\"language-javascript\">src</code> y ejecuta este comando en la terminal:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-console\"><code class=\"language-javascript\">npx babel --watch src --out-dir . --presets react-app/prod</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">npx</code> no es un error de escritura \u2014 es una <a class=\"external-link\" href=\"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\">herramienta de ejecuci\u00f3n de paquetes incluida en npm 5.2+</a>.</p>\n<p>Si ves alg\u00fan mensaje de error que te dice que \u201cHas instalado equivocadamente el paquete de <code class=\"language-javascript\">babel</code>\u201d, puede ser que olvidaste realizar <a href=\"/react/add-react-to-a-website#add-jsx-to-a-project\">el paso anterior</a>. Realiza el paso anterior en la misma carpeta en que est\u00e1s y vuelve a intentar este paso.</p>\n</div>\n<p>No esperes hasta que termine \u2014 este comando inicia un observador autom\u00e1tico para JSX.</p>\n<p>Si ahora creas un archivo llamado <code class=\"language-javascript\">src/like_button.js</code> con este <strong><a class=\"external-link\" href=\"https://gist.github.com/gaearon/c8e112dc74ac44aac4f673f2c39d19d1/raw/09b951c86c1bf1116af741fa4664511f2f179f0a/like_button.js\">c\u00f3digo inicial de JSX</a></strong>, el observador va a crear un <code class=\"language-javascript\">like_button.js</code> preprocesado con el c\u00f3digo JavaScript original que es apto para el navegador. Cuando edites el c\u00f3digo del archivo que tiene JSX, el transformador va a volver a ejecutarse de forma autom\u00e1tica.</p>\n<p>Como un bonus, esto tambi\u00e9n te permite utilizar caracter\u00edsticas nuevas de la sintaxis de JavaScript, como las clases, sin que te preocupes de que no funcionen en navegadores antiguos. La herramienta que hemos usado se llama Babel, y puedes leer m\u00e1s sobre ella en <a class=\"external-link\" href=\"https://babeljs.io/docs/en/babel-cli/\">su documentaci\u00f3n</a>.</p>\n<p>Si notas que se te est\u00e1 haciendo m\u00e1s c\u00f3modo manejar las herramientas de configuraci\u00f3n y quieres sacarle mayor provecho, <a href=\"/react/create-a-new-react-app\">en la pr\u00f3xima secci\u00f3n</a> se describen unas de las cadenas de herramientas m\u00e1s populares y accesibles. Dado el caso que no te sientas as\u00ed \u2014 esas etiquetas de script ser\u00e1n suficiente.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/add-react-to-a-website.md\">Edit this page</a></p></div></article>", "path": "/react/add-react-to-a-website", "nav": ["/react/getting-started", "/react/create-a-new-react-app"]}, {"key": "Crear una nueva aplicaci\u00f3n React", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Para obtener la mejor experiencia de usuario y desarrollador use una cadena de herramientas integrada.</p>\n<p>Esta p\u00e1gina describe algunas de las cadenas de herramientas de React m\u00e1s populares, las cuales ayudan con tareas como:</p>\n<ul>\n<li>Escalar a m\u00faltiples archivos y componentes.</li>\n<li>Usar bibliotecas de terceros desde npm.</li>\n<li>Detecci\u00f3n temprana de errores comunes.</li>\n<li>Edici\u00f3n en vivo de CSS y JS en desarrollo.</li>\n<li>Optimizaci\u00f3n de la salida para producci\u00f3n.</li>\n</ul>\n<p>Las cadenas de herramientas que se recomiendan en esta p\u00e1gina <strong>no requieren ninguna configuraci\u00f3n para empezar</strong>.</p>\n<h2 id=\"you-might-not-need-a-toolchain\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#you-might-not-need-a-toolchain\"></a>Puede que no necesites una cadena de herramientas </h2>\n<p>Si no experimentas los problemas descritos arriba, o a\u00fan no te sientes c\u00f3modo usando herramientas de Javascript, considera <a href=\"/react/add-react-to-a-website\">a\u00f1adir React como una etiqueta <code class=\"language-javascript\">&lt;script&gt;</code> en una p\u00e1gina HTML</a>, opcionalmente <a href=\"/react/add-react-to-a-website#optional-try-react-with-jsx\">con JSX</a>.</p>\n<p>Esta es tambi\u00e9n <strong>la manera m\u00e1s f\u00e1cil de integrar React en un sitio web existente.</strong> Siempre puedes a\u00f1adir una cadena de herramientas m\u00e1s grande si lo consideras \u00fatil!</p>\n<h2 id=\"recommended-toolchains\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#recommended-toolchains\"></a>Cadenas de herramientas recomendadas </h2>\n<p>El equipo de React principalmente recomienda las siguientes soluciones:</p>\n<ul>\n<li>Si est\u00e1s <strong>aprendiendo React</strong> o <strong>creando una nueva <a href=\"/react/glossary#single-page-application\">aplicaci\u00f3n de p\u00e1gina \u00fanica</a>,</strong> usa <a href=\"/react/create-a-new-react-app#create-react-app\">Create React App</a>.</li>\n<li>Si est\u00e1s construyendo un <strong>sitio web renderizado en servidor con Node.js,</strong> prueba <a href=\"/react/create-a-new-react-app#nextjs\">Next.js</a>.</li>\n<li>Si est\u00e1s construyendo un <strong>sitio web orientado a contenido est\u00e1tico,</strong> prueba <a href=\"/react/create-a-new-react-app#gatsby\">Gatsby</a>.</li>\n<li>Si est\u00e1s construyendo una <strong>biblioteca de componentes</strong> o <strong>integrando una base de c\u00f3digo existente</strong>, prueba <a href=\"/react/create-a-new-react-app#more-flexible-toolchains\">Cadenas de Herramientas m\u00e1s Flexibles</a>.</li>\n</ul>\n<h3 id=\"create-react-app\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#create-react-app\"></a>Create React App </h3>\n<p><a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a> es un ambiente c\u00f3modo para <strong>aprender React</strong>, y es la mejor manera de comenzar a construir <strong>una nueva <a href=\"/react/glossary#single-page-application\">aplicaci\u00f3n de p\u00e1gina \u00fanica</a></strong> usando React.</p>\n<p><strong>Create React App</strong> configura tu ambiente de desarrollo de forma que puedas usar las \u00faltimas caracter\u00edsticas de Javascript, brindando una buena experiencia de desarrollo, y optimizando tu aplicaci\u00f3n para producci\u00f3n. Necesitar\u00e1s tener <a class=\"external-link\" href=\"https://nodejs.org/en/\">Node &gt;= 14.0.0 y npm &gt;= 5.6</a> instalados en tu m\u00e1quina. Para crear un proyecto ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\">npx create-react-app my-app\n<span class=\"token builtin class-name\">cd</span> my-app\n<span class=\"token function\">npm</span> start</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>En la primera l\u00ednea <code class=\"language-javascript\">npx</code> no es un error de escritura: Es una <a class=\"external-link\" href=\"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\">herramienta de ejecuci\u00f3n de paquetes que viene con npm 5.2+</a>.</p>\n</div>\n<p>Create React App no se encarga de la l\u00f3gica de <code class=\"language-javascript\">backend</code> o de bases de datos; tan solo crea un flujo de construcci\u00f3n para <code class=\"language-javascript\">frontend</code>, de manera que lo puedes usar con cualquier <code class=\"language-javascript\">backend</code>. Para ello internamente usa <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a> y <a class=\"external-link\" href=\"https://webpack.js.org/\">webpack</a>, pero no necesitas saber nada de estas herramientas para usar Create React App.</p>\n<p>Cuando est\u00e9s listo para desplegar a producci\u00f3n, ejecuta <code class=\"language-javascript\">npm run build</code> lo cual crea una compilaci\u00f3n optimizada de tu aplicaci\u00f3n en el directorio <code class=\"language-javascript\">build</code>. Puedes aprender m\u00e1s acerca de <strong>Create React App</strong> <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app#create-react-app--\">en su archivo README</a> y en la <a class=\"external-link\" href=\"https://facebook.github.io/create-react-app/\">Gu\u00eda del Usuario</a>.</p>\n<h3 id=\"nextjs\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#nextjs\"></a>Next.js </h3>\n<p><a class=\"external-link\" href=\"https://nextjs.org/\">Next.js</a> es un <em>framework</em> popular y ligero para <strong>aplicaciones est\u00e1ticas y renderizadas en servidor</strong> construidas con React. Integra <strong>soluciones de estilo y enrutamiento</strong> y asume que est\u00e1s usando <a class=\"external-link\" href=\"https://nodejs.org/\">Node.js</a> como ambiente de servidor.</p>\n<p>Aprende Next.js de <a class=\"external-link\" href=\"https://nextjs.org/learn/\">su gu\u00eda oficial</a>.</p>\n<h3 id=\"gatsby\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#gatsby\"></a>Gatsby </h3>\n<p><a class=\"external-link\" href=\"https://www.gatsbyjs.org/\">Gatsby</a> es la mejor manera de crear <strong>sitios web est\u00e1ticos</strong> usando React. Te permite usar componentes React, pero genera HTML y CSS pre-renderizado para garantizar el tiempo de carga m\u00e1s r\u00e1pido.</p>\n<p>Aprende Gatsby de <a class=\"external-link\" href=\"https://www.gatsbyjs.org/docs/\">su gu\u00eda oficial</a> y de <a class=\"external-link\" href=\"https://www.gatsbyjs.org/docs/gatsby-starters/\">la galer\u00eda de kits de inicio</a>.</p>\n<h3 id=\"more-flexible-toolchains\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#more-flexible-toolchains\"></a>Cadenas de herramientas m\u00e1s flexibles </h3>\n<p>Las siguientes cadenas de herramientas ofrecen m\u00e1s opciones y flexibilidad. Las recomendamos para los usuarios con m\u00e1s experiencia:</p>\n<ul>\n<li><strong><a class=\"external-link\" href=\"https://neutrinojs.org/\">Neutrino</a></strong> combina el poder de <a class=\"external-link\" href=\"https://webpack.js.org/\">webpack</a> con la simplicidad de los <em>presets</em> (configuraciones preempaquetadas), e incluye <em>presets</em> para <a class=\"external-link\" href=\"https://neutrinojs.org/packages/react/\">aplicaciones React</a> y <a class=\"external-link\" href=\"https://neutrinojs.org/packages/react-components/\">componentes React</a>.</li>\n<li><strong><a class=\"external-link\" href=\"https://nx.dev/react\">Nx</a></strong> es un conjunto de herramientas para el desarrollo full-stack en monorepos, con compatibilidad incluida con React, Next.js, <a class=\"external-link\" href=\"https://expressjs.com/\">Express</a>, y m\u00e1s.</li>\n<li><strong><a class=\"external-link\" href=\"https://parceljs.org/\">Parcel</a></strong> es un empaquetador de aplicaciones web r\u00e1pido y de cero configuraci\u00f3n que <a class=\"external-link\" href=\"https://parceljs.org/recipes/react/\">funciona con React</a>.</li>\n<li><strong><a class=\"external-link\" href=\"https://github.com/jaredpalmer/razzle\">Razzle</a></strong> es un framework de renderizado en servidor que no requiere ninguna configuraci\u00f3n, pero ofrece m\u00e1s flexibilidad que Next.js.</li>\n</ul>\n<h2 id=\"creating-a-toolchain-from-scratch\"><a class=\"anchor\" href=\"/react/create-a-new-react-app#creating-a-toolchain-from-scratch\"></a>Creando una cadena de herramientas desde cero </h2>\n<p>Una cadena de herramientas para construir Javascript generalmente consiste de:</p>\n<ul>\n<li>Un <strong>gestor de paquetes</strong> como <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a> o <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>. Este te permite aprovechar el vasto ecosistema de paquetes de terceros, e instalarlos o actualizarlos de una manera f\u00e1cil.</li>\n<li>Un <strong>empaquetador</strong> como <a class=\"external-link\" href=\"https://webpack.js.org/\">webpack</a> o <a class=\"external-link\" href=\"https://parceljs.org/\">Parcel</a>. Este te permite escribir c\u00f3digo modular y empaquetarlo junto en paquetes m\u00e1s peque\u00f1os que optimizan el tiempo de carga.</li>\n<li>Un <strong>compilador</strong> como <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a>. Este te permite escribir Javascript moderno que a\u00fan as\u00ed funciona en navegadores m\u00e1s antiguos.</li>\n</ul>\n<p>Si prefieres configurar tu propia cadena de herramientas JavaScript desde cero, <a class=\"external-link\" href=\"https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658\">chequea esta gu\u00eda</a> que recrea parte de la funcionalidad de <strong>Create React App</strong>.</p>\n<p>No te olvides de asegurarte que tu cadena de herramientas est\u00e9 <a href=\"/react/optimizing-performance#use-the-production-build\">configurada apropiadamente para producci\u00f3n</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/create-a-new-react-app.md\">Edit this page</a></p></div></article>", "path": "/react/create-a-new-react-app", "nav": ["/react/add-react-to-a-website", "/react/cdn-links"]}, {"key": "CDN Links", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Ambos React y ReactDOM est\u00e1n disponibles a trav\u00e9s de un CDN.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@18/umd/react.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@18/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Las versiones anteriores son solo para el uso en desarrollo, y no son adecuadas para el uso en producci\u00f3n. Las versiones de React minimizadas y optimizadas para el uso en producci\u00f3n est\u00e1n disponibles en:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@18/umd/react.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@18/umd/react-dom.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Para usar una versi\u00f3n espec\u00edfica de <code class=\"language-javascript\">react</code> y <code class=\"language-javascript\">react-dom</code>, cambia el <code class=\"language-javascript\">18</code> con el n\u00famero de versi\u00f3n.</p>\n<h3 id=\"why-the-crossorigin-attribute\"><a class=\"anchor\" href=\"/react/cdn-links#why-the-crossorigin-attribute\"></a>\u00bfPor qu\u00e9 el atributo <code class=\"language-javascript\">crossorigin</code>? </h3>\n<p>Si utilizas React desde un CDN, nosotros recomendamos mantener el atributo <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/HTML/Atributos_de_configuracion_CORS\"><code class=\"language-javascript\">crossorigin</code></a> puesto:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Tambi\u00e9n recomendamos verificar que el CDN que est\u00e1s utilizando establece el encabezado HTTP <code class=\"language-javascript\">Access-Control-Allow-Origin: *</code>:</p>\n<p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/89baed0a6540f29e954065ce04661048/13ae7/cdn-cors-header.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/89baed0a6540f29e954065ce04661048/13ae7/cdn-cors-header.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>Esto permite una mejor <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2017/07/26/error-handling-in-react-16.html\">experiencia en el manejo de errores</a> en React 16 y versiones posteriores.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/cdn-links.md\">Edit this page</a></p></div></article>", "path": "/react/cdn-links", "nav": ["/react/create-a-new-react-app", "/react/release-channels"]}, {"key": "Canales de lanzamientos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React relies on a thriving open source community to file bug reports, open pull requests, and <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs\">submit RFCs</a>. To encourage feedback we sometimes share special builds of React that include unreleased features.</p>\n<div class=\"blockquote\">\n<strong>This document will be most relevant to developers who work on frameworks, libraries, or developer tooling. Developers who use React primarily to build user-facing applications should not need to worry about our prerelease channels.</strong>\n</div>\n<p>Each of React\u2019s release channels is designed for a distinct use case:</p>\n<ul>\n<li><a href=\"/react/release-channels#latest-channel\"><strong>Latest</strong></a> is for stable, semver React releases. It\u2019s what you get when you install React from npm. This is the channel you\u2019re already using today. <strong>Use this for all user-facing React applications.</strong></li>\n<li><a href=\"/react/release-channels#next-channel\"><strong>Next</strong></a> tracks the main branch of the React source code repository. Think of these as release candidates for the next minor semver release. Use this for integration testing between React and third party projects.</li>\n<li><a href=\"/react/release-channels#experimental-channel\"><strong>Experimental</strong></a> includes experimental APIs and features that aren\u2019t available in the stable releases. These also track the main branch, but with additional feature flags turned on. Use this to try out upcoming features before they are released.</li>\n</ul>\n<p>All releases are published to npm, but only Latest uses <a href=\"/react/faq-versioning\">semantic versioning</a>. Prereleases (those in the Next and Experimental channels) have versions generated from a hash of their contents and the commit date, e.g. <code class=\"language-javascript\">0.0.0-68053d940-20210623</code> for Next and <code class=\"language-javascript\">0.0.0-experimental-68053d940-20210623</code> for Experimental.</p>\n<p><strong>The only officially supported release channel for user-facing applications is Latest</strong>. Next and Experimental releases are provided for testing purposes only, and we provide no guarantees that behavior won\u2019t change between releases. They do not follow the semver protocol that we use for releases from Latest.</p>\n<p>By publishing prereleases to the same registry that we use for stable releases, we are able to take advantage of the many tools that support the npm workflow, like <a class=\"external-link\" href=\"https://unpkg.com\">unpkg</a> and <a class=\"external-link\" href=\"https://codesandbox.io\">CodeSandbox</a>.</p>\n<h3 id=\"latest-channel\"><a class=\"anchor\" href=\"/react/release-channels#latest-channel\"></a>Latest Channel </h3>\n<p>Latest is the channel used for stable React releases. It corresponds to the <code class=\"language-javascript\">latest</code> tag on npm. It is the recommended channel for all React apps that are shipped to real users.</p>\n<p><strong>If you\u2019re not sure which channel you should use, it\u2019s Latest.</strong> If you\u2019re a React developer, this is what you\u2019re already using.</p>\n<p>You can expect updates to Latest to be extremely stable. Versions follow the semantic versioning scheme. Learn more about our commitment to stability and incremental migration in our <a href=\"/react/faq-versioning\">versioning policy</a>.</p>\n<h3 id=\"next-channel\"><a class=\"anchor\" href=\"/react/release-channels#next-channel\"></a>Next Channel </h3>\n<p>The Next channel is a prerelease channel that tracks the main branch of the React repository. We use prereleases in the Next channel as release candidates for the Latest channel. You can think of Next as a superset of Latest that is updated more frequently.</p>\n<p>The degree of change between the most recent Next release and the most recent Latest release is approximately the same as you would find between two minor semver releases. However, <strong>the Next channel does not conform to semantic versioning.</strong> You should expect occasional breaking changes between successive releases in the Next channel.</p>\n<p><strong>Do not use prereleases in user-facing applications.</strong></p>\n<p>Releases in Next are published with the <code class=\"language-javascript\">next</code> tag on npm. Versions are generated from a hash of the build\u2019s contents and the commit date, e.g. <code class=\"language-javascript\">0.0.0-68053d940-20210623</code>.</p>\n<h4 id=\"using-the-next-channel-for-integration-testing\"><a class=\"anchor\" href=\"/react/release-channels#using-the-next-channel-for-integration-testing\"></a>Using the Next Channel for Integration Testing </h4>\n<p>The Next channel is designed to support integration testing between React and other projects.</p>\n<p>All changes to React go through extensive internal testing before they are released to the public. However, there are a myriad of environments and configurations used throughout the React ecosystem, and it\u2019s not possible for us to test against every single one.</p>\n<p>If you\u2019re the author of a third party React framework, library, developer tool, or similar infrastructure-type project, you can help us keep React stable for your users and the entire React community by periodically running your test suite against the most recent changes. If you\u2019re interested, follow these steps:</p>\n<ul>\n<li>Set up a cron job using your preferred continuous integration platform. Cron jobs are supported by both <a class=\"external-link\" href=\"https://circleci.com/docs/2.0/triggers/#scheduled-builds\">CircleCI</a> and <a class=\"external-link\" href=\"https://docs.travis-ci.com/user/cron-jobs/\">Travis CI</a>.</li>\n<li>\n<p>In the cron job, update your React packages to the most recent React release in the Next channel, using <code class=\"language-javascript\">next</code> tag on npm. Using the npm cli:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-console\"><code class=\"language-javascript\">npm update react@next react-dom@next</code></pre></div>\n<p>Or yarn:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-console\"><code class=\"language-javascript\">yarn upgrade react@next react-dom@next</code></pre></div>\n</li>\n<li>Run your test suite against the updated packages.</li>\n<li>If everything passes, great! You can expect that your project will work with the next minor React release.</li>\n<li>If something breaks unexpectedly, please let us know by <a class=\"external-link\" href=\"https://github.com/facebook/react/issues\">filing an issue</a>.</li>\n</ul>\n<p>A project that uses this workflow is Next.js. (No pun intended! Seriously!) You can refer to their <a class=\"external-link\" href=\"https://github.com/zeit/next.js/blob/c0a1c0f93966fe33edd93fb53e5fafb0dcd80a9e/.circleci/config.yml\">CircleCI configuration</a> as an example.</p>\n<h3 id=\"experimental-channel\"><a class=\"anchor\" href=\"/react/release-channels#experimental-channel\"></a>Experimental Channel </h3>\n<p>Like Next, the Experimental channel is a prerelease channel that tracks the main branch of the React repository. Unlike Next, Experimental releases include additional features and APIs that are not ready for wider release.</p>\n<p>Usually, an update to Next is accompanied by a corresponding update to Experimental. They are based on the same source revision, but are built using a different set of feature flags.</p>\n<p>Experimental releases may be significantly different than releases to Next and Latest. <strong>Do not use Experimental releases in user-facing applications.</strong> You should expect frequent breaking changes between releases in the Experimental channel.</p>\n<p>Releases in Experimental are published with the <code class=\"language-javascript\">experimental</code> tag on npm. Versions are generated from a hash of the build\u2019s contents and the commit date, e.g. <code class=\"language-javascript\">0.0.0-experimental-68053d940-20210623</code>.</p>\n<h4 id=\"what-goes-into-an-experimental-release\"><a class=\"anchor\" href=\"/react/release-channels#what-goes-into-an-experimental-release\"></a>What Goes Into an Experimental Release? </h4>\n<p>Experimental features are ones that are not ready to be released to the wider public, and may change drastically before they are finalized. Some experiments may never be finalized \u2014 the reason we have experiments is to test the viability of proposed changes.</p>\n<p>For example, if the Experimental channel had existed when we announced Hooks, we would have released Hooks to the Experimental channel weeks before they were available in Latest.</p>\n<p>You may find it valuable to run integration tests against Experimental. This is up to you. However, be advised that Experimental is even less stable than Next. <strong>We do not guarantee any stability between Experimental releases.</strong></p>\n<h4 id=\"how-can-i-learn-more-about-experimental-features\"><a class=\"anchor\" href=\"/react/release-channels#how-can-i-learn-more-about-experimental-features\"></a>How Can I Learn More About Experimental Features? </h4>\n<p>Experimental features may or may not be documented. Usually, experiments aren\u2019t documented until they are close to shipping in Next or Latest.</p>\n<p>If a feature is not documented, they may be accompanied by an <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs\">RFC</a>.</p>\n<p>We will post to the <a class=\"external-link\" href=\"https://es.reactjs.org//blog\">React blog</a> when we\u2019re ready to announce new experiments, but that doesn\u2019t mean we will publicize every experiment.</p>\n<p>You can always refer to our public GitHub repository\u2019s <a class=\"external-link\" href=\"https://github.com/facebook/react/commits/main\">history</a> for a comprehensive list of changes.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/release-channels.md\">Edit this page</a></p></div></article>", "path": "/react/release-channels", "nav": ["/react/cdn-links", "/react/hello-world"]}]}, {"key": "Conceptos principales", "values": [{"key": "1. Hola mundo", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>El m\u00e1s peque\u00f1o de los ejemplos de React se ve as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Este muestra un encabezado con el texto \u201cHello, world!\u201d en la p\u00e1gina.</p>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/rrpgNB?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Dale click al enlace de arriba para abrir un editor online. T\u00f3mate la libertad de hacer cambios, y mira c\u00f3mo afectan el resultado. La mayor\u00eda de p\u00e1ginas en esta gu\u00eda tendr\u00e1n ejemplos que puedes editar en vivo como \u00e9ste.</p>\n<h2 id=\"how-to-read-this-guide\"><a class=\"anchor\" href=\"/react/hello-world#how-to-read-this-guide\"></a>\u00bfC\u00f3mo leer esta gu\u00eda? </h2>\n<p>En esta gu\u00eda, examinaremos los componentes b\u00e1sicos de las aplicaciones React: elementos y componentes. Una vez los domines, podr\u00e1s crear aplicaciones complejas a partir de peque\u00f1as piezas reutilizables.</p>\n<div class=\"blockquote\">\n<strong>Tip</strong>\n<p>Esta gu\u00eda est\u00e1 dise\u00f1ada para personas que prefieren <strong>aprender los conceptos paso a paso</strong>. Si prefieres aprender mediante pr\u00e1ctica, revisa nuestro <a class=\"external-link\" href=\"https://es.reactjs.org//tutorial/tutorial.html\">tutorial pr\u00e1ctico</a>. Encontrar\u00e1s que esta gu\u00eda y el tutorial se complementan el uno al otro.</p>\n</div>\n<p>Este es el primer cap\u00edtulo en una gu\u00eda paso a paso sobre los principales conceptos de React. Puedes encontrar una lista de todos los cap\u00edtulos en la barra de navegaci\u00f3n lateral. Si est\u00e1s leyendo esto desde un dispositivo m\u00f3vil, puedes acceder a la navegaci\u00f3n presionando el bot\u00f3n en la esquina inferior derecha de tu pantalla.</p>\n<p>Cada cap\u00edtulo en esta gu\u00eda se construye con base en el conocimiento presentado en cap\u00edtulos anteriores. <strong>Puedes aprender la mayor\u00eda de React leyendo la gu\u00eda de conceptos \u201cConceptos Principales\u201d en el orden que aparecen en la barra lateral.</strong> Por ejemplo, <a href=\"/react/introducing-jsx\">\u201cIntroducci\u00f3n a JSX\u201d</a> es el siguiente cap\u00edtulo despu\u00e9s de este.</p>\n<h2 id=\"knowledge-level-assumptions\"><a class=\"anchor\" href=\"/react/hello-world#knowledge-level-assumptions\"></a>Suposiciones del nivel de conocimiento </h2>\n<p>React es una biblioteca Javascript, y vamos a asumir que tienes un entendimiento b\u00e1sico del lenguaje Javascript. <strong>Si no te sientes muy seguro, te recomendamos <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Una_re-introducci%C3%B3n_a_JavaScript\">hacer un tutorial de Javascript</a> para comprobar tu nivel de conocimiento</strong> y permitirte seguir adelante con esta gu\u00eda sin perderte. Te deber\u00eda tomar entre 30 minutos y una hora, pero como resultado, no tendr\u00e1s que sentir que est\u00e1s aprendiendo React y JavaScript al mismo tiempo.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Esta gu\u00eda ocasionalmente usa la nueva sintaxis de JavaScript en los ejemplos. Si no has trabajado con JavaScript en los \u00faltimos a\u00f1os, <a class=\"external-link\" href=\"https://gist.github.com/gaearon/683e676101005de0add59e8bb345340c\">estos tres puntos</a> son un buen resumen.</p>\n</div>\n<h2 id=\"lets-get-started\"><a class=\"anchor\" href=\"/react/hello-world#lets-get-started\"></a>\u00a1Empecemos! </h2>\n<p>Sigue bajando, y encontrar\u00e1s el link al <a href=\"/react/introducing-jsx\">siguiente cap\u00edtulo de esta gu\u00eda</a> justo antes del pie de la p\u00e1gina.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/hello-world.md\">Edit this page</a></p></div></article>", "path": "/react/hello-world", "nav": ["/react/release-channels", "/react/introducing-jsx"]}, {"key": "2. Presentando JSX", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Considera la declaraci\u00f3n de esta variable:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esta curiosa sintaxis de etiquetas no es ni un string ni HTML.</p>\n<p>Se llama JSX, y es una extensi\u00f3n de la sintaxis de JavaScript. Recomendamos usarlo con React para describir c\u00f3mo deber\u00eda ser la interfaz de usuario. JSX puede recordarte a un lenguaje de plantillas, pero viene con todo el poder de JavaScript.</p>\n<p>JSX produce \u201celementos\u201d de React. Exploraremos como renderizarlos en el DOM en la <a href=\"/react/rendering-elements\">siguiente secci\u00f3n</a>. A continuaci\u00f3n puedes encontrar lo b\u00e1sico de JSX que ser\u00e1 necesario para empezar.</p>\n<h3 id=\"why-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#why-jsx\"></a>\u00bfPor qu\u00e9 JSX? </h3>\n<p>React acepta el hecho de que la l\u00f3gica de renderizado est\u00e1 intr\u00ednsecamente unida a la l\u00f3gica de la interfaz de usuario: c\u00f3mo se manejan los eventos, c\u00f3mo cambia el estado con el tiempo y c\u00f3mo se preparan los datos para su visualizaci\u00f3n.</p>\n<p>En lugar de separar artificialmente <em>tecnolog\u00edas</em> poniendo el maquetado y la l\u00f3gica en archivos separados, React <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/Separaci%C3%B3n_de_intereses\">separa <em>intereses</em></a> con unidades ligeramente acopladas llamadas \u201ccomponentes\u201d que contienen ambas. Volveremos a los componentes en <a href=\"/react/components-and-props\">otra secci\u00f3n</a>, pero si a\u00fan no te sientes c\u00f3modo maquetando en JS, <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\">esta charla</a> podr\u00eda convencerte de lo contrario.</p>\n<p>React <a href=\"/react/react-without-jsx\">no requiere</a> usar JSX, pero la mayor\u00eda de la gente lo encuentra \u00fatil como ayuda visual cuando trabajan con interfaz de usuario dentro del c\u00f3digo Javascript. Esto tambi\u00e9n permite que React muestre mensajes de error o advertencia m\u00e1s \u00fatiles.</p>\n<p>Con eso fuera del camino, \u00a1empecemos!</p>\n<h3 id=\"embedding-expressions-in-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#embedding-expressions-in-jsx\"></a>Insertando expresiones en JSX </h3>\n<p>En el ejemplo a continuaci\u00f3n, declaramos una variable llamada <code class=\"language-javascript\">name</code> y luego la usamos dentro del JSX envolvi\u00e9ndola dentro de llaves:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Josh Perez'</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Puedes poner cualquier <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Expressions_and_Operators\">expresi\u00f3n de JavaScript</a> dentro de llaves en JSX. Por ejemplo, <code class=\"language-javascript\">2 + 2</code>, <code class=\"language-javascript\">user.firstName</code>, o <code class=\"language-javascript\">formatName(user)</code> son todas expresiones v\u00e1lidas de Javascript.</p>\n<p>En el ejemplo a continuaci\u00f3n, insertamos el resultado de llamar la funci\u00f3n de JavaScript, <code class=\"language-javascript\">formatName(user)</code>, dentro de un elemento <code class=\"language-javascript\">&lt;h1&gt;</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Harper'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Perez'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    Hello, </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span></span><span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/PGEjdG?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Dividimos JSX en varias l\u00edneas para facilitar la lectura. Aunque no es necesario, cuando hagas esto tambi\u00e9n te recomendamos envolverlo entre par\u00e9ntesis para evitar errores por la <a class=\"external-link\" href=\"https://stackoverflow.com/q/2846283\">inserci\u00f3n autom\u00e1tica del punto y coma</a>.</p>\n<h3 id=\"jsx-is-an-expression-too\"><a class=\"anchor\" href=\"/react/introducing-jsx#jsx-is-an-expression-too\"></a>JSX tambi\u00e9n es una expresi\u00f3n </h3>\n<p>Despu\u00e9s de compilarse, las expresiones JSX se convierten en llamadas a funciones JavaScript regulares y se eval\u00faan en objetos JavaScript.</p>\n<p>Esto significa que puedes usar JSX dentro de declaraciones <code class=\"language-javascript\">if</code> y bucles <code class=\"language-javascript\">for</code>, asignarlo a variables, aceptarlo como argumento, y retornarlo desde dentro de funciones:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getGreeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, Stranger.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"specifying-attributes-with-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#specifying-attributes-with-jsx\"></a>Especificando atributos con JSX </h3>\n<p>Puedes utilizar comillas para especificar strings literales como atributos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.reactjs.org<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> link </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tambi\u00e9n puedes usar llaves para insertar una expresi\u00f3n JavaScript en un atributo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>img</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No pongas comillas rodeando llaves cuando insertes una expresi\u00f3n JavaScript en un atributo. Debes utilizar comillas (para los valores de los strings) o llaves (para las expresiones), pero no ambas en el mismo atributo.</p>\n<div class=\"blockquote\">\n<strong>Advertencia:</strong>\n<p>Dado que JSX es m\u00e1s cercano a JavaScript que a HTML, React DOM usa la convenci\u00f3n de nomenclatura <code class=\"language-javascript\">camelCase</code> en vez de nombres de atributos HTML.</p>\n<p>Por ejemplo, <code class=\"language-javascript\">class</code> se vuelve <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/API/Element/className\"><code class=\"language-javascript\">className</code></a> en JSX, y <code class=\"language-javascript\">tabindex</code> se vuelve <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/API/HTMLElement/tabIndex\"><code class=\"language-javascript\">tabIndex</code></a>.</p>\n</div>\n<h3 id=\"specifying-children-with-jsx\"><a class=\"anchor\" href=\"/react/introducing-jsx#specifying-children-with-jsx\"></a>Especificando hijos con JSX </h3>\n<p>Si una etiqueta est\u00e1 vac\u00eda, puedes cerrarla inmediatamente con <code class=\"language-javascript\">/&gt;</code>, como en XML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Las etiquetas de Javascript pueden contener hijos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Good to see you here.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"jsx-prevents-injection-attacks\"><a class=\"anchor\" href=\"/react/introducing-jsx#jsx-prevents-injection-attacks\"></a>JSX previene ataques de inyecci\u00f3n </h3>\n<p>Es seguro insertar datos ingresados por el usuario en JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>potentiallyMaliciousInput<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Esto es seguro:</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Por defecto, React DOM <a class=\"external-link\" href=\"https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html\">escapa</a> cualquier valor insertado en JSX antes de renderizarlo. De este modo, se asegura de que nunca se pueda insertar nada que no est\u00e9 expl\u00edcitamente escrito en t\u00fa aplicaci\u00f3n. Todo es convertido en un string antes de ser renderizado. Esto ayuda a prevenir vulnerabilidades <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/Cross-site_scripting\">XSS (cross-site-scripting)</a>.</p>\n<h3 id=\"jsx-represents-objects\"><a class=\"anchor\" href=\"/react/introducing-jsx#jsx-represents-objects\"></a>JSX representa objetos </h3>\n<p>Babel compila JSX a llamadas de <code class=\"language-javascript\">React.createElement()</code>.</p>\n<p>Estos dos ejemplos son id\u00e9nticos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    Hello, world!\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'greeting'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Hello, world!'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">React.createElement()</code> realiza algunas comprobaciones para ayudarte a escribir c\u00f3digo libre de errores, pero, en esencia crea un objeto como este:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Nota: Esta estructura est\u00e1 simplificada</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'greeting'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello, world!'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Estos objetos son llamados \u201cElementos de React\u201d. Puedes pensar en ellos como descripciones de lo que quieres ver en pantalla. React lee estos objetos y los usa para construir el DOM y mantenerlo actualizado.</p>\n<p>Vamos a explorar el renderizado de los elementos de React al DOM en la <a href=\"/react/rendering-elements\">siguiente secci\u00f3n</a>.</p>\n<div class=\"blockquote\">\n<strong>Tip:</strong>\n<p>Recomendamos usar la <a class=\"external-link\" href=\"https://babeljs.io/docs/en/next/editors\">Definici\u00f3n del lenguaje en \u201cBabel\u201d</a> en tu editor de elecci\u00f3n para que tanto el c\u00f3digo en ES6 como el c\u00f3digo en JSX sea resaltado apropiadamente.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/introducing-jsx.md\">Edit this page</a></p></div></article>", "path": "/react/introducing-jsx", "nav": ["/react/hello-world", "/react/rendering-elements"]}, {"key": "3. Renderizando elementos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los elementos son los bloques m\u00e1s peque\u00f1os de las aplicaciones de React.</p>\n<p>Un elemento describe lo que quieres ver en la pantalla:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A diferencia de los elementos del DOM de los navegadores, los elementos de React son objetos planos, y su creaci\u00f3n es de bajo costo. React DOM se encarga de actualizar el DOM para igualar los elementos de React.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Uno podr\u00eda confundir los elementos con el muy conocido concepto de \u201ccomponentes\u201d. En la <a href=\"/react/components-and-props\">siguiente secci\u00f3n</a> hablaremos de componentes. Los elementos son los que \u201cconstituyen\u201d los componentes, y recomendamos leer esta secci\u00f3n antes de continuar.</p>\n</div>\n<h2 id=\"rendering-an-element-into-the-dom\"><a class=\"anchor\" href=\"/react/rendering-elements#rendering-an-element-into-the-dom\"></a>Renderizando un elemento en el DOM </h2>\n<p>Digamos que hay un <code class=\"language-javascript\">&lt;div&gt;</code> en alguna parte de tu archivo HTML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Lo llamamos un nodo \u201cra\u00edz\u201d porque todo lo que est\u00e9 dentro de \u00e9l ser\u00e1 manejado por React DOM.</p>\n<p>Las aplicaciones construidas solamente con React usualmente tienen un \u00fanico nodo ra\u00edz en el DOM. Dado el caso que est\u00e9s integrando React en una aplicaci\u00f3n existente, puedes tener tantos nodos ra\u00edz del DOM aislados como quieras.</p>\n<p>Para renderizar un elemento de React, primero pasamos el elemento del DOM a <a href=\"/react/react-dom-client#createroot\"><code class=\"language-javascript\">ReactDOM.createRoot()</code></a>, luego pasamos el elemento de React a <code class=\"language-javascript\">root.render()</code>:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ZpvBNJ?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Esto muestra \u201cHello, world\u201d en la p\u00e1gina.</p>\n<h2 id=\"updating-the-rendered-element\"><a class=\"anchor\" href=\"/react/rendering-elements#updating-the-rendered-element\"></a>Actualizando el elemento renderizado </h2>\n<p>Los elementos de React son <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/Objeto_inmutable\">inmutables</a>. Una vez creas un elemento, no puedes cambiar sus hijos o atributos. Un elemento es como un fotograma solitario en una pel\u00edcula: este representa la interfaz de usuario en cierto punto en el tiempo.</p>\n<p>Con nuestro conocimiento hasta este punto, la \u00fanica manera de actualizar la interfaz de usuario es creando un nuevo elemento, y pasarlo a <code class=\"language-javascript\">root.render()</code>.</p>\n<p>Considera este ejemplo de un reloj en marcha:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwoJZk?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Este llama a <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">root.render()</code></a> cada segundo desde un callback del <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\"><code class=\"language-javascript\">setInterval()</code></a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>En la pr\u00e1ctica, la mayor\u00eda de las aplicaciones de React solo llaman a <code class=\"language-javascript\">root.render()</code> una vez. En las siguientes secciones aprenderemos c\u00f3mo el c\u00f3digo se puede encapsular en <a href=\"/react/state-and-lifecycle\">componentes con estado</a>.</p>\n<p>Recomendamos que no te saltes ning\u00fan tema porque estos se relacionan entre ellos.</p>\n</div>\n<h2 id=\"react-only-updates-whats-necessary\"><a class=\"anchor\" href=\"/react/rendering-elements#react-only-updates-whats-necessary\"></a>React solo actualiza lo que es necesario </h2>\n<p>React DOM compara el elemento y sus hijos con el elemento anterior, y solo aplica las actualizaciones del DOM que son necesarias para que el DOM est\u00e9 en el estado deseado.</p>\n<p>Puedes verificar esto inspeccionando el <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwoJZk?editors=1010\">\u00faltimo ejemplo</a> con las herramientas del navegador:</p>\n<p><a class=\"external-link\" href=\"https://es.reactjs.org//c158617ed7cc0eac8f58330e49e48224/granular-dom-updates.gif\">Image link</a></p>\n<p>Aunque creamos un elemento que describe el \u00e1rbol de la interfaz de usuario en su totalidad en cada instante, React DOM solo actualiza el texto del nodo cuyo contenido cambi\u00f3.</p>\n<p>En nuestra experiencia, pensar en c\u00f3mo la interfaz de usuario deber\u00eda verse en un momento dado y no en c\u00f3mo cambiarla en el tiempo, elimina toda una clase de errores.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/rendering-elements.md\">Edit this page</a></p></div></article>", "path": "/react/rendering-elements", "nav": ["/react/introducing-jsx", "/react/components-and-props"]}, {"key": "4. Componentes y propiedades", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los componentes permiten separar la interfaz de usuario en piezas independientes, reutilizables y pensar en cada pieza de forma aislada. Esta p\u00e1gina proporciona una introducci\u00f3n a la idea de los componentes.\nPuedes encontrar una <a href=\"/react/react-component\">API detallada sobre componentes aqu\u00ed</a>.</p>\n<p>Conceptualmente, los componentes son como las funciones de JavaScript. Aceptan entradas arbitrarias (llamadas \u201cprops\u201d) y retornan elementos de React que describen lo que debe aparecer en la pantalla.</p>\n<h2 id=\"function-and-class-components\"><a class=\"anchor\" href=\"/react/components-and-props#function-and-class-components\"></a>Componentes funcionales y de clase </h2>\n<p>La forma m\u00e1s sencilla de definir un componente es escribir una funci\u00f3n de JavaScript:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esta funci\u00f3n es un componente de React v\u00e1lido porque acepta un solo argumento de objeto \u201cprops\u201d (que proviene de propiedades) con datos y devuelve un elemento de React. Llamamos a dichos componentes \u201cfuncionales\u201d porque literalmente son funciones JavaScript.</p>\n<p>Tambi\u00e9n puedes utilizar una <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Classes\">clase de ES6</a> para definir un componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los dos componentes anteriores son equivalentes desde el punto de vista de React.</p>\n<p>Tanto los componentes de funci\u00f3n como de clase tienen algunas caracter\u00edsticas adicionales que veremos en las <a href=\"/react/state-and-lifecycle\">pr\u00f3ximas secciones</a>.</p>\n<h2 id=\"rendering-a-component\"><a class=\"anchor\" href=\"/react/components-and-props#rendering-a-component\"></a>Renderizando un componente </h2>\n<p>Anteriormente, s\u00f3lo encontramos elementos de React que representan las etiquetas del DOM:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sin embargo, los elementos tambi\u00e9n pueden representar componentes definidos por el usuario:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cuando React ve un elemento representando un componente definido por el usuario, pasa atributos JSX e hijos a este componente como un solo objeto. Llamamos a este objeto \u201cprops\u201d.</p>\n<p>Por ejemplo, este c\u00f3digo muestra \u201cHello, Sara\u201d en la p\u00e1gina:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/YGYmEG?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Recapitulemos lo que sucede en este ejemplo:</p>\n<ol>\n<li>Llamamos a <code class=\"language-javascript\">root.render()</code> con el elemento <code class=\"language-javascript\">&lt;Welcome name=\"Sara\" /&gt;</code>.</li>\n<li>React llama al componente <code class=\"language-javascript\">Welcome</code> con <code class=\"language-javascript\">{name: 'Sara'}</code> como \u201cprops\u201d.</li>\n<li>Nuestro componente <code class=\"language-javascript\">Welcome</code> devuelve un elemento <code class=\"language-javascript\">&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code> como resultado.</li>\n<li>React DOM actualiza eficientemente el DOM para que coincida con <code class=\"language-javascript\">&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>.</li>\n</ol>\n<div class=\"blockquote\">\n<strong>Nota: Comienza siempre los nombres de componentes con una letra may\u00fascula.</strong>\n<p>React trata los componentes que empiezan con letras min\u00fasculas como etiquetas del DOM. Por ejemplo, <code class=\"language-javascript\">&lt;div /&gt;</code> representa una etiqueta div HTML pero <code class=\"language-javascript\">&lt;Welcome /&gt;</code> representa un componente y requiere que <code class=\"language-javascript\">Welcome</code> est\u00e9 definido.</p>\n<p>Para saber m\u00e1s sobre el razonamiento detr\u00e1s de esta convenci\u00f3n, puedes consultar <a href=\"/react/jsx-in-depth#user-defined-components-must-be-capitalized\">JSX en profundidad</a>.</p>\n</div>\n<h2 id=\"composing-components\"><a class=\"anchor\" href=\"/react/components-and-props#composing-components\"></a>Composici\u00f3n de componentes </h2>\n<p>Los componentes pueden referirse a otros componentes en su salida. Esto nos permite utilizar la misma abstracci\u00f3n de componente para cualquier nivel de detalle. Un bot\u00f3n, un cuadro de di\u00e1logo, un formulario, una pantalla: en aplicaciones de React, todos son expresados com\u00fanmente como componentes.</p>\n<p>Por ejemplo, podemos crear un componente <code class=\"language-javascript\">App</code> que renderiza <code class=\"language-javascript\">Welcome</code> muchas veces:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Cahal<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Edite<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/KgQKPr?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Por lo general, las aplicaciones de React nuevas tienen un \u00fanico componente <code class=\"language-javascript\">App</code> en lo m\u00e1s alto. Sin embargo, si se integra React en una aplicaci\u00f3n existente, se podr\u00eda empezar de abajo hacia arriba con un peque\u00f1o componente como <code class=\"language-javascript\">Button</code> y poco a poco trabajar el camino a la cima de la jerarqu\u00eda de la vista.</p>\n<h2 id=\"extracting-components\"><a class=\"anchor\" href=\"/react/components-and-props#extracting-components\"></a>Extracci\u00f3n de componentes </h2>\n<p>No tengas miedo de dividir los componentes en otros m\u00e1s peque\u00f1os.</p>\n<p>Por ejemplo, considera este componente <code class=\"language-javascript\">Comment</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Avatar<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo-name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/VKQwEo?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Acepta <code class=\"language-javascript\">author</code> (un objeto), <code class=\"language-javascript\">text</code> (un string), y <code class=\"language-javascript\">date</code> (una fecha) como props, y describe un comentario en una web de redes sociales.</p>\n<p>Este componente puede ser dif\u00edcil de cambiar debido a todo el anidamiento, y tambi\u00e9n es dif\u00edcil reutilizar partes individuales de \u00e9l. Vamos a extraer algunos componentes del mismo.</p>\n<p>Primero, vamos a extraer <code class=\"language-javascript\">Avatar</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Avatar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Avatar<span class=\"token punctuation\">\"</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatarUrl<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El <code class=\"language-javascript\">Avatar</code> no necesita saber que est\u00e1 siendo renderizado dentro de un <code class=\"language-javascript\">Comment</code>. Esto es por lo que le dimos a su propiedad un nombre m\u00e1s gen\u00e9rico: <code class=\"language-javascript\">user</code> en vez de <code class=\"language-javascript\">author</code>.</p>\n<p>Recomendamos nombrar las props desde el punto de vista del componente, en vez de la del contexto en el que se va a utilizar.</p>\n<p>Ahora podemos simplificar <code class=\"language-javascript\">Comment</code> un poquito:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo-name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A continuaci\u00f3n, vamos a extraer un componente <code class=\"language-javascript\">UserInfo</code> que renderiza un <code class=\"language-javascript\">Avatar</code> al lado del nombre del usuario:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">UserInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserInfo-name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto nos permite simplificar <code class=\"language-javascript\">Comment</code> a\u00fan m\u00e1s:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserInfo</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Comment-date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/rrJNJY?editors=1010\">Try it on CodePen</a></strong></p>\n<p>Extraer componentes puede parecer un trabajo pesado al principio, pero tener una paleta de componentes reutilizables vale la pena en aplicaciones m\u00e1s grandes. Una buena regla en general, es que si una parte de su interfaz de usuario se usa varias veces (<code class=\"language-javascript\">Button</code>, <code class=\"language-javascript\">Panel</code>, <code class=\"language-javascript\">Avatar</code>), o es lo suficientemente compleja por s\u00ed misma (<code class=\"language-javascript\">App</code>, <code class=\"language-javascript\">FeedStory</code>, <code class=\"language-javascript\">Comment</code>), es buen candidato para extraerse en un componente independiente.</p>\n<h2 id=\"props-are-read-only\"><a class=\"anchor\" href=\"/react/components-and-props#props-are-read-only\"></a>Las props son de solo lectura </h2>\n<p>Ya sea que declares un componente <a href=\"/react/components-and-props#function-and-class-components\">como una funci\u00f3n o como una clase</a>, este nunca debe modificar sus props. Considera esta funci\u00f3n <code class=\"language-javascript\">sum</code> :</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tales funciones son llamadas <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/Programaci%C3%B3n_funcional#Funciones_puras\">\u201cpuras\u201d</a> porque no tratan de cambiar sus entradas, y siempre devuelven el mismo resultado para las mismas entradas.</p>\n<p>En contraste, esta funci\u00f3n es impura porque cambia su propia entrada:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">account<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  account<span class=\"token punctuation\">.</span>total <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React es bastante flexible pero tiene una sola regla estricta:</p>\n<p><strong>Todos los componentes de React deben actuar como funciones puras con respecto a sus props.</strong></p>\n<p>Por supuesto, las interfaces de usuario de las aplicaciones son din\u00e1micas y cambian con el tiempo. En la <a href=\"/react/state-and-lifecycle\">siguiente secci\u00f3n</a>, introduciremos un nuevo concepto de \u201cestado\u201d. El estado le permite a los componentes de React cambiar su salida a lo largo del tiempo en respuesta a acciones del usuario, respuestas de red y cualquier otra cosa, sin violar esta regla.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/components-and-props.md\">Edit this page</a></p></div></article>", "path": "/react/components-and-props", "nav": ["/react/rendering-elements", "/react/state-and-lifecycle"]}, {"key": "5. Estado y ciclo de vida", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Esta p\u00e1gina introduce el concepto de estado y ciclo de vida en un componente de React. Puedes encontrar una <a href=\"/react/react-component\">referencia detallada de la API de un componente aqu\u00ed</a>.</p>\n<p>Consideremos el ejemplo del reloj de <a href=\"/react/rendering-elements#updating-the-rendered-element\">una de las secciones anteriores</a>. En <a href=\"/react/rendering-elements#rendering-an-element-into-the-dom\">Renderizando elementos</a>, aprendimos solo una forma de actualizar la interfaz de usuario. Invocamos a <code class=\"language-javascript\">root.render()</code> para que cambie el resultado renderizado.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwoJZk?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>En esta secci\u00f3n, aprenderemos como hacer al componente <code class=\"language-javascript\">Clock</code> verdaderamente reutilizable y encapsulado. Configurar\u00e1s tu propio temporizador y se actualizar\u00e1 cada segundo.</p>\n<p>Podemos comenzar por encapsular c\u00f3mo se ve el reloj:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token attr-name\">date</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/dpdoYR?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Sin embargo, se pierde un requisito crucial: el hecho de que <code class=\"language-javascript\">Clock</code> configure un temporizador y actualice la interfaz de usuario cada segundo debe ser un detalle de implementaci\u00f3n de <code class=\"language-javascript\">Clock</code>.</p>\n<p>Idealmente, queremos escribir esto una vez y que <code class=\"language-javascript\">Clock</code> se actualice a s\u00ed mismo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para implementar esto, necesitamos agregar \u00abestado\u00bb al componente <code class=\"language-javascript\">Clock</code>.</p>\n<p>El estado es similar a las props, pero es privado y est\u00e1 completamente controlado por el componente.</p>\n<h2 id=\"converting-a-function-to-a-class\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#converting-a-function-to-a-class\"></a>Convertir una funci\u00f3n en una clase </h2>\n<p>Se puede convertir un componente de funci\u00f3n como <code class=\"language-javascript\">Clock</code> en una clase en cinco pasos:</p>\n<ol>\n<li>Crear una <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Classes\">clase ES6</a> con el mismo nombre que herede de <code class=\"language-javascript\">React.Component</code>.</li>\n<li>Agregar un \u00fanico m\u00e9todo vac\u00edo llamado <code class=\"language-javascript\">render()</code>.</li>\n<li>Mover el cuerpo de la funci\u00f3n al m\u00e9todo <code class=\"language-javascript\">render()</code>.</li>\n<li>Reemplazar <code class=\"language-javascript\">props</code> con <code class=\"language-javascript\">this.props</code> en el cuerpo de <code class=\"language-javascript\">render()</code>.</li>\n<li>Borrar el resto de la declaraci\u00f3n de la funci\u00f3n ya vac\u00eda.</li>\n</ol>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/zKRGpo?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p><code class=\"language-javascript\">Clock</code> ahora se define como una clase en lugar de una funci\u00f3n.</p>\n<p>El m\u00e9todo <code class=\"language-javascript\">render</code> se invocar\u00e1 cada vez que ocurre una actualizaci\u00f3n; pero, siempre y cuando rendericemos <code class=\"language-javascript\">&lt;Clock /&gt;</code> en el mismo nodo del DOM, se usar\u00e1 solo una \u00fanica instancia de la clase <code class=\"language-javascript\">Clock</code>. Esto nos permite utilizar caracter\u00edsticas adicionales como el estado local y los m\u00e9todos de ciclo de vida.</p>\n<h2 id=\"adding-local-state-to-a-class\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#adding-local-state-to-a-class\"></a>Agregar estado local a una clase </h2>\n<p>Moveremos <code class=\"language-javascript\">date</code> de las props hacia el estado en tres pasos:</p>\n<ol>\n<li>Reemplazar <code class=\"language-javascript\">this.props.date</code> con <code class=\"language-javascript\">this.state.date</code> en el m\u00e9todo <code class=\"language-javascript\">render()</code>:</li>\n</ol>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>A\u00f1adir un <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Classes#Constructor\">constructor de clase</a> que asigne el <code class=\"language-javascript\">this.state</code> inicial:</li>\n</ol>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nota c\u00f3mo pasamos <code class=\"language-javascript\">props</code> al constructor base:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los componentes de clase siempre deben invocar al constructor base con <code class=\"language-javascript\">props</code>.</p>\n<ol>\n<li>Eliminar la prop <code class=\"language-javascript\">date</code> del elemento <code class=\"language-javascript\">&lt;Clock /&gt;</code>:</li>\n</ol>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Posteriormente regresaremos el c\u00f3digo del temporizador al propio componente.</p>\n<p>El resultado es el siguiente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/KgQpJd?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>A continuaci\u00f3n, haremos que <code class=\"language-javascript\">Clock</code> configure su propio temporizador y se actualice cada segundo.</p>\n<h2 id=\"adding-lifecycle-methods-to-a-class\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#adding-lifecycle-methods-to-a-class\"></a>Agregar m\u00e9todos de ciclo de vida a una clase </h2>\n<p>En aplicaciones con muchos componentes, es muy importante liberar recursos tomados por los componentes cuando se destruyen.</p>\n<p>Queremos <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/API/WindowTimers/setInterval\">configurar un temporizador</a> cada vez que <code class=\"language-javascript\">Clock</code> se renderice en el DOM por primera vez. Esto se llama \u00abmontaje\u00bb en React.</p>\n<p>Tambi\u00e9n queremos <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/API/WindowTimers/clearInterval\">borrar ese temporizador</a> cada vez que el DOM producido por <code class=\"language-javascript\">Clock</code> se elimine. Esto se llama \u00abdesmontaje\u00bb en React.</p>\n<p>Podemos declarar m\u00e9todos especiales en la clase del componente para ejecutar alg\u00fan c\u00f3digo cuando un componente se monta y desmonta:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Estos m\u00e9todos son llamados \u00abm\u00e9todos de ciclo de vida\u00bb.</p>\n<p>El m\u00e9todo <code class=\"language-javascript\">componentDidMount()</code> se ejecuta despu\u00e9s que la salida del componente ha sido renderizada en el DOM. Este es un buen lugar para configurar un temporizador:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token number\">1000</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nota como guardamos el ID del temporizador en <code class=\"language-javascript\">this</code> (<code class=\"language-javascript\">this.timerID</code>).</p>\n<p>Si bien <code class=\"language-javascript\">this.props</code> es configurado por el mismo React y <code class=\"language-javascript\">this.state</code> tiene un significado especial, eres libre de a\u00f1adir campos adicionales a la clase manualmente si necesitas almacenar algo que no participa en el flujo de datos (como el ID de un temporizador).</p>\n<p>Eliminaremos el temporizador en el m\u00e9todo de ciclo de vida <code class=\"language-javascript\">componentWillUnmount()</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finalmente, implementaremos un m\u00e9todo llamado <code class=\"language-javascript\">tick()</code> que el componente <code class=\"language-javascript\">Clock</code> ejecutar\u00e1 cada segundo.</p>\n<p>Utilizar\u00e1 <code class=\"language-javascript\">this.setState()</code> para programar actualizaciones al estado local del componente. </p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1000</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timerID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/amqdNA?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Ahora el reloj cambia cada segundo.</p>\n<p>Repasemos r\u00e1pidamente lo que est\u00e1 sucediendo y el orden en que se invocan los m\u00e9todos:</p>\n<ol>\n<li>Cuando se pasa <code class=\"language-javascript\">&lt;Clock /&gt;</code> a <code class=\"language-javascript\">root.render()</code>, React invoca al constructor del componente <code class=\"language-javascript\">Clock</code>. Ya que <code class=\"language-javascript\">Clock</code> necesita mostrar la hora actual, inicializa <code class=\"language-javascript\">this.state</code> con un objeto que incluye la hora actual. Luego actualizaremos este estado.</li>\n<li>React invoca entonces al m\u00e9todo <code class=\"language-javascript\">render()</code> del componente <code class=\"language-javascript\">Clock</code>. As\u00ed es como React sabe lo que se debe mostrar en pantalla. React entonces actualiza el DOM para que coincida con la salida del renderizado de <code class=\"language-javascript\">Clock</code>.</li>\n<li>Cuando la salida de <code class=\"language-javascript\">Clock</code> se inserta en el DOM, React invoca al m\u00e9todo de ciclo de vida <code class=\"language-javascript\">componentDidMount()</code>. Dentro de \u00e9l, el componente <code class=\"language-javascript\">Clock</code> le pide al navegador que configure un temporizador para invocar al m\u00e9todo <code class=\"language-javascript\">tick()</code> del componente una vez por segundo.</li>\n<li>Cada segundo el navegador invoca al m\u00e9todo <code class=\"language-javascript\">tick()</code>. Dentro de \u00e9l, el componente <code class=\"language-javascript\">Clock</code> planifica una actualizaci\u00f3n de la interfaz de usuario al invocar a <code class=\"language-javascript\">setState()</code> con un objeto que contiene la hora actual. Gracias a la invocaci\u00f3n a <code class=\"language-javascript\">setState()</code>, React sabe que el estado cambi\u00f3 e invoca de nuevo al m\u00e9todo <code class=\"language-javascript\">render()</code> para saber qu\u00e9 debe estar en la pantalla. Esta vez, <code class=\"language-javascript\">this.state.date</code> en el m\u00e9todo <code class=\"language-javascript\">render()</code> ser\u00e1 diferente, por lo que el resultado del renderizado incluir\u00e1 la hora actualizada. Conforme a eso React actualiza el DOM.</li>\n<li>Si el componente <code class=\"language-javascript\">Clock</code> se elimina en alg\u00fan momento del DOM, React invoca al m\u00e9todo de ciclo de vida <code class=\"language-javascript\">componentWillUnmount()</code>, por lo que el temporizador se detiene.</li>\n</ol>\n<h2 id=\"using-state-correctly\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#using-state-correctly\"></a>Usar el estado correctamente </h2>\n<p>Hay tres cosas que debes saber sobre <code class=\"language-javascript\">setState()</code>.</p>\n<h3 id=\"do-not-modify-state-directly\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#do-not-modify-state-directly\"></a>No modifiques el estado directamente </h3>\n<p>Por ejemplo, esto no volver\u00e1 a renderizar un componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Incorrecto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comment <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En su lugar utiliza <code class=\"language-javascript\">setState()</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Correcto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>El \u00fanico lugar donde puedes asignar <code class=\"language-javascript\">this.state</code> es el constructor.</p>\n<h3 id=\"state-updates-may-be-asynchronous\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#state-updates-may-be-asynchronous\"></a>Las actualizaciones del estado pueden ser as\u00edncronas </h3>\n<p>React puede agrupar varias invocaciones a <code class=\"language-javascript\">setState()</code> en una sola actualizaci\u00f3n para mejorar el rendimiento.</p>\n<p>Debido a que <code class=\"language-javascript\">this.props</code> y <code class=\"language-javascript\">this.state</code> pueden actualizarse de forma asincr\u00f3nica, no debes confiar en sus valores para calcular el siguiente estado.</p>\n<p>Por ejemplo, este c\u00f3digo puede fallar en actualizar el contador:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Incorrecto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para arreglarlo, usa una segunda forma de <code class=\"language-javascript\">setState()</code> que acepta una funci\u00f3n en lugar de un objeto. Esa funci\u00f3n recibir\u00e1 el estado previo como primer argumento, y las props en el momento en que se aplica la actualizaci\u00f3n como segundo argumento:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Correcto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>increment\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Anteriormente usamos una <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Funciones/Arrow_functions\">funci\u00f3n flecha</a>, pero se podr\u00eda haber hecho igualmente con funciones comunes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Correcto</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>increment\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"state-updates-are-merged\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#state-updates-are-merged\"></a>Las actualizaciones de estado se fusionan </h3>\n<p>Cuando invocas a <code class=\"language-javascript\">setState()</code>, React combina el objeto que proporcionaste con el estado actual.</p>\n<p>Por ejemplo, tu estado puede contener varias variables independientes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Luego puedes actualizarlas independientemente con invocaciones separadas a <code class=\"language-javascript\">setState()</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>posts</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fetchComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>comments</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>La fusi\u00f3n es superficial, asi que <code class=\"language-javascript\">this.setState({comments})</code> deja intacto a <code class=\"language-javascript\">this.state.posts</code>, pero reemplaza completamente <code class=\"language-javascript\">this.state.comments</code>.</p>\n<h2 id=\"the-data-flows-down\"><a class=\"anchor\" href=\"/react/state-and-lifecycle#the-data-flows-down\"></a>Los datos fluyen hacia abajo </h2>\n<p>Ni los componentes padres o hijos pueden saber si un determinado componente tiene o no tiene estado y no les deber\u00eda importar si se define como una funci\u00f3n o una clase.</p>\n<p>Por eso es que el estado a menudo se le denomina local o encapsulado. No es accesible desde otro componente excepto de aquel que lo posee y lo asigna.</p>\n<p>Un componente puede elegir pasar su estado como props a sus componentes hijos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FormattedDate</span></span> <span class=\"token attr-name\">date</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>El componente <code class=\"language-javascript\">FormattedDate</code> recibir\u00eda <code class=\"language-javascript\">date</code> en sus props y no sabr\u00eda si vino del estado de <code class=\"language-javascript\">Clock</code>, de los props de <code class=\"language-javascript\">Clock</code>, o si se escribi\u00f3 manualmente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FormattedDate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">It is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/zKRqNB?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>A esto com\u00fanmente se le llama flujo de datos \u00abdescendente\u00bb o \u00abunidireccional\u00bb. Cualquier estado siempre es propiedad de alg\u00fan componente espec\u00edfico, y cualquier dato o interfaz de usuario derivados de ese estado solo pueden afectar los componentes \u00abdebajo\u00bb de ellos en el \u00e1rbol.</p>\n<p>Si imaginas un \u00e1rbol de componentes como una cascada de props, el estado de cada componente es como una fuente de agua adicional que se le une en un punto arbitrario, pero tambi\u00e9n fluye hacia abajo.</p>\n<p>Para mostrar que todos los componentes est\u00e1n verdaderamente aislados, podemos crear un componente <code class=\"language-javascript\">App</code> que represente tres componentes <code class=\"language-javascript\">&lt;Clock&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/vXdGmd?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Cada <code class=\"language-javascript\">Clock</code> configura su propio temporizador y se actualiza de forma independiente.</p>\n<p>En las aplicaciones de React, si un componente tiene o no estado se considera un detalle de implementaci\u00f3n del componente que puede cambiar con el tiempo. Puedes usar componentes sin estado dentro de componentes con estado y viceversa.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/state-and-lifecycle.md\">Edit this page</a></p></div></article>", "path": "/react/state-and-lifecycle", "nav": ["/react/components-and-props", "/react/handling-events"]}, {"key": "6. Manejando eventos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Manejar eventos en elementos de React es muy similar a manejar eventos con elementos del DOM. Hay algunas diferencias de sintaxis:</p>\n<ul>\n<li>Los eventos de React se nombran usando camelCase, en vez de min\u00fasculas.</li>\n<li>Con JSX pasas una funci\u00f3n como el manejador del evento, en vez de un string.</li>\n</ul>\n<p>Por ejemplo, el HTML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">activateLasers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n  Activate Lasers\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>En React es algo diferente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>activateLasers<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">  Activate Lasers</span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Otra diferencia es que en React no puedes retornar <code class=\"language-javascript\">false</code> para prevenir el comportamiento por defecto. Debes, expl\u00edcitamente, llamar <code class=\"language-javascript\">preventDefault</code>. Por ejemplo, en un HTML plano, para prevenir el comportamiento por defecto de enviar un formulario, puedes escribir:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onsubmit</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked submit.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Submit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>En cambio en React, esto podr\u00eda ser:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked submit.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Submit</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aqu\u00ed, <code class=\"language-javascript\">e</code> es un evento sint\u00e9tico. React define estos eventos sint\u00e9ticos acorde a las <a class=\"external-link\" href=\"https://www.w3.org/TR/DOM-Level-3-Events/\">especificaciones W3C</a>, para que no tengas que preocuparte por la compatibilidad entre distintos navegadores. Los eventos de React no funcionan exactamente igual que los eventos nativos. Mira la gu\u00eda de referencia <a href=\"/react/events\"><code class=\"language-javascript\">SyntheticEvent</code></a> para aprender m\u00e1s.</p>\n<p>Cuando est\u00e1s utilizando React, generalmente no necesitas llamar <code class=\"language-javascript\">addEventListener</code> para agregar escuchadores de eventos a un elemento del DOM despu\u00e9s de que este es creado. En cambio, solo debes proveer un manejador de eventos cuando el elemento se renderiza inicialmente.</p>\n<p>Cuando defines un componente usando una <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Classes\">clase de ES6</a>, un patr\u00f3n muy com\u00fan es que los manejadores de eventos sean un m\u00e9todo de la clase. Por ejemplo, este componente <code class=\"language-javascript\">Toggle</code> renderiza un bot\u00f3n que permite al usuario cambiar el estado entre \u201cENCENDIDO\u201d y \u201cAPAGADO\u201d:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">isToggleOn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Este enlace es necesario para hacer que `this` funcione en el callback</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">isToggleOn</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>prevState<span class=\"token punctuation\">.</span>isToggleOn</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isToggleOn <span class=\"token operator\">?</span> <span class=\"token string\">'ON'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'OFF'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/xEmzGg?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Tienes que tener mucho cuidado en cuanto al significado de <code class=\"language-javascript\">this</code> en los callbacks de JSX. En JavaScript, los m\u00e9todos de clase no est\u00e1n <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_objects/Function/bind\">ligados</a> por defecto. Si olvidas ligar <code class=\"language-javascript\">this.handleClick</code> y lo pasas a <code class=\"language-javascript\">onClick</code>, <code class=\"language-javascript\">this</code> ser\u00e1 <code class=\"language-javascript\">undefined</code> cuando se llame la funci\u00f3n.</p>\n<p>Esto no es un comportamiento especifico de React; esto hace parte de <a class=\"external-link\" href=\"https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/\">como operan las funciones JavaScript</a>. Generalmente, si refieres un m\u00e9todo sin usar <code class=\"language-javascript\">()</code> despu\u00e9s de este, tal como <code class=\"language-javascript\">onClick={this.handleClick}</code>, deber\u00edas ligar ese m\u00e9todo.</p>\n<p>Si te molesta llamar <code class=\"language-javascript\">bind</code>, existen dos maneras de evitarlo. Puedes usar <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Classes/Public_class_fields#campos_de_instancia_p%C3%BAblicos\">la sintaxis de campos p\u00fablicos de clases</a> para ligar los callbacks correctamente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggingButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Esta sintaxis nos asegura que `this` est\u00e1 ligado dentro de handleClick</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esta sintaxis est\u00e1 habilitada por defecto en <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>.</p>\n<p>Si no estas usando la sintaxis de campos p\u00fablicos de clases, puedes usar una <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">funci\u00f3n flecha</a> en el callback:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggingButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Esta sintaxis nos asegura que `this` esta ligado dentro de handleClick</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El problema con esta sintaxis es que un callback diferente es creado cada vez que <code class=\"language-javascript\">LogginButton</code> es renderizado. En la mayor\u00eda de los casos, esto est\u00e1 bien. Sin embargo, si este callback se pasa como una propiedad a componentes m\u00e1s bajos, estos componentes podr\u00edan renderizarse nuevamente. Generalmente, recomendamos ligar en el constructor o usar la sintaxis de campos de clases, para evitar esta clase de problemas de rendimiento.</p>\n<h2 id=\"passing-arguments-to-event-handlers\"><a class=\"anchor\" href=\"/react/handling-events#passing-arguments-to-event-handlers\"></a>Pasando argumentos a escuchadores de eventos </h2>\n<p>Dentro de un bucle es muy com\u00fan querer pasar un par\u00e1metro extra a un manejador de eventos. Por ejemplo, si <code class=\"language-javascript\">id</code> es el ID de una fila, cualquiera de los c\u00f3digos a continuaci\u00f3n podr\u00eda funcionar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRow</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Delete Row</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteRow</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Delete Row</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Las dos l\u00edneas anteriores son equivalentes, y utilizan <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">funciones flecha</a> y <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"><code class=\"language-javascript\">Function.prototype.bind</code></a> respectivamente.</p>\n<p>En ambos casos, el argumento <code class=\"language-javascript\">e</code> que representa el evento de React va a ser pasado como un segundo argumento despu\u00e9s del ID. Con una funci\u00f3n flecha, tenemos que pasarlo expl\u00edcitamente, pero con <code class=\"language-javascript\">bind</code> cualquier argumento adicional es pasado autom\u00e1ticamente</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/handling-events.md\">Edit this page</a></p></div></article>", "path": "/react/handling-events", "nav": ["/react/state-and-lifecycle", "/react/conditional-rendering"]}, {"key": "7. Renderizado condicional", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>En React, puedes crear distintos componentes que encapsulan el comportamiento que necesitas. Entonces, puedes renderizar solamente algunos de ellos, dependiendo del estado de tu aplicaci\u00f3n.</p>\n<p>El renderizado condicional en React funciona de la misma forma que lo hacen las condiciones en JavaScript. Usa operadores de JavaScript como <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/if...else\"><code class=\"language-javascript\">if</code></a> o el <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/Conditional_Operator\">operador condicional</a> para crear elementos representando el estado actual, y deja que React actualice la interfaz de usuario para emparejarlos.</p>\n<p>Considera estos dos componentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">UserGreeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Welcome back!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">GuestGreeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Please sign up.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vamos a crear un componente <code class=\"language-javascript\">Greeting</code> que muestra cualquiera de estos componentes dependiendo si el usuario ha iniciado sesi\u00f3n:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLoggedIn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserGreeting</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GuestGreeting</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Intentar cambiando isLoggedIn={true}:</span>\n<span class=\"gatsby-highlight-code-line\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token attr-name\">isLoggedIn</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ZpVxNq?editors=0011\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Este ejemplo renderiza un saludo diferente seg\u00fan el valor del prop <code class=\"language-javascript\">isLoggedIn</code>.</p>\n<h3 id=\"element-variables\"><a class=\"anchor\" href=\"/react/conditional-rendering#element-variables\"></a>Variables de elementos </h3>\n<p>Puedes usar variables para almacenar elementos. Esto puede ayudarte para renderizar condicionalmente una parte del componente mientras el resto del resultado no cambia.</p>\n<p>Considera estos dos componentes nuevos que representan botones de cierre e inicio de sesi\u00f3n:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">LoginButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Login\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">LogoutButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Logout\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En el siguiente ejemplo, crearemos un <a href=\"/react/state-and-lifecycle#adding-local-state-to-a-class\">componente con estado</a> llamado <code class=\"language-javascript\">LoginControl</code>.</p>\n<p>El componente va a renderizar <code class=\"language-javascript\">&lt;LoginButton  /&gt;</code> o <code class=\"language-javascript\">&lt;LogoutButton /&gt;</code> dependiendo de su estado actual. Tambi\u00e9n va a renderizar un <code class=\"language-javascript\">&lt;Greeting  /&gt;</code> del ejemplo anterior:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginControl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLoginClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLogoutClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">isLoggedIn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleLoginClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">isLoggedIn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleLogoutClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">isLoggedIn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> button<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLoggedIn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      button <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogoutButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      button <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token attr-name\">isLoggedIn</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isLoggedIn<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>button<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginControl</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/QKzAgB?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Si bien declarar una variable y usar una sentencia <code class=\"language-javascript\">if</code> es una buena forma de renderizar condicionalmente un componente, a veces podr\u00edas querer usar una sintaxis m\u00e1s corta. Hay algunas formas de hacer condiciones en una l\u00ednea en JSX, explicadas a continuaci\u00f3n.</p>\n<h3 id=\"inline-if-with-logical--operator\"><a class=\"anchor\" href=\"/react/conditional-rendering#inline-if-with-logical--operator\"></a>If en una l\u00ednea con operador l\u00f3gico &amp;&amp; </h3>\n<p>Puedes <a href=\"/react/introducing-jsx#embedding-expressions-in-jsx\">incluir expresiones en JSX</a> envolvi\u00e9ndolas en llaves. Esto incluye el operador l\u00f3gico <code class=\"language-javascript\">&amp;&amp;</code> de JavaScript. Puede ser \u00fatil para incluir condicionalmente un elemento:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Mailbox</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> unreadMessages <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>unreadMessages<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>unreadMessages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          You have </span><span class=\"token punctuation\">{</span>unreadMessages<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> unread messages.</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Re: React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Re:Re: React'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mailbox</span></span> <span class=\"token attr-name\">unreadMessages</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>messages<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ozJddz?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Esto funciona porque en JavaScript, <code class=\"language-javascript\">true &amp;&amp; expresi\u00f3n</code> siempre eval\u00faa a <code class=\"language-javascript\">expresi\u00f3n</code>, y <code class=\"language-javascript\">false &amp;&amp; expresi\u00f3n</code> siempre eval\u00faa a <code class=\"language-javascript\">false</code>.</p>\n<p>Por eso, si la condici\u00f3n es <code class=\"language-javascript\">true</code>, el elemento justo despu\u00e9s de <code class=\"language-javascript\">&amp;&amp;</code> aparecer\u00e1 en el resultado. Si es <code class=\"language-javascript\">false</code>, React lo ignorar\u00e1.</p>\n<p>Ten en cuenta que retornar expresiones falsas har\u00e1 que el elemento despu\u00e9s de \u2019&amp;&amp;\u2019 sea omitido pero retornar\u00e1 el valor falso. En el ejemplo de abajo, \u2019<div>0</div>\u2019 ser\u00e1 retornado por el m\u00e9todo de renderizado.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>count <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Messages: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"inline-if-else-with-conditional-operator\"><a class=\"anchor\" href=\"/react/conditional-rendering#inline-if-else-with-conditional-operator\"></a>If-Else en una l\u00ednea con operador condicional </h3>\n<p>Otro m\u00e9todo para el renderizado condicional de elementos en una l\u00ednea es usar el operador condicional <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/Conditional_Operator\"><code class=\"language-javascript\">condici\u00f3n ? true : false</code></a> de JavaScript.</p>\n<p>En el siguiente ejemplo, lo usaremos para renderizar de forma condicional un peque\u00f1o bloque de texto.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      The user is </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>isLoggedIn <span class=\"token operator\">?</span> <span class=\"token string\">'currently'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'not'</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> logged in.</span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tambi\u00e9n puede usarse para expresiones m\u00e1s grandes, aunque es menos obvio lo que est\u00e1 pasando:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isLoggedIn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoggedIn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>isLoggedIn</span>        <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogoutButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLogoutClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleLoginClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>      <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Al igual que en JavaScript, depende de ti elegir un estilo apropiado seg\u00fan lo que t\u00fa y tu equipo consideren m\u00e1s legible. Recuerda tambi\u00e9n que cuando las condiciones se vuelven demasiado complejas, puede ser un buen momento para <a href=\"/react/components-and-props#extracting-components\">extraer un componente</a>.</p>\n<h3 id=\"preventing-component-from-rendering\"><a class=\"anchor\" href=\"/react/conditional-rendering#preventing-component-from-rendering\"></a>Evitar que el componente se renderice </h3>\n<p>En casos excepcionales, es posible que desees que un componente se oculte a s\u00ed mismo aunque haya sido renderizado por otro componente. Para hacer esto, devuelve <code class=\"language-javascript\">null</code> en lugar del resultado de renderizado.</p>\n<p>En el siguiente ejemplo, el <code class=\"language-javascript\">&lt;WarningBanner /&gt;</code> se renderiza dependiendo del valor del prop llamado <code class=\"language-javascript\">warn</code>. Si el valor del prop es <code class=\"language-javascript\">false</code>, entonces el componente no se renderiza:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">WarningBanner</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      Warning!</span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">showWarning</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleToggleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleToggleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">showWarning</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>showWarning\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WarningBanner</span></span> <span class=\"token attr-name\">warn</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>showWarning<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>showWarning <span class=\"token operator\">?</span> <span class=\"token string\">'Hide'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Show'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/Xjoqwm?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>El devolver <code class=\"language-javascript\">null</code> desde el m\u00e9todo <code class=\"language-javascript\">render</code> de un componente no influye en la activaci\u00f3n de los m\u00e9todos del ciclo de vida del componente. Por ejemplo <code class=\"language-javascript\">componentDidUpdate</code> seguir\u00e1 siendo llamado.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/conditional-rendering.md\">Edit this page</a></p></div></article>", "path": "/react/conditional-rendering", "nav": ["/react/handling-events", "/react/lists-and-keys"]}, {"key": "8. Listas y keys", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Primero, vamos a revisar como transformas listas en Javascript. </p>\n<p>Dado el c\u00f3digo de abajo, usamos la funci\u00f3n <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"language-javascript\">map()</code></a> para tomar un array de <code class=\"language-javascript\">numbers</code> y duplicar sus valores. Asignamos el nuevo array devuelto por <code class=\"language-javascript\">map()</code> a la variable <code class=\"language-javascript\">doubled</code> y la mostramos:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> doubled <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Este c\u00f3digo muestra <code class=\"language-javascript\">[2, 4, 6, 8, 10]</code> a la consola.</p>\n<p>En React, transformar arrays en listas de <a href=\"/react/rendering-elements\">elementos</a> es casi id\u00e9ntico.</p>\n<h3 id=\"rendering-multiple-components\"><a class=\"anchor\" href=\"/react/lists-and-keys#rendering-multiple-components\"></a>Renderizado de M\u00faltiples Componentes </h3>\n<p>Puedes hacer colecciones de elementos e <a href=\"/react/introducing-jsx#embedding-expressions-in-jsx\">incluirlos en JSX</a> usando llaves <code class=\"language-javascript\">{}</code>.</p>\n<p>Debajo, recorreremos el array <code class=\"language-javascript\">numbers</code> usando la funci\u00f3n <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"language-javascript\">map()</code></a> de Javascript. Devolvemos un elemento <code class=\"language-javascript\">&lt;li&gt;</code> por cada \u00edtem . Finalmente, asignamos el array de elementos resultante a <code class=\"language-javascript\">listItems</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Entonces, podemos incluir el array <code class=\"language-javascript\">listItems</code> completo dentro de un elemento <code class=\"language-javascript\">&lt;ul&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/GjPyQr?editors=0011\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Este c\u00f3digo muestra una lista de n\u00fameros entre 1 y 5.</p>\n<h3 id=\"basic-list-component\"><a class=\"anchor\" href=\"/react/lists-and-keys#basic-list-component\"></a>Componente b\u00e1sico de lista </h3>\n<p>Usualmente renderizar\u00edas listas dentro de un <a href=\"/react/components-and-props\">componente</a>.</p>\n<p>Podemos refactorizar el ejemplo anterior en un componente que acepte un array de <code class=\"language-javascript\">numbers</code> e imprima una lista de elementos.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NumberList</span></span> <span class=\"token attr-name\">numbers</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Cuando ejecutes este c\u00f3digo, ser\u00e1s advertido que una key deber\u00eda ser proporcionada para \u00edtems de lista. Una \u201ckey\u201d es un atributo especial string que debes incluir al crear listas de elementos. Vamos a discutir por qu\u00e9 esto es importante en la pr\u00f3xima secci\u00f3n.</p>\n<p>Vamos a asignar una <code class=\"language-javascript\">key</code> a nuestra lista de \u00edtems dentro de <code class=\"language-javascript\">numbers.map()</code> y arreglar el problema de la falta de key.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/jrXYRR?editors=0011\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<h2 id=\"keys\"><a class=\"anchor\" href=\"/react/lists-and-keys#keys\"></a>Keys </h2>\n<p>Las keys ayudan a React a identificar que \u00edtems han cambiado, son agregados, o son eliminados. Las keys deben ser dadas a los elementos dentro del array para darle a los elementos una identidad estable:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>La mejor forma de elegir una key es usando un string que identifique \u00fanicamente a un elemento de la lista entre sus hermanos. Habitualmente vas a usar IDs de tus datos como key:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cuando no tengas IDs estables para renderizar, puedes usar el \u00edndice del \u00edtem como una key como \u00faltimo recurso:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Only do this if items have no stable IDs</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No recomendamos usar \u00edndices para keys si el orden de los \u00edtems puede cambiar. Esto puede impactar negativamente el rendimiento y puede causar problemas con el estado del componente. Revisa el art\u00edculo de Robin Pokorny para una <a class=\"external-link\" href=\"https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/\">explicaci\u00f3n en profundidad de los impactos negativos de usar un \u00edndice como key</a>. Si eliges no asignar una key expl\u00edcita a la lista de \u00edtems, React por defecto usar\u00e1 \u00edndices como keys.</p>\n<p>Aqu\u00ed hay una <a href=\"/react/reconciliation#recursing-on-children\">explicaci\u00f3n en profundidad sobre por qu\u00e9 las keys son necesarias</a> si est\u00e1s interesado en aprender m\u00e1s.</p>\n<h3 id=\"extracting-components-with-keys\"><a class=\"anchor\" href=\"/react/lists-and-keys#extracting-components-with-keys\"></a>Extracci\u00f3n de componentes con keys </h3>\n<p>Las keys solo tienen sentido en el contexto del array que las envuelve.</p>\n<p>Por ejemplo, si <a href=\"/react/components-and-props#extracting-components\">extraes</a> un componente <code class=\"language-javascript\">ListItem</code>, deber\u00edas mantener la key en los elementos <code class=\"language-javascript\">&lt;ListItem /&gt;</code> del array en lugar de en el elemento <code class=\"language-javascript\">&lt;li&gt;</code> del propio <code class=\"language-javascript\">ListItem</code>.</p>\n<p><strong>Ejemplo: Uso Incorrecto de Key</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Mal! No hay necesidad de especificar la key aqu\u00ed:</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Mal! La key deber\u00eda haber sido especificada aqu\u00ed:</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Ejemplo: Uso Correcto de Key</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Correcto! No hay necesidad de especificar la key aqu\u00ed:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Correcto! La key deber\u00eda ser especificada dentro del array.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ZXeOGM?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Una buena regla es que los elementos dentro de <code class=\"language-javascript\">map()</code> necesitan keys.</p>\n<h3 id=\"keys-must-only-be-unique-among-siblings\"><a class=\"anchor\" href=\"/react/lists-and-keys#keys-must-only-be-unique-among-siblings\"></a>Las keys deben ser \u00fanicas solo entre hermanos </h3>\n<p>Las keys usadas dentro de arrays deber\u00edan ser \u00fanicas entre sus hermanos. Sin embargo, no necesitan ser \u00fanicas globalmente. Podemos usar las mismas keys cuando creamos dos arrays diferentes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Blog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> sidebar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>sidebar<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'Welcome to learning React!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Installation'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'You can install React from npm.'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Blog</span></span> <span class=\"token attr-name\">posts</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/NRZYGN?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Las keys sirven como una sugerencia para React pero no son pasadas a tus componentes. Si necesitas usar el mismo valor en tu componente, p\u00e1sasela expl\u00edcitamente como una propiedad con un nombre diferente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span></span>    <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Con el ejemplo de arriba, el componente <code class=\"language-javascript\">Post</code> puede leer <code class=\"language-javascript\">props.id</code>, pero no <code class=\"language-javascript\">props.key</code>.</p>\n<h3 id=\"embedding-map-in-jsx\"><a class=\"anchor\" href=\"/react/lists-and-keys#embedding-map-in-jsx\"></a>Integrar map() en JSX </h3>\n<p>En los ejemplos de arriba declaramos una variable separada <code class=\"language-javascript\">listItems</code> y la incluimos en JSX:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> listItems <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">              <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>listItems<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JSX permite <a href=\"/react/introducing-jsx#embedding-expressions-in-jsx\">integrar cualquier expresi\u00f3n</a> en llaves as\u00ed que podemos alinear el resultado de <code class=\"language-javascript\">map()</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">                  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/BLvYrB?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Algunas veces esto resulta m\u00e1s claro en c\u00f3digo, pero este estilo tambi\u00e9n puede ser abusado. Como en JavaScript, depende de ti decidir cuando vale la pena extraer una variable por legibilidad. Ten en mente que si el cuerpo de <code class=\"language-javascript\">map()</code> est\u00e1 muy anidado, puede ser un buen momento para <a href=\"/react/components-and-props#extracting-components\">extraer un componente</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/lists-and-keys.md\">Edit this page</a></p></div></article>", "path": "/react/lists-and-keys", "nav": ["/react/conditional-rendering", "/react/forms"]}, {"key": "9. Formularios", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los elementos de formularios en HTML funcionan un poco diferente a otros elementos del DOM en React, debido a que los elementos de formularios conservan naturalmente alg\u00fan estado interno. Por ejemplo, este formulario solamente en HTML, acepta un solo nombre.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    Name:\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Este formulario tiene el comportamiento predeterminado en HTML que consiste en navegar a una nueva p\u00e1gina cuando el usuario env\u00eda el formulario. Si deseas este comportamiento en React, simplemente ya funciona as\u00ed. Pero en la mayor\u00eda de casos, es conveniente tener una funci\u00f3n en Javascript que se encargue del env\u00edo del formulario, y que tenga acceso a los datos que el usuario introdujo en el formulario. La forma predeterminada para conseguir esto es una t\u00e9cnica llamada \u201ccomponentes controlados\u201d.</p>\n<h2 id=\"controlled-components\"><a class=\"anchor\" href=\"/react/forms#controlled-components\"></a>Componentes controlados </h2>\n<p>En HTML, los elementos de formularios como los <code class=\"language-javascript\">&lt;input&gt;</code>, <code class=\"language-javascript\">&lt;textarea&gt;</code> y el <code class=\"language-javascript\">&lt;select&gt;</code> normalmente mantienen sus propios estados y los actualizan de acuerdo a la interacci\u00f3n del usuario. En React, el estado mutable es mantenido normalmente en la propiedad estado de los componentes, y solo se actualiza con <a href=\"/react/react-component#setstate\"><code class=\"language-javascript\">setState()</code></a>.</p>\n<p>Podemos combinar ambos haciendo que el estado de React sea la \u201c\u00fanica fuente de la verdad\u201d. De esta manera, los componentes React que rendericen un formulario tambi\u00e9n controlan lo que pasa en ese formulario con las subsecuentes entradas del usuario. Un campo de un formulario cuyos valores son controlados por React de esta forma es denominado \u201ccomponente controlado\u201d.</p>\n<p>Por ejemplo, si queremos hacer que el ejemplo anterior muestre el nombre que esta siendo suministrado, podemos escribir el formulario como un componente controlado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A name was submitted: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Name:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/VmmPgp?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Ya que el atributo <code class=\"language-javascript\">value</code> es agregado en nuestro elemento del formulario, el valor mostrado siempre ser\u00e1 el de <code class=\"language-javascript\">this.state.value</code>, haciendo que el estado de React sea la fuente de la verdad. Ya que <code class=\"language-javascript\">handleChange</code> corre cada vez que una tecla es oprimida para actualizar el estado de React, el valor mostrado ser\u00e1 actualizado mientras que el usuario escribe.</p>\n<p>Con un componente controlado, el valor del input siempre est\u00e1 dirigido por el estado de React. Si bien esto significa que tendr\u00e1s que escribir un poco m\u00e1s de c\u00f3digo, ahora podr\u00e1s pasar tambi\u00e9n el valor a otros elementos de la interfaz de usuario, o reiniciarlo desde otros manejadores de eventos.</p>\n<h2 id=\"the-textarea-tag\"><a class=\"anchor\" href=\"/react/forms#the-textarea-tag\"></a>La etiqueta textarea </h2>\n<p>En HTML, el elemento <code class=\"language-javascript\">&lt;textarea&gt;</code> define su texto por sus hijos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span><span class=\"token punctuation\">&gt;</span></span>\n  Hello there, this is some text in a text area\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>En React, un <code class=\"language-javascript\">&lt;textarea&gt;</code> utiliza un atributo <code class=\"language-javascript\">value</code> en su lugar. De esta manera, un formulario que hace uso de un <code class=\"language-javascript\">&lt;textarea&gt;</code> puede ser escrito de manera similar a un formulario que utiliza un campo en una sola l\u00ednea:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EssayForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'Please write an essay about your favorite DOM element.'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An essay was submitted: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Essay:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Recuerda que <code class=\"language-javascript\">this.state.value</code> es inicializado en el constructor, de manera que el \u00e1rea de texto empiece con algo de texto.</p>\n<h2 id=\"the-select-tag\"><a class=\"anchor\" href=\"/react/forms#the-select-tag\"></a>La etiqueta select </h2>\n<p>En HTML, <code class=\"language-javascript\">&lt;select&gt;</code> crea una lista desplegable. Por ejemplo, este HTML crea una lista desplegable de sabores:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grapefruit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Grapefruit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Lime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">selected</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coconut<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Coconut<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mango<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Mango<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Ten en cuenta que la opci\u00f3n <em>Coco</em> es inicialmente seleccionada, debido al atributo <code class=\"language-javascript\">selected</code>. React, en lugar de utilizar el atributo <code class=\"language-javascript\">selected</code>, utiliza un atributo <code class=\"language-javascript\">value</code> en la ra\u00edz de la etiqueta <code class=\"language-javascript\">select</code>. Esto es m\u00e1s conveniente en un componente controlado debido a que solo necesitas actualizarlo en un solo lugar, por ejemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">'coconut'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your favorite flavor is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Pick your favorite flavor:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grapefruit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Grapefruit</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Lime</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coconut<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Coconut</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mango<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Mango</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/JbbEzX?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>En resumen, esto hace que <code class=\"language-javascript\">&lt;input type=\"text\"&gt;</code>, <code class=\"language-javascript\">&lt;textarea&gt;</code>, y <code class=\"language-javascript\">&lt;select&gt;</code> trabajen de manera similar, todos aceptan un atributo <code class=\"language-javascript\">value</code> el cual puedes usar para implementar un componente controlado.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Puedes pasar un array al atributo <code class=\"language-javascript\">value</code>, permitiendo que selecciones m\u00faltiples opciones en una etiqueta <code class=\"language-javascript\">select</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">multiple</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n</div>\n<h2 id=\"the-file-input-tag\"><a class=\"anchor\" href=\"/react/forms#the-file-input-tag\"></a>La etiqueta file input </h2>\n<p>En HTML, un <code class=\"language-javascript\">&lt;input type=\"file\"&gt;</code> permite que el usuario escoja uno o varios archivos de su dispositivo de almacenamiento para ser cargados a un servidor o ser manipulados por Javascript mediante el <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/API/File/Using_files_from_web_applications\">API de Archivos</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Ya que su valor es solo de lectura, es un componente <strong>no controlado</strong> en React. Es explicado en detalle junto a otros componentes no controlados <a href=\"/react/uncontrolled-components#the-file-input-tag\">m\u00e1s adelante en la documentaci\u00f3n</a>.</p>\n<h2 id=\"handling-multiple-inputs\"><a class=\"anchor\" href=\"/react/forms#handling-multiple-inputs\"></a>Manejando m\u00faltiples inputs </h2>\n<p>Cuando necesitas manejar m\u00faltiples elementos <code class=\"language-javascript\">input</code> controlados, puedes agregar un atributo <code class=\"language-javascript\">name</code> a cada uno de los elementos y dejar que la funci\u00f3n controladora decida que hacer basada en el valor de <code class=\"language-javascript\">event.target.name</code>.</p>\n<p>Por ejemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Reservation</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">isGoing</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">numberOfGuests</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleInputChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleInputChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'checkbox'</span> <span class=\"token operator\">?</span> target<span class=\"token punctuation\">.</span>checked <span class=\"token operator\">:</span> target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Is going:</span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n<span class=\"gatsby-highlight-code-line\">            <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isGoing<span class=\"token punctuation\">\"</span></span></span>            <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isGoing<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Number of guests:</span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n<span class=\"gatsby-highlight-code-line\">            <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>numberOfGuests<span class=\"token punctuation\">\"</span></span></span>            <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>numberOfGuests<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInputChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/wgedvV?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Ten en cuenta como utilizamos la sintaxis de la <a class=\"external-link\" href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names\">propiedad <em>name</em> computada de ES6</a> para actualizar la clave del estado correspondiente al nombre del <em>input</em>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esto es equivalente a este c\u00f3digo ES5:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> partialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">partialState<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>partialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tambi\u00e9n, ya que <code class=\"language-javascript\">setState()</code> autom\u00e1ticamente <a href=\"/react/state-and-lifecycle#state-updates-are-merged\">combina un estado parcial al estado actual</a>, solamente necesitamos llamarlo con las partes que han cambiado.</p>\n<h2 id=\"controlled-input-null-value\"><a class=\"anchor\" href=\"/react/forms#controlled-input-null-value\"></a>Valor nulo en un input controlado </h2>\n<p>Al especificar la prop <code class=\"language-javascript\">value</code> en un <a href=\"/react/forms#controlled-components\">componente controlado</a> se evita que el usuario cambie la entrada a menos que as\u00ed lo quiera. Si has especificado <code class=\"language-javascript\">value</code> pero la entrada a\u00fan es editable, quiz\u00e1 asignaste accidentalmente a <code class=\"language-javascript\">value</code> un valor <code class=\"language-javascript\">undefined</code> o <code class=\"language-javascript\">null</code>.</p>\n<p>El c\u00f3digo a continuaci\u00f3n demuestra esto. (El input est\u00e1 bloqueado en principio, pero se vuelve editable despu\u00e9s de un corto retraso).</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>mountNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hi<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>mountNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"alternatives-to-controlled-components\"><a class=\"anchor\" href=\"/react/forms#alternatives-to-controlled-components\"></a>Alternativas a componentes controlados </h2>\n<p>A veces puede ser tedioso usar componentes controlados, debido a que se necesita escribir un controlador de eventos para cada forma en la que tus datos puedan cambiar y agregarlos a todos en el estado del <em>input</em> a trav\u00e9s del componente React. Esto puede volverse particularmente molesto cuando est\u00e1s convirtiendo una base de c\u00f3digo existente a React, o integrando una aplicaci\u00f3n React con una biblioteca que no integra React. En estas situaciones, puede que quieras leer acerca de <a href=\"/react/uncontrolled-components\">componentes no controlados</a>, una t\u00e9cnica alternativa para implementar <em>inputs</em> en formularios.</p>\n<h2 id=\"fully-fledged-solutions\"><a class=\"anchor\" href=\"/react/forms#fully-fledged-solutions\"></a>Soluciones completas </h2>\n<p>Si lo que est\u00e1s buscando es una soluci\u00f3n completa incluyendo validaci\u00f3n, tener en cuenta los campos visitados y manejar el env\u00edo del formulario, <a class=\"external-link\" href=\"https://jaredpalmer.com/formik\">Formik</a> es una de las opciones populares. Sin embargo, est\u00e1 construido con los mismos principios de los componentes controlados y manejo de estado, as\u00ed que no los dejes de aprender.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/forms.md\">Edit this page</a></p></div></article>", "path": "/react/forms", "nav": ["/react/lists-and-keys", "/react/lifting-state-up"]}, {"key": "10. Levantando el estado", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Usualmente, muchos componentes necesitan reflejar el mismo cambio en los datos. Recomendamos elevar el estado compartido al ancestro com\u00fan m\u00e1s cercano. Veamos c\u00f3mo funciona.</p>\n<p>En esta secci\u00f3n, crearemos una calculadora de temperatura que calcular\u00e1 si el agua hervir\u00e1 a una determinada temperatura.</p>\n<p>Comenzaremos con un componente llamado <code class=\"language-javascript\">BoilingVerdict</code>. Este acepta la temperatura en <code class=\"language-javascript\">celsius</code> como una propiedad e imprime si es suficiente para que el agua hierva:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">BoilingVerdict</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>celsius <span class=\"token operator\">&gt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The water would boil.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The water would not boil.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Luego, crearemos un componente llamado <code class=\"language-javascript\">Calculator</code>. Este renderiza un <code class=\"language-javascript\">&lt;input&gt;</code> que permite insertar la temperatura y guarda su valor en <code class=\"language-javascript\">this.state.temperature</code>.</p>\n<p>Adem\u00e1s, renderiza el <code class=\"language-javascript\">BoilingVerdict</code> para el valor insertado.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperature</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperature</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Enter temperature in Celsius:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BoilingVerdict</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">celsius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ZXeOBm?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<h2 id=\"adding-a-second-input\"><a class=\"anchor\" href=\"/react/lifting-state-up#adding-a-second-input\"></a>A\u00f1adiendo una segunda entrada </h2>\n<p>Nuestro nuevo requisito es que, adem\u00e1s de la temperatura en Celsius, proveemos la temperatura en Fahrenheit, y estas se mantienen sincronizadas.</p>\n<p>Podemos comenzar por extraer el componente <code class=\"language-javascript\">TemperatureInput</code> de <code class=\"language-javascript\">Calculator</code>. A\u00f1adiremos una nueva propiedad <code class=\"language-javascript\">scale</code> al mismo que podr\u00e1 ser <code class=\"language-javascript\">\"c\"</code> o <code class=\"language-javascript\">\"f\"</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> scaleNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token string\">'Celsius'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">f</span><span class=\"token operator\">:</span> <span class=\"token string\">'Fahrenheit'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TemperatureInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperature</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperature</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Enter temperature in </span><span class=\"token punctuation\">{</span>scaleNames<span class=\"token punctuation\">[</span>scale<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">}</span></span>\n               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora podemos cambiar <code class=\"language-javascript\">Calculator</code> para que renderice dos entradas separadas para la temperatura:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TemperatureInput</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TemperatureInput</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>f<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/jGBryx?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Ahora tenemos dos entradas, pero cuando insertamos la temperatura en una de ellas, la otra no se actualiza. Esto contradice nuestro requisito: queremos que se mantengan sincronizadas.</p>\n<p>Tampoco podemos mostrar el componente <code class=\"language-javascript\">BoilingVerdict</code> de <code class=\"language-javascript\">Calculator</code>. <code class=\"language-javascript\">Calculator</code> no conoce la temperatura actual porque est\u00e1 escondida dentro de <code class=\"language-javascript\">TemperatureInput</code>.</p>\n<h2 id=\"writing-conversion-functions\"><a class=\"anchor\" href=\"/react/lifting-state-up#writing-conversion-functions\"></a>Escribiendo funciones de conversi\u00f3n </h2>\n<p>Primeramente, escribiremos dos funciones para convertir de Celsius a Fahrenheit y viceversa:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toCelsius</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fahrenheit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">toFahrenheit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">celsius</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>celsius <span class=\"token operator\">*</span> <span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Estas dos funciones convierten n\u00fameros. Escribiremos otra funci\u00f3n que tomar\u00e1 la cadena <code class=\"language-javascript\">temperature</code> y una funci\u00f3n de conversi\u00f3n como par\u00e1metros y retornar\u00e1 una cadena. La usaremos para calcular el valor de una entrada basado en la otra entrada.</p>\n<p>Retorna una cadena vac\u00eda si <code class=\"language-javascript\">temperature</code> es inv\u00e1lida y mantiene la salida redondeada al tercer lugar decimal:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">tryConvert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temperature<span class=\"token punctuation\">,</span> convert</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rounded <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>output <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> rounded<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por ejemplo, <code class=\"language-javascript\">tryConvert('abc', toCelsius)</code> retorna una cadena vac\u00eda, y <code class=\"language-javascript\">tryConvert('10.22', toFahrenheit)</code> retorna <code class=\"language-javascript\">'50.396'</code>.</p>\n<h2 id=\"lifting-state-up\"><a class=\"anchor\" href=\"/react/lifting-state-up#lifting-state-up\"></a>Levantando el estado </h2>\n<p>Actualmente, ambos componentes <code class=\"language-javascript\">TemperatureInput</code> mantienen de manera independiente sus valores en el estado local:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TemperatureInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperature</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperature</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// ...  </span></code></pre></div>\n<p>Sin embargo, queremos que estas dos entradas est\u00e9n sincronizadas. Cuando actualicemos la entrada de Celsius, la entrada de Fahrenheit debe reflejar la conversi\u00f3n de temperatura, y viceversa.</p>\n<p>En React, la compartici\u00f3n del estado puede lograrse moviendo el estado hacia arriba al ancestro com\u00fan m\u00e1s cercano de los componentes que lo necesitan. A esto se le llama \u201clevantar el estado\u201d. Eliminaremos el estado local de <code class=\"language-javascript\">TemperatureInput</code> y lo moveremos hacia <code class=\"language-javascript\">Calculator</code>.</p>\n<p>Si <code class=\"language-javascript\">Calculator</code> posee el estado compartido, entonces se convierte en la \u201cfuente de verdad\u201d para la temperatura actual en ambas entradas. Este puede instruir a ambos a tener valores consistentes entre s\u00ed. Puesto que las propiedades de ambos componentes <code class=\"language-javascript\">TemperatureInput</code> vienen del mismo componente <code class=\"language-javascript\">Calculator</code>, las dos entradas siempre estar\u00e1n sincronizadas.</p>\n<p>Veamos c\u00f3mo trabaja esto paso a paso.</p>\n<p>Primeramente, reemplazaremos <code class=\"language-javascript\">this.state.temperature</code> con <code class=\"language-javascript\">this.props.temperature</code> en el componente <code class=\"language-javascript\">TemperatureInput</code>. Por ahora, pretendamos que <code class=\"language-javascript\">this.props.temperature</code> ya existe, aunque necesitaremos pasarlo de el componente <code class=\"language-javascript\">Calculator</code> en el futuro:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Before: const temperature = this.state.temperature;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Sabemos que <a href=\"/react/components-and-props#props-are-read-only\">las propiedades son de solo lectura</a>. Cuando <code class=\"language-javascript\">temperature</code> estaba en el estado local, <code class=\"language-javascript\">TemperatureInput</code> solo llama a <code class=\"language-javascript\">this.setState()</code> para modificarlo. Sin embargo, ahora que <code class=\"language-javascript\">temperature</code> viene del padre como una propiedad, <code class=\"language-javascript\">TemperatureInput</code> no tiene ning\u00fan control sobre la misma.</p>\n<p>En React, esto se resuelve usualmente haciendo un componente \u201ccontrolado\u201d. As\u00ed como el <code class=\"language-javascript\">&lt;input&gt;</code> del DOM acepta una propiedad <code class=\"language-javascript\">value</code> y otra <code class=\"language-javascript\">onChange</code>, tambi\u00e9n <code class=\"language-javascript\">TemperatureInput</code> puede aceptar  las propiedades <code class=\"language-javascript\">temperature</code> y <code class=\"language-javascript\">onTemperatureChange</code> de su padre <code class=\"language-javascript\">Calculator</code>.</p>\n<p>Ahora, cuando <code class=\"language-javascript\">TemperatureInput</code> quiera actualizar su temperatura, este llama a <code class=\"language-javascript\">this.props.onTemperatureChange</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Before: this.setState({temperature: e.target.value});</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onTemperatureChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// ...</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>No existe un significado especial para los nombres de las propiedades <code class=\"language-javascript\">temperature</code> o <code class=\"language-javascript\">onTemperatureChange</code> en los componentes. Pudimos haberles dado otro nombre, como <code class=\"language-javascript\">value</code> y <code class=\"language-javascript\">onChange</code> lo cual es una convenci\u00f3n com\u00fan.</p>\n</div>\n<p>La propiedad <code class=\"language-javascript\">onTemperatureChange</code> ser\u00e1 proporcionada de manera conjunta con <code class=\"language-javascript\">temperature</code> por el componente padre <code class=\"language-javascript\">Calculator</code>. Este manejar\u00e1 el cambio modificando su estado local, volviendo a renderizar ambas entradas con los nuevos valores. Analizaremos los cambios en la implementaci\u00f3n de <code class=\"language-javascript\">Calculator</code> en un momento.</p>\n<p>Antes de ahondar en los cambios de <code class=\"language-javascript\">Calculator</code>, recapitulemos nuestros cambios al componente <code class=\"language-javascript\">TemperatureInput</code>. Hemos eliminado el estado local de este, y en vez de leer <code class=\"language-javascript\">this.state.temperature</code>, ahora leemos <code class=\"language-javascript\">this.props.temperature</code>. En vez de llamar a <code class=\"language-javascript\">this.setState()</code> cuando queremos hacer un cambio, ahora llamamos a <code class=\"language-javascript\">this.props.onTemperatureChange()</code>, que ser\u00e1 proporcionado por <code class=\"language-javascript\">Calculator</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TemperatureInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onTemperatureChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Enter temperature in </span><span class=\"token punctuation\">{</span>scaleNames<span class=\"token punctuation\">[</span>scale<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>temperature<span class=\"token punctuation\">}</span></span>\n               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora miremos el componente <code class=\"language-javascript\">Calculator</code>.</p>\n<p>Guardaremos <code class=\"language-javascript\">temperature</code> y <code class=\"language-javascript\">scale</code> en su estado local. Este es el estado que hemos \u201clevantado\u201d de las entradas, y servir\u00e1 como la \u201cfuente de verdad\u201d para ambos. Es la representaci\u00f3n m\u00ednima de todos los datos que debemos conocer para renderizar ambas entradas.</p>\n<p>Por ejemplo, si insertamos 37 en la entrada de Celsius, el estado del componente <code class=\"language-javascript\">Calculator</code> ser\u00e1:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">temperature</span><span class=\"token operator\">:</span> <span class=\"token string\">'37'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">scale</span><span class=\"token operator\">:</span> <span class=\"token string\">'c'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si luego editamos el valor de Fahrenheit para que sea 212, el estado de <code class=\"language-javascript\">Calculator</code> ser\u00e1:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">temperature</span><span class=\"token operator\">:</span> <span class=\"token string\">'212'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">scale</span><span class=\"token operator\">:</span> <span class=\"token string\">'f'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pudimos haber guardado el valor de ambas entradas pero resulta que no es necesario. Es suficiente con guardar el valor de la entrada recientemente cambiada, y la escala que esta representa. Entonces podemos inferir el valor de la otra entrada basados solamente en el valor actual de <code class=\"language-javascript\">temperature</code> y <code class=\"language-javascript\">scale</code>.</p>\n<p>Las entradas se mantienen sincronizadas porque los valores son calculados a partir del mismo estado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCelsiusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleCelsiusChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleFahrenheitChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleFahrenheitChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">temperature</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">scale</span><span class=\"token operator\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleCelsiusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temperature</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">scale</span><span class=\"token operator\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> temperature<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleFahrenheitChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temperature</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">scale</span><span class=\"token operator\">:</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> temperature<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> temperature <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> celsius <span class=\"token operator\">=</span> scale <span class=\"token operator\">===</span> <span class=\"token string\">'f'</span> <span class=\"token operator\">?</span> <span class=\"token function\">tryConvert</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">,</span> toCelsius<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> temperature<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> fahrenheit <span class=\"token operator\">=</span> scale <span class=\"token operator\">===</span> <span class=\"token string\">'c'</span> <span class=\"token operator\">?</span> <span class=\"token function\">tryConvert</span><span class=\"token punctuation\">(</span>temperature<span class=\"token punctuation\">,</span> toFahrenheit<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> temperature<span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TemperatureInput</span></span>\n          <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">temperature</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>celsius<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onTemperatureChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCelsiusChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TemperatureInput</span></span>\n          <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>f<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">temperature</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fahrenheit<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onTemperatureChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleFahrenheitChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BoilingVerdict</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">celsius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/WZpxpz?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Ahora, no importa qu\u00e9 entrada edites, <code class=\"language-javascript\">this.state.temperature</code> y <code class=\"language-javascript\">this.state.scale</code> en el componente <code class=\"language-javascript\">Calculator</code> se actualizan. Una de las entradas toma el valor tal cual, entonces cualquier dato del usuario se conserva, y el valor de la otra entrada es recalculado basado en este cambio.</p>\n<p>Recapitulemos qu\u00e9 pasa cuando editamos una entrada:</p>\n<ul>\n<li>React llama a la funci\u00f3n especificada como <code class=\"language-javascript\">onChange</code> en el <code class=\"language-javascript\">&lt;input&gt;</code> del DOM. En nuestro caso es el m\u00e9todo <code class=\"language-javascript\">handleChange</code> en el componente <code class=\"language-javascript\">TemperatureInput</code>.</li>\n<li>El m\u00e9todo <code class=\"language-javascript\">handleChange</code> en el componente <code class=\"language-javascript\">TemperatureInput</code> llama a <code class=\"language-javascript\">this.props.onTemperatureChange()</code> con el nuevo valor. Sus propiedades, incluyendo <code class=\"language-javascript\">onTemperatureChange</code>, fueron provistas para el componente padre <code class=\"language-javascript\">Calculator</code>.</li>\n<li>Cuando renderiz\u00f3 previamente, <code class=\"language-javascript\">Calculator</code> especific\u00f3 que <code class=\"language-javascript\">onTemperatureChange</code> del componente <code class=\"language-javascript\">TemperatureInput</code> con la escala Celsius es el m\u00e9todo <code class=\"language-javascript\">handleCelsiusChange</code> y <code class=\"language-javascript\">onTemperatureChange</code> del componente <code class=\"language-javascript\">TemperatureInput</code> con escala Fahrenheit es el m\u00e9todo <code class=\"language-javascript\">handleFahrenheitChange</code>. Entonces, cada uno de estos m\u00e9todos es llamado dependiendo del componente que se edite.</li>\n<li>Dentro de estos m\u00e9todos, el componente <code class=\"language-javascript\">Calculator</code> pregunta a React para volver a renderizar a s\u00ed mismo llamando al m\u00e9todo <code class=\"language-javascript\">this.setState()</code> con el nuevo valor y la escala actual de la entrada que acabamos de editar.</li>\n<li>React llama al m\u00e9todo <code class=\"language-javascript\">render</code> del componente <code class=\"language-javascript\">Calculator</code> para saber c\u00f3mo debe lucir la interfaz de usuario. Los valores de ambas entradas son recalculados en base a la temperatura actual y la escala activa. La conversi\u00f3n de temperatura es hecha aqu\u00ed.</li>\n<li>React llama a los m\u00e9todos <code class=\"language-javascript\">render</code> de los componentes <code class=\"language-javascript\">TemperatureInput</code> de manera individual con sus nuevas propiedades especificadas por <code class=\"language-javascript\">Calculator</code>. Aprende como sus interfaces de usuario deber\u00edan verse.</li>\n<li>React llama al m\u00e9todo <code class=\"language-javascript\">render</code> del componente <code class=\"language-javascript\">BoilingVerdict</code>, pasando la temperatura en Celsius como una propiedad.</li>\n<li>React DOM actualiza el DOM con el componente <code class=\"language-javascript\">BoilingVerdict</code> y sincroniza los valores deseados para las entradas. La entrada que acabamos de actualizar recibe su valor actual, y la otra entrada es actualizada a su temperatura luego de hacer la conversi\u00f3n.</li>\n</ul>\n<p>Toda actualizaci\u00f3n sigue los mismos pasos y las entradas se mantienen sincronizadas.</p>\n<h2 id=\"lessons-learned\"><a class=\"anchor\" href=\"/react/lifting-state-up#lessons-learned\"></a>Lecciones aprendidas </h2>\n<p>Debe haber una sola \u201cfuente de verdad\u201d para cada dato que cambie en una aplicaci\u00f3n de React. Usualmente, el estado se agrega primeramente al componente que lo necesita para su renderizaci\u00f3n. Luego, si otro componente tambi\u00e9n lo necesita, puedes levantar el estado hacia el ancestro com\u00fan m\u00e1s cercano. En vez de tratar de sincronizar el estado entre distintos componentes, deber\u00edas confiar en el <a href=\"/react/state-and-lifecycle#the-data-flows-down\">flujo de datos descendente</a>.</p>\n<p>Levantar el estado implica escribir m\u00e1s c\u00f3digo <em>\u201cboilerplate\u201d</em> que los enfoques <em>\u201ctwo-way binding\u201d</em>, pero como beneficio, toma menos tiempo encontrar un error. Como todo estado \u201cvive\u201d en alg\u00fan componente y s\u00f3lo ese componente puede cambiar, el margen de error se ve reducido grandemente. De manera adicional, puedes implementar l\u00f3gica adicional para transformar o rechazar alg\u00fan cambio en la entrada del usuario.</p>\n<p>Si algo puede ser derivado de las propiedades o el estado, probablemente no deber\u00eda estar en el estado. Por ejemplo, en vez de almacenar <code class=\"language-javascript\">celsiusValue</code> y <code class=\"language-javascript\">fahrenheitValue</code>, solamente almacenamos la \u00faltima edici\u00f3n a <code class=\"language-javascript\">temperature</code> y <code class=\"language-javascript\">scale</code>. El valor de la otra entrada siempre puede ser calculado desde el m\u00e9todo <code class=\"language-javascript\">render()</code>. Esto nos permite limpiar o aplicar un redondeo a la otra entrada sin perder la precisi\u00f3n en la entrada del usuario.</p>\n<p>Cuando veas que algo est\u00e1 mal en la interfaz de usuario, puedes usar <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-devtools\">React Developer Tools</a> para inspeccionar las propiedades y moverte hacia arriba en el \u00e1rbol hasta encontrar el componente responsable de actualizar el estado. Esto te permite seguir un error hasta su fuente:</p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//ef94afc3447d75cdc245c77efb0d63be/react-devtools-state.gif\">Image link</a></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/lifting-state-up.md\">Edit this page</a></p></div></article>", "path": "/react/lifting-state-up", "nav": ["/react/forms", "/react/composition-vs-inheritance"]}, {"key": "11. Composici\u00f3n vs. herencia", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React tiene un potente modelo de composici\u00f3n, y recomendamos usar composici\u00f3n en lugar de herencia para reutilizar c\u00f3digo entre componentes.</p>\n<p>En esta secci\u00f3n consideraremos algunos problemas en los que los desarrolladores nuevos en React a menudo emplean herencia, y mostraremos c\u00f3mo los podemos resolver con composici\u00f3n.</p>\n<h2 id=\"containment\"><a class=\"anchor\" href=\"/react/composition-vs-inheritance#containment\"></a>Contenci\u00f3n </h2>\n<p>Algunos componentes no conocen sus hijos de antemano. Esto es especialmente com\u00fan para componentes como <code class=\"language-javascript\">Sidebar</code> o <code class=\"language-javascript\">Dialog</code> que representan \u201ccajas\u201d gen\u00e9ricas.</p>\n<p>Recomendamos que estos componentes usen la prop especial children para pasar elementos hijos directamente en su resultado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyBorder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'FancyBorder FancyBorder-'</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto permite que otros componentes les pasen hijos arbitrarios anidando el JSX:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">WelcomeDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyBorder</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        Welcome</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        Thank you for visiting our spacecraft!</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyBorder</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/ozqNOV?editors=0010\">Pru\u00e9balo en CodePen</a></strong></p>\n<p>Cualquier cosa dentro de la etiqueta JSX <code class=\"language-javascript\">&lt;FancyBorder&gt;</code> se pasa dentro del componente <code class=\"language-javascript\">FancyBorder</code> como la prop <code class=\"language-javascript\">children</code>. Como <code class=\"language-javascript\">FancyBorder</code> renderiza <code class=\"language-javascript\">{props.children}</code> dentro de un <code class=\"language-javascript\">&lt;div&gt;</code>, los elementos que se le han pasado aparecen en el resultado final.</p>\n<p>Aunque es menos com\u00fan, a veces puedes necesitar m\u00faltiples \u201cagujeros\u201d en un componente. En estos casos puedes inventarte tu propia convenci\u00f3n en lugar de usar <code class=\"language-javascript\">children</code>: </p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">SplitPane</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SplitPane<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SplitPane-left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SplitPane-right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SplitPane</span></span>\n      <span class=\"token attr-name\">left</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Contacts</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>      <span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">right</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Chat</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>      <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwZOJp?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Los elementos como <code class=\"language-javascript\">&lt;Contacts /&gt;</code> y <code class=\"language-javascript\">&lt;Chat /&gt;</code> son simplemente objetos, por lo que puedes pasarlos como props como cualquier otro dato. Este enfoque puede recordarte a \u201chuecos\u201d (slots) en otras bibliotecas, pero no hay limitaciones en lo que puedes pasar como props en React.</p>\n<h2 id=\"specialization\"><a class=\"anchor\" href=\"/react/composition-vs-inheritance#specialization\"></a>Especializaci\u00f3n </h2>\n<p>A veces pensamos en componentes como \u201ccasos concretos\u201d de otros componentes. Por ejemplo, podr\u00edamos decir que un <code class=\"language-javascript\">WelcomeDialog</code> es un caso concreto de <code class=\"language-javascript\">Dialog</code>. </p>\n<p>En React, esto tambi\u00e9n se consigue por composici\u00f3n, en la que un componente m\u00e1s \u201cespec\u00edfico\u201d renderiza uno m\u00e1s \u201cgen\u00e9rico\u201d y lo configura con props:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dialog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyBorder</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyBorder</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">WelcomeDialog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dialog</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Welcome<span class=\"token punctuation\">\"</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Thank you for visiting our spacecraft!<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/kkEaOZ?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>La composici\u00f3n funciona igual de bien para componentes definidos como clases:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dialog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyBorder</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dialog-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyBorder</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUpDialog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSignUp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSignUp</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">login</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dialog</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Mars Exploration Program<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>How should we refer to you?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">               <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSignUp<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          \u00a1Ap\u00fantame!</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dialog</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">login</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleSignUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bienvenido abordo, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>login<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gwZbYa?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<h2 id=\"so-what-about-inheritance\"><a class=\"anchor\" href=\"/react/composition-vs-inheritance#so-what-about-inheritance\"></a>\u00bfEntonces qu\u00e9 pasa con la herencia? </h2>\n<p>En Facebook usamos React en miles de componentes, y no hemos hallado ning\u00fan caso de uso en el que recomendar\u00edamos crear jerarqu\u00edas de herencia de componentes.</p>\n<p>Las props y la composici\u00f3n te dan toda la flexibilidad que necesitas para personalizar el aspecto y el comportamiento de un componente de forma expl\u00edcita y segura. Recuerda que los componentes pueden aceptar props arbitrarias, incluyendo valores primitivos, elementos de React y funciones. </p>\n<p>Si quieres reutilizar funcionalidad que no es de interfaz entre componentes, sugerimos que la extraigas en un m\u00f3dulo de JavaScript independiente. Los componentes pueden importarlo y usar esa funci\u00f3n, objeto, o clase, sin extenderla.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/composition-vs-inheritance.md\">Edit this page</a></p></div></article>", "path": "/react/composition-vs-inheritance", "nav": ["/react/lifting-state-up", "/react/thinking-in-react"]}, {"key": "12. Pensando en React", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React es, en nuestra opini\u00f3n, la mejor forma de construir aplicaciones Web grandes y r\u00e1pidas usando JavaScript. Ha escalado muy bien para nosotros en Facebook e Instagram.</p>\n<p>Una de las grandes ventajas de React es c\u00f3mo te hace pensar acerca de la aplicaci\u00f3n mientras la construyes. En esta oportunidad vamos a ver el proceso de pensamiento al construir una tabla de productos con una funcionalidad de b\u00fasqueda usando React.</p>\n<h2 id=\"start-with-a-mock\"><a class=\"anchor\" href=\"/react/thinking-in-react#start-with-a-mock\"></a>Empieza con un mock </h2>\n<p>Imagina que ya tenemos un API JSON y un mock de nuestro dise\u00f1ador. Este luce m\u00e1s o menos as\u00ed:</p>\n<p>\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/1071fbcc9eed01fddc115b41e193ec11/d4770/thinking-in-react-mock.png\">Image link</a>\n</span>\n</span>\n</p>\n<p>Nuestro API JSON devuelve informaci\u00f3n en el siguiente formato:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">[\n  {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\n  {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\n  {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\n  {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\n  {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\n  {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\n];</code></pre></div>\n<h2 id=\"step-1-break-the-ui-into-a-component-hierarchy\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-1-break-the-ui-into-a-component-hierarchy\"></a>Paso 1: Divide la interfaz de usuario en una jerarqu\u00eda de componentes </h2>\n<p>Lo primero que vas a querer hacer es dibujar cajas alrededor de cada componente (y subcomponente) en el mock y darles nombres a todos ellos. Si trabajas con un dise\u00f1ador, probablemente ya lo hayan hecho \u00a1As\u00ed que ve a hablar con ellos! \u00a1Los nombres de sus capas de Photoshop podr\u00edan terminar siendo los nombres de tus componentes de React!</p>\n<p>\u00bfPero c\u00f3mo sabes qu\u00e9 deber\u00eda ser su propio componente? Usa las mismas t\u00e9cnicas para decidir si deber\u00edas crear una funci\u00f3n u objeto nuevo. Una t\u00e9cnica es el <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/Principio_de_responsabilidad_%C3%BAnica\">principio de responsabilidad \u00fanica</a>, esto significa que un componente debe, idealmente, hacer solo una cosa. Si termina creciendo entonces deber\u00eda ser dividido en componentes m\u00e1s peque\u00f1os.</p>\n<p>Dado a que normalmente estar\u00e1s mostrando modelos de datos JSON de una API al usuario descubrir\u00e1s que, si tu modelo fue construido correctamente, tu interfaz de usuario (y por lo tanto tu estructura de componentes) mapear\u00e1 muy bien. Eso es porque la interfaz de usuario y el modelo de datos tienden a adherirse a la misma <em>arquitectura de informaci\u00f3n</em>. Separa tu interfaz de usuario en componentes de forma tal que cada componente se corresponda con una parte de tu modelo de datos.</p>\n<p>\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/9381f09e609723a8bb6e4ba1a7713b46/90cbd/thinking-in-react-components.png\">Image link</a>\n</span>\n</span>\n</p>\n<p>Ver\u00e1s que tenemos cinco componentes en nuestra aplicaci\u00f3n de ejemplo. Hemos escrito en cursiva la informaci\u00f3n que representan cada uno. Los n\u00fameros en la imagen se corresponden con los n\u00fameros debajo.</p>\n<ol>\n<li><strong><code class=\"language-javascript\">FilterableProductTable</code> (naranja):</strong> contiene la totalidad del ejemplo</li>\n<li><strong><code class=\"language-javascript\">SearchBar</code> (azul):</strong> recibe <em>lo que escriba el usuario</em></li>\n<li><strong><code class=\"language-javascript\">ProductTable</code> (verde):</strong> muestra y filtra la <em>colecci\u00f3n de datos</em> con base en <em>lo que escriba el usuario</em></li>\n<li><strong><code class=\"language-javascript\">ProductCategoryRow</code> (turquesa):</strong> muestra el encabezado de cada <em>categor\u00eda</em></li>\n<li><strong><code class=\"language-javascript\">ProductRow</code> (rojo):</strong> muestra una fila por cada <em>producto</em></li>\n</ol>\n<p>Si observas <code class=\"language-javascript\">ProductTable</code>, ver\u00e1s que el encabezado de la tabla (conteniendo las etiquetas \u201cName\u201d y \u201cPrice\u201d) no es su propio componente. Esto es cuesti\u00f3n de preferencia, y hay argumentos para hacerlo de ambas formas. Para este ejemplo, decidimos dejarlos como parte de <code class=\"language-javascript\">ProductTable</code> porque es parte de representar la <em>colecci\u00f3n de datos</em>, que es parte de las responsabilidades de <code class=\"language-javascript\">ProductTable</code>. De todas formas, si este encabezado crece hasta volverse demasiado complejo (por ejemplo, si tuvi\u00e9ramos que agregar una forma de ordenarlos), tendr\u00eda sentido entonces que sea su propio componente <code class=\"language-javascript\">ProductTableHeader</code>.</p>\n<p>Ahora que hemos identificado los componentes en nuestro mock, vamos a ordenarlos jer\u00e1rquicamente. Esto es f\u00e1cil. Los componentes que aparecen dentro de otro componente en nuestro mock deber\u00edan aparecer como hijos en la jerarqu\u00eda.</p>\n<ul>\n<li>\n<p><code class=\"language-javascript\">FilterableProductTable</code></p>\n<ul>\n<li><code class=\"language-javascript\">SearchBar</code></li>\n<li>\n<p><code class=\"language-javascript\">ProductTable</code></p>\n<ul>\n<li><code class=\"language-javascript\">ProductCategoryRow</code></li>\n<li><code class=\"language-javascript\">ProductRow</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"step-2-build-a-static-version-in-react\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-2-build-a-static-version-in-react\"></a>Paso 2: Crea una versi\u00f3n est\u00e1tica en React </h2>\n<p class=\"codepen\">Revisa el c\u00f3digo <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/BwWzwm\">Pensando en React: Paso 2</a> en <a class=\"external-link\" href=\"https://codepen.io\">CodePen</a>.</p>\n<script></script>\n<p>Ahora que tenemos nuestra jerarqu\u00eda de componentes, es momento de implementar la aplicaci\u00f3n. La forma m\u00e1s f\u00e1cil es construir una versi\u00f3n que tome nuestro modelo de datos y muestre la interfaz de usuario sin interactividad. Es mejor desacoplar estos procesos porque crear una versi\u00f3n est\u00e1tica requiere escribir un mont\u00f3n pero no pensar tanto, mientras que agregar interactividad requiere pensar un mont\u00f3n y no escribir tanto. Vamos a ver por qu\u00e9.</p>\n<p>Para construir una versi\u00f3n est\u00e1tica de tu aplicaci\u00f3n que muestre tu modelo de datos vas a necesitar construir componentes que reusen otros componentes y pasen datos usando <em>props</em>. <em>props</em> son una forma de pasar datos de un padre a su hijo. Si est\u00e1s familiarizado con el concepto de <em>estado</em>, <strong>no uses para nada el estado</strong> para crear esta versi\u00f3n est\u00e1tica. El estado est\u00e1 reservado para interactividad, esto es, cuando los datos cambian a trav\u00e9s del tiempo. Dado que esta es una versi\u00f3n est\u00e1tica de la aplicaci\u00f3n, no lo necesitas.</p>\n<p>Puedes construir tu aplicaci\u00f3n de arriba para abajo o de abajo para arriba. Esto es, puedes o empezar construyendo los componentes m\u00e1s arriba en la jerarqu\u00eda (empezar por <code class=\"language-javascript\">FilterableProductTable</code>) o puedes empezar por los que est\u00e1n m\u00e1s abajo (<code class=\"language-javascript\">ProductRow</code>). En ejemplos simples es normalmente m\u00e1s f\u00e1cil empezar de arriba para abajo, en proyectos m\u00e1s grandes es m\u00e1s usual empezar a la inversa e ir escribiendo pruebas mientras vas subiendo en la jerarqu\u00eda.</p>\n<p>Al final de este paso tendr\u00e1s una colecci\u00f3n de componentes reutilizables que representan tu modelo de datos. Estos componente solo tendr\u00e1n un m\u00e9todo <code class=\"language-javascript\">render()</code> ya que esta es la versi\u00f3n est\u00e1tica de la aplicaci\u00f3n. El primer componente de la jerarqu\u00eda (<code class=\"language-javascript\">FilterableProductTable</code>) recibe tu modelo de datos como prop. Si realizas un cambio en este y ejecutas <code class=\"language-javascript\">root.render()</code> de nuevo, la interfaz de usuario se va a actualizar. Es f\u00e1cil ver c\u00f3mo se actualiza la interfaz de usuario y donde hacer cambios ya que no hay nada complicado ocurriendo. El <strong>flujo de datos en un sentido</strong> de React (tambi\u00e9n llamado <em>one-way binding</em>) ayuda a mantener todo modular y r\u00e1pido.</p>\n<p>Revisa la <a href=\"/react/getting-started\">documentaci\u00f3n de React</a> si necesitas ayuda con este paso.</p>\n<h3 id=\"a-brief-interlude-props-vs-state\"><a class=\"anchor\" href=\"/react/thinking-in-react#a-brief-interlude-props-vs-state\"></a>Una peque\u00f1a pausa: Props vs. estado </h3>\n<p>Hay dos tipos de datos en React: props y estado. Es importante entender la diferencia entre estos dos; ojea la <a href=\"/react/state-and-lifecycle\">documentaci\u00f3n oficial de React</a> si no est\u00e1s seguro de la diferencia entre ambos. Consulta tambi\u00e9n <a href=\"/react/faq-state#what-is-the-difference-between-state-and-props\">\u00bfCu\u00e1l es la diferencia entre state y props?</a></p>\n<h2 id=\"step-3-identify-the-minimal-but-complete-representation-of-ui-state\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-3-identify-the-minimal-but-complete-representation-of-ui-state\"></a>Paso 3: Identificar la versi\u00f3n m\u00ednima (pero completa) del estado de tu interfaz de usuario  </h2>\n<p>Para hacer tu interfaz de usuario interactiva vas a necesitar realizar cambios en tu modelo de datos interno. React lo logra gracias a su <strong>estado</strong>.</p>\n<p>Para armar tu aplicaci\u00f3n de forma correcta necesitas primero pensar en la m\u00ednima cantidad de estado mutable que necesita la aplicaci\u00f3n. Lo importante ac\u00e1 es que <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/No_te_repitas\"><em>no te repitas</em></a> (DRY: Don\u2019t Repeat Yourself). Necesitas descubrir la m\u00ednima representaci\u00f3n del estado que tu aplicaci\u00f3n va a necesitar y calcular el resto bajo demanda. Por ejemplo, si est\u00e1s creando una lista de tareas pendientes, solo mant\u00e9n un array de las tareas, no mantengas una variable a parte en el estado para contar cuantas hay. En vez de eso, cuando vayas a mostrar cu\u00e1ntas hay simplemente obt\u00e9n el largo del array de tareas.</p>\n<p>Piensa en toda la informaci\u00f3n que posee nuestra aplicaci\u00f3n de ejemplo. Tenemos:</p>\n<ul>\n<li>La lista original de productos</li>\n<li>El texto de b\u00fasqueda que el usuario ingres\u00f3</li>\n<li>El valor del checkbox</li>\n<li>La lista filtrada de productos</li>\n</ul>\n<p>Vayamos uno por uno y pensemos cuales son parte del estado. Hazte estas tres preguntas por cada pieza de informaci\u00f3n:</p>\n<ol>\n<li>\u00bfViene del padre como props? Entonces probablemente no sea estado.</li>\n<li>\u00bfSe queda sin cambios con el tiempo? Entonces, probablemente no sea estado.</li>\n<li>\u00bfPuedes calcularlo con base a otro estado o prop en tu componente? Entonces, no es parte del estado.</li>\n</ol>\n<p>La lista original de productos llega como props, entonces no es estado. El texto de b\u00fasqueda y el valor del checkbox parecen ser estado ya que cambian con el tiempo y no se pueden calcular usando otra informaci\u00f3n. Finalmente, la lista filtrada de productos no es estado debido a que puede ser calculada combinando la lista original de productos con el texto de b\u00fasqueda y el valor del checkbox.</p>\n<p>Finalmente, nuestro estado es:</p>\n<ul>\n<li>El texto de b\u00fasqueda que el usuario ingres\u00f3</li>\n<li>El valor del checkbox</li>\n</ul>\n<h2 id=\"step-4-identify-where-your-state-should-live\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-4-identify-where-your-state-should-live\"></a>Paso 4: Identificar d\u00f3nde debe vivir tu estado </h2>\n<p class=\"codepen\">Revisa el c\u00f3digo <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/qPrNQZ\">Pensando en React: Paso 4</a> en <a class=\"external-link\" href=\"https://codepen.io\">CodePen</a>.</p>\n<p>Bien, hemos identificado la m\u00ednima cantidad de estado en la aplicaci\u00f3n. Lo siguiente que necesitamos hacer es identificar qu\u00e9 componentes modifican o <em>son due\u00f1os</em> de este estado.</p>\n<p>Recuerda: React se trata de usar un flujo de datos en un sentido. Puede que no sea inmediatamente obvio cu\u00e1l componente deber\u00eda poseer el estado. <strong>Esta es normalmente la parte m\u00e1s complicada para quienes est\u00e1n arrancando con React</strong>, as\u00ed que sigue estos pasos para averiguarlo.</p>\n<p>Para cada parte del estado de tu aplicaci\u00f3n:</p>\n<ul>\n<li>Identifica qu\u00e9 componentes muestran algo con base a este estado.</li>\n<li>Busca un componente com\u00fan a estos m\u00e1s arriba en la jerarqu\u00eda.</li>\n<li>Este componente o uno m\u00e1s arriba en la jerarqu\u00eda deber\u00eda poseer el estado.</li>\n<li>Si no puedes encontrar un componente en el que tenga sentido manejar el estado, crea un nuevo componente solo para guardar el estado y ub\u00edcalo dentro de la jerarqu\u00eda en alg\u00fan lugar por encima de los componentes que lo necesitan.</li>\n</ul>\n<p>Usemos esta estrategia para nuestra aplicaci\u00f3n:</p>\n<ul>\n<li><code class=\"language-javascript\">ProductTable</code> necesita filtrar la lista de productos con base al estado y <code class=\"language-javascript\">SearchBar</code> necesita mostrar el texto de b\u00fasqueda y el estado del checkbox.</li>\n<li>El componente padre com\u00fan a ambos es <code class=\"language-javascript\">FilterableProductTable</code>.</li>\n<li>Conceptualmente tiene sentido que el texto de b\u00fasqueda y el valor del checkbox vivan en <code class=\"language-javascript\">FilterableProductTable</code>.</li>\n</ul>\n<p>Genial, hemos decidido que nuestro estado viva en <code class=\"language-javascript\">FilterableProductTable</code>. Primero, agrega <code class=\"language-javascript\">this.state = {filterText: '', inStockOnly: false}</code> al <code class=\"language-javascript\">constructor</code> de <code class=\"language-javascript\">FilterableProductTable</code> para reflejar el estado inicial de tu aplicaci\u00f3n. Entonces pasa <code class=\"language-javascript\">filterText</code> y <code class=\"language-javascript\">inStockOnly</code> a <code class=\"language-javascript\">ProductTable</code> y <code class=\"language-javascript\">SearchBar</code> como props. Finalmente usa estos props para filtrar las filas en <code class=\"language-javascript\">ProductTable</code> y establece el valor de los campos del formulario en <code class=\"language-javascript\">SearchBar</code>.</p>\n<p>Ya puedes ir viendo como tu aplicaci\u00f3n se va a comportar. Cambia <code class=\"language-javascript\">filterText</code> a <code class=\"language-javascript\">\"ball\"</code> como valor inicial y recarga tu aplicaci\u00f3n. Ver\u00e1s que la tabla de datos se actualiz\u00f3 correctamente.</p>\n<h2 id=\"step-5-add-inverse-data-flow\"><a class=\"anchor\" href=\"/react/thinking-in-react#step-5-add-inverse-data-flow\"></a>Paso 5: Agregar flujo de datos inverso </h2>\n<p class=\"codepen\">Revisa el c\u00f3digo <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/LzWZvb\">Pensando en React: Paso 5</a> en <a class=\"external-link\" href=\"https://codepen.io\">CodePen</a>.</p>\n<p>Hasta ahora, hemos creado una aplicaci\u00f3n que funciona correctamente como una funci\u00f3n de los props y estado fluyendo hacia abajo en la jerarqu\u00eda. Es momento entonces de empezar a soportar que los datos fluyan en el otro sentido: el componente de formulario ubicado m\u00e1s abajo en la jerarqu\u00eda necesita actualizar el estado en <code class=\"language-javascript\">FilterableProductTable</code>.</p>\n<p>React hace de este flujo de datos expl\u00edcito para que sea m\u00e1s f\u00e1cil entender c\u00f3mo funciona la aplicaci\u00f3n, a cambio necesita un poco m\u00e1s de c\u00f3digo que un flujo de datos en dos sentidos tradicional.</p>\n<p>Si intentas escribir o marcar la caja en la versi\u00f3n anterior del ejemplo (paso 4), ver\u00e1s que React ignora lo que hagas. Esto es intencional, ya que definimos el prop <code class=\"language-javascript\">value</code> del <code class=\"language-javascript\">input</code> para ser siempre igual al <code class=\"language-javascript\">estado</code> recibido de <code class=\"language-javascript\">FilterableProductTable</code>.</p>\n<p>Vamos a pensar que es lo que queremos que ocurra. Queremos estar seguros de que cada vez que el usuario modifica el formulario, se actualiza el estado para reflejar lo que el usuario ingres\u00f3. Ya que los componentes solo pueden actualizar su propio estado, entonces <code class=\"language-javascript\">FilterableProductTable</code> necesita pasar funciones a <code class=\"language-javascript\">SearchBar</code> que este ejecutar\u00e1 cada vez que el estado deba actualizarse. Podemos usar el evento <code class=\"language-javascript\">onChange</code> del input para que nos notifique de esto. La funci\u00f3n que pasa <code class=\"language-javascript\">FilterableProductTable</code> va a ejecutar entonces <code class=\"language-javascript\">setState()</code>, y la aplicaci\u00f3n se va a actualizar.</p>\n<p>Aunque parece complejo, son en realidad unas pocas l\u00edneas de c\u00f3digo. Y se vuelve realmente expl\u00edcito como fluyen los datos a trav\u00e9s de la aplicaci\u00f3n.</p>\n<h2 id=\"and-thats-it\"><a class=\"anchor\" href=\"/react/thinking-in-react#and-thats-it\"></a>Eso es todo </h2>\n<p>Ojal\u00e1 esto te haya dado una idea de c\u00f3mo pensar al momento de crear componentes y aplicaciones con React. Aunque puede ser un poco m\u00e1s de c\u00f3digo de lo que est\u00e1s acostumbrado, recuerda que uno lee c\u00f3digo con m\u00e1s frecuencia de la que escribe y es menos dif\u00edcil leer este c\u00f3digo modular y expl\u00edcito. Mientras vayas creando colecciones grandes de componentes, vas a apreciar esta claridad y modularidad, y con la reutilizaci\u00f3n de componente, las l\u00edneas de c\u00f3digo van a empezar a reducirse. :)</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/thinking-in-react.md\">Edit this page</a></p></div></article>", "path": "/react/thinking-in-react", "nav": ["/react/composition-vs-inheritance", "/react/accessibility"]}]}, {"key": "Gu\u00edas avanzadas", "values": [{"key": "Accesibilidad", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h2 id=\"why-accessibility\"><a class=\"anchor\" href=\"/react/accessibility#why-accessibility\"></a>\u00bfPor qu\u00e9 Accesibilidad? </h2>\n<p>La accesibilidad web (tambi\u00e9n conocida como <a class=\"external-link\" href=\"https://en.wiktionary.org/wiki/a11y\"><strong>a11y</strong></a>) es el dise\u00f1o y la creaci\u00f3n de sitios web que pueden ser utilizados por todos. El soporte de accesibilidad es necesario para permitir que la tecnolog\u00eda de asistencia interprete las p\u00e1ginas web.</p>\n<p>React es totalmente compatible con la creaci\u00f3n de sitios web accesibles, a menudo mediante el uso de t\u00e9cnicas est\u00e1ndar de HTML.</p>\n<h2 id=\"standards-and-guidelines\"><a class=\"anchor\" href=\"/react/accessibility#standards-and-guidelines\"></a>Normas y lineamientos </h2>\n<h3 id=\"wcag\"><a class=\"anchor\" href=\"/react/accessibility#wcag\"></a>WCAG </h3>\n<p>Las <a class=\"external-link\" href=\"https://www.w3.org/WAI/intro/wcag\">Pautas de Accesibilidad de Contenido Web (WCAG por sus siglas en ingl\u00e9s)</a> proporcionan pautas para crear sitios web accesibles.</p>\n<p>Las siguientes listas de verificaci\u00f3n WCAG proporcionan una visi\u00f3n general:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.wuhcag.com/wcag-checklist/\">Lista de verificaci\u00f3n WCAG de Wuhcag</a></li>\n<li><a class=\"external-link\" href=\"http://webaim.org/standards/wcag/checklist\">Lista de verificaci\u00f3n WCAG de WebAIM</a></li>\n<li><a class=\"external-link\" href=\"http://a11yproject.com/checklist.html\">Lista de verificaci\u00f3n de El Proyecto A11Y</a></li>\n</ul>\n<h3 id=\"wai-aria\"><a class=\"anchor\" href=\"/react/accessibility#wai-aria\"></a>WAI-ARIA </h3>\n<p>El documento <a class=\"external-link\" href=\"https://www.w3.org/WAI/intro/aria\">Iniciativa de Accesibilidad Web - Aplicaciones de Internet Enriquecidas y Accesibles (WAI-ARIA por sus siglas en ingl\u00e9s)</a> contiene t\u00e9cnicas para construir widgets de JavaScript totalmente accesibles.</p>\n<p>Ten en cuenta que todos los atributos HTML <code class=\"language-javascript\">aria- *</code> son totalmente compatibles con JSX. Mientras que la mayor\u00eda de las propiedades y atributos de DOM en React son camelCase, estos atributos deben tener un gui\u00f3n (tambi\u00e9n conocido como kebab-case, lisp-case, etc.) ya que est\u00e1n en HTML simple:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">aria-label</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>labelText<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">aria-required</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></span>  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onchangeHandler<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<h2 id=\"semantic-html\"><a class=\"anchor\" href=\"/react/accessibility#semantic-html\"></a>HTML sem\u00e1ntico </h2>\n<p>El HTML sem\u00e1ntico es la base de la accesibilidad en una aplicaci\u00f3n web. Haciendo uso de los diversos elementos HTML para reforzar el significado de la informaci\u00f3n en nuestros sitios web a menudo nos dar\u00e1 accesibilidad de forma gratuita.</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/HTML/Elemento\">Referencia de elementos HTML en MDN</a></li>\n</ul>\n<p>A veces rompemos la sem\u00e1ntica HTML cuando agregamos elementos <code class=\"language-javascript\">&lt;div&gt;</code> a nuestro JSX para hacer que nuestro c\u00f3digo React funcione, especialmente cuando trabajamos con listas (<code class=\"language-javascript\">&lt;ol&gt;</code>, <code class=\"language-javascript\">&lt;ul&gt;</code> y <code class=\"language-javascript\">&lt;dl&gt;</code>) y la etiqueta <code class=\"language-javascript\">&lt;table&gt;</code> de HTML.\nEn estos casos, deber\u00edamos usar <a href=\"/react/fragments\">Fragmentos React</a> para agrupar varios elementos.</p>\n<p>Por ejemplo,</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Fragment <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListItem</span></span> <span class=\"token attr-name\">item</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Puedes asignar una colecci\u00f3n de elementos a un arreglo de fragmentos como lo har\u00eda con cualquier otro tipo de elemento:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// Fragments should also have a `key` prop when mapping collections</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fragment</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Fragment</span></span><span class=\"token punctuation\">&gt;</span></span></span>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cuando no necesites ninguna prop en la etiqueta Fragment, puedes usar la <a href=\"/react/fragments#short-syntax\">sintaxis corta</a>, si tus herramientas lo admiten:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para m\u00e1s informaci\u00f3n, consulta <a href=\"/react/fragments\">la documentaci\u00f3n de Fragmentos</a>.</p>\n<h2 id=\"accessible-forms\"><a class=\"anchor\" href=\"/react/accessibility#accessible-forms\"></a>Formularios accesibles </h2>\n<h3 id=\"labeling\"><a class=\"anchor\" href=\"/react/accessibility#labeling\"></a>Etiquetado </h3>\n<p>Todos los controles de formulario HTML, como <code class=\"language-javascript\">&lt;input&gt;</code> y <code class=\"language-javascript\">&lt;textarea&gt;</code>, deben ser etiquetados de forma accesible. Necesitamos proporcionar etiquetas descriptivas que tambi\u00e9n est\u00e9n expuestas a los lectores de pantalla.</p>\n<p>Los siguientes recursos nos muestran c\u00f3mo hacer esto:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/WAI/tutorials/forms/labels/\">El W3C nos muestra c\u00f3mo etiquetar elementos</a></li>\n<li><a class=\"external-link\" href=\"http://webaim.org/techniques/forms/controls\">WebAIM nos muestra c\u00f3mo etiquetar elementos</a></li>\n<li><a class=\"external-link\" href=\"https://www.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/\">El Grupo Paciello explica los nombres accesibles</a></li>\n</ul>\n<p>Aunque estas pr\u00e1cticas est\u00e1ndar de HTML se pueden usar directamente en React, ten en cuenta que el atributo <code class=\"language-javascript\">for</code> se escribe como <code class=\"language-javascript\">htmlFor</code> en JSX:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>namedInput<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Name:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>namedInput<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<h3 id=\"notifying-the-user-of-errors\"><a class=\"anchor\" href=\"/react/accessibility#notifying-the-user-of-errors\"></a>Notificando errores al usuario </h3>\n<p>Las situaciones de error deben ser entendidas por todos los usuarios. El siguiente enlace tambi\u00e9n nos muestra c\u00f3mo exponer textos de error a lectores de pantalla:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/WAI/tutorials/forms/notifications/\">El W3C demuestra notificaciones de usuario</a></li>\n<li><a class=\"external-link\" href=\"http://webaim.org/techniques/formvalidation/\">WebAIM analiza la validaci\u00f3n de formularios</a></li>\n</ul>\n<h2 id=\"focus-control\"><a class=\"anchor\" href=\"/react/accessibility#focus-control\"></a>Control de foco </h2>\n<p>Aseg\u00farese de que su aplicaci\u00f3n web pueda ser operada completamente solo con el teclado:</p>\n<ul>\n<li><a class=\"external-link\" href=\"http://webaim.org/techniques/keyboard/\">WebAIM habla sobre accesibilidad de teclado</a></li>\n</ul>\n<h3 id=\"keyboard-focus-and-focus-outline\"><a class=\"anchor\" href=\"/react/accessibility#keyboard-focus-and-focus-outline\"></a>Foco de teclado y contorno de foco </h3>\n<p>El foco del teclado se refiere al elemento actual en el DOM que est\u00e1 seleccionado para aceptar la entrada desde el teclado. Lo vemos en todas partes como un contorno de foco similar al que se muestra en la siguiente imagen:</p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/dec0e6bcc1f882baf76ebc860d4f04e5/4fcfe/keyboard-focus.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/dec0e6bcc1f882baf76ebc860d4f04e5/4fcfe/keyboard-focus.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Solamente use CSS que elimine este contorno, por ejemplo, configurando <code class=\"language-javascript\">outline: 0</code>, si lo va a reemplazar por otra implementaci\u00f3n de contorno de foco.</p>\n<h3 id=\"mechanisms-to-skip-to-desired-content\"><a class=\"anchor\" href=\"/react/accessibility#mechanisms-to-skip-to-desired-content\"></a>Mecanismos para omitir hacia el contenido deseado. </h3>\n<p>Proporcione un mecanismo para permitir que los usuarios omitan las secciones de navegaci\u00f3n en su aplicaci\u00f3n, ya que esto ayuda y acelera la navegaci\u00f3n con el teclado.</p>\n<p>Skiplink o Skip Navigation son enlaces de navegaci\u00f3n ocultos que solo se hacen visibles cuando los usuarios de teclado interact\u00faan con la p\u00e1gina. Son muy f\u00e1ciles de implementar con anclajes internos de p\u00e1gina y algunos estilos:</p>\n<ul>\n<li><a class=\"external-link\" href=\"http://webaim.org/techniques/skipnav/\">WebAIM - Omitir enlaces de navegaci\u00f3n</a></li>\n</ul>\n<p>Tambi\u00e9n utilice elementos y roles de puntos de referencia, como <code class=\"language-javascript\">&lt;main&gt;</code> y <code class=\"language-javascript\">&lt;aside&gt;</code>, para delimitar las regiones de la p\u00e1gina ya que la tecnolog\u00eda de asistencia permite al usuario navegar r\u00e1pidamente a estas secciones.</p>\n<p>Lea m\u00e1s sobre el uso de estos elementos para mejorar la accesibilidad aqu\u00ed:</p>\n<ul>\n<li><a class=\"external-link\" href=\"http://www.scottohara.me/blog/2018/03/03/landmarks.html\">Puntos de referencia accesibles</a></li>\n</ul>\n<h3 id=\"programmatically-managing-focus\"><a class=\"anchor\" href=\"/react/accessibility#programmatically-managing-focus\"></a>Gestionando program\u00e1ticamente el foco. </h3>\n<p>Nuestras aplicaciones React modifican continuamente el DOM de HTML durante el tiempo de ejecuci\u00f3n, lo que a veces hace que el foco del teclado se pierda o se establezca en un elemento inesperado. Para reparar esto, tenemos que empujar program\u00e1ticamente el foco del teclado en la direcci\u00f3n correcta. Por ejemplo, al restablecer el foco del teclado a un bot\u00f3n que abri\u00f3 una ventana modal despu\u00e9s de que se cierre esa ventana modal.</p>\n<p>MDN Web Docs analiza esto y describe c\u00f3mo podemos construir <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets\">widgets de JavaScript navegables por el teclado</a>.</p>\n<p>Para establecer el foco en React, podemos usar <a href=\"/react/refs-and-the-dom\">Referencias a elementos del DOM</a>.</p>\n<p>Usando esto, primero creamos una referencia a un elemento en el JSX de una clase de componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Crea una referencia para almacenar el elemento textInput del DOM</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Utiliza la devoluci\u00f3n de llamada `ref` para almacenar una referencia al elemento DOM de entrada de texto </span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// en un campo de instancia (por ejemplo, this.textInput).</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span></span>      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Entonces podemos enfocarlo en otro lugar de nuestro componente cuando sea necesario:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Enfoca expl\u00edcitamente la entrada de texto usando la API de DOM sin formato</span>\n    <span class=\"token comment\">// Nota: estamos accediendo a \"actual\" para obtener el nodo DOM</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A veces, un componente padre debe establecer el foco en un elemento dentro de un componente hijo. Podemos hacer esto <a href=\"/react/refs-and-the-dom#exposing-dom-refs-to-parent-components\">exponiendo las referencias del DOM a los componentes padre</a> a trav\u00e9s de una prop especial en el componente hijo que env\u00eda la referencia del padre al nodo DOM del hijo.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomTextInput</span></span> <span class=\"token attr-name\">inputRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Ahora puedes establecer el foco cuando sea necesario.</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cuando se utiliza un <a href=\"/react/higher-order-components\">HOC</a> para extender componentes, se recomienda <a href=\"/react/forwarding-refs\">reenviar la referencia</a> al componente envuelto usando la funci\u00f3n <code class=\"language-javascript\">forwardRef</code> de React. Si un HOC de un tercero no implementa el reenv\u00edo de ref, el patr\u00f3n anterior se puede utilizar como una alternativa de todas formas.</p>\n<p>Un gran ejemplo de gesti\u00f3n de foco es el <a class=\"external-link\" href=\"https://github.com/davidtheclark/react-aria-modal\">react-aria-modal</a>. Este es un ejemplo relativamente raro de una ventana modal totalmente accesible. No solo establece el foco inicial en el bot\u00f3n de cancelaci\u00f3n (lo que evita que el usuario de teclado active accidentalmente la acci\u00f3n exitosa) y atrapa el foco del teclado dentro del modal, sino que tambi\u00e9n restablece el foco hacia el elemento que inicialmente activ\u00f3 el modal.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Si bien esta es una caracter\u00edstica de accesibilidad muy importante, tambi\u00e9n es una t\u00e9cnica que debe usarse con prudencia. \u00dasalo para reparar el flujo de foco del teclado cuando est\u00e1 perturbado, no para intentar anticipar c\u00f3mo\nlos usuarios desean usar las aplicaciones.</p>\n</div>\n<h2 id=\"mouse-and-pointer-events\"><a class=\"anchor\" href=\"/react/accessibility#mouse-and-pointer-events\"></a>Eventos de rat\u00f3n y puntero </h2>\n<p>Aseg\u00farate que tambi\u00e9n se puede acceder a todas las funciones expuestas a trav\u00e9s de un evento de mouse o puntero utilizando solo el teclado. Dependiendo solo del dispositivo puntero llevar\u00e1 a muchos casos donde Los usuarios de teclado no pueden usar tu aplicaci\u00f3n.</p>\n<p>Para ilustrar esto, veamos un ejemplo prol\u00edfico de accesibilidad rota causada por eventos de clic. Este es el patr\u00f3n de clic externo, donde un usuario puede deshabilitar una ventana emergente abierta haciendo clic fuera del elemento.</p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//5523b05b22210c5a2fa0bd1f01339cb3/outerclick-with-mouse.gif\">Image link</a>\n<p>Esto se implementa normalmente adjuntando un evento <code class=\"language-javascript\">click</code> al objeto<code class=\"language-javascript\">window</code> que cierra la ventana emergente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OuterClickExample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClickOutsideHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickOutsideHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>currentState<span class=\"token punctuation\">.</span>isOpen\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onClickOutsideHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleContainer<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Select an option</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto puede funcionar bien para los usuarios con dispositivos de puntero, como un rat\u00f3n, pero si lo hace solo con el teclado la funcionalidad se rompe al pasar al elemento siguiente, ya que el objeto <code class=\"language-javascript\">window</code> nunca recibe el evento<code class=\"language-javascript\">click</code>. Esto puede llevar a una funcionalidad oculta que impide que los usuarios utilicen tu aplicaci\u00f3n</p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//eca0ca825c8c5e2aa609cee72ef47e27/outerclick-with-keyboard.gif\">Image link</a>\n<p>La misma funcionalidad se puede lograr utilizando un controlador de eventos apropiado, como <code class=\"language-javascript\">onBlur</code> y<code class=\"language-javascript\">onFocus</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlurExample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onBlurHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onBlurHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFocusHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onFocusHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">onClickHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>currentState<span class=\"token punctuation\">.</span>isOpen\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Cerramos la ventana emergente en el siguiente tick usando setTimeout.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Esto es necesario porque primero debemos comprobar </span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// si otro hijo del elemento ha recibido el foco ya que</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// el evento de desenfoque se dispara antes del nuevo evento de foco.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onBlurHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Si un hijo recibe el foco, no cerrar la ventana emergente.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">onFocusHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// React nos ayuda burbujeando los eventos de desenfoque</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// y enfoque hacia los padres.</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onBlur</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onBlurHandler<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">           <span class=\"token attr-name\">onFocus</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onFocusHandler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClickHandler<span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">aria-haspopup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">aria-expanded</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Select an option</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Option 3</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este c\u00f3digo expone la funcionalidad a los usuarios del dispositivo puntero y de teclado. Tambi\u00e9n ten en cuenta las props <code class=\"language-javascript\">aria- *</code> para apoyar a los usuarios de lectores de pantalla. Por simplicidad, no se han implementado los eventos de teclado para habilitar la interacci\u00f3n <code class=\"language-javascript\">arrow key</code> de las opciones de ventanas emergentes.</p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//28ce2067489843caf05fe7ce22494542/blur-popover-close.gif\">Image link</a>\n<p>Este es un ejemplo de muchos casos en los que, dependiendo de solo el puntero y el mouse, los eventos interrumpir\u00e1n la funcionalidad para los usuarios de teclado. Probando siempre con el teclado resaltar\u00e1 de inmediato las \u00e1reas problem\u00e1ticas que luego se pueden solucionar mediante el uso de controladores de eventos compatibles con el teclado.</p>\n<h2 id=\"more-complex-widgets\"><a class=\"anchor\" href=\"/react/accessibility#more-complex-widgets\"></a>Widgets m\u00e1s complejos </h2>\n<p>Una experiencia de usuario m\u00e1s compleja no debe significar que sea menos accesible. Mientras que la accesibilidad se logra m\u00e1s f\u00e1cilmente mediante la codificaci\u00f3n lo m\u00e1s cerca posible de HTML, incluso el widget m\u00e1s complejo se puede codificar de manera accesible.</p>\n<p>Aqu\u00ed requerimos conocimiento de <a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria/#roles\">Roles de ARIA</a> as\u00ed como <a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria/#states_and_properties\">Estados y propiedades de ARIA</a>.\nEstas son cajas de herramientas llenas de atributos HTML que son totalmente compatibles con JSX y nos permiten construir componentes React completamente accesibles y altamente funcionales.</p>\n<p>Cada tipo de widget tiene un patr\u00f3n de dise\u00f1o espec\u00edfico y se espera que funcione de una manera determinada por parte de usuarios y agentes de usuarios por igual:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria-practices/#aria_ex\">Pr\u00e1cticas de autor\u00eda de WAI-ARIA - Patrones de dise\u00f1o y widgets</a></li>\n<li><a class=\"external-link\" href=\"https://heydonworks.com/article/practical-aria-examples/\">Heydon Pickering - Ejemplos ARIA</a></li>\n<li><a class=\"external-link\" href=\"https://inclusive-components.design/\">Componentes Inclusivos</a></li>\n</ul>\n<h2 id=\"other-points-for-consideration\"><a class=\"anchor\" href=\"/react/accessibility#other-points-for-consideration\"></a>Otros puntos a considerar </h2>\n<h3 id=\"setting-the-language\"><a class=\"anchor\" href=\"/react/accessibility#setting-the-language\"></a>Configurando el idioma </h3>\n<p>Indique el idioma humano de los textos de la p\u00e1gina, ya que el software del lector de pantalla lo utiliza para seleccionar la configuraci\u00f3n de voz correcta:</p>\n<ul>\n<li><a class=\"external-link\" href=\"http://webaim.org/techniques/screenreader/#language\">WebAIM - Documento de lenguaje</a></li>\n</ul>\n<h3 id=\"setting-the-document-title\"><a class=\"anchor\" href=\"/react/accessibility#setting-the-document-title\"></a>Configuraci\u00f3n del t\u00edtulo del documento </h3>\n<p>Configure el <code class=\"language-javascript\">&lt;title&gt;</code> del documento para que describa correctamente el contenido de la p\u00e1gina actual, ya que esto garantiza que el usuario est\u00e9 al tanto del contexto de la p\u00e1gina actual:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-title.html\">WCAG - Comprendiendo el requisito del t\u00edtulo del documento</a></li>\n</ul>\n<p>Podemos configurar esto en React usando el <a class=\"external-link\" href=\"https://github.com/gaearon/react-document-title\">Componente T\u00edtulo del Documento de React</a>.</p>\n<h3 id=\"color-contrast\"><a class=\"anchor\" href=\"/react/accessibility#color-contrast\"></a>Contraste de color </h3>\n<p>Aseg\u00farese de que todo el texto legible en su sitio web tenga el contraste de color suficiente para que los usuarios con poca visi\u00f3n puedan leerlo al m\u00e1ximo:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html\">WCAG - Comprender el requisito de contraste de color</a></li>\n<li><a class=\"external-link\" href=\"https://www.smashingmagazine.com/2014/10/color-contrast-tips-and-tools-for-accessibility/\">Todo sobre el contraste de color y por qu\u00e9 debes repensarlo</a></li>\n<li><a class=\"external-link\" href=\"http://a11yproject.com/posts/what-is-color-contrast/\">A11yProject - \u00bfQu\u00e9 es el contraste de color?</a></li>\n</ul>\n<p>Puede ser tedioso calcular manualmente las combinaciones de colores adecuadas para todos los casos en tu sitio web, por lo que puede <a class=\"external-link\" href=\"https://colorable.jxnblk.com/\">calcular una paleta de colores accesible completa con Colorable</a>.</p>\n<p>Tanto las herramientas aXe como WAVE que se mencionan a continuaci\u00f3n tambi\u00e9n incluyen pruebas de contraste de color e informar\u00e1n sobre errores de contraste.</p>\n<p>Si desea ampliar sus habilidades de prueba de contraste, puede utilizar estas herramientas:</p>\n<ul>\n<li><a class=\"external-link\" href=\"http://webaim.org/resources/contrastchecker/\">WebAIM - Comprobador de contraste de color</a></li>\n<li><a class=\"external-link\" href=\"https://www.paciellogroup.com/resources/contrastanalyser/\">El Grupo Paciello - Color Contrast Analyzer</a></li>\n</ul>\n<h2 id=\"development-and-testing-tools\"><a class=\"anchor\" href=\"/react/accessibility#development-and-testing-tools\"></a>Herramientas de desarrollo y pruebas </h2>\n<p>Hay una serie de herramientas que podemos utilizar para ayudar en la creaci\u00f3n de aplicaciones web accesibles.</p>\n<h3 id=\"the-keyboard\"><a class=\"anchor\" href=\"/react/accessibility#the-keyboard\"></a>El teclado </h3>\n<p>La comprobaci\u00f3n m\u00e1s f\u00e1cil y tambi\u00e9n una de las m\u00e1s importantes es, por mucho, comprobar si se puede acceder a todo el sitio web y usarlo solo con el teclado. H\u00e1galo de la siguiente forma:</p>\n<ol>\n<li>Desconectando tu rat\u00f3n.</li>\n<li>Usando <code class=\"language-javascript\">Tab</code> y <code class=\"language-javascript\">Shift + Tab</code> para navegar.</li>\n<li>Usando <code class=\"language-javascript\">Enter</code> para activar elementos.</li>\n<li>Cuando sea necesario, utiliza las teclas de flecha del teclado para interactuar con algunos elementos, como men\u00fas y men\u00fas desplegables.</li>\n</ol>\n<h3 id=\"development-assistance\"><a class=\"anchor\" href=\"/react/accessibility#development-assistance\"></a>Asistencia para el desarrollo </h3>\n<p>Podemos verificar algunas funciones de accesibilidad directamente en nuestro c\u00f3digo JSX. A menudo, las comprobaciones de intellisense para roles, estados y propiedades ARIA ya son proporcionadas en IDE\u2019s preparados para JSX. Tambi\u00e9n tenemos acceso a la siguiente herramienta:</p>\n<h4 id=\"eslint-plugin-jsx-a11y\"><a class=\"anchor\" href=\"/react/accessibility#eslint-plugin-jsx-a11y\"></a>eslint-plugin-jsx-a11y </h4>\n<p>El complemento [eslint-plugin-jsx-a11y] (<a class=\"external-link\" href=\"https://github.com/evcohen/eslint-plugin-jsx-a11y\">https://github.com/evcohen/eslint-plugin-jsx-a11y</a>) para ESLint proporciona linting de AST sobre los problemas de accesibilidad en tu JSX. Muchos IDE\u2019s te permiten integrar estos hallazgos directamente en el an\u00e1lisis de c\u00f3digo y las ventanas de c\u00f3digo fuente.</p>\n<p><a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a> tiene este complemento con un subconjunto de reglas activadas. Si desea habilitar a\u00fan m\u00e1s reglas de accesibilidad, puede crear un archivo <code class=\"language-javascript\">.eslintrc</code> en la ra\u00edz de su proyecto con este contenido:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsxon\"><code class=\"language-javascript\">{\n  \"extends\": [\"react-app\", \"plugin:jsx-a11y/recommended\"],\n  \"plugins\": [\"jsx-a11y\"]\n}</code></pre></div>\n<h3 id=\"testing-accessibility-in-the-browser\"><a class=\"anchor\" href=\"/react/accessibility#testing-accessibility-in-the-browser\"></a>Probando accesibilidad en el navegador. </h3>\n<p>Existen varias herramientas que pueden ejecutar auditor\u00edas de accesibilidad en las p\u00e1ginas web de su navegador. Util\u00edzalas en combinaci\u00f3n con otras comprobaciones de accesibilidad que se mencionan aqu\u00ed, ya que solo pueden probar la accesibilidad t\u00e9cnica de su HTML.</p>\n<h4 id=\"axe-axe-core-and-react-axe\"><a class=\"anchor\" href=\"/react/accessibility#axe-axe-core-and-react-axe\"></a>aXe, aXe-core y react-axe </h4>\n<p>Deque Systems offers <a class=\"external-link\" href=\"https://github.com/dequelabs/axe-core\">aXe-core</a> for automated and end-to-end accessibility tests of your applications. This module includes integrations for Selenium.</p>\n<p><a class=\"external-link\" href=\"https://www.deque.com/products/axe/\">El Motor de Accesibilidad</a> o aXe (por sus siglas en ingl\u00e9s), es una extensi\u00f3n inspectora de accesibilidad del navegador construida sobre <code class=\"language-javascript\">aXe-core</code>.</p>\n<p>Tambi\u00e9n puede usar el m\u00f3dulo <a class=\"external-link\" href=\"https://github.com/dequelabs/axe-core-npm/tree/develop/packages/react\">react-axe</a> para informar estos hallazgos de accesibilidad directamente a la consola mientras desarrolla y depura.</p>\n<h4 id=\"webaim-wave\"><a class=\"anchor\" href=\"/react/accessibility#webaim-wave\"></a>WebAIM WAVE </h4>\n<p>La <a class=\"external-link\" href=\"http://wave.webaim.org/extension/\">Herramienta de evaluaci\u00f3n de accesibilidad web</a> (WAVE por sus siglas en ingl\u00e9s) es otra extensi\u00f3n de accesibilidad del navegador.</p>\n<h4 id=\"accessibility-inspectors-and-the-accessibility-tree\"><a class=\"anchor\" href=\"/react/accessibility#accessibility-inspectors-and-the-accessibility-tree\"></a>Inspectores de accesibilidad y el \u00c1rbol de Accesibilidad </h4>\n<p><a class=\"external-link\" href=\"https://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/\">El \u00c1rbol de Accesibilidad</a> es un subconjunto del \u00e1rbol DOM que contiene objetos accesibles para cada elemento del DOM que deber\u00eda ser expuesto a la tecnolog\u00eda de asistencia, como los lectores de pantalla.</p>\n<p>En algunos navegadores podemos ver f\u00e1cilmente la informaci\u00f3n de accesibilidad para cada elemento en el \u00e1rbol de accesibilidad:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector\">Usando el inspector de accesibilidad en Firefox</a></li>\n<li><a class=\"external-link\" href=\"https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#pane\">Activar el inspector de accesibilidad en Chrome</a></li>\n<li><a class=\"external-link\" href=\"https://developer.apple.com/library/content/documentation/Accessibility/Conceptual/AccessibilityMacOSX/OSXAXTestingApps.html\">Usando el inspector de accesibilidad en OS X Safari</a></li>\n</ul>\n<h3 id=\"screen-readers\"><a class=\"anchor\" href=\"/react/accessibility#screen-readers\"></a>Lectores de pantalla </h3>\n<p>Las pruebas con un lector de pantalla deben formar parte de sus pruebas de accesibilidad.</p>\n<p>Ten en cuenta que las combinaciones de navegador / lector de pantalla son importantes. Se recomienda que pruebe su aplicaci\u00f3n en el navegador que mejor se adapte a su lector de pantalla.</p>\n<h3 id=\"commonly-used-screen-readers\"><a class=\"anchor\" href=\"/react/accessibility#commonly-used-screen-readers\"></a>Lectores de pantalla de uso com\u00fan </h3>\n<h4 id=\"nvda-in-firefox\"><a class=\"anchor\" href=\"/react/accessibility#nvda-in-firefox\"></a>NVDA en Firefox </h4>\n<p><a class=\"external-link\" href=\"https://www.nvaccess.org/\">Acceso a Escritorio No Visual</a> o NVDA  por sus siglas en ingl\u00e9s, es un lector de pantalla de Windows de c\u00f3digo abierto que es ampliamente usado.</p>\n<p>Consulte las siguientes gu\u00edas sobre c\u00f3mo utilizar mejor NVDA:</p>\n<ul>\n<li><a class=\"external-link\" href=\"http://webaim.org/articles/nvda/\">WebAIM - Usando NVDA para evaluar la accesibilidad web</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/nvda-keyboard-shortcuts\">Deque - Atajos de teclado NVDA</a></li>\n</ul>\n<h4 id=\"voiceover-in-safari\"><a class=\"anchor\" href=\"/react/accessibility#voiceover-in-safari\"></a>VoiceOver en Safari </h4>\n<p>VoiceOver es un lector de pantalla integrado en dispositivos Apple.</p>\n<p>Consulta las siguientes gu\u00edas sobre c\u00f3mo activar y usar VoiceOver:</p>\n<ul>\n<li><a class=\"external-link\" href=\"http://webaim.org/articles/voiceover/\">WebAIM - Uso de VoiceOver para evaluar la accesibilidad web</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/voiceover-keyboard-shortcuts\">Deque - VoiceOver para los atajos de teclado de OS X</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/voiceover-ios-shortcuts\">Deque - VoiceOver para accesos directos de iOS</a></li>\n</ul>\n<h4 id=\"jaws-in-internet-explorer\"><a class=\"anchor\" href=\"/react/accessibility#jaws-in-internet-explorer\"></a>JAWS en Internet Explorer </h4>\n<p><a class=\"external-link\" href=\"http://www.freedomscientific.com/Products/Blindness/JAWS\">Acceso al Trabajo con el Habla</a> o JAWS por sus siglas en ingl\u00e9s, es un lector de pantalla de uso prol\u00edfico en Windows.</p>\n<p>Consulte las siguientes gu\u00edas sobre c\u00f3mo utilizar mejor JAWS:</p>\n<ul>\n<li><a class=\"external-link\" href=\"http://webaim.org/articles/jaws/\">WebAIM - Uso de JAWS para evaluar la accesibilidad web</a></li>\n<li><a class=\"external-link\" href=\"https://dequeuniversity.com/screenreaders/jaws-keyboard-shortcuts\">Deque - Atajos de teclado de JAWS</a></li>\n</ul>\n<h3 id=\"other-screen-readers\"><a class=\"anchor\" href=\"/react/accessibility#other-screen-readers\"></a>Otros lectores de pantalla </h3>\n<h4 id=\"chromevox-in-google-chrome\"><a class=\"anchor\" href=\"/react/accessibility#chromevox-in-google-chrome\"></a>ChromeVox en Google Chrome </h4>\n<p><a class=\"external-link\" href=\"http://www.chromevox.com/\">ChromeVox</a> es un lector de pantalla integrado en Chromebooks y est\u00e1 disponible <a class=\"external-link\" href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn?hl=es\">como una extensi\u00f3n</a> para Google Chrome.</p>\n<p>Refer to the following guides on how best to use ChromeVox:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://support.google.com/chromebook/answer/7031755?hl=es\">Ayuda de Google Chromebook - Usa el lector de pantalla incorporado</a></li>\n<li><a class=\"external-link\" href=\"http://www.chromevox.com/keyboard_shortcuts.html\">Referencia de accesos directos del teclado cl\u00e1sico de ChromeVox</a></li>\n</ul></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/accessibility.md\">Edit this page</a></p></div></article>", "path": "/react/accessibility", "nav": ["/react/thinking-in-react", "/react/code-splitting"]}, {"key": "Divisi\u00f3n de c\u00f3digo", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h2 id=\"bundling\"><a class=\"anchor\" href=\"/react/code-splitting#bundling\"></a><em>Bundling</em> </h2>\n<p>La mayor\u00eda de las aplicaciones React tendr\u00e1n sus archivos \u201cempaquetados\u201d o en un <em>bundle</em> con herramientas como <a class=\"external-link\" href=\"https://webpack.js.org/\">Webpack</a>, <a class=\"external-link\" href=\"https://rollupjs.org/\">Rollup</a> o  <a class=\"external-link\" href=\"http://browserify.org/\">Browserify</a>. El <em>bundling</em> es el proceso de seguir los archivos importados y fusionarlos en un archivo \u00fanico: un <em>bundle</em> o \u201cpaquete\u201d. Este <em>bundle</em> se puede incluir en una p\u00e1gina web para cargar una aplicaci\u00f3n completa de una sola vez.</p>\n<h4 id=\"example\"><a class=\"anchor\" href=\"/react/code-splitting#example\"></a>Ejemplo </h4>\n<p><strong>App:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// app.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./math.js'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// math.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Bundle:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Tus <em>bundles</em> van a lucir muy diferente a esto.</p>\n</div>\n<p>Si usas <a class=\"external-link\" href=\"https://create-react-app.dev/\">Create React App</a>, <a class=\"external-link\" href=\"https://nextjs.org/\">Next.js</a>, <a class=\"external-link\" href=\"https://www.gatsbyjs.org/\">Gatsby</a>, o una herramienta similar, vas a tener una configuraci\u00f3n de Webpack incluida para generar el <em>bundle</em> de tu aplicaci\u00f3n.</p>\n<p>Si no, t\u00fa mismo vas a tener que configurar el <em>bundling</em>. Por ejemplo, revisa las gu\u00edas <a class=\"external-link\" href=\"https://webpack.js.org/guides/installation/\">Installation</a> y <a class=\"external-link\" href=\"https://webpack.js.org/guides/getting-started/\">Getting Started</a> en la documentaci\u00f3n de Webpack.</p>\n<h2 id=\"code-splitting\"><a class=\"anchor\" href=\"/react/code-splitting#code-splitting\"></a>Divisi\u00f3n de c\u00f3digo </h2>\n<p>El <em>Bundling</em> es genial, pero a medida que tu aplicaci\u00f3n crezca, tu <em>bundle</em> tambi\u00e9n crecer\u00e1. Especialmente si incluyes grandes bibliotecas de terceros. Necesitas vigilar el c\u00f3digo que incluyes en tu <em>bundle</em>, de manera que no lo hagas accidentalmente tan grande que tu aplicaci\u00f3n se tome mucho tiempo en cargar.</p>\n<p>Para evitar terminar con un <em>bundle</em> grande, es bueno adelantarse al problema y comenzar a dividir tu <em>bundle</em>. Divisi\u00f3n de c\u00f3digo es una funcionalidad disponible en <em>bundlers</em> como <a class=\"external-link\" href=\"https://webpack.js.org/guides/code-splitting/\">Webpack</a>, <a class=\"external-link\" href=\"https://rollupjs.org/guide/en/#code-splitting\">Rollup</a> y Browserify (v\u00eda <a class=\"external-link\" href=\"https://github.com/browserify/factor-bundle\">factor-bundle</a>) que puede crear m\u00faltiples <em>bundles</em> a ser cargados din\u00e1micamente durante la ejecuci\u00f3n de tu aplicaci\u00f3n.</p>\n<p>Dividir el c\u00f3digo de tu aplicaci\u00f3n puede ayudarte a cargar solo lo necesario en cada momento para el usuario, lo cual puede mejorar dram\u00e1ticamente el rendimiento de tu aplicaci\u00f3n. Si bien no habr\u00e1s reducido la cantidad total de c\u00f3digo en tu aplicaci\u00f3n, habr\u00e1s evitado cargar c\u00f3digo que el usuario podr\u00eda no necesitar nunca, y reducido la cantidad necesaria de c\u00f3digo durante la carga inicial.</p>\n<h2 id=\"import\"><a class=\"anchor\" href=\"/react/code-splitting#import\"></a><code class=\"language-javascript\">import()</code> </h2>\n<p>La mejor manera de introducir divisi\u00f3n de c\u00f3digo en tu aplicaci\u00f3n es a trav\u00e9s de la sintaxis de <code class=\"language-javascript\">import()</code> din\u00e1mico.</p>\n<p><strong>Antes:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./math'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Despu\u00e9s:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./math\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">math</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cuando Webpack se encuentra esta sintaxis, comienza a dividir el c\u00f3digo de tu aplicaci\u00f3n autom\u00e1ticamente. Si est\u00e1s usando Create React App, esto ya viene\nconfigurado para ti y puedes comenzar a <a class=\"external-link\" href=\"https://create-react-app.dev/docs/code-splitting/\">usarlo</a>. Tambi\u00e9n es compatible por defecto en <a class=\"external-link\" href=\"https://nextjs.org/docs/advanced-features/dynamic-import\">Next.js</a>.</p>\n<p>Si configuras Webpack por ti mismo, probablemente vas a querer leer la <a class=\"external-link\" href=\"https://webpack.js.org/guides/code-splitting/\">gu\u00eda sobre divisi\u00f3n de c\u00f3digo</a> de Webpack. Tu configuraci\u00f3n de Webpack deber\u00eda verse vagamente <a class=\"external-link\" href=\"https://gist.github.com/gaearon/ca6e803f5c604d37468b0091d9959269\">como esta</a>.</p>\n<p>Cuando uses <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a>, tienes que asegurarte de que Babel reconozca la sintaxis de <code class=\"language-javascript\">import()</code> din\u00e1mico pero no la transforme. Para ello vas a necesitar <a class=\"external-link\" href=\"https://classic.yarnpkg.com/en/package/@babel/plugin-syntax-dynamic-import\">@babel/plugin-syntax-dynamic-import</a>.</p>\n<h2 id=\"reactlazy\"><a class=\"anchor\" href=\"/react/code-splitting#reactlazy\"></a><code class=\"language-javascript\">React.lazy</code> </h2>\n<p>La funci\u00f3n <code class=\"language-javascript\">React.lazy</code> te deja renderizar un <em>import</em> din\u00e1mico como un componente regular.</p>\n<p><strong>Antes:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> OtherComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Despu\u00e9s:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">React.lazy</code> recibe una funci\u00f3n que debe ejecutar un <code class=\"language-javascript\">import()</code> din\u00e1mico. Este debe retornar una <code class=\"language-javascript\">Promise</code> que se resuelve en un m\u00f3dulo con un <em>export</em> <code class=\"language-javascript\">default</code> que contenga un componente de React.</p>\n<p>El componente lazy deber\u00eda entonces ser renderizado adentro de un componente <code class=\"language-javascript\">Suspense</code>, lo que nos permite mostrar alg\u00fan contenido predeterminado (como un indicador de carga) mientras estamos esperando a que el componente lazy cargue.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La prop <code class=\"language-javascript\">fallback</code> acepta cualquier elemento de React que quieras renderizar mientras esperas que <code class=\"language-javascript\">OtherComponent</code> cargue. Puedes poner el componente <code class=\"language-javascript\">Suspense</code> en cualquier parte sobre el componente lazy. Incluso puedes envolver m\u00faltiples componentes lazy con un solo componente <code class=\"language-javascript\">Suspense</code>.   </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> AnotherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./AnotherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnotherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"avoiding-fallbacks\"><a class=\"anchor\" href=\"/react/code-splitting#avoiding-fallbacks\"></a>Evitar el fallback </h3>\n<p>Cualquier componente puede suspenderse como resultado del renderizado, incluso componentes que ya se mostraron al usuario. Para que el contenido de la pantalla siempre sea consistente, si un componente que ya se ha mostrado se suspende, React trata de esconder su \u00e1rbol hacia arriba hasta la barrera <code class=\"language-javascript\">&lt;Suspense&gt;</code> m\u00e1s cercana. Sin embargo, desde la perspectiva del usuario esto puede desorientar.</p>\n<p>Considera este componente para cambiar de pesta\u00f1a:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Tabs <span class=\"token keyword\">from</span> <span class=\"token string\">'./Tabs'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Glimmer <span class=\"token keyword\">from</span> <span class=\"token string\">'./Glimmer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Comments <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Comments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Photos <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Photos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tab<span class=\"token punctuation\">,</span> setTab<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'photos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleTabSelect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTab</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tabs</span></span> <span class=\"token attr-name\">onTabSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleTabSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Glimmer</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>tab <span class=\"token operator\">===</span> <span class=\"token string\">'photos'</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Photos</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comments</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En este ejemplo, si la pesta\u00f1a se cambia de <code class=\"language-javascript\">'photos'</code> a <code class=\"language-javascript\">'comments'</code>, pero <code class=\"language-javascript\">Comments</code> se suspende, el usuario solo ver\u00e1 un destello. Esto tiene sentido porque el usuario no quiere ya ver <code class=\"language-javascript\">Photos</code>, el componente <code class=\"language-javascript\">Comments</code> a\u00fan no est\u00e1 listo para renderizar nada, y React necesita mantener la experiencia de usuario de forma consistente, as\u00ed que no tiene otra opci\u00f3n que mostrar el componente <code class=\"language-javascript\">Glimmer</code> de arriba.</p>\n<p>Sin embargo, a veces esta experiencia de usuario no es deseable. En particular, a veces es mejor mostrar la IU \u201cvieja\u201d mientras se prepara la nueva IU. Puedes usar la nueva API <a href=\"/react/react-api#starttransition\"><code class=\"language-javascript\">startTransition</code></a> para que React haga esto:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleTabSelect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTab</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aqu\u00ed, le dices a React que poner la pesta\u00f1a en <code class=\"language-javascript\">'comments'</code> no es una actualizaci\u00f3n urgente, sino que es una <a href=\"/react/react-api#transitions\">transici\u00f3n</a> que puede tomar alg\u00fan tiempo. React mantendr\u00e1 entonces la IU anterior en su lugar y a\u00fan interactiva, y cambiar\u00e1 a mostrar <code class=\"language-javascript\">&lt;Comments /&gt;</code> cuando est\u00e9 lista. Mira <a href=\"/react/react-api#transitions\">Transiciones</a> para m\u00e1s informaci\u00f3n.</p>\n<h3 id=\"error-boundaries\"><a class=\"anchor\" href=\"/react/code-splitting#error-boundaries\"></a>L\u00edmites de error </h3>\n<p>Si el otro m\u00f3dulo no se carga (por ejemplo, debido a un fallo de la red), se generar\u00e1 un error. Puedes manejar estos errores para mostrar una buena experiencia de usuario y manejar la recuperaci\u00f3n con <a href=\"/react/error-boundaries\">L\u00edmites de error</a>. Una vez hayas creado tu l\u00edmite de error (Error Boundary) puedes usarlo en cualquier parte sobre tus componentes lazy para mostrar un estado de error cuando haya un error de red.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MyErrorBoundary <span class=\"token keyword\">from</span> <span class=\"token string\">'./MyErrorBoundary'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> AnotherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./AnotherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnotherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"route-based-code-splitting\"><a class=\"anchor\" href=\"/react/code-splitting#route-based-code-splitting\"></a>Divisi\u00f3n de c\u00f3digo basada en rutas </h2>\n<p>Decidir en qu\u00e9 parte de tu aplicaci\u00f3n introducir la divisi\u00f3n de c\u00f3digo puede ser un poco complicado. Quieres asegurarte de elegir lugares que dividan los <em>bundles</em> de manera uniforme, sin interrumpir la experiencia del usuario.</p>\n<p>Un buen lugar para comenzar es con las rutas. La mayor\u00eda de la gente en la web est\u00e1 acostumbrada a que las transiciones entre p\u00e1ginas se tomen cierto tiempo en cargar. Tambi\u00e9n tiendes a volver a renderizar todo de una vez, as\u00ed que es improbable que tus usuarios interact\u00faen con otros elementos en la p\u00e1gina al mismo tiempo.</p>\n<p>Este es un ejemplo de c\u00f3mo configurar la divisi\u00f3n de c\u00f3digo basada en rutas en tu aplicaci\u00f3n usando bibliotecas como <a class=\"external-link\" href=\"https://reactrouter.com/\">React Router</a> con <code class=\"language-javascript\">React.lazy</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Suspense<span class=\"token punctuation\">,</span> lazy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span> Routes<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Home <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/Home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> About <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/About'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Routes</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">element</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Home</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">element</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">About</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Routes</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"named-exports\"><a class=\"anchor\" href=\"/react/code-splitting#named-exports\"></a>Exports con nombres </h2>\n<p><code class=\"language-javascript\">React.lazy</code> actualmente solo admite <em>exports</em> tipo <code class=\"language-javascript\">default</code>. Si el m\u00f3dulo que desea importar utiliza <em>exports</em> con nombre, puede crear un m\u00f3dulo intermedio que lo vuelva a exportar como <code class=\"language-javascript\">default</code>. Esto garantiza que el <em>tree shaking</em> siga funcionando y que no importes componentes no utilizados.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// ManyComponents.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MyUnusedComponent <span class=\"token operator\">=</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// MyComponent.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> MyComponent <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ManyComponents.js\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// MyApp.js</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> lazy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./MyComponent.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/code-splitting.md\">Edit this page</a></p></div></article>", "path": "/react/code-splitting", "nav": ["/react/accessibility", "/react/context"]}, {"key": "Contexto", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Context provee una forma de pasar datos a trav\u00e9s del \u00e1rbol de componentes sin tener que pasar <em>props</em> manualmente en cada nivel.</p>\n<p>En una aplicaci\u00f3n t\u00edpica de React, los datos se pasan de arriba hacia abajo (de padre a hijo) a trav\u00e9s de <em>props</em>, pero esta forma puede resultar inc\u00f3moda para ciertos tipos de <em>props</em> (por ejemplo, localizaci\u00f3n, el tema de la interfaz) que son necesarias para muchos componentes dentro de una aplicaci\u00f3n. Context proporciona una forma de compartir valores como estos entre componentes sin tener que pasar expl\u00edcitamente una <em>prop</em> a trav\u00e9s de cada nivel del \u00e1rbol.</p>\n<ul>\n<li><a href=\"/react/context#when-to-use-context\">Cu\u00e1ndo usar Context</a></li>\n<li><a href=\"/react/context#before-you-use-context\">Antes de usar Context</a></li>\n<li>\n<p><a href=\"/react/context#api\">API</a></p>\n<ul>\n<li><a href=\"/react/context#reactcreatecontext\">React.createContext</a></li>\n<li><a href=\"/react/context#contextprovider\">Context.Provider</a></li>\n<li><a href=\"/react/context#classcontexttype\">Class.contextType</a></li>\n<li><a href=\"/react/context#contextconsumer\">Context.Consumer</a></li>\n<li><a href=\"/react/context#contextdisplayname\">Context.displayName</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/context#examples\">Ejemplos</a></p>\n<ul>\n<li><a href=\"/react/context#dynamic-context\">Context din\u00e1mico</a></li>\n<li><a href=\"/react/context#updating-context-from-a-nested-component\">Actualizando Context desde un componente anidado</a></li>\n<li><a href=\"/react/context#consuming-multiple-contexts\">Consumiendo m\u00faltiples Contexts</a></li>\n</ul>\n</li>\n<li><a href=\"/react/context#caveats\">Advertencias</a></li>\n<li><a href=\"/react/context#legacy-api\">API antigua</a></li>\n</ul>\n<h2 id=\"when-to-use-context\"><a class=\"anchor\" href=\"/react/context#when-to-use-context\"></a>Cu\u00e1ndo usar Context </h2>\n<p>Context est\u00e1 dise\u00f1ado para compartir datos que pueden considerarse \u201cglobales\u201d para un \u00e1rbol de componentes en React, como el usuario autenticado actual, el tema o el idioma preferido. Por ejemplo, en el c\u00f3digo a continuaci\u00f3n, pasamos manualmente una <em>prop</em> de \u201ctema\u201d para darle estilo al componente <em>Button</em>:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// El componente Toolbar debe tener un prop adicional \"theme\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// y pasarlo a ThemedButton. Esto puede llegar a ser trabajoso</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// si cada bot\u00f3n en la aplicaci\u00f3n necesita saber el tema,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// porque tendr\u00eda que pasar a trav\u00e9s de todos los componentes.</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Usando Context podemos evitar pasar <em>props</em> a trav\u00e9s de elementos intermedios:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Context nos permite pasar un valor a lo profundo del \u00e1rbol de componentes</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// sin pasarlo expl\u00edcitamente a trav\u00e9s de cada componente.</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Crear un Context para el tema actual (con \"light\" como valor predeterminado).</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Usa un Provider para pasar el tema actual al \u00e1rbol de abajo.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Cualquier componente puede leerlo, sin importar qu\u00e9 tan profundo se encuentre.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// En este ejemplo, estamos pasando \"dark\" como valor actual.</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Un componente en el medio no tiene que</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// pasar el tema hacia abajo expl\u00edcitamente.</span></span><span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Asigna un contextType para leer el contexto del tema actual.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// React encontrar\u00e1 el Provider superior m\u00e1s cercano y usar\u00e1 su valor.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// En este ejemplo, el tema actual es \"dark\".</span></span>  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> ThemeContext<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h2 id=\"before-you-use-context\"><a class=\"anchor\" href=\"/react/context#before-you-use-context\"></a>Antes de usar Context </h2>\n<p>Context se usa principalmente cuando algunos datos tienen que ser accesibles por <em>muchos</em> componentes en diferentes niveles de anidamiento. Apl\u00edcalo con moderaci\u00f3n porque hace que la reutilizaci\u00f3n de componentes sea m\u00e1s dif\u00edcil.</p>\n<p><strong>Si solo deseas evitar pasar algunos props a trav\u00e9s de muchos niveles, la <a href=\"/react/composition-vs-inheritance\">composici\u00f3n de componentes</a> suele ser una soluci\u00f3n m\u00e1s simple que Context.</strong></p>\n<p>Por ejemplo, considera un componente <code class=\"language-javascript\">Page</code> que pasa una prop <code class=\"language-javascript\">user</code> y <code class=\"language-javascript\">avatarSize</code> varios niveles hacia abajo para que los componentes anidados <code class=\"language-javascript\">Link</code> y <code class=\"language-javascript\">Avatar</code> puedan leerlo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavigationBar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Puede parecer redundante pasar los props de <code class=\"language-javascript\">user</code> y<code class=\"language-javascript\">avatarSize</code> a trav\u00e9s de muchos niveles si al final solo el componente <code class=\"language-javascript\">Avatar</code> realmente lo necesita. Tambi\u00e9n es molesto que cada vez que el componente <code class=\"language-javascript\">Avatar</code> necesite m\u00e1s props, tambi\u00e9n hay que agregarlos en todos los niveles intermedios.</p>\n<p>Una forma de resolver este problema <strong>sin usar Context</strong> es <a href=\"/react/composition-vs-inheritance#containment\">pasar el mismo componente <code class=\"language-javascript\">Avatar</code></a> para que los componentes intermedios no tengan que saber sobre los props <code class=\"language-javascript\">usuario</code> o <code class=\"language-javascript\">avatarSize</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> userLink <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span> <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>userLink<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Ahora tenemos:</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">avatarSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span> <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavigationBar</span></span> <span class=\"token attr-name\">userLink</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token comment\">// ... que renderiza ...</span>\n<span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>userLink<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Con este cambio, solo el componente m\u00e1s importante Page necesita saber sobre el uso de <code class=\"language-javascript\">user</code> y <code class=\"language-javascript\">avatarSize</code> de los componentes <code class=\"language-javascript\">Link</code> y <code class=\"language-javascript\">Avatar</code>.</p>\n<p>Esta <em>inversi\u00f3n de control</em> puede hacer que tu c\u00f3digo, en muchos casos, sea m\u00e1s limpio al reducir la cantidad de props que necesitas pasar a trav\u00e9s de tu aplicaci\u00f3n y dar m\u00e1s control a los componentes ra\u00edz. Sin embargo, esta inversi\u00f3n no es la opci\u00f3n correcta en todos los casos. Al mover m\u00e1s complejidad a niveles superiores del \u00e1rbol, esos componentes en los niveles superiores resultan m\u00e1s complicados y obliga a los componentes en niveles inferiores a ser m\u00e1s flexibles de lo que podr\u00eda ser deseable.</p>\n<p>No est\u00e1s limitado a un solo hijo por componente. Puede pasar varios hijos, o incluso tener varios \u201chuecos\u201d (slots) separados para los hijos, <a href=\"/react/composition-vs-inheritance#contenering\">como se documenta aqu\u00ed</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Feed</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> topBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavigationBar</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Avatar</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>avatarSize<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">NavigationBar</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageLayout</span></span>\n      <span class=\"token attr-name\">topBar</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>topBar<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">content</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este patr\u00f3n es suficiente para muchos casos cuando necesitas separar a un componente hijo de sus componentes padres inmediatos. Puedes llevarlo a\u00fan m\u00e1s lejos con <a href=\"/react/render-props\">render props</a> si el hijo necesita comunicarse con el padre antes de renderizar.</p>\n<p>Sin embargo, a veces, los mismos datos deben ser accesibles por muchos componentes en el \u00e1rbol y a diferentes niveles de anidamiento. Context te permite \u201ctransmitir\u201d dichos datos, y los cambios, a todos los componentes de abajo. Los ejemplos comunes en los que el uso de Context podr\u00eda ser m\u00e1s simple que otras alternativas incluyen la administraci\u00f3n de la configuraci\u00f3n de localizaci\u00f3n, el tema o un cach\u00e9 de datos.</p>\n<h2 id=\"api\"><a class=\"anchor\" href=\"/react/context#api\"></a>API </h2>\n<h3 id=\"reactcreatecontext\"><a class=\"anchor\" href=\"/react/context#reactcreatecontext\"></a><code class=\"language-javascript\">React.createContext</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Crea un objeto Context. Cuando React renderiza un componente que se suscribe a este objeto Context, este leer\u00e1 el valor de contexto actual del <code class=\"language-javascript\">Provider</code> m\u00e1s cercano en el \u00e1rbol.</p>\n<p>El argumento <code class=\"language-javascript\">defaultValue</code> es usado <strong>\u00fanicamente</strong> cuando un componente no tiene un <code class=\"language-javascript\">Provider</code> superior a \u00e9l en el \u00e1rbol. Este valor por defecto puede ser \u00fatil para probar componentes de forma aislada sin contenerlos. Nota: pasar <code class=\"language-javascript\">undefined</code> como valor al <code class=\"language-javascript\">Provider</code> no hace que los componentes que lo consumen utilicen <code class=\"language-javascript\">defaultValue</code>.</p>\n<h3 id=\"contextprovider\"><a class=\"anchor\" href=\"/react/context#contextprovider\"></a><code class=\"language-javascript\">Context.Provider</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* alg\u00fan valor */</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Cada objeto Context viene con un componente <code class=\"language-javascript\">Provider</code> de React que permite que los componentes que lo consumen se suscriban a los cambios del contexto.</p>\n<p>El componente <code class=\"language-javascript\">Provider</code> acepta una prop <code class=\"language-javascript\">value</code> que se pasar\u00e1 a los componentes consumidores que son descendientes de este <code class=\"language-javascript\">Provider</code>. Un <code class=\"language-javascript\">Provider</code> puede estar conectado a muchos consumidores. Los <code class=\"language-javascript\">Providers</code> pueden estar anidados para sobreescribir los valores m\u00e1s profundos dentro del \u00e1rbol.</p>\n<p>Todos los consumidores que son descendientes de un <code class=\"language-javascript\">Provider</code> se vuelven a renderizar cada vez que cambia la prop <code class=\"language-javascript\">value</code> del <code class=\"language-javascript\">Provider</code>. La propagaci\u00f3n del <code class=\"language-javascript\">Provider</code> a sus consumidores descendientes (incluyendo <a href=\"/react/context#classcontexttype\"><code class=\"language-javascript\">.contextType</code></a> y <a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a>) no est\u00e1 sujeta al m\u00e9todo <code class=\"language-javascript\">shouldComponentUpdate</code>, por lo que el consumidor se actualiza incluso cuando un componente padre evita la actualizaci\u00f3n.</p>\n<p>Los cambios se determinan comparando los valores nuevos y antiguos utilizando el mismo algoritmo que <a href=\"//developer.mozilla.org/es/react/Web/JavaScript/Reference/Global_Objects/Object/is#Description\"><code class=\"language-javascript\">Object.is</code></a>. </p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>La forma en que se determinan los cambios puede causar algunos problemas al pasar objetos como <code class=\"language-javascript\">value</code>: mira las <a href=\"/react/context#caveats\">Advertencias</a>.</p>\n</div>\n<h3 id=\"classcontexttype\"><a class=\"anchor\" href=\"/react/context#classcontexttype\"></a><code class=\"language-javascript\">Class.contextType</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* realiza un efecto secundario en el montaje utilizando el valor de MyContext */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* renderiza algo basado en el valor de MyContext */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nMyClass<span class=\"token punctuation\">.</span>contextType <span class=\"token operator\">=</span> MyContext<span class=\"token punctuation\">;</span></code></pre></div>\n<p>A la propiedad <code class=\"language-javascript\">contextType</code> en una clase se le puede asignar un objeto Context creado por <a href=\"/react/context#reactcreatecontext\"><code class=\"language-javascript\">React.createContext()</code></a>. Al usar esta propiedad puedes consumir el valor actual m\u00e1s cercano de ese Context utilizando <code class=\"language-javascript\">this.context</code>. Puedes hacer referencia a ella en cualquiera de los m\u00e9todos del ciclo de vida, incluida la funci\u00f3n de renderizado.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Solo puedes suscribirte a un solo Context usando esta API. Si necesitas leer m\u00e1s de una, lee <a href=\"/react/context#consuming-multiple-contexts\">Consumir m\u00faltiples Context</a>.</p>\n<p>Si est\u00e1s utilizando la <a class=\"external-link\" href=\"https://babeljs.io/docs/plugins/transform-class-properties/\">sintaxis experimental de campos de clase p\u00fablica</a>, puedes usar un campo de clase <strong>static</strong> para inicializar tu <code class=\"language-javascript\">contextType</code>.</p>\n</div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> MyContext<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* renderiza algo basado en el valor */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"contextconsumer\"><a class=\"anchor\" href=\"/react/context#contextconsumer\"></a><code class=\"language-javascript\">Context.Consumer</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">/* renderiza algo basado en el valor de contexto */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Un componente de React que se suscribe a cambios de contexto. Al usar este componente puedes suscribirte a un contexto dentro de un <a href=\"/react/components-and-props#function-and-class-components\">componente de funci\u00f3n</a>.</p>\n<p>Requiere una <a href=\"/react/render-props#using-props-other-than-render\">funci\u00f3n como hijo</a>. La funci\u00f3n recibe el valor de contexto actual y devuelve un nodo de React. El argumento <code class=\"language-javascript\">value</code> pasado a la funci\u00f3n ser\u00e1 igual a la prop <code class=\"language-javascript\">value</code> del <code class=\"language-javascript\">Provider</code> m\u00e1s cercano para este contexto en el \u00e1rbol. Si no hay un <code class=\"language-javascript\">Proveedor</code> superior para este contexto, el argumento <code class=\"language-javascript\">value</code> ser\u00e1 igual al <code class=\"language-javascript\">defaultValue</code> que se pas\u00f3 a <code class=\"language-javascript\">createContext()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Para m\u00e1s informaci\u00f3n sobre el patr\u00f3n \u2018funci\u00f3n como hijo\u2019, ver <a href=\"/react/render-props\">render props</a>.</p>\n</div>\n<h3 id=\"contextdisplayname\"><a class=\"anchor\" href=\"/react/context#contextdisplayname\"></a><code class=\"language-javascript\">Context.displayName</code> </h3>\n<p>El objeto Context acepta una propiedad de cadena de texto <code class=\"language-javascript\">displayName</code>. Las herramientas de desarrollo de React utilizan esta cadena de texto para determinar que mostrar para el Context.</p>\n<p>Por ejemplo, el componente a continuaci\u00f3n aparecer\u00e1 como \u201cNombreAMostrar\u201d en las herramientas de desarrollo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* some value */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">MyContext<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token string\">'NombreAMostrar'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> // \"NombreAMostrar.Provider\" en las herramientas de desarrollo</span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> // \"NombreAMostrar.Consumer\" en las herramientas de desarrollo</span></code></pre></div>\n<h2 id=\"examples\"><a class=\"anchor\" href=\"/react/context#examples\"></a>Ejemplos </h2>\n<h3 id=\"dynamic-context\"><a class=\"anchor\" href=\"/react/context#dynamic-context\"></a>Context din\u00e1mico </h3>\n<p>Un ejemplo m\u00e1s complejo con valores din\u00e1micos para el tema:</p>\n<p><strong>theme-context.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> themes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">light</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foreground</span><span class=\"token operator\">:</span> <span class=\"token string\">'#000000'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">'#eeeeee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dark</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foreground</span><span class=\"token operator\">:</span> <span class=\"token string\">'#ffffff'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">'#222222'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  themes<span class=\"token punctuation\">.</span>dark <span class=\"token comment\">// valor por defecto</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n</div></p>\n<p><strong>themed-button.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> theme <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">ThemedButton<span class=\"token punctuation\">.</span>contextType <span class=\"token operator\">=</span> ThemeContext<span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemedButton<span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong>app.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">,</span> themes<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ThemedButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./themed-button'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Un componente intermedio que utiliza ThemedButton.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>changeTheme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      Change Theme</span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemedButton</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toggleTheme</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span>\n          state<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">===</span> themes<span class=\"token punctuation\">.</span>dark\n            <span class=\"token operator\">?</span> themes<span class=\"token punctuation\">.</span>light\n            <span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// El bot\u00f3n ThemedButton dentro de ThemeProvider</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// usa el tema del estado mientras que el exterior usa</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// el tema oscuro predeterminado</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token attr-name\">changeTheme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleTheme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Section</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Section</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Page</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<h3 id=\"updating-context-from-a-nested-component\"><a class=\"anchor\" href=\"/react/context#updating-context-from-a-nested-component\"></a>Actualizando Context desde un componente anidado </h3>\n<p>A menudo es necesario actualizar el contexto desde un componente que est\u00e1 anidado en alg\u00fan lugar del \u00e1rbol de componentes. En este caso, puedes pasar una funci\u00f3n a trav\u00e9s del contexto para permitir a los consumidores actualizar el contexto:</p>\n<p><strong>theme-context.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Make sure the shape of the default value passed to</span>\n<span class=\"token comment\">// createContext matches the shape that the consumers expect!</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">toggleTheme</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong>theme-toggler-button.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ThemeTogglerButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// The Theme Toggler Button receives not only the theme</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// but also a toggleTheme function from the context</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">,</span> toggleTheme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>toggleTheme<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Toggle Theme</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemeTogglerButton<span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><strong>app.js</strong>\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ThemeContext<span class=\"token punctuation\">,</span> themes<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-context'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ThemeTogglerButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./theme-toggler-button'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toggleTheme</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span>\n          state<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">===</span> themes<span class=\"token punctuation\">.</span>dark\n            <span class=\"token operator\">?</span> themes<span class=\"token punctuation\">.</span>light\n            <span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// State also contains the updater function so it will</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// be passed down into the context provider</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> themes<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">toggleTheme</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleTheme<span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// The entire state is passed to the provider</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeTogglerButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<h3 id=\"consuming-multiple-contexts\"><a class=\"anchor\" href=\"/react/context#consuming-multiple-contexts\"></a>Consumir m\u00faltiples Context </h3>\n<p>Para mantener el renderizado de Context r\u00e1pido, React necesita hacer que cada consumidor de contexto sea un nodo separado en el \u00e1rbol.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Theme context, default to light theme</span>\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Contexto de usuario registrado</span>\n<span class=\"token keyword\">const</span> UserContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Guest'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>signedInUser<span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Componente App que proporciona valores de contexto iniciales</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>signedInUser<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UserContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Sidebar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Un componente puede consumir m\u00faltiples contextos.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">theme</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProfilePage</span></span> <span class=\"token attr-name\">user</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UserContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Consumer</span></span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Si dos o m\u00e1s valores de contexto se usan a menudo juntos, es posible que desees considerar la creaci\u00f3n de tu propio componente de procesamiento que proporcione ambos.</p>\n<h2 id=\"caveats\"><a class=\"anchor\" href=\"/react/context#caveats\"></a>Advertencias </h2>\n<p>Debido a que <code class=\"language-javascript\">Context</code> usa la identidad por referencia para determinar cu\u00e1ndo se debe volver a renderizar, hay algunos errores que podr\u00edan provocar renderizados involuntarios en los consumidores cuando se vuelve a renderizar en el padre del proveedor. Por ejemplo, el c\u00f3digo a continuaci\u00f3n volver\u00e1 a renderizar a todos los consumidores cada vez que el <code class=\"language-javascript\">Proveedor</code> se vuelva a renderizar porque siempre se crea un nuevo objeto para <code class=\"language-javascript\">value</code>:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> <span class=\"token string\">'something'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Para evitar esto, levanta el valor al estado del padre:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> <span class=\"token string\">'something'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h2 id=\"legacy-api\"><a class=\"anchor\" href=\"/react/context#legacy-api\"></a>API antigua </h2>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>React previamente hab\u00eda liberado el API experimental de Context. La antigua API ser\u00e1 compatible con todas las versiones 16.x, pero las aplicaciones que la utilicen deber\u00edan migrar a la nueva versi\u00f3n. La API antigua se eliminar\u00e1 en una futura versi\u00f3n importante de React. Lee la <a href=\"/react/legacy-context\">documentaci\u00f3n antigua de Context aqu\u00ed</a>.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/context.md\">Edit this page</a></p></div></article>", "path": "/react/context", "nav": ["/react/code-splitting", "/react/error-boundaries"]}, {"key": "L\u00edmites de errores", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>En el pasado, los errores de JavaScript dentro de los componentes sol\u00edan corromper el estado interno de React y hac\u00edan que <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/4026\">emitiera</a> <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/6895\">errores</a> <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/8579\">cr\u00edpticos</a> en siguientes renderizados. Estos errores siempre eran causados por un error previo en el c\u00f3digo de aplicaci\u00f3n, pero React no prove\u00eda una manera de gestionarlos elegantemente en componentes, y no pod\u00eda recuperarse de ellos.</p>\n<h2 id=\"introducing-error-boundaries\"><a class=\"anchor\" href=\"/react/error-boundaries#introducing-error-boundaries\"></a>Introduciendo L\u00edmites de Errores </h2>\n<p>Un error de JavaScript en una parte de la interfaz no deber\u00eda romper toda la aplicaci\u00f3n. Para resolver este problema, React 16 introduce el nuevo concepto de \u201cl\u00edmite de errores\u201d.</p>\n<p>Los l\u00edmites de errores son componentes de React que <strong>capturan errores de JavaScript en cualquier parte de su \u00e1rbol de componentes hijo, registran esos errores, y muestran una interfaz de repuesto</strong> en lugar del \u00e1rbol de componentes que ha fallado. Los l\u00edmites de errores capturan errores durante el renderizado, en m\u00e9todos del ciclo de vida, y en constructores de todo el \u00e1rbol bajo ellos.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Los l\u00edmites de errores <strong>no</strong> capturan errores de:</p>\n<ul>\n<li>Manejadores de eventos (<a href=\"/react/error-boundaries#how-about-event-handlers\">aprende m\u00e1s</a>)</li>\n<li>C\u00f3digo as\u00edncrono (p.ej. callbacks de <code class=\"language-javascript\">setTimeout</code> o <code class=\"language-javascript\">requestAnimationFrame</code>)</li>\n<li>Renderizado en el servidor</li>\n<li>Errores lanzados en el propio l\u00edmite de errores (en lugar de en sus hijos)</li>\n</ul>\n</div>\n<p>Un componente de clase (class component) se convierte en l\u00edmite de errores si define uno (o ambos) de los m\u00e9todos del ciclo de vida <a href=\"/react/react-component#static-getderivedstatefromerror\"><code class=\"language-javascript\">static getDerivedStateFromError()</code></a> o <a href=\"/react/react-component#componentdidcatch\"><code class=\"language-javascript\">componentDidCatch()</code></a>. Usa <code class=\"language-javascript\">static getDerivedStateFromError()</code> para renderizar una interfaz de repuesto cuando se lance un error. Usa <code class=\"language-javascript\">componentDidCatch()</code> para registrar informaci\u00f3n de los errores.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Actualiza el estado para que el siguiente renderizado muestre la interfaz de repuesto</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> errorInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Tambi\u00e9n puedes registrar el error en un servicio de reporte de errores</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">logErrorToMyService</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Puedes renderizar cualquier interfaz de repuesto</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Something went wrong.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Luego puedes usarlo como un componente normal:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyWidget</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Los l\u00edmites de errores funcionan como un bloque catch{} de JavaScript, pero para componentes. S\u00f3lo los componentes de clase (class components) pueden ser l\u00edmites de errores. En la pr\u00e1ctica, la mayor parte del tiempo declarar\u00e1s un l\u00edmite de errores una vez y lo usar\u00e1s a lo largo de tu aplicaci\u00f3n.</p>\n<p>Ten en cuenta que <strong>los l\u00edmites de errores s\u00f3lo capturan errores en los componentes bajo ellos en el \u00e1rbol</strong>. Un l\u00edmite de errores no puede capturar un error dentro de s\u00ed mismo. Si un l\u00edmite de errores falla tratando de renderizar el mensaje de error, el error se propagar\u00e1 al l\u00edmite de errores m\u00e1s cercano por encima de \u00e9l. Esto tambi\u00e9n es similar al funcionamiento de los bloques <code class=\"language-javascript\">catch{}</code> en JavaScript.</p>\n<h2 id=\"live-demo\"><a class=\"anchor\" href=\"/react/error-boundaries#live-demo\"></a>Live Demo </h2>\n<p>Mira <a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/wqvxGa?editors=0010\">este ejemplo de declaraci\u00f3n y uso de un l\u00edmite de errores</a>.</p>\n<h2 id=\"where-to-place-error-boundaries\"><a class=\"anchor\" href=\"/react/error-boundaries#where-to-place-error-boundaries\"></a>D\u00f3nde poner L\u00edmites de Errores </h2>\n<p>La granularidad de los l\u00edmites de errores depende de t\u00ed. Puedes envolver los componentes de enrutado de alto nivel para mostrar un mensaje de \u201cAlgo ha ido mal\u201d al usuario, tal como a menudo gestionan los errores los frameworks del lado del servidor. Tambi\u00e9n puedes envolver widgets aisladas en un l\u00edmite de error para evitar que hagan fallar el resto de la aplicaci\u00f3n.</p>\n<h2 id=\"new-behavior-for-uncaught-errors\"><a class=\"anchor\" href=\"/react/error-boundaries#new-behavior-for-uncaught-errors\"></a>Nuevo comportamiento para los errores no capturados </h2>\n<p>Este cambio tiene una implicaci\u00f3n importante. <strong>A partir de React 16, los errores que no sean capturados por ning\u00fan l\u00edmite de error resultar\u00e1n en el desmontado de todo el \u00e1rbol de componentes de React.</strong></p>\n<p>Debatimos esta decisi\u00f3n, pero en nuestra experiencia es peor dejar una interfaz corrompida que eliminarla completamente. Por ejemplo, en un producto como Messenger dejar la interfaz rota visible puede llevar a que alguien mande un mensaje a la persona equivocada. De manera similar, es peor que una aplicacion de pagos muestre un total err\u00f3neo a no renderizar nada.</p>\n<p>Este cambio significa que cuando migres a React 16, probablemente descubras fallos existentes en tu aplicaci\u00f3n que antes hab\u00edan pasado desapercibidos. A\u00f1adir l\u00edmites de errores te permite dar una mejor experiencia de usuario cuando algo va mal.</p>\n<p>Por ejemplo, en Facebook Messenger se envuelven los contenidos de la barra lateral, el panel de informaci\u00f3n, el registro de conversaciones, y el input de mensajes en l\u00edmites de errores separados. Si falla un componente en una de esas \u00e1reas de la interfaz, el resto contin\u00faan estando interactivos.</p>\n<p>Tambi\u00e9n te animamos a que uses servicios de reporte de errores de JS (o crees el tuyo), para que puedas descubrir excepciones no controladas cuando occuren en producci\u00f3n y arreglarlas.</p>\n<h2 id=\"component-stack-traces\"><a class=\"anchor\" href=\"/react/error-boundaries#component-stack-traces\"></a>Trazas de la pila de componentes </h2>\n<p>React 16 muestra todos los errores que ocurrieron durante el rendering por consola en desarrollo, incluso si la aplicaci\u00f3n se los traga accidentalmente. Adem\u00e1s de las pilas de mensajes de error y de JavaScript, tambi\u00e9n provee trazas de la pila de componentes. Ahora puedes ver en qu\u00e9 parte exactamente del \u00e1rbol de componentes ha ocurrido el fallo:</p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/f1276837b03821b43358d44c14072945/c3a47/error-boundaries-stack-trace.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/f1276837b03821b43358d44c14072945/1e088/error-boundaries-stack-trace.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Tambi\u00e9n puedes ver los nombres de los ficheros y los n\u00fameros de l\u00ednea en la traza de la pila de componentes. Esto funciona por defecto en proyectos de <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>:</p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/45611d4fdbd152829b28ae2348d6dcba/6dd26/error-boundaries-stack-trace-line-numbers.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/45611d4fdbd152829b28ae2348d6dcba/1e088/error-boundaries-stack-trace-line-numbers.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Si no usas Create React App, puedes a\u00f1adir manualmente <a class=\"external-link\" href=\"https://www.npmjs.com/package/@babel/plugin-transform-react-jsx-source\">este plugin</a> a tu configuraci\u00f3n de Babel. Ten en cuenta que est\u00e1 pensado s\u00f3lo para desarrollo y <strong>debe ser deshabilitado en producci\u00f3n</strong>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Los nombres de componentes que se muestran en las trazas de pila dependen de la propiedad <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code class=\"language-javascript\">Function.name</code></a>. Si das soporte a navegadores antiguos y dispositivos que puede que no provean esto nativamente (p.ej. IE 11), considera incluir un polyfill de <code class=\"language-javascript\">Function.name</code> en tu aplicaci\u00f3n empaquetada, como <a class=\"external-link\" href=\"https://github.com/JamesMGreene/Function.name\"><code class=\"language-javascript\">function.name-polyfill</code></a>. Alternativamente, puedes poner la propiedad <a href=\"/react/react-component#displayname\"><code class=\"language-javascript\">displayName</code></a> en todos tus componentes.</p>\n</div>\n<h2 id=\"how-about-trycatch\"><a class=\"anchor\" href=\"/react/error-boundaries#how-about-trycatch\"></a>\u00bfQu\u00e9 pasa con try/catch? </h2>\n<p><code class=\"language-javascript\">try</code> / <code class=\"language-javascript\">catch</code> est\u00e1 muy bien, pero s\u00f3lo funciona para c\u00f3digo imperativo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">showButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No obstante, los componentes de React son declarativos y especifican <em>qu\u00e9</em> se debe renderizar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Los l\u00edmites de errores preservan la naturaleza declarativa de React, y se comportan como esperar\u00edas. Por ejemplo, incluso si un error ocurre en un m\u00e9todo <code class=\"language-javascript\">componentDidUpdate</code> causado por un <code class=\"language-javascript\">setState</code> en alg\u00fan sitio profundo dentro del \u00e1rbol, se propagar\u00e1 de todas formas correctamente al l\u00edmite de errores m\u00e1s cercano.</p>\n<h2 id=\"how-about-event-handlers\"><a class=\"anchor\" href=\"/react/error-boundaries#how-about-event-handlers\"></a>\u00bfQu\u00e9 pasa con los manejadores de eventos? </h2>\n<p>Los l\u00edmites de errores <strong>no</strong> capturan errores en los manejadores de eventos.</p>\n<p>React no necesita l\u00edmites de errores para recuperarse de errores en los manejadores de eventos. A diferencia del m\u00e9todo render y de los m\u00e9todos del ciclo de vida, los manejadores de eventos no ocurren durante el renderizado, por lo que, si lanzan una excepci\u00f3n, React sigue sabiendo qu\u00e9 mostrar en la pantalla.</p>\n<p>Si necesitas capturar un error dentro de un manejador de eventos, usa la sentencia de <code class=\"language-javascript\">try</code> / <code class=\"language-javascript\">catch</code> normal de JavaScript.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Hacer algo que puede lanzar una excepci\u00f3n</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Caught an error.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click Me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>F\u00edjate en que el ejemplo de arriba muestra el comportamiento normal de JavaScript y no usa l\u00edmites de errores.</p>\n<h2 id=\"naming-changes-from-react-15\"><a class=\"anchor\" href=\"/react/error-boundaries#naming-changes-from-react-15\"></a>Cambios de nomenclatura desde React 15 </h2>\n<p>React 15 inclu\u00eda un soporte muy limitado para l\u00edmites de errores con un nombre de m\u00e9todo diferente: <code class=\"language-javascript\">unstable_handleError</code>. Este m\u00e9todo ya no funciona, y necesitar\u00e1s cambiarlo a <code class=\"language-javascript\">componentDidCatch</code> en tu c\u00f3digo a partir del primer lanzamiento beta de la versi\u00f3n 16.</p>\n<p>Para este cambio, hemos provisto un <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#error-boundaries\">codemod</a> para migrar autom\u00e1ticamente tu c\u00f3digo.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/error-boundaries.md\">Edit this page</a></p></div></article>", "path": "/react/error-boundaries", "nav": ["/react/context", "/react/forwarding-refs"]}, {"key": "Reenv\u00edo de refs", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>El reenv\u00edo de refs es una t\u00e9cnica para pasar autom\u00e1ticamente una <a href=\"/react/refs-and-the-dom\">ref</a> a trav\u00e9s de un componente a uno de sus hijos. Esto normalmente no es necesario para la mayor\u00eda de los componentes en una aplicaci\u00f3n. Sin embargo, puede ser \u00fatil para ciertos tipos de componentes, especialmente en bibliotecas de componentes reutilizables. Los escenarios m\u00e1s comunes son descritos a continuaci\u00f3n.</p>\n<h2 id=\"forwarding-refs-to-dom-components\"><a class=\"anchor\" href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\"></a>Reenviando refs a componentes DOM </h2>\n<p>Considere un componente <code class=\"language-javascript\">FancyButton</code> que renderiza el elemento DOM nativo <code class=\"language-javascript\">button</code>:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Los componentes React ocultan sus detalles de implementaci\u00f3n, incluyendo su salida renderizada. Otros componentes que usen <code class=\"language-javascript\">FancyButton</code> <strong>usualmente no necesitar\u00e1n</strong> <a href=\"/react/refs-and-the-dom\">obtener una ref</a> del elemento DOM interno <code class=\"language-javascript\">button</code>. Esto es bueno, ya que previene que los componentes dependan demasiado de la estructura DOM de otros.</p>\n<p>Aunque dicho encapsulamiento es deseable para componentes a nivel de aplicaci\u00f3n como <code class=\"language-javascript\">FeedStory</code> o <code class=\"language-javascript\">Comment</code>, puede ser inconveniente en el caso de componentes \u201choja\u201d altamente reutilizables como <code class=\"language-javascript\">FancyButton</code> o <code class=\"language-javascript\">MyTextInput</code>. Estos componentes tienden a ser usados a lo largo de las aplicaciones de forma similar a los componentes DOM <code class=\"language-javascript\">button</code> e <code class=\"language-javascript\">input</code>, y acceder sus nodos DOM puede resultar inevitable para gestionar el foco, la selecci\u00f3n, o animaciones.</p>\n<p><strong>El Reenv\u00edo de refs es una caracter\u00edstica opcional que permite a algunos componentes tomar una <code class=\"language-javascript\">ref</code> que reciben, y pasarla (en otras palabras, \u201creenviarla\u201d) a un hijo.</strong></p>\n<p>En el siguiente ejemplo, <code class=\"language-javascript\">FancyButton</code> usa <code class=\"language-javascript\">React.forwardRef</code> para obtener la <code class=\"language-javascript\">ref</code> que le pasaron, y luego reenviarla al <code class=\"language-javascript\">button</code> DOM que renderiza:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> FancyButton <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Ahora puedes obtener una referencia directa al bot\u00f3n del DOM:</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyButton</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click me!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyButton</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>De esta forma, los componentes que usan <code class=\"language-javascript\">FancyButton</code> pueden obtener una ref al nodo DOM <code class=\"language-javascript\">button</code> subyacente, y accederlo si es necesario - tal como si estuvieran usando el <code class=\"language-javascript\">button</code> DOM directamente.</p>\n<p>A continuaci\u00f3n un explicaci\u00f3n paso a paso de lo que sucede en el ejemplo de arriba:</p>\n<ol>\n<li>Creamos una <a href=\"/react/refs-and-the-dom\">ref React</a> llamando <code class=\"language-javascript\">React.createRef</code> y la asignamos a la variable <code class=\"language-javascript\">ref</code>.</li>\n<li>Pasamos nuestra <code class=\"language-javascript\">ref</code> hacia <code class=\"language-javascript\">&lt;FancyButton ref={ref}&gt;</code> al especificarla como un atributo JSX.</li>\n<li>React pasa la <code class=\"language-javascript\">ref</code> a la funci\u00f3n <code class=\"language-javascript\">(props, ref) =&gt; ...</code> dentro de <code class=\"language-javascript\">forwardRef</code> como segundo argumento.</li>\n<li>Reenviamos este argumento <code class=\"language-javascript\">ref</code> hacia <code class=\"language-javascript\">&lt;button ref={ref}&gt;</code> al especificarla como un atributo JSX.</li>\n<li>Cuando la ref es adjuntada, <code class=\"language-javascript\">ref.current</code> apuntar\u00e1 al nodo DOM <code class=\"language-javascript\">&lt;button&gt;</code>.</li>\n</ol>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>El segundo argumento <code class=\"language-javascript\">ref</code> solo existe cuando defines un componente con una llamada a <code class=\"language-javascript\">React.forwardRef</code>. Los componentes normales de funci\u00f3n o de clase no reciben el argumento <code class=\"language-javascript\">ref</code> y ref t\u00e1mpoco est\u00e1 disponible entre sus props.</p>\n<p>El Reenv\u00edo de refs no esta limitado \u00fanicamente a componentes DOM. Tambi\u00e9n se puede reenviar refs a instancias de componentes de clase.</p>\n</div>\n<h2 id=\"note-for-component-library-maintainers\"><a class=\"anchor\" href=\"/react/forwarding-refs#note-for-component-library-maintainers\"></a>Nota para los mantenedores de bibliotecas de componentes </h2>\n<p><strong>Una vez empiezas a usar <code class=\"language-javascript\">forwardRef</code> en una biblioteca de componentes, debes tratarlo como un cambio incompatible y liberar una nueva versi\u00f3n mayor de la biblioteca</strong>. Esto es debido a que probablemente tu biblioteca tendr\u00e1 un comportamiento observable muy diferente (tal como a que se asignan las refs, y que tipos son exportados), y esto puede romper aplicaciones y otras bibliotecas que dependan del comportamiento anterior.</p>\n<p>Aplicar <code class=\"language-javascript\">React.forwardRef</code> de forma condicional cuando existe tampoco es recomendado por las mismas razones: cambia el comportamiento de tu biblioteca y puede romper las aplicaciones de tus usuarios cuando actualicen React.</p>\n<h2 id=\"forwarding-refs-in-higher-order-components\"><a class=\"anchor\" href=\"/react/forwarding-refs#forwarding-refs-in-higher-order-components\"></a>Reenviando refs en componentes de orden superior </h2>\n<p>Esta t\u00e9cnica puede ser particularmente \u00fatil con <a href=\"/react/higher-order-components\">componentes de orden superior</a> (tambi\u00e9n conocidos como <code class=\"language-javascript\">HOCs</code> por las siglas en ingl\u00e9s de <em>Higher-Order Components</em>). Comencemos con un ejemplo de un HOC que imprime los props de un componente a la consola:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'old props:'</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new props:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> LogProps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>El HOC \u201clogProps\u201d pasa todas sus <code class=\"language-javascript\">props</code> al componente que envuelve, as\u00ed que la salida renderizada ser\u00e1 la misma. Por ejemplo, podemos usar este HOC para imprimir todas las <code class=\"language-javascript\">props</code> que son pasadas a nuestro componente \u201cFancyButton\u201d:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FancyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// En lugar de exportar FancyButton, exportamos LogProps.</span>\n<span class=\"token comment\">// Esto renderizar\u00e1 un FancyButton igualmente.</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>FancyButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n</div></p>\n<p>Hay un detalle en el ejemplo anterior: las refs no son pasadas. Esto es porque <code class=\"language-javascript\">ref</code> no es una prop. Al igual que <code class=\"language-javascript\">key</code>, es manejada de una forma diferente por React. Si a\u00f1ades una ref a un HOC, la ref se referir\u00e1 al componente contenedor m\u00e1s externo, no al componente envuelto.</p>\n<p>Esto significa que las <code class=\"language-javascript\">refs</code> que queremos para nuestro componente <code class=\"language-javascript\">FancyButton</code> de hecho estar\u00e1n adjuntadas al componente <code class=\"language-javascript\">LogProps</code>:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> FancyButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./FancyButton'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// El componente FancyButton que importamos es el HOC LogProps.</span>\n<span class=\"token comment\">// Aun as\u00ed la salida renderizada ser\u00e1 la misma,</span>\n<span class=\"token comment\">// nuestra referencia apuntar\u00e1 a LogProps en lugar del componente FancyButton interno!</span>\n<span class=\"token comment\">// Esto significa que no podemos llamar a por ejemplo: ref.current.focus()</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyButton</span></span>\n  <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Click Me<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">handleClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Afortunadamente, podemos reenviar expl\u00edcitamente refs al componente interno <code class=\"language-javascript\">FancyButton</code> usando el API <code class=\"language-javascript\">React.forwardRef</code>. <code class=\"language-javascript\">React.forwardRef</code> acepta una funci\u00f3n de renderizado que recibe los par\u00e1metros <code class=\"language-javascript\">props</code> y <code class=\"language-javascript\">ref</code>, y devuelve un nodo React. Por ejemplo:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'old props:'</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new props:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>forwardedRef<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></span>\n      <span class=\"token comment\">// Assign the custom prop \"forwardedRef\" as a ref</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>forwardedRef<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Mira el segundo par\u00e1metro \"ref\" suministrado por React.forwardRef.</span>\n  <span class=\"token comment\">// Podemos pasarlo a LogProps como una prop regular, por ejemplo: \"forwardedRef\"</span>\n  <span class=\"token comment\">// Y puede ser agregado al \"Component\".</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h2 id=\"displaying-a-custom-name-in-devtools\"><a class=\"anchor\" href=\"/react/forwarding-refs#displaying-a-custom-name-in-devtools\"></a>Mostrar un nombre personalizado en las herramientas de desarrollo </h2>\n<p><code class=\"language-javascript\">React.forwardRef</code> acepta una funci\u00f3n de renderizado. Las herramientas de desarrollo de React (<em>React DevTools</em>) usan esta funci\u00f3n para determinar que nombre mostrar para el componente que hace el reenvio.</p>\n<p>Por ejemplo, el siguiente componente aparecer\u00e1 como \u201d<em>ForwardRef</em>\u201d en <em>DevTools</em>:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> WrappedComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Si nombras la funci\u00f3n, <em>DevTools</em> tambi\u00e9n incluir\u00e1 su nombre (Ej: \u201d<em>ForwardRef(myFunction)</em>\u201d):</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> WrappedComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>Puedes incluso asignar la propiedad <code class=\"language-javascript\">displayName</code> de la funci\u00f3n para que incluya el componente que est\u00e1s envolviendo:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LogProps</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">forwardedRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Give this component a more helpful display name in DevTools.</span>\n  <span class=\"token comment\">// e.g. \"ForwardRef(logProps(MyComponent))\"</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> Component<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> Component<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  forwardRef<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">logProps(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>forwardRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/forwarding-refs.md\">Edit this page</a></p></div></article>", "path": "/react/forwarding-refs", "nav": ["/react/error-boundaries", "/react/fragments"]}, {"key": "Fragmentos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Un patr\u00f3n com\u00fan en React es que un componente devuelva m\u00faltiples elementos. Los Fragmentos te permiten agrupar una lista de hijos sin agregar nodos extra al DOM.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildA</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildB</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildC</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tambi\u00e9n hay una nueva <a href=\"/react/fragments#short-syntax\">sintaxis corta</a> para declararlos.</p>\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"/react/fragments#motivation\"></a>Motivaci\u00f3n </h2>\n<p>Un patr\u00f3n com\u00fan es que un componente devuelva una lista de hijos. Toma este c\u00f3digo de ejemplo en React:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Table</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Columns</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">&lt;Columns /&gt;</code> tendr\u00eda que devolver m\u00faltiples elementos <code class=\"language-javascript\">&lt;td&gt;</code> para que el c\u00f3digo HTML renderizado sea v\u00e1lido. Si un div padre fue utilizado dentro del c\u00f3digo <code class=\"language-javascript\">render()</code> de <code class=\"language-javascript\">&lt;Columns /&gt;</code>, entonces el c\u00f3digo HTML resultante ser\u00e1 inv\u00e1lido.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>resulta en una salida de <code class=\"language-javascript\">&lt;Table /&gt;</code> de:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Los Fragmentos solucionan este problema.</p>\n<h2 id=\"usage\"><a class=\"anchor\" href=\"/react/fragments#usage\"></a>Uso </h2>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>que resulta en una salida correcta de <code class=\"language-javascript\">&lt;Table /&gt;</code> de:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h3 id=\"short-syntax\"><a class=\"anchor\" href=\"/react/fragments#short-syntax\"></a>Sintaxis corta </h3>\n<p>Hay una sintaxis nueva, m\u00e1s corta que puedes usar para declarar fragmentos. Parecen etiquetas vac\u00edas:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Columns</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Puedes utilizar <code class=\"language-javascript\">&lt;&gt;&lt;/&gt;</code> de la misma manera que usar\u00edas cualquier otro elemento, excepto que este no soporta llaves o atributos.</p>\n<h3 id=\"keyed-fragments\"><a class=\"anchor\" href=\"/react/fragments#keyed-fragments\"></a>Fragmentos incrustados </h3>\n<p>Fragmentos declarados con la sintaxis expl\u00edcita <code class=\"language-javascript\">&lt;React.Fragment&gt;</code> pueden tener llaves. Un caso de uso para esto es el mapeo de una colecci\u00f3n a un arreglo de fragmentos \u2014 por ejemplo, para crear una lista de descripci\u00f3n:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Glossary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// Sin el prop 'key', React disparar\u00e1 una advertencia de key</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">key</code> es el \u00fanico atributo que se puede pasar a <code class=\"language-javascript\">Fragment</code>. En el futuro, vamos a agregar soporte para atributos adicionales como manejadores de eventos.</p>\n<h3 id=\"live-demo\"><a class=\"anchor\" href=\"/react/fragments#live-demo\"></a>Demostraci\u00f3n en vivo </h3>\n<p>Puedes probar la nueva sintaxis de fragmentos JSX con este <a class=\"external-link\" href=\"https://codepen.io/reactjs/pen/VrEbjE?editors=1000\">CodePen</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/fragments.md\">Edit this page</a></p></div></article>", "path": "/react/fragments", "nav": ["/react/forwarding-refs", "/react/higher-order-components"]}, {"key": "Componentes de orden superior", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Un componente de orden superior (<em>HOC</em> por las siglas en ingl\u00e9s de <em>higher-order component</em>) es una t\u00e9cnica avanzada en React para el reuso de la l\u00f3gica de componentes. Los <em>HOCs</em> no son parte de la API de React. Son un patr\u00f3n que surge de la naturaleza composicional de React.</p>\n<p>En concreto, <strong>un componente de orden superior es una funci\u00f3n que recibe un componente y devuelve un nuevo componente.</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">higherOrderComponent</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mientras que un componente transforma <em>props</em> en interfaz de usuario, un componente de orden superior transforma un componente en otro.</p>\n<p>Los <em>HOCs</em> son comunes en bibliotecas de terceros usadas en React, tales como <a class=\"external-link\" href=\"https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#connect\"><code class=\"language-javascript\">connect</code></a> en <em>Redux</em> y <a class=\"external-link\" href=\"https://relay.dev/docs/v10.1.3/fragment-container/#createfragmentcontainer\"><code class=\"language-javascript\">createFragmentContainer</code></a> en <em>Relay</em>.</p>\n<p>En este documento discutiremos por qu\u00e9 los componentes de orden superior son \u00fatiles y como escribir tus propios <em>HOCs</em>.</p>\n<h2 id=\"usa-hocs-para-preocupaciones-transversales\"><a class=\"anchor\" href=\"/react/higher-order-components#usa-hocs-para-preocupaciones-transversales\"></a>Usa HOCs para preocupaciones transversales</h2>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Anteriormente recomend\u00e1bamos el uso de <em>mixins</em> para manejar las preocupaciones transversales. Desde entonces, nos hemos dado cuenta que los <em>mixins</em> causan m\u00e1s problemas de los que resuelven. <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">Lee m\u00e1s</a> acerca de por qu\u00e9 hemos decidido alejarnos de los <em>mixins</em> y como puedes migrar tus componentes existentes.</p>\n</div>\n<p>Los componentes son la unidad primaria de reuso de c\u00f3digo en React. Sin embargo, encontrar\u00e1s que algunos patrones no se ajustan directamente a componentes tradicionales.</p>\n<p>Por ejemplo, digamos que tienes un componente <code class=\"language-javascript\">CommentList</code> que se suscribe a una fuente de datos externa para renderizar una lista de comentarios:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// \"DataSource\" es alguna fuente de datos global</span>\n      <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Suscribirse a los cambios</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Eliminar el manejador de eventos de cambios</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Actualizar el estado del componente cuando la fuente de datos cambie</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">comments</span><span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">comment</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span></span> <span class=\"token attr-name\">comment</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Posteriormente escribes un componente para suscribirte a un \u00fanico post de un blog, el cual sigue un patr\u00f3n similar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPost</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">blogPost</span><span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">blogPost</span><span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TextBlock</span></span> <span class=\"token attr-name\">text</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>blogPost<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">CommentList</code> y <code class=\"language-javascript\">BlogPost</code> no son id\u00e9nticos, ambos llaman a m\u00e9todos distintos en <code class=\"language-javascript\">DataSource</code>, y renderizan una salida diferente. Pero gran parte de su implementaci\u00f3n es la misma:</p>\n<ul>\n<li>Al montar, a\u00f1adir un manejador de eventos de cambio al <code class=\"language-javascript\">DataSource</code>.</li>\n<li>En el manejador de eventos, llamar <code class=\"language-javascript\">setState</code> cada vez que la fuente de datos cambie.</li>\n<li>Al desmontar, eliminar el manejador de eventos de cambio.</li>\n</ul>\n<p>Puedes imaginarte que en una aplicaci\u00f3n grande, este mismo patr\u00f3n de suscribirse a <code class=\"language-javascript\">DataSource</code> y llamar <code class=\"language-javascript\">setState</code> se repetir\u00e1 una y otra vez. Necesitamos una abstracci\u00f3n que nos permita definir esta l\u00f3gica en un solo lugar y compartirla a trav\u00e9s de m\u00faltiples componentes. En esto es donde los componentes de orden superior se destacan.</p>\n<p>Podemos crear una funci\u00f3n que cree componentes, como <code class=\"language-javascript\">CommentList</code> y <code class=\"language-javascript\">BlogPost</code>, que se subscriben a <code class=\"language-javascript\">DataSource</code>. La funci\u00f3n aceptar\u00e1 como uno de sus argumentos un componente hijo que recibir\u00e1 los datos suscritos como un <em>prop</em>. Llamemos esta funci\u00f3n <code class=\"language-javascript\">withSubscription</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> CommentListWithSubscription <span class=\"token operator\">=</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>\n  CommentList<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">DataSource</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> BlogPostWithSubscription <span class=\"token operator\">=</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>\n  BlogPost<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">DataSource<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBlogPost</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>El primer par\u00e1metro es el componente envuelto. El segundo par\u00e1metro obtiene los datos en los que estamos interesados dado un <code class=\"language-javascript\">DataSource</code> y los <em>props</em> actuales.</p>\n<p>Cuando <code class=\"language-javascript\">CommentListWithSubscription</code> y <code class=\"language-javascript\">BlogPostWithSubscription</code> sean renderizados, <code class=\"language-javascript\">CommentList</code> y <code class=\"language-javascript\">BlogPost</code> recibir\u00e1n un <em>prop</em> <code class=\"language-javascript\">data</code> con los datos m\u00e1s actualizados recibidos de <code class=\"language-javascript\">DataSource</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Esta funci\u00f3n recibe un componente...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent<span class=\"token punctuation\">,</span> selectData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...y devuelve otro componente...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token function\">selectData</span><span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ... que se encarga de la suscripci\u00f3n...</span>\n      DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">addChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">removeChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token function\">selectData</span><span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ... y renderiza el componente envuelto con los datos frescos!</span>\n      <span class=\"token comment\">// Toma nota de que pasamos cualquier prop adicional</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>N\u00f3tese que un <em>HOC</em> no modifica el componente de entrada, ni usa herencia para copiar su comportamiento. En su lugar, un <em>HOC</em> <strong>compone</strong> el componente original al <strong>envolverlo</strong> en un componente contenedor. Un <em>HOC</em> es una funci\u00f3n pura sin efectos colaterales.</p>\n<p>\u00a1Y, eso es todo!. El componente envuelto recibe todos los <em>props</em> del contenedor, junto con un nuevo <em>prop</em>, <code class=\"language-javascript\">data</code>, el cual es usado para renderizar su salida. Al <em>HOC</em> no le importa c\u00f3mo o porqu\u00e9 los datos son usados, y al componente envuelto no le importa de donde proceden los datos.</p>\n<p>Debido a que <code class=\"language-javascript\">withSubscription</code> es una funci\u00f3n normal, puedes a\u00f1adir tantos, o tan pocos, argumentos como desees. Por ejemplo, puedes querer hacer el nombre del <em>prop</em> <code class=\"language-javascript\">data</code> configurable, para aislar a\u00fan m\u00e1s el <em>HOC</em> del componente envuelto. O podr\u00edas aceptar un argumento que configure <code class=\"language-javascript\">shouldComponentUpdate</code>, o alguno que configure la fuente de datos. Todo esto es posible porque el <em>HOC</em> tiene el control total sobre como se define el componente.</p>\n<p>Tal como los componentes, el contrato entre <code class=\"language-javascript\">withSubscription</code> y el componente envuelto est\u00e1 basado completamente en los <em>props</em>. Esto hace f\u00e1cil intercambiar un <em>HOC</em> por otro, siempre y cuando provean los mismos <em>props</em> al componente envuelto. Esto puede ser \u00fatil si cambias de bibliotecas de obtenci\u00f3n de datos, por ejemplo.</p>\n<h2 id=\"no-mutes-el-componente-original-usa-composici\u00f3n\"><a class=\"anchor\" href=\"/react/higher-order-components#no-mutes-el-componente-original-usa-composici%C3%B3n\"></a>No mutes el componente original. Usa composici\u00f3n.</h2>\n<p>Resiste la tentaci\u00f3n de modificar el prototipo de un componente (o de mutarlo de cualquier otra forma) dentro de un <em>HOC</em></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">InputComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">InputComponent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">componentDidUpdate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current props: '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Previous props: '</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// El hecho de que estamos devolviendo la entrada original es una pista</span>\n  <span class=\"token comment\">// de que ha sido mutada.</span>\n  <span class=\"token keyword\">return</span> InputComponent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// EnhancedComponent se encargar\u00e1 de logear cuando los props sean recibidos</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span>InputComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Existen varios problemas con esto. Uno es que el componente de entrada no podr\u00e1 ser usado aparte del componente mejorado. M\u00e1s importante a\u00fan, si aplicas otro <em>HOC</em> al <code class=\"language-javascript\">EnhancedComponent</code> que <strong>tambi\u00e9n</strong> mute <code class=\"language-javascript\">componentDidUpdate</code>, \u00a1la funcionalidad del primer <em>HOC</em> ser\u00e1 sobrescrita!. Este <em>HOC</em> tampoco funcionar\u00e1 con componentes funcionales, los cuales no poseen los m\u00e9todos del ciclo de vida.</p>\n<p>Mutar <em>HOCs</em> es una abstracci\u00f3n con fugas, el consumidor tiene que saber como est\u00e1n implementados para evitar conflictos con otros <em>HOCs</em>.</p>\n<p>En lugar de mutaciones, los <em>HOCs</em> deben usar composici\u00f3n, al envolver el componente de entrada en un componente contenedor.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current props: '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Previous props: '</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Envuelve el componente de entrada en un contenedor, sin mutarlo. \u00a1Bien!</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este <em>HOC</em> posee la misma funcionalidad que la versi\u00f3n con mutaci\u00f3n, pero al mismo tiempo evita el potencial de conflictos. Funciona igualmente bien con componentes de clase o de funci\u00f3n. Y dado que es una funci\u00f3n pura es posible componerlo con otros <em>HOCs</em>, o incluso consigo mismo.</p>\n<p>Puedes haber notado similitud entre los <em>HOCs</em> y un patr\u00f3n llamado <strong>componentes contenedores</strong>. Los componentes contenedores son parte de una estrategia de separaci\u00f3n de responsabilidades entre preocupaciones de alto y bajo nivel. Los contenedores manejan temas como subscripciones y estado, y pasan <em>props</em> a componentes que manejan temas como renderizar la interfaz de usuario. Los <em>HOCs</em> usan contenedores como parte de su implementaci\u00f3n. Puedes pensar en los <em>HOCs</em> como definiciones de componentes contenedores parametrizables. </p>\n<h2 id=\"convenci\u00f3n-pasa-los-props-no-relacionados-al-componente-envuelto\"><a class=\"anchor\" href=\"/react/higher-order-components#convenci%C3%B3n-pasa-los-props-no-relacionados-al-componente-envuelto\"></a>Convenci\u00f3n: Pasa los <em>Props</em> no relacionados al componente envuelto</h2>\n<p>Los <em>HOCs</em> a\u00f1aden funcionalidad a un componente. No deber\u00edan alterar de forma dr\u00e1stica su contrato. Se espera que el componente devuelto por un <em>HOC</em> tenga una interfaz similar al componente envuelto.</p>\n<p>Los <em>HOCs</em> deben pasar directamente los <em>props</em> que no tengan relaci\u00f3n con su preocupaci\u00f3n espec\u00edfica. La mayor\u00eda de los <em>HOCs</em> contienen un m\u00e9todo <code class=\"language-javascript\">render</code> que se ve algo como esto: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Filtra los props extras que son espec\u00edficos de este HOC y que no deben</span>\n  <span class=\"token comment\">// ser pasados</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> extraProp<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>passThroughProps <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Inyecta los props en el componente envuelto. Estos son usualmente valores</span>\n  <span class=\"token comment\">// de estado o m\u00e9todos de instancia</span>\n  <span class=\"token keyword\">const</span> injectedProp <span class=\"token operator\">=</span> someStateOrInstanceMethod<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Pasa los props al componente envuelto</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span>\n      <span class=\"token attr-name\">injectedProp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>injectedProp<span class=\"token punctuation\">}</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>passThroughProps<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esta convenci\u00f3n ayuda a asegurar que los <em>HOCs</em> sean tan flexibles y reutilizables como sea posible.</p>\n<h2 id=\"convenci\u00f3n-maximizar-la-componibilidad\"><a class=\"anchor\" href=\"/react/higher-order-components#convenci%C3%B3n-maximizar-la-componibilidad\"></a>Convenci\u00f3n: Maximizar la componibilidad</h2>\n<p>No todos los <em>HOCs</em> se ven igual. Algunas veces aceptan tan solo un argumento, el componente envuelto:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> NavbarWithRouter <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>Navbar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Usualmente aceptan argumentos adicionales. En este ejemplo de <em>Relay</em> un objeto de configuraci\u00f3n es usado para especificar las dependencias de datos de un componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> CommentWithRelay <span class=\"token operator\">=</span> Relay<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>Comment<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>La firma m\u00e1s com\u00fan para los <em>HOCs</em> se ve as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// `connect` en react-redux</span>\n<span class=\"token keyword\">const</span> ConnectedComment <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">,</span> commentActions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CommentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>!\u00bfQu\u00e9?!</em> Si lo divides en partes es m\u00e1s f\u00e1cil de entender que sucede.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// connect es una funci\u00f3n que retorna otra funci\u00f3n</span>\n<span class=\"token keyword\">const</span> enhance <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentListSelector<span class=\"token punctuation\">,</span> commentListActions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// La funci\u00f3n retornada es un HOC, el cual retorna un componente conectado</span>\n<span class=\"token comment\">// al `store` de Redux</span>\n<span class=\"token keyword\">const</span> ConnectedComment <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>CommentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En otras palabras, <code class=\"language-javascript\">connect</code> es una funci\u00f3n de orden superior que devuelve un componente de orden superior!</p>\n<p>Esta forma puede parecer confusa o innecesaria, pero tiene una propiedad \u00fatil. Los <em>HOCs</em> de un solo argumento, como los que devuelve la funci\u00f3n <code class=\"language-javascript\">connect</code> tienen la firma <code class=\"language-javascript\">Component =&gt; Component</code>. Las funciones cuyo tipo de salida es el mismo que el de entrada son muy f\u00e1ciles de componer.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// En lugar de hacer esto...</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ... puedes usar una utilidad para componer funciones</span>\n<span class=\"token comment\">// compose(f, g, h) es lo mismo que (...args) =&gt; f(g(h(...args)))</span>\n<span class=\"token keyword\">const</span> enhance <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// Ambos son HOCs que reciben un \u00fanico argumento</span>\n  withRouter<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>commentSelector<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span></code></pre></div>\n<p>(Esta misma propiedad tambi\u00e9n permite a <code class=\"language-javascript\">connect</code>, y a otros <em>HOCs</em> de estilo mejoradores, que sean usados como decoradores, una propuesta experimental en JavaScript.)</p>\n<p>La funci\u00f3n utilitaria <code class=\"language-javascript\">compose</code> es provista por muchas bibliotecas de terceros, incluida en <em>lodash</em> (como <a class=\"external-link\" href=\"https://lodash.com/docs/#flowRight\"><code class=\"language-javascript\">lodash.flowRight</code></a>), en <a class=\"external-link\" href=\"https://redux.js.org/api/compose\">Redux</a>, y en <a class=\"external-link\" href=\"http://ramdajs.com/docs/#compose\">Ramda</a>.</p>\n<h2 id=\"convenci\u00f3n-envuelve-el-nombre-a-mostrar-para-una-depuraci\u00f3n-f\u00e1cil\"><a class=\"anchor\" href=\"/react/higher-order-components#convenci%C3%B3n-envuelve-el-nombre-a-mostrar-para-una-depuraci%C3%B3n-f%C3%A1cil\"></a>Convenci\u00f3n: Envuelve el nombre a mostrar para una depuraci\u00f3n f\u00e1cil</h2>\n<p>Los componentes contenedores creados por los <em>HOCs</em> se muestran en las <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-devtools\">Herramientas de Desarrollo de React</a> como cualquier otro componente. Para facilitar la depuraci\u00f3n elige que se muestre un nombre que comunique que es el resultado de un <em>HOC</em>.</p>\n<p>La t\u00e9cnica m\u00e1s com\u00fan consiste en envolver el <code class=\"language-javascript\">displayName</code> del componente envuelto. De esta forma si tu componente de orden superior se llama <code class=\"language-javascript\">withSubscription</code>, y el <code class=\"language-javascript\">displayName</code> del componente envuelto es <code class=\"language-javascript\">CommentList</code>, usa como nombre a mostrar <code class=\"language-javascript\">WithSubscription(CommentList)</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithSubscription</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span>\n  WithSubscription<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">WithSubscription(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> WithSubscription<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> WrappedComponent<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> WrappedComponent<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">'Component'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"consideraciones\"><a class=\"anchor\" href=\"/react/higher-order-components#consideraciones\"></a>Consideraciones</h2>\n<p>Los componentes de orden superior vienen con algunas consideraciones que no son obvias inmediatamente si eres nuevo en React.</p>\n<h3 id=\"no-uses-hocs-dentro-del-m\u00e9todo-render\"><a class=\"anchor\" href=\"/react/higher-order-components#no-uses-hocs-dentro-del-m%C3%A9todo-render\"></a>No uses <em>HOCs</em> dentro del m\u00e9todo <em>render</em></h3>\n<p>El algoritmo de detecci\u00f3n de diferencias de React (llamado <a href=\"/react/reconciliation\">reconciliaci\u00f3n</a>) utiliza la identidad del componente para determinar si debe actualizar el sub\u00e1rbol existente o desecharlo y montar uno nuevo. Si el componente devuelto por <code class=\"language-javascript\">render</code> es id\u00e9ntico (<code class=\"language-javascript\">===</code>) al componente de la llamada a <code class=\"language-javascript\">render</code> previa, React actualiza el sub\u00e1rbol calculando las diferencias con el nuevo. Si no son iguales, el sub\u00e1rbol anterior es desmontado completamente.</p>\n<p>Normalmente no es necesario pensar acerca de esto. Pero importa para los <em>HOCs</em> porque significa que no puedes aplicar un <em>HOC</em> a un componente dentro del m\u00e9todo <code class=\"language-javascript\">render</code> de otro componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Una nueva versi\u00f3n de EnhancedComponent es creada en cada render</span>\n  <span class=\"token comment\">// EnhancedComponent1 !== EnhancedComponent2</span>\n  <span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Esto causa que el sub\u00e1rbol entero se desmonte/monte cada vez!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EnhancedComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El problema aqu\u00ed mostrado no es tan solo acerca del rendimiento, desmontar un componente causa que el estado de ese componente y de todos sus hijos se pierda.</p>\n<p>En su lugar, aplica los <em>HOCs</em> por fuera de la definici\u00f3n del componente de manera que el componente resultante se creado solo una vez. De esta forma su identidad ser\u00e1 consistente entre llamadas a <code class=\"language-javascript\">render</code>. Esto, de todas formas, es lo que usualmente deseas.</p>\n<p>En aquellos casos extra\u00f1os donde necesites aplicar un <em>HOC</em> de forma din\u00e1mica, tambi\u00e9n puedes hacerlo en los m\u00e9todos del ciclo de vida, o en su constructor.</p>\n<h3 id=\"los-m\u00e9todos-est\u00e1ticos-deben-ser-copiados\"><a class=\"anchor\" href=\"/react/higher-order-components#los-m%C3%A9todos-est%C3%A1ticos-deben-ser-copiados\"></a>Los m\u00e9todos est\u00e1ticos deben ser copiados</h3>\n<p>A veces resulta \u00fatil definir un m\u00e9todo est\u00e1tico en un componente React. Por ejemplo, los contenedores de <em>Relay</em> exponen el m\u00e9todo est\u00e1tico <code class=\"language-javascript\">getFragment</code> para facilitar la composici\u00f3n de fragmentos <em>GraphQL</em>.</p>\n<p>Sin embargo, cuando aplicas un <em>HOC</em> a un componente, el componente original es envuelto en un componente contenedor. Eso quiere decir que el nuevo componente no tendr\u00e1 ninguno de los m\u00e9todos est\u00e1ticos del componente original.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Define un m\u00e9todo est\u00e1tico</span>\nWrappedComponent<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">staticMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Ahora aplica un HOC</span>\n<span class=\"token keyword\">const</span> EnhancedComponent <span class=\"token operator\">=</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// El componente mejorado no tiene el m\u00e9todo est\u00e1tico</span>\n<span class=\"token keyword\">typeof</span> EnhancedComponent<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>Para solucionar esto debes copiar los m\u00e9todos en el contenedor antes de devolverlo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Debes saber exactamente que m\u00e9todo(s) copiar :(</span>\n  Enhance<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">=</span> WrappedComponent<span class=\"token punctuation\">.</span>staticMethod<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sin embargo, esto requiere que conozcas exactamente cuales m\u00e9todos necesitan ser copiados. Puedes usar la biblioteca <a class=\"external-link\" href=\"https://github.com/mridgway/hoist-non-react-statics\">hoist-non-react-statics</a> para copiar autom\u00e1ticamente todos los m\u00e9todos est\u00e1ticos no relacionados con React:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> hoistNonReactStatic <span class=\"token keyword\">from</span> <span class=\"token string\">'hoist-non-react-statics'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">hoistNonReactStatic</span><span class=\"token punctuation\">(</span>Enhance<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Otra soluci\u00f3n posible es exportar los m\u00e9todos est\u00e1ticos de forma separada del propio componente.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// En lugar de...</span>\nMyComponent<span class=\"token punctuation\">.</span>someFunction <span class=\"token operator\">=</span> someFunction<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> MyComponent<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...exporta el m\u00e9todo de forma separada...</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> someFunction <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...y en el m\u00f3dulo que los consuma, importa ambos</span>\n<span class=\"token keyword\">import</span> MyComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> someFunction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./MyComponent.js'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"las-refs-no-son-pasadas\"><a class=\"anchor\" href=\"/react/higher-order-components#las-refs-no-son-pasadas\"></a>Las <em>Refs</em> no son pasadas</h3>\n<p>Aunque la convenci\u00f3n para los componentes de orden superior es pasar todos los <em>props</em> al componente envuelto, esto no funciona para las <em>refs</em>. Esto es porque <code class=\"language-javascript\">ref</code> no es realmente un <em>prop</em>, al igual que <code class=\"language-javascript\">key</code> es manejado de forma especial por React. Si a\u00f1ades una <em>ref</em> a un elemento cuyo componente es el resultado de un <em>HOC</em>, esa <em>ref</em> se refiere a la instancia del componente contenedor m\u00e1s externo, no al componente envuelto.</p>\n<p>La soluci\u00f3n a este problema es usar la API <code class=\"language-javascript\">React.forwardRef</code> (introducida con React 16.3). <a href=\"/react/forwarding-refs\">Aprende m\u00e1s acerca de esta API en la secci\u00f3n acerca de Reenv\u00edo de Refs</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/higher-order-components.md\">Edit this page</a></p></div></article>", "path": "/react/higher-order-components", "nav": ["/react/fragments", "/react/integrating-with-other-libraries"]}, {"key": "Integraci\u00f3n con otras bibliotecas", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React puede ser utilizado en cualquier aplicaci\u00f3n web. Puede integrarse en otras aplicaciones y, con un poco de cuidado, otras aplicaciones pueden integrarse en React. Esta gu\u00eda examinar\u00e1 algunos de los casos de uso m\u00e1s comunes, centr\u00e1ndose en la integraci\u00f3n con <a class=\"external-link\" href=\"https://jquery.com/\">jQuery</a> y <a class=\"external-link\" href=\"https://backbonejs.org/\">Backbone</a>, pero las mismas ideas pueden ser aplicadas a la integraci\u00f3n de componentes con cualquier c\u00f3digo existente.</p>\n<h2 id=\"integrating-with-dom-manipulation-plugins\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-dom-manipulation-plugins\"></a>Integraci\u00f3n con los plugins de manipulaci\u00f3n del DOM </h2>\n<p>React es inconsciente de los cambios realizados en el DOM fuera de React. React determina las actualizaciones bas\u00e1ndose en su propia representaci\u00f3n interna, y si los mismos nodos DOM son manipulados por otra biblioteca, React se confunde y no tiene forma de recuperarse.</p>\n<p>Esto no significa que sea imposible o incluso necesariamente dif\u00edcil de combinar React con otras formas de afectar el DOM, solo hay que tener en cuenta lo que est\u00e1 haciendo cada uno.</p>\n<p>La forma m\u00e1s f\u00e1cil de evitar conflictos es evitar que el componente React se actualice. Puedes hacer esto renderizando elementos que React no tiene motivos para actualizar, como un <code class=\"language-javascript\">&lt;div /&gt;</code> vac\u00edo.</p>\n<h3 id=\"how-to-approach-the-problem\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#how-to-approach-the-problem\"></a>C\u00f3mo abordar el problema </h3>\n<p>Para demostrar esto, vamos a definir un wrapper para un plugin gen\u00e9rico de jQuery.</p>\n<p>Adjuntaremos un <a href=\"/react/refs-and-the-dom\">ref</a> al elemento DOM ra\u00edz. Dentro de <code class=\"language-javascript\">componentDidMount</code>, obtendremos una referencia a \u00e9l para que podamos pasarlo al plugin jQuery.</p>\n<p>Para evitar que React toque el DOM despu\u00e9s del montaje, devolveremos un <code class=\"language-javascript\">&lt;div /&gt;</code> vac\u00edo desde el m\u00e9todo <code class=\"language-javascript\">render()</code>. El elemento <code class=\"language-javascript\">&lt;div /&gt;</code> no tiene propiedades ni hijos, por lo que React no tiene ninguna raz\u00f3n para actualizarlo, dejando el plugin jQuery libre para administrar esa parte del DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SomePlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">somePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">somePlugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ten en cuenta que definimos los <a href=\"/react/react-component#the-component-lifecycle\">m\u00e9todos del ciclo de vida</a> <code class=\"language-javascript\">componentDidMount</code> y<code class=\"language-javascript\">componentWillUnmount</code>. Muchos plugins de jQuery adjuntan listeners de eventos al DOM, por lo que es importante desmontarlos en <code class=\"language-javascript\">componentWillUnmount</code>. Si el complemento no proporciona un m\u00e9todo para la limpieza, probablemente tendr\u00e1s que proporcionar el tuyo, recordando eliminar cualquier listener de eventos que el plugin haya registrado para evitar p\u00e9rdidas de memoria.</p>\n<h3 id=\"integrating-with-jquery-chosen-plugin\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-jquery-chosen-plugin\"></a>Integraci\u00f3n con el plugin jQuery Chosen </h3>\n<p>Para un ejemplo m\u00e1s concreto de estos conceptos, escribamos un wrapper m\u00ednimo para el plugin <a class=\"external-link\" href=\"https://harvesthq.github.io/chosen/\">Chosen</a>, que aumenta las entradas <code class=\"language-javascript\">&lt;select&gt;</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Solo porque es posible, no significa que sea el mejor enfoque para las aplicaciones React. Te recomendamos que uses los componentes React cuando puedas. Los componentes de React son m\u00e1s f\u00e1ciles de reutilizar en las aplicaciones de React y, a menudo, brindan m\u00e1s control sobre su comportamiento y apariencia.</p>\n</div>\n<p>Primero, veamos lo que <code class=\"language-javascript\">Chosen</code> le hace al DOM.</p>\n<p>Si lo llama en un nodo DOM <code class=\"language-javascript\">&lt;select&gt;</code>, este lee los atributos fuera del nodo DOM original, lo oculta con un estilo en l\u00ednea y luego agrega un nodo DOM separado con su propia representaci\u00f3n visual justo despu\u00e9s del <code class=\"language-javascript\">&lt;select&gt;</code>. Luego, se activan los eventos de jQuery para notificarnos sobre los cambios.</p>\n<p>Digamos que esta es la API que buscamos con nuestro componente wrapper <code class=\"language-javascript\">&lt;Chosen&gt;</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Chosen</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">vanilla</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">chocolate</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">strawberry</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Chosen</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lo implementaremos como un <a href=\"/react/uncontrolled-components\">componente no controlado</a> por simplicidad.</p>\n<p>Primero, crearemos un componente vac\u00edo con un m\u00e9todo <code class=\"language-javascript\">render()</code> donde devolvemos <code class=\"language-javascript\">&lt;select&gt;</code> envuelto en un <code class=\"language-javascript\">&lt;div&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chosen</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Observa c\u00f3mo envolvimos <code class=\"language-javascript\">&lt;select&gt;</code> en un <code class=\"language-javascript\">&lt;div&gt;</code> extra. Esto es necesario porque <code class=\"language-javascript\">Chosen</code> agregar\u00e1 otro elemento DOM justo despu\u00e9s del nodo <code class=\"language-javascript\">&lt;select&gt;</code> que le pasamos. Sin embargo, en lo que respecta a React, <code class=\"language-javascript\">&lt;div&gt;</code> siempre tiene un solo hijo. As\u00ed es como nos aseguramos de que las actualizaciones de React no entren en conflicto con el nodo DOM adicional a\u00f1adido por <code class=\"language-javascript\">Chosen</code>. Es importante que si modificas el DOM fuera del flujo de React, debes asegurarte de que React no tenga una raz\u00f3n para tocar esos nodos DOM.</p>\n<p>A continuaci\u00f3n, implementaremos los m\u00e9todos del ciclo de vida. Necesitamos inicializar <code class=\"language-javascript\">Chosen</code> con la referencia al nodo <code class=\"language-javascript\">&lt;select&gt;</code> en <code class=\"language-javascript\">componentDidMount</code>, y eliminarlo en <code class=\"language-javascript\">componentWillUnmount</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/qmqeQx?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Ten en cuenta que React no asigna ning\u00fan significado especial al campo <code class=\"language-javascript\">this.el</code>. Solo funciona porque previamente hemos asignado este campo desde un <code class=\"language-javascript\">ref</code> en el m\u00e9todo <code class=\"language-javascript\">render()</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Esto es suficiente para hacer que nuestro componente se renderice, pero tambi\u00e9n queremos que se nos notifique acerca de los cambios de valor. Para hacer esto, nos suscribiremos al evento jQuery <code class=\"language-javascript\">change</code> en el <code class=\"language-javascript\">&lt;select&gt;</code> gestionado por <code class=\"language-javascript\">Chosen</code>.</p>\n<p>No pasaremos <code class=\"language-javascript\">this.props.onChange</code> directamente a Chosen porque los props de los componentes pueden cambiar con el tiempo, y eso incluye a los controladores de eventos. En su lugar, declararemos un m\u00e9todo <code class=\"language-javascript\">handleChange()</code> que llama a <code class=\"language-javascript\">this.props.onChange</code>, y lo suscribiremos al evento jQuery <code class=\"language-javascript\">change</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/bWgbeE?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Finalmente, queda una cosa m\u00e1s por hacer. En React, los props pueden cambiar con el tiempo. Por ejemplo, el componente <code class=\"language-javascript\">&lt;Chosen&gt;</code> puede obtener diferentes hijos si el estado del componente padre cambia. Esto significa que en los puntos de integraci\u00f3n es importante que actualicemos manualmente el DOM en respuesta a las actualizaciones de los props, ya que no dejamos que React administre el DOM por nosotros.</p>\n<p>La documentaci\u00f3n de <code class=\"language-javascript\">Chosen</code> sugiere que podemos usar la API jQuery <code class=\"language-javascript\">trigger()</code> para notificarle sobre los cambios en el elemento DOM original. Dejaremos que React se encargue de actualizar <code class=\"language-javascript\">this.props.children</code> dentro de <code class=\"language-javascript\">&lt;select&gt;</code>, pero tambi\u00e9n agregaremos un m\u00e9todo de ciclo de vida <code class=\"language-javascript\">componentDidUpdate()</code> que notifica a <code class=\"language-javascript\">Chosen</code> sobre los cambios en la lista de hijos:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chosen:updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>De esta manera, <code class=\"language-javascript\">Chosen</code> sabr\u00e1 que actualizar\u00e1 su elemento DOM cuando cambien los hijos de <code class=\"language-javascript\">&lt;select&gt;</code> administrados por React.</p>\n<p>La implementaci\u00f3n completa del componente <code class=\"language-javascript\">Chosen</code> se ve as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chosen</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chosen:updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">chosen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Chosen-select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/xdgKOz?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<h2 id=\"integrating-with-other-view-libraries\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-other-view-libraries\"></a>Integraci\u00f3n con otras bibliotecas de vista </h2>\n<p>React puede integrarse en otras aplicaciones gracias a la flexibilidad de <a href=\"/react/react-dom-client#createRoot\"><code class=\"language-javascript\">createRoot()</code></a>.</p>\n<p>Aunque React se usa com\u00fanmente en el inicio para cargar un solo componente React ra\u00edz en el DOM, <code class=\"language-javascript\">createRoot()</code> tambi\u00e9n se puede llamar varias veces para partes independientes de la interfaz de usuario que pueden ser tan peque\u00f1as como un bot\u00f3n, o tan grandes como una aplicaci\u00f3n.</p>\n<p>De hecho, as\u00ed es exactamente c\u00f3mo se utiliza React en Facebook. Esto nos permite escribir aplicaciones en React pieza por pieza y combinarlas con nuestras plantillas existentes generadas por el servidor y otros c\u00f3digos del lado del cliente.</p>\n<h3 id=\"replacing-string-based-rendering-with-react\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#replacing-string-based-rendering-with-react\"></a>Reemplazando el renderizado basado en strings con React </h3>\n<p>Un patr\u00f3n com\u00fan en las aplicaciones web m\u00e1s antiguas es describir los fragmentos del DOM como un string e insertarlo en el DOM de la siguiente manera: <code class=\"language-javascript\">$el.html(htmlString)</code>. Estos puntos en un c\u00f3digo base son perfectos para introducir React. Solo reescribe el renderizado basado en string como un componente React.</p>\n<p>As\u00ed que la siguiente implementaci\u00f3n de jQuery\u2026</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;button id=\"btn\"&gt;Say Hello&lt;/button&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>\u2026 podr\u00eda reescribirse usando un componente React:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Say Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Desde aqu\u00ed, puedes comenzar a mover m\u00e1s l\u00f3gica al componente y comenzar a adoptar pr\u00e1cticas de React m\u00e1s comunes. Por ejemplo, en los componentes es mejor no confiar en las ID porque el mismo componente se puede representar varias veces. En su lugar, usaremos el <a href=\"/react/handling-events\">sistema de eventos de React</a> y registraremos el controlador de clic directamente en el elemento React <code class=\"language-javascript\">&lt;button&gt;</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Say Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/RVKbvW?editors=1010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Puedes tener tantos componentes aislados como desees y usar <code class=\"language-javascript\">ReactDOM.createRoot()</code> para renderizarlos a diferentes contenedores DOM. Gradualmente, a medida que conviertas m\u00e1s de tu aplicaci\u00f3n a React, podr\u00e1s combinarlos en componentes m\u00e1s grandes y mover algunos de las llamadas a <code class=\"language-javascript\">ReactDOM.createRoot()</code> m\u00e1s arriba en la jerarqu\u00eda.</p>\n<h3 id=\"embedding-react-in-a-backbone-view\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#embedding-react-in-a-backbone-view\"></a>Incrustaci\u00f3n de React en una vista de Backbone </h3>\n<p>Las vistas de <a class=\"external-link\" href=\"https://backbonejs.org/\">Backbone</a> suelen utilizar strings HTML, o funciones plantillas que producen strings, para crear el contenido de sus elementos DOM. Este proceso, tambi\u00e9n, puede reemplazarse con la representaci\u00f3n de un componente React.</p>\n<p>A continuaci\u00f3n, crearemos una vista de Backbone llamada <code class=\"language-javascript\">ParagraphView</code>. Anular\u00e1 la funci\u00f3n <code class=\"language-javascript\">render()</code> de Backbone para renderizar un componente React <code class=\"language-javascript\">&lt;Paragraph&gt;</code> en el elemento DOM proporcionado por Backbone (<code class=\"language-javascript\">this.el</code>). Aqu\u00ed tambi\u00e9n estamos usando <a href=\"/react/react-dom-client#createroot\"><code class=\"language-javascript\">ReactDOM.createRoot()</code></a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Paragraph</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ParagraphView <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactRoot <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactRoot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Paragraph</span></span> <span class=\"token attr-name\">text</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reactRoot<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    Backbone<span class=\"token punctuation\">.</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/gWgOYL?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Es importante que tambi\u00e9n llamemos a <code class=\"language-javascript\">root.unmount()</code> en el m\u00e9todo <code class=\"language-javascript\">remove</code> para que React anule el registro de los controladores de eventos y otros recursos asociados con el \u00e1rbol de componentes cuando se desconecta.</p>\n<p>Cuando se elimina un componente <em>desde dentro de</em> un \u00e1rbol de React, la limpieza se realiza autom\u00e1ticamente, pero como estamos eliminando todo el \u00e1rbol a mano, debemos llamar a este m\u00e9todo.</p>\n<h2 id=\"integrating-with-model-layers\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#integrating-with-model-layers\"></a>Integraci\u00f3n con capas de modelo </h2>\n<p>Aunque generalmente se recomienda usar un flujo de datos unidireccional como <a href=\"/react/lifting-state-up\">el estado de React</a>, <a class=\"external-link\" href=\"https://facebook.github.io/flux/\">Flux</a>, o <a class=\"external-link\" href=\"https://redux.js.org/\">Redux</a>, los componentes React pueden usar una capa modelo de otros frameworks.</p>\n<h3 id=\"using-backbone-models-in-react-components\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#using-backbone-models-in-react-components\"></a>Usando Modelos de Backbone en Componentes de React </h3>\n<p>La forma m\u00e1s sencilla de consumir modelos y colecciones <a class=\"external-link\" href=\"https://backbonejs.org/\">Backbone</a> desde un componente React es escuchar los diversos eventos de cambio y forzar manualmente una actualizaci\u00f3n.</p>\n<p>Los componentes responsables de renderizar modelos escuchar\u00e1n los eventos <code class=\"language-javascript\">'change'</code>, mientras que los componentes responsables de renderizar las colecci\u00f3nes escuchar\u00e1n los eventos de <code class=\"language-javascript\">'add'</code> y <code class=\"language-javascript\">'remove'</code>. En ambos casos, llama a <a href=\"/react/react-component#forceupdate\"><code class=\"language-javascript\">this.forceUpdate()</code></a> para volver renderizar el componente con los nuevos datos.</p>\n<p>En el ejemplo a continuaci\u00f3n, el componente <code class=\"language-javascript\">List</code> renderiza una colecci\u00f3n Backbone, utilizando el componente <code class=\"language-javascript\">Item</code> para renderizar elementos individuales.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'remove'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'remove'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">model</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>model<span class=\"token punctuation\">.</span>cid<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">model</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>model<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/GmrREm?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<h3 id=\"extracting-data-from-backbone-models\"><a class=\"anchor\" href=\"/react/integrating-with-other-libraries#extracting-data-from-backbone-models\"></a>Extracci\u00f3n de datos de modelos Backbone </h3>\n<p>El enfoque anterior requiere que sus componentes React est\u00e9n al tanto de los modelos y colecciones de Backbone. Si luego planeas migrar a otra soluci\u00f3n de administraci\u00f3n de datos, es posible que desees concentrar el conocimiento sobre Backbone en la menor cantidad posible de partes del c\u00f3digo.</p>\n<p>Una soluci\u00f3n para esto es extraer los atributos del modelo como datos sin formato cada vez que cambie, y mantener esta l\u00f3gica en un solo lugar. Lo siguiente es <a href=\"/react/higher-order-components\">un componente de orden superior</a> que extrae todos los atributos de un modelo de Backbone al estado, pasando los datos al componente envuelto.</p>\n<p>De esta manera, solo el componente de orden superior necesita conocer los aspectos internos del modelo de Backbone, y la mayor\u00eda de los componentes de la aplicaci\u00f3n pueden permanecer ajenos a Backbone.</p>\n<p>En el siguiente ejemplo, haremos una copia de los atributos del modelo para formar el estado inicial. Nos suscribimos al evento <code class=\"language-javascript\">change</code> (y cancelamos la suscripci\u00f3n al desmontar), y cuando sucede, actualizamos el estado con los atributos actuales del modelo. Finalmente, nos aseguramos de que si el prop <code class=\"language-javascript\">model</code> cambia, no nos olvidemos de cancelar la suscripci\u00f3n del modelo anterior y suscribirnos al nuevo.</p>\n<p>Ten en cuenta que este ejemplo no pretende ser exhaustivo con respecto al trabajo con Backbone, pero deber\u00eda darte una idea de c\u00f3mo abordar esto de una manera gen\u00e9rica:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">connectToBackboneModel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BackboneComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">.</span>model <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">        nextProps<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">model</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">changedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> propsExceptModel <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> propsExceptModel<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>propsExceptModel<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para demostrar c\u00f3mo usarlo, conectaremos un componente React <code class=\"language-javascript\">NameInput</code> a un modelo de Backbone, y actualizaremos su atributo <code class=\"language-javascript\">firstName</code> cada vez que cambie la entrada:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NameInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      My name is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> BackboneNameInput <span class=\"token operator\">=</span> <span class=\"token function\">connectToBackboneModel</span><span class=\"token punctuation\">(</span>NameInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firstName'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BackboneNameInput</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">model</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">}</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token attr-name\">handleChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span></span></span>    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>Model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Frodo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Example</span></span> <span class=\"token attr-name\">model</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>model<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/PmWwwa?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Esta t\u00e9cnica no se limita a Backbone. Puedes usar React con cualquier biblioteca de modelos suscribi\u00e9ndote a sus cambios en los m\u00e9todos del ciclo de vida y, opcionalmente, copiando los datos al estado local de React.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/integrating-with-other-libraries.md\">Edit this page</a></p></div></article>", "path": "/react/integrating-with-other-libraries", "nav": ["/react/higher-order-components", "/react/jsx-in-depth"]}, {"key": "JSX en profundidad", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Fundamentalmente, JSX solo proporciona az\u00facar sint\u00e1ctica para la funci\u00f3n <code class=\"language-javascript\">React.createElement(component, props, ...children)</code>. El c\u00f3digo JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyButton</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">shadowSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Haz click en m\u00ed\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyButton</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>se compila en:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  MyButton<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">shadowSize</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Haz click en m\u00ed'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tambi\u00e9n puedes utilizar la forma de cierre autom\u00e1tico de la etiqueta si no hay hijos. As\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sidebar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>se compila en:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'sidebar'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si deseas probar c\u00f3mo cierto c\u00f3digo JSX en espec\u00edfico se convierte a JavaScript, puedes probar <a class=\"external-link\" href=\"https://babeljs.io/repl/#?presets=react&amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA\">el compilador de Babel en l\u00ednea</a>.</p>\n<h2 id=\"specifying-the-react-element-type\"><a class=\"anchor\" href=\"/react/jsx-in-depth#specifying-the-react-element-type\"></a>Especificando el tipo de elemento React </h2>\n<p>La primera parte de una etiqueta JSX determina el tipo del elemento React.</p>\n<p>Los tipos en may\u00fasculas indican que la etiqueta JSX se refiere a un componente React. Estas etiquetas se compilan en una referencia directa a la variable nombrada, por lo que si usas la expresi\u00f3n JSX <code class=\"language-javascript\">&lt;Foo /&gt;</code>, <code class=\"language-javascript\">Foo</code> debe estar dentro del alcance.</p>\n<h3 id=\"react-must-be-in-scope\"><a class=\"anchor\" href=\"/react/jsx-in-depth#react-must-be-in-scope\"></a>React debe estar al alcance </h3>\n<p>Como JSX se compila en llamadas a <code class=\"language-javascript\">React.createElement</code>, la biblioteca<code class=\"language-javascript\">React</code> tambi\u00e9n debe estar siempre dentro del alcance de tu c\u00f3digo JSX.</p>\n<p>Por ejemplo, ambas importaciones son necesarias en este c\u00f3digo, a pesar de que <code class=\"language-javascript\">React</code> y <code class=\"language-javascript\">CustomButton</code> no est\u00e1n directamente referenciados desde JavaScript:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> CustomButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./CustomButton'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">WarningButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// retorna React.createElement(CustomButton, {color: 'red'}, null);</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomButton</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si no usas un <em>bundler</em> de JavaScript y cargas React desde una etiqueta <code class=\"language-javascript\">&lt;script&gt;</code>, ya est\u00e1 dentro del alcance como el elemento global <code class=\"language-javascript\">React</code>.</p>\n<h3 id=\"using-dot-notation-for-jsx-type\"><a class=\"anchor\" href=\"/react/jsx-in-depth#using-dot-notation-for-jsx-type\"></a>Usando la notaci\u00f3n de punto para el tipo JSX </h3>\n<p>Tambi\u00e9n puedes referirte a un componente React usando notaci\u00f3n de punto desde JSX. Esto es conveniente si tienes un solo m\u00f3dulo que exporta muchos componentes de React. Por ejemplo, si <code class=\"language-javascript\">MyComponents.DatePicker</code> es un componente, puede usarlo directamente desde JSX con:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MyComponents <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">DatePicker</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DatePicker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Imagine a </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> datepicker here.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">BlueDatePicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponents.DatePicker</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"user-defined-components-must-be-capitalized\"><a class=\"anchor\" href=\"/react/jsx-in-depth#user-defined-components-must-be-capitalized\"></a>Los componentes definidos por el usuario deben estar en may\u00fasculas </h3>\n<p>Cuando un tipo de elemento comienza con una letra min\u00fascula, se refiere a un componente incorporado como <code class=\"language-javascript\">&lt;div&gt;</code> o <code class=\"language-javascript\">&lt;span&gt;</code> y da como resultado una cadena <code class=\"language-javascript\">'div'</code> o <code class=\"language-javascript\">'span'</code> que se pasa a <code class=\"language-javascript\">React.createElement</code>. Los tipos que comienzan con una letra may\u00fascula como <code class=\"language-javascript\">&lt;Foo /&gt;</code> compilan a <code class=\"language-javascript\">React.createElement(Foo)</code> y corresponden a un componente definido o importado en tu archivo JavaScript.</p>\n<p>Recomendamos nombrar los componentes con una letra may\u00fascula. Si tienes un componente que comienza con una letra min\u00fascula, as\u00edgnalo a una variable en may\u00fascula antes de usarlo en JSX.</p>\n<p>Por ejemplo, este c\u00f3digo no se ejecutar\u00e1 como se esperaba:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// \u00a1Incorrecto! Este es un componente y deber\u00eda comenzar con may\u00fascula:</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// \u00a1Correcto! Este uso de &lt;div&gt; es leg\u00edtimo porque div es una etiqueta HTML v\u00e1lida:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// \u00a1Incorrecto! React piensa que &lt;hola /&gt; es una etiqueta HTML porque no est\u00e1 en may\u00fascula:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hello</span> <span class=\"token attr-name\">toWhat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para solucionar este problema, cambiaremos el nombre de <code class=\"language-javascript\">hello</code> a <code class=\"language-javascript\">Hello</code> y usaremos <code class=\"language-javascript\">&lt;Hello /&gt;</code> cuando nos refiramos a el:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// \u00a1Correcto! Este es un componente y debe comenzar con may\u00fascula:</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// \u00a1Correcto! Este uso de &lt;div&gt; es leg\u00edtimo porque div es una etiqueta HTML v\u00e1lida:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// \u00a1Correcto! React sabe que &lt;Hello /&gt; es un componente porque est\u00e1 en may\u00fasculas.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">toWhat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"choosing-the-type-at-runtime\"><a class=\"anchor\" href=\"/react/jsx-in-depth#choosing-the-type-at-runtime\"></a>Elegir el tipo en tiempo de ejecuci\u00f3n </h3>\n<p>No puedes utilizar una expresi\u00f3n general como el tipo de elemento React. Si deseas usar una expresi\u00f3n general para indicar el tipo de elemento, primero as\u00edgnala a una variable en may\u00fascula. Esto ocurre a menudo cuando se desea generar un componente diferente basado en un prop:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PhotoStory<span class=\"token punctuation\">,</span> VideoStory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./stories'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">photo</span><span class=\"token operator\">:</span> PhotoStory<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> VideoStory\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Story</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// \u00a1Incorrecto! El tipo JSX no puede ser una expresi\u00f3n.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>components<span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>storyType<span class=\"token punctuation\">]</span> story<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>story<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para solucionar esto, primero asignaremos el tipo a una variable en may\u00fascula:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PhotoStory<span class=\"token punctuation\">,</span> VideoStory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./stories'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">photo</span><span class=\"token operator\">:</span> PhotoStory<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> VideoStory\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Story</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// \u00a1Correcto! El tipo JSX puede ser una variable en may\u00fascula.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> SpecificStory <span class=\"token operator\">=</span> components<span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>storyType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpecificStory</span></span> <span class=\"token attr-name\">story</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>story<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"props-in-jsx\"><a class=\"anchor\" href=\"/react/jsx-in-depth#props-in-jsx\"></a>Props en JSX </h2>\n<p>Hay varias formas diferentes de especificar props en JSX.</p>\n<h3 id=\"javascript-expressions-as-props\"><a class=\"anchor\" href=\"/react/jsx-in-depth#javascript-expressions-as-props\"></a>Expresiones JavaScript como props </h3>\n<p>Puede pasar cualquier expresi\u00f3n de JavaScript como prop, al rodearla con <code class=\"language-javascript\">{}</code>. Por ejemplo, en este JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">foo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Para <code class=\"language-javascript\">MyComponent</code>, el valor de <code class=\"language-javascript\">props.foo</code> ser\u00e1 <code class=\"language-javascript\">10</code> porque se eval\u00faa la expresi\u00f3n <code class=\"language-javascript\">1 + 2 + 3 + 4</code>.</p>\n<p>Las sentencias <code class=\"language-javascript\">if</code> y los bucles <code class=\"language-javascript\">for</code> no son expresiones en JavaScript, por lo que no se pueden usar directamente en JSX. En su lugar, puede poner estos en el c\u00f3digo circundante. Por ejemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NumberDescriber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> description<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    description <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">even</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    description <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">odd</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> is an </span><span class=\"token punctuation\">{</span>description<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> number</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Puedes obtener m\u00e1s informaci\u00f3n sobre <a href=\"/react/conditional-rendering\">renderizado condicional</a> y <a href=\"/react/lists-and-keys\">bucles</a> en las secciones correspondientes.</p>\n<h3 id=\"string-literals\"><a class=\"anchor\" href=\"/react/jsx-in-depth#string-literals\"></a>Literales <em>string</em> </h3>\n<p>Puede pasar un literal <em>string</em> como prop. Estas dos expresiones JSX son equivalentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello world<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Cuando se pasa un literal <em>string</em>, su valor es HTML sin escapar. As\u00ed que estas dos expresiones JSX son equivalentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token entity named-entity\">&amp;lt;</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'&lt;3'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Este comportamiento no suele ser relevante. S\u00f3lo se menciona aqu\u00ed en aras de ser exhaustivos.</p>\n<h3 id=\"props-default-to-true\"><a class=\"anchor\" href=\"/react/jsx-in-depth#props-default-to-true\"></a>Los props son por defecto \u201ctrue\u201d </h3>\n<p>Si no pasas ning\u00fan valor para un prop, el valor predeterminado es <code class=\"language-javascript\">true</code>. Estas dos expresiones JSX son equivalentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyTextBox</span></span> <span class=\"token attr-name\">autocomplete</span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyTextBox</span></span> <span class=\"token attr-name\">autocomplete</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>En general, no recomendamos usarlo porque puede confundirse con la <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015\">notaci\u00f3n simplificada de objetos ES6</a> <code class=\"language-javascript\">{foo}</code> que es la abreviatura de <code class=\"language-javascript\">{foo: foo}</code> en lugar de <code class=\"language-javascript\">{foo: true}</code>. Este comportamiento est\u00e1 para que coincida con el de HTML.</p>\n<h3 id=\"spread-attributes\"><a class=\"anchor\" href=\"/react/jsx-in-depth#spread-attributes\"></a>Atributos de propagaci\u00f3n </h3>\n<p>Si ya tienes <code class=\"language-javascript\">props</code> como objeto, y quiere pasarlo en JSX, puedes usar <code class=\"language-javascript\">...</code> como sintaxis de \u201cpropagaci\u00f3n\u201d para pasar el objeto de props completo. Estos dos componentes son equivalentes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token attr-name\">firstName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Ben<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">lastName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hector<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ben'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hector'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tambi\u00e9n puedes elegir props espec\u00edficos que su componente consumir\u00e1 al pasar todos los dem\u00e1s props utilizando la sintaxis de propagaci\u00f3n.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> kind<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> kind <span class=\"token operator\">===</span> <span class=\"token string\">\"primary\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"PrimaryButton\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"SecondaryButton\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>other<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">kind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Hello World!</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En el ejemplo anterior, el prop <code class=\"language-javascript\">kind</code> se consume de forma segura <em>y no</em> se pasa al elemento <code class=\"language-javascript\">&lt;button&gt;</code> en el DOM.\nTodos los dem\u00e1s props se pasan a trav\u00e9s del objeto <code class=\"language-javascript\">...other</code> que hace que este componente sea realmente flexible. Puedes ver que pasa un <code class=\"language-javascript\">onClick</code> y <code class=\"language-javascript\">children</code> props.</p>\n<p>Los atributos de propagaci\u00f3n pueden ser \u00fatiles, pero tambi\u00e9n facilitan la transferencia de propiedades innecesarias a los componentes que no les interesan o la transferencia de atributos HTML no v\u00e1lidos al DOM. Recomendamos utilizar esta sintaxis con moderaci\u00f3n. </p>\n<h2 id=\"children-in-jsx\"><a class=\"anchor\" href=\"/react/jsx-in-depth#children-in-jsx\"></a>Hijos en JSX </h2>\n<p>En las expresiones JSX que contienen una etiqueta de apertura y una etiqueta de cierre, el contenido entre esas etiquetas se pasa como un elemento especial: <code class=\"language-javascript\">props.children</code>. Hay varias maneras diferentes de pasar a los hijos:</p>\n<h3 id=\"string-literals-1\"><a class=\"anchor\" href=\"/react/jsx-in-depth#string-literals-1\"></a>Cadenas de Literales </h3>\n<p>Puede poner un <em>string</em> entre las etiquetas de apertura y cierre y <code class=\"language-javascript\">props.children</code> ser\u00e1 solo ese <em>string</em>. Esto es \u00fatil para muchos de los elementos HTML integrados. Por ejemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Esto es JSX v\u00e1lido, y <code class=\"language-javascript\">props.children</code> en <code class=\"language-javascript\">MyComponent</code> simplemente ser\u00e1 el <em>string</em> <code class=\"language-javascript\">Hello world!</code>. El c\u00f3digo HTML no se ha escapado, por lo que generalmente puedes escribir JSX de la misma manera que escribir\u00edas HTML de esta manera:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>This is valid HTML <span class=\"token entity named-entity\">&amp;amp;</span> JSX at the same time.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>JSX elimina los espacios en blanco al principio y al final de una l\u00ednea. Tambi\u00e9n elimina las l\u00edneas en blanco. Se eliminan las nuevas l\u00edneas adyacentes a las etiquetas, las nuevas l\u00edneas que se producen en medio de literales de <em>string</em> se condensan en un solo espacio. As\u00ed que todo esto se traduce en lo mismo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello World\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello\n  World\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n  Hello World\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h3 id=\"jsx-children\"><a class=\"anchor\" href=\"/react/jsx-in-depth#jsx-children\"></a>Los hijos JSX </h3>\n<p>Puedes proporcionar m\u00e1s elementos JSX como hijos. Esto es \u00fatil para mostrar componentes anidados:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyContainer</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyFirstComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MySecondComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyContainer</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Puedes mezclar diferentes tipos de hijos, as\u00ed que puedes usar literales de <em>string</em> junto con hijos JSX. Esta es otra forma en la que JSX es como HTML, de modo que es tanto JSX v\u00e1lido como HTML v\u00e1lido:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  Here is a list:\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Item 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Item 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Un componente de React tambi\u00e9n puede retornar un array de elementos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \u00a1No es necesario envolver los elementos de la lista en un elemento adicional!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// No olvides las llaves :)</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">First item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>B<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Second item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>C<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Third item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"javascript-expressions-as-children\"><a class=\"anchor\" href=\"/react/jsx-in-depth#javascript-expressions-as-children\"></a>Expresiones de JavaScript como hijos </h3>\n<p>Puedes pasar cualquier expresi\u00f3n de JavaScript como hijos, encerr\u00e1ndola dentro de <code class=\"language-javascript\">{}</code>. Por ejemplo, estas expresiones son equivalentes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">foo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">MyComponent</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Esto suele ser \u00fatil para representar una lista de expresiones JSX de longitud arbitraria. Por ejemplo, esto renderiza una lista HTML:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Item</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'finish doc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'submit pr'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nag dan to review'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">message</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Las expresiones de JavaScript se pueden mezclar con otros tipos de hijos. Esto suele ser \u00fatil en lugar de <em>string templates</em>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>addressee<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"functions-as-children\"><a class=\"anchor\" href=\"/react/jsx-in-depth#functions-as-children\"></a>Funciones como hijos </h3>\n<p>Normalmente, las expresiones de JavaScript insertadas en JSX se evaluar\u00e1n como una cadena, un elemento React o una lista de esas cosas. Sin embargo, <code class=\"language-javascript\">props.children</code> funciona igual que cualquier otro prop, ya que puede pasar cualquier tipo de datos, no solo los tipos que React sabe c\u00f3mo procesar. Por ejemplo, si tienes un componente personalizado, puedes hacer que tome un <em>callback</em> como <code class=\"language-javascript\">props.children</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Llama al *callback* `numTimes` veces para producir un componente repetido</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> props<span class=\"token punctuation\">.</span>numTimes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ListOfTenThings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Repeat</span></span> <span class=\"token attr-name\">numTimes</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">This is item </span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> in the list</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Repeat</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los hijos pasados a un componente personalizado pueden ser cualquier cosa, siempre que ese componente los transforme en algo que React pueda entender antes de renderizar. Este uso no es com\u00fan, pero funciona si desea ampliar lo que JSX es capaz de hacer.</p>\n<h3 id=\"booleans-null-and-undefined-are-ignored\"><a class=\"anchor\" href=\"/react/jsx-in-depth#booleans-null-and-undefined-are-ignored\"></a>Los booleanos, <code class=\"language-javascript\">null</code> y <code class=\"language-javascript\">undefined</code> se ignoran </h3>\n<p><code class=\"language-javascript\">false</code>, <code class=\"language-javascript\">null</code>, <code class=\"language-javascript\">undefined</code> y <code class=\"language-javascript\">true</code> son hijos v\u00e1lidos. Simplemente no se renderizan. Estas expresiones JSX se renderizan todas a la misma forma:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Esto puede ser \u00fatil para renderizar condicionalmente elementos React. Este JSX renderiza el componente <code class=\"language-javascript\">&lt;Header /&gt;</code> solo si <code class=\"language-javascript\">showHeader</code> es<code class=\"language-javascript\">true</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>showHeader <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Una advertencia es que algunos <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Glossary/Falsy\">valores que se comportan como falsos</a>, como el n\u00famero <code class=\"language-javascript\">0</code>, todav\u00eda son renderizados por React. Por ejemplo, este c\u00f3digo no se comportar\u00e1 como se espera porque se imprimir\u00e1 <code class=\"language-javascript\">0</code> cuando <code class=\"language-javascript\">props.messages</code> sea una arreglo vac\u00edo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageList</span></span> <span class=\"token attr-name\">messages</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Para solucionar esto, aseg\u00farate de que la expresi\u00f3n antes de <code class=\"language-javascript\">&amp;&amp;</code> sea siempre booleana:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MessageList</span></span> <span class=\"token attr-name\">messages</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Por el contrario, si desea que aparezca un valor como <code class=\"language-javascript\">false</code>, <code class=\"language-javascript\">true</code>, <code class=\"language-javascript\">null</code> o <code class=\"language-javascript\">undefined</code> en la salida, debes primero <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String#String_conversion\">convertirlo en una cadena</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  My JavaScript variable is </span><span class=\"token punctuation\">{</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>myVariable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/jsx-in-depth.md\">Edit this page</a></p></div></article>", "path": "/react/jsx-in-depth", "nav": ["/react/integrating-with-other-libraries", "/react/optimizing-performance"]}, {"key": "Optimizando el rendimiento", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Internamente, React utiliza diferentes t\u00e9cnicas inteligentes para minimizar el n\u00famero de operaciones DOM costosas requeridas para actualizar la interfaz de usuario. Para muchas aplicaciones, el uso de React conllevar\u00e1 a una interfaz de usuario r\u00e1pida sin hacer mucho trabajo para optimizar espec\u00edficamente el rendimiento. Sin embargo, hay varias maneras de acelerar tu aplicaci\u00f3n de React.</p>\n<h2 id=\"use-the-production-build\"><a class=\"anchor\" href=\"/react/optimizing-performance#use-the-production-build\"></a>Usa el compilado de Producci\u00f3n </h2>\n<p>Si est\u00e1s haciendo an\u00e1lisis comparativos o experimentando problemas de rendimiento en tus aplicaciones de React, aseg\u00farate que est\u00e1s probando con el compilado minificado.</p>\n<p>Por defecto, React incluye muchas alertas \u00fatiles. Estas advertencias son muy \u00fatiles en desarrollo. Sin embargo, estas hacen a React m\u00e1s pesado y lento, as\u00ed que debes asegurarte de usar la versi\u00f3n de producci\u00f3n cuando desplieges la aplicaci\u00f3n.</p>\n<p>Si no est\u00e1s seguro si tu proceso de compilaci\u00f3n est\u00e1 configurado correctamente, puedes revisarlo instalando <a class=\"external-link\" href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React Developer Tools para Chrome</a>. Si visitas un sitio con React en modo de producci\u00f3n, el \u00edcono tendr\u00e1 un fondo oscuro:</p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/d0f767f80866431ccdec18f200ca58f1/0a47e/devtools-prod.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/d0f767f80866431ccdec18f200ca58f1/0a47e/devtools-prod.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Si visitas un sitio con React en modo de desarrollo, el \u00edcono tendr\u00e1 un fondo rojo:</p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/e434ce2f7e64f63e597edf03f4465694/0a47e/devtools-dev.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/e434ce2f7e64f63e597edf03f4465694/0a47e/devtools-dev.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Se espera que uses el modo de desarrollo cuando est\u00e1s trabajando en tu aplicaci\u00f3n, y el modo de producci\u00f3n cuando despliegues tu aplicaci\u00f3n a los usuarios.</p>\n<p>Abajo puedes encontrar las instrucciones para compilar tu aplicaci\u00f3n para producci\u00f3n.</p>\n<h3 id=\"create-react-app\"><a class=\"anchor\" href=\"/react/optimizing-performance#create-react-app\"></a>Create React App </h3>\n<p>Si tu proyecto fue construido con <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">npm run build</code></pre></div>\n<p>Esto crear\u00e1 un compilado de producci\u00f3n de tu aplicaci\u00f3n en el directorio <code class=\"language-javascript\">build/</code> de tu proyecto.</p>\n<p>Recuerda que esto es solo una necesidad antes de desplegar a producci\u00f3n. Para el desarrollo normal, usa <code class=\"language-javascript\">npm start</code>.</p>\n<h3 id=\"single-file-builds\"><a class=\"anchor\" href=\"/react/optimizing-performance#single-file-builds\"></a>Compilados de un solo archivo </h3>\n<p>Ofrecemos versiones listas para producci\u00f3n de React y React DOM como un solo archivo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@18/umd/react.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@18/umd/react-dom.production.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Recuerda que solo los archivos de React que terminan con <code class=\"language-javascript\">production.min.js</code> son apropiados para producci\u00f3n.</p>\n<h3 id=\"brunch\"><a class=\"anchor\" href=\"/react/optimizing-performance#brunch\"></a>Brunch </h3>\n<p>Para el compilado de producci\u00f3n de Brunch m\u00e1s eficiente, instala el plugin <a class=\"external-link\" href=\"https://github.com/brunch/terser-brunch\"><code class=\"language-javascript\">terser-brunch</code></a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\"># Si usas npm\nnpm install --save-dev terser-brunch\n\n# Si usas Yarn\nyarn add --dev terser-brunch</code></pre></div>\n<p>Entonces, para crear un compilado de producci\u00f3n, agrega la bandera <code class=\"language-javascript\">-p</code> al comando <code class=\"language-javascript\">build</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">brunch build -p</code></pre></div>\n<p>Recuerda que solo necesitas hacer esto para los compilados de producci\u00f3n. No deber\u00edas pasar la bandera <code class=\"language-javascript\">-p</code> o aplicar el plugin en desarrollo, porque ocultar\u00e1 las advertencias de React y har\u00e1 las compilaciones mucho m\u00e1s lentas.</p>\n<h3 id=\"browserify\"><a class=\"anchor\" href=\"/react/optimizing-performance#browserify\"></a>Browserify </h3>\n<p>Para el compilado de producci\u00f3n con Browserify m\u00e1s eficiente, instala estos plugins:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\"># Si usas npm\nnpm install --save-dev envify terser uglifyify\n\n# Si usas Yarn\nyarn add --dev envify terser uglifyify  </code></pre></div>\n<p>Para crear un compilado de producci\u00f3n, aseg\u00farate de agregar estas transformaciones <strong>(El orden es importante)</strong>:</p>\n<ul>\n<li>La transformaci\u00f3n <a class=\"external-link\" href=\"https://github.com/hughsk/envify\"><code class=\"language-javascript\">envify</code></a> asegura que el ambiente del compilado sea correcto. Hazlo global (<code class=\"language-javascript\">-g</code>).</li>\n<li>La transformaci\u00f3n <a class=\"external-link\" href=\"https://github.com/hughsk/uglifyify\"><code class=\"language-javascript\">uglifyify</code></a> remueve los <em>import</em> de desarollo. Hazlo global tambi\u00e9n (<code class=\"language-javascript\">-g</code>).</li>\n<li>Finalmente, el <em>bundle</em> resultante es pasado a <a class=\"external-link\" href=\"https://github.com/terser-js/terser\"><code class=\"language-javascript\">terser</code></a> para el proceso de <em>mangling</em> (<a class=\"external-link\" href=\"https://github.com/hughsk/uglifyify#motivationusage\">Lee por qu\u00e9</a>).</li>\n</ul>\n<p>Por ejemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">browserify ./index.js \\\n  -g [ envify --NODE_ENV production ] \\\n  -g uglifyify \\\n  | terser --compress --mangle &gt; ./bundle.js</code></pre></div>\n<p>Recuerda que solo necesitas hacer esto para los compilados de producci\u00f3n. No deber\u00edas aplicar estos plugins en desarrollo por que ocultaran advertencias \u00fatiles de React, y har\u00e1n los compilados mucho m\u00e1s lentos.</p>\n<h3 id=\"rollup\"><a class=\"anchor\" href=\"/react/optimizing-performance#rollup\"></a>Rollup </h3>\n<p>Para un compilado de producci\u00f3n m\u00e1s eficiente con Rollup, instala algunos plugins:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\"># Si usas npm\nnpm install --save-dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-terser\n\n# Si usas Yarn\nyarn add --dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-terser</code></pre></div>\n<p>Para crear un compilado de producci\u00f3n, aseg\u00farate de agregar estos plugins <strong>(el orden es importante)</strong>:</p>\n<ul>\n<li>El plugin <a class=\"external-link\" href=\"https://github.com/rollup/rollup-plugin-replace\"><code class=\"language-javascript\">replace</code></a> asegura que el ambiente correcto para el compilado de producci\u00f3n sea establecido.</li>\n<li>El pluglin <a class=\"external-link\" href=\"https://github.com/rollup/rollup-plugin-commonjs\"><code class=\"language-javascript\">commonjs</code></a> proporciona soporte para CommonJS en Rollup.</li>\n<li>El plugin <a class=\"external-link\" href=\"https://github.com/TrySound/rollup-plugin-terser\"><code class=\"language-javascript\">terser</code></a> comprime y realiza <em>mangle</em> sobre el compilado final.</li>\n</ul>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup-plugin-replace'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'process.env.NODE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup-plugin-commonjs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rollup-plugin-terser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Para un ejemplo de configuraci\u00f3n completa <a class=\"external-link\" href=\"https://gist.github.com/Rich-Harris/cb14f4bc0670c47d00d191565be36bf0\">mira este gist</a>.</p>\n<p>Recuerda que solo necesitas esto para los compilados de producci\u00f3n. No deber\u00edas aplicar el plugin <code class=\"language-javascript\">terser</code> o el plugin <code class=\"language-javascript\">replace</code> con el valor <code class=\"language-javascript\">'production'</code> en desarrollo, por que esto ocultar\u00e1 las advertencias de React y har\u00e1 los compilados mucho m\u00e1s lentos.</p>\n<h3 id=\"webpack\"><a class=\"anchor\" href=\"/react/optimizing-performance#webpack\"></a>webpack </h3>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Si est\u00e1s usando Create React App, por favor sigue <a href=\"/react/optimizing-performance#create-react-app\">las instrucciones arriba</a>.<br/>\nEsta secci\u00f3n solo es relevante si configuras webpack directamente.</p>\n</div>\n<p>Webpack v4+ va a minificar tu c\u00f3digo por defecto en el modo producci\u00f3n.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> TerserPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'terser-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TerserPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/* additional options here */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Puedes aprender m\u00e1s acerca de esto en la <a class=\"external-link\" href=\"https://webpack.js.org/guides/production/\">documentaci\u00f3n de webpack</a>.</p>\n<p>Recuerda que solo necesitas hacer esto para las <em>builds</em> de producci\u00f3n. No deber\u00edas aplicar <code class=\"language-javascript\">TerserPlugin</code> en desarrollo, porque ocultar\u00e1 las advertencias de React y har\u00e1 las <em>builds</em> mucho m\u00e1s lentas.</p>\n<h2 id=\"profiling-components-with-the-devtools-profiler\"><a class=\"anchor\" href=\"/react/optimizing-performance#profiling-components-with-the-devtools-profiler\"></a>An\u00e1lisis de rendimiento de componentes con DevTools Profiler </h2>\n<p><code class=\"language-javascript\">react-dom</code> 16.5+ y <code class=\"language-javascript\">react-native</code> 0.57+ proveen capacidades de an\u00e1lisis de rendimiento (<em>profiling</em>) mejoradas en modo <em>DEV</em> con <em>React DevTools Profiler</em>.\nUn resumen del profiler puede ser encontrado en la publicaci\u00f3n <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/09/10/introducing-the-react-profiler.html\">\u201cIntroducing the React Profiler\u201d</a>.\nUn video tutorial del profiler est\u00e1 <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=nySib7ipZdk\">disponible en YouTube</a>.</p>\n<p>Si a\u00fan no has instalado <em>React DevTools</em>, puedes encontrarlo aqu\u00ed:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\">Extensi\u00f3n de navegador para Chrome</a></li>\n<li><a class=\"external-link\" href=\"https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/\">Extensi\u00f3n de navegador para Firefox</a></li>\n<li><a class=\"external-link\" href=\"https://www.npmjs.com/package/react-devtools\">Paquete independiente para Node</a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Un <em>bundle</em> para an\u00e1lisis de rendimiento en producci\u00f3n de <code class=\"language-javascript\">react-dom</code> est\u00e1 disponible como<code class=\"language-javascript\">react-dom/profiling</code>.\nLee m\u00e1s sobre esto en <a class=\"external-link\" href=\"https://fb.me/react-profiling\">fb.me/react-profiling</a></p>\n</div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Antes de React 17, us\u00e1bamos la <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\">API est\u00e1ndar User Timing</a> para realizar el an\u00e1lisis de rendimiento de componentes con la pesta\u00f1a de rendimiento de Chrome.\nPara una explicaci\u00f3n m\u00e1s detallada, consulta <a class=\"external-link\" href=\"https://calibreapp.com/blog/react-performance-profiling-optimization\">este art\u00edculo de Ben Schwarz (en ingl\u00e9s)</a>.</p>\n</div>\n<h2 id=\"virtualize-long-lists\"><a class=\"anchor\" href=\"/react/optimizing-performance#virtualize-long-lists\"></a>Virtualizar listas largas </h2>\n<p>Si su aplicaci\u00f3n renderiza largas listas de datos (cientos o miles de filas), recomendamos que uses una t\u00e9cnica conocida como <em>\u201cwindowing\u201d</em>. Esta t\u00e9cnica solo renderiza un peque\u00f1o subconjunto de tus filas en un momento dado, y puede reducir dram\u00e1ticamente el tiempo que demora en re-renderizar los componentes, as\u00ed como el numero de nodos creados en el <em>DOM</em>.</p>\n<p><a class=\"external-link\" href=\"https://react-window.now.sh/\">react-window</a> y <a class=\"external-link\" href=\"https://bvaughn.github.io/react-virtualized/\">react-virtualized</a> son bibliotecas de <em>windowing</em> populares. Estas proveen varios componentes reusables para mostrar listas, grillas y datos tabulares. Tambi\u00e9n puedes crear tu propio componente <em>windowing</em>, como <a class=\"external-link\" href=\"https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3\">hizo Twitter</a>, si quieres algo m\u00e1s a la medida para tu aplicaci\u00f3n.</p>\n<h2 id=\"avoid-reconciliation\"><a class=\"anchor\" href=\"/react/optimizing-performance#avoid-reconciliation\"></a>Evitar reconciliaci\u00f3n </h2>\n<p>React construye y mantiene una representaci\u00f3n interna de la interfaz de usuario renderizada. Esta incluye los elementos React que retornas de tus componentes. Esta representaci\u00f3n permite a React evitar crear nodos DOM y acceder a los existentes m\u00e1s all\u00e1 de lo necesario, ya que puede ser m\u00e1s lento que las operaciones en objetos JavaScript. A veces a esto se le llama \u201cDOM Virtual\u201d, pero funciona de la misma forma en React Native.</p>\n<p>Cuando una propiedad o estado de un componente cambia, React decide si es necesario actualizar el DOM comparando el elemento reci\u00e9n retornado con el previamente renderizado. Si no son iguales, React actualizar\u00e1 el DOM.</p>\n<p>Aunque React solo actualiza los nodos DOM modificados, el re-renderizado aun lleva algo de tiempo. En muchos casos no es un problema, pero si la desaceleraci\u00f3n es notable puedes acelerar el proceso anulando la funci\u00f3n del ciclo de vida <code class=\"language-javascript\">shouldComponentUpdate</code>, el cual se ejecuta antes de que el proceso de re-renderizado comience. La implementaci\u00f3n por defecto de esta funci\u00f3n retorna <code class=\"language-javascript\">true</code>, permitiendo a React hacer la actualizaci\u00f3n.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si sabes que en algunas situaciones tu componente no necesita actualizarse, puedes retornar <code class=\"language-javascript\">false</code> desde <code class=\"language-javascript\">shouldComponentUpdate</code> para omitir todo el proceso de renderizacion, incluida la invocaci\u00f3n de <code class=\"language-javascript\">render()</code> en este componente y debajo de \u00e9l.</p>\n<p>En la mayor\u00eda de los casos, en vez de escribir <code class=\"language-javascript\">shouldComponentUpdate()</code>, puedes heredar <a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">React.PureComponent</code></a>. Esto es equivalente a implementar <code class=\"language-javascript\">shouldComponentUpdate()</code> con una comparaci\u00f3n superficial del las propiedades y estados previos y actuales.</p>\n<h2 id=\"shouldcomponentupdate-in-action\"><a class=\"anchor\" href=\"/react/optimizing-performance#shouldcomponentupdate-in-action\"></a>shouldComponentUpdate en acci\u00f3n </h2>\n<p>Aqu\u00ed hay un sub\u00e1rbol de componentes. Para cada uno, <code class=\"language-javascript\">SCU</code> indica que <code class=\"language-javascript\">shouldComponentUpdate</code> devolvi\u00f3, y <code class=\"language-javascript\">vDOMEq</code> indica si los elementos React renderizados fueron equivalentes. Finalmente, el color de los c\u00edrculos indica si el componente tiene que ser reconciliado o no.</p>\n<figure>\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/5ee1bdf4779af06072a17b7a0654f6db/cd039/should-component-update.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/5ee1bdf4779af06072a17b7a0654f6db/cd039/should-component-update.png\">Image link</a>\n</span>\n</span>\n</a>\n</figure>\n<p>Como <code class=\"language-javascript\">shouldComponentUpdate</code> retorn\u00f3 <code class=\"language-javascript\">false</code> para el sub\u00e1rbol con ra\u00edz en C2, React no intent\u00f3 renderizar C2, y por lo tanto ni siquiera tuvo que invocar <code class=\"language-javascript\">shouldComponentUpdate</code> en C4 y C5.</p>\n<p>Para C1 y C3, <code class=\"language-javascript\">shouldComponentUpdate</code> retorn\u00f3 <code class=\"language-javascript\">true</code>, as\u00ed que React tuvo que descender a las hojas y verificarlas. Para C6 <code class=\"language-javascript\">shouldComponentUpdate</code> retorn\u00f3 <code class=\"language-javascript\">true</code>, y dado que los elementos no eran equivalentes React tuvo que actualizar el DOM.</p>\n<p>El \u00faltimo caso interesante es C8. React tuvo que renderizar este componente, pero como los elementos de React que devolvi\u00f3 eran iguales a los previamente renderizados, no tuvo que actualizar el DOM.</p>\n<p>Nota que React solo tiene que hacer mutaciones DOM para C6, lo cual es inevitable. Para C8, se rescat\u00f3 mediante la comparaci\u00f3n de los elementos React representados, y para el sub\u00e1rbol C2 y C7, ni siquiera tuvo que comparar los elementos ya que los rescatamos en <code class=\"language-javascript\">shouldComponentUpdate</code>, y <code class=\"language-javascript\">render</code> no fue llamado.</p>\n<h2 id=\"examples\"><a class=\"anchor\" href=\"/react/optimizing-performance#examples\"></a>Ejemplos </h2>\n<p>Si la \u00fanica forma en que tu componente cambie es cuando cambia la variable <code class=\"language-javascript\">props.color</code> o el <code class=\"language-javascript\">state.count</code>, puedes hacer que <code class=\"language-javascript\">shouldComponentUpdate</code> compruebe eso:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> nextProps<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">!==</span> nextState<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Count: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En este c\u00f3digo, <code class=\"language-javascript\">shouldComponentUpdate</code> solo esta verificando s\u00ed hay alg\u00fan cambio en <code class=\"language-javascript\">props.color</code> o <code class=\"language-javascript\">state.count</code>. Si esos valores no cambian, el componente no se actualiza. Si tu componente se vuelve m\u00e1s complejo, podr\u00edas usar un patr\u00f3n similar de hacer una \u201ccomparaci\u00f3n superficial\u201d entre todos los campos de <code class=\"language-javascript\">props</code> y <code class=\"language-javascript\">state</code> para determinar si el componente deber\u00eda actualizarse. Este patr\u00f3n es lo suficientemente com\u00fan como para que React proporcione un ayudante para utilizar esta l\u00f3gica - simplemente hereda de <code class=\"language-javascript\">React.PureComponent</code>. Este c\u00f3digo es una forma mas simple de lograr lo mismo: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Count: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La mayor\u00eda de las veces, puedes usar <code class=\"language-javascript\">React.PureComponent</code> en vez de escribir tu propio <code class=\"language-javascript\">shouldComponentUpdate</code>. S\u00f3lo hace una comparaci\u00f3n superficial, por lo que no puede usarlo si las propiedades o el estado han sido mutados de una manera que una comparaci\u00f3n superficial pasar\u00eda por alto.</p>\n<p>Esto puede ser un problema con estructuras de datos m\u00e1s complejas. Por ejemplo, supongamos que quieres un componente <code class=\"language-javascript\">ListOfWords</code> para representar una lista de palabras separadas por comas, con un componente padre <code class=\"language-javascript\">WordAdder</code> que te permite hacer clic en un bot\u00f3n para agregar una palabra a la lista. Este c\u00f3digo <em>no</em> funciona correctamente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListOfWords</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WordAdder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">words</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'marklar'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This section is bad style and causes a bug</span>\n    <span class=\"token keyword\">const</span> words <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">;</span>\n    words<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marklar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">words</span><span class=\"token operator\">:</span> words<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListOfWords</span></span> <span class=\"token attr-name\">words</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El problema es que <code class=\"language-javascript\">PureComponent</code> har\u00e1 una comparaci\u00f3n simple entre los valores antiguos y nuevos de <code class=\"language-javascript\">this.props.words</code>. Dado que este c\u00f3digo muta la matriz <code class=\"language-javascript\">words</code>en el m\u00e9todo <code class=\"language-javascript\">handleClick</code> de <code class=\"language-javascript\">WordAdder</code>, los valores antiguos y nuevos de <code class=\"language-javascript\">this.props.words</code> se comparar\u00e1n como iguales, aunque las palabras actuales de la matriz hayan cambiado. La <code class=\"language-javascript\">ListOfWords</code> no se actualizar\u00e1 a pesar de que tiene nuevas palabras que se deben renderizar.</p>\n<h2 id=\"the-power-of-not-mutating-data\"><a class=\"anchor\" href=\"/react/optimizing-performance#the-power-of-not-mutating-data\"></a>El poder de no mutar los datos </h2>\n<p>La forma m\u00e1s sencilla de evitar este problema es evitar la mutaci\u00f3n de valores que estas utilizando como propiedades o estados. Por ejemplo, el m\u00e9todo <code class=\"language-javascript\">handleClick</code> anterior podr\u00eda ser reescrito usando <code class=\"language-javascript\">concat</code>: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">words</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'marklar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ES6 soporta <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">operador de propagaci\u00f3n</a> para matrices, lo cual puede hacer esto mas f\u00e1cil. Si estas usando <em>Create React App</em>, esta sintaxis est\u00e1 disponible por defecto.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">words</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">,</span> <span class=\"token string\">'marklar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tambi\u00e9n puedes reescribir el c\u00f3digo que muta los objetos para evitar la mutaci\u00f3n, de forma similar.Por ejemplo, digamos que tenemos un objeto llamado <code class=\"language-javascript\">colormap</code> y queremos escribir una funci\u00f3n que cambie <code class=\"language-javascript\">colormap.right</code> para que sea <code class=\"language-javascript\">'blue'</code>. Podr\u00edamos escribir:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateColorMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">colormap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  colormap<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para escribir esto sin mutar el objeto original, podemos usar el m\u00e9todo <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign</a> method:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateColorMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">colormap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> colormap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">updateColorMap</code> ahora devuelve un nuevo objeto, en lugar de mutar el anterior. <code class=\"language-javascript\">Object.assign</code> est\u00e1 en ES6 y requiere un <em>polyfill</em>.</p>\n<p><a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/Sintaxis_Spread\">La sintaxis de propagaci\u00f3n de objetos</a> hace m\u00e1s f\u00e1cil la actualizaci\u00f3n de objetos sin mutaci\u00f3n:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateColorMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">colormap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>colormap<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esta funcionalidad fue a\u00f1adida a JavaScript en ES2018.</p>\n<p>Si est\u00e1s utilizando <em>Create React App</em>, tanto <code class=\"language-javascript\">Object.assign</code> y <em>la sintaxis de propagaci\u00f3n en objetos</em> est\u00e1n disponibles por defecto.</p>\n<p>Cuando te encuentras ante objetos anidados, actualizarlos de manera inmutable puede sentirse complicado. Si te ves ante este problema, \u00e9chale un vistazo a <a class=\"external-link\" href=\"https://github.com/mweststrate/immer\">Immer</a> o <a class=\"external-link\" href=\"https://github.com/kolodny/immutability-helper\">immutability-helper</a>. Estas bibliotecas te permiten escribir c\u00f3digo altamente legible sin perder los beneficios de la inmutabilidad.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/optimizing-performance.md\">Edit this page</a></p></div></article>", "path": "/react/optimizing-performance", "nav": ["/react/jsx-in-depth", "/react/portals"]}, {"key": "Portales", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los portales proporcionan una opci\u00f3n de primera clase para renderizar hijos en un nodo DOM que existe por fuera de la jerarqu\u00eda del DOM del componente padre.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span></code></pre></div>\n<p>El primer argumento (<code class=\"language-javascript\">child</code>) es cualquier <a href=\"/react/react-component#render\">hijo renderizable por React</a>, como un elemento, cadena de caracteres o fragmento. El segundo argumento (<code class=\"language-javascript\">container</code>) es un elemento DOM.</p>\n<h2 id=\"usage\"><a class=\"anchor\" href=\"/react/portals#usage\"></a>Uso </h2>\n<p>Normalmente, cuando retornas un elemento del m\u00e9todo de render de un componente, este se monta en el DOM como un elemento hijo del nodo padre m\u00e1s cercano:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// React crea un nuevo elemento y muestra al </span>\n  <span class=\"token comment\">// componente hijo dentro de \u00e9l.</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sin embargo, a veces es \u00fatil insertar un hijo en una ubicaci\u00f3n diferente en el DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// React *no* crea un nuevo div, convierte el hijo en `domNode`.</span>\n  <span class=\"token comment\">// `domNode` es cualquier nodo DOM v\u00e1lido, independientemente de su ubicaci\u00f3n en el DOM.</span>\n  <span class=\"token keyword\">return</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    domNode</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Un caso de uso t\u00edpico de los portales es cuando un componente principal tiene un estilo <code class=\"language-javascript\">overflow: hidden</code> o <code class=\"language-javascript\">z-index</code>, pero necesita que el elemento \u201csalga\u201d visualmente de su contenedor. Por ejemplo, cuadros de di\u00e1logo, <em>hovercards</em> y <em>tooltips</em>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Cuando trabajes con portales, recuerda que <a href=\"/react/accessibility#programmatically-managing-focus\">administrar el foco del teclado</a> es muy importante.</p>\n<p>Para los cuadros de di\u00e1logos, aseg\u00farate de que todos puedan interactuar con ellos siguiendo las <a class=\"external-link\" href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal\">Pr\u00e1cticas de creaci\u00f3n modal de WAI-ARIA</a>.</p>\n</div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/yzMaBd\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<h2 id=\"event-bubbling-through-portals\"><a class=\"anchor\" href=\"/react/portals#event-bubbling-through-portals\"></a>Propagaci\u00f3n de eventos a trav\u00e9s de portales </h2>\n<p>Aunque un portal puede estar en cualquier parte del \u00e1rbol DOM, se comporta como un hijo de React normal en cualquier otra forma. Las caracter\u00edsticas como el contexto funcionan exactamente de la misma manera, independientemente de si el elemento hijo es un portal, ya que el portal a\u00fan existe en el <em>\u00e1rbol de React</em> sin importar la posici\u00f3n en el <em>\u00e1rbol DOM</em>.</p>\n<p>Esto incluye propagaci\u00f3n de eventos. Un evento activado desde adentro de un portal se propagar\u00e1 a los ancestros en el <em>\u00e1rbol de React</em>, incluso si esos elementos no son ancestros en el <em>\u00e1rbol DOM</em>. Asumiendo la siguiente estructura HTML:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal-root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Un componente <code class=\"language-javascript\">Parent</code> en <code class=\"language-javascript\">#app-root</code> ser\u00eda capaz de detectar un evento de propagaci\u00f3n no capturado desde el nodo hermano <code class=\"language-javascript\">#modal-root</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Estos dos contenedores son hermanos en el DOM.</span>\n<span class=\"token keyword\">const</span> appRoot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> modalRoot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'modal-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Modal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// El elemento del portal se inserta en el \u00e1rbol DOM despu\u00e9s de</span>\n    <span class=\"token comment\">// que se montan los hijos del Modal, lo que significa que los hijos</span>\n    <span class=\"token comment\">// se montar\u00e1n en un nodo DOM separado. Si un componente hijo</span>\n    <span class=\"token comment\">// requiere estar conectado inmediatamente cuando se monta al \u00e1rbol del DOM</span>\n    <span class=\"token comment\">// por ejemplo, para medir un nodo DOM, o usar 'autoFocus' en un descendiente,</span>\n    <span class=\"token comment\">// agrega el estado a Modal y renderiza solo a los hijos </span>\n    <span class=\"token comment\">// cuando se inserta Modal en el \u00e1rbol DOM.</span>\n    modalRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    modalRoot<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">clicks</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Esto se activar\u00e1 cuando el bot\u00f3n en el Child sea cliqueado,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// actualizando el estado de Parent,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// aunque el bot\u00f3n no sea descendiente directo en el DOM.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">clicks</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>clicks <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Number of clicks: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicks<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Open up the browser DevTools</span>\n<span class=\"token plain-text\">          to observe that the button</span>\n<span class=\"token plain-text\">          is not a child of the div</span>\n<span class=\"token plain-text\">          with the onClick handler.</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// El evento de clic en este bot\u00f3n se propagar\u00e1 hasta el padre, </span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// porque no hay un atributo 'onClick' definido.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>appRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/jGBWpE\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>La captura de un evento que sale de un portal en un componente padre permite el desarrollo de abstracciones m\u00e1s flexibles que no dependen intr\u00ednsecamente de los portales. Por ejemplo, si renderizas un componente <code class=\"language-javascript\">&lt;Modal /&gt;</code>, el padre puede capturar sus eventos sin importar si es implementado usando portales.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/portals.md\">Edit this page</a></p></div></article>", "path": "/react/portals", "nav": ["/react/optimizing-performance", "/react/profiler"]}, {"key": "Profiler", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>El <code class=\"language-javascript\">Profiler</code> (perfilador o generador de perfiles) mide con qu\u00e9 frecuencia se renderiza una aplicaci\u00f3n React y cu\u00e1l es el \u201ccosto\u201d del renderizado.\nSu prop\u00f3sito es ayudar a identificar partes de una aplicaci\u00f3n que son lentas y pueden beneficiarse de <a href=\"/react/hooks-faq#how-to-memoize-calculations\">optimizaciones como la memoizaci\u00f3n</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>La creaci\u00f3n de perfiles agrega una sobrecarga adicional, por lo que <strong>est\u00e1 deshabilitada en <a href=\"/react/optimizing-performance#use-the-production-build\">la compilaci\u00f3n de producci\u00f3n</a></strong>.</p>\n<p>Para acceder al an\u00e1lisis de rendimiento en producci\u00f3n, React proporciona una compilaci\u00f3n de producci\u00f3n especial con la generaci\u00f3n de perfiles habilitada.\nLea m\u00e1s sobre c\u00f3mo usar esta compilaci\u00f3n en <a class=\"external-link\" href=\"https://fb.me/react-profiling\">fb.me/react-profiling</a></p>\n</div>\n<h2 id=\"usage\"><a class=\"anchor\" href=\"/react/profiler#usage\"></a>Uso </h2>\n<p>Se puede agregar un <code class=\"language-javascript\">Profiler</code> en cualquier parte de un \u00e1rbol React para medir el costo de renderizar esa parte del \u00e1rbol.\nRequiere dos props: un <code class=\"language-javascript\">id</code> (string) y un callback <code class=\"language-javascript\">onRender</code> (funci\u00f3n) que React llama cada vez que un componente dentro del \u00e1rbol \u201cconfirma\u201d una actualizaci\u00f3n.</p>\n<p>Por ejemplo, para perfilar un componente <code class=\"language-javascript\">Navigation</code> y sus descendientes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Navigation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Navigation</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Main</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se pueden usar m\u00faltiples componentes <code class=\"language-javascript\">Profiler</code> para medir diferentes partes de una aplicaci\u00f3n:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Navigation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Navigation</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Main<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Main</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Los componentes <code class=\"language-javascript\">Profiler</code> tambi\u00e9n se pueden anidar para medir diferentes componentes dentro del mismo sub\u00e1rbol:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Panel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Panel</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PreviewPane<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PreviewPane</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Panel</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Aunque <code class=\"language-javascript\">Profiler</code> es un componente liviano, debe usarse solo cuando sea necesario; cada uso agrega algo de sobrecarga de CPU y memoria a una aplicaci\u00f3n.</p>\n</div>\n<h2 id=\"onrender-callback\"><a class=\"anchor\" href=\"/react/profiler#onrender-callback\"></a>Callback <code class=\"language-javascript\">onRender</code> </h2>\n<p>El <code class=\"language-javascript\">Profiler</code> requiere una funci\u00f3n <code class=\"language-javascript\">onRender</code> como una prop.\nReact llama a esta funci\u00f3n cada vez que un componente dentro del \u00e1rbol perfilado \u201cconfirma\u201d una actualizaci\u00f3n.\nRecibe par\u00e1metros que describen lo que se proces\u00f3 y cu\u00e1nto tiempo tard\u00f3.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">onRenderCallback</span><span class=\"token punctuation\">(</span>\n  id<span class=\"token punctuation\">,</span> <span class=\"token comment\">// la prop \"id\" del \u00e1rbol Profiler que acaba de ser \"confirmado\"</span>\n  phase<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ya sea \"mount\" (si el \u00e1rbol acaba de ser montado) o \"update\" (si se volvi\u00f3 a renderizar)</span>\n  actualDuration<span class=\"token punctuation\">,</span> <span class=\"token comment\">// tiempo dedicado a procesar la actualizaci\u00f3n confirmada</span>\n  baseDuration<span class=\"token punctuation\">,</span> <span class=\"token comment\">// tiempo estimado para renderizar todo el sub\u00e1rbol sin memoizaci\u00f3n</span>\n  startTime<span class=\"token punctuation\">,</span> <span class=\"token comment\">// cuando React comenz\u00f3 a procesar esta actualizaci\u00f3n</span>\n  commitTime<span class=\"token punctuation\">,</span> <span class=\"token comment\">// cuando React confirm\u00f3 esta actualizaci\u00f3n</span>\n  interactions <span class=\"token comment\">// el conjunto de interacciones pertenecientes a esta actualizaci\u00f3n</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Agregar o registrar tiempos de renderizado ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Echemos un vistazo m\u00e1s de cerca a cada uno de las props:</p>\n<ul>\n<li><strong><code class=\"language-javascript\">id: string</code></strong> -\nLa prop <code class=\"language-javascript\">id</code> del \u00e1rbol<code class=\"language-javascript\">Profiler</code> que acaba de ser confirmado.\nEsto se puede usar para identificar qu\u00e9 parte del \u00e1rbol se confirm\u00f3 si est\u00e1 utilizando varios perfiladores.</li>\n<li><strong><code class=\"language-javascript\">phase: \"mount\" | \"update\"</code></strong> -\nIdentifica si el \u00e1rbol se acaba de montar por primera vez o se vuelve a renderizar debido a un cambio en las props, el estado o los hooks.</li>\n<li><strong><code class=\"language-javascript\">actualDuration: number</code></strong> -\nTiempo dedicado a renderizar el <code class=\"language-javascript\">Profiler</code> y sus descendientes para la actualizaci\u00f3n actual.\nEsto indica qu\u00e9 tan bien el sub\u00e1rbol utiliza la memoizaci\u00f3n. (e.g. <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a>, <a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a>, <a href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate</code></a>).\nIdealmente, este valor deber\u00eda disminuir significativamente despu\u00e9s del montaje inicial, ya que muchos de los descendientes solo necesitar\u00e1n volver a renderizar si cambian sus props espec\u00edficas.</li>\n<li><strong><code class=\"language-javascript\">baseDuration: number</code></strong> -\nDuraci\u00f3n del tiempo de renderizado m\u00e1s reciente para cada componente individual dentro del \u00e1rbol de <code class=\"language-javascript\">Profiler</code>.\nEste valor estima el costo de renderizado en el peor de los casos (por ejemplo, el montaje inicial o un \u00e1rbol sin memoizaci\u00f3n).</li>\n<li><strong><code class=\"language-javascript\">startTime: number</code></strong> -\nMarca de tiempo cuando React comenz\u00f3 a procesar la actualizaci\u00f3n actual.</li>\n<li><strong><code class=\"language-javascript\">commitTime: number</code></strong> -\nMarca de tiempo cuando React confirm\u00f3 la actualizaci\u00f3n actual.\nEste valor se comparte entre todos los perfiladores en una confirmaci\u00f3n, lo que les permite agruparse si lo desean.</li>\n<li><strong><code class=\"language-javascript\">interactions: Set</code></strong> -\nConjunto de <a class=\"external-link\" href=\"https://fb.me/react-interaction-tracing\">\u201cinteracciones\u201d</a> que se estaban rastreando cuando la actualizaci\u00f3n estaba programada (por ejemplo, cuando se llam\u00f3 a <code class=\"language-javascript\">render</code> o<code class=\"language-javascript\">setState</code>).</li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Las interacciones se pueden usar para identificar la causa de una actualizaci\u00f3n, aunque la API para rastrearlas a\u00fan es experimental.</p>\n<p>Obtenga m\u00e1s informaci\u00f3n al respecto en <a class=\"external-link\" href=\"https://fb.me/react-interaction-tracing\">fb.me/react-interaction-tracing</a></p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-profiler.md\">Edit this page</a></p></div></article>", "path": "/react/profiler", "nav": ["/react/portals", "/react/react-without-es6"]}, {"key": "React sin ES6", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Normalmente definir\u00edas un componente de React c\u00f3mo una clase simple de JavaScript:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si a\u00fan no utilizas ES6, puedes utilizar el m\u00f3dulo <code class=\"language-javascript\">create-react-class</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> createReactClass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Greeting <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>La API de clases en ES6 es similar a <code class=\"language-javascript\">createReactClass()</code> con algunas excepciones.</p>\n<h2 id=\"declaring-default-props\"><a class=\"anchor\" href=\"/react/react-without-es6#declaring-default-props\"></a>Declarando <em>props</em> por defecto </h2>\n<p>Con funciones y clases de ES6 <code class=\"language-javascript\">defaultProps</code> se define como una propiedad del componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nGreeting<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Con <code class=\"language-javascript\">createReactClass()</code>, es necesario que definas <code class=\"language-javascript\">getDefaultProps()</code> como una funci\u00f3n en el objeto que se le pasa:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Greeting <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getDefaultProps</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"setting-the-initial-state\"><a class=\"anchor\" href=\"/react/react-without-es6#setting-the-initial-state\"></a>Configurando el estado inicial </h2>\n<p>En clases de ES6, puedes definir el estado inicial al asignar <code class=\"language-javascript\">this.state</code> en el constructor:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Con <code class=\"language-javascript\">createReactClass()</code>, debes proveer un m\u00e9todo adicional <code class=\"language-javascript\">getInitialState</code> que retorna el estado inicial:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Counter <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"autobinding\"><a class=\"anchor\" href=\"/react/react-without-es6#autobinding\"></a>Autobinding </h2>\n<p>En componentes de React declarados como clases de ES6, los m\u00e9todos se rigen por la misma sem\u00e1ntica que las clases regulares de ES6. Esto significa que no vinculan <code class=\"language-javascript\">this</code> autom\u00e1ticamente a la instancia. Debes utilizar <code class=\"language-javascript\">.bind(this)</code> expl\u00edcitamente en el constructor:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Esta l\u00ednea es importante!</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Porque `this.handleClick` est\u00e1 vinculada, podemos utilizarla como un manejador de evento</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Say hello\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Con <code class=\"language-javascript\">createReactClass()</code>, esto no es necesario porque vincula todos los m\u00e9todos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> SayHello <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">handleClick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Say hello\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esto significa que las clases de ES6 traen consigo la necesidad de escribir un poco m\u00e1s de c\u00f3digo repetitivo para utilizar <em>manejadores de eventos</em>, pero la ventaja radica en una ligera mejora del rendimiento en aplicaciones grandes.</p>\n<p>Si el c\u00f3digo repetitivo no es atractivo para ti, puedes usar la sintaxis de <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Classes/Public_class_fields#campos_de_instancia_p%C3%BAblicos\">propiedades de clases de ES2022</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SayHello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Al usar una funci\u00f3n de flecha aqu\u00ed, el m\u00e9todo queda vinculado:</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Say hello\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tambi\u00e9n tienes otras opciones:</p>\n<ul>\n<li>Vincular los m\u00e9todos a la instancia desde el constructor.</li>\n<li>Usar funciones flecha, e.g. <code class=\"language-javascript\">onClick={(e) =&gt; this.handleClick(e)}</code>.</li>\n<li>Continuar utilizando <code class=\"language-javascript\">createReactClass</code>.</li>\n</ul>\n<h2 id=\"mixins\"><a class=\"anchor\" href=\"/react/react-without-es6#mixins\"></a>Mixins </h2>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>ES6 fue lanzado sin soporte de mixins. Por lo tanto, no existe soporte de mixins cuando utilizas React con clases de ES6.</p>\n<p><strong>Nosotros tambi\u00e9n hemos encontrado muchos problemas en bases de c\u00f3digo en los que se ha utilizado mixins, <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">y no recomendamos utilizarlos en c\u00f3digo nuevo</a>.</strong></p>\n<p>Esta secci\u00f3n existe \u00fanicamente por referencia.</p>\n</div>\n<p>Algunas veces componentes muy diferentes pueden compartir una funcionalidad en com\u00fan. Estos son algunas veces llamados <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Cross-cutting_concern\">preocupaciones transversales</a>. <code class=\"language-javascript\">createReactClass</code> te permite utilizar el sistema heredado de <code class=\"language-javascript\">mixins</code> para ello.</p>\n<p>Un caso de uso com\u00fan es un componente que necesita actualizarse con un intervalo de tiempo. Es f\u00e1cil utilizar <code class=\"language-javascript\">setInterval()</code>, pero es importante cancelar tu intervalo cuando ya no lo necesites m\u00e1s para ahorrar memoria. React provee <a href=\"/react/react-component#the-component-lifecycle\">m\u00e9todos de ciclo de vida</a> que te permiten saber cuando un componente es creado o destruido. Creemos un <em>mixin</em> sencillo que utilice esos m\u00e9todos para proveer simplemente una funci\u00f3n <code class=\"language-javascript\">setInterval()</code> que ser\u00e1 limpiada autom\u00e1ticamente cuando tu componente sea destruido.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> SetIntervalMixin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">componentWillMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">setInterval</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">componentWillUnmount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>intervals<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>clearInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> createReactClass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create-react-class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> TickTock <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mixins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>SetIntervalMixin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Utilizar el mixin</span>\n  <span class=\"token function-variable function\">getInitialState</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">seconds</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">componentDidMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Llamar un m\u00e9todo del mixin</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">tick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">seconds</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        React has been running for </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> seconds.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TickTock</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si un componente utiliza multiples <em>mixins</em> y varios <em>mixins</em> definen el mismo m\u00e9todo de ciclo de vida (e. varios <em>mixins</em> quieren hacer alg\u00fan tipo de limpieza cuando el componente sea destruido), todos los m\u00e9todos de ciclo de vida tendr\u00e1n la garant\u00eda de ser ejecutados. Los m\u00e9todos definidos en <em>mixins</em> se ejecutan en el orden en el que los <em>mixins</em> fueron enumerados, seguidos de una llamada al m\u00e9todo en el componente.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/react-without-es6.md\">Edit this page</a></p></div></article>", "path": "/react/react-without-es6", "nav": ["/react/profiler", "/react/react-without-jsx"]}, {"key": "React sin JSX", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>JSX no es un requisito para usar React. Usar React sin JSX es especialmente conveniente cuando no quieres configurar herramientas de compilaci\u00f3n en tu entorno de desarrollo.</p>\n<p>Cada elemento JSX es solamente az\u00facar sint\u00e1ctico para llamar a <code class=\"language-javascript\">React.createElement(component, props, ...children)</code>. Por lo tanto, cualquier cosa que se pueda hacer con JSX se puede hacer con Javascript puro.</p>\n<p>Por ejemplo, este c\u00f3digo escrito con JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">toWhat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>se puede compilar a este que no usa JSX:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toWhat<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">toWhat</span><span class=\"token operator\">:</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si tienes curiosidad por ver m\u00e1s ejemplos de c\u00f3mo JSX se convierte a Javascript, puedes probar el <a class=\"external-link\" href=\"https://babeljs.io/repl/#?presets=react&amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA\">compilador en l\u00ednea de Babel</a>.</p>\n<p>El componente puede ser proporcionado como una cadena, como una subclase de <code class=\"language-javascript\">React.Component</code>, o una funci\u00f3n simple.</p>\n<p>Si te cansas de escribir tanto <code class=\"language-javascript\">React.createElement</code>, un patr\u00f3n com\u00fan es asignarlo a una variable corta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createElement<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si usas esta forma abreviada para <code class=\"language-javascript\">React.createElement</code>, puede ser casi tan conveniente usar React sin JSX.</p>\n<p>Alternativamente, puedes remitirte a proyectos comunitarios como <a class=\"external-link\" href=\"https://github.com/mlmorg/react-hyperscript\"><code class=\"language-javascript\">react-hyperscript</code></a> y <a class=\"external-link\" href=\"https://github.com/ohanhi/hyperscript-helpers\"><code class=\"language-javascript\">hyperscript-helpers</code></a> que ofrecen una sintaxis m\u00e1s concisa.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/react-without-jsx.md\">Edit this page</a></p></div></article>", "path": "/react/react-without-jsx", "nav": ["/react/react-without-es6", "/react/reconciliation"]}, {"key": "Reconciliaci\u00f3n", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React proporciona una API declarativa para que no tengas que preocuparte sobre qu\u00e9 cambia exactamente en cada actualizaci\u00f3n. Esto facilita mucho la escritura de aplicaciones, pero podr\u00eda no ser obvio c\u00f3mo se implementa esto dentro de React. Este art\u00edculo explica las elecciones que hicimos en el algoritmo \u201cdiferencial\u201d de React para que las actualizaciones de los componentes sean predecibles y al mismo tiempo sean lo suficiente r\u00e1pidas para las aplicaciones de alto rendimiento.</p>\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"/react/reconciliation#motivation\"></a>Motivaci\u00f3n </h2>\n<p>Cuando usas React, en un momento dado puedes pensar que la funci\u00f3n <code class=\"language-javascript\">render()</code> crea un \u00e1rbol de elementos de React. En la siguiente actualizaci\u00f3n de estado o propiedades, esa funci\u00f3n <code class=\"language-javascript\">render()</code> devolver\u00e1 un \u00e1rbol diferente de elementos de React. React luego debe descubrir c\u00f3mo actualizar de manera eficiente la interfaz de usuario para que coincida con el \u00e1rbol m\u00e1s reciente.</p>\n<p>Existen algunas soluciones gen\u00e9ricas para este problema algor\u00edtmico de generar el n\u00famero m\u00ednimo de operaciones para transformar un \u00e1rbol en otro. Sin embargo, los <a class=\"external-link\" href=\"https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\">algoritmos de vanguardia</a> tienen una complejidad en el orden de O(n<sup>3</sup>) donde n es el n\u00famero de elementos en el \u00e1rbol.</p>\n<p>Si utilizamos esto en React, mostrar 1000 elementos requerir\u00eda del orden de mil millones de comparaciones. Esto ser\u00eda demasiado costoso. En su lugar, React implementa un algoritmo heur\u00edstico O(n) basado en dos suposiciones.</p>\n<ol>\n<li>Dos elementos de diferentes tipos producir\u00e1n diferentes \u00e1rboles.</li>\n<li>El desarrollador puede insinuar qu\u00e9 elementos secundarios pueden ser estables en diferentes renders con una propiedad <code class=\"language-javascript\">key</code>.</li>\n</ol>\n<p>En la pr\u00e1ctica, estos supuestos son v\u00e1lidos para casi todos los casos de uso pr\u00e1ctico.</p>\n<h2 id=\"the-diffing-algorithm\"><a class=\"anchor\" href=\"/react/reconciliation#the-diffing-algorithm\"></a>El algoritmo diferencial </h2>\n<p>Al diferenciar dos \u00e1rboles, React primero compara dos elementos ra\u00edz. El comportamiento es diferente dependiendo de los tipos de elementos ra\u00edz.</p>\n<h3 id=\"elements-of-different-types\"><a class=\"anchor\" href=\"/react/reconciliation#elements-of-different-types\"></a>Elementos de diferentes tipos </h3>\n<p>Cada vez que los elementos ra\u00edz tienen diferentes tipos, React derribar\u00e1 el \u00e1rbol viejo y construir\u00e1 el nuevo \u00e1rbol desde cero. Pasando de <code class=\"language-javascript\">&lt;a&gt;</code> a <code class=\"language-javascript\">&lt;img&gt;</code>, o de <code class=\"language-javascript\">&lt;Article&gt;</code> a <code class=\"language-javascript\">&lt;Comment&gt;</code>, o de <code class=\"language-javascript\">&lt;Button&gt;</code> a <code class=\"language-javascript\">&lt;div&gt;</code> - cualquiera de esos conducir\u00e1 a una reconstrucci\u00f3n completa.</p>\n<p>Al derribar un \u00e1rbol, los nodos antiguos del DOM se destruyen. Las instancias de los componentes reciben <code class=\"language-javascript\">componentWillUnmount()</code>. Al construir un nuevo \u00e1rbol, los nuevos elementos del DOM se insertan. Las instancias de componentes reciben <code class=\"language-javascript\">UNSAFE_componentWillMount()</code> y luego <code class=\"language-javascript\">componentDidMount()</code>. Cualquier estado asociado al \u00e1rbol viejo se pierde.</p>\n<p>Cualquier componente debajo de la ra\u00edz tambi\u00e9n se desmontar\u00e1 y se destruir\u00e1 su estado. Por ejemplo, cuando difiere:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter</span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Counter</span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Esto destruir\u00e1 el <code class=\"language-javascript\">Counter</code> viejo y volver\u00e1 a montar uno nuevo.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Este m\u00e9todo se considera obsoleto y deber\u00edas <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evitarlo</a> en c\u00f3digo nuevo:</p>\n<ul>\n<li><code class=\"language-javascript\">UNSAFE_componentWillMount()</code></li>\n</ul>\n</div>\n<h3 id=\"dom-elements-of-the-same-type\"><a class=\"anchor\" href=\"/react/reconciliation#dom-elements-of-the-same-type\"></a>Elementos del DOM del mismo tipo </h3>\n<p>Al comparar dos elementos React DOM del mismo tipo, React analiza los atributos de ambos, mantiene el mismo nodo DOM subyacente, y solo actualiza los atributos modificados. Por ejemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>before<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuff<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>after<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuff<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Comparando estos dos elementos, React sabe que solo debe modificar el <code class=\"language-javascript\">className</code> en el nodo DOM subyacente.</p>\n<p>Al actualizar <code class=\"language-javascript\">style</code>, React tambi\u00e9n sabe actualizar solo las propiedades que cambiaron. Por ejemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{color:</span> <span class=\"token attr-name\">'red',</span> <span class=\"token attr-name\"><span class=\"token namespace\">fontWeight:</span></span> <span class=\"token attr-name\">'bold'}}</span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{color:</span> <span class=\"token attr-name\">'green',</span> <span class=\"token attr-name\"><span class=\"token namespace\">fontWeight:</span></span> <span class=\"token attr-name\">'bold'}}</span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Al convertir entre estos dos elementos, React sabe que solo debe modificar el estilo <code class=\"language-javascript\">color</code>, no el <code class=\"language-javascript\">fontWeight</code>.</p>\n<p>Despu\u00e9s de manejar el nodo DOM, React recurre a los hijos.</p>\n<h3 id=\"component-elements-of-the-same-type\"><a class=\"anchor\" href=\"/react/reconciliation#component-elements-of-the-same-type\"></a>Componentes del mismo tipo </h3>\n<p>Cuando se actualiza un componente, la instancia permanece igual, por lo que el estado se mantiene en todas las representaciones. React actualiza las propiedades de la instancia del componente subyacente para que coincida con el nuevo elemento, y llama a <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code>, <code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> y <code class=\"language-javascript\">componentDidUpdate()</code> en la instancia subyacente.</p>\n<p>A continuaci\u00f3n, se llama al m\u00e9todo <code class=\"language-javascript\">render()</code> y al algoritmo de diferenciaci\u00f3n en el resultado anterior y el nuevo resultado.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Estos m\u00e9todos se consideran obsoletos y deber\u00edas <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evitarlos</a> en c\u00f3digo nuevo:</p>\n<ul>\n<li><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code></li>\n<li><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code></li>\n</ul>\n</div>\n<h3 id=\"recursing-on-children\"><a class=\"anchor\" href=\"/react/reconciliation#recursing-on-children\"></a>Recursi\u00f3n en hijos </h3>\n<p>De forma predeterminada, cuando hay recursi\u00f3n en los hijos de un nodo DOM, React simplemente itera sobre ambas listas de hijos al mismo tiempo y genera una mutaci\u00f3n siempre que haya diferencia. </p>\n<p>Por ejemplo, al agregar un elemento al final de los hijos, la conversi\u00f3n entre estos dos \u00e1rboles funciona bien:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>first<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>second<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>first<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>second<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>third<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>React coincidir\u00e1 con los \u00e1rboles <code class=\"language-javascript\">&lt;li&gt;first&lt;/li&gt;</code>, con los dos \u00e1rboles <code class=\"language-javascript\">&lt;li&gt;second&lt;/li&gt;</code> y luego insertar\u00e1 el \u00e1rbol <code class=\"language-javascript\">&lt;li&gt;third&lt;/li&gt;</code>.</p>\n<p>Si lo implementas ingenuamente, la inserci\u00f3n de un elemento al principio tiene un peor rendimiento. Por ejemplo, la conversi\u00f3n entre estos dos \u00e1rboles funcionar\u00eda mal:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Connecticut<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>React mutar\u00e1 a cada hijo en lugar de darse cuenta que puede mantener intactos los sub\u00e1rboles <code class=\"language-javascript\">&lt;li&gt;Duke&lt;/li&gt;</code> y <code class=\"language-javascript\">&lt;li&gt;Villanova&lt;/li&gt;</code>. Esta ineficiencia puede ser un problema.</p>\n<h3 id=\"keys\"><a class=\"anchor\" href=\"/react/reconciliation#keys\"></a><em>Keys</em> </h3>\n<p>Para resolver este problema, React admite un atributo <code class=\"language-javascript\">key</code>. Cuando los hijos tienen claves, React lo usa para relacionar los hijos del \u00e1rbol original con los hijos del \u00e1rbol posterior. Por ejemplo, agregando una clave a nuestro ejemplo anterior puede hacer que la conversi\u00f3n de \u00e1rbol sea eficiente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-xml\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2016<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2014<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Connecticut<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Duke<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2016<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Villanova<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Ahora, React sabe que el elemento con la clave <code class=\"language-javascript\">'2014'</code> es nuevo, y los elementos con la clave <code class=\"language-javascript\">'2015'</code> y <code class=\"language-javascript\">'2016'</code> se acaban de mover.</p>\n<p>En la pr\u00e1ctica, encontrar una clave no suele ser dif\u00edcil. Es posible que el elemento que va a mostrar ya tenga un ID \u00fanico, por lo que la clave puede provenir de sus datos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Cuando ese no sea el caso, puedes agregar una nueva propiedad de ID a su modelo o marcar algunas partes del contenido para generar una clave. La clave solo tiene que ser \u00fanica entre sus hermanos, no globalmente \u00fanica.</p>\n<p>Como \u00faltimo recurso, puedes pasar el \u00edndice de un elemento en la matriz como una clave. Esto puede funcionar bien si los \u00edtems nunca se reordenan, pero los reordenamientos ser\u00e1n lentos.</p>\n<p>Reorganizar tambi\u00e9n puede causar problemas de estado del componente cuando los \u00edndices se utilizan como claves. Si la clave es un \u00edndice, mover un elemento lo cambia. Como resultado, el estado el componente para cosas como entradas no controladas pueden mezclarse y actualizarse de manera inesperada.</p>\n<p><a class=\"external-link\" href=\"https://es.reactjs.org//redirect-to-codepen/reconciliation/index-used-as-key\">Aqu\u00ed</a> hay un ejemplo de los problemas que pueden ser causados por el uso de \u00edndices como claves en Codepen, y <a class=\"external-link\" href=\"https://es.reactjs.org//redirect-to-codepen/reconciliation/no-index-used-as-key\">aqu\u00ed</a> es una versi\u00f3n actualizada del mismo ejemplo que muestra c\u00f3mo no usar los \u00edndices como claves solucionar\u00e1 estos problemas de reordenaci\u00f3n, clasificaci\u00f3n y preparaci\u00f3n.</p>\n<h2 id=\"tradeoffs\"><a class=\"anchor\" href=\"/react/reconciliation#tradeoffs\"></a>Compensaciones </h2>\n<p>Es importante recordar que el algoritmo de reconciliaci\u00f3n es un detalle de la implementaci\u00f3n. React podr\u00eda volver a renderizar toda la aplicaci\u00f3n en cada acci\u00f3n; El resultado final ser\u00eda el mismo. Para que quede claro, volver a renderizar en este contexto significa llamar a <code class=\"language-javascript\">render</code> para todos los componentes, no significa que React los desmonte y los vuelva a montar. Solo aplicar\u00e1 las diferencias siguiendo las reglas establecidas en las secciones anteriores. </p>\n<p>Regularmente refinamos las heur\u00edsticas para que los casos de uso com\u00fan sean m\u00e1s r\u00e1pidos. En la implementaci\u00f3n actual, puedes expresar el hecho de que un sub\u00e1rbol se ha movido entre sus hermanos, pero no puede decir que se haya movido a otro lugar. El algoritmo reenviar\u00e1 ese sub\u00e1rbol completo.</p>\n<p>Debido a que React se basa en heur\u00edsticas, si no se cumplen las suposiciones detr\u00e1s de ellas, el rendimiento se ver\u00e1 afectado.</p>\n<ol>\n<li>El algoritmo no intentar\u00e1 hacer coincidir sub\u00e1rboles de diferentes tipos de componentes. Si te ves alternando entre dos tipos de componentes muy similares, es posible que quieras hacerlo del mismo tipo. En la pr\u00e1ctica, no hemos encontrado que esto sea un problema.</li>\n<li>Las claves deben ser estables, predecibles y \u00fanicas. Las claves inestables (como las producidas por <code class=\"language-javascript\">Math.random()</code>) har\u00e1n que muchas instancias de componentes y nodos del DOM se vuelvan a crear innecesariamente, lo que puede causar una degradaci\u00f3n del rendimiento y la p\u00e9rdida del estado en componentes hijos.</li>\n</ol></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reconciliation.md\">Edit this page</a></p></div></article>", "path": "/react/reconciliation", "nav": ["/react/react-without-jsx", "/react/refs-and-the-dom"]}, {"key": "Referencias y el DOM", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Las referencias proporcionan una forma de acceder a los nodos del DOM o a elementos React creados en el m\u00e9todo de renderizado.</p>\n<p>En un flujo normal en datos de React, <a href=\"/react/components-and-props\">las propiedades</a> son la \u00fanica forma en la que los componentes padres pueden interactuar con sus hijos. Para modificar un hijo, vuelves a renderizarlo con propiedades nuevas. Sin embargo, hay ciertos casos donde necesitar\u00e1s modificar imperativamente un hijo fuera del flujo de datos t\u00edpico. El hijo a ser modificado puede ser una instancia de un componente React, o un elemento del DOM. Para ambos casos, React proporciona una via de escape.</p>\n<h3 id=\"when-to-use-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#when-to-use-refs\"></a>Cuando usar referencias </h3>\n<p>Existen unos cuantos buenos casos de uso para referencias:</p>\n<ul>\n<li>Controlar enfoques, selecci\u00f3n de texto, o reproducci\u00f3n de medios.</li>\n<li>Activar animaciones imperativas.</li>\n<li>Integraci\u00f3n con bibliotecas DOM de terceros.</li>\n</ul>\n<p>Evita usar referencias en cualquier cosa que pueda ser hecha declarativamente.</p>\n<p>Por ejemplo, en lugar de exponer los m\u00e9todos <code class=\"language-javascript\">open()</code> y <code class=\"language-javascript\">close()</code> en un componente <code class=\"language-javascript\">Dialog</code>, pasa una propiedad <code class=\"language-javascript\">isOpen</code> a este en su lugar.</p>\n<h3 id=\"dont-overuse-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#dont-overuse-refs\"></a>No abuses de las referencias </h3>\n<p>Tu primer pensamiento puede ser usar referencias para \u201chacer que las cosas funcionen\u201d en tu aplicaci\u00f3n. De ser este el caso, espera un momento, y piensa cr\u00edticamente donde debe estar el estado en la jerarqu\u00eda de componentes. Frecuentemente, se vuelve mas claro que el lugar donde deber\u00eda \u201cestar\u201d el estado, es en el nivel m\u00e1s alto de la jerarqu\u00eda. Mira la gu\u00eda <a href=\"/react/lifting-state-up\">Levantando El Estado</a> para ejemplos de esto.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Los ejemplos a continuaci\u00f3n han sido actualizados para hacer uso del API <code class=\"language-javascript\">React.createRef()</code> introducido en React 16.3. Si estas usando una versi\u00f3n de React anterior a esta, recomendamos usar en su lugar <a href=\"/react/refs-and-the-dom#callback-refs\">referencias mediante callback</a>.</p>\n</div>\n<h3 id=\"creating-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#creating-refs\"></a>Creando referencias </h3>\n<p>Las referencias son creadas usando <code class=\"language-javascript\">React.createRef()</code> y agreg\u00e1ndolas a elementos de React mediante el atributo <code class=\"language-javascript\">ref</code>. Las referencias son asignadas com\u00fanmente a una propiedad de instancia cuando un componente es construido, as\u00ed pueden ser referenciadas por el componente.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"accessing-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#accessing-refs\"></a>Accediendo a referencias </h3>\n<p>Cuando una referencia es pasada a un elemento en el <code class=\"language-javascript\">renderizado</code>, una referencia al nodo pasa a ser accesible en el atributo <code class=\"language-javascript\">current</code> de la referencia.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span></code></pre></div>\n<p>El valor de la referencia es diferente dependiendo del tipo de nodo:</p>\n<ul>\n<li>Cuando el atributo <code class=\"language-javascript\">ref</code> es usado en un elemento HTML, la <code class=\"language-javascript\">referencia</code> creada en el constructor con <code class=\"language-javascript\">React.createRef()</code> recibe el elemento DOM adyacente como su propiedad <code class=\"language-javascript\">current</code>.</li>\n<li>Cuando el atributo <code class=\"language-javascript\">ref</code> es usado en un componente de clase personalizado, el objeto de la <code class=\"language-javascript\">referencia</code> recibe la instancia montada del componente como su atributo <code class=\"language-javascript\">current</code>.</li>\n<li><strong>No puedes hacer uso de <code class=\"language-javascript\">referencias</code> en componentes de funci\u00f3n</strong> debido a que no tienen instancias.</li>\n</ul>\n<p>Los ejemplos a continuaci\u00f3n demuestran las diferencias.</p>\n<h3 id=\"adding-a-ref-to-a-dom-element\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#adding-a-ref-to-a-dom-element\"></a>Agregando una referencia a un elemento del DOM </h3>\n<p>Esta c\u00f3digo utiliza un <code class=\"language-javascript\">ref</code> para guardar una referencia al nodo del DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Crea una referencia para guardar el elemento textInput del DOM</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Hace enfoque expl\u00edcitamente del campo de texto, haciendo uso de un API del DOM</span>\n    <span class=\"token comment\">// Nota: Estamos accediendo la propiedad \"current\" para obtener el nodo del DOM</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Informa a React de que queremos agregar la referencia `textInput` que creamos</span>\n    <span class=\"token comment\">// en el constructor a la etiqueta &lt;input&gt;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React asignar\u00e1 a la propiedad <code class=\"language-javascript\">current</code> el elemento del DOM cuando el componente sea montado, y la asignar\u00e1 de nuevo <code class=\"language-javascript\">null</code> cuando sea desmontado. La <code class=\"language-javascript\">referencia</code> es actualizada antes de los m\u00e9todos <code class=\"language-javascript\">componentDidMount</code> o <code class=\"language-javascript\">componentDidUpdate</code>.</p>\n<h4 id=\"adding-a-ref-to-a-class-component\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#adding-a-ref-to-a-class-component\"></a>Agregando una referencia a un componente de clase </h4>\n<p>Si quisi\u00e9ramos envolver el <code class=\"language-javascript\">CustomTextInput</code> de arriba para simular sobre este un click despu\u00e9s de montarse, podr\u00edamos utilizar una referencia para obtener acceso al input personalizado y llamar a su m\u00e9todo <code class=\"language-javascript\">focusTextInput</code> manualmente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoFocusTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomTextInput</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Recuerda que esto solo funciona si <code class=\"language-javascript\">CustomTextInput</code> es declarado como una clase:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"refs-and-function-components\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#refs-and-function-components\"></a>Referencias y componentes de funci\u00f3n </h4>\n<p>Por defecto, <strong>no puedes usar el atributo <code class=\"language-javascript\">ref</code> en componentes de funci\u00f3n</strong> debido a que no tienen instancias:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyFunctionComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Esto *no* va a funcionar!</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyFunctionComponent</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>S\u00ed deseas permitir que las personas tomen una <code class=\"language-javascript\">ref</code> de tu componente de funci\u00f3n, puedes usar <a href=\"/react/forwarding-refs\"><code class=\"language-javascript\">forwardRef</code></a> (posiblemente en conjunto con <a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a>), o puedes convertir el componente a una clase.</p>\n<p>Sin embargo, puedes <strong>usar el atributo <code class=\"language-javascript\">ref</code> dentro de un componente de funci\u00f3n</strong> siempre y cuando hagas referencia de un elemento del DOM o de un componente de clase.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// textInput debe estar declarado aqu\u00ed para que la ref pueda hacer referencia a este</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">let</span> textInput <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    textInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>textInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"exposing-dom-refs-to-parent-components\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#exposing-dom-refs-to-parent-components\"></a>Exponiendo referencias del DOM a componentes padres </h3>\n<p>En casos raros, puede que necesites acceder al nodo DOM de un hijo desde un componente padre. Esto generalmente no es recomendado porque rompe con la encapsulaci\u00f3n del componente, pero puede ser util ocasionalmente para hacer enfoque, o medir el tama\u00f1o o posici\u00f3n de un nodo del DOM hijo.</p>\n<p>Bien podr\u00edas <a href=\"/react/refs-and-the-dom#adding-a-ref-to-a-class-component\">agregar una referencia al componente hijo</a>, esta no es la soluci\u00f3n ideal, porque lo que obtendr\u00edas ser\u00eda la instancia del componente en vez del nodo del DOM. Adicionalmente, esto no funcionar\u00eda con componentes de funci\u00f3n.</p>\n<p>Si usas React 16.3 o una versi\u00f3n mayor, recomendamos usar <a href=\"/react/forwarding-refs\">paso de referencias</a> para estos casos. <strong>Paso de referencias permite que los componentes decidan exponer cualquier referencia de sus hijos como si fuera la suya</strong>. Puedes encontrar un ejemplo detallado de como exponer los nodos DOM de los hijos a un componente padre <a href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\">en la documentaci\u00f3n de paso de referencias</a>.</p>\n<p>Si usas React 16.2 o una versi\u00f3n m\u00e1s antigua, o si necesitas m\u00e1s flexibilidad de la que ofrece el paso de referencias, puedes utilizar <a class=\"external-link\" href=\"https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509\">este enfoque alternativo</a> y pasar expl\u00edcitamente una referencia como una propiedad nombrada diferente.</p>\n<p>Siempre que sea posible, recomendamos no exponer los nodos del DOM, pero puede ser util como una v\u00eda de escape. Recuerda que este enfoque require que agregues c\u00f3digo al componente hijo. Si no tienes control alguno sobre la implementaci\u00f3n del componente hijo, tu ultima opci\u00f3n es usar <a href=\"/react/react-dom#finddomnode\"><code class=\"language-javascript\">findDOMNode()</code></a>, pero esto no es recomendado, y esta despreciado en modo estricto: <a href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\"><code class=\"language-javascript\">(StrictMode)</code></a>.</p>\n<h3 id=\"callback-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#callback-refs\"></a>Referencias mediante callback </h3>\n<p>React tambi\u00e9n ofrece otra manera de agregar referencias con \u201creferencias mediante callback\u201d, que da un control mas detallado sobre cuando las referencias son establecidas o no.</p>\n<p>En lugar de pasar un atributo a <code class=\"language-javascript\">ref</code> creado por <code class=\"language-javascript\">createRef()</code>, pasas una funci\u00f3n. La funci\u00f3n recibe la instancia del componente React o el elemento DOM del HTML como su argumento, que puede ser guardado y accedido desde otros lugares.</p>\n<p>El ejemplo a continuaci\u00f3n implementa un patr\u00f3n com\u00fan: usar el <code class=\"language-javascript\">ref</code> mediante un callback para guardar una referencia al nodo del DOM en una propiedad de la instancia.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomTextInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setTextInputRef</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">element</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">focusTextInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Hace enfoque del campo de texto usando un m\u00e9todo propio del DOM</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Auto enfoca el campo despu\u00e9s de que el componente se monta</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">focusTextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Usa el `ref` mediante callback para guardar una referencia al campo de texto del DOM</span>\n    <span class=\"token comment\">// en una propiedad de la instancia (por ejemplo, this.textInput)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>setTextInputRef<span class=\"token punctuation\">}</span></span></span>        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Focus the text input<span class=\"token punctuation\">\"</span></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusTextInput<span class=\"token punctuation\">}</span></span></span>        <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React llamara al callback del <code class=\"language-javascript\">ref</code> con el elemento del DOM cuando el componente sea montado, y lo llamara con <code class=\"language-javascript\">null</code> cuando este se desmonte. Se asegura que las referencias ser\u00e1n actualizadas antes que el <code class=\"language-javascript\">componentDidMount</code> o el <code class=\"language-javascript\">componentDidUpdate</code> sean ejecutados.</p>\n<p>Puedes pasar una referencia mediante callback entre componentes tal como puedes con los objetos de referencias creados con <code class=\"language-javascript\">React.createRef().</code></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">CustomTextInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomTextInput</span></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">inputRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputElement <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span></span>      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En el ejemplo de arriba, <code class=\"language-javascript\">Parent</code> pasa su referencia mediante callback como una propiedad <code class=\"language-javascript\">inputRef</code> al <code class=\"language-javascript\">CustomTextInput</code>, y el componente <code class=\"language-javascript\">CustomTextInput</code> pasa la misma funcion como un atributo especial <code class=\"language-javascript\">ref</code> al <code class=\"language-javascript\">&lt;input&gt;</code>. Como resultado, <code class=\"language-javascript\">this.inputElement</code> en el <code class=\"language-javascript\">Parent</code> sera asignado con el nodo del DOM correspondiente al elemento <code class=\"language-javascript\">input</code> del <code class=\"language-javascript\">CustomTextInput</code>.</p>\n<h3 id=\"legacy-api-string-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#legacy-api-string-refs\"></a>API antigua: Referencias mediante cadena de texto </h3>\n<p>Si trabajaste con React antes, puede que estes familiarizado con un API antigua donde el atributo <code class=\"language-javascript\">ref</code> es una cadena de texto, justo como <code class=\"language-javascript\">\"textInput\"</code>, y el nodo del DOM es accedido como <code class=\"language-javascript\">this.refs.textInput</code>. No recomendamos usar esto, ya que las referencias mediante cadenas de texto tienen <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/8333#issuecomment-271648615\">ciertos problemas</a>, son consideradas antiguas, y <strong>posiblemente seran removidas en una de las futuras versiones</strong>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Si estas considerando usar <code class=\"language-javascript\">this.refs.textInput</code> para acceder a las referencias, recomendamos que uses en su lugar o bien <a href=\"/react/refs-and-the-dom#callback-refs\">referencias mediante callback</a> o <a href=\"/react/refs-and-the-dom#creating-refs\">el API <code class=\"language-javascript\">createRef</code></a>.</p>\n</div>\n<h3 id=\"caveats-with-callback-refs\"><a class=\"anchor\" href=\"/react/refs-and-the-dom#caveats-with-callback-refs\"></a>Advertencias sobre referencias mediante callback </h3>\n<p>Si el callback de <code class=\"language-javascript\">ref</code> es definido como una <em>arrow function</em>, esta sera llamada 2 veces durante las actualizaciones, la primera con <code class=\"language-javascript\">null</code>, y la siguiente con el elemento DOM correspondiente. Esto se debe a que una nueva instancia de la funcion es creada en cada renderizado, por lo que React necesita limpiar la referencia vieja y agregar la nueva. Puedes evitar esto definiendo el callback del <code class=\"language-javascript\">ref</code> como un metodo en la clase, pero recuerda que no deberia importar en la mayoria de los casos.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/refs-and-the-dom.md\">Edit this page</a></p></div></article>", "path": "/react/refs-and-the-dom", "nav": ["/react/reconciliation", "/react/render-props"]}, {"key": "Render Props", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>El t\u00e9rmino <a class=\"external-link\" href=\"https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce\">\u201crender prop\u201d</a> se refiere a una t\u00e9cnica para compartir c\u00f3digo entre componentes en React utilizando una propiedad cuyo valor es una funci\u00f3n.</p>\n<p>Un componente con una <code class=\"language-javascript\">render prop</code> toma una funci\u00f3n que devuelve un elemento de React y lo llama en lugar de implementar su propia l\u00f3gica de representaci\u00f3n.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DataProvider</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Algunas bibliotecas que utilizan <code class=\"language-javascript\">render props</code> son <a class=\"external-link\" href=\"https://reacttraining.com/react-router/web/api/Route/render-func\">React Router</a>, <a class=\"external-link\" href=\"https://github.com/paypal/downshift\">Downshift</a> y <a class=\"external-link\" href=\"https://github.com/jaredpalmer/formik\">Formik</a>.</p>\n<p>En este documento, discutiremos por qu\u00e9 las <code class=\"language-javascript\">render props</code> son \u00fatiles y c\u00f3mo escribir las tuyas.</p>\n<h2 id=\"usa-render-props-para-preocupaciones-transversales\"><a class=\"anchor\" href=\"/react/render-props#usa-render-props-para-preocupaciones-transversales\"></a>Usa Render Props para preocupaciones transversales</h2>\n<p>Los componentes son la unidad primaria de reutilizaci\u00f3n de c\u00f3digo en React, pero no siempre es obvio c\u00f3mo compartir el estado o el comportamiento que un componente encapsula en otros componentes que necesitan ese mismo estado.</p>\n<p>Por ejemplo, el siguiente componente rastrea la posici\u00f3n del cursor en una aplicaci\u00f3n web:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The current mouse position is (</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A medida que el cursor se mueve alrededor de la pantalla, el componente muestra sus coordenadas (x, y) en un <code class=\"language-javascript\">&lt;p&gt;</code>.</p>\n<p>Ahora la pregunta es: \u00bfC\u00f3mo podemos reutilizar este comportamiento en otro componente? En otras palabras, si otro componente necesita saber la posici\u00f3n del cursor, \u00bfpodemos encapsular ese comportamiento para poder compartirlo f\u00e1cilmente con ese componente?</p>\n<p>Como los componentes son la unidad b\u00e1sica de reutilizaci\u00f3n de c\u00f3digo en React, intentemos refactorizar el c\u00f3digo un poco para usar un componente <code class=\"language-javascript\">&lt;Mouse&gt;</code> que encapsule el comportamiento que necesitamos reutilizar en otro lugar.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// El componente &lt;Mouse&gt; encapsula el comportamiento que necesitamos...</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ...pero, \u00bfc\u00f3mo renderizamos algo m\u00e1s que un &lt;p&gt;? */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The current mouse position is (</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora, el componente <code class=\"language-javascript\">&lt;Mouse&gt;</code> encapsula todo el comportamiento asociado con la escucha de eventos <code class=\"language-javascript\">mousemove</code> y el almacenamiento de la posici\u00f3n (x, y) del cursor, pero a\u00fan no es realmente reutilizable.</p>\n<p>Por ejemplo, digamos que tenemos un componente <code class=\"language-javascript\">&lt;Cat&gt;</code> que representa la imagen de un gato persiguiendo el cursor alrededor de la pantalla. Podr\u00edamos usar una propiedad <code class=\"language-javascript\">&lt;Cat mouse={{ x, y }}&gt;</code> para indicar al componente las coordenadas del cursor de manera que sepa d\u00f3nde colocar la imagen en la pantalla.</p>\n<p>Como primer paso, puedes intentar renderizar el componente <code class=\"language-javascript\">&lt;Cat&gt;</code> <em>dentro del m\u00e9todo <code class=\"language-javascript\">render</code> del componente <code class=\"language-javascript\">&lt;Mouse&gt;</code></em>, de esta manera:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>mouse<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseWithCat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n          Podr\u00edamos simplemente cambiar el &lt;p&gt; por un &lt;Cat&gt; aqu\u00ed ... pero luego\n          necesitar\u00edamos crear un componente &lt;MouseWithSomethingElse&gt; separado\n          cada vez que necesitamos usarlo, por lo que &lt;MouseWithCat&gt;\n          no es realmente reutilizable todav\u00eda.\n        */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MouseWithCat</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esta propuesta funcionar\u00e1 para nuestro caso de uso espec\u00edfico, pero no hemos logrado el objetivo de realmente encapsular el comportamiento de una manera reutilizable. Ahora, cada vez que queramos saber la posici\u00f3n del cursor para un caso de uso diferente, debemos crear un nuevo componente (es decir, esencialmente otro <code class=\"language-javascript\">&lt;MouseWithCat&gt;</code>) que renderice algo espec\u00edficamente para ese caso de uso.</p>\n<p>Aqu\u00ed es donde entran en juego las <code class=\"language-javascript\">render props</code>: En lugar de codificar de forma fija un componente <code class=\"language-javascript\">&lt;Cat&gt;</code> dentro del componente <code class=\"language-javascript\">&lt;Mouse&gt;</code>, y cambiar efectivamente la salida de su m\u00e9todo render, podemos proporcionar una funci\u00f3n por medio props a <code class=\"language-javascript\">&lt;Mouse&gt;</code> que pueda utilizar para determinar din\u00e1micamente lo que debe renderizar -una <code class=\"language-javascript\">render prop</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>mouse<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/cat.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleMouseMove<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n          En lugar de proporcionar una representaci\u00f3n est\u00e1tica de lo que &lt;Mouse&gt; renderiza,\n          usa la `render prop` para determinar din\u00e1micamente qu\u00e9 renderizar.\n        */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora, en lugar de clonar efectivamente el componente <code class=\"language-javascript\">&lt;Mouse&gt;</code> y codificar de forma fija otra cosa en su m\u00e9todo <code class=\"language-javascript\">render</code> para resolver un caso de uso espec\u00edfico, proporcionamos una <code class=\"language-javascript\">render prop</code> que <code class=\"language-javascript\">&lt;Mouse&gt;</code> pueda usar para din\u00e1micamente determinar que renderizar.</p>\n<p>M\u00e1s concretamente, <strong>una render prop es una prop que recibe una funci\u00f3n que un componente utiliza para saber qu\u00e9 renderizar.</strong></p>\n<p>Esta t\u00e9cnica hace que el comportamiento que necesitamos compartir sea extremadamente port\u00e1til. Para obtener ese comportamiento, genere un <code class=\"language-javascript\">&lt;Mouse&gt;</code> con una <code class=\"language-javascript\">render prop</code> que le diga qu\u00e9 renderizar con la posici\u00f3n (x, y) del cursor.</p>\n<p>Una cosa interesante a tener en cuenta acerca de las <code class=\"language-javascript\">render props</code> es que puedes implementar la mayor\u00eda de los <a href=\"/react/higher-order-components\">componentes de orden superior</a> (HOC) utilizando un componente regular con una <code class=\"language-javascript\">render prop</code>. Por ejemplo, si prefiere tener un <code class=\"language-javascript\">withMouse</code> HOC en lugar de un componente <code class=\"language-javascript\">&lt;Mouse&gt;</code>, puede crear f\u00e1cilmente uno usando un <code class=\"language-javascript\">&lt;Mouse&gt;</code> regular con una <code class=\"language-javascript\">render prop</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Si realmente quieres un HOC por alguna raz\u00f3n, puedes f\u00e1cilmente</span>\n<span class=\"token comment\">// crear uno usando un componente regular con una render prop!</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">withMouse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por lo tanto, usar una <code class=\"language-javascript\">render prop</code> hace que sea posible usar cualquier patr\u00f3n.</p>\n<h2 id=\"using-props-other-than-render\"><a class=\"anchor\" href=\"/react/render-props#using-props-other-than-render\"></a>Usando otras Props diferentes de <code class=\"language-javascript\">render</code> </h2>\n<p>Es importante recordar que solo porque el patr\u00f3n se llama <code class=\"language-javascript\">render props</code> <em>no tienes que usar una prop llamada <code class=\"language-javascript\">render</code> para usar este patr\u00f3n</em>. De hecho, <a class=\"external-link\" href=\"https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce\"><em>cualquier</em> prop que es una funci\u00f3n que un componente utiliza para saber qu\u00e9 renderizar es t\u00e9cnicamente una \u201crender prop\u201d</a> .</p>\n<p>Aunque los ejemplos anteriores usan <code class=\"language-javascript\">render</code>, \u00a1podr\u00edamos usar la proposici\u00f3n <code class=\"language-javascript\">children</code> con la misma facilidad!</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">children</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The mouse position is </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Y recuerda, la propiedad <code class=\"language-javascript\">children</code> en realidad no necesita ser nombrada en la lista de \u201catributos\u201d en su elemento JSX. En su lugar, puedes ponerlo directamente <em>dentro</em> del elemento!</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The mouse position is </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Mouse</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Ver\u00e1s esta t\u00e9cnica utilizada en la API de <a class=\"external-link\" href=\"https://github.com/chenglou/react-motion\">react-motion</a>.</p>\n<p>Ya que esta t\u00e9cnica es un poco inusual, probablemente querr\u00e1s decir expl\u00edcitamente que <code class=\"language-javascript\">children</code> deber\u00eda ser una funci\u00f3n en tus <code class=\"language-javascript\">propTypes</code> cuando dise\u00f1es una API como esta.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">Mouse<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"caveats\"><a class=\"anchor\" href=\"/react/render-props#caveats\"></a>Advertencias </h2>\n<h3 id=\"be-careful-when-using-render-props-with-reactpurecomponent\"><a class=\"anchor\" href=\"/react/render-props#be-careful-when-using-render-props-with-reactpurecomponent\"></a>Ten cuidado al usar Render Props con React.PureComponent </h3>\n<p>El uso de una <code class=\"language-javascript\">render prop</code> puede no aprovechar la ventaja del uso de <a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">React.PureComponent</code></a> si crea la funci\u00f3n dentro del m\u00e9todo <code class=\"language-javascript\">render</code>. Esto se debe a que la comparaci\u00f3n de propiedades poco profundas siempre devolver\u00e1 <code class=\"language-javascript\">false</code> para las nuevas props, y cada <code class=\"language-javascript\">render</code> en este caso generar\u00e1 un nuevo valor para la render prop.</p>\n<p>Por ejemplo, continuando con nuestro componente <code class=\"language-javascript\">&lt;Mouse&gt;</code> de los ejemplos anteriores, si <code class=\"language-javascript\">Mouse</code> extendiera <code class=\"language-javascript\">React.PureComponent</code> en lugar de <code class=\"language-javascript\">React.Component</code>, nuestro ejemplo se ver\u00eda as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Misma implementaci\u00f3n que la anterior...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n          \u00a1Esto est\u00e1 mal! El valor de la `render prop`\n          ser\u00e1 diferente en cada render.\n        */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouse</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En este ejemplo, cada vez que se renderiza <code class=\"language-javascript\">&lt;MouseTracker&gt;</code>, genera una nueva funci\u00f3n como el valor de la propiedad <code class=\"language-javascript\">&lt;Mouse render&gt;</code>, negando as\u00ed el efecto de <code class=\"language-javascript\">&lt;Mouse&gt;</code> extendiendo <code class=\"language-javascript\">React.PureComponent</code> en primer lugar!</p>\n<p>Para solucionar este problema, a veces se puede definir la prop como un m\u00e9todo de instancia, as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MouseTracker</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Definido como un m\u00e9todo de instancia, `this.renderTheCat` siempre</span>\n  <span class=\"token comment\">// se refiere a la *misma* funci\u00f3n cuando la usamos en render</span>\n  <span class=\"token function\">renderTheCat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mouse</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cat</span></span> <span class=\"token attr-name\">mouse</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mouse<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Move the mouse around!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mouse</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderTheCat<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En los casos en los que no puede definir la propiedad de forma est\u00e1tica (por ejemplo, porque necesita encerrar las props y/o el estado del componente), el <code class=\"language-javascript\">&lt;Mouse&gt;</code> deber\u00eda extender <code class=\"language-javascript\">React.Component</code> en su lugar.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/render-props.md\">Edit this page</a></p></div></article>", "path": "/react/render-props", "nav": ["/react/refs-and-the-dom", "/react/static-type-checking"]}, {"key": "Comprobaci\u00f3n de tipos est\u00e1ticos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los comprobadores de tipos est\u00e1ticos <a class=\"external-link\" href=\"https://flow.org/\">Flow</a> y <a class=\"external-link\" href=\"https://www.typescriptlang.org/\">TypeScript</a> identifican cierto tipo de problemas incluso antes de ejecutar tu c\u00f3digo. Tambi\u00e9n pueden mejorar el flujo de trabajo del desarrollador al agregar caracter\u00edsticas como el autocompletado. Por este motivo, recomendamos utilizar Flow o TypeScript en lugar de <code class=\"language-javascript\">PropTypes</code> para bases de c\u00f3digo m\u00e1s grandes.</p>\n<h2 id=\"flow\"><a class=\"anchor\" href=\"/react/static-type-checking#flow\"></a>Flow </h2>\n<p><a class=\"external-link\" href=\"https://flow.org/\">Flow</a> es un comprobador de tipos est\u00e1ticos para tu c\u00f3digo JavaScript. Desarrollado por Facebook y a menudo usado con React. Te permite escribir las variables, funciones y componentes React con una sintaxis especial de tipos, detectando antes los errores. Puedes leer una <a class=\"external-link\" href=\"https://flow.org/en/docs/getting-started/\">Introducci\u00f3n a Flow</a> para conocer sus conceptos b\u00e1sicos.</p>\n<p>Para usar Flow, necesitas:</p>\n<ul>\n<li>Agregar Flow como una dependencia a tu proyecto.</li>\n<li>Aseg\u00farate que la sintaxis de Flow se elimina del c\u00f3digo compilado.</li>\n<li>Agregue anotaciones de tipos y ejecuta Flow para verificarlos.</li>\n</ul>\n<p>Vamos a explicar estos pasos a continuaci\u00f3n en detalle.</p>\n<h3 id=\"adding-flow-to-a-project\"><a class=\"anchor\" href=\"/react/static-type-checking#adding-flow-to-a-project\"></a>Agregando Flow a tu proyecto </h3>\n<p>Primero, navega en la terminal hasta el directorio donde est\u00e1 tu proyecto. Deber\u00e1s ejecutar el siguiente comando:</p>\n<p> Si usas <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev flow-bin</code></pre></div>\n<p>Si usas <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev flow-bin</code></pre></div>\n<p>Este comando instala la \u00faltima versi\u00f3n de Flow en tu proyecto.</p>\n<p>Ahora, agrega <code class=\"language-javascript\">flow</code> a la secci\u00f3n <code class=\"language-javascript\">\"scripts\"</code> del <code class=\"language-javascript\">package.json</code> en tu proyecto, as\u00ed podr\u00e1s usarlo desde la terminal:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"flow\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flow\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finalmente, ejecuta uno de los siguientes comandos:</p>\n<p>Si usas <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> run flow init</code></pre></div>\n<p>Si usas <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> run flow init</code></pre></div>\n<p>Este comando crear\u00e1 un archivo de configuraci\u00f3n de Flow que deber\u00e1s confirmar (hacer <em>commit</em>).</p>\n<h3 id=\"stripping-flow-syntax-from-the-compiled-code\"><a class=\"anchor\" href=\"/react/static-type-checking#stripping-flow-syntax-from-the-compiled-code\"></a>Eliminando la sintaxis de Flow del c\u00f3digo compilado </h3>\n<p>Flow extiende el lenguaje JavaScript con una sintaxis especial para declaraciones y anotaciones de tipo. Sin embargo, los navegadores no interpretan esta sintaxis, por lo que debes asegurarte de que no termine en el paquete compilado de JavaScript que env\u00edas al navegador.</p>\n<p>La forma exacta de hacerlo depende de las herramientas que utilices para compilar JavaScript.</p>\n<h4 id=\"create-react-app\"><a class=\"anchor\" href=\"/react/static-type-checking#create-react-app\"></a><em>Create React App</em> </h4>\n<p>Si tu proyecto fue configurado con <a class=\"external-link\" href=\"https://github.com/facebookincubator/create-react-app\"><em>Create React App</em></a>, \u00a1Felicitaciones! Las declaraciones y anotaciones de Flow ya se est\u00e1n eliminando de forma predeterminada, por lo que no necesitas nada m\u00e1s en este paso.</p>\n<h4 id=\"babel\"><a class=\"anchor\" href=\"/react/static-type-checking#babel\"></a>Babel </h4>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Estas instrucciones <strong>no</strong> son para usuarios de <em>Create React App</em>. Aunque <em>Create React App</em> utiliza Babel internamente, ya est\u00e1 configurada para entender Flow. Solo sigue este paso si <strong>no</strong> usaste <em>Create React App</em>.</p>\n</div>\n<p>Si configuraste manualmente Babel en tu proyecto, deber\u00e1s instalar un <em>preset</em> especial para Flow.</p>\n<p>Si usas Yarn, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev @babel/preset-flow</code></pre></div>\n<p>Si usas npm, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/preset-flow</code></pre></div>\n<p>Luego agrega el <em>preset</em> <code class=\"language-javascript\">flow</code> a tu <a class=\"external-link\" href=\"https://babeljs.io/docs/usage/babelrc/\">configuraci\u00f3n de Babel</a>. Por ejemplo, si configuraste Babel a trav\u00e9s del archivo <code class=\"language-javascript\">.babelrc</code>, podr\u00eda verse as\u00ed:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"@babel/preset-flow\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token string\">\"react\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto te permitir\u00e1 usar la sintaxis de Flow en tu c\u00f3digo.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Flow no requiere el <em>preset</em> <code class=\"language-javascript\">react</code>, pero a menudo se usan juntos. Flow es capaz de entender la sintaxis JSX sin configuraci\u00f3n adicional.</p>\n</div>\n<h4 id=\"other-build-setups\"><a class=\"anchor\" href=\"/react/static-type-checking#other-build-setups\"></a>Otras configuraciones </h4>\n<p>Si no usaste Create React App o Babel, puedes usar <a class=\"external-link\" href=\"https://github.com/flowtype/flow-remove-types\">flow-remove-types</a> para eliminar las anotaciones de tipos.</p>\n<h3 id=\"running-flow\"><a class=\"anchor\" href=\"/react/static-type-checking#running-flow\"></a>Corriendo Flow </h3>\n<p>Si seguiste las instrucciones anteriores, deber\u00edas poder ejecutar Flow por primera vez.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> flow</code></pre></div>\n<p>Si usas npm, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> run flow</code></pre></div>\n<p>Deber\u00edas ver un mensaje como el siguiente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">No errors!\n\u2728  Done in 0.17s.</code></pre></div>\n<h3 id=\"adding-flow-type-annotations\"><a class=\"anchor\" href=\"/react/static-type-checking#adding-flow-type-annotations\"></a>Agregando anotaciones de tipo Flow </h3>\n<p>Por defecto, Flow solo verifica los archivos que incluyen esta anotaci\u00f3n:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// @flow</span></code></pre></div>\n<p>Nomalmente se coloca en la parte superior de un archivo. Intenta agregarlo a algunos archivos en tu proyecto y ejecuta <code class=\"language-javascript\">yarn flow</code> o <code class=\"language-javascript\">npm run flow</code> para que mires si Flow ya encontr\u00f3 alg\u00fan problema.</p>\n<p>Tambi\u00e9n hay <a class=\"external-link\" href=\"https://flow.org/en/docs/config/options/#toc-all-boolean\">una opci\u00f3n</a> para forzar a Flow a verificar <strong>todos</strong> los archivos independientemente de la anotaci\u00f3n. Esto puede ser demasiado ruidoso para los proyectos existentes, pero es razonable para un nuevo proyecto si deseas escribirlo completamente con Flow.</p>\n<p>Ahora est\u00e1s listo! Te recomendamos consultar los siguientes recursos para obtener m\u00e1s informaci\u00f3n sobre Flow:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://flow.org/en/docs/types/\">Documentaci\u00f3n de Flow: Anotaciones de tipos</a></li>\n<li><a class=\"external-link\" href=\"https://flow.org/en/docs/editors/\">Documentaci\u00f3n de Flow: Editores</a></li>\n<li><a class=\"external-link\" href=\"https://flow.org/en/docs/react/\">Documentaci\u00f3n de Flow: React</a></li>\n<li><a class=\"external-link\" href=\"https://medium.com/flow-type/linting-in-flow-7709d7a7e969\">Linting in Flow</a></li>\n</ul>\n<h2 id=\"typescript\"><a class=\"anchor\" href=\"/react/static-type-checking#typescript\"></a>TypeScript </h2>\n<p><a class=\"external-link\" href=\"https://www.typescriptlang.org/\">TypeScript</a> Es un lenguaje de programaci\u00f3n desarrollado por Microsoft.  Es un superconjunto JavaScript con tipos e incluye su propio compilador. Al ser un lenguaje con tipos, TypeScript puede detectar errores y fallos en el momento de la creaci\u00f3n, mucho antes de que tu aplicaci\u00f3n entre en funcionamiento. Puedes obtener m\u00e1s informaci\u00f3n sobre el uso de TypeScript con React <a class=\"external-link\" href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\">aqu\u00ed</a>.</p>\n<p>Para usar TypeScript, necesitas:</p>\n<ul>\n<li>Agregar TypeScript como una dependencia en tu proyecto.</li>\n<li>Configurar las opciones del compilador de TypeScript.</li>\n<li>Usar las extensiones de archivo correctas.</li>\n<li>Agregar definiciones para las bibliotecas que usas.</li>\n</ul>\n<p>Repasemos esto en detalle..</p>\n<h3 id=\"using-typescript-with-create-react-app\"><a class=\"anchor\" href=\"/react/static-type-checking#using-typescript-with-create-react-app\"></a>Usando TypeScript con Create React App </h3>\n<p>Create React App es compatible con TypeScript sin necesidad de configuraci\u00f3n adicional.</p>\n<p>Para crear un <strong>nuevo proyecto</strong> compatible con TypeScript, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\">npx create-react-app my-app --template typescript</code></pre></div>\n<p>Tambi\u00e9n puedes agregarlo a un <strong>proyecto de Create React App existente</strong>, <a class=\"external-link\" href=\"https://facebook.github.io/create-react-app/docs/adding-typescript\">documentaci\u00f3n aqu\u00ed</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Si usas Create React App, puedes <strong>omitir el resto de esta p\u00e1gina</strong>. Describe la configuraci\u00f3n manual que no se aplica a los usuarios de este comando.</p>\n</div>\n<h3 id=\"adding-typescript-to-a-project\"><a class=\"anchor\" href=\"/react/static-type-checking#adding-typescript-to-a-project\"></a>Agregando TypeScript a tu proyecto </h3>\n<p>Todo comienza con ejecutar un comando en tu terminal.</p>\n<p>Si usas <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev typescript</code></pre></div>\n<p>Si usas <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev typescript</code></pre></div>\n<p>\u00a1Felicidades! Has instalado la \u00faltima versi\u00f3n de TypeScript en tu proyecto. Instalar TypeScript nos da acceso al comando <code class=\"language-javascript\">tsc</code>. Antes de la configuraci\u00f3n, agreguemos <code class=\"language-javascript\">tsc</code> a la secci\u00f3n de \u201cscripts\u201d en nuestro <code class=\"language-javascript\">package.json</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"configuring-the-typescript-compiler\"><a class=\"anchor\" href=\"/react/static-type-checking#configuring-the-typescript-compiler\"></a>Configurando el compilador de TypeScript </h3>\n<p>El compilador no nos sirve de nada hasta que le decimos qu\u00e9 hacer. En TypeScript, estas reglas se definen en un archivo especial llamado <code class=\"language-javascript\">tsconfig.json</code>. Para generar este archivo:</p>\n<p>Si usas <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a>, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> run tsc --init</code></pre></div>\n<p>Si usas <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a>, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\">npx tsc --init</code></pre></div>\n<p>Mirando el <code class=\"language-javascript\">tsconfig.json</code> generado ahora, puedes ver que hay muchas opciones que puedes usar para configurar el compilador. Para obtener una descripci\u00f3n detallada de todas las opciones, consulta <a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">aqu\u00ed</a>.</p>\n<p>De las muchas opciones, veremos <code class=\"language-javascript\">rootDir</code> y <code class=\"language-javascript\">outDir</code>. De esta manera, el compilador tomar\u00e1 los archivos de typescript y generar\u00e1 archivos de javascript. Sin embargo, no queremos confundirnos con nuestros archivos de origen y la salida generada.</p>\n<p>Abordaremos esto en dos pasos:</p>\n<ul>\n<li>En primer lugar, vamos a organizar nuestra estructura de proyecto de esta manera. Pondremos todo nuestro c\u00f3digo fuente en el directorio <code class=\"language-javascript\">src</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 index.ts\n\u2514\u2500\u2500 tsconfig.json</code></pre></div>\n<ul>\n<li>A continuaci\u00f3n, le diremos al compilador d\u00f3nde est\u00e1 nuestro c\u00f3digo fuente y d\u00f3nde deber\u00eda ir la salida.</li>\n</ul>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// tsconfig.json</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span></span>    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>\u00a1Genial! Ahora, cuando ejecutamos nuestro script de compilaci\u00f3n, el compilador enviar\u00e1 el javascript generado a la carpeta <code class=\"language-javascript\">build</code>. El <a class=\"external-link\" href=\"https://github.com/Microsoft/TypeScript-React-Starter/blob/master/tsconfig.json\">TypeScript React Starter</a> proporciona un <code class=\"language-javascript\">tsconfig.json</code> con un buen conjunto de reglas para comenzar.</p>\n<p>En general, no deseas mantener el javascript generado en tu control de c\u00f3digo fuente, as\u00ed que aseg\u00farate de agregar la carpeta de compilaci\u00f3n a tu <code class=\"language-javascript\">.gitignore</code>.</p>\n<h3 id=\"file-extensions\"><a class=\"anchor\" href=\"/react/static-type-checking#file-extensions\"></a>Extensiones de archivo </h3>\n<p>En React, lo m\u00e1s probable es que escribas tus componentes en un archivo <code class=\"language-javascript\">.js</code>. En TypeScript tenemos 2 extensiones de archivo:</p>\n<p><code class=\"language-javascript\">.ts</code> es la extensi\u00f3n de archivo predeterminada, mientras que <code class=\"language-javascript\">.tsx</code> es una extensi\u00f3n especial que se usa para los archivos que contienen <code class=\"language-javascript\">JSX</code>.</p>\n<h3 id=\"running-typescript\"><a class=\"anchor\" href=\"/react/static-type-checking#running-typescript\"></a>Corriendo TypeScript </h3>\n<p>Si seguiste las instrucciones anteriores, deber\u00edas poder ejecutar TypeScript por primera vez.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">yarn</span> build</code></pre></div>\n<p>Si usas npm, ejecuta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> run build</code></pre></div>\n<p>Si no ves ninguna salida, significa que se complet\u00f3 correctamente.</p>\n<h3 id=\"type-definitions\"><a class=\"anchor\" href=\"/react/static-type-checking#type-definitions\"></a>Definiciones de tipo </h3>\n<p>Para poder mostrar errores y sugerencias de otros paquetes, el compilador se basa en archivos de declaraci\u00f3n. Un archivo de declaraci\u00f3n proporciona toda la informaci\u00f3n de tipos sobre una biblioteca. Esto nos permite usar bibliotecas javascript como las que est\u00e1n en npm en nuestro proyecto.</p>\n<p>Hay dos formas principales de obtener declaraciones para una biblioteca:</p>\n<p><strong>Integradas</strong> - La biblioteca incluye sus propios archivos de declaraci\u00f3n. Esto es genial para nosotros, ya que todo lo que tenemos que hacer es instalar la biblioteca y podemos usarla de inmediato. Para verificar si una biblioteca tiene tipos integrados, busca un archivo <code class=\"language-javascript\">index.d.ts</code> en el proyecto. Algunas bibliotecas lo tendr\u00e1n especificado en su <code class=\"language-javascript\">package.json</code> bajo el campo <code class=\"language-javascript\">typings</code> o <code class=\"language-javascript\">types</code>.</p>\n<p><strong><a class=\"external-link\" href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">DefinitelyTyped</a></strong> - DefinitelyTyped es un gran repositorio de declaraciones para bibliotecas que no incluyen un archivo de declaraciones. Las declaraciones son de car\u00e1cter p\u00fablico y son administradas por Microsoft y colaboradores de c\u00f3digo abierto. React, por ejemplo, no incluye su propio archivo de declaraci\u00f3n. En su lugar, podemos obtenerlo de DefinitelyTyped. Para ello ingresa este comando en tu terminal.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token comment\"># yarn</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev @types/react\n\n<span class=\"token comment\"># npm</span>\n<span class=\"token function\">npm</span> i --save-dev @types/react</code></pre></div>\n<p><strong>Declaraciones locales</strong>\nA veces, el paquete que deseas utilizar no incluye declaraciones ni est\u00e1 disponible en DefinitelyTyped. En ese caso, podemos tener un archivo de declaraci\u00f3n local. Para hacer esto, crea un archivo <code class=\"language-javascript\">declarations.d.ts</code> en la ra\u00edz de tu directorio de origen. Una simple declaraci\u00f3n podr\u00eda verse as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-typescript\"><code class=\"language-javascript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'querystring'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> object\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>\u00a1Ya est\u00e1s listo para codificar! Recomendamos consultar los siguientes recursos para obtener m\u00e1s informaci\u00f3n sobre TypeScript:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html\">Documentaci\u00f3n de TypeScript: Tipos comunes</a></li>\n<li><a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html\">Documentaci\u00f3n de TypeScript: Migraci\u00f3n desde JavaScript</a></li>\n<li><a class=\"external-link\" href=\"https://www.typescriptlang.org/docs/handbook/react-&amp;-webpack.html\">Documentaci\u00f3n de TypeScript: React y Webpack</a></li>\n</ul>\n<h2 id=\"rescript\"><a class=\"anchor\" href=\"/react/static-type-checking#rescript\"></a>ReScript </h2>\n<p><a class=\"external-link\" href=\"https://rescript-lang.org/\">ReScript</a> es un lenguaje tipado que compila a JavaScript. Algunas de sus funcionalidades fundamentales son el 100% de cobertura de tipos, compatibilidad de primer nivel con JSX y <a class=\"external-link\" href=\"https://rescript-lang.org/docs/react/latest/introduction\">conectores dedicados para React</a> para permitir la integraci\u00f3n en bases de c\u00f3digo existentes de JS / React.</p>\n<p>Puedes econtrar m\u00e1s informaci\u00f3n sobre c\u00f3mo integrar ReScript en tu base de c\u00f3digo de JS / React <a class=\"external-link\" href=\"https://rescript-lang.org/docs/manual/latest/installation#integrate-into-an-existing-js-project\">aqu\u00ed</a>.</p>\n<h2 id=\"kotlin\"><a class=\"anchor\" href=\"/react/static-type-checking#kotlin\"></a>Kotlin </h2>\n<p><a class=\"external-link\" href=\"https://kotlinlang.org/\">Kotlin</a> es un lenguaje de tipo est\u00e1tico desarrollado por JetBrains. Sus plataformas de destino incluyen JVM, Android, LLVM y <a class=\"external-link\" href=\"https://kotlinlang.org/docs/reference/js-overview.html\">JavaScript</a>.</p>\n<p>JetBrains desarrolla y mantiene varias herramientas espec\u00edficamente para la comunidad de React: <a class=\"external-link\" href=\"https://github.com/JetBrains/kotlin-wrappers\"><em>bindings</em> para React</a> as\u00ed como <a class=\"external-link\" href=\"https://github.com/JetBrains/create-react-kotlin-app\">Create React Kotlin App</a>. Este \u00faltimo te ayuda a comenzar a crear aplicaciones React con Kotlin sin configuraci\u00f3n de compilaci\u00f3n.</p>\n<h2 id=\"other-languages\"><a class=\"anchor\" href=\"/react/static-type-checking#other-languages\"></a>Otros lenguajes </h2>\n<p>Ten en cuenta que hay otros lenguajes de tipo est\u00e1tico que se compilan en JavaScript y por lo tanto, son compatibles con React. Por ejemplo, <a class=\"external-link\" href=\"https://fable.io\">F#/Fable</a> con <a class=\"external-link\" href=\"https://elmish.github.io/react\">elmish-react</a>. Visita sus respectivos sitios para obtener m\u00e1s informaci\u00f3n y si\u00e9ntete libre de agregar m\u00e1s lenguajes est\u00e1ticamente tipados que funcionan con React a esta p\u00e1gina!</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/static-type-checking.md\">Edit this page</a></p></div></article>", "path": "/react/static-type-checking", "nav": ["/react/render-props", "/react/strict-mode"]}, {"key": "Modo estricto", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><code class=\"language-javascript\">StrictMode</code> es una herramienta para destacar problemas potenciales en la aplicaci\u00f3n. Al igual que <code class=\"language-javascript\">Fragment</code>, <code class=\"language-javascript\">StrictMode</code> no renderiza nada en la interfaz de usuario. Este modo tambi\u00e9n activa advertencias y comprobaciones adicionales para sus descendientes.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Las comprobaciones hechas por el modo estricto solamente son ejecutadas en el modo de desarrollo; <em>no van a impactar producci\u00f3n</em>.</p>\n</div>\n<p>Puedes habilitar el modo estricto para cualquier parte de tu aplicaci\u00f3n. Por ejemplo:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ExampleApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentOne</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentTwo</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Footer</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>En el ejemplo anterior, las comprobaciones del modo estricto <em>no</em> va a correr en los componentes de <code class=\"language-javascript\">Header</code> y <code class=\"language-javascript\">Footer</code>. Sin embargo, <code class=\"language-javascript\">ComponentOne</code> y <code class=\"language-javascript\">ComponentTwo</code>, as\u00ed como todos sus descendientes, tendr\u00e1n las comprobaciones.</p>\n<p><code class=\"language-javascript\">StrictMode</code> en la actualidad ayuda a:</p>\n<ul>\n<li><a href=\"/react/strict-mode#identifying-unsafe-lifecycles\">Identificar ciclos de vida inseguros</a></li>\n<li><a href=\"/react/strict-mode#warning-about-legacy-string-ref-api-usage\">Advertencia sobre el uso de la API legado de string ref</a></li>\n<li><a href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\">Advertencia sobre el uso del m\u00e9todo obsoleto findDOMNode</a></li>\n<li><a href=\"/react/strict-mode#detecting-unexpected-side-effects\">Detectar efectos secundarios inesperados</a></li>\n<li><a href=\"/react/strict-mode#detecting-legacy-context-api\">Detectar el uso de la API legado para el contexto</a></li>\n<li><a href=\"/react/strict-mode#ensuring-reusable-state\">Asegurar estado reutilizable</a></li>\n</ul>\n<p>Funcionalidades adicionales ser\u00e1n agregadas en futuras versiones de React.</p>\n<h3 id=\"identifying-unsafe-lifecycles\"><a class=\"anchor\" href=\"/react/strict-mode#identifying-unsafe-lifecycles\"></a>Identificar ciclos de vida inseguros </h3>\n<p>Como fue explicado <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">en este art\u00edculo del blog</a>, algunos ciclos de vida antiguos son inseguros para ser usados en aplicaciones de React as\u00edncronas. Sin embargo, si tu aplicaci\u00f3n utiliza bibliotecas de terceros, puede ser dif\u00edcil asegurar que estos ciclos de vida no est\u00e9n siendo utilizados. Por fortuna, \u00a1el modo estricto puede ayudar con esto!</p>\n<p>Cuando el modo estricto est\u00e1 habilitado, React re\u00fane en una lista todos los componentes de clases que est\u00e1n usando ciclos de vida inseguros, y registra por medio de un mensaje de advertencia la informaci\u00f3n sobre estos componentes, de esta forma:</p>\n<p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/e4fdbff774b356881123e69ad88eda88/1628f/strict-mode-unsafe-lifecycles-warning.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/e4fdbff774b356881123e69ad88eda88/1e088/strict-mode-unsafe-lifecycles-warning.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>Solucionar los problemas identificados por el modo estricto <em>ahora</em>, har\u00e1 que sea m\u00e1s f\u00e1cil para ti aprovechar el renderizado as\u00edncrono en futuras versiones de React.</p>\n<h3 id=\"warning-about-legacy-string-ref-api-usage\"><a class=\"anchor\" href=\"/react/strict-mode#warning-about-legacy-string-ref-api-usage\"></a>Advertencia sobre el uso de la API legado de string ref </h3>\n<p>Anteriormente, React proporcionaba dos formas para utilizar refs: la API legado de string ref y la API por callback. Aunque la API de string ref era la m\u00e1s c\u00f3moda de las dos, ten\u00eda <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/1373\">muchas desventajas</a> y por lo tanto nuestra recomendaci\u00f3n oficial fue <a href=\"/react/refs-and-the-dom#legacy-api-string-refs\">usar la forma de callback en su lugar</a></p>\n<p>React 16.3 agreg\u00f3 una tercera opci\u00f3n que ofrece la comodidad que tiene string ref sin ninguna de las desventajas:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>Desde que los object refs fueron agregados en gran parte como reemplazo a los string refs, el modo estricto ahora advierte sobre el uso de string refs.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Los callback refs seguir\u00e1n siendo soportados en conjunto con la nueva API de <code class=\"language-javascript\">createRef</code>.</p>\n<p>No necesitas reemplazar los callback refs en tu componente. Son un poco m\u00e1s flexibles, por lo que continuar\u00e1n estando como una caracter\u00edstica avanzada.</p>\n</div>\n<p><a href=\"/react/refs-and-the-dom\">Aprende m\u00e1s sobre la API <code class=\"language-javascript\">createRef</code> aqu\u00ed.</a></p>\n<h3 id=\"warning-about-deprecated-finddomnode-usage\"><a class=\"anchor\" href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\"></a>Advertencia sobre el uso del m\u00e9todo obsoleto findDOMNode </h3>\n<p>React sol\u00eda soportar <code class=\"language-javascript\">findDOMNode</code> para buscar en el \u00e1rbol un nodo del DOM dada una instancia de una clase. Normalmente no necesitas hacer esto ya que puedes <a href=\"/react/refs-and-the-dom#creating-refs\">vincular un ref directamente un nodo del DOM</a>.</p>\n<p><code class=\"language-javascript\">findDOMNode</code>tambi\u00e9n puede ser utilizado en componentes con clases pero esto estaba da\u00f1ando los niveles de abstracci\u00f3n al permitir a un padre solicitar que cierto hijo fuera renderizado. Esto crea un peligro para refactorizar algo en el caso que no puedas cambiar los detalles de la implementaci\u00f3n de un componente ya que un padre puede estar utilizando uno de sus nodos del DOM. <code class=\"language-javascript\">findDOMNode</code> s\u00f3lo retorna el primer hijo, pero con el uso de los Fragmentos, es posible que un componente pueda renderizar m\u00faltiples nodos del DOM. <code class=\"language-javascript\">findDOMNode</code> es una API de solo lectura para usar una sola vez. S\u00f3lo da una respuesta cuando se invoca el m\u00e9todo. Si un componente hijo renderiza un nodo diferente, no hay forma alguna de manipular este cambio. Por lo tanto <code class=\"language-javascript\">findDOMNode</code> solo funciona si los componentes simpre retornan un solo nodo de DOM que nunca cambie.</p>\n<p>En su lugar puedes hacer que este comportamiento sea explicito pasando un ref a tu componente personalizado y transmiti\u00e9ndolo al DOM usando el <a href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\">reenv\u00edo de ref</a>.</p>\n<p>Tambi\u00e9n puedes agregar un nodo del DOM envuelto en tu componente y vincular un ref directamente al mismo.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>En CSS, el atributo <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/CSS/display#display_contents\"><code class=\"language-javascript\">display: contents</code></a> puede ser usado si no quieres que el nodo sea parte de la estructura.</p>\n</div>\n<h3 id=\"detecting-unexpected-side-effects\"><a class=\"anchor\" href=\"/react/strict-mode#detecting-unexpected-side-effects\"></a>Detectar efectos secundarios inesperados </h3>\n<p>Conceptualmente, React funciona en dos fases:</p>\n<ul>\n<li>La fase de <strong>renderizado</strong> determina que cambios deben ser hechos a p.ej. el DOM. Durante esta fase, React llama a <code class=\"language-javascript\">render</code> y compara su resultado con los del renderizado anterior.</li>\n<li>La fase de <strong>confirmaci\u00f3n</strong> es aquella donde React aplica cualquiera de los cambios. (En el caso de React en el DOM, esto es cuando React inserta, actualiza y remueve nodos del DOM.) React tambi\u00e9n llama ciclos de vida tales como <code class=\"language-javascript\">componentDidMount</code> y <code class=\"language-javascript\">componentDidUpdate</code> durante esta fase.</li>\n</ul>\n<p>La fase de <strong>confirmaci\u00f3n</strong> es muy r\u00e1pida generalmente, pero el renderizado puede ser lento. Por esta raz\u00f3n, el pr\u00f3ximo modo as\u00edncrono (que no est\u00e1 habilitado por defecto a\u00fan) separa el trabajo de renderizado en diferentes etapas, pausando y reanudando el trabajo para prevenir bloquear el navegador. Esto significa que React puede que invoque los ciclos de vida presentes en la fase de renderizado m\u00faltiples veces antes de terminar la confirmaci\u00f3n, o puede invocarlos todos sin terminar la confirmaci\u00f3n (porque ocurri\u00f3 alg\u00fan error o una interrupci\u00f3n de alta prioridad).</p>\n<p>El ciclo de vida de la fase de renderizado incluye los siguientes m\u00e9todos de los componentes en clases:</p>\n<ul>\n<li><code class=\"language-javascript\">constructor</code></li>\n<li><code class=\"language-javascript\">componentWillMount</code> (or <code class=\"language-javascript\">UNSAFE_componentWillMount</code>)</li>\n<li><code class=\"language-javascript\">componentWillReceiveProps</code> (or <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps</code>)</li>\n<li><code class=\"language-javascript\">componentWillUpdate</code> (or <code class=\"language-javascript\">UNSAFE_componentWillUpdate</code>)</li>\n<li><code class=\"language-javascript\">getDerivedStateFromProps</code></li>\n<li><code class=\"language-javascript\">shouldComponentUpdate</code></li>\n<li><code class=\"language-javascript\">render</code></li>\n<li>Funciones de actualizaci\u00f3n de <code class=\"language-javascript\">setState</code> (el primer argumento)</li>\n</ul>\n<p>Ya que los m\u00e9todos arriba mencionados pueden ser llamados m\u00e1s de una vez, es importante que estos no contengan ning\u00fan efecto secundario. Ignorar esta regla puede llevar a una cantidad de problemas, incluyendo fugas de memoria y estados de aplicaci\u00f3n inv\u00e1lido. Desafortunadamente, puede ser muy dif\u00edcil el detectar estos problemas ya con frecuencia pueden ser <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/Algoritmo_determinista\">no deterministas</a>.</p>\n<p>El modo estricto no puede detectar efectos secundarios de forma autom\u00e1tica por ti, pero te puede ayudar a encontrarlos al hacerlos un poco m\u00e1s deterministas. Esto se logra al invocar dos veces las siguientes funciones:</p>\n<ul>\n<li>Los m\u00e9todos <code class=\"language-javascript\">constructor</code>, <code class=\"language-javascript\">render</code> y <code class=\"language-javascript\">shouldComponentUpdate</code> de los componentes de clase</li>\n<li>El m\u00e9todo est\u00e1tico <code class=\"language-javascript\">getDerivedStateFromProps</code> de los componentes de clase</li>\n<li>El cuerpo de los componentes de funci\u00f3n</li>\n<li>Funciones de actualizaci\u00f3n del estado (el primer argumento de <code class=\"language-javascript\">setState</code>)</li>\n<li>Las funciones que se pasan a <code class=\"language-javascript\">useState</code>, <code class=\"language-javascript\">useMemo</code> o <code class=\"language-javascript\">useReducer</code></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Esto solo aplica al modo de desarrollo. <em>Los ciclos de vida no ser\u00e1n invocados dos veces en el modo de producci\u00f3n.</em></p>\n</div>\n<p>Por ejemplo, considera el siguiente c\u00f3digo:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TopLevelRoute</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    SharedApplicationState<span class=\"token punctuation\">.</span><span class=\"token function\">recordEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ExampleComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>En primera instancia, este c\u00f3digo no deber\u00eda parecer problem\u00e1tico. Pero si <code class=\"language-javascript\">SharedApplicationState.recordEvent</code> no es <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/Idempotencia_(inform%C3%A1tica)\">idempotente</a>, entonces al instanciar este componente m\u00faltiples veces puede llevar a que tenga un estado de aplicaci\u00f3n inv\u00e1lido. Estos tipo de bug sutiles pueden no manifestarse durante el desarrollo, o quizas s\u00ed lo hagan pero de forma inconsistente y se pase por alto.</p>\n<p>Al invocar los m\u00e9todos dos veces, como el constructor del componente, el modo estricto hace que patrones como estos sean m\u00e1s f\u00e1ciles de encontrar.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>A partir de React 17, React modifica autom\u00e1ticamente los m\u00e9todos de consola como <code class=\"language-javascript\">console.log()</code> para silenciar los logs en la segunda llamada a las funciones de ciclo de vida. Sin embargo, esto puede causar comportamientos no deseados en algunos casos para los que se puede <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/20090#issuecomment-715927125\">usar una soluci\u00f3n alternativa</a>.</p>\n<p>Comenzando con React 18, React no suprime ning\u00fan log. No obstante, si tienes instaladas las herramientas de desarrollo de React, los logs de la segunda llamada aparecer\u00e1n ligeramente atenuados. React DevTools tambi\u00e9n ofrece una configuraci\u00f3n (desactivada por defecto) para suprimirlos completamente.</p>\n</div>\n<h3 id=\"detecting-legacy-context-api\"><a class=\"anchor\" href=\"/react/strict-mode#detecting-legacy-context-api\"></a>Detectar el uso de la API legada para el contexto </h3>\n<p>La API legada para el contexto es propensa a errores, y ser\u00e1 eliminada en una versi\u00f3n principal a futuro. A\u00fan est\u00e1 funcionando para todas las versiones 16.x pero mostrar\u00e1 el siguiente mensaje de advertencia si se usa en modo estricto:</p>\n<p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/fca5c5e1fb2ef2e2d59afb100b432c12/51800/warn-legacy-context-in-strict-mode.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/fca5c5e1fb2ef2e2d59afb100b432c12/1e088/warn-legacy-context-in-strict-mode.png\">Image link</a>\n</span>\n</span>\n</a>\n</p>\n<p>Lee sobre la <a href=\"/react/context\">nueva documentaci\u00f3n de la API de contexto</a> para ayudarte a migrar a la nueva versi\u00f3n.</p>\n<h3 id=\"ensuring-reusable-state\"><a class=\"anchor\" href=\"/react/strict-mode#ensuring-reusable-state\"></a>Ensuring reusable state </h3>\n<p>In the future, we\u2019d like to add a feature that allows React to add and remove sections of the UI while preserving state. For example, when a user tabs away from a screen and back, React should be able to immediately show the previous screen. To do this, React will support remounting trees using the same component state used before unmounting.</p>\n<p>This feature will give React better performance out-of-the-box, but requires components to be resilient to effects being mounted and destroyed multiple times. Most effects will work without any changes, but some effects do not properly clean up subscriptions in the destroy callback, or implicitly assume they are only mounted or destroyed once.</p>\n<p>To help surface these issues, React 18 introduces a new development-only check to Strict Mode. This new check will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount.</p>\n<p>To demonstrate the development behavior you\u2019ll see in Strict Mode with this feature, consider what happens when React mounts a new component. Without this change, when a component mounts, React creates the effects:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">* React mounts the component.\n  * Layout effects are created.\n  * Effects are created.</code></pre></div>\n<p>With Strict Mode starting in React 18, whenever a component mounts in development, React will simulate immediately unmounting and remounting the component:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">* React mounts the component.\n    * Layout effects are created.\n    * Effect effects are created.\n* React simulates effects being destroyed on a mounted component.\n    * Layout effects are destroyed.\n    * Effects are destroyed.\n* React simulates effects being re-created on a mounted component.\n    * Layout effects are created\n    * Effect setup code runs</code></pre></div>\n<p>On the second mount, React will restore the state from the first mount. This feature simulates user behavior such as a user tabbing away from a screen and back, ensuring that code will properly handle state restoration.</p>\n<p>When the component unmounts, effects are destroyed as normal:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">* React unmounts the component.\n  * Layout effects are destroyed.\n  * Effect effects are destroyed.</code></pre></div>\n<p>Unmounting and remounting includes:</p>\n<ul>\n<li><code class=\"language-javascript\">componentDidMount</code></li>\n<li><code class=\"language-javascript\">componentWillUnmount</code></li>\n<li><code class=\"language-javascript\">useEffect</code></li>\n<li><code class=\"language-javascript\">useLayoutEffect</code></li>\n<li><code class=\"language-javascript\">useInsertionEffect</code></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>This only applies to development mode, <em>production behavior is unchanged</em>.</p>\n</div>\n<p>For help supporting common issues, see:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/reactwg/react-18/discussions/18\">How to support Reusable State in Effects</a></li>\n</ul></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/strict-mode.md\">Edit this page</a></p></div></article>", "path": "/react/strict-mode", "nav": ["/react/static-type-checking", "/react/typechecking-with-proptypes"]}, {"key": "Verificaci\u00f3n de tipos con PropTypes", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">React.PropTypes</code> se movi\u00f3 a un paquete diferente desde React v15.5. Por favor usa <a class=\"external-link\" href=\"https://www.npmjs.com/package/prop-types\">en su lugar la biblioteca <code class=\"language-javascript\">prop-types</code></a>.</p>\n<p>Nosotros ofrecemos <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2017/04/07/react-v15.5.0.html#migrating-from-reactproptypes\">un script de codemod</a> para automatizar la conversi\u00f3n.</p>\n</div>\n<p>A medida que tu aplicaci\u00f3n crece, puedes capturar una gran cantidad de errores con verificaci\u00f3n de tipos. Para algunas aplicaciones, puedes usar extensiones de Javascript como <a class=\"external-link\" href=\"https://flow.org/\">Flow</a> o <a class=\"external-link\" href=\"https://www.typescriptlang.org/\">TypeScript</a> para verificar los tipos en tu aplicaci\u00f3n. Pero incluso si no usas alguno de ellos, React tiene algunas habilidades de verificaci\u00f3n de tipos incorporadas. Para usar verificaci\u00f3n de tipos en las props de un componente, puedes asignar la propiedad especial <code class=\"language-javascript\">PropTypes</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nGreeting<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En este ejemplo, estamos usando un componente de clase, pero la misma funcionalidad tambi\u00e9n se podr\u00eda aplicar a componentes de funci\u00f3n, o componentes creados por <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a> o <a href=\"/react/react-api#reactforwardref\"><code class=\"language-javascript\">React.forwardRef</code></a>.</p>\n<p><code class=\"language-javascript\">PropTypes</code> exporta un rango de validadores que pueden ser usados para estar seguros que la informaci\u00f3n recibida sea v\u00e1lida. En este ejemplo, usamos <code class=\"language-javascript\">PropTypes.string</code>. Cuando un valor inv\u00e1lido se asigna a una prop, se muestra una advertencia en la consola de Javascript. Por razones de desempe\u00f1o, <code class=\"language-javascript\">PropTypes</code> solo se verifica en modo desarrollo.</p>\n<h3 id=\"proptypes\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#proptypes\"></a>PropTypes </h3>\n<p>Aqu\u00ed hay un ejemplo que documenta los diferentes tipos de validadores:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\nMyComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Puedes declarar que una propiedad es un tipo espec\u00edfico de JS. Por defecto, estas</span>\n  <span class=\"token comment\">// son todas opcionales.</span>\n  <span class=\"token literal-property property\">optionalArray</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalBool</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalFunc</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalNumber</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalObject</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalString</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optionalSymbol</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>symbol<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Cualquier cosa que sea interpretada: n\u00fameros, cadenas, elementos o un array</span>\n  <span class=\"token comment\">// (o fragment) que contengan estos tipos.</span>\n  <span class=\"token literal-property property\">optionalNode</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un elemento de React</span>\n  <span class=\"token literal-property property\">optionalElement</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un tipo de elemento React (ej. MyComponent).</span>\n  <span class=\"token literal-property property\">optionalElementType</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>elementType<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Adem\u00e1s puedes declarar que una prop es una instancia de una clase. Este usa</span>\n  <span class=\"token comment\">// el operador instanceof de JS.</span>\n  <span class=\"token literal-property property\">optionalMessage</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Puedes asegurar que una prop esta limitada a valores espec\u00edficos si se</span>\n  <span class=\"token comment\">// considera como enum.</span>\n  <span class=\"token literal-property property\">optionalEnum</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">oneOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'News'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Photos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un objeto que puede ser de diferentes tipos</span>\n  <span class=\"token literal-property property\">optionalUnion</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">oneOfType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n    PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>Message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un array de determinado tipo</span>\n  <span class=\"token literal-property property\">optionalArrayOf</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un objeto con valores de propiedad de determinado tipo</span>\n  <span class=\"token literal-property property\">optionalObjectOf</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">objectOf</span><span class=\"token punctuation\">(</span>PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un objeto que tenga determinada estructura</span>\n  <span class=\"token literal-property property\">optionalObjectWithShape</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token comment\">// Un objeto con advertencias sobre propiedades adicionales</span>\n  <span class=\"token literal-property property\">optionalObjectWithStrictShape</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">exact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">quantity</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   \n\n  <span class=\"token comment\">// Puedes encadenar cualquiera de los anteriores con `isRequired` para asegurar</span>\n  <span class=\"token comment\">// que se muestre una advertencia si la prop no se suministra.</span>\n  <span class=\"token literal-property property\">requiredFunc</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un valor requerido de cualquier tipo de datos</span>\n  <span class=\"token literal-property property\">requiredAny</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>any<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Tambi\u00e9n puedes suministrar un validador personalizado. Debe retornar un objeto Error</span>\n  <span class=\"token comment\">// si la validaci\u00f3n falla. No uses `console.warn` o throw, porque no va a funcionar en</span>\n  <span class=\"token comment\">// `oneOfType`</span>\n  <span class=\"token function-variable function\">customProp</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">,</span> componentName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">matchme</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Invalid prop `'</span> <span class=\"token operator\">+</span> propName <span class=\"token operator\">+</span> <span class=\"token string\">'` supplied to'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">' `'</span> <span class=\"token operator\">+</span> componentName <span class=\"token operator\">+</span> <span class=\"token string\">'`. Validation failed.'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Tambi\u00e9n puedes suministrar un validador personalizado a `arrayOf` y `objectOf`.</span>\n  <span class=\"token comment\">// Debe retornar un objeto Error si la validaci\u00f3n falla. El validador se llamar\u00e1</span>\n  <span class=\"token comment\">// por cada key en el array o el objeto. Los primeros dos arguments del validador</span>\n  <span class=\"token comment\">// son el array o el objeto, y la key del elemento actual.</span>\n  <span class=\"token literal-property property\">customArrayProp</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propValue<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> componentName<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> propFullName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">matchme</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>propValue<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Invalid prop `'</span> <span class=\"token operator\">+</span> propFullName <span class=\"token operator\">+</span> <span class=\"token string\">'` supplied to'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">' `'</span> <span class=\"token operator\">+</span> componentName <span class=\"token operator\">+</span> <span class=\"token string\">'`. Validation failed.'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"requiring-single-child\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#requiring-single-child\"></a>Solicitar un s\u00f3lo hijo </h3>\n<p>Usando <code class=\"language-javascript\">PropTypes.element</code> puedes especificar que \u00fanicamente un hijo se pase al componente.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Debe ser exactamente un elemento o generar\u00e1 una advertencia</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nMyComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"default-prop-values\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#default-prop-values\"></a>Valores por defecto de props </h3>\n<p>Puedes definir los valores por defecto de tus props al asignar la propiedad especial <code class=\"language-javascript\">defaultProps</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Especifica los valores por defecto de props:</span>\nGreeting<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Stranger'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Renderiza \"Hello, Stranger\":</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Desde ES2022 puedes declarar tambi\u00e9n <code class=\"language-javascript\">defaultProps</code> como una propiedad est\u00e1tica al interior de un componente clase de React. Para m\u00e1s informaci\u00f3n, puedes ver los <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Classes/Public_class_fields#campos_p%C3%BAblicos_est%C3%A1ticos\">campos p\u00fablicos est\u00e1ticos de clase</a>. Esta sintaxis requerir\u00e1 un paso de compilaci\u00f3n para funcionar en navegadores antiguos.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'stranger'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">defaultProps</code> se usa para asegurar que <code class=\"language-javascript\">this.props.name</code> tendr\u00e1 un valor si no fue especificado por el componente padre. La verificaci\u00f3n de tipo de <code class=\"language-javascript\">propTypes</code> sucede despu\u00e9s de resolver <code class=\"language-javascript\">defaultProps</code>, as\u00ed que la verificaci\u00f3n de tipo tambi\u00e9n se aplica a <code class=\"language-javascript\">defaultProps</code>.</p>\n<h3 id=\"function-components\"><a class=\"anchor\" href=\"/react/typechecking-with-proptypes#function-components\"></a>Componentes de funci\u00f3n </h3>\n<p>Si est\u00e1s usando componentes de funci\u00f3n en tu flujo com\u00fan de desarrollo, es conveniente que hagas algunos cambios para permitir que los PropTypes se apliquen correctamente.</p>\n<p>Digamos que tienes un componentes que luce as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para a\u00f1adir PropTypes, se puede declarar el componente en una funci\u00f3n independiente antes de exportarlo, de esta forma:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HelloWorldComponent</code></pre></div>\n<p>Luego, puedes a\u00f1adir PropTypes directamente al componente <code class=\"language-javascript\">HelloWorldComponent</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nHelloWorldComponent<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HelloWorldComponent</code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/typechecking-with-proptypes.md\">Edit this page</a></p></div></article>", "path": "/react/typechecking-with-proptypes", "nav": ["/react/strict-mode", "/react/uncontrolled-components"]}, {"key": "Componentes no controlados", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>En la mayor\u00eda de los casos, te recomendamos usar <a href=\"/react/forms#controlled-components\">Componentes controlados</a> para implementar formularios. En un componente controlado, los datos del formulario son manejados por un componente React. La alternativa son los componentes no controlados, donde los datos del formulario son manejados por el propio DOM.</p>\n<p>Para escribir un componente no controlado, en lugar de escribir un controlador de eventos para cada actualizaci\u00f3n de estado, puedes <a href=\"/react/refs-and-the-dom\">usar una referencia</a> para que obtengas los valores del formulario desde el DOM.</p>\n<p>Por ejemplo, este c\u00f3digo acepta un solo nombre en un componente no controlado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A name was submitted: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Name:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a class=\"external-link\" href=\"https://codepen.io/gaearon/pen/WooRWa?editors=0010\"><strong>Pru\u00e9balo en CodePen</strong></a></p>\n<p>Ya que un componente es la fuente de la verdad en el DOM, a veces es m\u00e1s f\u00e1cil integrar el c\u00f3digo React y el c\u00f3digo no React cuando usas componentes no controlados. Tambi\u00e9n puede haber menos c\u00f3digo si optas por una soluci\u00f3n r\u00e1pida y sin muchos miramientos. De lo contrario, deber\u00edas por lo general utilizar componentes controlados.</p>\n<p>Si a\u00fan no tienes claro qu\u00e9 tipo de componente debes usar para una situaci\u00f3n en particular, puedes encontrar <a class=\"external-link\" href=\"https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/\">este art\u00edculo sobre entradas controladas y no controladas</a> que puede ser \u00fatil.</p>\n<h3 id=\"default-values\"><a class=\"anchor\" href=\"/react/uncontrolled-components#default-values\"></a>Valores predeterminados </h3>\n<p>En el ciclo de vida de renderizado de React, el atributo <code class=\"language-javascript\">value</code> en los elementos de formulario reemplazar\u00e1 el valor en el DOM. Con un componente no controlado, a menudo lo que quieres es que React especifique el valor inicial, pero no controlar las actualizaciones posteriores. Para manejar este caso, puedes especificar un atributo <code class=\"language-javascript\">defaultValue</code> en lugar de <code class=\"language-javascript\">value</code>. Cambiar el valor del atributo <code class=\"language-javascript\">defaultValue</code> despu\u00e9s de que un componente ha sido montado no causar\u00e1 ninguna actualizaci\u00f3n del valor en el DOM.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Name:</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token attr-name\">defaultValue</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Bob<span class=\"token punctuation\">\"</span></span></span>          <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Del mismo modo, <code class=\"language-javascript\">&lt;input type=\"checkbox\"&gt;</code> e <code class=\"language-javascript\">&lt;input type=\"radio\"&gt;</code> admiten <code class=\"language-javascript\">defaultChecked</code>, y <code class=\"language-javascript\">&lt;select&gt;</code> y <code class=\"language-javascript\">&lt;textarea&gt;</code> admiten <code class=\"language-javascript\">defaultValue</code>.</p>\n<h2 id=\"the-file-input-tag\"><a class=\"anchor\" href=\"/react/uncontrolled-components#the-file-input-tag\"></a>La etiqueta de entrada de archivo </h2>\n<p>En HTML, un <code class=\"language-javascript\">&lt;input type=\"file\"&gt;</code> permite al usuario elegir uno o m\u00e1s archivos del almacenamiento en sus dispositivos para cargarlos a un servidor o manipularlos mediante JavaScript a trav\u00e9s de la <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/API/File/Using_files_from_web_applications\">API de archivos</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-html\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>En React, un <code class=\"language-javascript\">&lt;input type=\"file\" /&gt;</code> siempre es un componente no controlado porque su valor solo puede ser establecido por un usuario, y no mediante programaci\u00f3n.</p>\n<p>Debes utilizar la API File para interactuar con ellos. El siguiente ejemplo muestra c\u00f3mo crear un <a href=\"/react/refs-and-the-dom\">referencia al nodo DOM</a> para acceder a los archivos en un controlador de env\u00edo:\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileInput <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Selected file - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileInput<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Upload file:</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileInput<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Submit</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FileInput</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p><a class=\"external-link\" href=\"https://es.reactjs.org//redirect-to-codepen/uncontrolled-components/input-type-file\"><b>Pru\u00e9balo en CodePen</b></a></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/uncontrolled-components.md\">Edit this page</a></p></div></article>", "path": "/react/uncontrolled-components", "nav": ["/react/typechecking-with-proptypes", "/react/web-components"]}, {"key": "Web Components", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React y <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/Web_Components\">Web Components</a> est\u00e1n construidos para resolver diferentes problemas. Los Web Components proporciona una fuerte encapsulaci\u00f3n para componentes reutilizables, mientras que React proporciona una biblioteca declarativa que mantiene el DOM sincronizado con tus datos. Los dos objetivos se complementan. Como desarrollador, eres libre de usar React en tus Web Components, utilizar Web Components en React, o ambos.</p>\n<p>La mayor\u00eda de las personas que usan React no utilizan Web Components, pero es posible que desees hacerlo, especialmente si est\u00e1s utilizando componentes de interfaz de usuario de terceros que se escriben utilizando Web Components.</p>\n<h2 id=\"using-web-components-in-react\"><a class=\"anchor\" href=\"/react/web-components#using-web-components-in-react\"></a>Usando Web Components en React </h2>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloMessage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-search</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-search</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Los Web Components a menudo exponen una API imperativa. Por ejemplo, un Web Component <code class=\"language-javascript\">video</code> podr\u00eda exponer las funciones <code class=\"language-javascript\">play()</code> y <code class=\"language-javascript\">pause()</code>. Para acceder a un API imperativa de un Web Component, necesitar\u00e1s utilizar una referencia para interactuar con el DOM directamente. Si est\u00e1s utilizando Web Components de terceros, lo mejor ser\u00eda escribir un componente React que sirva como un contenedor para tu Web Component`.</p>\n<p>Los eventos emitidos por un Web Component pueden no distribuirse correctamente a trav\u00e9s de un \u00e1rbol de renderizado React.\nDeber\u00e1s agregar manualmente los controladores de eventos para manejarlos dentro de tus componentes React.</p>\n</div>\n<p>Una cosa que puede confundirte, es que los Web Components usan <strong><em>\u201cclass\u201d</em></strong> en vez de <strong><em>\u201cclassName\u201d</em></strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">BrickFlipbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>brick-flipbox</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">front</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">back</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>brick-flipbox</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"using-react-in-your-web-components\"><a class=\"anchor\" href=\"/react/web-components#using-react-in-your-web-components\"></a>Usando React en tus Web Components </h2>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">XSearch</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mountPoint <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mountPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.google.com/search?q='</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>mountPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x-search'</span><span class=\"token punctuation\">,</span> XSearch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Este c\u00f3digo <strong>NO</strong> funcionar\u00e1 si transformas clases con Babel. Ver <a class=\"external-link\" href=\"https://github.com/w3c/webcomponents/issues/587\">Este caso</a> para la discusi\u00f3n.\nIncluye el <a class=\"external-link\" href=\"https://github.com/webcomponents/polyfills/tree/master/packages/webcomponentsjs#custom-elements-es5-adapterjs\">custom-elements-es5-adapter</a> antes de cargar tus Web Components para que puedas solucionar este problema.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/web-components.md\">Edit this page</a></p></div></article>", "path": "/react/web-components", "nav": ["/react/uncontrolled-components", "/react/react-api"]}]}, {"key": "Referencia de la API", "values": [{"key": "React", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><code class=\"language-javascript\">React</code> es el punto de entrada a la biblioteca de React. Si se carga React desde una etiqueta <code class=\"language-javascript\">&lt;script&gt;</code>, estas API de alto nivel estar\u00e1n disponibles en el <code class=\"language-javascript\">React</code> global. Si se usa ES6 con npm se puede escribir <code class=\"language-javascript\">import React from 'react'</code>. Si se usa ES5 con npm, se puede escribir <code class=\"language-javascript\">var React = require('react')</code>.</p>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-api#overview\"></a>Resumen </h2>\n<h3 id=\"components\"><a class=\"anchor\" href=\"/react/react-api#components\"></a>Componentes </h3>\n<p>Los componentes de React permiten dividir la UI en piezas independientes, reusables y pensar acerca de cada pieza aisladamente. Los componentes de React pueden ser definidos creando subclases <code class=\"language-javascript\">React.Component</code> o <code class=\"language-javascript\">React.PureComponent</code>.</p>\n<ul>\n<li><a href=\"/react/react-api#reactcomponent\"><code class=\"language-javascript\">React.Component</code></a></li>\n<li><a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">React.PureComponent</code></a></li>\n</ul>\n<p>Si no se usan las clases ES6, se puede usar el m\u00f3dulo <code class=\"language-javascript\">create-react-class</code>. Para m\u00e1s informaci\u00f3n, ver <a href=\"/react/react-without-es6\">Usar React sin ES6</a>.</p>\n<p>Los componentes de React tambi\u00e9n pueden ser definidos como funciones que se pueden envolver:</p>\n<ul>\n<li><a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a></li>\n</ul>\n<h3 id=\"creating-react-elements\"><a class=\"anchor\" href=\"/react/react-api#creating-react-elements\"></a>Crear elementos de React </h3>\n<p>Se recomienda <a href=\"/react/introducing-jsx\">usar JSX</a> para describir c\u00f3mo debe verse la UI. Cada elemento de JSX es solo un az\u00facar sint\u00e1ctico para llamar <a href=\"/react/react-api#createelement\"><code class=\"language-javascript\">React.createElement()</code></a>. Normalmente no se recurrir\u00e1 a los siguientes m\u00e9todos directamente si se est\u00e1 usando JSX.</p>\n<ul>\n<li><a href=\"/react/react-api#createelement\"><code class=\"language-javascript\">createElement()</code></a></li>\n<li><a href=\"/react/react-api#createfactory\"><code class=\"language-javascript\">createFactory()</code></a></li>\n</ul>\n<p>Para m\u00e1s informaci\u00f3n, ver <a href=\"/react/react-without-jsx\">Usar React sin JSX</a>.</p>\n<h3 id=\"transforming-elements\"><a class=\"anchor\" href=\"/react/react-api#transforming-elements\"></a>Transformar elementos </h3>\n<p><code class=\"language-javascript\">React</code> proporciona varias API para manipular elementos:</p>\n<ul>\n<li><a href=\"/react/react-api#cloneelement\"><code class=\"language-javascript\">cloneElement()</code></a></li>\n<li><a href=\"/react/react-api#isvalidelement\"><code class=\"language-javascript\">isValidElement()</code></a></li>\n<li><a href=\"/react/react-api#reactchildren\"><code class=\"language-javascript\">React.Children</code></a></li>\n</ul>\n<h3 id=\"fragments\"><a class=\"anchor\" href=\"/react/react-api#fragments\"></a>Fragmentos </h3>\n<p><code class=\"language-javascript\">React</code> tambi\u00e9n proporciona un componente para renderizar m\u00faltiples elementos sin un contenedor.</p>\n<ul>\n<li><a href=\"/react/react-api#reactfragment\"><code class=\"language-javascript\">React.Fragment</code></a></li>\n</ul>\n<h3 id=\"refs\"><a class=\"anchor\" href=\"/react/react-api#refs\"></a>Refs </h3>\n<ul>\n<li><a href=\"/react/react-api#reactcreateref\"><code class=\"language-javascript\">React.createRef</code></a></li>\n<li><a href=\"/react/react-api#reactforwardref\"><code class=\"language-javascript\">React.forwardRef</code></a></li>\n</ul>\n<h3 id=\"suspense\"><a class=\"anchor\" href=\"/react/react-api#suspense\"></a>Suspense </h3>\n<p>Suspense permite que los componentes \u201cesperen\u201d algo antes de renderizar. Hoy Suspense solo mantiene un caso de uso: <a href=\"/react/code-splitting#reactlazy\">cargar componentes activamente con <code class=\"language-javascript\">React.lazy</code></a>. En el futuro mantendr\u00e1 otros casos de uso como captura de datos.</p>\n<ul>\n<li><a href=\"/react/react-api#reactlazy\"><code class=\"language-javascript\">React.lazy</code></a></li>\n<li><a href=\"/react/react-api#reactsuspense\"><code class=\"language-javascript\">React.Suspense</code></a></li>\n</ul>\n<h3 id=\"transitions\"><a class=\"anchor\" href=\"/react/react-api#transitions\"></a>Transitions </h3>\n<p><em>Transitions</em> are a new concurrent feature introduced in React 18. They allow you to mark updates as transitions, which tells React that they can be interrupted and avoid going back to Suspense fallbacks for already visible content.</p>\n<ul>\n<li><a href=\"/react/react-api#starttransition\"><code class=\"language-javascript\">React.startTransition</code></a></li>\n<li><a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">React.useTransition</code></a></li>\n</ul>\n<h3 id=\"hooks\"><a class=\"anchor\" href=\"/react/react-api#hooks\"></a>Hooks </h3>\n<p>Los <em>Hooks</em> son una nueva adici\u00f3n en React 16.8. Permiten usar el estado y otras caracter\u00edsticas de React sin escribir una clase. Los Hooks tienen una <a href=\"/react/hooks-intro\">secci\u00f3n de documentos dedicados</a> y una referencia API separada:</p>\n<ul>\n<li>\n<p><a href=\"/react/hooks-reference#basic-hooks\">Hooks B\u00e1sicos</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a></li>\n<li><a href=\"/react/hooks-reference#useeffect\"><code class=\"language-javascript\">useEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-reference#additional-hooks\">Hooks Adicionales</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a></li>\n<li><a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a></li>\n<li><a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a></li>\n<li><a href=\"/react/hooks-reference#useref\"><code class=\"language-javascript\">useRef</code></a></li>\n<li><a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a></li>\n<li><a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usedebugvalue\"><code class=\"language-javascript\">useDebugValue</code></a></li>\n<li><a href=\"/react/hooks-reference#usedeferredvalue\"><code class=\"language-javascript\">useDeferredValue</code></a></li>\n<li><a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">useTransition</code></a></li>\n<li><a href=\"/react/hooks-reference#useid\"><code class=\"language-javascript\">useId</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-reference#library-hooks\">Library Hooks</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usesyncexternalstore\"><code class=\"language-javascript\">useSyncExternalStore</code></a></li>\n<li><a href=\"/react/hooks-reference#useinsertioneffect\"><code class=\"language-javascript\">useInsertionEffect</code></a></li>\n</ul>\n</li>\n</ul>\n\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-api#reference\"></a>Referencia </h2>\n<h3 id=\"reactcomponent\"><a class=\"anchor\" href=\"/react/react-api#reactcomponent\"></a><code class=\"language-javascript\">React.Component</code> </h3>\n<p><code class=\"language-javascript\">React.Component</code> es la clase base para los componentes de React cuando estos son definidos usando <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Classes\">clases ES6</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Consulta <a href=\"/react/react-component\">Referencia API React.Component</a> para ver una lista de m\u00e9todos y propiedades relacionadas a la clase base <code class=\"language-javascript\">React.Component</code>.</p>\n\n<h3 id=\"reactpurecomponent\"><a class=\"anchor\" href=\"/react/react-api#reactpurecomponent\"></a><code class=\"language-javascript\">React.PureComponent</code> </h3>\n<p><code class=\"language-javascript\">React.PureComponent</code> es similar a <a href=\"/react/react-api#reactcomponent\"><code class=\"language-javascript\">React.Component</code></a>. La diferencia entre ellos es que <a href=\"/react/react-api#reactcomponent\"><code class=\"language-javascript\">React.Component</code></a> no implementa <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a>, pero <code class=\"language-javascript\">React.PureComponent</code> lo implementa con un prop superficial y una comparaci\u00f3n del estado. </p>\n<p>Si la funci\u00f3n <code class=\"language-javascript\">render()</code> del componente de React renderiza el mismo resultado dados los mismos props y estado, se puede usar <code class=\"language-javascript\">React.PureComponent</code> para una mejora en el desempe\u00f1o en algunos casos.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">shouldComponentUpdate()</code> del <code class=\"language-javascript\">React.PureComponent</code> solo compara superficialmente los objetos. Si estos contienen estructuras de datos complejos pueden producir falsos negativos para diferencias m\u00e1s profundas. Solo se extiende <code class=\"language-javascript\">PureComponent</code> cuando se espera tener los props y el estado simples o usar <a href=\"/react/react-component#forceupdate\"><code class=\"language-javascript\">forceUpdate()</code></a> cuando se sabe que las estructuras de datos profundos han cambiado. O considera usar <a class=\"external-link\" href=\"https://immutable-js.com/\">objetos inmutables</a> para facilitar comparaciones r\u00e1pidas de los datos anidados.</p>\n<p>Adem\u00e1s, <code class=\"language-javascript\">shouldComponentUpdate()</code> del <code class=\"language-javascript\">React.PureComponent</code> omite las actualizaciones de los props para todo el componente del sub\u00e1rbol. Aseg\u00farate que todos los componentes hijos tambi\u00e9n sean \u201cpuros\u201d.</p>\n</div>\n\n<h3 id=\"reactmemo\"><a class=\"anchor\" href=\"/react/react-api#reactmemo\"></a><code class=\"language-javascript\">React.memo</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* renderiza usando props */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">React.memo</code> es un <a href=\"/react/higher-order-components\">componente de orden superior</a>.</p>\n<p>Si el componente renderiza el mismo resultado dadas las mismas props, se puede envolver en una llamada a <code class=\"language-javascript\">React.memo</code> para una mejora en el desempe\u00f1o en algunos casos memoizando el resultado. Esto significa que React omitir\u00e1 renderizar el componente y reusar\u00e1 el \u00faltimo resultado renderizado.</p>\n<p><code class=\"language-javascript\">React.memo</code> solamente verifica los cambios en las props. Si tu componente de funci\u00f3n envuelto en <code class=\"language-javascript\">React.memo</code> tiene un Hook <a href=\"/react/hooks-state\"><code class=\"language-javascript\">useState</code></a>, <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> o <a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a> en su implementaci\u00f3n, continuar\u00e1 volvi\u00e9ndose a renderizar cuando el estado o el contexto cambien.</p>\n<p>Por defecto solo comparar\u00e1 superficialmente objetos complejos en el objeto de props. Si se desea controlar la comparaci\u00f3n, se puede proporcionar tambi\u00e9n una funci\u00f3n de comparaci\u00f3n personalizada como el segundo argumento.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* renderiza usando props */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">areEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*\n  retorna true si al pasar los nextProps a renderizar retorna\n  el mismo resultado que al pasar los prevProps a renderizar,\n  de otro modo retorna false\n  */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">,</span> areEqual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Este m\u00e9todo solamente existe como una <strong><a href=\"/react/optimizing-performance\">optimizaci\u00f3n del desempe\u00f1o</a>.</strong> No dependas de ello para \u201cevitar\u201d un renderizado, ya que puede conducir a errores.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>A diferencia del m\u00e9todo <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> en los componentes de clases, la funci\u00f3n <code class=\"language-javascript\">areEqual</code> retorna <code class=\"language-javascript\">true</code> si los props son iguales y <code class=\"language-javascript\">false</code> si los props no son iguales. Esto es lo opuesto a <code class=\"language-javascript\">shouldComponentUpdate</code>.</p>\n</div>\n\n<h3 id=\"createelement\"><a class=\"anchor\" href=\"/react/react-api#createelement\"></a><code class=\"language-javascript\">createElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  type<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>children<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Crea y retorna un nuevo <a href=\"/react/rendering-elements\">elemento React</a> del tipo dado. El tipo del argumento puede ser ya sea un string de nombre de etiqueta (tales como <code class=\"language-javascript\">'div'</code> o <code class=\"language-javascript\">'span'</code>), un tipo de <a href=\"/react/components-and-props\">componente React</a> (una clase o una funci\u00f3n), o un tipo de <a href=\"/react/react-api#reactfragment\">fragmento React</a> .</p>\n<p>El c\u00f3digo escrito con <a href=\"/react/introducing-jsx\">JSX</a> ser\u00e1 convertido para usar <code class=\"language-javascript\">React.createElement()</code>. Normalmente no se invocar\u00e1 <code class=\"language-javascript\">React.createElement()</code> directamente si se est\u00e1 usando JSX. Para aprender m\u00e1s, ver <a href=\"/react/react-without-jsx\">React Sin JSX</a>.</p>\n\n<h3 id=\"cloneelement\"><a class=\"anchor\" href=\"/react/react-api#cloneelement\"></a><code class=\"language-javascript\">cloneElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">React.cloneElement(\n  element,\n  [config],\n  [...children]\n)</code></pre></div>\n<p>Clona y retorna un elemento React usando <code class=\"language-javascript\">element</code> como punto de partida. <code class=\"language-javascript\">config</code> debe contener todas las nuevas props, <code class=\"language-javascript\">key</code>, o <code class=\"language-javascript\">ref</code>. El elemento resultante tendr\u00e1 las props del elemento original con las nuevas props combinadas superficialmente. Los nuevos hijos reemplazar\u00e1n los hijos existentes. <code class=\"language-javascript\">key</code> y <code class=\"language-javascript\">ref</code> del elemento original ser\u00e1n preservadas si <code class=\"language-javascript\">key</code> y <code class=\"language-javascript\">ref</code> no est\u00e1n presentes en la configuraci\u00f3n.</p>\n<p><code class=\"language-javascript\">React.cloneElement()</code> es casi equivalente a:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element.type</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>element.type</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Sin embargo, tambi\u00e9n preserva las <code class=\"language-javascript\">refs</code>. Esto significa que, si se obtiene un hijo con una <code class=\"language-javascript\">ref</code> en \u00e9l, no la robar\u00e1 accidentalmente de su ancestro. Se obtendr\u00e1 la misma <code class=\"language-javascript\">ref</code> adjunta al nuevo elemento. Las nuevas <code class=\"language-javascript\">ref</code> o <code class=\"language-javascript\">key</code> reemplazar\u00e1n a las antiguas si estuviesen presentes.</p>\n<p>Esta API fue introducida como un reemplazo al obsoleto <code class=\"language-javascript\">React.addons.cloneWithProps()</code>.</p>\n\n<h3 id=\"createfactory\"><a class=\"anchor\" href=\"/react/react-api#createfactory\"></a><code class=\"language-javascript\">createFactory()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createFactory</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna una funci\u00f3n que produce elementos React de un tipo dado. Como <a href=\"/react/react-api#createElement\"><code class=\"language-javascript\">React.createElement()</code></a>, el tipo del argumento puede ser un string de nombre de etiqueta (como <code class=\"language-javascript\">'div'</code> o <code class=\"language-javascript\">'span'</code>), un tipo de <a href=\"/react/components-and-props\">componente React</a> (una clase o una funci\u00f3n) o un <a href=\"/react/react-api#reactfragment\">fragmento React</a>.</p>\n<p>Este auxiliar es considerado antiguo y en su lugar fomentamos el uso de JSX o de <code class=\"language-javascript\">React.createElement()</code>.</p>\n<p>Normalmente no se invocar\u00e1 <code class=\"language-javascript\">React.createFactory()</code> directamente si se est\u00e1 usando JSX. Para aprender m\u00e1s, ver <a href=\"/react/react-without-jsx\">React sin JSX</a>.</p>\n\n<h3 id=\"isvalidelement\"><a class=\"anchor\" href=\"/react/react-api#isvalidelement\"></a><code class=\"language-javascript\">isValidElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Verifica que el objeto sea un elemento React. Retorna <code class=\"language-javascript\">true</code> o <code class=\"language-javascript\">false</code>.</p>\n\n<h3 id=\"reactchildren\"><a class=\"anchor\" href=\"/react/react-api#reactchildren\"></a><code class=\"language-javascript\">React.Children</code> </h3>\n<p><code class=\"language-javascript\">React.Children</code> proporciona utilidades para lidiar con la estructura de datos opaca de <code class=\"language-javascript\">this.props.children</code>.</p>\n<h4 id=\"reactchildrenmap\"><a class=\"anchor\" href=\"/react/react-api#reactchildrenmap\"></a><code class=\"language-javascript\">React.Children.map</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Invoca una funci\u00f3n en cada hijo inmediato dentro de <code class=\"language-javascript\">children</code> con <code class=\"language-javascript\">this</code> establecido a <code class=\"language-javascript\">thisArg</code>. Si <code class=\"language-javascript\">children</code> es un array, ser\u00e1 recorrido y la funci\u00f3n ser\u00e1 llamada para cada hijo en el array. Si children es <code class=\"language-javascript\">null</code> o <code class=\"language-javascript\">undefined</code>, este m\u00e9todo retornar\u00e1 <code class=\"language-javascript\">null</code> o <code class=\"language-javascript\">undefined</code> en vez de un array.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Si <code class=\"language-javascript\">children</code> es un <code class=\"language-javascript\">Fragment</code> ser\u00e1 tratado como un hijo \u00fanico y no ser\u00e1 recorrido.</p>\n</div>\n<h4 id=\"reactchildrenforeach\"><a class=\"anchor\" href=\"/react/react-api#reactchildrenforeach\"></a><code class=\"language-javascript\">React.Children.forEach</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Es como <a href=\"/react/react-api#reactchildrenmap\"><code class=\"language-javascript\">React.Children.map()</code></a> pero no retorna un array.</p>\n<h4 id=\"reactchildrencount\"><a class=\"anchor\" href=\"/react/react-api#reactchildrencount\"></a><code class=\"language-javascript\">React.Children.count</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna el n\u00famero total de componentes en <code class=\"language-javascript\">children</code>, igual al n\u00famero de veces que un callback pasado a <code class=\"language-javascript\">map</code> o <code class=\"language-javascript\">forEach</code> ser\u00eda invocado.</p>\n<h4 id=\"reactchildrenonly\"><a class=\"anchor\" href=\"/react/react-api#reactchildrenonly\"></a><code class=\"language-javascript\">React.Children.only</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Verifica que <code class=\"language-javascript\">children</code> solo tenga un hijo (un elemento React) y lo retorna. De otro modo este m\u00e9todo lanza un error.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">React.Children.only()</code> no acepta el valor retornado de <a href=\"/react/react-api#reactchildrenmap\"><code class=\"language-javascript\">React.Children.map()</code></a> porque es un array en lugar de un elemento React.</p>\n</div>\n<h4 id=\"reactchildrentoarray\"><a class=\"anchor\" href=\"/react/react-api#reactchildrentoarray\"></a><code class=\"language-javascript\">React.Children.toArray</code> </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna la estructura de datos opaca de <code class=\"language-javascript\">children</code> como un array plano con keys asignadas a cada hijo. Es \u00fatil si se desea manipular colecciones de hijos en los m\u00e9todos de renderizaci\u00f3n, particularmente si se desea reordenar o segmentar <code class=\"language-javascript\">this.props.children</code> antes de pasarlo.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">React.Children.toArray()</code> cambia las keys para preservar las sem\u00e1nticas de los array anidados cuando se aplanan listas de hijos. Esto quiere decir que <code class=\"language-javascript\">toArray</code> antepone cada key en el array retornado de modo que cada elemento de key est\u00e9 dentro del alcance del array de entrada que lo contiene.</p>\n</div>\n\n<h3 id=\"reactfragment\"><a class=\"anchor\" href=\"/react/react-api#reactfragment\"></a><code class=\"language-javascript\">React.Fragment</code> </h3>\n<p>El componente <code class=\"language-javascript\">React.Fragment</code> permite retornar elementos m\u00faltiples en un m\u00e9todo de <code class=\"language-javascript\">render()</code> sin crear un elemento DOM adicional:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Some text.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">A heading</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tambi\u00e9n se puede usar con la sintaxis abreviada <code class=\"language-javascript\">&lt;&gt;&lt;/&gt;</code>. Para m\u00e1s informaci\u00f3n, ver <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2017/11/28/react-v16.2.0-fragment-support.html\">React v16.2.0: Soporte mejorado para fragmentos</a>.</p>\n<h3 id=\"reactcreateref\"><a class=\"anchor\" href=\"/react/react-api#reactcreateref\"></a><code class=\"language-javascript\">React.createRef</code> </h3>\n<p><code class=\"language-javascript\">React.createRef</code> crea un <a href=\"/react/refs-and-the-dom\">ref</a> que puede ser adjunto a los elementos React por medio del atributo ref.\n<div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<h3 id=\"reactforwardref\"><a class=\"anchor\" href=\"/react/react-api#reactforwardref\"></a><code class=\"language-javascript\">React.forwardRef</code> </h3>\n<p><code class=\"language-javascript\">React.forwardRef</code> crea un componente React que env\u00eda el atributo <a href=\"/react/refs-and-the-dom\">ref</a> que recibe a otro componente m\u00e1s abajo en el \u00e1rbol. Esta t\u00e9cnica no es muy com\u00fan, pero es particularmente \u00fatil en dos escenarios:</p>\n<ul>\n<li><a href=\"/react/forwarding-refs#forwarding-refs-to-dom-components\">Enviar refs a componentes DOM</a></li>\n<li><a href=\"/react/forwarding-refs#forwarding-refs-in-higher-order-components\">Enviar refs en componentes de orden superior</a></li>\n</ul>\n<p><code class=\"language-javascript\">React.forwardRef</code> acepta una funci\u00f3n de renderizado como un argumento. React llamar\u00e1 esta funci\u00f3n con <code class=\"language-javascript\">props</code> y <code class=\"language-javascript\">ref</code> como dos argumentos. Esta funci\u00f3n debe retornar un nodo React.</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> FancyButton <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Ahora puedes obtener un ref directamente al bot\u00f3n del DOM</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyButton</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click me!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">FancyButton</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre>\n</div></p>\n<p>En el ejemplo anterior, React pasa un <code class=\"language-javascript\">ref</code> dado a un elemento <code class=\"language-javascript\">&lt;FancyButton ref={ref}&gt;</code> como un segundo argumento a la funci\u00f3n de renderizado dentro de la llamada <code class=\"language-javascript\">React.forwardRef</code>. Esta funci\u00f3n de renderizado pasa el <code class=\"language-javascript\">ref</code> al elemento <code class=\"language-javascript\">&lt;button ref={ref}&gt;</code>.</p>\n<p>Como resultado, despu\u00e9s que React adjunte el ref, <code class=\"language-javascript\">ref.current</code> apuntar\u00e1 directamente a la instancia del elemento DOM <code class=\"language-javascript\">&lt;button&gt;</code>.</p>\n<p>Para m\u00e1s informaci\u00f3n, ver <a href=\"/react/forwarding-refs\">reenv\u00edo de refs</a>.</p>\n<h3 id=\"reactlazy\"><a class=\"anchor\" href=\"/react/react-api#reactlazy\"></a><code class=\"language-javascript\">React.lazy</code> </h3>\n<p><code class=\"language-javascript\">React.lazy()</code> permite definir un componente que es cargado din\u00e1micamente. Esto ayuda a reducir el tama\u00f1o del bundle para demorar los componentes de carga que no son usados durante la renderizaci\u00f3n inicial.</p>\n<p>Puedes aprender c\u00f3mo usarlo desde nuestra <a href=\"/react/code-splitting#reactlazy\">documentaci\u00f3n de divisi\u00f3n de c\u00f3digo</a>. Tambi\u00e9n puedes consultar <a class=\"external-link\" href=\"https://medium.com/@pomber/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d\">este art\u00edculo</a> que explica c\u00f3mo usarlo con m\u00e1s detalle.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Este componente est\u00e1 cargado din\u00e1micamente</span>\n<span class=\"token keyword\">const</span> SomeComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./SomeComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ten en cuenta que renderizar componentes <code class=\"language-javascript\">lazy</code> requiere que haya un componente <code class=\"language-javascript\">&lt;React.Suspense&gt;</code> m\u00e1s alto en el \u00e1rbol de renderizaci\u00f3n. As\u00ed es como se especifica un indicador de carga.</p>\n<h3 id=\"reactsuspense\"><a class=\"anchor\" href=\"/react/react-api#reactsuspense\"></a><code class=\"language-javascript\">React.Suspense</code> </h3>\n<p><code class=\"language-javascript\">React.Suspense</code> permite especificar el indicador de carga en caso de que algunos componentes en el \u00e1rbol m\u00e1s abajo de \u00e9l todav\u00eda no est\u00e9n listos para renderizarse. En el futuro planeamos permitir a <code class=\"language-javascript\">Suspense</code> manejar m\u00e1s escenarios como la carga de datos. Puedes leer m\u00e1s sobre este tema en <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/11/27/react-16-roadmap.html\">nuestra hoja de ruta</a>.</p>\n<p>Hoy en d\u00eda, los componentes de carga diferida son el <strong>\u00fanico</strong> caso compatible con <code class=\"language-javascript\">&lt;React.Suspense&gt;</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Este componente est\u00e1 cargado din\u00e1micamente</span>\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// Muestra &lt;Spinner&gt; hasta que OtherComponent cargue</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Spinner</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OtherComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Suspense</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto est\u00e1 documentado en nuestra <a href=\"/react/code-splitting#reactlazy\">gu\u00eda de divisi\u00f3n de c\u00f3digo</a>. Ten en cuenta que los componentes <code class=\"language-javascript\">lazy</code> pueden estar muy profundo en el \u00e1rbol <code class=\"language-javascript\">Suspense</code> \u2014 no tiene que envolverlos a todos. La mejor pr\u00e1ctica es colocar <code class=\"language-javascript\">&lt;Suspense&gt;</code> donde se desee ver un indicador de carga y usar <code class=\"language-javascript\">lazy()</code> para hacer divisi\u00f3n de c\u00f3digo.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>For content that is already shown to the user, switching back to a loading indicator can be disorienting. It is sometimes better to show the \u201cold\u201d UI while the new UI is being prepared. To do this, you can use the new transition APIs <a href=\"/react/react-api#starttransition\"><code class=\"language-javascript\">startTransition</code></a> and <a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">useTransition</code></a> to mark updates as transitions and avoid unexpected fallbacks.</p>\n</div>\n<h4 id=\"reactsuspense-in-server-side-rendering\"><a class=\"anchor\" href=\"/react/react-api#reactsuspense-in-server-side-rendering\"></a><code class=\"language-javascript\">React.Suspense</code> in Server Side Rendering </h4>\n<p>During server side rendering Suspense Boundaries allow you to flush your application in smaller chunks by suspending.\nWhen a component suspends we schedule a low priority task to render the closest Suspense boundary\u2019s fallback. If the component unsuspends before we flush the fallback then we send down the actual content and throw away the fallback.</p>\n<h4 id=\"reactsuspense-during-hydration\"><a class=\"anchor\" href=\"/react/react-api#reactsuspense-during-hydration\"></a><code class=\"language-javascript\">React.Suspense</code> during hydration </h4>\n<p>Suspense boundaries depend on their parent boundaries being hydrated before they can hydrate, but they can hydrate independently from sibling boundaries. Events on a boundary before it is hydrated will cause the boundary to hydrate at a higher priority than neighboring boundaries. <a class=\"external-link\" href=\"https://github.com/reactwg/react-18/discussions/130\">Read more</a></p>\n<h3 id=\"starttransition\"><a class=\"anchor\" href=\"/react/react-api#starttransition\"></a><code class=\"language-javascript\">React.startTransition</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">React.startTransition</code> lets you mark updates inside the provided callback as transitions. This method is designed to be used when <a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">React.useTransition</code></a> is not available.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Updates in a transition yield to more urgent updates such as clicks.</p>\n<p>Updates in a transition will not show a fallback for re-suspended content, allowing the user to continue interacting while rendering the update.</p>\n<p><code class=\"language-javascript\">React.startTransition</code> does not provide an <code class=\"language-javascript\">isPending</code> flag. To track the pending status of a transition see <a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">React.useTransition</code></a>.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-react.md\">Edit this page</a></p></div></article>", "path": "/react/react-api", "nav": ["/react/web-components", "/react/react-component"]}, {"key": "React.Component", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Esta p\u00e1gina contiene una referencia detallada de la API de React sobre los componentes definidos a trav\u00e9s de clases. Asumimos que estas familiarizado con los conceptos fundamentales de React, como <a href=\"/react/components-and-props\">Componentes y props</a>, as\u00ed tambi\u00e9n <a href=\"/react/state-and-lifecycle\">Estado y ciclo de vida</a>. Si no, l\u00e9elas primero.</p>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-component#overview\"></a>Resumen </h2>\n<p>React te permite definir componentes como clases o funciones. Los componentes definidos como clases actualmente proporcionan una serie de caracter\u00edsticas extra que explicamos en esta p\u00e1gina. Para definir una clase de componente React, necesitas extender <code class=\"language-javascript\">React.Component</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El \u00fanico m\u00e9todo que <em>debes</em> definir en una subclase de <code class=\"language-javascript\">React.Component</code> es <a href=\"/react/react-component#render\"><code class=\"language-javascript\">render()</code></a>. Todos los dem\u00e1s m\u00e9todos descritos en esta p\u00e1gina son opcionales.</p>\n<p><strong>Recomendamos encarecidamente no crear tus propias clases de componentes base.</strong> En los componentes de React, <a href=\"/react/composition-vs-inheritance\">la reutilizaci\u00f3n de c\u00f3digo se consigue principalmente a trav\u00e9s de la composici\u00f3n en lugar de la herencia</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>React no te obliga a usar la sintaxis de clases ES6. Si prefieres evitarlo, puede utilizar el m\u00f3dulo <code class=\"language-javascript\">create-react-class</code> o una abstracci\u00f3n personalizada similar en su lugar. \u00c9chale un vistazo a <a href=\"/react/react-without-es6\">Usando React sin ES6</a> para aprender mas.</p>\n</div>\n<h3 id=\"the-component-lifecycle\"><a class=\"anchor\" href=\"/react/react-component#the-component-lifecycle\"></a>El ciclo de vida del componente </h3>\n<p>Cada componente tiene varios \u201cm\u00e9todos de ciclo de vida\u201d que puedes sobrescribir para ejecutar c\u00f3digo en momentos particulares del proceso. <strong>Puedes usar <a class=\"external-link\" href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">este diagrama de ciclo de vida</a> como una hoja de referencia.</strong> En la lista de abajo, los m\u00e9todos de ciclo de vida com\u00fanmente usados est\u00e1n marcados en <strong>negrita</strong>. El resto de ellos existen para casos de uso relativamente raros.</p>\n<h4 id=\"mounting\"><a class=\"anchor\" href=\"/react/react-component#mounting\"></a>Montaje </h4>\n<p>Estos m\u00e9todos se llaman cuando se crea una instancia de un componente y se inserta en el DOM:</p>\n<ul>\n<li><a href=\"/react/react-component#constructor\"><strong><code class=\"language-javascript\">constructor()</code></strong></a></li>\n<li><a href=\"/react/react-component#static-getderivedstatefromprops\"><code class=\"language-javascript\">static getDerivedStateFromProps()</code></a></li>\n<li><a href=\"/react/react-component#render\"><strong><code class=\"language-javascript\">render()</code></strong></a></li>\n<li><a href=\"/react/react-component#componentdidmount\"><strong><code class=\"language-javascript\">componentDidMount()</code></strong></a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Este m\u00e9todo se considera obsoleto y deber\u00edas <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evitarlo</a> en c\u00f3digo nuevo:</p>\n<ul>\n<li><a href=\"/react/react-component#unsafe_componentwillmount\"><code class=\"language-javascript\">UNSAFE_componentWillMount()</code></a></li>\n</ul>\n</div>\n<h4 id=\"updating\"><a class=\"anchor\" href=\"/react/react-component#updating\"></a>Actualizaci\u00f3n </h4>\n<p>Una actualizaci\u00f3n puede ser causada por cambios en las props o el estado. Estos m\u00e9todos se llaman en el siguiente orden cuando un componente se vuelve a renderizar:</p>\n<ul>\n<li><a href=\"/react/react-component#static-getderivedstatefromprops\"><code class=\"language-javascript\">static getDerivedStateFromProps()</code></a></li>\n<li><a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a></li>\n<li><a href=\"/react/react-component#render\"><strong><code class=\"language-javascript\">render()</code></strong></a></li>\n<li><a href=\"/react/react-component#getsnapshotbeforeupdate\"><code class=\"language-javascript\">getSnapshotBeforeUpdate()</code></a></li>\n<li><a href=\"/react/react-component#componentdidupdate\"><strong><code class=\"language-javascript\">componentDidUpdate()</code></strong></a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Estos m\u00e9todos est\u00e1n considerados <em>legacy</em> (deprecados) y debes <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\">evitarlos</a> en c\u00f3digo nuevo:</p>\n<ul>\n<li><a href=\"/react/react-component#unsafe_componentwillupdate\"><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code></a></li>\n<li><a href=\"/react/react-component#unsafe_componentwillreceiveprops\"><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code></a></li>\n</ul>\n</div>\n<h4 id=\"unmounting\"><a class=\"anchor\" href=\"/react/react-component#unmounting\"></a>Desmontaje </h4>\n<p>Este m\u00e9todo es llamado cuando un componente se elimina del DOM:</p>\n<ul>\n<li><a href=\"/react/react-component#componentwillunmount\"><strong><code class=\"language-javascript\">componentWillUnmount()</code></strong></a></li>\n</ul>\n<h4 id=\"error-handling\"><a class=\"anchor\" href=\"/react/react-component#error-handling\"></a>Manejo de errores </h4>\n<p>Estos m\u00e9todos se invocan cuando hay un error durante la renderizaci\u00f3n, en un m\u00e9todo en el ciclo de vida o en el constructor de cualquier componente hijo.</p>\n<ul>\n<li><a href=\"/react/react-component#static-getderivedstatefromerror\"><code class=\"language-javascript\">static getDerivedStateFromError()</code></a></li>\n<li><a href=\"/react/react-component#componentdidcatch\"><code class=\"language-javascript\">componentDidCatch()</code></a></li>\n</ul>\n<h3 id=\"other-apis\"><a class=\"anchor\" href=\"/react/react-component#other-apis\"></a>Otras APIs </h3>\n<p>Cada componente tambi\u00e9n proporciona algunas otras APIs:</p>\n<ul>\n<li><a href=\"/react/react-component#setstate\"><code class=\"language-javascript\">setState()</code></a></li>\n<li><a href=\"/react/react-component#forceupdate\"><code class=\"language-javascript\">forceUpdate()</code></a></li>\n</ul>\n<h3 id=\"class-properties\"><a class=\"anchor\" href=\"/react/react-component#class-properties\"></a>Propiedades de clase </h3>\n<ul>\n<li><a href=\"/react/react-component#defaultprops\"><code class=\"language-javascript\">defaultProps</code></a></li>\n<li><a href=\"/react/react-component#displayname\"><code class=\"language-javascript\">displayName</code></a></li>\n</ul>\n<h3 id=\"instance-properties\"><a class=\"anchor\" href=\"/react/react-component#instance-properties\"></a>Propiedades de instancia </h3>\n<ul>\n<li><a href=\"/react/react-component#props\"><code class=\"language-javascript\">props</code></a></li>\n<li><a href=\"/react/react-component#state\"><code class=\"language-javascript\">estado</code></a></li>\n</ul>\n\n<h2 id=\"references\"><a class=\"anchor\" href=\"/react/react-component#references\"></a>Referencia </h2>\n<h3 id=\"commonly-used-lifecycle-methods\"><a class=\"anchor\" href=\"/react/react-component#commonly-used-lifecycle-methods\"></a>Funciones del ciclo de vida usadas com\u00fanmente </h3>\n<p>Los m\u00e9todos que ver\u00e1s en esta secci\u00f3n cubren la gran mayor\u00eda de casos de uso que encontrar\u00e1s cuando crees componentes en React. <strong>Para una referencia visual, revisa <a class=\"external-link\" href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">este diagrama de los ciclos de vida</a>.</strong></p>\n<h3 id=\"render\"><a class=\"anchor\" href=\"/react/react-component#render\"></a><code class=\"language-javascript\">render()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El m\u00e9todo <code class=\"language-javascript\">render()</code> es el \u00fanico m\u00e9todo requerido en un componente de clase.</p>\n<p>Cuando se llama, debe examinar a <code class=\"language-javascript\">this.props</code> y <code class=\"language-javascript\">this.state</code> y devolver uno de los siguientes tipos:</p>\n<ul>\n<li><strong>Elementos de React.</strong> normalmente creados a trav\u00e9s de <a href=\"/react/introducing-jsx\">JSX</a>. Por ejemplo, <code class=\"language-javascript\">&lt;div /&gt;</code> y <code class=\"language-javascript\">&lt;MyComponent /&gt;</code> son elementos de React que ense\u00f1an a React a renderizar un nodo DOM, u otro componente definido por el usuario, respectivamente.</li>\n<li><strong>Arrays y fragmentos.</strong> Permiten que puedas devolver m\u00faltiples elementos desde el render. Consulta la documentaci\u00f3n sobre <a href=\"/react/fragments\">fragmentos</a> para m\u00e1s detalles.</li>\n<li><strong>Portales</strong>. Te permiten renderizar hijos en otro sub\u00e1rbol del DOM. Consulta la documentaci\u00f3n sobre <a href=\"/react/portals\">portales</a> para m\u00e1s detalles.</li>\n<li><strong>String y n\u00fameros.</strong> Estos son renderizados como nodos de texto en el DOM.</li>\n<li><strong>Booleanos, <code class=\"language-javascript\">null</code> o <code class=\"language-javascript\">undefined</code></strong>. No renderizan nada. (Principalmente existe para admitir el patr\u00f3n <code class=\"language-javascript\">return test &amp;&amp; &lt;Child /&gt;</code>, donde <code class=\"language-javascript\">test</code> es booleano.)</li>\n</ul>\n<p>La funci\u00f3n <code class=\"language-javascript\">render ()</code> debe ser pura, lo que significa que no modifica el estado del componente, devuelve el mismo resultado cada vez que se invoca y no interact\u00faa directamente con el navegador.</p>\n<p>Si necesitas interactuar con el navegador, realiza tu trabajo en <code class=\"language-javascript\">componentDidMount()</code> o en los dem\u00e1s m\u00e9todos de ciclo de vida. Mantener <code class=\"language-javascript\">render()</code> pure hace que los componentes sean m\u00e1s f\u00e1ciles de considerar.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">render()</code> no ser\u00e1 invocado si <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> devuelve falso.</p>\n</div>\n\n<h3 id=\"constructor\"><a class=\"anchor\" href=\"/react/react-component#constructor\"></a><code class=\"language-javascript\">constructor()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Si no inicializas el estado y no enlazas los m\u00e9todos, no necesitas implementar un constructor para tu componente React.</strong></p>\n<p>El constructor para un componente React es llamado antes de ser montado. Al implementar el constructor para una subclase <code class=\"language-javascript\">React.Component</code>, deber\u00edas llamar a <code class=\"language-javascript\">super(props)</code> antes que cualquier otra instrucci\u00f3n. De otra forma, <code class=\"language-javascript\">this.props</code> no estar\u00e1 definido en el constructor, lo que puede ocasionar a errores.</p>\n<p>Normalmente, los constructores de React s\u00f3lo se utilizan para dos prop\u00f3sitos:</p>\n<ul>\n<li>Para inicializar un estado local asignando un objeto al <code class=\"language-javascript\">this.state</code>.</li>\n<li>Para enlazar <a href=\"/react/handling-events\"> manejadores de eventos </a> a una instancia.</li>\n</ul>\n<p><strong>No debes llamar <code class=\"language-javascript\">setState()</code></strong> en el <code class=\"language-javascript\">constructor()</code>. En su lugar, si su componente necesita usar el estado local, <strong>asigna directamente el estado inicial al <code class=\"language-javascript\">this.state</code></strong> directamente en el constructor:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// No llames this.setState() aqu\u00ed!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El constructor es el \u00fanico lugar donde debes asignar <code class=\"language-javascript\">this.state</code> directamente. En todos los dem\u00e1s m\u00e9todos, debes usar <code class=\"language-javascript\">this.setState()</code> en su lugar.</p>\n<p>Evita introducir cualquier efecto secundario o suscripciones en el constructor. Para estos casos de uso, use <code class=\"language-javascript\">componentDidMount()</code> en su lugar.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><strong>\u00a1Evita copiar las props en el estado! Es un error muy com\u00fan:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// No hagas esto!</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El problema es que es innecesario (puedes usar <code class=\"language-javascript\">this.props.color</code> directamente en su lugar), esto crea errores (actualizaciones a la prop <code class=\"language-javascript\">color</code> no se reflejar\u00e1n en el estado).</p>\n<p><strong>S\u00f3lo utiliza este patr\u00f3n si deseas ignorar intencionalmente las actualizaciones de prop.</strong> En ese caso, tiene sentido renombrar la prop a <code class=\"language-javascript\">initialColor</code> o <code class=\"language-javascript\">defaultColor</code>. Puedes forzar al componente a \u201climpiar\u201d su estado interno <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">cambiando su <code class=\"language-javascript\">key</code></a> cuando sea necesario.</p>\n<p>Lee nuestro <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">post en el blog sobre como evitar estados derivados</a> para aprender qu\u00e9 hacer si crees que necesitas alg\u00fan estado que dependa de las props.</p>\n</div>\n\n<h3 id=\"componentdidmount\"><a class=\"anchor\" href=\"/react/react-component#componentdidmount\"></a><code class=\"language-javascript\">componentDidMount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">componentDidMount()</code> se invoca inmediatamente despu\u00e9s de que un componente se monte (se inserte en el \u00e1rbol). La inicializaci\u00f3n que requiere nodos DOM deber\u00eda ir aqu\u00ed. Si necesita cargar datos desde un punto final remoto, este es un buen lugar para instanciar la solicitud de red.</p>\n<p>Este m\u00e9todo es un buen lugar para establecer cualquier suscripci\u00f3n. Si lo haces, no olvides darle de baja en <code class=\"language-javascript\">componentWillUnmount()</code>.</p>\n<p><strong>Puedes llamar <code class=\"language-javascript\">setState()</code> inmediatamente</strong> en <code class=\"language-javascript\">componentDidMount()</code>. Se activar\u00e1 un renderizado extra, pero suceder\u00e1 antes de que el navegador actualice la pantalla. Esto garantiza que, aunque en este caso se invocar\u00e1 dos veces el <code class=\"language-javascript\">render()</code>, el usuario no ver\u00e1 el estado intermedio. Utiliza este patr\u00f3n con precauci\u00f3n porque a menudo causa problemas de rendimiento. En la mayor\u00eda de los casos, deber\u00edas ser capaz de asignar el estado inicial en el <code class=\"language-javascript\">constructor()</code> en su lugar. Sin embargo, puede ser necesario para casos como modales y tooltips cuando se necesita medir un nodo DOM antes de representar algo que depende de su tama\u00f1o o posici\u00f3n.</p>\n\n<h3 id=\"componentdidupdate\"><a class=\"anchor\" href=\"/react/react-component#componentdidupdate\"></a><code class=\"language-javascript\">componentDidUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">componentDidUpdate()</code> se invoca inmediatamente despu\u00e9s de que la actualizaci\u00f3n ocurra. Este m\u00e9todo no es llamado para el renderizador inicial.</p>\n<p>Use esto como una oportunidad para operar en DOM cuando el componente se haya actualizado. Este es tambi\u00e9n un buen lugar para hacer solicitudes de red siempre y cuando compare los accesorios actuales con los anteriores (por ejemplo, una solicitud de red puede no ser necesaria si las props no han cambiado).</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Uso tipico (no olvides de comparar las props):</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>userID <span class=\"token operator\">!==</span> prevProps<span class=\"token punctuation\">.</span>userID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Puedes llamar <code class=\"language-javascript\">setState()</code> inmediatamente</strong> en <code class=\"language-javascript\">componentDidUpdate()</code> pero ten en cuenta que <strong>debe ser envuelto en una condici\u00f3n</strong> como en el ejemplo anterior, o causar\u00e1 un bucle infinito. Tambi\u00e9n causar\u00eda una renderizaci\u00f3n adicional que, aunque no sea visible para el usuario, puede afectar el rendimiento del componente. Si est\u00e1s intentando crear un \u201cespejo\u201d desde un estado a una prop que viene desde arriba, considera usar la prop directamente en su lugar. Lee m\u00e1s sobre <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">por qu\u00e9 copiar props en el estado causa errores</a>.</p>\n<p>Si tu componente implementa el ciclo de vida <code class=\"language-javascript\">getSnapshotBeforeUpdate()</code>(que es raro), el valor que devuelve se pasar\u00e1 como un tercer par\u00e1metro \u201csnapshot\u201d a <code class=\"language-javascript\">componentDidUpdate()</code>. De lo contrario, este par\u00e1metro ser\u00e1 indefinido.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">componentDidUpdate()</code> no ser\u00e1 invocado si <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> devuelve falso.</p>\n</div>\n\n<h3 id=\"componentwillunmount\"><a class=\"anchor\" href=\"/react/react-component#componentwillunmount\"></a><code class=\"language-javascript\">componentWillUnmount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">componentWillUnmount()</code> se invoca inmediatamente antes de desmontar y destruir un componente. Realiza las tareas de limpieza necesarias en este m\u00e9todo, como la invalidaci\u00f3n de temporizadores, la cancelaci\u00f3n de solicitudes de red o la eliminaci\u00f3n de las suscripciones que se crearon en <code class=\"language-javascript\">componentDidMount()</code>.</p>\n<p><strong>No debes llamar <code class=\"language-javascript\">setState()</code></strong> en <code class=\"language-javascript\">componentWillUnmount()</code> porque el componente nunca ser\u00e1 vuelto a renderizar. Una vez que una instancia de componente sea desmontada, nunca ser\u00e1 montada de nuevo.</p>\n\n<h3 id=\"rarely-used-lifecycle-methods\"><a class=\"anchor\" href=\"/react/react-component#rarely-used-lifecycle-methods\"></a>M\u00e9todos de ciclo de vida raramente utilizados </h3>\n<p>Los m\u00e9todos de esta secci\u00f3n corresponden a casos de uso poco com\u00fan. Son \u00fatiles alguna vez, pero la mayor\u00eda de sus componentes probablemente no necesitan ninguno de ellos. <strong>Puedes ver la mayor\u00eda de los m\u00e9todos a continuaci\u00f3n en <a class=\"external-link\" href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">este diagrama de ciclo de vida</a> si haces clic en la casilla de verificaci\u00f3n \u201cMostrar ciclos de vida menos comunes\u201d en la parte superior de \u00e9l.</strong></p>\n<h3 id=\"shouldcomponentupdate\"><a class=\"anchor\" href=\"/react/react-component#shouldcomponentupdate\"></a><code class=\"language-javascript\">shouldComponentUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Usa <code class=\"language-javascript\">shouldComponentUpdate()</code> para avisar a React si la salida de un componente no se ve afectada por el cambio actual en el estado o los accesorios. El comportamiento predeterminado es volver a procesar cada cambio de estado y, en la gran mayor\u00eda de los casos, debe confiar en el comportamiento predeterminado.</p>\n<p><code class=\"language-javascript\">shouldComponentUpdate()</code> es invocado antes de renderizar cuando los nuevos accesorios o el estado est\u00e1n siendo recibidos. Por defecto es <code class=\"language-javascript\">true</code>. Este m\u00e9todo no es llamado para el renderizado inicial o cuando <code class=\"language-javascript\">forceUpdate()</code> es usado.</p>\n<p>Este m\u00e9todo s\u00f3lo existe como <strong><a href=\"/react/optimizing-performance\">optimizaci\u00f3n de rendimiento</a>.</strong> No conf\u00edes en \u00e9l para \u201cprevenir\u201d un renderizado, ya que esto puede conducir a errores. <strong>Considere usar el componente integrado <a href=\"/react/react-api#reactpurecomponent\"><code class=\"language-javascript\">PureComponent</code></a></strong> en lugar de escribir <code class=\"language-javascript\">shouldComponentUpdate()</code> a mano. <code class=\"language-javascript\">PureComponent</code> realiza una comparaci\u00f3n superficial de props y estado, y reduce la posibilidad de saltar una actualizaci\u00f3n necesaria.</p>\n<p>Si est\u00e1s seguro de querer escribirlo a mano, puedes comparar <code class=\"language-javascript\">this.props</code> con <code class=\"language-javascript\">nextProps</code> y <code class=\"language-javascript\">this.state</code> con <code class=\"language-javascript\">nextState</code> y devolver <code class=\"language-javascript\">false</code> para indicar a React que se puede omitir la actualizaci\u00f3n. Devolver <code class=\"language-javascript\">false</code> no previene a los componentes hijos de volverse a renderizar cuando <em>su</em> estado cambia.</p>\n<p>No recomendamos realizar comprobaciones de igualdad profundas ni utilizar <code class=\"language-javascript\">JSON.stringify()</code> en <code class=\"language-javascript\">shouldComponentUpdate()</code>. Es muy ineficiente y da\u00f1ar\u00e1 el rendimiento.</p>\n<p>Actualmente, si <code class=\"language-javascript\">shouldComponentUpdate()</code> devuelve <code class=\"language-javascript\">false</code>, entonces <a href=\"/react/react-component#unsafe_componentwillupdate\"><code class=\"language-javascript\">componentWillUpdate()</code></a>, <a href=\"/react/react-component#%20render\"><code class=\"language-javascript\">render()</code></a>, y <a href=\"/react/react-component#componentdidupdate\"><code class=\"language-javascript\">componentDidUpdate()</code></a> no ser\u00e1n invocados. Ten en cuenta que en el futuro React puede tratar a <code class=\"language-javascript\">shouldComponentUpdate()</code> como una sugerencia en lugar de una directiva estricta, y devolver <code class=\"language-javascript\">false</code> puede aun dar como resultado una nueva renderizaci\u00f3n del componente.</p>\n\n<h3 id=\"static-getderivedstatefromprops\"><a class=\"anchor\" href=\"/react/react-component#static-getderivedstatefromprops\"></a><code class=\"language-javascript\">static getDerivedStateFromProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">getDerivedStateFromProps</code> se invoca justo antes de llamar al m\u00e9todo de render, tanto en la montura inicial como en las actualizaciones posteriores. Debes devolver un objeto para actualizar el estado, o <code class=\"language-javascript\">null</code> para no actualizar nada.</p>\n<p>Este m\u00e9todo existe para <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state\">casos de uso raros</a> donde el estado depende de los cambios en props con el tiempo. Por ejemplo, puede ser util para implementar un componente <code class=\"language-javascript\">&lt;Transition&gt;</code> que compare su anterior hijo y el siguiente para decidir cual de los dos animar en la entrada y salida.</p>\n<p>Derivar el estado conduce al c\u00f3digo verboso y hace que tus componentes sean dif\u00edciles de pensar.\n<a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">Aseg\u00farate de que est\u00e1s familiarizado con alternativas m\u00e1s simples</a></p>\n<ul>\n<li>Si necesitas <strong>realizar un efecto secundario</strong> (por ejemplo, obtenci\u00f3n de datos o animaciones) en una respuesta debido a un cambio en las props, utiliza <a href=\"/react/react-component#componentdidupdate\"><code class=\"language-javascript\">componentDidUpdate</code></a>.</li>\n<li>Si quieres <strong>recalcular algunos datos solo cuando una prop cambie</strong>,<a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization\">usa memoization</a>.</li>\n<li>Si quieres <strong>restablecer alg\u00fan estado cuando una prop cambie</strong> considera hacer un <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component\">completamente controlado</a> o <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">un componente no controlado con una <code class=\"language-javascript\">key</code></a>.</li>\n</ul>\n<p>Este m\u00e9todo no tiene acceso a la instancia del componente. Si quieres, puedes reutilizar alg\u00fan c\u00f3digo entre <code class=\"language-javascript\">getDerivedStateFromProps()</code> y los otros m\u00e9todos de clase mediante la extracci\u00f3n de funciones puras de las props del componente y el estado fuera de la definici\u00f3n de clase.</p>\n<p>Ten en cuenta que este m\u00e9todo se activa en <em>cada</em> renderizado, independientemente de la causa. En caso contrario, <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps</code>, que s\u00f3lo se dispara cuando el padre causa un nuevo renderizado y no como resultado de un <code class=\"language-javascript\">setState</code> local.</p>\n\n<h3 id=\"getsnapshotbeforeupdate\"><a class=\"anchor\" href=\"/react/react-component#getsnapshotbeforeupdate\"></a><code class=\"language-javascript\">getSnapshotBeforeUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">getSnapshotBeforeUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">getSnapshotBeforeUpdate()</code> se invoca justo antes de que la salida renderizada m\u00e1s reciente se entregue, por ejemplo, al DOM. Permite al componente capturar cierta informaci\u00f3n del DOM (por ejemplo, la posici\u00f3n del scroll) antes de que potencialmente se cambie. Cualquier valor que se devuelva en este m\u00e9todo de ciclo de vida se pasar\u00e1 como par\u00e1metro a <code class=\"language-javascript\">componentDidUpdate()</code>.</p>\n<p>Este caso de uso no es com\u00fan, pero puede ourrir en IUs como un hilo de chat que necesita manejar la posici\u00f3n del scroll de manera especial.</p>\n<p>Debe devolverse un valor instant\u00e1neo (o <code class=\"language-javascript\">null</code>).</p>\n<p>Por ejemplo:</p>\n<p><div class=\"gatsby-highlight\">\n<pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ScrollingList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getSnapshotBeforeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// \u00bfEstamos agregando nuevos elementos a la lista?</span>\n    <span class=\"token comment\">// Captura la posici\u00f3n del scroll para que podamos ajustar el scroll despu\u00e9s.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> list<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">,</span> snapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Si tenemos un valor snapshot, agregamos nuevos elementos</span>\n    <span class=\"token comment\">// Ajusta el scroll para que los nuevos elementos no empujen a los viejos fuera de la vista</span>\n    <span class=\"token comment\">// (snapshot aqu\u00ed es el valor que regresa de getSnapshotBeforeUpdate)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snapshot <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n      list<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> snapshot<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listRef<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ...contents... */</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div></p>\n<p>En los ejemplos anteriores, es importante leer la propiedad <code class=\"language-javascript\">scrollHeight</code> en <code class=\"language-javascript\">getSnapshotBeforeUpdate</code> porque puede haber retrasos entre los ciclos de vida de la fase \u201crender\u201d (como <code class=\"language-javascript\">render</code>) y los ciclos de fase de \u201ccommit\u201d (como <code class=\"language-javascript\">getSnapshotBeforeUpdate</code> y <code class=\"language-javascript\">componentDidUpdate</code>).</p>\n\n<h3 id=\"error-boundaries\"><a class=\"anchor\" href=\"/react/react-component#error-boundaries\"></a>L\u00edmites de error </h3>\n<p><a href=\"/react/error-boundaries\">Los l\u00edmites de error</a> son componentes de React que detectan errores de JavaScript en cualquier parte de su \u00e1rbol de componentes secundarios, registran esos errores y muestran una IU alternativa en lugar del \u00e1rbol de componentes que se colg\u00f3. Los l\u00edmites de error capturan errores durante representaci\u00f3n, en m\u00e9todos de ciclo de vida y en constructores de todo el \u00e1rbol debajo de ellos.</p>\n<p>Un componente definido a trav\u00e9s de un clase se convierte en un l\u00edmite de error si se define uno o ambos m\u00e9todos de ciclo de vida <code class=\"language-javascript\">static getDerivedStateFromError()</code> o <code class=\"language-javascript\">componentDidCatch()</code>. Actualizar el estado desde estos ciclos de vida te permite capturar eventos no controlados desde JavaScript en el \u00e1rbol inferior, y mostrarlo como respuesta en la interfaz de usuario.</p>\n<p>Usa solo l\u00edmites de error para recuperar excepciones inesperadas; no intentes usarlos para controlar el flujo</p>\n<p>Para mas detalles ve el <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2017/07/26/error-handling-in-react-16.html\"><em>Manejo de Errores en React 16</em></a>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Los limites de error solo capturan errores en los componentes <strong>debajo</strong> de ellos en el \u00e1rbol. Un l\u00edmite de error no puede capturar un error dentro de \u00e9l mismo.</p>\n</div>\n<h3 id=\"static-getderivedstatefromerror\"><a class=\"anchor\" href=\"/react/react-component#static-getderivedstatefromerror\"></a><code class=\"language-javascript\">static getDerivedStateFromError()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Este ciclo de vida se invoca despu\u00e9s de que un error haya sido lanzado por un componente descendiente. Recibe el error que fue lanzado como par\u00e1metro y debe devolver un valor para actualizar el estado.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Actualiza el state, as\u00ed el siguiente renderizado lo mostrar\u00e1 en la IU.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Puedes renderizar cualquier interfaz de usuario diferente</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Something went wrong.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">getDerivedStateFromError()</code> se llama durante la fase \u201crender\u201d, por lo que los efectos secundarios no est\u00e1n permitidos. Para estos casos de uso, use <code class=\"language-javascript\">componentDidMount()</code> en su lugar.</p>\n</div>\n\n<h3 id=\"componentdidcatch\"><a class=\"anchor\" href=\"/react/react-component#componentdidcatch\"></a><code class=\"language-javascript\">componentDidCatch()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Este ciclo de vida se invoca despu\u00e9s de que un error haya sido lanzado por un componente descendiente. Recibe dos par\u00e1metros:</p>\n<ol>\n<li><code class=\"language-javascript\">error</code> - Es un error que ha sido lanzado.</li>\n<li><code class=\"language-javascript\">info</code>- Un objeto con una clave<code class=\"language-javascript\">componentStack</code> contiene <a href=\"/react/error-boundaries#component-stack-traces\">informaci\u00f3n sobre que componente ha devuelto un error</a>.</li>\n</ol>\n<p><code class=\"language-javascript\">componentDidCatch()</code>se llama durante la fase \u201ccommit\u201d, por lo tanto, los efectos secundarios se permiten. Deber\u00eda utilizarse para cosas como errores de registro:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Actualiza el state, as\u00ed el siguiente renderizado lo mostrar\u00e1 en la IU.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">hasError</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Ejemplo \"componentStack\":</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in ComponentThatThrows (created by App)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in ErrorBoundary (created by App)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in div (created by App)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">//   in App</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">logComponentStackToMyService</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>componentStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Puedes renderizar una interfaz de usuario customizada</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Something went wrong.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los compilados de producci\u00f3n y desarrollo de React difieren ligeramente en la forma en que <code class=\"language-javascript\">componentDidCatch</code> maneja los errores.</p>\n<p>En desarrollo, los errores subir\u00e1n hacia <code class=\"language-javascript\">window</code>, esto significa que cualquier <code class=\"language-javascript\">window.onerror</code> o <code class=\"language-javascript\">window.addEventListener('error', callback)</code> interceptar\u00e1 los errores que han sido atrapados por <code class=\"language-javascript\">componentDitCatch</code>.</p>\n<p>En producci\u00f3n, en cambio, los errores no subir\u00e1n, lo que significa que cualquier manejador de errores ancestro solo recibir\u00e1 errores que no hayan sido expl\u00edcitamente atrapados por <code class=\"language-javascript\">componentDidCatch()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>En el evento de un error, puedes renderizar una interfaz de usuario con <code class=\"language-javascript\">componentDidCatch()</code> llamando a <code class=\"language-javascript\">setState()</code>, pero esto estar\u00e1 obsoleto en una futura versi\u00f3n. Usa <code class=\"language-javascript\">static getDerivedStateFromError()</code> para controlar el plan de renderizado.</p>\n</div>\n\n<h3 id=\"legacy-lifecycle-methods\"><a class=\"anchor\" href=\"/react/react-component#legacy-lifecycle-methods\"></a>M\u00e9todos de ciclo de vida obsoletos </h3>\n<p>Estos m\u00e9todos de ciclo de vida a continuaci\u00f3n est\u00e1n marcados como \u201clegado\u201d. Siguen funcionando, pero no recomendamos su uso en nuevos proyectos. Puedes aprender m\u00e1s sobre como migrar estos m\u00e9todos a sus correspondientes actuales en<a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/03/27/update-on-async-rendering.html\"> este post del blog.</a>.</p>\n<h3 id=\"unsafe_componentwillmount\"><a class=\"anchor\" href=\"/react/react-component#unsafe_componentwillmount\"></a><code class=\"language-javascript\">UNSAFE_componentWillMount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">UNSAFE_componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Este ciclo de vida se llamaba anteriormente <code class=\"language-javascript\">componentWillMount</code>. Ese nombre seguir\u00e1 funcionando hasta la versi\u00f3n 17. Usa la <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\"><code class=\"language-javascript\">rename-unsafe-lifecycles</code> codemod</a> para actualizar automaticamente tus componentes.</p>\n</div>\n<p><code class=\"language-javascript\">UNSAFE_componentWillMount()</code> se invoca justo antes de que el montaje ocurra. Es llamado antes de <code class=\"language-javascript\">render()</code>, por lo tanto, al llamar a <code class=\"language-javascript\">setState()</code> de forma s\u00edncrona en este m\u00e9todo no se activar\u00e1 una representaci\u00f3n adicional.\nEn general, recomendamos usar el <code class=\"language-javascript\">constructor()</code> en lugar de inicializar el estado.</p>\n<p>Evite introducir efectos secundarios o suscripciones en este m\u00e9todo. Para estos casos de uso, use <code class=\"language-javascript\">componentDidMount()</code> en su lugar.</p>\n<p>Este ciclo de vida es el \u00fanico m\u00e9todo que se llama en el renderizado en el lado de servidor.</p>\n\n<h3 id=\"unsafe_componentwillreceiveprops\"><a class=\"anchor\" href=\"/react/react-component#unsafe_componentwillreceiveprops\"></a><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">UNSAFE_componentWillReceiveProps</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Este ciclo de vida se llamaba anteriormente <code class=\"language-javascript\">componentWillReceiveProps</code>. Ese nombre seguir\u00e1 funcionando hasta la versi\u00f3n 17. Usa <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\"><code class=\"language-javascript\">rename-unsafe-lifecycles</code> codemod</a> para actualizar automaticamente tus componentes.</p>\n<p>Nota:</p>\n<p>El uso de este m\u00e9todo de ciclo de vida a menudo conduce a errores e inconsistencias</p>\n<ul>\n<li>Si necesitas <strong>realizar un efecto secundario</strong> (por ejemplo, obtenci\u00f3n de datos o animaciones) en una respuesta debido a un cambio en las props, utiliza <a href=\"/react/react-component#componentdidupdate\"><code class=\"language-javascript\">componentDidUpdate</code></a>.</li>\n<li>Si usaste <code class=\"language-javascript\">componentWillReceiveProps</code> para <strong>re-calcular algunos datos cuando una prop cambie</strong>, <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization\">utiliza memoization</a>.</li>\n<li>Si quieres <strong>restablecer alg\u00fan state cuando una prop cambie</strong> considera hacer un <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component\">completamente controlado</a> o <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">un componente no controlado con una <code class=\"language-javascript\">key/clave</code></a>.</li>\n</ul>\n<p>Para otros casos de uso, <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">sigue las recomendaciones en este blog sobre estado derivado</a>.</p>\n</div>\n<p><code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code> se invoca antes de que un componente montado reciba nuevas props. Si necesita actualizar el estado en respuesta a cambios de accesorios (por ejemplo, para restablecerlo), puede comparar <code class=\"language-javascript\">this.props</code> y <code class=\"language-javascript\">nextProps</code> y realizar transiciones de estado usando <code class=\"language-javascript\">this.setState ()</code> en este m\u00e9todo.</p>\n<p>Ten en cuenta que si un componente principal hace que su componente se vuelva a generar, se llamar\u00e1 a este m\u00e9todo incluso si las props no han cambiado. Aseg\u00farate de comparar los valores actuales y los siguientes solo si deseas manejar los cambios.</p>\n<p>React no llama <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code> con props inicial durante su <a href=\"/react/react-component#mounting\">mounting</a>. Solo llama a este m\u00e9todo si algunas de las props de los componentes deben ser actualizadas. Normalmente, llamar a <code class=\"language-javascript\">this.setState()</code> no provoca <code class=\"language-javascript\">UNSAFE_componentWillReceiveProps()</code>.</p>\n\n<h3 id=\"unsafe_componentwillupdate\"><a class=\"anchor\" href=\"/react/react-component#unsafe_componentwillupdate\"></a><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">UNSAFE_componentWillUpdate</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>This lifecycle was previously named <code class=\"language-javascript\">componentWillUpdate</code>. That name will continue to work until version 17. Use the <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\"><code class=\"language-javascript\">rename-unsafe-lifecycles</code> codemod</a> to automatically update your components.</p>\n</div>\n<p><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> se invoca justo antes de renderizar cuando llegan nuevas props o se est\u00e1 recibiendo el estado. Usa esto como una oportunidad para realizar la preparaci\u00f3n antes de que ocurra una actualizaci\u00f3n. Este m\u00e9todo no es llamado para el renderizador inicial.</p>\n<p>No puedes llamar aqu\u00ed a <code class=\"language-javascript\">this.setState()</code>; tampoco deberias hacer nada m\u00e1s (por ejemplo, enviar una acci\u00f3n de Redux) que activar\u00eda una actualizaci\u00f3n de un componente React antes de que devuelva el m\u00e9todo <code class=\"language-javascript\">UNSAFE_componentWillUpdate ()</code>.</p>\n<p>Normalmente, este m\u00e9todo puede ser reemplazado por <code class=\"language-javascript\">componentDidUpdate()</code>. Si estabas leyendo el DOM en este m\u00e9todo (por ejemplo para guardar una posici\u00f3n de desplazamiento), puedes mover esa l\u00f3gica a <code class=\"language-javascript\">getSnapshotBeforeUpdate()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><code class=\"language-javascript\">UNSAFE_componentWillUpdate()</code> no ser\u00e1 invocado si <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate()</code></a> devuelve false.</p>\n</div>\n\n<h2 id=\"other-apis-1\"><a class=\"anchor\" href=\"/react/react-component#other-apis-1\"></a>Otras APIs </h2>\n<p>A diferencia de los m\u00e9todos de ciclo de vida anteriores (que React llama por ti), los m\u00e9todos siguientes son los m\u00e9todos <em>que</em> tu puedes llamar desde tus componentes.</p>\n<p>Hay s\u00f3lo dos de ellos: <code class=\"language-javascript\">setState()</code> y <code class=\"language-javascript\">forceUpdate()</code>.</p>\n<h3 id=\"setstate\"><a class=\"anchor\" href=\"/react/react-component#setstate\"></a><code class=\"language-javascript\">setState()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>updater<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">setState()</code> hace cambios al estado del componente y le dice a React que este componente y sus elementos secundarios deben volverse a procesar con el estado actualizado. Este es el m\u00e9todo principal que utiliza para actualizar la interfaz de usuario en respuesta a los manejadores de eventos y las respuestas del servidor.</p>\n<p>Considera <code class=\"language-javascript\">setState()</code> como una <em>solicitud</em> en lugar de un comando para actualizar el componente. Para que se perciba un mejor rendimiento, React puede retrasarlo, y luego actualizar varios componentes en una sola pasada. En el caso inusual que necesites forzar a que la actualizaci\u00f3n del DOM se aplique de manera s\u00edncrona, puedes envolverlo en <a href=\"/react/react-dom#flushsync\"><code class=\"language-javascript\">flushSync</code></a>, pero esto puede afectar el rendimiento.</p>\n<p><code class=\"language-javascript\">setState()</code> no siempre actualiza inmediatamente el componente. Puede procesar por lotes o diferir la actualizaci\u00f3n hasta m\u00e1s tarde. Esto hace que leer <code class=\"language-javascript\">this.state</code> despu\u00e9s de llamar a <code class=\"language-javascript\">setState()</code> sea una trampa potencial. En su lugar, usa <code class=\"language-javascript\">componentDidUpdate</code> o un callback <code class=\"language-javascript\">setState</code> (<code class=\"language-javascript\">setState(updater, callback)</code>), se garantiza que cualquiera de los dos se activar\u00e1 una vez la actualizaci\u00f3n haya sido aplicada. Si necesitas establecer el estado en funci\u00f3n del estado anterior, lee a continuaci\u00f3n sobre el argumento <code class=\"language-javascript\">updater</code>.</p>\n<p><code class=\"language-javascript\">setState()</code> siempre llevar\u00e1 al re-renderizado a menos que <code class=\"language-javascript\">shouldComponentUpdate()</code> devuelva <code class=\"language-javascript\">false</code>. Si se usan objetos mutables y no se puede implementar la l\u00f3gica de representaci\u00f3n condicional en <code class=\"language-javascript\">shouldComponentUpdate()</code>, llamar a <code class=\"language-javascript\">setState()</code> solo cuando el nuevo estado difiera del estado anterior evitar\u00e1 re-renderizados innecesarios.</p>\n<p>El primer argumento es una funci\u00f3n <code class=\"language-javascript\">updater</code> con la firma:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> stateChange</code></pre></div>\n<p><code class=\"language-javascript\">state</code> es una referencia al estado del componente en el momento en que se est\u00e1 aplicando el cambio. No deber\u00eda ser mutado directamente. En cambio, los cambios deber\u00edan ser representados construyendo un nuevo objeto basado en la entrada de <code class=\"language-javascript\">prevState</code> y <code class=\"language-javascript\">props</code>. Por ejemplo, supongamos que quisi\u00e9ramos incrementar un valor en el estado por <code class=\"language-javascript\">props.step</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ambos <code class=\"language-javascript\">state</code> y <code class=\"language-javascript\">props</code> recibidos por la funci\u00f3n de actualizador est\u00e1n garantizados de estar actualizados. La salida del actualizador se fusiona de forma superficial (<em>shallow</em>) con <code class=\"language-javascript\">state</code>.</p>\n<p>El segundo par\u00e1metro para <code class=\"language-javascript\">setState()</code> es una devoluci\u00f3n de llamada opcional que ser\u00e1 ejecutada una vez <code class=\"language-javascript\">setState</code> sea completada y el componente sea re-renderizado. Generalmente recomendamos usar <code class=\"language-javascript\">componentDidUpdate()</code> para dicha l\u00f3gica.</p>\n<p>Opcionalmente puedes pasar un objeto como el primer argumento a <code class=\"language-javascript\">setState()</code> en lugar de una funci\u00f3n:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>stateChange<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Esto realiza una combinaci\u00f3n superficial de <code class=\"language-javascript\">stateChange</code> en el nuevo estado, por ejemplo, para ajustar una cantidad de elementos del carrito de compras:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">quantity</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Esta forma de <code class=\"language-javascript\">setState()</code> tambi\u00e9n es asincr\u00f3nica, y varias llamadas durante el mismo ciclo pueden agruparse juntas. Por ejemplo, si intentas aumentar la cantidad de un articulo mas de una vez en el mismo ciclo, resultar\u00e1 en el equivalente de:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n  previousState<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">quantity</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">quantity</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Las llamadas posteriores anular\u00e1n los valores de llamadas anteriores en el mismo ciclo, por lo que la cantidad solo se incrementar\u00e1 una vez. Si el siguiente estado depende del estado actual, recomendamos utilizar una actualizador a trav\u00e9s de una funci\u00f3n formulario.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">quantity</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para m\u00e1s detalles, visite:</p>\n<ul>\n<li><a href=\"/react/state-and-lifecycle\">Gu\u00eda: Estado y ciclo de vida</a></li>\n<li><a class=\"external-link\" href=\"https://stackoverflow.com/a/48610973/458193\">En profundidad: \u00bfCu\u00e1ndo y por qu\u00e9 las llamadas de <code class=\"language-javascript\">setState()</code> se hacen en lotes?</a></li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">En profundidad: \u00bfPor qu\u00e9 <code class=\"language-javascript\">this.state</code> no se actualiza inmediatamente?</a></li>\n</ul>\n\n<h3 id=\"forceupdate\"><a class=\"anchor\" href=\"/react/react-component#forceupdate\"></a><code class=\"language-javascript\">forceUpdate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">component<span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Por defecto, cuando el componente de tu estado o accesorio cambia, tu componente re-renderizar\u00e1. Si tu m\u00e9todo <code class=\"language-javascript\">render()</code> depende de algunos otros datos, puedes decirle a React que el componente necesita re-renderizado llamando a <code class=\"language-javascript\">forceUpdate()</code>.</p>\n<p>Llamar a <code class=\"language-javascript\">forceUpdate()</code> causar\u00e1 que <code class=\"language-javascript\">render()</code> sea llamado en el componente, saltando <code class=\"language-javascript\">shouldComponentUpdate()</code>. Esto activar\u00e1 los m\u00e9todos de ciclo de vida normales para los componentes hijos, incluyendo el m\u00e9todo <code class=\"language-javascript\">shouldComponentUpdate()</code> de cada hijo. React solo actualizar\u00e1 el DOM si el marcado cambia.</p>\n<p>Normalmente, debes intentar evitar todos los usos de <code class=\"language-javascript\">forceUpdate()</code> y solo leer desde <code class=\"language-javascript\">this.props</code> y <code class=\"language-javascript\">this.state</code> en <code class=\"language-javascript\">render()</code>.</p>\n\n<h2 id=\"class-properties-1\"><a class=\"anchor\" href=\"/react/react-component#class-properties-1\"></a>Propiedades de clase </h2>\n<h3 id=\"defaultprops\"><a class=\"anchor\" href=\"/react/react-component#defaultprops\"></a><code class=\"language-javascript\">defaultProps</code> </h3>\n<p><code class=\"language-javascript\">defaultProps</code> puede ser definida como una propiedad en la propia clase de componente, para establecer las props predeterminadas para la clase. Esto se utiliza para props con valor <code class=\"language-javascript\">undefined</code>, pero no para props con valor <code class=\"language-javascript\">null</code>. Por ejemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nCustomButton<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si no se proporciona <code class=\"language-javascript\">props.color</code>, se establecer\u00e1 por defecto a <code class=\"language-javascript\">'blue'</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomButton</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// props.color ser\u00e1 asignada a azul</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si <code class=\"language-javascript\">props.color</code> es <code class=\"language-javascript\">null</code>, permanecer\u00e1 <code class=\"language-javascript\">null</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomButton</span></span> <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// props.color se mantendr\u00e1 en null</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n\n<h3 id=\"displayname\"><a class=\"anchor\" href=\"/react/react-component#displayname\"></a><code class=\"language-javascript\">displayName</code> </h3>\n<p>La cadena <code class=\"language-javascript\">displayName</code> es usada en la depuraci\u00f3n de mensajes. Por lo general, no necesitas establecerlo expl\u00edcitamente porque se deduce del nombre de la funci\u00f3n o clase que define el componente. Es posible que desees establecerlo expl\u00edcitamente si quieres mostrar un nombre diferente para la depuraci\u00f3n o cuando creas un componente de orden superior, consulta <a href=\"/react/higher-order-components#convention-wrap-the-display-name-for-easy-debugging\">Ajustar el Nombre de Pantalla para una F\u00e1cil Depuraci\u00f3n</a> para m\u00e1s detalles.</p>\n\n<h2 id=\"instance-properties-1\"><a class=\"anchor\" href=\"/react/react-component#instance-properties-1\"></a>Propiedades de instancia </h2>\n<h3 id=\"props\"><a class=\"anchor\" href=\"/react/react-component#props\"></a><code class=\"language-javascript\">props</code> </h3>\n<p><code class=\"language-javascript\">this.props</code>contiene las props que fueron definidas por el encargado de llamar al componente. Mira <a href=\"/react/components-and-props\">Componentes y Props</a> para una introducci\u00f3n a las props.</p>\n<p>En particular, <code class=\"language-javascript\">this.props.children</code> es una prop especial, t\u00edpicamente definida por las etiquetas hijas en la expresi\u00f3n JSX en vez de en la etiqueta como tal.</p>\n<h3 id=\"state\"><a class=\"anchor\" href=\"/react/react-component#state\"></a><code class=\"language-javascript\">Estado</code> </h3>\n<p>El estado contiene datos espec\u00edficos de este componente que pueden cambiar con el tiempo. El estado est\u00e1 definido por el usuario, y debe ser un simple objeto JavaScript.</p>\n<p>Si no se utiliza alg\u00fan valor para renderizar o simplemente flujos de datos (por ejemplo, un ID de temporizador), no tiene que ponerlo en el estado. Dichos valores se pueden definir como campos en la instancia del componente.</p>\n<p>Consulta <a href=\"/react/state-and-lifecycle\">Estado y Ciclo de Vida</a> para mas informaci\u00f3n sobre el estado.</p>\n<p>Nunca mutes <code class=\"language-javascript\">this.state</code> directamente, ya que llamar <code class=\"language-javascript\">setState()</code> despu\u00e9s podr\u00eda reemplazar la mutaci\u00f3n que hab\u00edas hecho anteriormente. Intenta tratar <code class=\"language-javascript\">this.state</code> como si fuera inmutable.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-react-component.md\">Edit this page</a></p></div></article>", "path": "/react/react-component", "nav": ["/react/react-api", "/react/react-dom"]}, {"key": "ReactDOM", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>El paquete <code class=\"language-javascript\">react-dom</code> proporciona m\u00e9todos espec\u00edficos del DOM que pueden ser utilizados en el nivel m\u00e1s alto de tu aplicaci\u00f3n como una v\u00eda de escape del modelo de React si as\u00ed lo necesitas.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si utilizas ES5 con npm, puedes escribir:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ReactDOM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>El paquete <code class=\"language-javascript\">react-dom</code> tambi\u00e9n proporciona m\u00f3dulos espec\u00edficos para aplicaciones en el cliente y el servidor:</p>\n<ul>\n<li><a href=\"/react/react-dom-client\"><code class=\"language-javascript\">react-dom/client</code></a></li>\n<li><a href=\"/react/react-dom-server\"><code class=\"language-javascript\">react-dom/server</code></a></li>\n</ul>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-dom#overview\"></a>Resumen </h2>\n<p>El paquete <code class=\"language-javascript\">react-dom</code> exporta estos m\u00e9todos:</p>\n<ul>\n<li><a href=\"/react/react-dom#createportal\"><code class=\"language-javascript\">createPortal()</code></a></li>\n<li><a href=\"/react/react-dom#flushsync\"><code class=\"language-javascript\">flushSync()</code></a></li>\n</ul>\n<p>Estos m\u00e9todos de <code class=\"language-javascript\">react-dom</code> tambi\u00e9n se exportan, pero se consideran legados:</p>\n<ul>\n<li><a href=\"/react/react-dom#render\"><code class=\"language-javascript\">render()</code></a></li>\n<li><a href=\"/react/react-dom#hydrate\"><code class=\"language-javascript\">hydrate()</code></a></li>\n<li><a href=\"/react/react-dom#finddomnode\"><code class=\"language-javascript\">findDOMNode()</code></a></li>\n<li><a href=\"/react/react-dom#unmountcomponentatnode\"><code class=\"language-javascript\">unmountComponentAtNode()</code></a></li>\n</ul>\n<div class=\"blockquote\">\n<strong>Nota: </strong>\n<p>Tanto <code class=\"language-javascript\">render</code> como <code class=\"language-javascript\">hydrate</code> se han reemplazado por <a href=\"/react/react-dom-client\">m\u00e9todos del cliente</a> en React 18. Estos m\u00e9todos te advertir\u00e1n que tu aplicaci\u00f3n se comportar\u00e1 como si estuviera ejecut\u00e1ndose en React 17 (m\u00e1s informaci\u00f3n <a class=\"external-link\" href=\"https://es.reactjs.org/link/switch-to-createroot\">aqu\u00ed</a>).</p>\n</div>\n<h3 id=\"browser-support\"><a class=\"anchor\" href=\"/react/react-dom#browser-support\"></a>Soporte de navegadores </h3>\n<p>React es compatible con todos los navegadores modernos, aunque <a href=\"/react/javascript-environment-requirements\">se requieren algunos polyfills</a> para entornos m\u00e1s antiguos.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>No aseguramos la compatibilidad con los navegadores m\u00e1s antiguos que no incluyen m\u00e9todos ES5 o microtareas como Internet Explorer. Quiz\u00e1 encuentres que tus aplicaciones funcionan en estos navegadores si <em>polyfills</em> como <a class=\"external-link\" href=\"https://github.com/es-shims/es5-shim\">es5-shim y es5-sham</a> est\u00e1n incluidos en la p\u00e1gina, pero est\u00e1s por tu cuenta si decides tomar este camino.</p>\n</div>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-dom#reference\"></a>Referencia </h2>\n<h3 id=\"createportal\"><a class=\"anchor\" href=\"/react/react-dom#createportal\"></a><code class=\"language-javascript\">createPortal()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Crea un portal. Los portales proporcionan una forma de <a href=\"/react/portals\">renderizar hijos en un nodo del DOM que existe fuera de la jerarqu\u00eda del DOM del componente</a>.</p>\n<h3 id=\"flushsync\"><a class=\"anchor\" href=\"/react/react-dom#flushsync\"></a><code class=\"language-javascript\">flushSync()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">flushSync</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Obliga a React a ejecutar s\u00edncronamente todas las actualizaciones dentro del <em>callback</em> proporcionado. As\u00ed se asegura que el DOM se actualiza inmediatamente.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Obliga a que esta actualizaci\u00f3n del estado sea s\u00edncrona.</span>\n<span class=\"token function\">flushSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// En este punto, el DOM est\u00e1 actualizado.</span>\n\n<span class=\"token operator\">&gt;</span> Nota<span class=\"token operator\">:</span>\n<span class=\"token operator\">&gt;</span> \n<span class=\"token operator\">&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">flushSync</span><span class=\"token template-punctuation string\">`</span></span> puede afectar significativamente el rendimiento<span class=\"token punctuation\">.</span> \u00dasalo con moderaci\u00f3n<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&gt;</span> \n<span class=\"token operator\">&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">flushSync</span><span class=\"token template-punctuation string\">`</span></span> puede obligar a las barreras Suspense pendientes a que muestren su estado <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">fallback</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&gt;</span> \n<span class=\"token operator\">&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">flushSync</span><span class=\"token template-punctuation string\">`</span></span> puede tambi\u00e9n ejecutar los efectos pendientes y aplicar sincr\u00f3nicamente cualquier actualizaci\u00f3n que estas contengan antes de retornar<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&gt;</span> \n<span class=\"token operator\">&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">flushSync</span><span class=\"token template-punctuation string\">`</span></span> tambi\u00e9n puede ejecutar actualizaciones fuera del <span class=\"token operator\">*</span>callback<span class=\"token operator\">*</span> cuando sea necesario para ejecutar la actualizaciones dentro del <span class=\"token operator\">*</span>callback<span class=\"token operator\">*</span><span class=\"token punctuation\">.</span> Por ejemplo<span class=\"token punctuation\">,</span> si hay actualizaciones pendientes de un clic<span class=\"token punctuation\">,</span> React puede ejecutar esas antes de ejecutar las actualizaciones dentro del <span class=\"token operator\">*</span>callback<span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>\n\n## Referencia legada <span class=\"token punctuation\">{</span>#legacy<span class=\"token operator\">-</span>reference<span class=\"token punctuation\">}</span>\n### <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">render()</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">{</span>#render<span class=\"token punctuation\">}</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`javascript\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">render</code> ha sido reemplazado con <code class=\"language-javascript\">createRoot</code> en React 18. Consulta <a href=\"/react/react-dom-client#createroot\">createRoot</a> para m\u00e1s informaci\u00f3n.</p>\n</div>\n<p>Renderiza un elemento React al DOM en el <code class=\"language-javascript\">contenedor</code> suministrado y retorna una <a href=\"/react/more-about-refs\">referencia</a> al componente (o devuelve <code class=\"language-javascript\">null</code> para <a href=\"/react/components-and-props#function-and-class-components\">componentes sin estado</a>).</p>\n<p>Si el elemento React fue previamente renderizado al <code class=\"language-javascript\">contenedor</code>, esto ejecutar\u00e1 una actualizaci\u00f3n en \u00e9l, y solo mutar\u00e1 el DOM de ser necesario para reflejar el m\u00e1s reciente elemento React.</p>\n<p>Si se suministra el <em>callback</em> opcional, ser\u00e1 ejecutado despu\u00e9s de que el componente es renderizado o actualizado.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">render()</code> controla el contenido del nodo contenedor que suministras. Cualquiera de los elementos DOM dentro de este son reemplazados cuando se llama por primera vez. Las llamadas posteriores utilizan el algoritmo de diferenciado de React DOM para actualizaciones eficientes.</p>\n<p><code class=\"language-javascript\">render()</code> no modifica el nodo contenedor (solo modifica los hijos del contenedor). Puede ser posible insertar un componente en un nodo existente del DOM sin sobrescribir los hijos existentes.</p>\n<p><code class=\"language-javascript\">render()</code> actualmente retorna una referencia a la instancia <code class=\"language-javascript\">ReactComponent</code> ra\u00edz. Sin embargo, utilizar este valor retornado es una pr\u00e1ctica vieja,\ny debe ser evitada debido a que en futuras versiones de React puede que los componentes se rendericen de manera as\u00edncrona en algunos casos. Si deseas obtener una referencia a la instancia <code class=\"language-javascript\">ReactComponent</code> ra\u00edz,\nla soluci\u00f3n preferida es agregar una <a href=\"/react/refs-and-the-dom#callback-refs\">referencia mediante callback</a> al elemento ra\u00edz.</p>\n<p>Using <code class=\"language-javascript\">render()</code> to hydrate a server-rendered container is deprecated. Use <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">hydrateRoot()</code></a> instead.</p>\n</div>\n\n<h3 id=\"hydrate\"><a class=\"anchor\" href=\"/react/react-dom#hydrate\"></a><code class=\"language-javascript\">hydrate()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>elemento<span class=\"token punctuation\">,</span> contenedor<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">hydrate</code> ha sido reemplazado con <code class=\"language-javascript\">hydrateRoot</code> en React 18. Consulta <a href=\"/react/react-dom-client#hydrateroot\">hydrateRoot</a> para m\u00e1s informaci\u00f3n.</p>\n</div>\n<p>Es igual a <a href=\"/react/react-dom#render\"><code class=\"language-javascript\">render()</code></a>, pero es utilizado para hidratar un contenedor cuyo contenido HTML fue renderizado por <a href=\"/react/react-dom-server\"><code class=\"language-javascript\">ReactDOMServer</code></a>. React tratar\u00e1 de agregar detectores de eventos al marcado existente.</p>\n<p>React espera que el contenido renderizado sea id\u00e9ntico entre el servidor y el cliente. Puede arreglar las diferencias del contenido de texto, pero deber\u00edas tratar los desajustes como errores y arreglarlos. En modo de desarrollo, React alerta sobre desajustes durante la hidrataci\u00f3n. No hay garant\u00edas de que las diferencias de atributos sean arregladas en caso de desajustes. Esto es importante por razones de rendimiento, porque en la mayor\u00eda de las aplicaciones los desajustes son raros y validar todo el marcado ser\u00eda demasiado costoso.</p>\n<p>Si el atributo de un elemento o contenido de texto es inevitablemente diferente entre el servidor y el cliente (por ejemplo, una marca de tiempo), puedes silenciar la alerta agregando <code class=\"language-javascript\">suppressHydrationWarning={true}</code> al elemento. Esto solo funciona a 1 nivel de profundidad, y est\u00e1 pensado como una v\u00eda de escape. No abuses de \u00e9l. A menos que sea contenido de texto, React aun no intentar\u00e1 arreglarlo, as\u00ed que es posible que contin\u00fae inconsistente hasta pr\u00f3ximas actualizaciones.</p>\n<p>Si necesitas renderizar algo diferente de manera intencional en el servidor y en el cliente, puedes realizar un renderizado en 2 pasos. Los componentes que renderizan contenido diferente al cliente, pueden leer una variable de estado como <code class=\"language-javascript\">this.state.isClient</code>, la cual puedes cambiar a <code class=\"language-javascript\">true</code> en <code class=\"language-javascript\">componentDidMount()</code>. De esta manera, el paso de renderizado inicial renderizar\u00e1 el mismo contenido que el servidor, evitando desajustes, pero un paso adicional ocurrir\u00e1 s\u00edncronamente justo despu\u00e9s de la hidrataci\u00f3n. Recuerda que este enfoque har\u00e1 que tus componentes sean m\u00e1s lentos debido a que se deben renderizar dos veces, as\u00ed que util\u00edzalo con precauci\u00f3n.</p>\n<p>Recuerda estar consciente de la experiencia de usuario en conexiones lentas. El c\u00f3digo Javascript puede ser cargado significativamente despu\u00e9s de que el HTML inicial sea renderizado, entonces, si renderizas algo diferente en el paso exclusivo por el cliente, la transici\u00f3n puede ser discorde. Sin embargo, si se ejecuta bien, puede ser beneficioso para renderizar una \u00abcapa\u00bb de la aplicaci\u00f3n en el servidor, y solo mostrar unos <em>widgets</em> extra en el cliente. Para aprender c\u00f3mo hacer esto sin tener desajustes en el marcado, consulta la explicaci\u00f3n en el p\u00e1rrafo anterior.</p>\n\n<h3 id=\"unmountcomponentatnode\"><a class=\"anchor\" href=\"/react/react-dom#unmountcomponentatnode\"></a><code class=\"language-javascript\">unmountComponentAtNode()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>contenedor<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">unmountComponentAtNode</code> ha sido reemplazado con <code class=\"language-javascript\">root.unmount()</code> en React 18. Consulta <a href=\"/react/react-dom-client#createroot\">createRoot</a> para m\u00e1s informaci\u00f3n.</p>\n</div>\n<p>Elimina un componente React ya montado en el DOM, y limpia sus manejadores de eventos y estado. Si ning\u00fan componente fue montado en el contenedor, llamar a esta funci\u00f3n no har\u00e1 nada. Retorna <code class=\"language-javascript\">true</code> si un componente fue desmontado, y <code class=\"language-javascript\">false</code> si no hay alg\u00fan componente para desmontar.</p>\n\n<h3 id=\"finddomnode\"><a class=\"anchor\" href=\"/react/react-dom#finddomnode\"></a><code class=\"language-javascript\">findDOMNode()</code> </h3>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">findDOMNode</code> es una v\u00eda de escape para acceder al componente DOM subyacente. En la mayor\u00eda de los casos no se recomienda, debido a que rompe la abstracci\u00f3n del componente. <a href=\"/react/strict-mode#warning-about-deprecated-finddomnode-usage\">Su uso esta censurado en el modo estricto (StrictMode).</a></p>\n</div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findDOMNode</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si este componente ha sido montado al DOM, este m\u00e9todo retorna el elemento DOM nativo correspondiente. Este m\u00e9todo es \u00fatil para leer valores fuera del DOM, como por ejemplo valores de formularios, o realizar mediciones del DOM. <strong>En la mayor\u00eda de casos, puedes agregar una referencia al nodo del DOM, y evitar el uso de <code class=\"language-javascript\">findDOMNode</code> por completo</strong>.</p>\n<p>Cuando un componente es renderizado a <code class=\"language-javascript\">null</code> o <code class=\"language-javascript\">false</code>, <code class=\"language-javascript\">findDOMNode</code> retorna <code class=\"language-javascript\">null</code>. Cuando un componente es renderizado a una cadena de texto, <code class=\"language-javascript\">findDOMNode</code> retorna un nodo DOM de texto que contiene ese valor. En React 16, un componente puede retornar un fragmento con m\u00faltiples hijos, en este caso <code class=\"language-javascript\">findDOMNode</code> retornar\u00e1 el nodo del DOM correspondiente al primer hijo no vac\u00edo.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">findDOMNode</code> solo funciona con componentes montados (esto significa, componentes que han sido puestos en el DOM). Si tratas de llamar este m\u00e9todo con un componente que a\u00fan no ha sido montado (por ejemplo, llamar <code class=\"language-javascript\">findDOMNode()</code> en <code class=\"language-javascript\">render()</code> con un componente que a\u00fan no ha sido creado) generar\u00e1 una excepci\u00f3n.</p>\n<p><code class=\"language-javascript\">findDOMNode</code> no puede ser utilizado en componentes de funci\u00f3n.</p>\n</div>\n</div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-react-dom.md\">Edit this page</a></p></div></article>", "path": "/react/react-dom", "nav": ["/react/react-component", "/react/react-dom-client"]}, {"key": "ReactDOMClient", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>The <code class=\"language-javascript\">react-dom/client</code> package provides client-specific methods used for initializing an app on the client. Most of your components should not need to use this module.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you use ES5 with npm, you can write:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ReactDOM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-dom-client#overview\"></a>Overview </h2>\n<p>The following methods can be used in client environments:</p>\n<ul>\n<li><a href=\"/react/react-dom-client#createroot\"><code class=\"language-javascript\">createRoot()</code></a></li>\n<li><a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">hydrateRoot()</code></a></li>\n</ul>\n<h3 id=\"browser-support\"><a class=\"anchor\" href=\"/react/react-dom-client#browser-support\"></a>Browser Support </h3>\n<p>React supports all modern browsers, although <a href=\"/react/javascript-environment-requirements\">some polyfills are required</a> for older versions.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>We do not support older browsers that don\u2019t support ES5 methods or microtasks such as Internet Explorer. You may find that your apps do work in older browsers if polyfills such as <a class=\"external-link\" href=\"https://github.com/es-shims/es5-shim\">es5-shim and es5-sham</a> are included in the page, but you\u2019re on your own if you choose to take this path.</p>\n</div>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-dom-client#reference\"></a>Reference </h2>\n<h3 id=\"createroot\"><a class=\"anchor\" href=\"/react/react-dom-client#createroot\"></a><code class=\"language-javascript\">createRoot()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Create a React root for the supplied <code class=\"language-javascript\">container</code> and return the root. The root can be used to render a React element into the DOM with <code class=\"language-javascript\">render</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">createRoot</code> accepts two options:</p>\n<ul>\n<li><code class=\"language-javascript\">onRecoverableError</code>: optional callback called when React automatically recovers from errors.</li>\n<li><code class=\"language-javascript\">identifierPrefix</code>: optional prefix React uses for ids generated by <code class=\"language-javascript\">React.useId</code>. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server.</li>\n</ul>\n<p>The root can also be unmounted with <code class=\"language-javascript\">unmount</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">root<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">createRoot()</code> controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when render is called. Later calls use React\u2019s DOM diffing algorithm for efficient updates.</p>\n<p><code class=\"language-javascript\">createRoot()</code> does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.</p>\n<p>Using <code class=\"language-javascript\">createRoot()</code> to hydrate a server-rendered container is not supported. Use <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">hydrateRoot()</code></a> instead.</p>\n</div>\n\n<h3 id=\"hydrateroot\"><a class=\"anchor\" href=\"/react/react-dom-client#hydrateroot\"></a><code class=\"language-javascript\">hydrateRoot()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">hydrateRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Same as <a href=\"/react/react-dom-client#createroot\"><code class=\"language-javascript\">createRoot()</code></a>, but is used to hydrate a container whose HTML contents were rendered by <a href=\"/react/react-dom-server\"><code class=\"language-javascript\">ReactDOMServer</code></a>. React will attempt to attach event listeners to the existing markup.</p>\n<p><code class=\"language-javascript\">hydrateRoot</code> accepts two options:</p>\n<ul>\n<li><code class=\"language-javascript\">onRecoverableError</code>: optional callback called when React automatically recovers from errors.</li>\n<li><code class=\"language-javascript\">identifierPrefix</code>: optional prefix React uses for ids generated by <code class=\"language-javascript\">React.useId</code>. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server.</li>\n</ul>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p>React expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-react-dom-client.md\">Edit this page</a></p></div></article>", "path": "/react/react-dom-client", "nav": ["/react/react-dom", "/react/react-dom-server"]}, {"key": "ReactDOMServer", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>El objeto <code class=\"language-javascript\">ReactDOMServer</code> te permite renderizar componentes a un marcado est\u00e1tico. Normalmente, se usa en un servidor de Node:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// m\u00f3dulos ES</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ReactDOMServer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CommonJS</span>\n<span class=\"token keyword\">var</span> ReactDOMServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/react-dom-server#overview\"></a>Resumen </h2>\n<p>Estos m\u00e9todos solo est\u00e1n disponibles en los <strong>entornos con <a class=\"external-link\" href=\"https://nodejs.org/api/stream.html\">Streams de Node.js</a>:</strong></p>\n<ul>\n<li><a href=\"/react/react-dom-server#rendertopipeablestream\"><code class=\"language-javascript\">renderToPipeableStream()</code></a></li>\n<li><a href=\"/react/react-dom-server#rendertonodestream\"><code class=\"language-javascript\">renderToNodeStream()</code></a> (Deprecated)</li>\n<li><a href=\"/react/react-dom-server#rendertostaticnodestream\"><code class=\"language-javascript\">renderToStaticNodeStream()</code></a></li>\n</ul>\n<p>Estos m\u00e9todos solo est\u00e1n disponibles en los <strong>entornos con <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">Streams Web</a></strong> (esto incluye navegadores, Deno y algunos <em>runtimes</em> modernos de <em>edge computing</em>):</p>\n<ul>\n<li><a href=\"/react/react-dom-server#rendertoreadablestream\"><code class=\"language-javascript\">renderToReadableStream()</code></a></li>\n</ul>\n<p>Los siguientes m\u00e9todos se pueden utilizar en entornos que no tienen disponibles <em>streams</em>:</p>\n<ul>\n<li><a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">renderToString()</code></a></li>\n<li><a href=\"/react/react-dom-server#rendertostaticmarkup\"><code class=\"language-javascript\">renderToStaticMarkup()</code></a></li>\n</ul>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/react-dom-server#reference\"></a>Referencia </h2>\n<h3 id=\"rendertopipeablestream\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertopipeablestream\"></a><code class=\"language-javascript\">renderToPipeableStream()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToPipeableStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderiza un elemento React a su HTML inicial. Devuelve un <em>stream</em> (flujo) con un m\u00e9todo <code class=\"language-javascript\">pipe(res)</code> que conduce la salida y <code class=\"language-javascript\">abort()</code> para abortar la petici\u00f3n. Es completamente compatible con Suspense y con la realizaci\u00f3n de <em>streaming</em> de HTML con bloques de contenido \u00abdemorados\u00bb que luego \u00abaparecen\u00bb usando etiquetas <code class=\"language-javascript\">&lt;script&gt;</code>. <a class=\"external-link\" href=\"https://github.com/reactwg/react-18/discussions/37\">Lee m\u00e1s en</a>.</p>\n<p>Si llamas <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> en un nodo que ya tiene este marcado de servidor, React lo conservar\u00e1 y solo adjuntar\u00e1 controladores de eventos, lo que te permitir\u00e1 tener una experiencia de primera carga muy eficaz.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> didError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token function\">renderToPipeableStream</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">onShellReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// The content above all Suspense boundaries is ready.</span>\n      <span class=\"token comment\">// If something errored before we started streaming, we set the error code appropriately.</span>\n      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> didError <span class=\"token operator\">?</span> <span class=\"token number\">500</span> <span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      stream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onShellError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Something errored before we could complete the shell so we emit an alternative shell.</span>\n      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'&lt;!doctype html&gt;&lt;p&gt;Loading...&lt;/p&gt;&lt;script src=\"clientrender.js\"&gt;&lt;/script&gt;'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onAllReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// If you don't want streaming, use this instead of onShellReady.</span>\n      <span class=\"token comment\">// This will fire after the entire page content is ready.</span>\n      <span class=\"token comment\">// You can use this for crawlers or static generation.</span>\n\n      <span class=\"token comment\">// res.statusCode = didError ? 500 : 200;</span>\n      <span class=\"token comment\">// res.setHeader('Content-type', 'text/html');</span>\n      <span class=\"token comment\">// stream.pipe(res);</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      didError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mira la <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/14c2be8dac2d5482fda8a0906a31d239df8551fc/packages/react-dom/src/server/ReactDOMFizzServerNode.js#L36-L46\">lista completa de opciones</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Esta es una API espec\u00edfica de Node.js. Los entornos con <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">Streams Web</a>, como Deno y <em>runtimes</em> modernos de <em>edge computing</em>, deber\u00edan usar en su lugar <a href=\"/react/react-dom-server#rendertoreadablestream\"><code class=\"language-javascript\">renderToReadableStream</code></a>.</p>\n</div>\n\n<h3 id=\"rendertoreadablestream\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertoreadablestream\"></a><code class=\"language-javascript\">renderToReadableStream()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToReadableStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Streams a React element to its initial HTML. Returns a Promise that resolves to a <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\">Readable Stream</a>. Fully supports Suspense and streaming of HTML. <a class=\"external-link\" href=\"https://github.com/reactwg/react-18/discussions/127\">Read more</a></p>\n<p>If you call <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> didError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">renderToReadableStream</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Success</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">,</span>\n      <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        didError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// This is to wait for all Suspense boundaries to be ready. You can uncomment</span>\n  <span class=\"token comment\">// this line if you want to buffer the entire HTML instead of streaming it.</span>\n  <span class=\"token comment\">// You can use this for crawlers or static generation:</span>\n\n  <span class=\"token comment\">// await stream.allReady;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> didError <span class=\"token operator\">?</span> <span class=\"token number\">500</span> <span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'&lt;!doctype html&gt;&lt;p&gt;Loading...&lt;/p&gt;&lt;script src=\"clientrender.js\"&gt;&lt;/script&gt;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>See the <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/14c2be8dac2d5482fda8a0906a31d239df8551fc/packages/react-dom/src/server/ReactDOMFizzServerBrowser.js#L27-L35\">full list of options</a>.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>This API depends on <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">Web Streams</a>. For Node.js, use <a href=\"/react/react-dom-server#rendertopipeablestream\"><code class=\"language-javascript\">renderToPipeableStream</code></a> instead.</p>\n</div>\n\n<h3 id=\"rendertonodestream\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertonodestream\"></a><code class=\"language-javascript\">renderToNodeStream()</code>  (Deprecated) </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToNodeStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderiza un elemento React a su HTML inicial. Devuelve un <a class=\"external-link\" href=\"https://nodejs.org/api/stream.html#stream_readable_streams\">Readable stream de Node.js</a> que genera una cadena HTML. La salida HTML de este flujo es exactamente igual a lo que devolver\u00eda <a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">ReactDOMServer.renderToString</code></a> Puede usar este m\u00e9todo para generar HTML en el servidor y enviar el marcado en la solicitud inicial para que las p\u00e1ginas se carguen m\u00e1s r\u00e1pido y permitir que los motores de b\u00fasqueda rastreen sus p\u00e1ginas con fines de SEO.</p>\n<p>Si llamas <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> en un nodo que ya tiene este marcado de servidor, React lo conservar\u00e1 y solo adjuntar\u00e1 controladores de eventos, lo que te permitir\u00e1 tener una experiencia de primera carga muy eficaz.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Solo para el servidor. Esta API no est\u00e1 disponible en el navegador.</p>\n<p>El flujo devuelto por este m\u00e9todo devolver\u00e1 un flujo de bytes codificado en utf-8. Si necesita un flujo en otra codificaci\u00f3n, observa un proyecto como <a class=\"external-link\" href=\"https://www.npmjs.com/package/iconv-lite\">iconv-lite</a>, que proporciona flujos de transformaci\u00f3n para la transcodificaci\u00f3n de texto.</p>\n</div>\n\n<h3 id=\"rendertostaticnodestream\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertostaticnodestream\"></a><code class=\"language-javascript\">renderToStaticNodeStream()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticNodeStream</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Similar a <a href=\"/react/react-dom-server#rendertonodestream\"><code class=\"language-javascript\">renderToNodeStream</code></a>, excepto que esto no crea atributos DOM adicionales que React usa internamente, como <code class=\"language-javascript\">data-reactroot</code>. Esto es \u00fatil si desea utilizar React como un simple generador de p\u00e1ginas est\u00e1ticas, ya que eliminar los atributos adicionales puede ahorrar algunos bytes.</p>\n<p>La salida HTML de este flujo es exactamente igual a lo que <a href=\"/react/react-dom-server#rendertostaticmarkup\"><code class=\"language-javascript\">ReactDOMServer.renderToStaticMarkup</code></a> devolver\u00eda.</p>\n<p>Si planeas usar React en el cliente para hacer que el marcado sea interactivo, no use este m\u00e9todo. En su lugar, utilice <a href=\"/react/react-dom-server#rendertonodestream\"><code class=\"language-javascript\">renderToNodeStream</code></a> en el servidor y <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> en el cliente.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Solo para el servidor. Esta API no est\u00e1 disponible en el navegador.</p>\n<p>El flujo devuelto por este m\u00e9todo devolver\u00e1 un flujo de bytes codificado en utf-8. Si necesita un flujo en otra codificaci\u00f3n, chequea un proyecto como <a class=\"external-link\" href=\"https://www.npmjs.com/package/iconv-lite\">iconv-lite</a>, que proporciona flujos de transformaci\u00f3n para la transcodificaci\u00f3n de texto.</p>\n</div>\n\n<h3 id=\"rendertostring\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertostring\"></a><code class=\"language-javascript\">renderToString()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderiza un elemento React a su HTML inicial. React devolver\u00e1 HTML en una cadena de texto. Puedes usar este m\u00e9todo para generar HTML en el servidor y enviar el marcado en la solicitud inicial para que las p\u00e1ginas se carguen m\u00e1s r\u00e1pido y permitir que los motores de b\u00fasqueda rastreen tus p\u00e1ginas con fines de SEO.</p>\n<p>Si llamas <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> a un nodo que ya tiene este marcado desde el servidor, React lo conservar\u00e1 y solo adjuntar\u00e1 los controladores de eventos, lo que te permitir\u00e1 tener una experiencia de primera carga muy eficaz.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Esta API tiene compatibilidad limitada con Suspense y no permite realizar <em>streaming</em>.</p>\n<p>En el servidor, se recomienda usar en cambio, o bien <a href=\"/react/react-dom-server#rendertopipeablestream\"><code class=\"language-javascript\">renderToPipeableStream</code></a> (para Node.js) o <a href=\"/react/react-dom-server#rendertoreadablestream\"><code class=\"language-javascript\">renderToReadableStream</code></a> (para Streams Web).</p>\n</div>\n\n<h3 id=\"rendertostaticmarkup\"><a class=\"anchor\" href=\"/react/react-dom-server#rendertostaticmarkup\"></a><code class=\"language-javascript\">renderToStaticMarkup()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactDOMServer<span class=\"token punctuation\">.</span><span class=\"token function\">renderToStaticMarkup</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Similar a <a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">renderToString</code></a>, excepto que esto no crea atributos DOM adicionales que React usa internamente, como <code class=\"language-javascript\">data-reactroot</code>. Esto es \u00fatil si desea utilizar React como un simple generador de p\u00e1ginas est\u00e1ticas, ya que eliminar los atributos adicionales puede ahorrar algunos bytes.</p>\n<p>Si planeas usar React en el cliente para hacer que el marcado sea interactivo, no uses este m\u00e9todo. En su lugar, usa <a href=\"/react/react-dom-server#rendertostring\"><code class=\"language-javascript\">renderToString</code></a> en el servidor y <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a> en el cliente.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-react-dom-server.md\">Edit this page</a></p></div></article>", "path": "/react/react-dom-server", "nav": ["/react/react-dom-client", "/react/dom-elements"]}, {"key": "Elementos DOM", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React implementa un sistema DOM independiente del navegador, por motivos de rendimiento y compatibilidad entre navegadores. Esto nos dio la oportunidad de pulir algunos detalles en las implementaciones del DOM en el navegador.</p>\n<p>En React, todas las propiedades y atributos (incluidos los manejadores de eventos) deben escribirse en estilo <em>camelCase</em>. Por ejemplo, el atributo HTML <code class=\"language-javascript\">tabindex</code> corresponde al atributo <code class=\"language-javascript\">tabIndex</code> en React. Los atributos tipo <code class=\"language-javascript\">aria-*</code> y <code class=\"language-javascript\">data-*</code> son la excepci\u00f3n y deben escribirse en min\u00fasculas. Por ejemplo, <code class=\"language-javascript\">aria-label</code> en HTML tambi\u00e9n es <code class=\"language-javascript\">aria-label</code> en React.</p>\n<h2 id=\"differences-in-attributes\"><a class=\"anchor\" href=\"/react/dom-elements#differences-in-attributes\"></a>Diferencias en los atributos </h2>\n<p>Hay una serie de atributos HTML que funcionan de manera diferente en React.</p>\n<h3 id=\"checked\"><a class=\"anchor\" href=\"/react/dom-elements#checked\"></a>checked </h3>\n<p>El atributo <code class=\"language-javascript\">checked</code> es compatible con los componentes <code class=\"language-javascript\">&lt;input&gt;</code> tipo <code class=\"language-javascript\">checkbox</code> o <code class=\"language-javascript\">radio</code>. Lo puedes usar para establecer si el componente est\u00e1 marcado. Esto es \u00fatil para construir componentes controlados. <code class=\"language-javascript\">defaultChecked</code> es el equivalente no controlado; solo establece si el componente est\u00e1 marcado cuando se monta por primera vez.</p>\n<h3 id=\"classname\"><a class=\"anchor\" href=\"/react/dom-elements#classname\"></a>className </h3>\n<p>Para especificar una clase CSS, usa el atributo <code class=\"language-javascript\">className</code>. Esto aplica a todos los elementos regulares de DOM y SVG como <code class=\"language-javascript\">&lt;div&gt;</code>, <code class=\"language-javascript\">&lt;a&gt;</code>, y otros.</p>\n<p>Si usas React con Web Components (lo cual no es com\u00fan), usa el atributo <code class=\"language-javascript\">class</code> en lugar de <code class=\"language-javascript\">className</code>.</p>\n<h3 id=\"dangerouslysetinnerhtml\"><a class=\"anchor\" href=\"/react/dom-elements#dangerouslysetinnerhtml\"></a>dangerouslySetInnerHTML </h3>\n<p>En React, <code class=\"language-javascript\">dangerouslySetInnerHTML</code> es el atributo que reemplaza a <code class=\"language-javascript\">innerHTML</code> (propiedad DOM). Significa \u201cestablecer HTML interno peligrosamente\u201d. En general, es riesgoso establecer contenido HTML desde el c\u00f3digo, porque puedes exponer inadvertidamente a tus usuarios a un ataque <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/Cross-site_scripting\"><em>cross-site scripting</em> (XSS)</a>. Por lo tanto, para establecer contenido HTML directamente desde React, debes usar el atributo <code class=\"language-javascript\">dangerouslySetInnerHTML</code> y pasarle un objeto con una propiedad <code class=\"language-javascript\">__html</code>, como recordatorio de que es peligroso. Por ejemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createMarkup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">__html</span><span class=\"token operator\">:</span> <span class=\"token string\">'First &amp;middot; Second'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">createMarkup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"htmlfor\"><a class=\"anchor\" href=\"/react/dom-elements#htmlfor\"></a>htmlFor </h3>\n<p>Ya que <code class=\"language-javascript\">for</code> es una palabra reservada en Javascript, los elementos de React usan el atributo <code class=\"language-javascript\">htmlFor</code> en su lugar.</p>\n<h3 id=\"onchange\"><a class=\"anchor\" href=\"/react/dom-elements#onchange\"></a>onChange </h3>\n<p>El evento <code class=\"language-javascript\">onChange</code> se comporta seg\u00fan lo esperado: cuando el campo de un formulario cambia, se lanza el evento. No usamos intencionalmente el comportamiento existente en los navegadores, porque <code class=\"language-javascript\">onChange</code> no es un nombre adecuado para lo que hace y React depende de este evento para manejar la entrada del usuario en tiempo real.</p>\n<h3 id=\"selected\"><a class=\"anchor\" href=\"/react/dom-elements#selected\"></a>selected </h3>\n<p>Si quieres marcar un elemento <code class=\"language-javascript\">&lt;option&gt;</code> como seleccionado, puedes, en cambio, referenciar el valor de esa opci\u00f3n en la prop <code class=\"language-javascript\">value</code> de su <code class=\"language-javascript\">&lt;select&gt;</code>. Consulta <a href=\"/react/forms#the-select-tag\">\u201cLa etiqueta select\u201d</a> para instrucciones detalladas.</p>\n<h3 id=\"style\"><a class=\"anchor\" href=\"/react/dom-elements#style\"></a>style </h3>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Algunos ejemplos en la documentaci\u00f3n usan el atributo <code class=\"language-javascript\">style</code> por conveniencia, pero <strong>generalmente no se recomienda usar el atributo <code class=\"language-javascript\">style</code> como medio principal para estilizar elementos</strong>. En la mayor\u00eda de los casos, <a href=\"/react/dom-elements#classname\"><code class=\"language-javascript\">className</code></a> debe ser usado para hacer referencia a clases definidas en documentos CSS externos. En React, el atributo <code class=\"language-javascript\">style</code> se usa con mayor frecuencia para a\u00f1adir estilos calculados din\u00e1micamente al momento de renderizaci\u00f3n. Revisa tambi\u00e9n <a href=\"/react/faq-styling\">Preguntas Frecuentes: Estilo y CSS</a>.</p>\n</div>\n<p>El atributo <code class=\"language-javascript\">style</code> acepta un objeto de Javascript con propiedades escritas en formato <em>camelCase</em>, en lugar de un <em>string</em> CSS. Esto es consistente con la propiedad DOM <code class=\"language-javascript\">style</code> en Javascript, es m\u00e1s eficiente y previene vulnerabilidades XSS. Por ejemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> divStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">backgroundImage</span><span class=\"token operator\">:</span> <span class=\"token string\">'url('</span> <span class=\"token operator\">+</span> imgUrl <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorldComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>divStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello World!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ten en cuenta que estos estilos no reciben autom\u00e1ticamente los prefijos de compatibilidad. Para ser compatible con navegadores antiguos, debes proveer las propiedades correspondientes:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> divStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">WebkitTransition</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// nota la 'W' may\u00fascula aqu\u00ed </span>\n  <span class=\"token literal-property property\">msTransition</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span> <span class=\"token comment\">// 'ms' es el \u00fanico prefijo de proveedor de navegador en min\u00fascula</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ComponentWithTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>divStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">This should work cross-browser</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Las propiedades del objeto aceptado por <code class=\"language-javascript\">style</code> tienen formato camelCase para ser consistentes con la forma en que se accede a los estilos de los nodos DOM en JS (p.ej <code class=\"language-javascript\">node.style.backgroundImage</code>). Los prefijos de compatibilidad, <a class=\"external-link\" href=\"https://www.andismith.com/blogs/2012/02/modernizr-prefixed/\">a excepci\u00f3n de <code class=\"language-javascript\">ms</code></a>, deben iniciarse con letra may\u00fascula. Por esto <code class=\"language-javascript\">WebkitTransition</code> tiene una \u201cW\u201d may\u00fascula. </p>\n<p>React adjuntar\u00e1 autom\u00e1ticamente el sufijo \u201cpx\u201d a ciertas propiedades num\u00e9ricas. Si quieres usar unidades diferentes a \u201cpx\u201d, especifica el valor como un <em>string</em> con la unidad deseada. Por ejemplo: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Estilo resultante: '10px'</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello World!\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// Estilo resultante: '10%'</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'10%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello World!\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Sin embargo, no todas las propiedades num\u00e9ricas del objeto <code class=\"language-javascript\">style</code> son convertidas a <em>strings</em> con p\u00edxeles. Ciertas propiedades se mantienen sin unidad (p.ej <code class=\"language-javascript\">zoom</code>, <code class=\"language-javascript\">order</code>, <code class=\"language-javascript\">flex</code>). Una lista completa de las propiedades sin unidad puede verse <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/4131af3e4bf52f3a003537ec95a1655147c81270/src/renderers/dom/shared/CSSProperty.js#L15-L59\">aqu\u00ed</a>.</p>\n<h3 id=\"suppresscontenteditablewarning\"><a class=\"anchor\" href=\"/react/dom-elements#suppresscontenteditablewarning\"></a>suppressContentEditableWarning </h3>\n<p>Normalmente, hay una advertencia cuando un elemento con hijos tambi\u00e9n se marca como <code class=\"language-javascript\">contentEditable</code>, porque no funcionar\u00e1. Este atributo suprime esa advertencia. No lo uses a menos que est\u00e9s construyendo una biblioteca como <a class=\"external-link\" href=\"https://facebook.github.io/draft-js/\">Draft.js</a> que administra <code class=\"language-javascript\">contentEditable</code> manualmente.</p>\n<h3 id=\"suppresshydrationwarning\"><a class=\"anchor\" href=\"/react/dom-elements#suppresshydrationwarning\"></a>suppressHydrationWarning </h3>\n<p>Si usas renderizaci\u00f3n de React del lado del servidor, normalmente hay una advertencia cuando el servidor y el cliente presentan contenido diferente. Sin embargo, en algunos casos raros, es muy dif\u00edcil o imposible garantizar una coincidencia exacta. Por ejemplo, se espera que las marcas de tiempo difieran en el servidor y en el cliente. </p>\n<p>Si estableces <code class=\"language-javascript\">suppressHydrationWarning</code> como <code class=\"language-javascript\">true</code>, React no te advertir\u00e1 sobre los desajustes en los atributos y el contenido de ese elemento. Solo funciona a un nivel de profundidad y est\u00e1 dise\u00f1ado para ser utilizado como una v\u00eda de escape. No lo uses en exceso. Puedes leer m\u00e1s sobre hidrataci\u00f3n en la <a href=\"/react/react-dom-client#hydrateroot\">documentaci\u00f3n de <code class=\"language-javascript\">ReactDOM.hydrateRoot()</code></a>.</p>\n<h3 id=\"value\"><a class=\"anchor\" href=\"/react/dom-elements#value\"></a>value </h3>\n<p>El atributo <code class=\"language-javascript\">value</code> es compatible con los componentes <code class=\"language-javascript\">&lt;input&gt;</code>, <code class=\"language-javascript\">&lt;select&gt;</code> y <code class=\"language-javascript\">&lt;textarea&gt;</code>. Puedes usarlo para establecer el valor del componente. Esto es \u00fatil para construir componentes controlados. <code class=\"language-javascript\">defaultValue</code> es el equivalente no controlado, que establece el valor del componente cuando se monta por primera vez.</p>\n<h2 id=\"all-supported-html-attributes\"><a class=\"anchor\" href=\"/react/dom-elements#all-supported-html-attributes\"></a>Todos los atributos HTML admitidos </h2>\n<p>A partir de React 16, se admite cualquier atributo de DOM est\u00e1ndar <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2017/09/08/dom-attributes-in-react-16.html\">o personalizado</a>.</p>\n<p>React siempre ha proporcionado una API para el DOM centrada en JavaScript. Dado que los componentes de React a menudo reciben tanto props personalizados como props relacionados con el DOM, React utiliza la convenci\u00f3n <code class=\"language-javascript\">camelCase</code> igual que las APIs del DOM:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>      <span class=\"token comment\">// Como la API del DOM node.tabIndex</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Button<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span> <span class=\"token comment\">// Como la API del DOM node.className</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">readOnly</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>  <span class=\"token comment\">// Como la API del DOM node.readOnly</span></code></pre></div>\n<p>Estos props funcionan de manera similar a sus atributos HTML correspondientes, con la excepci\u00f3n de los casos especiales documentados anteriormente.</p>\n<p>Algunos de los atributos DOM admitidos por React son:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">accept acceptCharset accessKey action allowFullScreen alt async autoComplete\nautoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked\ncite classID className colSpan cols content contentEditable contextMenu controls\ncontrolsList coords crossOrigin data dateTime default defer dir disabled\ndownload draggable encType form formAction formEncType formMethod formNoValidate\nformTarget frameBorder headers height hidden high href hrefLang htmlFor\nhttpEquiv icon id inputMode integrity is keyParams keyType kind label lang list\nloop low manifest marginHeight marginWidth max maxLength media mediaGroup method\nmin minLength multiple muted name noValidate nonce open optimum pattern\nplaceholder poster preload profile radioGroup readOnly rel required reversed\nrole rowSpan rows sandbox scope scoped scrolling seamless selected shape size\nsizes span spellCheck src srcDoc srcLang srcSet start step style summary\ntabIndex target title type useMap value width wmode wrap</code></pre></div>\n<p>Similarmente, se admiten todos los atributos SVG: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">accentHeight accumulate additive alignmentBaseline allowReorder alphabetic\namplitude arabicForm ascent attributeName attributeType autoReverse azimuth\nbaseFrequency baseProfile baselineShift bbox begin bias by calcMode capHeight\nclip clipPath clipPathUnits clipRule colorInterpolation\ncolorInterpolationFilters colorProfile colorRendering contentScriptType\ncontentStyleType cursor cx cy d decelerate descent diffuseConstant direction\ndisplay divisor dominantBaseline dur dx dy edgeMode elevation enableBackground\nend exponent externalResourcesRequired fill fillOpacity fillRule filter\nfilterRes filterUnits floodColor floodOpacity focusable fontFamily fontSize\nfontSizeAdjust fontStretch fontStyle fontVariant fontWeight format from fx fy\ng1 g2 glyphName glyphOrientationHorizontal glyphOrientationVertical glyphRef\ngradientTransform gradientUnits hanging horizAdvX horizOriginX ideographic\nimageRendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength\nkerning keyPoints keySplines keyTimes lengthAdjust letterSpacing lightingColor\nlimitingConeAngle local markerEnd markerHeight markerMid markerStart\nmarkerUnits markerWidth mask maskContentUnits maskUnits mathematical mode\nnumOctaves offset opacity operator order orient orientation origin overflow\noverlinePosition overlineThickness paintOrder panose1 pathLength\npatternContentUnits patternTransform patternUnits pointerEvents points\npointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits\nr radius refX refY renderingIntent repeatCount repeatDur requiredExtensions\nrequiredFeatures restart result rotate rx ry scale seed shapeRendering slope\nspacing specularConstant specularExponent speed spreadMethod startOffset\nstdDeviation stemh stemv stitchTiles stopColor stopOpacity\nstrikethroughPosition strikethroughThickness string stroke strokeDasharray\nstrokeDashoffset strokeLinecap strokeLinejoin strokeMiterlimit strokeOpacity\nstrokeWidth surfaceScale systemLanguage tableValues targetX targetY textAnchor\ntextDecoration textLength textRendering to transform u1 u2 underlinePosition\nunderlineThickness unicode unicodeBidi unicodeRange unitsPerEm vAlphabetic\nvHanging vIdeographic vMathematical values vectorEffect version vertAdvY\nvertOriginX vertOriginY viewBox viewTarget visibility widths wordSpacing\nwritingMode x x1 x2 xChannelSelector xHeight xlinkActuate xlinkArcrole\nxlinkHref xlinkRole xlinkShow xlinkTitle xlinkType xmlns xmlnsXlink xmlBase\nxmlLang xmlSpace y y1 y2 yChannelSelector z zoomAndPan</code></pre></div>\n<p>Tambi\u00e9n puedes usar atributos personalizados siempre que est\u00e9n completamente en min\u00fasculas.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-dom-elements.md\">Edit this page</a></p></div></article>", "path": "/react/dom-elements", "nav": ["/react/react-dom-server", "/react/events"]}, {"key": "SyntheticEvent", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Esta gu\u00eda de referencia documenta el contenedor <code class=\"language-javascript\">SyntheticEvent</code> que forma parte del sistema de eventos de React. Consulte la gu\u00eda <a href=\"/react/handling-events\">Manejando eventos</a> para obtener m\u00e1s informaci\u00f3n.</p>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/events#overview\"></a>Resumen </h2>\n<p>A tus manejadores de eventos se les pasar\u00e1n instancias de <code class=\"language-javascript\">SyntheticEvent</code>, un contenedor agn\u00f3stico al navegador alrededor del evento nativo del navegador. Tiene la misma interfaz que el evento nativo del navegador, incluyendo <code class=\"language-javascript\">stopPropagation()</code> y <code class=\"language-javascript\">preventDefault()</code>, excepto que los eventos funcionan de manera id\u00e9ntica en todos los navegadores.</p>\n<p>Si encuentras que necesitas el evento del navegador subyacente por alguna raz\u00f3n, simplemente use el atributo <code class=\"language-javascript\">nativeEvent</code> para obtenerlo. Los eventos sint\u00e9ticos son diferentes y no tienen una correspondencia directa con los eventos nativos del navegador. Por ejemplo en <code class=\"language-javascript\">onMouseLeave</code> <code class=\"language-javascript\">event.nativeEvent</code> apuntar\u00e1 al evento <code class=\"language-javascript\">mouseout</code>. La correspondencia espec\u00edfica no es parte de la API p\u00fablica y puede cambiar en cualquier momento. Cada objeto <code class=\"language-javascript\">SyntheticEvent</code> tiene los siguientes atributos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean bubbles\nboolean cancelable\nDOMEventTarget currentTarget\nboolean defaultPrevented\nnumber eventPhase\nboolean isTrusted\nDOMEvent nativeEvent\n<span class=\"token keyword\">void</span> <span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nboolean <span class=\"token function\">isDefaultPrevented</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nboolean <span class=\"token function\">isPropagationStopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">persist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nDOMEventTarget target\nnumber timeStamp\nstring type</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>A partir de la versi\u00f3n 17, <code class=\"language-javascript\">e.persist()</code> no hace nada porque <code class=\"language-javascript\">SyntheticEvent</code> ya no se <a href=\"/react/legacy-event-pooling\">reutiliza</a>.</p>\n</div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>A partir de la versi\u00f3n 0.14, devolver <code class=\"language-javascript\">false</code> desde un controlador de eventos ya no detendr\u00e1 la propagaci\u00f3n de eventos. En su lugar, <code class=\"language-javascript\">e.stopPropagation()</code> o <code class=\"language-javascript\">e.preventDefault()</code> deben activarse manualmente, seg\u00fan corresponda.</p>\n</div>\n<h2 id=\"supported-events\"><a class=\"anchor\" href=\"/react/events#supported-events\"></a>Eventos Soportados </h2>\n<p>React normaliza los eventos para que tengan propiedades consistentes en diferentes navegadores.</p>\n<p>Los controladores de eventos a continuaci\u00f3n se activan por un evento en la fase de propagaci\u00f3n. Para registrar un controlador de eventos llamado en la fase de captura, agrega <code class=\"language-javascript\">Capture</code> al nombre del evento; por ejemplo, en lugar de usar <code class=\"language-javascript\">onClick</code>, usar\u00edas<code class=\"language-javascript\">onClickCapture</code> para manejar el evento de click en la fase de captura.</p>\n<ul>\n<li><a href=\"/react/events#clipboard-events\">Eventos del Portapapeles</a></li>\n<li><a href=\"/react/events#composition-events\">Eventos de Composici\u00f3n</a></li>\n<li><a href=\"/react/events#keyboard-events\">Eventos del Teclado</a></li>\n<li><a href=\"/react/events#focus-events\">Eventos de Enfoque</a></li>\n<li><a href=\"/react/events#form-events\">Eventos de Formulario</a></li>\n<li><a href=\"/react/events#generic-events\">Eventos gen\u00e9ricos</a></li>\n<li><a href=\"/react/events#mouse-events\">Eventos del Rat\u00f3n</a></li>\n<li><a href=\"/react/events#pointer-events\">Eventos del Puntero</a></li>\n<li><a href=\"/react/events#selection-events\">Eventos de Selecci\u00f3n</a></li>\n<li><a href=\"/react/events#touch-events\">Eventos T\u00e1ctiles</a></li>\n<li><a href=\"/react/events#ui-events\">Eventos de la Interfaz de Usuario</a></li>\n<li><a href=\"/react/events#wheel-events\">Eventos de la Rueda del Rat\u00f3n</a></li>\n<li><a href=\"/react/events#media-events\">Eventos de Medios</a></li>\n<li><a href=\"/react/events#image-events\">Eventos de Imagen</a></li>\n<li><a href=\"/react/events#animation-events\">Eventos de Animaci\u00f3n</a></li>\n<li><a href=\"/react/events#transition-events\">Eventos de Transici\u00f3n</a></li>\n<li><a href=\"/react/events#other-events\">Otros Eventos</a></li>\n</ul>\n\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/events#reference\"></a>Referencia </h2>\n<h3 id=\"clipboard-events\"><a class=\"anchor\" href=\"/react/events#clipboard-events\"></a>Eventos del Portapapeles </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onCopy onCut onPaste</code></pre></div>\n<p>Propiedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">DOMDataTransfer clipboardData</code></pre></div>\n\n<h3 id=\"composition-events\"><a class=\"anchor\" href=\"/react/events#composition-events\"></a>Eventos de Composici\u00f3n </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onCompositionEnd onCompositionStart onCompositionUpdate</code></pre></div>\n<p>Propiedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">string data</code></pre></div>\n\n<h3 id=\"keyboard-events\"><a class=\"anchor\" href=\"/react/events#keyboard-events\"></a>Eventos del Teclado </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onKeyDown onKeyPress onKeyUp</code></pre></div>\n<p>Propiedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean altKey\nnumber charCode\nboolean ctrlKey\nboolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\nstring key\nnumber keyCode\nstring locale\nnumber location\nboolean metaKey\nboolean repeat\nboolean shiftKey\nnumber which</code></pre></div>\n<p>La propiedad <code class=\"language-javascript\">key</code> puede tomar cualquiera de los valores documentados en <a class=\"external-link\" href=\"https://www.w3.org/TR/uievents-key/#named-key-attribute-values\">la especificaci\u00f3n de DOM Level 3 Events</a>.</p>\n\n<h3 id=\"focus-events\"><a class=\"anchor\" href=\"/react/events#focus-events\"></a>Eventos de Enfoque </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onFocus onBlur</code></pre></div>\n<p>Estos eventos de enfoque funcionan en todos los elementos en React DOM, no s\u00f3lo en los elementos de formulario.</p>\n<p>Propiedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">DOMEventTarget relatedTarget</code></pre></div>\n<h4 id=\"onfocus\"><a class=\"anchor\" href=\"/react/events#onfocus\"></a>onFocus </h4>\n<p>El manejador de evento <code class=\"language-javascript\">onFocus</code> se llama cuando el elemento (o alg\u00fan elemento dentro de \u00e9l) recibe el foco. Por ejemplo, se llama cuando el usuario hace clic en una entrada de texto.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">onFocus</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Focused on input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onFocus is triggered when you click this input.<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"onblur\"><a class=\"anchor\" href=\"/react/events#onblur\"></a>onBlur </h4>\n<p>El manejador de evento <code class=\"language-javascript\">onBlur</code> se llama cuando el foco ha dejado el elemento (o ha dejado alg\u00fan elemento dentro de \u00e9l). Por ejemplo, se llama cuando el usuario hace clic fuera de una entrada de texto que tiene el foco.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">onBlur</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Triggered because this input lost focus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onBlur is triggered when you click this input and then you click outside of it.<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"detecting-focus-entering-and-leaving\"><a class=\"anchor\" href=\"/react/events#detecting-focus-entering-and-leaving\"></a>Detectar la entrada y salida del foco </h4>\n<p>Puedes usar <code class=\"language-javascript\">currentTarget</code> y <code class=\"language-javascript\">relatedTarget</code> para diferenciar si los eventos de foco y p\u00e9rdida de foco se originan desde <em>fuera</em> del elemento padre. Aqu\u00ed hay una demo que puedes copiar y pegar que muestra como detectar el foco en un hijo, el foco sobre el propio elemento y cuando el foco entra o sale de todo el sub\u00e1rbol.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n      <span class=\"token attr-name\">tabIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onFocus</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focused self'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focused child'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>relatedTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Not triggered when swapping focus between children</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus entered self'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onBlur</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unfocused self'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unfocused child'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>relatedTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Not triggered when swapping focus between children</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus left self'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<h3 id=\"form-events\"><a class=\"anchor\" href=\"/react/events#form-events\"></a>Eventos de Formulario </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onChange onInput onInvalid onReset onSubmit </code></pre></div>\n<p>Para obtener m\u00e1s informaci\u00f3n sobre el evento onChange, consulte <a href=\"/react/forms\">Formularios</a>.</p>\n\n<h3 id=\"generic-events\"><a class=\"anchor\" href=\"/react/events#generic-events\"></a>Eventos gen\u00e9ricos </h3>\n<p>Nombres de eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onError onLoad</code></pre></div>\n\n<h3 id=\"mouse-events\"><a class=\"anchor\" href=\"/react/events#mouse-events\"></a>Eventos del Rat\u00f3n </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit\nonDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave\nonMouseMove onMouseOut onMouseOver onMouseUp</code></pre></div>\n<p>Los eventos <code class=\"language-javascript\">onMouseEnter</code> y <code class=\"language-javascript\">onMouseLeave</code> se propagan desde el elemento que se deja hasta el que se ingresa en lugar del bubbling normal y no tienen una fase de captura.</p>\n<p>Propiedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean altKey\nnumber button\nnumber buttons\nnumber clientX\nnumber clientY\nboolean ctrlKey\nboolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\nboolean metaKey\nnumber pageX\nnumber pageY\nDOMEventTarget relatedTarget\nnumber screenX\nnumber screenY\nboolean shiftKey</code></pre></div>\n\n<h3 id=\"pointer-events\"><a class=\"anchor\" href=\"/react/events#pointer-events\"></a>Eventos Puntero </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onPointerDown onPointerMove onPointerUp onPointerCancel onGotPointerCapture\nonLostPointerCapture onPointerEnter onPointerLeave onPointerOver onPointerOut</code></pre></div>\n<p>Los eventos <code class=\"language-javascript\">onPointerEnter</code> y <code class=\"language-javascript\">onPointerLeave</code> se propagan desde el elemento que se deja hasta el que se ingresa en lugar del bubbling normal y no tienen una fase de captura.</p>\n<p>Propiedades:</p>\n<p>Como se define en <a class=\"external-link\" href=\"https://www.w3.org/TR/pointerevents/\">la especificaci\u00f3n W3</a>, los eventos de puntero extienden los <a href=\"/react/events#mouse-events\">Eventos de Rat\u00f3n</a> con las siguientes propiedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">number pointerId\nnumber width\nnumber height\nnumber pressure\nnumber tangentialPressure\nnumber tiltX\nnumber tiltY\nnumber twist\nstring pointerType\nboolean isPrimary</code></pre></div>\n<p>Una nota sobre la compatibilidad con varios navegadores:</p>\n<p>Los eventos de puntero a\u00fan no son compatibles con todos los navegadores (en el momento de escritura de este art\u00edculo, los navegadores compatibles incluyen: Chrome, Firefox, Edge e Internet Explorer). React no admite <em>polyfills</em> deliberadamente para otros navegadores, ya que un <em>polyfill</em> de conformidad est\u00e1ndar aumentar\u00eda significativamente el tama\u00f1o del paquete de <code class=\"language-javascript\">react-dom</code>.</p>\n<p>Si su aplicaci\u00f3n requiere eventos de puntero, le recomendamos que agregue un polyfill de evento de puntero de terceros.</p>\n\n<h3 id=\"selection-events\"><a class=\"anchor\" href=\"/react/events#selection-events\"></a>Eventos de Selecci\u00f3n </h3>\n<p>Nombres de Eventos</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onSelect</code></pre></div>\n\n<h3 id=\"touch-events\"><a class=\"anchor\" href=\"/react/events#touch-events\"></a>Eventos T\u00e1ctiles </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onTouchCancel onTouchEnd onTouchMove onTouchStart</code></pre></div>\n<p>Propiedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">boolean altKey\nDOMTouchList changedTouches\nboolean ctrlKey\nboolean <span class=\"token function\">getModifierState</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\nboolean metaKey\nboolean shiftKey\nDOMTouchList targetTouches\nDOMTouchList touches</code></pre></div>\n\n<h3 id=\"ui-events\"><a class=\"anchor\" href=\"/react/events#ui-events\"></a>Eventos de la Interfaz de Usuario </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onScroll</code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>A partir de React 17, el event <code class=\"language-javascript\">onScroll</code> <strong>no hace <em>bubbling</em></strong> en React. Esto se alinea con el comportamiento del navegador y previene confusiones cuando un elemento anidado con <em>scroll</em> dispara eventos en un padre distante.</p>\n</div>\n<p>Properties:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">number detail\nDOMAbstractView view</code></pre></div>\n\n<h3 id=\"wheel-events\"><a class=\"anchor\" href=\"/react/events#wheel-events\"></a>Eventos de la Rueda del Rat\u00f3n </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onWheel</code></pre></div>\n<p>Propiedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">number deltaMode\nnumber deltaX\nnumber deltaY\nnumber deltaZ</code></pre></div>\n\n<h3 id=\"media-events\"><a class=\"anchor\" href=\"/react/events#media-events\"></a>Eventos de Medios </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted\nonEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay\nonPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend\nonTimeUpdate onVolumeChange onWaiting</code></pre></div>\n\n<h3 id=\"image-events\"><a class=\"anchor\" href=\"/react/events#image-events\"></a>Eventos de Imagen </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onLoad onError</code></pre></div>\n\n<h3 id=\"animation-events\"><a class=\"anchor\" href=\"/react/events#animation-events\"></a>Eventos de Animaci\u00f3n </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onAnimationStart onAnimationEnd onAnimationIteration</code></pre></div>\n<p>Propiedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">string animationName\nstring pseudoElement\nfloat elapsedTime</code></pre></div>\n\n<h3 id=\"transition-events\"><a class=\"anchor\" href=\"/react/events#transition-events\"></a>Eventos de Transici\u00f3n </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onTransitionEnd</code></pre></div>\n<p>Propiedades:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">string propertyName\nstring pseudoElement\nfloat elapsedTime</code></pre></div>\n\n<h3 id=\"other-events\"><a class=\"anchor\" href=\"/react/events#other-events\"></a>Otros Eventos </h3>\n<p>Nombres de Eventos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">onToggle</code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-events.md\">Edit this page</a></p></div></article>", "path": "/react/events", "nav": ["/react/dom-elements", "/react/test-utils"]}, {"key": "Utilidades para pruebas", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><strong>Importando</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> ReactTestUtils <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">var</span> ReactTestUtils <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES5 con npm</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/test-utils#overview\"></a>Introducci\u00f3n </h2>\n<p><code class=\"language-javascript\">ReactTestUtils</code> facilita probar los componentes de React en cualquiera de los frameworks de pruebas que elijas. En Facebook usamos <a class=\"external-link\" href=\"https://facebook.github.io/jest/\">Jest</a> para realizar las pruebas de JavaScript sin problemas. Aprende como iniciar con Jest en el <a class=\"external-link\" href=\"https://jestjs.io/docs/tutorial-react\">tutorial para React</a> que se encuentra en el sitio web de Jest.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Recomendamos utilizar <a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a> que est\u00e1 dise\u00f1ada para permitir e incentivar la escritura de las pruebas para que usen los componentes de la misma forma en que lo har\u00edan los usuarios finales.</p>\n<p>Para versiones de React &lt;= 16 la biblioteca <a class=\"external-link\" href=\"https://airbnb.io/enzyme/\">Enzyme</a> facilita el proceso de realizar aserciones, manipular y navegar por los resultados de tus componentes de React.</p>\n</div>\n<ul>\n<li><a href=\"/react/test-utils#act\"><code class=\"language-javascript\">act()</code></a></li>\n<li><a href=\"/react/test-utils#mockcomponent\"><code class=\"language-javascript\">mockComponent()</code></a></li>\n<li><a href=\"/react/test-utils#iselement\"><code class=\"language-javascript\">isElement()</code></a></li>\n<li><a href=\"/react/test-utils#iselementoftype\"><code class=\"language-javascript\">isElementOfType()</code></a></li>\n<li><a href=\"/react/test-utils#isdomcomponent\"><code class=\"language-javascript\">isDOMComponent()</code></a></li>\n<li><a href=\"/react/test-utils#iscompositecomponent\"><code class=\"language-javascript\">isCompositeComponent()</code></a></li>\n<li><a href=\"/react/test-utils#iscompositecomponentwithtype\"><code class=\"language-javascript\">isCompositeComponentWithType()</code></a></li>\n<li><a href=\"/react/test-utils#findallinrenderedtree\"><code class=\"language-javascript\">findAllInRenderedTree()</code></a></li>\n<li><a href=\"/react/test-utils#scryrendereddomcomponentswithclass\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithClass()</code></a></li>\n<li><a href=\"/react/test-utils#findrendereddomcomponentwithclass\"><code class=\"language-javascript\">findRenderedDOMComponentWithClass()</code></a></li>\n<li><a href=\"/react/test-utils#scryrendereddomcomponentswithtag\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithTag()</code></a></li>\n<li><a href=\"/react/test-utils#findrendereddomcomponentwithtag\"><code class=\"language-javascript\">findRenderedDOMComponentWithTag()</code></a></li>\n<li><a href=\"/react/test-utils#scryrenderedcomponentswithtype\"><code class=\"language-javascript\">scryRenderedComponentsWithType()</code></a></li>\n<li><a href=\"/react/test-utils#findrenderedcomponentwithtype\"><code class=\"language-javascript\">findRenderedComponentWithType()</code></a></li>\n<li><a href=\"/react/test-utils#renderintodocument\"><code class=\"language-javascript\">renderIntoDocument()</code></a></li>\n<li><a href=\"/react/test-utils#simulate\"><code class=\"language-javascript\">Simulate</code></a></li>\n</ul>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/test-utils#reference\"></a>Referencia </h2>\n<h3 id=\"act\"><a class=\"anchor\" href=\"/react/test-utils#act\"></a><code class=\"language-javascript\">act()</code> </h3>\n<p>Para preparar la asertividad en un componente, debes envolver el c\u00f3digo que lo renderiza y que realiza actualizaciones sobre este en un llamado a <code class=\"language-javascript\">act()</code>. Esto hace que tus pruebas corran de una forma m\u00e1s parecida a como lo hace React en el navegador.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Si usas <code class=\"language-javascript\">react-test-renderer</code>, este tambi\u00e9n provee un m\u00e9todo <code class=\"language-javascript\">act</code> que se comporta de la misma forma.</p>\n</div>\n<p>Por ejemplo, digamos que tenemos este componente <code class=\"language-javascript\">Counter</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          Click me\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Y as\u00ed es como podemos probarlo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'./Counter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can render and update a counter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Prueba la primer renderizaci\u00f3n y componentDidMount</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 0 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 0 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Prueba la segunda renderizaci\u00f3n y componentDidUpdate</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 1 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 1 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No olvides que la ejecuci\u00f3n de eventos del DOM solo funciona cuando el contenedor del DOM es agregado al <code class=\"language-javascript\">document</code>. Puedes utilizar una biblioteca como <a class=\"external-link\" href=\"https://github.com/kentcdodds/react-testing-library\"><code class=\"language-javascript\">react-testing-library</code></a> para reducir todo el c\u00f3digo repetitivo.</p>\n<ul>\n<li>El documento de <a href=\"/react/testing-recipes\"><code class=\"language-javascript\">recetas</code></a> contiene m\u00e1s detalles de c\u00f3mo funciona <code class=\"language-javascript\">act()</code>, con ejemplos y usos.</li>\n</ul>\n\n<h3 id=\"mockcomponent\"><a class=\"anchor\" href=\"/react/test-utils#mockcomponent\"></a><code class=\"language-javascript\">mockComponent()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">mockComponent</span><span class=\"token punctuation\">(</span>\n  componentClass<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>mockTagName<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pasa un m\u00f3dulo de un componente a simular a este m\u00e9todo para mejorarlo con m\u00e9todos \u00fatiles los cuales permiten que sea utilizado como un componente de React simulado. En lugar de renderizar de la forma usual, el componente simplemente se convertir\u00e1 en un <code class=\"language-javascript\">&lt;div&gt;</code> (u otra etiqueta si se proporciona <code class=\"language-javascript\">mockTagName</code>) que contiene cualquiera de los hijos proporcionados.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">mockComponent()</code> es una API heredada. En su lugar, recomendamos usar <a class=\"external-link\" href=\"https://jestjs.io/docs/tutorial-react-native#mock-native-modules-using-jestmock\"><code class=\"language-javascript\">jest.mock()</code></a>.</p>\n</div>\n\n<h3 id=\"iselement\"><a class=\"anchor\" href=\"/react/test-utils#iselement\"></a><code class=\"language-javascript\">isElement()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isElement</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna <code class=\"language-javascript\">true</code> si <code class=\"language-javascript\">element</code> es cualquier elemento de React.</p>\n\n<h3 id=\"iselementoftype\"><a class=\"anchor\" href=\"/react/test-utils#iselementoftype\"></a><code class=\"language-javascript\">isElementOfType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isElementOfType</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna <code class=\"language-javascript\">true</code> si <code class=\"language-javascript\">element</code> es un Elemento de React cuyo tipo es un <code class=\"language-javascript\">componentClass</code> de React.</p>\n\n<h3 id=\"isdomcomponent\"><a class=\"anchor\" href=\"/react/test-utils#isdomcomponent\"></a><code class=\"language-javascript\">isDOMComponent()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isDOMComponent</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna <code class=\"language-javascript\">true</code> si <code class=\"language-javascript\">instance</code> es un componente del DOM (tal como un <code class=\"language-javascript\">&lt;div&gt;</code> o <code class=\"language-javascript\">&lt;span&gt;</code>).</p>\n\n<h3 id=\"iscompositecomponent\"><a class=\"anchor\" href=\"/react/test-utils#iscompositecomponent\"></a><code class=\"language-javascript\">isCompositeComponent()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isCompositeComponent</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna <code class=\"language-javascript\">true</code> si <code class=\"language-javascript\">instance</code> es un componente definido por el usuario, tal como una clase o una funci\u00f3n.</p>\n\n<h3 id=\"iscompositecomponentwithtype\"><a class=\"anchor\" href=\"/react/test-utils#iscompositecomponentwithtype\"></a><code class=\"language-javascript\">isCompositeComponentWithType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">isCompositeComponentWithType</span><span class=\"token punctuation\">(</span>\n  instance<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Retorna <code class=\"language-javascript\">true</code> si <code class=\"language-javascript\">instance</code> es un componente cuyo tipo es un <code class=\"language-javascript\">componentClass</code> de React.</p>\n\n<h3 id=\"findallinrenderedtree\"><a class=\"anchor\" href=\"/react/test-utils#findallinrenderedtree\"></a><code class=\"language-javascript\">findAllInRenderedTree()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findAllInRenderedTree</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  test\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Navega por todos los componentes en <code class=\"language-javascript\">tree</code> y acumula todos los componentes en donde <code class=\"language-javascript\">test(component)</code> sea <code class=\"language-javascript\">true</code>. Esto no es \u00fatil por s\u00ed solo, pero es utilizado como primitiva para otras utilidades de prueba.</p>\n\n<h3 id=\"scryrendereddomcomponentswithclass\"><a class=\"anchor\" href=\"/react/test-utils#scryrendereddomcomponentswithclass\"></a><code class=\"language-javascript\">scryRenderedDOMComponentsWithClass()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">scryRenderedDOMComponentsWithClass</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  className\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encuentra todos los elementos en el DOM de componentes presentes en el \u00e1rbol de renderizado que sean componentes del DOM cuyo nombre de clase sea <code class=\"language-javascript\">className</code>.</p>\n\n<h3 id=\"findrendereddomcomponentwithclass\"><a class=\"anchor\" href=\"/react/test-utils#findrendereddomcomponentwithclass\"></a><code class=\"language-javascript\">findRenderedDOMComponentWithClass()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findRenderedDOMComponentWithClass</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  className\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Igual a <a href=\"/react/test-utils#scryrendereddomcomponentswithclass\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithClass()</code></a> pero espera que solo haya un resultado, y retorna ese \u00fanico resultado, de lo contrario lanza una excepci\u00f3n si hay alg\u00fan otro n\u00famero de coincidencias diferentes a una.</p>\n\n<h3 id=\"scryrendereddomcomponentswithtag\"><a class=\"anchor\" href=\"/react/test-utils#scryrendereddomcomponentswithtag\"></a><code class=\"language-javascript\">scryRenderedDOMComponentsWithTag()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">scryRenderedDOMComponentsWithTag</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  tagName\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encuentra todos los elementos en el DOM de componentes presentes en el \u00e1rbol de renderizado que sean componentes del DOM cuyo nombre de etiqueta sea igual a <code class=\"language-javascript\">tagName</code>.</p>\n\n<h3 id=\"findrendereddomcomponentwithtag\"><a class=\"anchor\" href=\"/react/test-utils#findrendereddomcomponentwithtag\"></a><code class=\"language-javascript\">findRenderedDOMComponentWithTag()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findRenderedDOMComponentWithTag</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  tagName\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Igual a <a href=\"/react/test-utils#scryrendereddomcomponentswithtag\"><code class=\"language-javascript\">scryRenderedDOMComponentsWithTag()</code></a> pero espera que solo haya un resultado y retorna ese \u00fanico resultado, de lo contario lanza una excepci\u00f3n si hay alg\u00fan otro n\u00famero de coincidencias diferentes a una.</p>\n\n<h3 id=\"scryrenderedcomponentswithtype\"><a class=\"anchor\" href=\"/react/test-utils#scryrenderedcomponentswithtype\"></a><code class=\"language-javascript\">scryRenderedComponentsWithType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">scryRenderedComponentsWithType</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Encuentra todas las instancias de componentes cuyo tipo sea igual a <code class=\"language-javascript\">componentClass</code>.</p>\n\n<h3 id=\"findrenderedcomponentwithtype\"><a class=\"anchor\" href=\"/react/test-utils#findrenderedcomponentwithtype\"></a><code class=\"language-javascript\">findRenderedComponentWithType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">findRenderedComponentWithType</span><span class=\"token punctuation\">(</span>\n  tree<span class=\"token punctuation\">,</span>\n  componentClass\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Igual a <a href=\"/react/test-utils#scryrenderedcomponentswithtype\"><code class=\"language-javascript\">scryRenderedComponentsWithType()</code></a> pero espera que solo haya un resultado y retorna ese \u00fanico resultado, de lo contrario lanza una excepci\u00f3n si hay alg\u00fan otro n\u00famero de coincidencias diferentes a una.</p>\n\n<h3 id=\"renderintodocument\"><a class=\"anchor\" href=\"/react/test-utils#renderintodocument\"></a><code class=\"language-javascript\">renderIntoDocument()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">renderIntoDocument</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Renderiza un Elemento de React en un nodo separado del DOM en el documento. <strong>Esta funci\u00f3n requiere un DOM.</strong> Esto es equivalente a hacer:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> domContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>domContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Necesitar\u00e1s tener <code class=\"language-javascript\">window</code>, <code class=\"language-javascript\">window.document</code> y <code class=\"language-javascript\">window.document.createElement</code> habilitados de forma global <strong>antes</strong> de importar <code class=\"language-javascript\">React</code>. De otro modo React pensar\u00e1 que no tiene acceso al DOM y los m\u00e9todos como <code class=\"language-javascript\">setState</code> no funcionar\u00e1n.</p>\n</div>\n\n<h2 id=\"other-utilities\"><a class=\"anchor\" href=\"/react/test-utils#other-utilities\"></a>Otras utilidades </h2>\n<h3 id=\"simulate\"><a class=\"anchor\" href=\"/react/test-utils#simulate\"></a><code class=\"language-javascript\">Simulate</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">Simulate<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>eventName<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>eventData<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Simula la ejecuci\u00f3n de un evento en un nodo del DOM con los datos de evento <code class=\"language-javascript\">eventData</code> opcionales.</p>\n<p><code class=\"language-javascript\">Simulate</code> tiene un m\u00e9todo para <a href=\"/react/events#supported-events\">cada uno de los eventos que React entiende</a>.</p>\n<p><strong>Haciendo clic en un elemento</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// &lt;button ref={(node) =&gt; this.button = node}&gt;...&lt;/button&gt;</span>\n<span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">;</span>\nReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Cambiando el valor en un campo de entrada y presionando ENTER.</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// &lt;input ref={(node) =&gt; this.textInput = node} /&gt;</span>\n<span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textInput<span class=\"token punctuation\">;</span>\nnode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'giraffe'</span><span class=\"token punctuation\">;</span>\nReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactTestUtils<span class=\"token punctuation\">.</span>Simulate<span class=\"token punctuation\">.</span><span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Enter\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">keyCode</span><span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">which</span><span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Tendr\u00e1s que proveer cualquiera de las propiedades del evento que se est\u00e9 usando en tu componente (p.e. keyCode, which, etc\u2026) ya que React no crear\u00e1 ninguna de estas por ti.</p>\n</div>\n</div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/addons-test-utils.md\">Edit this page</a></p></div></article>", "path": "/react/test-utils", "nav": ["/react/events", "/react/test-renderer"]}, {"key": "Renderizador de prueba", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><strong>Importando</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">const</span> TestRenderer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES5 con npm</span></code></pre></div>\n<h2 id=\"overview\"><a class=\"anchor\" href=\"/react/test-renderer#overview\"></a>Resumen </h2>\n<p>Este paquete proporciona un procesador de React que se puede usar para procesar componentes de React a objetos JavaScript puros, sin depender del DOM o de un entorno m\u00f3vil nativo.</p>\n<p>B\u00e1sicamente, este paquete facilita tomar una instant\u00e1nea de la jerarqu\u00eda de la vista de la plataforma (similar a un \u00e1rbol DOM) representada por un componente React DOM o React Native sin usar un navegador o <a class=\"external-link\" href=\"https://github.com/tmpvar/jsdom\">jsdom</a>.</p>\n<p>Ejemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Link</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> testRenderer <span class=\"token operator\">=</span> TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">page</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.facebook.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Facebook</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { type: 'a',</span>\n<span class=\"token comment\">//   props: { href: 'https://www.facebook.com/' },</span>\n<span class=\"token comment\">//   children: [ 'Facebook' ] }</span></code></pre></div>\n<p>Puede usar la funci\u00f3n de pruebas de instant\u00e1nea (<code class=\"language-javascript\">snapshot</code>) de Jest para guardar autom\u00e1ticamente una copia del \u00e1rbol JSON en un archivo y comprobar en tus pruebas que no ha cambiado: <a class=\"external-link\" href=\"https://jestjs.io/docs/en/snapshot-testing\">Aprende m\u00e1s sobre ello</a>.</p>\n<p>Tambi\u00e9n puede recorrer la salida para encontrar nodos espec\u00edficos y hacer afirmaciones sobre ellos.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SubComponent</span></span> <span class=\"token attr-name\">foo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sub<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Sub</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> testRenderer <span class=\"token operator\">=</span> TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> testInstance <span class=\"token operator\">=</span> testRenderer<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span>SubComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Sub'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"testrenderer\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderer\"></a>TestRenderer </h3>\n<ul>\n<li><a href=\"/react/test-renderer#testrenderercreate\"><code class=\"language-javascript\">TestRenderer.create()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendereract\"><code class=\"language-javascript\">TestRenderer.act()</code></a></li>\n</ul>\n<h3 id=\"testrenderer-instance\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderer-instance\"></a>Instancias de TestRenderer </h3>\n<ul>\n<li><a href=\"/react/test-renderer#testrenderertojson\"><code class=\"language-javascript\">testRenderer.toJSON()</code></a></li>\n<li><a href=\"/react/test-renderer#testrenderertotree\"><code class=\"language-javascript\">testRenderer.toTree()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendererupdate\"><code class=\"language-javascript\">testRenderer.update()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendererunmount\"><code class=\"language-javascript\">testRenderer.unmount()</code></a></li>\n<li><a href=\"/react/test-renderer#testrenderergetinstance\"><code class=\"language-javascript\">testRenderer.getInstance()</code></a></li>\n<li><a href=\"/react/test-renderer#testrendererroot\"><code class=\"language-javascript\">testRenderer.root</code></a></li>\n</ul>\n<h3 id=\"testinstance\"><a class=\"anchor\" href=\"/react/test-renderer#testinstance\"></a>TestInstance </h3>\n<ul>\n<li><a href=\"/react/test-renderer#testinstancefind\"><code class=\"language-javascript\">testInstance.find()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindbytype\"><code class=\"language-javascript\">testInstance.findByType()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindbyprops\"><code class=\"language-javascript\">testInstance.findByProps()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindall\"><code class=\"language-javascript\">testInstance.findAll()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindallbytype\"><code class=\"language-javascript\">testInstance.findAllByType()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancefindallbyprops\"><code class=\"language-javascript\">testInstance.findAllByProps()</code></a></li>\n<li><a href=\"/react/test-renderer#testinstanceinstance\"><code class=\"language-javascript\">testInstance.instance</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancetype\"><code class=\"language-javascript\">testInstance.type</code></a></li>\n<li><a href=\"/react/test-renderer#testinstanceprops\"><code class=\"language-javascript\">testInstance.props</code></a></li>\n<li><a href=\"/react/test-renderer#testinstanceparent\"><code class=\"language-javascript\">testInstance.parent</code></a></li>\n<li><a href=\"/react/test-renderer#testinstancechildren\"><code class=\"language-javascript\">testInstance.children</code></a></li>\n</ul>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"/react/test-renderer#reference\"></a>Referencia </h2>\n<h3 id=\"testrenderercreate\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderercreate\"></a><code class=\"language-javascript\">TestRenderer.create()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Crea una instancia <code class=\"language-javascript\">TestRenderer</code> con el elemento React pasado como argumento. No utiliza el DOM real, pero a\u00fan as\u00ed renderiza completamente el \u00e1rbol de componentes en memoria para que puedas hacer afirmaciones al respecto. Devuelve una <a href=\"/react/test-renderer#testrenderer-instance\">instancia de TestRenderer</a>.</p>\n<h3 id=\"testrendereract\"><a class=\"anchor\" href=\"/react/test-renderer#testrendereract\"></a><code class=\"language-javascript\">TestRenderer.act()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">TestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">act</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Similar a la <a href=\"/react/test-utils#act\">utilidad <code class=\"language-javascript\">act()</code> helper from <code class=\"language-javascript\">react-dom/test-utils</code></a>, <code class=\"language-javascript\">TestRenderer.act</code> prepara un componente para las afirmaciones. Usa esta versi\u00f3n de <code class=\"language-javascript\">act()</code> para envolver las llamadas de <code class=\"language-javascript\">TestRenderer.create</code> y <code class=\"language-javascript\">testRenderer.update</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>create<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.js'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The component being tested</span>\n\n<span class=\"token comment\">// render the component</span>\n<span class=\"token keyword\">let</span> root<span class=\"token punctuation\">;</span> \n<span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  root <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// make assertions on root </span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// update with some different props</span>\n<span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// make assertions on root </span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"testrenderertojson\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderertojson\"></a><code class=\"language-javascript\">testRenderer.toJSON()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Devuelve un objeto que representa el \u00e1rbol renderizado en formato <code class=\"language-javascript\">JSON</code>. Este \u00e1rbol solo contiene los nodos espec\u00edficos de la plataforma como <code class=\"language-javascript\">&lt;div&gt;</code> o <code class=\"language-javascript\">&lt;View&gt;</code> y sus <code class=\"language-javascript\">props</code>, pero no contiene ning\u00fan componente escrito por el usuario. Esta representaci\u00f3n es pr\u00e1ctica para usarla en <a class=\"external-link\" href=\"https://facebook.github.io/jest/docs/en/snapshot-testing.html#snapshot-testing-with-jest\">pruebas de instantanea (<code class=\"language-javascript\">snapshot</code>)</a>.</p>\n<h3 id=\"testrenderertotree\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderertotree\"></a><code class=\"language-javascript\">testRenderer.toTree()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">toTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Devuelve un objeto que representa el \u00e1rbol renderizado. La representaci\u00f3n es m\u00e1s detallada que la que proporciona <code class=\"language-javascript\">toJSON()</code>, e incluye los componentes escritos por el usuario. Probablemente no necesites este m\u00e9todo al menos que est\u00e9s escribiendo tu propia biblioteca de afirmaciones sobre el renderizador de prueba.</p>\n<h3 id=\"testrendererupdate\"><a class=\"anchor\" href=\"/react/test-renderer#testrendererupdate\"></a><code class=\"language-javascript\">testRenderer.update()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Re-renderiza el nuevo \u00e1rbol en memoria con un nuevo elemento ra\u00edz. Esto simula una actualizaci\u00f3n de React en la ra\u00edz. Si el nuevo elemento posee el mismo tipo y <code class=\"language-javascript\">key</code> del elemento anterior, el \u00e1rbol ser\u00e1 actualizado, de lo contrario se re-montara un nuevo \u00e1rbol.</p>\n<h3 id=\"testrendererunmount\"><a class=\"anchor\" href=\"/react/test-renderer#testrendererunmount\"></a><code class=\"language-javascript\">testRenderer.unmount()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Desmonta el \u00e1rbol en memoria, generando los eventos apropiados del ciclo de vida.</p>\n<h3 id=\"testrenderergetinstance\"><a class=\"anchor\" href=\"/react/test-renderer#testrenderergetinstance\"></a><code class=\"language-javascript\">testRenderer.getInstance()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Devuelve la instancia correspondiente a la ra\u00edz del elemento, si est\u00e1 disponible. Este m\u00e9todo no funciona si el elemento ra\u00edz es un componente de funci\u00f3n, ya que los mismos no poseen instancias.</p>\n<h3 id=\"testrendererroot\"><a class=\"anchor\" href=\"/react/test-renderer#testrendererroot\"></a><code class=\"language-javascript\">testRenderer.root</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testRenderer<span class=\"token punctuation\">.</span>root</code></pre></div>\n<p>Devuelve el objeto <code class=\"language-javascript\">test instance</code> de la ra\u00edz, el cual es \u00fatil para realizar afirmaciones acerca de nodos espec\u00edficos en el \u00e1rbol. Este puede ser usado para buscar otros objetos <code class=\"language-javascript\">test instance</code> ubicados m\u00e1s profundo en el \u00e1rbol del componente.</p>\n<h3 id=\"testinstancefind\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefind\"></a><code class=\"language-javascript\">testInstance.find()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Busca un \u00fanico objeto <code class=\"language-javascript\">test instance</code> descendiente para el cual <code class=\"language-javascript\">test(testInstance)</code> devuelve <code class=\"language-javascript\">true</code>. Si <code class=\"language-javascript\">test(testInstance)</code> no devuelve <code class=\"language-javascript\">true</code> para exactamente una sola instancia, entonces genera un error.</p>\n<h3 id=\"testinstancefindbytype\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindbytype\"></a><code class=\"language-javascript\">testInstance.findByType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Busca un \u00fanico objeto <code class=\"language-javascript\">test instance</code> descendiente con el <code class=\"language-javascript\">type</code> pasado como argumento. Si no existe un \u00fanico descendiente con el tipo provisto genera un error.</p>\n<h3 id=\"testinstancefindbyprops\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindbyprops\"></a><code class=\"language-javascript\">testInstance.findByProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findByProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Busca un \u00fanico objeto <code class=\"language-javascript\">test instance</code> descendiente con los <code class=\"language-javascript\">props</code> pasados como argumento. Si no existe un \u00fanico descendiente con los <code class=\"language-javascript\">props</code> genera un error.</p>\n<h3 id=\"testinstancefindall\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindall\"></a><code class=\"language-javascript\">testInstance.findAll()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Busca todos los objetos <code class=\"language-javascript\">test instance</code> descendientes para los cuales <code class=\"language-javascript\">test(testInstance)</code> devuelve <code class=\"language-javascript\">true</code>.</p>\n<h3 id=\"testinstancefindallbytype\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindallbytype\"></a><code class=\"language-javascript\">testInstance.findAllByType()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Busca todos los objetos <code class=\"language-javascript\">test instance</code> descendientes con el tipo (<code class=\"language-javascript\">type</code>) pasado como argumento.</p>\n<h3 id=\"testinstancefindallbyprops\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancefindallbyprops\"></a><code class=\"language-javascript\">testInstance.findAllByProps()</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Busca todos los objetos <code class=\"language-javascript\">test instance</code> descendientes con los <code class=\"language-javascript\">props</code> pasados como argumento.</p>\n<h3 id=\"testinstanceinstance\"><a class=\"anchor\" href=\"/react/test-renderer#testinstanceinstance\"></a><code class=\"language-javascript\">testInstance.instance</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>instance</code></pre></div>\n<p>La instancia de componente correspondiente a este objeto <code class=\"language-javascript\">test instance</code>. Est\u00e1 \u00fanicamente disponible para componentes de clase, ya que los componentes de funci\u00f3n no poseen instancias. Es equivalente al valor de <code class=\"language-javascript\">this</code> dentro del componente.</p>\n<h3 id=\"testinstancetype\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancetype\"></a><code class=\"language-javascript\">testInstance.type</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>type</code></pre></div>\n<p>El tipo del componente que corresponde a este objeto <code class=\"language-javascript\">test instance</code>. Por ejemplo, un componente <code class=\"language-javascript\">&lt;Button /&gt;</code> tiene un tipo <code class=\"language-javascript\">Button</code>.</p>\n<h3 id=\"testinstanceprops\"><a class=\"anchor\" href=\"/react/test-renderer#testinstanceprops\"></a><code class=\"language-javascript\">testInstance.props</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>props</code></pre></div>\n<p>Los <code class=\"language-javascript\">props</code> correspondientes a este objeto <code class=\"language-javascript\">test instance</code>. Por ejemplo, un componente <code class=\"language-javascript\">&lt;Button size=\"small\" /&gt;</code> tiene las siguientes propiedades: <code class=\"language-javascript\">{size: 'small'}</code>.</p>\n<h3 id=\"testinstanceparent\"><a class=\"anchor\" href=\"/react/test-renderer#testinstanceparent\"></a><code class=\"language-javascript\">testInstance.parent</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>parent</code></pre></div>\n<p>El objeto <code class=\"language-javascript\">test instance</code> padre.</p>\n<h3 id=\"testinstancechildren\"><a class=\"anchor\" href=\"/react/test-renderer#testinstancechildren\"></a><code class=\"language-javascript\">testInstance.children</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">testInstance<span class=\"token punctuation\">.</span>children</code></pre></div>\n<p>Los objetos <code class=\"language-javascript\">test instance</code> hijos directos.</p>\n<h2 id=\"ideas\"><a class=\"anchor\" href=\"/react/test-renderer#ideas\"></a>Ideas </h2>\n<p>La funci\u00f3n <code class=\"language-javascript\">TestRenderer.create</code> puede recibir una opci\u00f3n <code class=\"language-javascript\">createNodeMock</code> la cual permite la creaci\u00f3n de <code class=\"language-javascript\">refs</code> adaptados para ser usados como objetos falsos en pruebas. <code class=\"language-javascript\">createNodeMock</code> acepta el elemento actual y debe retornar un objeto <code class=\"language-javascript\">ref</code> falso. Esto es \u00fatil cuando se necesita realizar pruebas sobre un componente que depende de <code class=\"language-javascript\">ref</code></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TestRenderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> focused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nTestRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">createNodeMock</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// simula una funci\u00f3n de enfoque</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            focused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>focused<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-test-renderer.md\">Edit this page</a></p></div></article>", "path": "/react/test-renderer", "nav": ["/react/test-utils", "/react/javascript-environment-requirements"]}, {"key": "Requerimientos del entorno de JS", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React 18 es compatible con todos los navegadores modernos (Edge, Firefox, Chrome, Safari, etc).</p>\n<p>Si debes mantener la compatibilidad con navegadores y dispositivos m\u00e1s antiguos como Internet Explorer que no proporcionan caracter\u00edsticas modernas de forma nativa o tienen implementaciones que difieren de los est\u00e1ndares, considera incluir un <em>polyfill</em> global en tu aplicaci\u00f3n compilada.</p>\n<p>Esta es una lista de funcionalidades modernas que React 18 utiliza:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code class=\"language-javascript\">Promise</code></a></li>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code class=\"language-javascript\">Symbol</code></a></li>\n<li><a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code class=\"language-javascript\">Object.assign</code></a></li>\n</ul>\n<p>El <em>polyfill</em> adecuado para estas funcionalidades depende de tu entorno. Para muchos usuarios, puedes configurar tus configuraciones de [BrowserList]. Para otros, puede que tengas que importar directamente <em>polyfills</em> como <a class=\"external-link\" href=\"https://github.com/zloirock/core-js\"><code class=\"language-javascript\">core-js</code></a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-javascript-environment-requirements.md\">Edit this page</a></p></div></article>", "path": "/react/javascript-environment-requirements", "nav": ["/react/test-renderer", "/react/glossary"]}, {"key": "Glosario", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h2 id=\"single-page-application\"><a class=\"anchor\" href=\"/react/glossary#single-page-application\"></a>Aplicaci\u00f3n de p\u00e1gina \u00fanica </h2>\n<p>Una aplicaci\u00f3n de p\u00e1gina \u00fanica (single-page application) es una aplicaci\u00f3n que carga una \u00fanica p\u00e1gina HTML y todos los componentes necesarios (tales como JavaScript y CSS) para que se ejecute la aplicaci\u00f3n. Cualquier interacci\u00f3n con la p\u00e1gina o p\u00e1ginas subsecuentes no requiere hacer solicitudes al servidor lo que significa que la p\u00e1gina no es recargada.</p>\n<p>Aunque puedes construir una aplicaci\u00f3n de p\u00e1gina \u00fanica con React, esto no es un requerimiento. React tambi\u00e9n puede ser utilizado para mejorar peque\u00f1as partes de sitios web existentes con interactividad adicional. El c\u00f3digo escrito en React puede coexistir pac\u00edficamente con p\u00e1ginas renderizadas de lado del servidor por lenguajes como PHP, \u00f3 cualquier otra biblioteca del lado del cliente. De hecho, as\u00ed es como React est\u00e1 siendo utilizado en Facebook.</p>\n<h2 id=\"es6-es2015-es2016-etc\"><a class=\"anchor\" href=\"/react/glossary#es6-es2015-es2016-etc\"></a>ES6, ES2015, ES2016, etc </h2>\n<p>Estas siglas se refieren a las m\u00e1s recientes versiones del est\u00e1ndar de Especificaci\u00f3n de Lenguaje ECMAScript, del cual JavaScript es una implementaci\u00f3n. La versi\u00f3n ES6 (tambi\u00e9n conocida como ES2015) incluye muchas adiciones a las versiones previas tales como: funciones flecha, clases, plantillas de cadena de texto, declaraciones de variables con <code class=\"language-javascript\">let</code> y <code class=\"language-javascript\">const</code>. Puedes aprender m\u00e1s sobre versiones espec\u00edficas <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/ECMAScript#Versions\">aqu\u00ed</a>.</p>\n<h2 id=\"compilers\"><a class=\"anchor\" href=\"/react/glossary#compilers\"></a>Compiladores </h2>\n<p>Un compilador de JavaScript toma el c\u00f3digo JavaScript, lo transforma y devuelve en un formato diferente. El caso de uso m\u00e1s com\u00fan es tomar c\u00f3digo JavaScript con sintaxis ES6 y transformarlo en c\u00f3digo que navegadores m\u00e1s antiguos puedan interpretar. <a class=\"external-link\" href=\"https://babeljs.io/\">Babel</a> es el compilador m\u00e1s usado con React.</p>\n<h2 id=\"bundlers\"><a class=\"anchor\" href=\"/react/glossary#bundlers\"></a>Bundlers </h2>\n<p>Los <em>bundlers</em> toman el c\u00f3digo JavaScript y CSS escrito como m\u00f3dulos separados (frecuentemente cientos de ellos), y los combina en unos cuantos archivos mejor optimizados para los navegadores. Algunos <em>bundlers</em> com\u00fanmente usandos en aplicaciones de React son <a class=\"external-link\" href=\"https://webpack.js.org/\">Webpack</a> y <a class=\"external-link\" href=\"http://browserify.org/\">Browserify</a>.</p>\n<h2 id=\"package-managers\"><a class=\"anchor\" href=\"/react/glossary#package-managers\"></a>Package managers </h2>\n<p>Los <em>package managers</em> son herramientas que te permiten administrar las dependencias de tu proyecto. <a class=\"external-link\" href=\"https://www.npmjs.com/\">npm</a> y <a class=\"external-link\" href=\"https://yarnpkg.com/\">Yarn</a> son dos <em>package managers</em> com\u00fanmente usados en aplicaciones de React. Ambos son clientes para el mismo registro de paquetes npm.</p>\n<h2 id=\"cdn\"><a class=\"anchor\" href=\"/react/glossary#cdn\"></a>CDN </h2>\n<p>CDN son las siglas en ingl\u00e9s de <em>Content Delivery Network</em> (Red de Entrega de Contenido). Los <em>CDN</em> entregan contenido est\u00e1tico en cach\u00e9 desde una red de servidores alrededor del mundo.</p>\n<h2 id=\"jsx\"><a class=\"anchor\" href=\"/react/glossary#jsx\"></a>JSX </h2>\n<p>JSX es una extensi\u00f3n de sintaxis para JavaScript. Es similar a un <em>template language</em>, pero tiene todo el poder de JavaScript. JSX es compilado a llamadas <code class=\"language-javascript\">React.createElement()</code> que regresan simples objetos de JavaScript llamados <em>\u201celementos de React\u201d</em>. Puedes encontrar una introducci\u00f3n b\u00e1sica a JSX en la documentaci\u00f3n <a href=\"/react/introducing-jsx\">aqu\u00ed</a> y un tutorial m\u00e1s completo de JSX <a href=\"/react/jsx-in-depth\">aqu\u00ed</a>.</p>\n<p><em>React DOM</em> usa una convenci\u00f3n de nombres en <em>camelCase</em> para las propiedades en lugar de nombres de atributos HTML. Por ejemplo, <code class=\"language-javascript\">tabindex</code> se vuelve <code class=\"language-javascript\">tabIndex</code> en JSX. El atributo <code class=\"language-javascript\">class</code> se escribe como <code class=\"language-javascript\">className</code> ya que <code class=\"language-javascript\">class</code> es una palabra reservada en JavaScript:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">My name is Clementine!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h2 id=\"elements\"><a class=\"anchor\" href=\"/react/glossary#elements\"></a><a href=\"/react/rendering-elements\">Elementos</a> </h2>\n<p>Los elementos de React son los bloques de construcci\u00f3n de una aplicaci\u00f3n de React. Uno podr\u00eda confundir los elementos con el concepto m\u00e1s ampliamente conocido de \u201ccomponentes\u201d. Un elemento describe lo que quieres ver en pantalla. Los elementos de React son inmutables.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hola, mundo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Normalmente, los elementos no se utilizan directamente, si no que se devuelven desde los componentes.</p>\n<h2 id=\"components\"><a class=\"anchor\" href=\"/react/glossary#components\"></a><a href=\"/react/components-and-props\">Componentes</a> </h2>\n<p>Los componentes de React son peque\u00f1os y reutilizables fragmentos de c\u00f3digo que devuelven un elemento de React para ser renderizado en una p\u00e1gina. La versi\u00f3n m\u00e1s simple de un componente de React es una funci\u00f3n en simple JavaScript que regrese un elemento de React:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los componentes tambi\u00e9n pueden ser clases de ES6:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los componentes pueden ser divididos en distintas piezas de funcionalidad y usados en otros componentes. Los componentes pueden regresar otros componentes, arreglos, cadenas de texto y n\u00fameros. Una buena regla es que si una parte de tu interfaz es usada varias veces (Bot\u00f3n, Panel, Avatar), o es lo suficientemente compleja (App, Noticias, Comentario), es un buen candidato para ser un componente reusable. Los nombres de los componentes deber\u00edan tambi\u00e9n comenzar con una letra may\u00fascula (<code class=\"language-javascript\">&lt;Wrapper/&gt;</code> <strong>no</strong> <code class=\"language-javascript\">&lt;wrapper/&gt;</code>). Consulta <a href=\"/react/components-and-props#rendering-a-component\">esta documentaci\u00f3n</a> para obtener m\u00e1s informaci\u00f3n sobre el renderizado de componentes.</p>\n<h3 id=\"props\"><a class=\"anchor\" href=\"/react/glossary#props\"></a><a href=\"/react/components-and-props\"><code class=\"language-javascript\">props</code></a> </h3>\n<p><code class=\"language-javascript\">props</code> son entradas de un componente de React. Son informaci\u00f3n que es pasada desde un componente padre a un componente hijo.</p>\n<p>Recuerda que los <code class=\"language-javascript\">props</code> son de s\u00f3lo lectura. No deben ser modificados de ninguna forma: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Incorrecto!</span>\nprops<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si necesitas modificar alg\u00fan valor en respuesta de una entrada del usuario o una respuesta de red, usa el <code class=\"language-javascript\">estado</code> en su lugar.</p>\n<h3 id=\"propschildren\"><a class=\"anchor\" href=\"/react/glossary#propschildren\"></a><code class=\"language-javascript\">props.children</code> </h3>\n<p><code class=\"language-javascript\">props.children</code> est\u00e1 disponible en cada componente. Contiene el contenido ubicado entre las etiquetas de apertura y cierre de un componente. Por ejemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello world!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Welcome</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>La cadena de texto <code class=\"language-javascript\">Hello world!</code> est\u00e1 disponible en <code class=\"language-javascript\">props.children</code> en el componente <code class=\"language-javascript\">Welcome</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para los componentes definidos como clases, usa <code class=\"language-javascript\">this.props.children</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"state\"><a class=\"anchor\" href=\"/react/glossary#state\"></a><a href=\"/react/state-and-lifecycle#adding-local-state-to-a-class\"><code class=\"language-javascript\">estado</code></a> </h3>\n<p>Un componente necesita <code class=\"language-javascript\">estado</code> cuando algunos datos asociados a el cambian con el tiempo. Por ejemplo, un componente <code class=\"language-javascript\">Checkbox</code> tal vez necesite <code class=\"language-javascript\">isChecked</code> en su estado, y un componente <code class=\"language-javascript\">NewsFeed</code> tal vez necesite mantener un registro de <code class=\"language-javascript\">fetchedPosts</code> en su estado.</p>\n<p>La diferencia m\u00e1s importante entre <code class=\"language-javascript\">estado</code> y <code class=\"language-javascript\">props</code> es que los <code class=\"language-javascript\">props</code> son pasados desde un componente padre, pero el <code class=\"language-javascript\">estado</code> es manejado por el propio componente. Un componente no puede cambiar sus <code class=\"language-javascript\">props</code>, pero puede cambiar su <code class=\"language-javascript\">estado</code>.</p>\n<p>Para cada pieza particular de datos cambiantes, deber\u00eda existir solo un componente que lo \u201cposea\u201d en su estado. No intentes sincronizar estado de dos componentes distintos. En su lugar, <a href=\"/react/lifting-state-up\">el\u00e9valo</a> a su ancestro compartido m\u00e1s cercano, y p\u00e1salo como <em>props</em> en ambos.</p>\n<h2 id=\"lifecycle-methods\"><a class=\"anchor\" href=\"/react/glossary#lifecycle-methods\"></a><a href=\"/react/state-and-lifecycle#adding-lifecycle-methods-to-a-class\">M\u00e9todos de ciclo de vida</a> </h2>\n<p>Los m\u00e9todos de ciclo de vida son funcionalidad personalizada que se ejecutan durante las diferentes fases de un componente. Existen m\u00e9todos disponibles cuando el componente se crea y se inserta en el <em>DOM</em> (<a href=\"/react/react-component#mounting\"><em>mounting</em></a>), cuando el componente se actualiza, y cuando el componente es desmontado o removido del <em>DOM</em>. </p>\n<h2 id=\"componentes-controlados-vs-componentes-no-controlados\"><a class=\"anchor\" href=\"/react/glossary#componentes-controlados-vs-componentes-no-controlados\"></a><a href=\"/react/forms#controlled-components\">Componentes controlados</a> vs. <a href=\"/react/uncontrolled-components\">componentes no controlados</a></h2>\n<p>React tiene dos enfoques distintos para tratar con las entradas de formularios.</p>\n<p>Un elemento de entrada de un formulario cuyo valor est\u00e1 controlado por React es llamado <em>componente controlado</em>. Cuando un usuario introduce informaci\u00f3n en un <em>componente controlado</em> se activa un manejador de eventos de cambio y el c\u00f3digo decide si la entrada es v\u00e1lida (volviendo a renderizar con el valor actualizado). Si no se vuelve a renderizar, el elemento del formulario permanecer\u00e1 sin cambios.</p>\n<p>Un <em>componente no controlado</em> funciona como los elementos de un formulario fuera de React. Cuando un usuario introduce informaci\u00f3n en un campo del formulario (una caja de texto, una lista de selecci\u00f3n, etc) la informaci\u00f3n actualizada es reflejada sin que React tenga que hacer nada. Sin embargo, esto tambi\u00e9n significa que no se puede forzar al campo a que tenga un valor determinado.</p>\n<p>En la mayor\u00eda de los casos debes usar <em>componentes controlados</em>.</p>\n<h2 id=\"keys\"><a class=\"anchor\" href=\"/react/glossary#keys\"></a><a href=\"/react/lists-and-keys\">Keys</a> </h2>\n<p>Una <em>\u201ckey\u201d</em> es un atributo especial (cadena de texto) de que necesitas incluir cuando creas un arreglo de elementos. Las <em>keys</em> ayudan a React a identificar que elementos han cambiado, han sido agregados o removidos. Las <em>keys</em> deben asignarse a los elementos dentro de un arreglo para darles una identidad estable.</p>\n<p>Las <em>keys</em> s\u00f3lo tienen que ser \u00fanicas entre elementos hermanos en el mismo arreglo. No necesitan ser \u00fanicos en toda la aplicaci\u00f3n o incluso en el mismo componente.</p>\n<p>No pases algo como <code class=\"language-javascript\">Math.random()</code> a las <em>keys</em>. Es importante que las <em>keys</em> tengan una \u201cindentidad estable\u201d a trav\u00e9s de m\u00faltiples renderizados as\u00ed React puede determinar cuales elementos fueron agregados, removidos o re-ordenados. Idealmente, las <em>keys</em> deber\u00edan corresponder a un identificador \u00fanico y estable que venga desde los datos, por ejemplo: <code class=\"language-javascript\">post.id</code>.</p>\n<h2 id=\"refs\"><a class=\"anchor\" href=\"/react/glossary#refs\"></a><a href=\"/react/refs-and-the-dom\">Referencias</a> </h2>\n<p>React admite un atributo especial que se puede agregar a cualquier componente. El atributo <code class=\"language-javascript\">ref</code> puede ser un objeto creado por <a href=\"/react/react-api#reactcreateref\">la funci\u00f3n <code class=\"language-javascript\">React.createRef()</code></a> o una funci\u00f3n <em>callback</em>, o una cadena de texto (en la API antigua). Cuando el atributo <code class=\"language-javascript\">ref</code> es una funci\u00f3n de <em>callback</em>, la funci\u00f3n recibe el elemento <em>DOM</em> subyacente o la instancia de clase (dependiendo del tipo de elemento) como argumento. Esto permite tener acceso directo al <em>DOM</em> del elemento o a la instancia del componente.</p>\n<p>Usa los <em>refs</em> con moderaci\u00f3n. Si te encuentras frecuentemente haciendo uso de los <em>refs</em> para \u201chacer que las cosas sucedan\u201d en tu aplicaci\u00f3n, considera familiarizarte m\u00e1s con <a href=\"/react/lifting-state-up\">flujos de datos de arriba hacia abajo</a>.</p>\n<h2 id=\"events\"><a class=\"anchor\" href=\"/react/glossary#events\"></a><a href=\"/react/handling-events\">Eventos</a> </h2>\n<p>El manejo de eventos con elementos de React tiene algunas diferencias sint\u00e1cticas:</p>\n<ul>\n<li>Los manejadores de eventos en React son nombrados usando <em>camelCase</em>, en lugar de <em>lowercase</em>.</li>\n<li>Con JSX pasas una funci\u00f3n como manejador de eventos, en lugar de una cadena de texto.</li>\n</ul>\n<h2 id=\"reconciliation\"><a class=\"anchor\" href=\"/react/glossary#reconciliation\"></a><a href=\"/react/reconciliation\">Reconciliaci\u00f3n</a> </h2>\n<p>Cuando las <em>props</em> o el <em>estado</em> de un componente de React cambia, React decide si una actualizaci\u00f3n al <em>DOM</em> es necesaria comparando el elemento reci\u00e9n devuelto con el renderizado previamente. Cuando no son iguales, React actualizar\u00e1 el <em>DOM</em>. Este proceso es llamado \u201creconciliaci\u00f3n\u201d.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/reference-glossary.md\">Edit this page</a></p></div></article>", "path": "/react/glossary", "nav": ["/react/javascript-environment-requirements", "/react/hooks-intro"]}]}, {"key": "Hooks (nuevo)", "values": [{"key": "1. Presentando a los Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p><em>Hooks</em> son una nueva caracter\u00edstica en React 16.8. Estos te permiten usar el estado y otras caracter\u00edsticas de React sin escribir una clase.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declara una nueva variable de estado, la cual llamaremos \u201ccount\u201d</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esta nueva funci\u00f3n <code class=\"language-javascript\">useState</code> es el primer \u201cHook\u201d que vamos a aprender, pero este ejemplo es solo una introducci\u00f3n. \u00a1No te preocupes si a\u00fan no tiene sentido!</p>\n<p><strong>Puedes empezar a aprender Hooks <a href=\"/react/hooks-overview\">en la siguiente p\u00e1gina</a>.</strong> En esta p\u00e1gina, continuaremos explicando por qu\u00e9 estamos agregando Hooks a React y c\u00f3mo estos pueden ayudarte a escribir aplicaciones grandiosas.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>React 16.8.0 es la primera versi\u00f3n que es compatible con Hooks. Al actualizar, no olvides actualizar todos los paquetes, incluyendo React DOM.\nReact Native es compatible con Hooks desde <a class=\"external-link\" href=\"https://reactnative.dev/blog/2019/03/12/releasing-react-native-059\">la versi\u00f3n 0.59 de React Native</a>.</p>\n</div>\n<h2 id=\"video-introduction\"><a class=\"anchor\" href=\"/react/hooks-intro#video-introduction\"></a>Video de introducci\u00f3n </h2>\n<p>En el React Conf 2018, Sophie Alpert y Dan Abramov presentaron Hooks, seguidos por Ryan Florence demostrando c\u00f3mo refactorizar una aplicaci\u00f3n us\u00e1ndolos. Mira el video aqu\u00ed:</p>\n<br/>\n<a class=\"external-link\" href=\"//www.youtube.com/embed/dpw9EHDh2bM\">link</a>\n<h2 id=\"no-breaking-changes\"><a class=\"anchor\" href=\"/react/hooks-intro#no-breaking-changes\"></a>Sin cambios con rupturas </h2>\n<p>Antes de continuar, debes notar que los Hooks son:</p>\n<ul>\n<li><strong>Completamente opcionales.</strong> Puedes probar Hooks en unos pocos componentes sin reescribir ning\u00fan c\u00f3digo existente. Pero no tienes que aprender o usar Hooks ahora mismo si no quieres.</li>\n<li><strong>100% compatibles con versiones anteriores.</strong> Los Hooks no tienen cambios con rupturas con respecto a versiones existentes.</li>\n<li><strong>Disponibles de inmediato.</strong> Los Hooks ya est\u00e1n disponibles con el lanzamiento de la versi\u00f3n v16.8.0.</li>\n</ul>\n<p><strong>No hay planes para remover el modelo de clases de React.</strong> Puedes leer m\u00e1s sobre la estrategia de adopci\u00f3n gradual de Hooks en la <a href=\"/react/hooks-intro#gradual-adoption-strategy\">secci\u00f3n inferior</a> de esta p\u00e1gina.</p>\n<p><strong>Los Hooks no reemplazan tu conocimiento de los conceptos de React.</strong> Por el contrario, los Hooks proporcionan una API m\u00e1s directa a los conceptos que ya conoces de React: <em>props</em>, estado, contexto, referencias, y ciclo de vida. Como veremos m\u00e1s adelante, los hooks tambi\u00e9n ofrecen una nueva y poderosa forma de combinarlos.</p>\n<p><strong>Si s\u00f3lo quieres empezar a aprender a usar hooks, \u00a1no dudes en <a href=\"/react/hooks-overview\">saltar directamente a la siguiente p\u00e1gina!</a></strong> Tambi\u00e9n puedes seguir leyendo esta p\u00e1gina para saber m\u00e1s acerca de por qu\u00e9 estamos a\u00f1adiendo Hooks y c\u00f3mo vamos a empezar a usarlos sin tener que reescribir nuestras aplicaciones.</p>\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"/react/hooks-intro#motivation\"></a>Motivaci\u00f3n </h2>\n<p>Los Hooks resuelven una amplia variedad de problemas aparentemente desconectados en React que hemos encontrado durante m\u00e1s de cinco a\u00f1os de escribir y mantener decenas de miles de componentes. Ya sea que est\u00e9s aprendiendo React, us\u00e1ndolo diariamente o incluso prefieras una biblioteca diferente con un modelo de componentes similar, es posible que reconozcas algunos de estos problemas.</p>\n<h3 id=\"its-hard-to-reuse-stateful-logic-between-components\"><a class=\"anchor\" href=\"/react/hooks-intro#its-hard-to-reuse-stateful-logic-between-components\"></a>Es dif\u00edcil reutilizar la l\u00f3gica de estado entre componentes </h3>\n<p>React no ofrece una forma de \u201cacoplar\u201d comportamientos re-utilizables a un componente (Por ejemplo, al conectarse a un <em>store</em>). Si llevas un tiempo trabajando con React, puedes estar familiarizado con patrones como <a href=\"/react/render-props\">render props</a> y <a href=\"/react/higher-order-components\">componentes de orden superior</a> que tratan resolver esto. Pero estos patrones requieren que reestructures tus componentes al usarlos, lo cual puede ser complicado y hacen que tu c\u00f3digo sea m\u00e1s dif\u00edcil de seguir. Si observas una aplicaci\u00f3n t\u00edpica de React usando <em>React DevTools</em>, Lo m\u00e1s probable es que encuentres un \u201cwrapper hell\u201d de componentes envueltos en capas de <em>providers</em>, <em>consumers</em>, <em>componentes de orden superior</em>, <em>render props</em>, y otras abstracciones. Aunque podemos <a class=\"external-link\" href=\"https://github.com/facebook/react-devtools/pull/503\">filtrarlos usando las DevTools</a>, esto apunta a un problema a\u00fan m\u00e1s profundo: React necesita una mejor primitiva para compartir l\u00f3gica de estado.</p>\n<p>Con Hooks, puedes extraer l\u00f3gica de estado de un componente de tal forma que este pueda ser probado y re-usado independientemente. <strong>Los Hooks te permiten reutilizar l\u00f3gica de estado sin cambiar la jerarqu\u00eda de tu componente.</strong> Esto facilita el compartir Hooks entre muchos componentes o incluso con la comunidad.</p>\n<p>Discutiremos esto m\u00e1s a fondo en <a href=\"/react/hooks-custom\">Construyendo tus propios Hooks</a>.</p>\n<h3 id=\"complex-components-become-hard-to-understand\"><a class=\"anchor\" href=\"/react/hooks-intro#complex-components-become-hard-to-understand\"></a>Los componentes complejos se vuelven dif\u00edciles de entender </h3>\n<p>A menudo tenemos que mantener componentes que empiezan simples pero con el pasar del tiempo crecen y se convierten en un l\u00edo inmanejable de multiples l\u00f3gicas de estado y efectos secundarios. Cada m\u00e9todo del ciclo de vida a menudo contiene una mezcla de l\u00f3gica no relacionada entre s\u00ed. Por ejemplo, los componentes pueden realizar alguna consulta de datos en el <code class=\"language-javascript\">componentDidMount</code> y <code class=\"language-javascript\">componentDidUpdate</code>. Sin embargo, el mismo m\u00e9todo <code class=\"language-javascript\">componentDidMount</code> tambi\u00e9n puede contener l\u00f3gica no relacionada que cree escuchadores de eventos, y los limpie en el <code class=\"language-javascript\">componentWillUnmount</code>. El c\u00f3digo relacionado entre s\u00ed y que cambia a la vez es separado, pero el c\u00f3digo que no tiene nada que ver termina combinado en un solo m\u00e9todo. Esto hace que sea demasiado f\u00e1cil introducir errores e inconsistencias.</p>\n<p>En muchos casos no es posible dividir estos componentes en otros m\u00e1s peque\u00f1os porque la l\u00f3gica de estado est\u00e1 por todas partes. Tambi\u00e9n es dif\u00edcil probarlos. Esta es una de las razones por las que muchas personas prefieren combinar React con una biblioteca de administraci\u00f3n de estado separada. Sin embargo, esto a menudo introduce demasiada abstracci\u00f3n, requiere que saltes entre diferentes archivos, y hace que la reutilizaci\u00f3n de componentes sea m\u00e1s dif\u00edcil.</p>\n<p>Para resolver esto, <strong>Hooks te permite dividir un componente en funciones m\u00e1s peque\u00f1as basadas en las piezas relacionadas (como la configuraci\u00f3n de una suscripci\u00f3n o la consulta de datos)</strong>,  en lugar de forzar una divisi\u00f3n basada en los m\u00e9todos del ciclo de vida. Tambi\u00e9n puedes optar por administrar el estado local del componente con un <em>reducer</em> para hacerlo m\u00e1s predecible.</p>\n<p>Discutiremos esto m\u00e1s a fondo en <a href=\"/react/hooks-effect#tip-use-multiple-effects-to-separate-concerns\">Usando el <em>Hook</em> de efecto</a>.</p>\n<h3 id=\"classes-confuse-both-people-and-machines\"><a class=\"anchor\" href=\"/react/hooks-intro#classes-confuse-both-people-and-machines\"></a>Las clases confunden tanto a las personas como a las m\u00e1quinas</h3>\n<p>Adem\u00e1s de dificultar la reutilizaci\u00f3n y organizaci\u00f3n del c\u00f3digo, hemos descubierto que las clases pueden ser una gran barrera para el aprendizaje de React. Tienes que entender c\u00f3mo funciona <code class=\"language-javascript\">this</code> en JavaScript, que es muy diferente a c\u00f3mo funciona en la mayor\u00eda de los lenguajes. Tienes que recordar agregar <em>bind</em> a tus manejadores de eventos. Sin los <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Classes/Public_class_fields#campos_de_instancia_p%C3%BAblicos\">campos p\u00fablicos de clase de ES2022</a>, el c\u00f3digo es muy verboso. Las personas pueden entender <em>props</em>, el estado, y el flujo de datos de arriba hacia abajo perfectamente, pero todav\u00eda tiene dificultades con las clases. La distinci\u00f3n entre componentes de funci\u00f3n y de clase en React y cu\u00e1ndo usar cada uno de ellos lleva a desacuerdos incluso entre los desarrolladores experimentados de React.</p>\n<p>Adem\u00e1s, React ha estado en el mercado durante unos cinco a\u00f1os, y queremos asegurarnos de que siga siendo relevante en los pr\u00f3ximos cinco a\u00f1os. Como muestran <a class=\"external-link\" href=\"https://svelte.dev/\">Svelte</a>, <a class=\"external-link\" href=\"https://angular.io/\">Angular</a>, <a class=\"external-link\" href=\"https://glimmerjs.com/\">Glimmer</a>, y otros, la <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/Compilaci%C3%B3n_anticipada\">compilaci\u00f3n anticipada</a> de componentes tiene mucho potencial a futuro. Especialmente si no se limita a las plantillas. Recientemente, hemos estado experimentando con el <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/7323\">encarpetado de componentes</a> usando <a class=\"external-link\" href=\"https://prepack.io/\">Prepack</a>, y hemos visto resultados preliminares prometedores. Sin embargo, encontramos que los componentes de clase pueden fomentar patrones involuntarios que hacen que estas optimizaciones nos lleven a un camino m\u00e1s lento. Las clases tambi\u00e9n presentan problemas para las herramientas de hoy en d\u00eda. Por ejemplo, las clases no minifican muy bien, y hacen que la recarga en caliente sea confusa y poco fiable. Queremos presentar una API que hace m\u00e1s probable que el c\u00f3digo se mantenga en la ruta optimizable.</p>\n<p>Para resolver estos problemas, <strong>Hooks te permiten usar m\u00e1s de las funciones de React sin clases.</strong> Conceptualmente, los componentes de React siempre han estado m\u00e1s cerca de las funciones. Los Hooks abarcan funciones, pero sin sacrificar el esp\u00edritu pr\u00e1ctico de React. Los Hooks proporcionan acceso a v\u00edas de escape imprescindibles y no requieren que aprendas t\u00e9cnicas complejas de programaci\u00f3n funcional o reactiva.</p>\n<div class=\"blockquote\">\n<strong>Ejemplos</strong>\n<p><a href=\"/react/hooks-overview\">Un vistazo a los Hooks</a> es un buen lugar para comenzar a aprender Hooks.</p>\n</div>\n<h2 id=\"gradual-adoption-strategy\"><a class=\"anchor\" href=\"/react/hooks-intro#gradual-adoption-strategy\"></a>Estrategia de adopci\u00f3n gradual </h2>\n<div class=\"blockquote\">\n<strong>TLDR: No hay planes para eliminar las clases de React.</strong>\n</div>\n<p>Sabemos que los desarrolladores de React est\u00e1n enfocados en la creaci\u00f3n de productos de software y no tienen tiempo para analizar cada nueva API que se est\u00e1 lanzando. Los Hooks son muy nuevos, y tal vez sea mejor esperar m\u00e1s ejemplos y tutoriales antes de pensar en aprenderlos o adoptarlos.</p>\n<p>Tambi\u00e9n entendemos que la barra para a\u00f1adir una nueva primitiva a React es extremadamente alta. Para los lectores curiosos, hemos preparado un <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs/pull/68\">RFC detallado</a> que profundiza en la motivaci\u00f3n con m\u00e1s detalles y proporciona una perspectiva extra sobre las decisiones de dise\u00f1o espec\u00edficas y el estado de la t\u00e9cnica relacionado.</p>\n<p><strong>Es crucial, que los Hooks trabajen codo a codo con el c\u00f3digo existente para que puedas adoptarlos gradualmente.</strong> No hay prisa por migrar a los Hooks. Recomendamos evitar cualquier \u201cgran reescritura\u201d, especialmente para componentes de clase complejos que ya existan. Se necesita un poco de cambio de mentalidad para empezar a \u201cpensar en Hooks\u201d. En nuestra experiencia, es mejor practicar primero el uso de Hooks en componentes nuevos y no cr\u00edticos, y asegurarnos de que todos los miembros del equipo se sientan c\u00f3modos con ellos. Despu\u00e9s de que le des una oportunidad a Hooks, por favor si\u00e9ntete libre de <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/new\">enviarnos tus comentarios</a>, positivos o negativos.</p>\n<p>Pretendemos que Hooks cubra todos los casos de uso existentes para las clases, pero <strong>seguiremos soportando los componentes de clase en un futuro previsible.</strong> En Facebook, tenemos decenas de miles de componentes escritos como clases, y no tenemos absolutamente ning\u00fan plan para reescribirlos. En su lugar, estamos empezando a usar Hooks en el nuevo c\u00f3digo junto con las clases.</p>\n<h2 id=\"frequently-asked-questions\"><a class=\"anchor\" href=\"/react/hooks-intro#frequently-asked-questions\"></a>Preguntas frecuentes </h2>\n<p>Hemos preparado una p\u00e1gina de <a href=\"/react/hooks-faq\">Preguntas frecuentes acerca de Hooks</a> que responde a las preguntas m\u00e1s frecuentes sobre Hooks.</p>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-intro#next-steps\"></a>Pr\u00f3ximos pasos </h2>\n<p>Al final de esta p\u00e1gina, deber\u00edas tener una idea aproximada de los problemas que los Hooks est\u00e1n resolviendo, pero muchos detalles probablemente no est\u00e1n claros. \u00a1No te preocupes! <strong>Ahora vayamos a la <a href=\"/react/hooks-overview\">siguiente p\u00e1gina</a> donde empezamos a aprender sobre los Hooks por medio de ejemplos.</strong></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/hooks-intro.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-intro", "nav": ["/react/glossary", "/react/hooks-overview"]}, {"key": "2. Un vistazo a los Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los <em>Hooks</em> son una nueva incorporaci\u00f3n en React 16.8. Te permiten usar estado y otras caracter\u00edsticas de React sin escribir una clase.</p>\n<p>Los Hooks son <a href=\"/react/hooks-intro#no-breaking-changes\">compatibles con versiones anteriores</a>. Esta p\u00e1gina proporciona una descripci\u00f3n general de Hooks para usuarios experimentados de React. Esta es una r\u00e1pida mirada. Si te confundes, busca un recuadro amarillo como este:</p>\n<div class=\"blockquote\">\n<strong>Explicaci\u00f3n Detallada</strong>\n<p>Lee la <a href=\"/react/hooks-intro#motivation\">Motivaci\u00f3n</a> para entender por qu\u00e9 estamos introduciendo Hooks a React.</p>\n</div>\n<p><strong>\u2191\u2191\u2191 Cada secci\u00f3n termina con un recuadro amarillo como este.</strong> Ellos vinculan a explicaciones detalladas.</p>\n<h2 id=\"state-hook\"><a class=\"anchor\" href=\"/react/hooks-overview#state-hook\"></a>\ud83d\udccc Hook de estado </h2>\n<p>Este ejemplo renderiza un contador. Cuando haces click en el bot\u00f3n, incrementa el valor:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declara una nueva variable de estado, que llamaremos \"count\".</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aqu\u00ed, <code class=\"language-javascript\">useState</code> es un <em>Hook</em> (hablaremos de lo que esto significa en un momento). Lo llamamos dentro de un componente de funci\u00f3n para agregarle un estado local. React mantendr\u00e1 este estado entre re-renderizados. <code class=\"language-javascript\">useState</code> devuelve un par: el valor de estado <em>actual</em> y una funci\u00f3n que le permite actualizarlo. Puedes llamar a esta funci\u00f3n desde un controlador de eventos o desde otro lugar. Es similar a <code class=\"language-javascript\">this.setState</code> en una clase, excepto que no combina el estado antiguo y el nuevo. (Mostraremos un ejemplo comparando <code class=\"language-javascript\">useState</code> con <code class=\"language-javascript\">this.state</code> en <a href=\"/react/hooks-state\">Usando el Hook de estado</a>).</p>\n<p>El \u00fanico argumento para <code class=\"language-javascript\">useState</code> es el estado inicial. En el ejemplo anterior, es <code class=\"language-javascript\">0</code> porque nuestro contador comienza desde cero. Ten en cuenta que a diferencia de <code class=\"language-javascript\">this.state</code>, el estado aqu\u00ed no tiene que ser un objeto \u2014 aunque puede serlo si quisieras. El argumento de estado inicial solo se usa durante el primer renderizado.</p>\n<h4 id=\"declaring-multiple-state-variables\"><a class=\"anchor\" href=\"/react/hooks-overview#declaring-multiple-state-variables\"></a>Declarando m\u00faltiples variables de estado </h4>\n<p>Puedes usar el Hook de estado m\u00e1s de una vez en un mismo componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ExampleWithManyStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Declarar m\u00faltiple variables de estado!</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'Learn Hooks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La sintaxis de <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/Destructuring_assignment\">desestructuraci\u00f3n de un array</a> nos permite dar diferentes nombres a las variables de estado que declaramos llamando a <code class=\"language-javascript\">useState</code>. Estos nombres no forman parte de la API <code class=\"language-javascript\">useState</code>. En su lugar, React asume que si llamas a <code class=\"language-javascript\">useState</code> muchas veces, lo haces en el mismo orden durante cada renderizado. Volveremos a explicar por qu\u00e9 esto funciona y cu\u00e1ndo ser\u00e1 \u00fatil m\u00e1s adelante.</p>\n<h4 id=\"but-what-is-a-hook\"><a class=\"anchor\" href=\"/react/hooks-overview#but-what-is-a-hook\"></a>\u00bfPero qu\u00e9 es un Hook? </h4>\n<p>Los Hooks son funciones que te permiten \u201cenganchar\u201d el estado de React y el ciclo de vida desde componentes de funci\u00f3n. Los hooks no funcionan dentro de las clases \u2014 te permiten usar React sin clases. (<a href=\"/react/hooks-intro#gradual-adoption-strategy\">No recomendamos</a> reescribir tus componentes existentes de la noche a la ma\u00f1ana, pero puedes comenzar a usar Hooks en los nuevos si quieres).</p>\n<p>React proporciona algunos Hooks incorporados como <code class=\"language-javascript\">useState</code>. Tambi\u00e9n puedes crear tus propios Hooks para reutilizar el comportamiento con estado entre diferentes componentes. Primero veremos los Hooks incorporados.</p>\n<div class=\"blockquote\">\n<strong>Explicaci\u00f3n Detallada</strong>\n<p>Puedes aprender m\u00e1s sobre el Hook de estado en la p\u00e1gina dedicada: <a href=\"/react/hooks-state\">Usando el Hook de estado</a>.</p>\n</div>\n<h2 id=\"\ufe0f-hook-de-efecto-\ufe0feffect-hook\"><a class=\"anchor\" href=\"/react/hooks-overview#%EF%B8%8F-hook-de-efecto-%EF%B8%8Feffect-hook\"></a>\u26a1\ufe0f Hook de efecto {#\ufe0feffect-hook}</h2>\n<p>Es probable que hayas realizado recuperaci\u00f3n de datos, suscripciones o modificaci\u00f3n manual del DOM desde los componentes de React. Llamamos a estas operaciones \u201cefectos secundarios\u201d (o \u201cefectos\u201d para abreviar) porque pueden afectar a otros componentes y no se pueden hacer durante el renderizado.</p>\n<p>El Hook de efecto, <code class=\"language-javascript\">useEffect</code>, agrega la capacidad de realizar efectos secundarios desde un componente de funci\u00f3n. Tiene el mismo prop\u00f3sito que <code class=\"language-javascript\">componentDidMount</code>,<code class=\"language-javascript\">componentDidUpdate</code> y <code class=\"language-javascript\">componentWillUnmount</code> en las clases React, pero unificadas en una sola API. (Mostraremos ejemplos comparando <code class=\"language-javascript\">useEffect</code> con estos m\u00e9todos en <a href=\"/react/hooks-effect\">Usando el Hook de efecto</a>).</p>\n<p>Por ejemplo, este componente establece el t\u00edtulo del documento despu\u00e9s de que React actualiza el DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Similar a componentDidMount y componentDidUpdate:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Actualiza el t\u00edtulo del documento usando la Browser API</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cuando llamas a <code class=\"language-javascript\">useEffect</code>, le est\u00e1s diciendo a React que ejecute tu funci\u00f3n de \u201cefecto\u201d despu\u00e9s de vaciar los cambios en el DOM. Los efectos se declaran dentro del componente para que tengan acceso a sus props y estado. De forma predeterminada, React ejecuta los efectos despu\u00e9s de cada renderizado \u2014 <em>incluyendo</em> el primer renderizado. (Hablaremos m\u00e1s sobre c\u00f3mo se compara esto con los ciclos de vida de una clase en <a href=\"/react/hooks-effect\">Usando el Hook de efecto</a>).</p>\n<p>Los efectos tambi\u00e9n pueden especificar opcionalmente c\u00f3mo \u201climpiar\u201d despu\u00e9s de ellos devolviendo una funci\u00f3n. Por ejemplo, este componente utiliza un efecto para suscribirse al estado en l\u00ednea de un amigo, y se limpia al anular su suscripci\u00f3n:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En este ejemplo, React cancelar\u00e1 la suscripci\u00f3n de nuestra <code class=\"language-javascript\">ChatAPI</code> cuando se desmonte el componente, as\u00ed como antes de volver a ejecutar el efecto debido a un renderizado posterior. (Si prefieres, hay una manera de <a href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\">decirle a React que omita la re-suscripcion</a> si el <code class=\"language-javascript\">props.friend.id</code> que pasamos a la <code class=\"language-javascript\">ChatAPI</code> no ha cambiado).</p>\n<p>Al igual que con <code class=\"language-javascript\">useState</code>, puedes usar m\u00e1s de un solo efecto en un componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatusWithCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Los Hooks te permiten organizar efectos secundarios en un componente seg\u00fan qu\u00e9 partes est\u00e1n relacionadas (como agregar y eliminar una suscripci\u00f3n), en lugar de forzar una divisi\u00f3n basada en m\u00e9todos del ciclo de vida.</p>\n<div class=\"blockquote\">\n<strong>Explicaci\u00f3n detallada</strong>\n<p>Puede obtener m\u00e1s informaci\u00f3n sobre <code class=\"language-javascript\">useEffect</code> en la p\u00e1gina dedicada: <a href=\"/react/hooks-effect\">Usando el Hook de efecto</a>.</p>\n</div>\n<h2 id=\"\ufe0f-reglas-de-hooks-\ufe0frules-of-hooks\"><a class=\"anchor\" href=\"/react/hooks-overview#%EF%B8%8F-reglas-de-hooks-%EF%B8%8Frules-of-hooks\"></a>\u270c\ufe0f Reglas de Hooks {#\ufe0frules-of-hooks}</h2>\n<p>Los Hooks son funciones de JavaScript, pero imponen dos reglas adicionales:</p>\n<ul>\n<li>Solo llamar Hooks <strong>en el nivel superior</strong>. No llames Hooks dentro de loops, condiciones o funciones anidadas.</li>\n<li>Solo llamar Hooks <strong>desde componentes de funci\u00f3n de React</strong>. No llames Hooks desde las funciones regulares de JavaScript. (Solo hay otro lugar v\u00e1lido para llamar Hooks: tus propios Hooks personalizados. En un momento aprenderemos sobre estos).</li>\n</ul>\n<p>Proporcionamos un <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">plugin de linter</a> para forzar estas reglas autom\u00e1ticamente. Entendemos que estas reglas pueden parecer limitantes o confusas al principio, pero son esenciales para hacer que los Hooks funcionen bien.</p>\n<div class=\"blockquote\">\n<strong>Explicaci\u00f3n Detallada</strong>\n<p>Puedes aprender m\u00e1s sobre estas reglas en la p\u00e1gina dedicada: <a href=\"/react/hooks-rules\">Reglas de Hooks</a>.</p>\n</div>\n<h2 id=\"building-your-own-hooks\"><a class=\"anchor\" href=\"/react/hooks-overview#building-your-own-hooks\"></a>\ud83d\udca1 Construyendo tus propios Hooks </h2>\n<p>A veces, queremos reutilizar alguna l\u00f3gica de estado entre componentes. Tradicionalmente, hab\u00eda dos soluciones populares para este problema: <a href=\"/react/higher-order-components\">componente de orden superior</a> y <a href=\"/react/render-props\">render props</a>. Los Hooks personalizados te permiten hacer esto, pero sin agregar m\u00e1s componentes a tu \u00e1rbol.</p>\n<p>Anteriormente en esta p\u00e1gina, presentamos un componente <code class=\"language-javascript\">FriendStatus</code> que llama a los Hooks <code class=\"language-javascript\">useState</code> y <code class=\"language-javascript\">useEffect</code> para suscribirse al estado en l\u00ednea de un amigo. Digamos que tambi\u00e9n queremos reutilizar esta l\u00f3gica de suscripci\u00f3n en otro componente.</p>\n<p>Primero, extraeremos esta l\u00f3gica en un Hook personalizado llamado <code class=\"language-javascript\">useFriendStatus</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Toma <code class=\"language-javascript\">friendID</code> como argumento, y retorna si nuestro amigo est\u00e1 en l\u00ednea o no.</p>\n<p>Ahora lo podemos usar desde ambos componentes:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El estado de cada componente es completamente independiente. Los Hooks son una forma de reutilizar <em>la l\u00f3gica de estado</em>, no el estado en s\u00ed. De hecho, cada <em>llamada</em> a un Hook tiene un estado completamente aislado \u2014 por lo que incluso puedes usar el mismo Hook personalizado dos veces en un componente.</p>\n<p>Los Hooks personalizados son m\u00e1s una convenci\u00f3n que una funcionalidad. Si el nombre de una funci\u00f3n comienza con \u201d<code class=\"language-javascript\">use</code>\u201d y llama a otros Hooks, decimos que es un Hook personalizado. La convenci\u00f3n de nomenclatura <code class=\"language-javascript\">useSomething</code> es c\u00f3mo nuestro plugin de linter puede encontrar errores en el c\u00f3digo usando Hooks.</p>\n<p>Puedes escribir Hooks personalizados que cubran una amplia gama de casos de uso como manejo de formularios, animaci\u00f3n, suscripciones declarativas, temporizadores y probablemente muchos m\u00e1s que no hemos considerado. Estamos muy entusiasmados de ver los Hooks personalizados que la comunidad de React crear\u00e1.</p>\n<div class=\"blockquote\">\n<strong>Explicaci\u00f3n Detallada</strong>\n<p>Puedes aprender m\u00e1s sobre Hooks personalizados en la p\u00e1gina dedicada: <a href=\"/react/hooks-custom\">Construyendo Tus Propios Hooks</a>.</p>\n</div>\n<h2 id=\"other-hooks\"><a class=\"anchor\" href=\"/react/hooks-overview#other-hooks\"></a>\ud83d\udd0c Otros Hooks </h2>\n<p>Hay algunos Hooks incorporados de uso menos com\u00fan que pueden resultarte \u00fatiles. Por ejemplo, <a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a> te permite suscribirte al contexto React sin introducir el anidamiento:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> locale <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>LocaleContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Y <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> te permite manejar el estado local de componentes complejos con un reducer:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// ...</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Explicaci\u00f3n Detallada</strong>\n<p>Puedes aprender m\u00e1s sobre todos los Hooks incorporados en la p\u00e1gina dedicada: <a href=\"/react/hooks-reference\">Referencia de la Hooks API</a>.</p>\n</div>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-overview#next-steps\"></a>Pr\u00f3ximos pasos </h2>\n<p>\u00a1Uf, eso fue r\u00e1pido! Si algunas cosas no tienen mucho sentido o si te gustar\u00eda aprender m\u00e1s en detalle, puedes leer las siguientes p\u00e1ginas, comenzando con la documentaci\u00f3n de <a href=\"/react/hooks-state\">Hook de estado</a>.</p>\n<p>Tambi\u00e9n puede consultar la <a href=\"/react/hooks-reference\">Referencia de la Hooks API</a> y las <a href=\"/react/hooks-faq\">Preguntas Frecuentes sobre Hooks</a>.</p>\n<p>Finalmente, no dejes de visitar la <a href=\"/react/hooks-intro\">p\u00e1gina de introducci\u00f3n</a> que explica <em>por qu\u00e9</em> estamos agregando Hooks y c\u00f3mo comenzaremos a usarlos junto a las clases \u2014 sin volver a escribir nuestras aplicaciones.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/hooks-overview.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-overview", "nav": ["/react/hooks-intro", "/react/hooks-state"]}, {"key": "3. Usando el Hook de estado", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los <em>Hooks</em> son una nueva incorporaci\u00f3n en React 16.8. Te permiten usar estado y otras caracter\u00edsticas de React sin escribir una clase.</p>\n<p>La <a href=\"/react/hooks-intro\">p\u00e1gina de introducci\u00f3n</a> utiliz\u00f3 este ejemplo para familiarizarte con los Hooks:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declaraci\u00f3n de una variable de estado que llamaremos \"count\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Empezaremos aprendiendo sobre los Hooks comparando este c\u00f3digo con uno equivalente en una clase.</p>\n<h2 id=\"equivalent-class-example\"><a class=\"anchor\" href=\"/react/hooks-state#equivalent-class-example\"></a>Ejemplo equivalente en forma de clase </h2>\n<p>Si has usado clases en React previamente, este c\u00f3digo te resultar\u00e1 familiar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          Click me\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El estado empieza como <code class=\"language-javascript\">{ count:0 }</code> y se incrementa <code class=\"language-javascript\">state.count</code> cuando el usuario hace click a un bot\u00f3n llamando a <code class=\"language-javascript\">this.setState()</code>. Usaremos fragmentos de esta clase en toda la p\u00e1gina.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Puedes estar pregunt\u00e1ndote por qu\u00e9 estamos usando un contador en lugar de un ejemplo m\u00e1s realista. Esto es porque ayuda a centrarse en la API mientras seguimos dando nuestros primeros pasos con los Hooks.</p>\n</div>\n<h2 id=\"hooks-and-function-components\"><a class=\"anchor\" href=\"/react/hooks-state#hooks-and-function-components\"></a>Hooks y componentes de funci\u00f3n </h2>\n<p>Como recordatorio, un componente de funci\u00f3n en React se ve as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Puedes usar Hooks aqu\u00ed!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>o as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Puedes usar Hooks aqu\u00ed!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Puedes haber conocido previamente estos componentes como \u201ccomponentes sin estado\u201d. Actualmente estamos presentando la habilidad de usar el estado de React desde ellos por lo que preferimos el nombre \u201ccomponentes de funci\u00f3n\u201d.</p>\n<p>Los Hooks <strong>no</strong> funcionan en clases, pero los puedes usar en lugar de escribir clases.</p>\n<h2 id=\"whats-a-hook\"><a class=\"anchor\" href=\"/react/hooks-state#whats-a-hook\"></a>\u00bfQu\u00e9 es un Hook? </h2>\n<p>Nuestro nuevo ejemplo empieza importando el Hook <code class=\"language-javascript\">useState</code> desde React:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>\u00bfQu\u00e9 es un Hook?</strong> Un Hook es una funci\u00f3n especial que permite \u201cconectarse\u201d a caracter\u00edsticas de React. Por ejemplo, <code class=\"language-javascript\">useState</code> es un Hook que te permite a\u00f1adir el estado de React a un componente de funci\u00f3n. M\u00e1s adelante hablaremos sobre otros Hooks.</p>\n<p><strong>\u00bfCu\u00e1ndo deber\u00eda usar un Hook?</strong> Si creas un componente de funci\u00f3n y descubres que necesitas a\u00f1adirle estado, antes hab\u00eda que crear una clase. Ahora puedes usar un Hook dentro de un componente de funci\u00f3n existente. \u00a1Vamos a hacerlo ahora mismo!</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Hay algunas reglas especiales sobre donde puedes y no puedes usar Hooks dentro de un componente. Las aprenderemos en <a href=\"/react/hooks-rules\">Reglas de los Hooks</a>.</p>\n</div>\n<h2 id=\"declaring-a-state-variable\"><a class=\"anchor\" href=\"/react/hooks-state#declaring-a-state-variable\"></a>Declarando una variable de estado </h2>\n<p>En una clase, inicializamos el estado <code class=\"language-javascript\">count</code> a <code class=\"language-javascript\">0</code> estableciendo <code class=\"language-javascript\">this.state</code> a <code class=\"language-javascript\">{ count: 0 }</code> en el constructor:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>En un componente de funci\u00f3n no existe <code class=\"language-javascript\">this</code> por lo que no podemos asignar o leer <code class=\"language-javascript\">this.state</code>. En su lugar, usamos el Hook <code class=\"language-javascript\">useState</code> directamente dentro de nuestro componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declaraci\u00f3n de una variable de estado que llamaremos \"count\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><strong>\u00bfQu\u00e9 hace la llamada a <code class=\"language-javascript\">useState</code>?</strong> Declara una \u201cvariable de estado\u201d. Nuestra variable se llama <code class=\"language-javascript\">count</code>, pero podemos llamarla como queramos, por ejemplo <code class=\"language-javascript\">banana</code>. Esta es una forma de \u201cpreservar\u201d algunos valores entre las llamadas de la funci\u00f3n - <code class=\"language-javascript\">useState</code> es una nueva forma de usar exactamente las mismas funciones que <code class=\"language-javascript\">this.state</code> nos da en una clase. Normalmente, las variables \u201cdesaparecen\u201d cuando se sale de la funci\u00f3n, pero las variables de estado son conservadas por React.</p>\n<p><strong>\u00bfQu\u00e9 pasamos a <code class=\"language-javascript\">useState</code> como argumento?</strong> El \u00fanico argumento para el Hook <code class=\"language-javascript\">useState()</code> es el estado inicial. Al contrario que en las clases, el estado no tiene por qu\u00e9 ser un objeto. Podemos usar n\u00fameros o strings si es todo lo que necesitamos. En nuestro ejemplo, solamente queremos un n\u00famero para contar el n\u00famero de clicks del usuario, por eso pasamos <code class=\"language-javascript\">0</code> como estado inicial a nuestra variable. (Si queremos guardar dos valores distintos en el estado, llamar\u00edamos a <code class=\"language-javascript\">useState()</code> dos veces).</p>\n<p><strong>\u00bfQu\u00e9 devuelve <code class=\"language-javascript\">useState</code>?</strong> Devuelve una pareja de valores: el estado actual y una funci\u00f3n que lo actualiza. Por eso escribimos <code class=\"language-javascript\">const [count, setCount] = useState()</code>. Esto es similar a <code class=\"language-javascript\">this.state.count</code> y <code class=\"language-javascript\">this.setState</code> en una clase, excepto que se obtienen juntos. Si no conoces la sintaxis que hemos usado, volveremos a ella <a href=\"/react/hooks-state#tip-what-do-square-brackets-mean\">al final de esta p\u00e1gina</a>.</p>\n<p>Ahora que sabemos qu\u00e9 hace el Hook <code class=\"language-javascript\">useState</code>, nuestro ejemplo deber\u00eda tener m\u00e1s sentido:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declaraci\u00f3n de una variable de estado que llamaremos \"count\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Declaramos una variable de estado llamada <code class=\"language-javascript\">count</code> y le asignamos a <code class=\"language-javascript\">0</code>. React recordar\u00e1 su valor actual entre re-renderizados, y devolver\u00e1 el valor m\u00e1s reciente a nuestra funci\u00f3n. Si se quiere actualizar el valor de <code class=\"language-javascript\">count</code> actual, podemos llamar a <code class=\"language-javascript\">setCount</code></p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Puedes estar pregunt\u00e1ndote \u00bfPor qu\u00e9 <code class=\"language-javascript\">useState</code> no se llama <code class=\"language-javascript\">createState</code>?</p>\n<p>\u201cCrear\u201d no ser\u00eda del todo correcto porque el estado solamente se crea la primera vez que nuestro componente se renderiza. Durante los siguientes renderizados, <code class=\"language-javascript\">useState</code> nos da el estado actual. Esta es tambi\u00e9n la raz\u00f3n por la que los nombres de los Hooks <em>siempre</em> empiezan con <code class=\"language-javascript\">use</code>. Aprenderemos sobre ello m\u00e1s adelante <a href=\"/react/hooks-rules\">Reglas de Hooks</a>.</p>\n</div>\n<h2 id=\"reading-state\"><a class=\"anchor\" href=\"/react/hooks-state#reading-state\"></a>Leyendo el estado </h2>\n<p>Cuando queremos mostrar el valor actual de count en una clase lo obtenemos de <code class=\"language-javascript\">this.state.count</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>En una funci\u00f3n podemos usar <code class=\"language-javascript\">count</code> directamente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h2 id=\"updating-state\"><a class=\"anchor\" href=\"/react/hooks-state#updating-state\"></a>Actualizando el estado </h2>\n<p>En una clase, necesitamos llamar a <code class=\"language-javascript\">this.setState()</code> para actualizar el estado <code class=\"language-javascript\">count</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    Click me</span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>En una funci\u00f3n ya tenemos <code class=\"language-javascript\">setCount</code> y <code class=\"language-javascript\">count</code> como variables, as\u00ed que no necesitamos <code class=\"language-javascript\">this</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">    Click me</span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<h2 id=\"recap\"><a class=\"anchor\" href=\"/react/hooks-state#recap\"></a>Resumen </h2>\n<p>Ahora <strong>recapitularemos lo que hemos aprendido l\u00ednea por l\u00ednea</strong> y comprobaremos si lo hemos entendido.</p>\n<!--\n  I'm not proud of this line markup. Please somebody fix this.\n  But if GitHub got away with it for years we can cheat.\n-->\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">1</span><span class=\"token operator\">:</span>  <span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n <span class=\"token number\">3</span><span class=\"token operator\">:</span>  <span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">4</span><span class=\"token operator\">:</span>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n <span class=\"token number\">6</span><span class=\"token operator\">:</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n <span class=\"token number\">7</span><span class=\"token operator\">:</span>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\"> 8:        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\"> 9:        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">10:         Click me</span>\n<span class=\"token plain-text\">11:        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">12:      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token number\">13</span><span class=\"token operator\">:</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">14</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>L\u00ednea 1:</strong> Importamos el Hook <code class=\"language-javascript\">useState</code> desde React que nos permite mantener un estado local en un componente de funci\u00f3n.</li>\n<li><strong>L\u00ednea 4:</strong> Dentro del componente <code class=\"language-javascript\">Example</code> declaramos una nueva variable de estado llamando al Hook <code class=\"language-javascript\">useState</code>. Este nos devuelve un par de valores, a los que damos un nombre. Llamamos <code class=\"language-javascript\">count</code> a nuestra variable porque guarda el n\u00famero de clicks en el bot\u00f3n. La inicializamos a cero pasando <code class=\"language-javascript\">0</code> como \u00fanico argumento a <code class=\"language-javascript\">useState</code>. El segundo elemento retornado es una funci\u00f3n que nos permite actualizar <code class=\"language-javascript\">count</code>, por lo que le llamamos <code class=\"language-javascript\">setCount</code>.</li>\n<li><strong>L\u00ednea 9:</strong> Cuando el usuario hace click, llamamos a <code class=\"language-javascript\">setCount</code> con un nuevo valor. React actualizar\u00e1 entonces el componente <code class=\"language-javascript\">Example</code> pas\u00e1ndole el nuevo valor de <code class=\"language-javascript\">count</code>.</li>\n</ul>\n<p>Esto puede parecer mucho para empezar. \u00a1No tengas prisa! Si te pierdes con esta explicaci\u00f3n repasa el c\u00f3digo de arriba y trata de leerlo de arriba hacia abajo. Prometemos que una vez trates de \u201colvidar\u201d como funciona el estado en las clases y mires a este c\u00f3digo con la mente despejada cobrar\u00e1 sentido.</p>\n<h3 id=\"tip-what-do-square-brackets-mean\"><a class=\"anchor\" href=\"/react/hooks-state#tip-what-do-square-brackets-mean\"></a>Tip: \u00bfQu\u00e9 significan los corchetes? </h3>\n<p>Habr\u00e1s observado los corchetes cuando declaramos una variable de estado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Los nombres de la izquierda no son parte de la API de React. Puedes nombrar tus variables de estado como quieras:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esta sintaxis de Javascript se llama <a class=\"external-link\" href=\"https://developer.mozilla.org/es-ES/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring\">\u201cdesestructuraci\u00f3n de arrays\u201d</a>. Significa que estamos creando dos variables <code class=\"language-javascript\">fruit</code> y <code class=\"language-javascript\">setFruit</code>, donde <code class=\"language-javascript\">fruit</code> se obtiene del primer valor devuelto por <code class=\"language-javascript\">useState</code> y <code class=\"language-javascript\">setFruit</code> es el segundo. Es equivalente a este c\u00f3digo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> fruitStateVariable <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns a pair</span>\n  <span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> fruitStateVariable<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// First item in a pair</span>\n  <span class=\"token keyword\">var</span> setFruit <span class=\"token operator\">=</span> fruitStateVariable<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Second item in a pair</span></code></pre></div>\n<p>Cuando declaramos una variable de estado con <code class=\"language-javascript\">useState</code>, devuelve un array con dos elementos. El primero es el valor actual y el segundo es una funci\u00f3n que nos permite actualizarlo. Usar <code class=\"language-javascript\">[0]</code> y <code class=\"language-javascript\">[1]</code> para acceder a ello es un poco confuso porque tienen un significado espec\u00edfico. Por ello usamos la desestructuraci\u00f3n de arrays en su lugar.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Puedes tener curiosidad por c\u00f3mo React sabe a qu\u00e9 componente corresponde <code class=\"language-javascript\">useState</code> ya que no estamos pasando algo como <code class=\"language-javascript\">this</code> a React. Responderemos <a href=\"/react/hooks-faq#how-does-react-associate-hook-calls-with-components\">esta pregunta</a> y muchas otras en la secci\u00f3n FAQ.</p>\n</div>\n<h3 id=\"tip-using-multiple-state-variables\"><a class=\"anchor\" href=\"/react/hooks-state#tip-using-multiple-state-variables\"></a>Tip: Usando m\u00faltiples variables de estado </h3>\n<p>Declarando variables de estado como un par <code class=\"language-javascript\">[something, setSomething]</code> tambi\u00e9n es \u00fatil porque nos permite dar <em>diferentes</em> nombres a diferentes variables de estados si queremos usar m\u00e1s de una:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ExampleWithManyStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Declare multiple state variables!</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'Learn Hooks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En el componente de arriba tenemos <code class=\"language-javascript\">age</code>, <code class=\"language-javascript\">fruit</code>, y <code class=\"language-javascript\">todos</code> como variables locales y los podemos actualizar de forma individual:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">handleOrangeClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Similar a this.setState({ fruit: 'orange' })</span>\n    <span class=\"token function\">setFruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>No tienes que usar obligatoriamente</em> tantas variables de estado: las variables de estado pueden contener objetos y arrays para que puedas agrupar la informaci\u00f3n relacionada. Sin embargo, al contrario que en una clase, actualizar una variable de estado siempre <em>la reemplaza</em> en lugar de combinarla. </p>\n<p> Damos m\u00e1s recomendaciones sobre c\u00f3mo separar distintas variables de estado <a href=\"/react/hooks-faq#should-i-use-one-or-many-state-variables\">en la FAQ</a>.</p>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-state#next-steps\"></a>Siguientes pasos </h2>\n<p>En esta p\u00e1gina hemos aprendido sobre uno de los Hooks proporcionado por React, llamado <code class=\"language-javascript\">useState</code>. Tambi\u00e9n nos vamos a referir a \u00e9l como \u201cHook de estado\u201d, nos permite a\u00f1adir un estado local a los componentes de funci\u00f3n de React.</p>\n<p>Tambi\u00e9n hemos aprendido un poco m\u00e1s sobre qu\u00e9 son los Hooks. Son funciones que te permiten \u201cconectarte\u201d a las caracter\u00edsticas de React desde componentes de funci\u00f3n. Sus nombres siempre empiezan con <code class=\"language-javascript\">use</code> y hay m\u00e1s Hooks que a\u00fan no hemos visto.</p>\n<p><strong>Ahora contin\u00faa <a href=\"/react/hooks-effect\">aprendiendo el siguiente Hook: <code class=\"language-javascript\">useEffect</code>.</a></strong> Te permite utilizar side effects en componentes y es similar a los m\u00e9todos del ciclo de vida en las clases.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/hooks-state.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-state", "nav": ["/react/hooks-overview", "/react/hooks-effect"]}, {"key": "4. Usando el Hook de efecto", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los <em>Hooks</em> son una nueva incorporaci\u00f3n en React 16.8. Te permiten usar estado y otras caracter\u00edsticas de React sin escribir una clase.</p>\n<p>El <em>Hook de efecto</em> te permite llevar a cabo efectos secundarios en componentes funcionales:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// De forma similar a componentDidMount y componentDidUpdate</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Actualiza el t\u00edtulo del documento usando la API del navegador</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este fragmento est\u00e1 basado en el <a href=\"/react/hooks-state\">ejemplo de contador de la p\u00e1gina anterior</a>, pero le hemos a\u00f1adido una funcionalidad nueva: actualizamos el t\u00edtulo del documento con un mensaje personalizado que incluye el n\u00famero de clicks.</p>\n<p>Peticiones de datos, establecimiento de suscripciones y actualizaciones manuales del DOM en componentes de React ser\u00edan ejemplos de efectos secundarios. Tanto si est\u00e1s acostumbrado a llamar a estas operaciones \u201cefectos secundarios\u201d (o simplemente \u201cefectos\u201d) como si no, probablemente los has llevado a cabo en tus componentes con anterioridad.</p>\n<div class=\"blockquote\">\n<strong>Consejo</strong>\n<p>Si est\u00e1s familiarizado con el ciclo de vida de las clases de React y sus m\u00e9todos, el <em>Hook</em> <code class=\"language-javascript\">useEffect</code> equivale a <code class=\"language-javascript\">componentDidMount</code>, <code class=\"language-javascript\">componentDidUpdate</code> y <code class=\"language-javascript\">componentWillUnmount</code> combinados.</p>\n</div>\n<p>Hay dos tipos de efectos secundarios en los componentes de React: aquellos que no necesitan una operaci\u00f3n de saneamiento y los que s\u00ed la necesitan. Vamos a profundizar m\u00e1s en esta distinci\u00f3n.</p>\n<h2 id=\"effects-without-cleanup\"><a class=\"anchor\" href=\"/react/hooks-effect#effects-without-cleanup\"></a>Efectos sin saneamiento </h2>\n<p>En ciertas ocasiones, queremos <strong>ejecutar c\u00f3digo adicional despu\u00e9s de que React haya actualizado el DOM.</strong> Peticiones de red, mutaciones manuales del DOM y registros, son ejemplos comunes de efectos que no requieren una acci\u00f3n de saneamiento. Decimos esto porque podemos ejecutarlos y olvidarnos de ellos inmediatamente. Vamos a comparar c\u00f3mo las clases y los <em>Hooks</em> nos permiten expresar dichos efectos.</p>\n<h3 id=\"example-using-classes\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-classes\"></a>Ejemplo con clases </h3>\n<p>En los componentes de React con clases, el m\u00e9todo <code class=\"language-javascript\">render</code> no deber\u00eda causar efectos secundarios por s\u00ed mismo. Ser\u00eda prematuro. Normalmente queremos llevar a cabo nuestros efectos <em>despu\u00e9s</em> de que React haya actualizado el DOM.</p>\n<p>Y es por eso que en las clases de React ponemos los efectos secundarios en <code class=\"language-javascript\">componentDidMount</code> y <code class=\"language-javascript\">componentDidUpdate</code>. Volviendo a nuestro ejemplo, aqu\u00ed tenemos el componente clase contador de React que actualiza el t\u00edtulo del documento justo despu\u00e9s de que React haga cambios en el DOM:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          Click me</span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>F\u00edjate en c\u00f3mo <strong>hemos duplicado el c\u00f3digo en los dos m\u00e9todos del ciclo de vida en la clase</strong></p>\n<p>Esto es porque en muchas ocasiones queremos llevar a cabo el mismo efecto secundario sin importar si el componente acaba de montarse o si se ha actualizado. Conceptualmente, queremos que ocurra despu\u00e9s de cada renderizado, pero las clases de React no tienen un m\u00e9todo que haga eso. Podr\u00edamos extraer un m\u00e9todo, pero a\u00fan as\u00ed tendr\u00edamos que llamarlo en los dos sitios.</p>\n<p>Veamos ahora c\u00f3mo podemos hacer lo mismo con el <em>Hook</em> <code class=\"language-javascript\">useEffect</code>.</p>\n<h3 id=\"example-using-hooks\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-hooks\"></a>Ejemplo con <em>Hooks</em> </h3>\n<p>Ya hemos visto este ejemplo al principio de la p\u00e1gina, pero ve\u00e1moslo m\u00e1s detenidamente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>\u00bfQu\u00e9 hace <code class=\"language-javascript\">useEffect</code>?</strong> Al usar este <em>Hook</em>, le estamos indicando a React que el componente tiene que hacer algo despu\u00e9s de renderizarse. React recordar\u00e1 la funci\u00f3n que le hemos pasado (nos referiremos a ella como nuestro \u201cefecto\u201d), y la llamar\u00e1 m\u00e1s tarde despu\u00e9s de actualizar el DOM. En este efecto, actualizamos el t\u00edtulo del documento, pero tambi\u00e9n podr\u00edamos hacer peticiones de datos o invocar alguna API imperativa.</p>\n<p><strong>\u00bfPor qu\u00e9 se llama a <code class=\"language-javascript\">useEffect</code> dentro del componente?</strong> Poner <code class=\"language-javascript\">useEffect</code> dentro del componente nos permite acceder a la variable de estado <code class=\"language-javascript\">count</code> (o a cualquier prop) directamente desde el efecto. No necesitamos una API especial para acceder a ella, ya que se encuentra en el \u00e1mbito de la funci\u00f3n. Los <em>Hooks</em> aprovechan los closures de JavaScript y evitan introducir APIs espec\u00edficas de React donde JavaScript ya proporciona una soluci\u00f3n.</p>\n<p><strong>\u00bfSe ejecuta <code class=\"language-javascript\">useEffect</code> despu\u00e9s de cada renderizado?</strong> \u00a1S\u00ed! Por defecto se ejecuta despu\u00e9s del primer renderizado <em>y</em> despu\u00e9s de cada actualizaci\u00f3n. M\u00e1s tarde explicaremos <a href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\">c\u00f3mo modificar este comportamiento</a>. En vez de pensar en t\u00e9rminos de \u201cmontar\u201d y \u201cactualizar\u201d, puede resultarte m\u00e1s f\u00e1cil pensar en efectos que ocurren \u201cdespu\u00e9s del renderizado\u201d. React se asegura de que el DOM se ha actualizado antes de llevar a cabo el efecto.</p>\n<h3 id=\"detailed-explanation\"><a class=\"anchor\" href=\"/react/hooks-effect#detailed-explanation\"></a>Explicaci\u00f3n detallada </h3>\n<p>Ahora que sabemos algo m\u00e1s sobre los efectos, estas l\u00edneas deber\u00edan cobrar sentido:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Declaramos la variable de estado <code class=\"language-javascript\">count</code> y le indicamos a React que necesitamos usar un efecto. Le pasamos una funci\u00f3n al <em>Hook</em> <code class=\"language-javascript\">useEffect</code>. Esta funci\u00f3n que pasamos <em>es</em> nuestro efecto. Dentro de nuestro efecto actualizamos el t\u00edtulo del documento usando la API del navegador <code class=\"language-javascript\">document.title</code>. Podemos leer el valor m\u00e1s reciente de <code class=\"language-javascript\">count</code> dentro del efecto porque se encuentra en el \u00e1mbito de nuestra funci\u00f3n. Cuando React renderiza nuestro componente, recordar\u00e1 este efecto y lo ejecutar\u00e1 despu\u00e9s de actualizar el DOM. Esto sucede en cada renderizado, incluyendo el primero.</p>\n<p>Los desarrolladores experimentados en JavaScript se percatar\u00e1n de que la funci\u00f3n que le pasamos a <code class=\"language-javascript\">useEffect</code> es distinta en cada renderizado. Esto es intencionado. En realidad esto es lo que nos permite leer la variable <code class=\"language-javascript\">count</code> desde el interior de nuestro efecto sin preocuparnos de que su valor est\u00e9 obsoleto. Cada vez que renderizamos, planificamos un <em>efecto</em> diferente, reemplazando el anterior. En cierta manera, esto hace que los efectos funcionen m\u00e1s como parte del resultado del renderizado. Cada efecto pertenece a su correspondiente renderizado. <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">M\u00e1s adelante</a> aclararemos por qu\u00e9 esto es \u00fatil.</p>\n<div class=\"blockquote\">\n<strong>Consejo</strong>\n<p>A diferencia de <code class=\"language-javascript\">componentDidMount</code> o <code class=\"language-javascript\">componentDidUpdate</code>, los efectos planificados con <code class=\"language-javascript\">useEffect</code> no bloquean la actualizaci\u00f3n de la pantalla del navegador. Esto hace que tu aplicaci\u00f3n responda mejor. La mayor\u00eda de efectos no necesitan suceder de manera s\u00edncrona. En los casos poco comunes en los que se necesita una ejecuci\u00f3n s\u00edncrona (como en mediciones de la disposici\u00f3n de elementos), podemos usar el <em>Hook</em> <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a> con una API id\u00e9ntica a la de <code class=\"language-javascript\">useEffect</code>.</p>\n</div>\n<h2 id=\"effects-with-cleanup\"><a class=\"anchor\" href=\"/react/hooks-effect#effects-with-cleanup\"></a>Efectos con saneamiento </h2>\n<p>En el apartado anterior hemos visto c\u00f3mo expresar efectos secundarios que no necesitan ning\u00fan saneamiento. Sin embargo, algunos efectos lo necesitan. Por ejemplo, <strong>si queremos establecer una suscripci\u00f3n</strong> a alguna fuente de datos externa. En ese caso, \u00a1es importante sanear el efecto para no introducir una fuga de memoria! Comparemos c\u00f3mo se puede hacer esto con clases y con <em>Hooks</em>.</p>\n<h3 id=\"example-using-classes-1\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-classes-1\"></a>Ejemplo con clases </h3>\n<p>En una clase de React, normalmente se establece una suscripci\u00f3n en <code class=\"language-javascript\">componentDidMount</code>, y se cancela la suscripci\u00f3n en <code class=\"language-javascript\">componentWillUnmount</code>. Por ejemplo, digamos que tenemos un m\u00f3dulo <code class=\"language-javascript\">ChatAPI</code> que nos permite suscribirnos para saber si un amigo est\u00e1 conectado. As\u00ed es como podemos establecer la suscripci\u00f3n y mostrar ese estado usando una clase:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendStatus</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> status<span class=\"token punctuation\">.</span>isOnline</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>F\u00edjate en c\u00f3mo <code class=\"language-javascript\">componentDidMount</code> y <code class=\"language-javascript\">componentWillUnmount</code> necesitan ser un reflejo el uno del otro. Los m\u00e9todos del ciclo de vida nos obligan a separar esta l\u00f3gica incluso cuando, conceptualmente, el c\u00f3digo de ambos est\u00e1 relacionado con el mismo efecto.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Los lectores perspicaces podr\u00e1n percatarse de que este ejemplo necesita tambi\u00e9n un m\u00e9todo <code class=\"language-javascript\">componentDidUpdate</code> para ser completamente correcto. De momento vamos a ignorar este hecho, pero volveremos a \u00e9l en una <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">secci\u00f3n posterior</a> de esta p\u00e1gina. </p>\n</div>\n<h3 id=\"example-using-hooks-1\"><a class=\"anchor\" href=\"/react/hooks-effect#example-using-hooks-1\"></a>Ejemplo usando <em>Hooks</em> </h3>\n<p>Veamos c\u00f3mo podemos escribir este componente con <em>Hooks</em>.</p>\n<p>Quiz\u00e1s puedas estar pensando que necesitar\u00edamos un efecto aparte para llevar a cabo este saneamiento. Pero el c\u00f3digo para a\u00f1adir y eliminar una suscripci\u00f3n est\u00e1 tan estrechamente relacionado que <code class=\"language-javascript\">useEffect</code> est\u00e1 dise\u00f1ado para mantenerlo unido. Si tu efecto devuelve una funci\u00f3n, React la ejecutar\u00e1 en el momento de sanear el efecto:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Especifica c\u00f3mo sanear este efecto:</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>\u00bfPor qu\u00e9 hemos devuelto una funci\u00f3n en nuestro efecto?</strong> Este es un mecanismo opcional de los efectos. Todos los efectos pueden devolver una funci\u00f3n que los sanea m\u00e1s tarde. Esto nos permite mantener la l\u00f3gica de a\u00f1adir y eliminar suscripciones cerca la una de la otra. \u00a1Son parte del mismo efecto!</p>\n<p><strong>\u00bfCu\u00e1ndo sanea React el efecto exactamente?</strong> React sanea el efecto cuando el componente se desmonta. Sin embargo, como hemos aprendido anteriormente, los efectos no se ejecutan solo una vez, sino en cada renderizado. He aqu\u00ed el motivo por el cual React <em>tambi\u00e9n</em> sanea los efectos de renderizados anteriores antes de ejecutar los efectos del renderizado actual. M\u00e1s adelante analizaremos <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">por qu\u00e9 esto ayuda a evitar errores</a> y <a href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\">c\u00f3mo omitir este funcionamiento en el caso de que provoque problemas de rendimiento</a>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>No tenemos que nombrar la funci\u00f3n devuelta por el efecto. La hemos llamado <code class=\"language-javascript\">cleanup</code> esta vez para clarificar su prop\u00f3sito, pero podemos devolver una funci\u00f3n flecha o nombrarla de otra forma.</p>\n</div>\n<h2 id=\"recap\"><a class=\"anchor\" href=\"/react/hooks-effect#recap\"></a>Recapitulaci\u00f3n </h2>\n<p>Hemos aprendido que <code class=\"language-javascript\">useEffect</code> nos permite expresar diferentes tipos de efectos secundarios despu\u00e9s de que un componente se renderice. Algunos efectos pueden devolver una funci\u00f3n cuando requieran saneamiento:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Otros efectos pueden no tener fase de saneamiento y no devolver nada.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>El <em>Hook</em> de efecto unifica ambos casos en una \u00fanica API. </p>\n\n<p><strong>Si crees que ya tienes un nivel de comprensi\u00f3n decente de como funciona el <em>Hook</em> de efecto o est\u00e1s sobrepasado, puedes pasar a la <a href=\"/react/hooks-rules\">p\u00e1gina siguiente sobre las reglas de los <em>Hooks</em></a> ahora.</strong></p>\n\n<h2 id=\"tips-for-using-effects\"><a class=\"anchor\" href=\"/react/hooks-effect#tips-for-using-effects\"></a>Consejos para usar efectos </h2>\n<p>Vamos a continuar profundizando en algunos aspectos de <code class=\"language-javascript\">useEffect</code> que les resultar\u00e1n curiosos de alguna forma a los usuarios de React experimentados. No te sientas obligado a indagar en ello ahora mismo. Siempre puedes volver a esta p\u00e1gina para conocer m\u00e1s detalles del <em>Hook</em> de efecto.</p>\n<h3 id=\"tip-use-multiple-effects-to-separate-concerns\"><a class=\"anchor\" href=\"/react/hooks-effect#tip-use-multiple-effects-to-separate-concerns\"></a>Consejo: Usa varios efectos para separar conceptos </h3>\n<p>Uno de los problemas que esbozamos en la <a href=\"/react/hooks-intro#complex-components-become-hard-to-understand\">Motivaci\u00f3n</a> para crear los <em>Hooks</em> es que los m\u00e9todos del ciclo de vida de las clases suelen contener l\u00f3gica que no est\u00e1 relacionada, pero la que lo est\u00e1, se fragmenta en varios m\u00e9todos. Este es un componente que combina la l\u00f3gica del contador y el indicador de estado del amigo de los ejemplos anteriores:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FriendStatusWithCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">isOnline</span><span class=\"token operator\">:</span> status<span class=\"token punctuation\">.</span>isOnline\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>F\u00edjate en como la l\u00f3gica que asigna <code class=\"language-javascript\">document.title</code> se divide entre <code class=\"language-javascript\">componentDidMount</code> y <code class=\"language-javascript\">componentDidUpdate</code>. La l\u00f3gica de la suscripci\u00f3n tambi\u00e9n se reparte entre <code class=\"language-javascript\">componentDidMount</code> y <code class=\"language-javascript\">componentWillUnmount</code>. Y <code class=\"language-javascript\">componentDidMount</code> contiene c\u00f3digo de ambas tareas.</p>\n<p>Entonces, \u00bfc\u00f3mo resuelven los <em>Hooks</em> este problema? Del mismo modo que <a href=\"/react/hooks-state#tip-using-multiple-state-variables\">puedes usar el <em>Hook de estado</em> m\u00e1s de una vez</a>, puedes usar varios efectos. Esto nos permite separar la l\u00f3gica que no est\u00e1 relacionada en diferentes efectos:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatusWithCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Los <em>Hooks</em> nos permiten separar el c\u00f3digo en funci\u00f3n de lo que hace</strong> en vez de en funci\u00f3n del nombre de un m\u00e9todo de ciclo de vida. React aplicar\u00e1 <em>cada</em> efecto del componente en el orden en el que han sido especificados.</p>\n<h3 id=\"explanation-why-effects-run-on-each-update\"><a class=\"anchor\" href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\"></a>Explicaci\u00f3n: Por qu\u00e9 los efectos se ejecutan en cada actualizaci\u00f3n </h3>\n<p>Si est\u00e1s familiarizado con las clases, te preguntar\u00e1s por qu\u00e9 la fase de saneamiento de efecto ocurre despu\u00e9s de cada rerenderizado y no simplemente cuando el componente se desmonta. Veamos un ejemplo pr\u00e1ctico para ver por qu\u00e9 este dise\u00f1o nos ayuda a crear componentes con menos errores.</p>\n<p><a href=\"/react/hooks-effect#example-using-classes-1\">En apartados anteriores</a> hemos presentado el ejemplo de un componente <code class=\"language-javascript\">FriendStatus</code> que muestra si un amigo est\u00e1 conectado o no. Nuestra clase lee <code class=\"language-javascript\">friend.id</code> de <code class=\"language-javascript\">this.props</code>, se suscribe al estado del amigo al montarse y cancela la suscripci\u00f3n al desmontarse.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>\u00bfPero qu\u00e9 sucede si la propiedad <code class=\"language-javascript\">friend</code> cambia</strong> mientras el componente est\u00e1 en la pantalla? Nuestro componente continuar\u00eda mostrando el estado de un amigo diferente. Esto es un error. Adem\u00e1s podr\u00edamos causar una fuga de memoria o un fallo cr\u00edtico al desmontar dado que la llamada que cancela la suscripci\u00f3n usar\u00eda un identificador err\u00f3neo.</p>\n<p>En un componente de clase, necesitar\u00edamos a\u00f1adir <code class=\"language-javascript\">componentDidUpdate</code> para manejar este caso:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Cancela la suscripci\u00f3n del friend.id anterior</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      prevProps<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Se suscribe al siguiente friend.id</span></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStatusChange\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>No gestionar <code class=\"language-javascript\">componentDidUpdate</code> correctamente es una fuente de errores com\u00fan en las aplicaciones React.</p>\n<p>Ahora consideremos la versi\u00f3n de este componente que usa <em>Hooks</em>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No padece el mismo error. (Aunque tampoco hemos hecho ning\u00fan cambio)</p>\n<p>No hay un c\u00f3digo especial para gestionar las actualizaciones porque <code class=\"language-javascript\">useEffect</code> las gestiona <em>por defecto</em>. Sanea los efectos anteriores antes de aplicar los nuevos. Para ilustrar esto, esta es una secuencia de llamadas de suscripci\u00f3n y cancelaci\u00f3n que producir\u00eda este componente a lo largo del tiempo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Se monta con las props { friend: { id: 100 } }</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Ejecuta el primer efecto</span>\n\n<span class=\"token comment\">// Se actualiza con las props { friend: { id: 200 } }</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sanea el efecto anterior</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Ejecuta el siguiente efecto</span>\n\n<span class=\"token comment\">// Se actualiza con las props { friend: { id: 300 } }</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sanea el efecto anterior</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Ejecuta el siguiente efecto</span>\n\n<span class=\"token comment\">// Se desmonta</span>\nChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sanea el \u00faltimo efecto</span></code></pre></div>\n<p>Este comportamiento asegura la consistencia por defecto y previene errores que son comunes en los componentes de clase debido a la falta de l\u00f3gica de actualizaci\u00f3n.</p>\n<h3 id=\"tip-optimizing-performance-by-skipping-effects\"><a class=\"anchor\" href=\"/react/hooks-effect#tip-optimizing-performance-by-skipping-effects\"></a>Consejo: Omite efectos para optimizar el rendimiento </h3>\n<p>En algunos casos, sanear o aplicar el efecto despu\u00e9s de cada renderizado puede crear problemas de rendimiento. En los componentes de clase podemos solucionarlos escribiendo una comparaci\u00f3n extra con <code class=\"language-javascript\">prevProps</code> o <code class=\"language-javascript\">prevState</code> dentro de <code class=\"language-javascript\">componentDidUpdate</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">.</span>count <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este requerimiento es tan com\u00fan que est\u00e1 incorporado en la API del <em>Hook</em> <code class=\"language-javascript\">useEffect</code>. Puedes indicarle a React que <em>omita</em> aplicar un efecto si ciertos valores no han cambiado entre renderizados. Para hacerlo, pasa un array como segundo argumento opcional a <code class=\"language-javascript\">useEffect</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Solo se vuelve a ejecutar si count cambia</span></span></code></pre></div>\n<p>En el ejemplo anterior pasamos <code class=\"language-javascript\">[count]</code> como segundo argumento. \u00bfQu\u00e9 significa esto? Si <code class=\"language-javascript\">count</code> es <code class=\"language-javascript\">5</code>, y cuando nuestro componente se vuelve a renderizar <code class=\"language-javascript\">count</code> contin\u00faa siendo igual a <code class=\"language-javascript\">5</code>, React comparar\u00e1 el <code class=\"language-javascript\">[5]</code> del renderizado anterior con el <code class=\"language-javascript\">[5]</code> del siguiente renderizado. Dado que todos los elementos en el array (<code class=\"language-javascript\">5 === 5</code>), React omitir\u00e1 el efecto. Esa es nuestra optimizaci\u00f3n.</p>\n<p>Cuando renderizamos con <code class=\"language-javascript\">count</code> actualizado a <code class=\"language-javascript\">6</code>, React comparar\u00e1 los elementos en el array <code class=\"language-javascript\">[5]</code> del renderizado anterior con los elementos del array <code class=\"language-javascript\">[6]</code> del siguente renderizado. En esta ocasi\u00f3n, React volver\u00e1 a aplicar el efecto dado que <code class=\"language-javascript\">5 !== 6</code>. Si el array contiene varios elementos, React volver\u00e1 a ejecutar el efecto si cualquiera de los elementos es diferente.</p>\n<p>Esto tambi\u00e9n funciona para efectos que tienen fase de saneamiento:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Solo se vuelve a suscribir si la propiedad props.friend.id cambia</span></span></code></pre></div>\n<p>En el futuro, el segundo argumento podr\u00eda ser a\u00f1adido autom\u00e1ticamente por una transformaci\u00f3n en tiempo de compilaci\u00f3n.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Si usas esta optimizaci\u00f3n, aseg\u00farate de que incluyes <strong>todos los valores del \u00e1mbito del componente (como props y estado) que cambien a lo largo del tiempo y que sean usados por el efecto</strong>. De otra forma, tu c\u00f3digo referenciar\u00e1 valores obsoletos de renderizados anteriores. Aprende m\u00e1s <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">c\u00f3mo tratar con funciones</a> y <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">qu\u00e9 hacer cuando el array cambia con mucha frecuencia</a>.</p>\n<p>Si quieres ejecutar un efecto y sanearlo solamente una vez (al montar y desmontar), puedes pasar un array vac\u00edo (<code class=\"language-javascript\">[]</code>) como segundo argumento. Esto le indica a React que el efecto no depende de <em>ning\u00fan</em> valor proveniente de las props o el estado, de modo que no necesita volver a ejecutarse. Esto no se gestiona como un caso especial, obedece directamente al modo en el que siempre funciona el array de dependencias. </p>\n<p>Si pasas un array vac\u00edo (<code class=\"language-javascript\">[]</code>), las props y el estado dentro del efecto siempre tendr\u00e1n sus valores iniciales. Si bien pasar <code class=\"language-javascript\">[]</code> como segundo argumento se acerca al conocido modelo mental de <code class=\"language-javascript\">componentDidMount</code> y <code class=\"language-javascript\">componentWillUnmount</code>, a menudo hay <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">mejores</a> <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">soluciones</a> para evitar volver a ejecutar los efectos con demasiada frecuencia. Adem\u00e1s, no olvides que React pospone la ejecuci\u00f3n de <code class=\"language-javascript\">useEffect</code> hasta que el navegador finaliza el trazado, de modo que hacer alg\u00fan trabajo extra no es tan problem\u00e1tico.</p>\n<p>Recomendamos usar la regla <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> que forma parte de nuestro paquete <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Esta regla advierte cuando las dependencias se especifican incorrectamente y sugiere una soluci\u00f3n.</p>\n</div>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-effect#next-steps\"></a>Pr\u00f3ximos pasos </h2>\n<p>\u00a1Enhorabuena! Esta p\u00e1gina ha sido muy larga, pero esperamos que al final la mayor\u00eda de tus dudas sobre los efectos hayan sido resueltas. Has aprendido los <em>Hooks</em> de estado y de efecto, y puedes hacer <em>muchas</em> cosas combin\u00e1ndolos. Estos <em>Hooks</em> abarcan la mayor\u00eda de casos de uso de las clases. Y en el caso de no ser suficientes, existen <a href=\"/react/hooks-reference\"><em>Hooks</em> adicionales</a> que pueden servirte de ayuda.</p>\n<p>Tambi\u00e9n hemos empezado a ver c\u00f3mo los <em>Hooks</em> solucionan problemas esbozados en <a href=\"/react/hooks-intro#motivation\">Motivaci\u00f3n</a>. Hemos visto c\u00f3mo el saneamiento de efectos evita la duplicidad en <code class=\"language-javascript\">componentDidUpdate</code> y <code class=\"language-javascript\">componentWillUnmount</code>, consolidando el c\u00f3digo asociado y ayud\u00e1ndonos a evitar errores. Adem\u00e1s hemos visto c\u00f3mo podemos separar efectos por su prop\u00f3sito, que era algo que no pod\u00edamos hacer con clases.</p>\n<p>Llegados a este punto puedes estar pregunt\u00e1ndote c\u00f3mo funcionan los <em>Hooks</em>. \u00bfC\u00f3mo puede saber React qu\u00e9 llamada a <code class=\"language-javascript\">useState</code> corresponde a qu\u00e9 variable de estado entre renderizados? \u00bfC\u00f3mo identifica React los efectos anteriores y posteriores en cada actualizaci\u00f3n? <strong>En la siguiente p\u00e1gina aprenderemos las <a href=\"/react/hooks-rules\">reglas de los <em>Hooks</em></a>, las cuales son esenciales para que funcionen correctamente.</strong></p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/hooks-effect.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-effect", "nav": ["/react/hooks-state", "/react/hooks-rules"]}, {"key": "5. Reglas de los Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los <em>Hooks</em> son una nueva incorporaci\u00f3n en React 16.8. Te permiten usar estado y otras caracter\u00edsticas de React sin escribir una clase.</p>\n<p>Los Hooks son funciones de JavaScript, pero necesitas seguir dos reglas cuando los uses. Proporcionamos un <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">plugin de linter</a> para hacer cumplir estas reglas autom\u00e1ticamente.</p>\n<h3 id=\"only-call-hooks-at-the-top-level\"><a class=\"anchor\" href=\"/react/hooks-rules#only-call-hooks-at-the-top-level\"></a>Llama Hooks solo en el nivel superior </h3>\n<p><strong>No llames Hooks dentro de ciclos, condicionales o funciones anidadas.</strong> En cambio, usa siempre Hooks en el nivel superior de tu funci\u00f3n en React, antes de cualquier retorno prematuro. Siguiendo esta regla, te aseguras de que los hooks se llamen en el mismo orden cada vez que un componente se renderiza. Esto es lo que permite a React preservar correctamente el estado de los hooks entre multiples llamados a <code class=\"language-javascript\">useState</code> y <code class=\"language-javascript\">useEffect</code>. (Si eres curioso, vamos a explicar esto en detalle <a href=\"/react/hooks-rules#explicaci%C3%B3n\">m\u00e1s abajo</a>.)</p>\n<h3 id=\"only-call-hooks-from-react-functions\"><a class=\"anchor\" href=\"/react/hooks-rules#only-call-hooks-from-react-functions\"></a>Llama Hooks solo en funciones de React </h3>\n<p><strong>No llames Hooks desde funciones JavaScript regulares.</strong> En vez de eso, puedes:</p>\n<ul>\n<li>\u2705 Llama Hooks desde componentes funcionales de React.</li>\n<li>\u2705 Llama Hooks desde Hooks personalizados (aprenderemos acerca de ellos <a href=\"/react/hooks-custom\">en la siguiente p\u00e1gina</a>).</li>\n</ul>\n<p>Siguiendo esta regla, te aseguras de que toda la l\u00f3gica del estado de un componente sea claramente visible desde tu c\u00f3digo fuente.</p>\n<h2 id=\"eslint-plugin\"><a class=\"anchor\" href=\"/react/hooks-rules#eslint-plugin\"></a>Plugin de ESLint </h2>\n<p>Lanzamos un plugin de ESLint llamado <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a> que refuerza estas dos reglas. Puedes a\u00f1adir este plugin a tu proyecto si quieres probarlo:</p>\n<p>Este plugin es incluido por defecto en <a href=\"/react/create-a-new-react-app#create-react-app\">Create React App</a>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-bash\"><code class=\"language-javascript\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint-plugin-react-hooks --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// Tu configuraci\u00f3n de ESLint</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">\"react-hooks\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string-property property\">\"react-hooks/rules-of-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Checks rules of Hooks</span>\n    <span class=\"token string-property property\">\"react-hooks/exhaustive-deps\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span> <span class=\"token comment\">// Checks effect dependencies</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Puedes pasar a la siguiente p\u00e1gina donde explicamos c\u00f3mo escribir <a href=\"/react/hooks-custom\">tus propios Hooks</a> ahora mismo.</strong> En esta p\u00e1gina, vamos a continuar explicando el razonamiento detr\u00e1s de estas reglas.</p>\n<h2 id=\"explanation\"><a class=\"anchor\" href=\"/react/hooks-rules#explanation\"></a>Explicaci\u00f3n </h2>\n<p>Como <a href=\"/react/hooks-state#tip-using-multiple-state-variables\">aprendimos anteriormente</a>, podemos usar m\u00faltiples Hooks de Estado o Hooks de Efecto en un solo componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. Usa la variable de estado del nombre</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. Usa un efecto para persistir el formulario</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. Usa la variable de estado del apellido</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>surname<span class=\"token punctuation\">,</span> setSurname<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 4. Usa un efecto para la actualizaci\u00f3n del t\u00edtulo</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">updateTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> surname<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Entonces, c\u00f3mo hace React para saber cu\u00e1l estado corresponde a cu\u00e1l llamado del <code class=\"language-javascript\">useState</code>? La respuesta es que <strong>React se basa en el orden en el cual los Hooks son llamados</strong>. Nuestro ejemplo funciona porque el orden en los llamados de los Hooks son el mismo en cada render:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// ------------</span>\n<span class=\"token comment\">// Primer render</span>\n<span class=\"token comment\">// ------------</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. Inicializa la variable de estado del nombre con 'Mary'</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>persistForm<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 2. Agrega un efecto para persistir el formulario</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 3. Inicializa la variable de estado del apellido con 'Poppins'</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 4. Agrega un efecto para la actualizaci\u00f3n del t\u00edtulo</span>\n\n<span class=\"token comment\">// -------------</span>\n<span class=\"token comment\">// Segundo render</span>\n<span class=\"token comment\">// -------------</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. Lee la variable de estado del nombre (el argumento es ignorado)</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>persistForm<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 2. Reemplaza el efecto para persistir el formulario</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 3. Lee la variable de estado del apellido (el argumento es ignorado)</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 4. Reemplaza el efecto de actualizaci\u00f3n del t\u00edtulo</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Siempre y cuando el orden de los llamados a los Hooks sean los mismos entre renders, React puede asociar alg\u00fan estado local con cada uno de ellos. Pero qu\u00e9 pasa si ponemos la llamada a un Hook (por ejemplo, el efecto <code class=\"language-javascript\">persistForm</code>) dentro de una condici\u00f3n?</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token comment\">// \ud83d\udd34 Estamos rompiendo la primera regla al usar un Hook en una condici\u00f3n</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>La condici\u00f3n <code class=\"language-javascript\">name !== ''</code> es <code class=\"language-javascript\">true</code> en el primer render, entonces corremos el Hook. Sin embargo, en el siguiente render el usuario puede borrar el formulario, haciendo la condici\u00f3n <code class=\"language-javascript\">false</code>. Ahora que nos saltamos este Hook durante el renderizado, el orden de las llamadas a los Hooks se vuelve diferente: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mary'</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 1. Lee la variable de estado del nombre (el argumento es ignorado)</span>\n<span class=\"token comment\">// useEffect(persistForm)  // \ud83d\udd34 Este Hook fue saltado</span>\n<span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Poppins'</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// \ud83d\udd34 2 (pero era el 3). Falla la lectura de la variable de estado del apellido</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>updateTitle<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \ud83d\udd34 3 (pero era el 4). Falla el reemplazo del efecto</span></code></pre></div>\n<p>React no sabr\u00eda qu\u00e9 devolver para la segunda llamada del Hook <code class=\"language-javascript\">useState</code>. React esperaba que la segunda llamada al Hook en este componente correspondiera al efecto <code class=\"language-javascript\">persistForm</code>, igual que en el render anterior, pero ya no lo hace. A partir de este punto, cada siguiente llamada de un Hook despu\u00e9s de la que nos saltamos tambi\u00e9n cambiar\u00eda de puesto por uno, lo que llevar\u00eda a la aparici\u00f3n de errores.</p>\n<p><strong>Es por esto que los Hooks deben ser utilizados en el nivel superior de nuestros componentes.</strong> Si queremos ejecutar un efecto condicionalmente, podemos poner esa condici\u00f3n <em>dentro</em> de nuestro Hook:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// \ud83d\udc4d No vamos a romper la primera regla nunca m\u00e1s.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Ten en cuenta que no necesitas preocuparte por este problema si usas las <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">reglas de lint provistas</a>.</strong> Pero ahora tambi\u00e9n sabes <em>por qu\u00e9</em> los Hooks funcionan de esta manera, y cu\u00e1les son los problemas que la primera regla est\u00e1 impidiendo.</p>\n<h2 id=\"next-steps\"><a class=\"anchor\" href=\"/react/hooks-rules#next-steps\"></a>Siguientes pasos </h2>\n<p>Finalmente, estamos listos para aprender acerca de c\u00f3mo <a href=\"/react/hooks-custom\">escribir nuestros propios Hooks</a>! Los Hooks personalizados te permiten combinar los Hooks proporcionados por React en sus propias abstracciones y reutilizar la l\u00f3gica de estado com\u00fan entre los diferentes componentes.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/hooks-rules.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-rules", "nav": ["/react/hooks-effect", "/react/hooks-custom"]}, {"key": "6. Construyendo tus propios Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los <em>Hooks</em> son una nueva incorporaci\u00f3n en React 16.8. Te permiten usar estado y otras caracter\u00edsticas de React sin escribir una clase.</p>\n<p>Construir tus propios Hooks te permite extraer la l\u00f3gica del componente en funciones reutilizables.</p>\n<p>Cuando est\u00e1bamos aprendiendo a <a href=\"/react/hooks-effect#example-using-hooks-1\">usar el Hook de Efecto</a>, vimos este componente de una aplicaci\u00f3n de chat que muestra un mensaje indicando si un amigo est\u00e1 conectado o desconectado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Supongamos ahora que nuestra aplicaci\u00f3n de chat tiene tambi\u00e9n una lista de contactos y queremos que renderice nombres de usuarios con color verde. Podr\u00edamos copiar y pegar la l\u00f3gica adaptada a nuestro componente <code class=\"language-javascript\">FriendListItem</code>, pero eso no ser\u00eda ideal:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En cambio, nos gustar\u00eda compartir esta l\u00f3gica entre <code class=\"language-javascript\">FriendStatus</code> y <code class=\"language-javascript\">FriendListItem</code>.</p>\n<p>Tradicionalmente en React, hemos tenido dos formas populares para compartir l\u00f3gica de estados entre componentes: <a href=\"/react/render-props\">renderizar props</a> y <a href=\"/react/higher-order-components\">componentes de orden mas alto</a>. Ahora veremos como los Hooks resuelven muchos de los mismos problemas sin forzarte a a\u00f1adir m\u00e1s componentes al \u00e1rbol.</p>\n<h2 id=\"extracting-a-custom-hook\"><a class=\"anchor\" href=\"/react/hooks-custom#extracting-a-custom-hook\"></a>Extrayendo un Hook personalizado </h2>\n<p>Cuando queremos compartir l\u00f3gica entre dos funciones de JavaScript, lo extraemos en una tercera funci\u00f3n. Ambos, componentes y Hooks, son funciones, \u00a1as\u00ed que esto funciona para ellos tambi\u00e9n!</p>\n<p><strong>Un Hook personalizado es una funci\u00f3n de JavaScript cuyo nombre comienza con \u201d<code class=\"language-javascript\">use</code>\u201d y que puede llamar a otros Hooks.</strong> Por ejemplo, a continuaci\u00f3n <code class=\"language-javascript\">useFriendStatus</code> es nuestro primer Hook personalizado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No hay nada nuevo dentro, la l\u00f3gica es copiada de los componentes anteriores. Al igual que en un componente, aseg\u00farate de solo llamar a otros Hooks incondicionalmente en el nivel superior de tu Hook personalizado.</p>\n<p>A diferencia de un componente de React, un Hook personalizado no necesita tener una firma espec\u00edfica. Podemos decidir lo que adopta como argumentos y que, si lo hace, deber\u00eda devolver. En otras palabras, es como una funci\u00f3n normal. Su nombre deber\u00eda siempre empezar con <code class=\"language-javascript\">use</code> as\u00ed se puede decir que de un vistazo las <a href=\"/react/hooks-rules\">reglas de Hooks</a> se le aplican.</p>\n<p>El prop\u00f3sito de nuestro Hook <code class=\"language-javascript\">useFriendStatus</code> es suscribirnos al estado de un amigo. Por esto toma a <code class=\"language-javascript\">friendID</code> como un argumento, y devuelve si este amigo est\u00e1 conectado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora veamos como podemos usar nuestro Hook personalizado.</p>\n<h2 id=\"using-a-custom-hook\"><a class=\"anchor\" href=\"/react/hooks-custom#using-a-custom-hook\"></a>Usando un Hook personalizado </h2>\n<p>Al principio, nuestro objetivo declarado fue eliminar la l\u00f3gica duplicada de los componentes <code class=\"language-javascript\">FriendStatus</code> y <code class=\"language-javascript\">FriendListItem</code>. Ambos quieren saber cuando un amigo est\u00e1 conectado.</p>\n<p>Ahora que hemos extra\u00eddo esta l\u00f3gica a un Hook <code class=\"language-javascript\">useFriendStatus</code>, podemos <em>usarlo:</em></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Loading...'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FriendListItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>\u00bfEs este c\u00f3digo equivalente a los ejemplos originales?</strong> S\u00ed, funciona exactamente de la misma forma. Si miras de cerca, notar\u00e1s que no hicimos cambios en el comportamiento. Todo lo que hicimos fue extraer c\u00f3digo com\u00fan entre dos funciones en una funci\u00f3n separada. <strong>Los Hooks personalizados son una convenci\u00f3n que surge naturalmente del dise\u00f1o de los Hooks, en lugar de una caracter\u00edstica de React.</strong></p>\n<p><strong>\u00bfTengo que nombrar mis Hooks personalizados comenzando con \u201d<code class=\"language-javascript\">use</code>\u201c?</strong> Por favor, hazlo. Esta convenci\u00f3n es muy importante. Sin esta, no podr\u00edamos comprobar autom\u00e1ticamente violaciones de <a href=\"/react/hooks-rules\"> las reglas de los Hooks</a> porque no podr\u00edamos decir si una cierta funci\u00f3n contiene llamados a Hooks dentro de la misma.</p>\n<p><strong>\u00bfDos componentes usando el mismo Hook comparten estado?</strong> No. Los Hooks personalizados son un mecanismo para reutilizar <em>l\u00f3gica de estado</em> (como configurar una suscripci\u00f3n y recordar el valor actual), pero cada vez que usas un Hook personalizado, todo estado y efecto dentro de este son aislados completamente.</p>\n<p><strong>\u00bfC\u00f3mo un Hook personalizado obtiene un estado aislado?</strong> Cada <em>llamada</em> al Hook obtiene un estado aislado. Debido a que llamamos <code class=\"language-javascript\">useFriendStatus</code> directamente, desde el punto de vista de React nuestro componente llama a <code class=\"language-javascript\">useState</code> y <code class=\"language-javascript\">useEffect</code>. Y como <a href=\"/react/hooks-effect#tip-use-multiple-effects-to-separate-concerns\"> aprendimos</a> <a href=\"/react/hooks-effect#tip-use-multiple-effects-to-separate-concerns\">anteriormente</a> podemos llamar a <code class=\"language-javascript\">useState</code> y a <code class=\"language-javascript\">useEffect</code> muchas veces en un componente y ellos van a ser completamente independientes.</p>\n<h3 id=\"tip-pass-information-between-hooks\"><a class=\"anchor\" href=\"/react/hooks-custom#tip-pass-information-between-hooks\"></a>Truco: Pasa informaci\u00f3n entre Hooks </h3>\n<p>Ya que los Hooks son funciones, podemos pasar informaci\u00f3n entre ellos.</p>\n<p>Para demostrar esto, vamos a usar otro componente de nuestro hipot\u00e9tico ejemplo de chat. Este es un selector del destinatario del mensaje de chat que muestra si el amigo seleccionado est\u00e1 conectado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> friendList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Phoebe'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Rachel'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ross'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChatRecipientPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>recipientID<span class=\"token punctuation\">,</span> setRecipientID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isRecipientOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>recipientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Circle</span></span> <span class=\"token attr-name\">color</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isRecipientOnline <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>recipientID<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setRecipientID</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>friendList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friend</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">            </span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mantenemos el amigo seleccionado actual en la variable de estado <code class=\"language-javascript\">recipientID</code>, y la actualizamos si el usuario elige a un amigo diferente en el selector <code class=\"language-javascript\">&lt;select&gt;</code>.</p>\n<p>Como la llamada al Hook <code class=\"language-javascript\">useState</code> nos da el \u00faltimo valor de la variable de estado <code class=\"language-javascript\">recipientID</code>, podemos pasarla a nuestro Hook personalizado <code class=\"language-javascript\">useFriendStatus</code> como un argumento:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>recipientID<span class=\"token punctuation\">,</span> setRecipientID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isRecipientOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>recipientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esto nos permite saber cu\u00e1ndo el amigo <em>actualmente seleccionado</em> est\u00e1 en l\u00ednea. Si elegimos un amigo diferente y actualizamos la variable de estado <code class=\"language-javascript\">recipientID</code>, nuestro Hook <code class=\"language-javascript\">useFriendStatus</code> eliminar\u00e1 su suscripci\u00f3n del amigo previamente seleccionado, y se suscribir\u00e1 al estado del nuevo seleccionado.</p>\n<h2 id=\"useyourimagination\"><a class=\"anchor\" href=\"/react/hooks-custom#useyourimagination\"></a><code class=\"language-javascript\">usaTuImaginaci\u00f3n()</code> </h2>\n<p>Los Hooks personalizados ofrecen la flexibilidad de compartir l\u00f3gica que no era posible antes con los componentes de React. Puedes escribir Hooks personalizados que cubran una amplia gama de casos de uso, como manejo de formularios, animaci\u00f3n, suscripciones declarativas, temporizadores y probablemente muchos m\u00e1s que no hemos considerado. Adem\u00e1s, puedes construir Hooks que sean tan f\u00e1ciles de usar como las caracter\u00edsticas integradas de React.</p>\n<p>Intenta resistirte a a\u00f1adir abstracci\u00f3n demasiado pronto. Ahora que los componentes funcionales pueden hacer m\u00e1s, es probable que el promedio de componentes funcionales en tu base de c\u00f3digo se ampl\u00ede. Esto es normal, no te sientas como si <em>tuvieras</em> que dividirlo inmediatamente en Hooks. Pero tambi\u00e9n te animamos a empezar a descubrir casos donde un Hook personalizado podr\u00eda ocultar la l\u00f3gica compleja detr\u00e1s de una interfaz simple, o ayudar a desenredar un componente desordenado.</p>\n<p>Por ejemplo, quiz\u00e1s tienes un componente complejo que contiene gran cantidad de estado local que es gestionado en una forma <em>ad-hoc</em>. <code class=\"language-javascript\">useState</code> no hace m\u00e1s f\u00e1cil la centralizaci\u00f3n de la l\u00f3gica de actualizaci\u00f3n, as\u00ed que podr\u00edas preferir escribirlo como un reductor <a class=\"external-link\" href=\"https://redux.js.org/\">Redux</a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">todosReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'add'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ... otras acciones ...</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los reductores son muy convenientes para probar en aislamiento y escalar para expresar una l\u00f3gica de actualizaci\u00f3n compleja. Puedes separarlos aun m\u00e1s en reductores m\u00e1s peque\u00f1os si es necesario. Sin embargo, es posible que tambi\u00e9n te gusten los beneficios de usar el estado local de React, o puedes no querer instalar otra biblioteca.</p>\n<p>\u00bfY si pudi\u00e9ramos escribir un Hook <code class=\"language-javascript\">useReducer</code> que nos permita manejar el estado <em>local</em> de nuestro componente con un reductor? Una versi\u00f3n simplificada de esto podr\u00eda verse as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer<span class=\"token punctuation\">,</span> initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> nextState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora podr\u00edamos usarlo en nuestro componente y dejar que el reductor maneje la gesti\u00f3n del estado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleAddClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La necesidad de gestionar estados locales con un reductor en un componente complejo es lo suficientemente com\u00fan que hemos integrado el Hook <code class=\"language-javascript\">useReducer</code> dentro de React. Lo encontrar\u00e1s, junto con otros Hooks integrados, en la <a href=\"/react/hooks-reference\">referencia a la API de Hooks</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/hooks-custom.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-custom", "nav": ["/react/hooks-rules", "/react/hooks-reference"]}, {"key": "7. Referencia de la API de los Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los <em>Hooks</em> son una nueva incorporaci\u00f3n en React 16.8. Te permiten usar estado y otras caracter\u00edsticas de React sin escribir una clase.</p>\n<p>Esta p\u00e1gina describe las API para los Hooks incorporados en React.</p>\n<p>Si los Hooks son nuevos para ti, es posible que desees revisar primero <a href=\"/react/hooks-overview\">la descripci\u00f3n general</a>. Tambi\u00e9n puedes encontrar informaci\u00f3n \u00fatil en la secci\u00f3n de <a href=\"/react/hooks-faq\">preguntas frecuentes</a>.</p>\n<ul>\n<li>\n<p><a href=\"/react/hooks-reference#basic-hooks\">Hooks b\u00e1sicos</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a></li>\n<li><a href=\"/react/hooks-reference#useeffect\"><code class=\"language-javascript\">useEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usecontext\"><code class=\"language-javascript\">useContext</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-reference#additional-hooks\">Hooks adicionales</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a></li>\n<li><a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a></li>\n<li><a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a></li>\n<li><a href=\"/react/hooks-reference#useref\"><code class=\"language-javascript\">useRef</code></a></li>\n<li><a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a></li>\n<li><a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a></li>\n<li><a href=\"/react/hooks-reference#usedebugvalue\"><code class=\"language-javascript\">useDebugValue</code></a></li>\n<li><a href=\"/react/hooks-reference#usedeferredvalue\"><code class=\"language-javascript\">useDeferredValue</code></a></li>\n<li><a href=\"/react/hooks-reference#usetransition\"><code class=\"language-javascript\">useTransition</code></a></li>\n<li><a href=\"/react/hooks-reference#useid\"><code class=\"language-javascript\">useId</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/react/hooks-reference#library-hooks\">Library Hooks</a></p>\n<ul>\n<li><a href=\"/react/hooks-reference#usesyncexternalstore\"><code class=\"language-javascript\">useSyncExternalStore</code></a></li>\n<li><a href=\"/react/hooks-reference#useinsertioneffect\"><code class=\"language-javascript\">useInsertionEffect</code></a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"basic-hooks\"><a class=\"anchor\" href=\"/react/hooks-reference#basic-hooks\"></a>Hooks b\u00e1sicos </h2>\n<h3 id=\"usestate\"><a class=\"anchor\" href=\"/react/hooks-reference#usestate\"></a><code class=\"language-javascript\">useState</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Devuelve un valor con estado y una funci\u00f3n para actualizarlo.</p>\n<p>Durante el renderizado inicial, el estado devuelto (<code class=\"language-javascript\">state</code>) es el mismo que el valor pasado como primer argumento (<code class=\"language-javascript\">initialState</code>).</p>\n<p>La funci\u00f3n <code class=\"language-javascript\">setState</code> se usa para actualizar el estado. Acepta un nuevo valor de estado y sit\u00faa en la cola una nueva renderizaci\u00f3n del componente.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En las renderizaciones siguientes, el primer valor devuelto por <code class=\"language-javascript\">useState</code> ser\u00e1 siempre el estado m\u00e1s reciente despu\u00e9s de aplicar las actualizaciones.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>React garantiza que la identidad de la funci\u00f3n <code class=\"language-javascript\">setState</code> es estable y no cambiar\u00e1 en subsecuentes renderizados. Es por eso que es seguro omitirla de la lista de dependencias de <code class=\"language-javascript\">useEffect</code> o <code class=\"language-javascript\">useCallback</code>.</p>\n</div>\n<h4 id=\"functional-updates\"><a class=\"anchor\" href=\"/react/hooks-reference#functional-updates\"></a>Actualizaciones funcionales </h4>\n<p>Si el nuevo estado se calcula utilizando el estado anterior, puede pasar una funci\u00f3n a <code class=\"language-javascript\">setState</code>. La funci\u00f3n recibir\u00e1 el valor anterior y devolver\u00e1 un valor actualizado. Aqu\u00ed hay un ejemplo de un componente contador que usa ambas formas de <code class=\"language-javascript\">setState</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>initialCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Count: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>initialCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Reset</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevCount</span> <span class=\"token operator\">=&gt;</span> prevCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevCount</span> <span class=\"token operator\">=&gt;</span> prevCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los botones \u201d+\u201d y \u201d-\u201d usan la forma funcional, porque el valor actualizado se basa en el valor anterior. Pero el bot\u00f3n \u201cReset\u201d usa la forma normal, porque siempre vuelve a establecer la cuenta al valor inicial.</p>\n<p>Si tu funci\u00f3n de actualizaci\u00f3n retorna el mismo valor que el valor del estado actual, el renderizado subsecuente ser\u00e1 omitido completamente.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>A diferencia del m\u00e9todo <code class=\"language-javascript\">setState</code> que se encuentra en los componentes de la clase,<code class=\"language-javascript\">useState</code> no combina autom\u00e1ticamente los objetos. Puede replicar este comportamiento combinando la funci\u00f3n de actualizador de funci\u00f3n con la sintaxis de propagaci\u00f3n de objetos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Object.assign tambi\u00e9n funcionar\u00eda</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>updatedValues<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Otra opci\u00f3n es <code class=\"language-javascript\">useReducer</code>, que es m\u00e1s adecuada para administrar objetos de estado que contienen m\u00faltiples subvalores.</p>\n</div>\n<h4 id=\"lazy-initial-state\"><a class=\"anchor\" href=\"/react/hooks-reference#lazy-initial-state\"></a>Inicializaci\u00f3n gradual </h4>\n<p>El argumento <code class=\"language-javascript\">initialState</code> es el estado utilizado durante el render inicial. En renderizados posteriores, se ignora. Si el estado inicial es el resultado de un c\u00e1lculo costoso, puede proporcionar una funci\u00f3n en su lugar, que se ejecutar\u00e1 solo en el render inicial:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">someExpensiveComputation</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"bailing-out-of-a-state-update\"><a class=\"anchor\" href=\"/react/hooks-reference#bailing-out-of-a-state-update\"></a>Evitar una actualizaci\u00f3n del estado </h4>\n<p>Si se actualiza un Hook de estado con el mismo valor que el estado actual, React evitar\u00e1 renderizar los hijos y disparar los efectos. (React utiliza el <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object/is#Description\">algoritmo de comparaci\u00f3n <code class=\"language-javascript\">Object.is</code></a>).</p>\n<p>Recuerda que React puede necesitar renderizar de nuevo ese componente en espec\u00edfico antes de evitarlo. Esto no deber\u00eda ser un problema ya que React no ir\u00e1 innecesariamente \u201cm\u00e1s profundo\u201d en el \u00e1rbol. Si est\u00e1s realizando c\u00e1lculos costosos mientras renderizas, puedes optimizarlos con <code class=\"language-javascript\">useMemo</code>.</p>\n<h4 id=\"batching-of-state-updates\"><a class=\"anchor\" href=\"/react/hooks-reference#batching-of-state-updates\"></a>Batching of state updates </h4>\n<p>React may group several state updates into a single re-render to improve performance. Normally, this improves performance and shouldn\u2019t affect your application\u2019s behavior.</p>\n<p>Before React 18, only updates inside React event handlers were batched. Starting with React 18, <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2022/03/08/react-18-upgrade-guide.html#automatic-batching\">batching is enabled for all updates by default</a>. Note that React makes sure that updates from several <em>different</em> user-initiated events \u2014 for example, clicking a button twice \u2014 are always processed separately and do not get batched. This prevents logical mistakes.</p>\n<p>In the rare case that you need to force the DOM update to be applied synchronously, you may wrap it in <a href=\"/react/react-dom#flushsync\"><code class=\"language-javascript\">flushSync</code></a>. However, this can hurt performance so do this only where needed.</p>\n<h3 id=\"useeffect\"><a class=\"anchor\" href=\"/react/hooks-reference#useeffect\"></a><code class=\"language-javascript\">useEffect</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>didUpdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Acepta una funci\u00f3n que contiene c\u00f3digo imperativo, posiblemente c\u00f3digo efectivo.</p>\n<p>Las mutaciones, suscripciones, temporizadores, registro y otros efectos secundarios no est\u00e1n permitidos dentro del cuerpo principal de un componente de funci\u00f3n (denominado como <em>render phase</em> de React). Si lo hace, dar\u00e1 lugar a errores confusos e inconsistencias en la interfaz de usuario.</p>\n<p>En su lugar, use <code class=\"language-javascript\">useEffect</code>. La funci\u00f3n pasada a <code class=\"language-javascript\">useEffect</code> se ejecutar\u00e1 despu\u00e9s de que el renderizado es confirmado en la pantalla. Piense en los efectos como una escotilla de escape de React del mundo puramente funcional al mundo imperativo.</p>\n<p>Por defecto, los efectos se ejecutan despu\u00e9s de cada renderizado completado, pero puede elegir ejecutarlo <a href=\"/react/hooks-reference#conditionally-firing-an-effect\">solo cuando ciertos valores han cambiado</a>.</p>\n<h4 id=\"cleaning-up-an-effect\"><a class=\"anchor\" href=\"/react/hooks-reference#cleaning-up-an-effect\"></a>Limpiando un efecto </h4>\n<p>A menudo, los efectos crean recursos que deben limpiarse antes de que el componente salga de la pantalla, como una suscripci\u00f3n o un ID de temporizador. Para hacer esto, la funci\u00f3n pasada a <code class=\"language-javascript\">useEffect</code> puede devolver una funci\u00f3n de limpieza. Por ejemplo, para crear una suscripci\u00f3n:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Limpiar la suscripci\u00f3n</span>\n    subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>  La funci\u00f3n de limpieza se ejecuta antes de que el componente se elimine de la interfaz de usuario para evitar p\u00e9rdidas de memoria. Adem\u00e1s, si un componente se procesa varias veces (como suele hacer), el <strong>efecto anterior se limpia antes de ejecutar el siguiente efecto</strong>. En nuestro ejemplo, esto significa que se crea una nueva suscripci\u00f3n en cada actualizaci\u00f3n. Para evitar disparar un efecto en cada actualizaci\u00f3n, consulte la siguiente secci\u00f3n.</p>\n<h4 id=\"timing-of-effects\"><a class=\"anchor\" href=\"/react/hooks-reference#timing-of-effects\"></a>Tiempo de los efectos </h4>\n<p>A diferencia de <code class=\"language-javascript\">componentDidMount</code> y<code class=\"language-javascript\">componentDidUpdate</code>, la funci\u00f3n enviada a <code class=\"language-javascript\">useEffect</code> se inicia <strong>despu\u00e9s</strong> de la disposici\u00f3n y pintada de la p\u00e1gina, durante un evento diferido. Esto lo hace adecuado para los muchos efectos secundarios comunes, como la configuraci\u00f3n de suscripciones y los controladores de eventos, porque la mayor\u00eda de los tipos de trabajo no deben impedir que el navegador actualice la pantalla.</p>\n<p>Sin embargo, no todos los efectos pueden ser diferidos. Por ejemplo, una mutaci\u00f3n de DOM que es visible para el usuario debe ejecutarse de manera sincr\u00f3nica antes del siguiente render para que el usuario no perciba una inconsistencia visual. (La distinci\u00f3n es conceptualmente similar a la de los listeners de eventos pasivos y de los activos). Para estos tipos de efectos, React proporciona un Hook adicional llamado <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a>. Tiene la misma firma que <code class=\"language-javascript\">useEffect</code> y solo difiere de este \u00faltimo en cu\u00e1ndo se ejecuta.</p>\n<p>Adicionalmente, a partir de React 18, la funci\u00f3n que se pasa a <code class=\"language-javascript\">useEffect</code> se ejecutar\u00e1 sincr\u00f3nicamente <strong>antes</strong> de las etapas de <em>layout</em> y pintura cuando es el resulta de una entrada discreta del usuario como un clic, o cuando el resultado de una actualizaci\u00f3n envuelta en <a href=\"/react/react-dom#flushsync\"><code class=\"language-javascript\">flushSync</code></a>. Este comportamiento permite que el resultado del efecto sea observado por un sistema de eventos o por quien llama a <a href=\"/react/react-dom#flushsync\"><code class=\"language-javascript\">flushSync</code></a>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Esto solo afecta el tiempo de llamada de la funci\u00f3n pasada a <code class=\"language-javascript\">useEffect</code> - las actualizaciones que se programan dentro de estos efectos a\u00fan se difieren. Esto es diferente a <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a>, que invoca la funci\u00f3n y procesa las actualizaciones dentro de ella inmediatamente.</p>\n</div>\n<p>A\u00fan en los casos en que <code class=\"language-javascript\">useEffect</code> se aplaza hasta despu\u00e9s de que el navegador haya pintado, se garantiza que se activar\u00e1 antes de cualquier nuevo render. React siempre eliminar\u00e1 los efectos de un render anterior antes de comenzar una nueva actualizaci\u00f3n.</p>\n<h4 id=\"conditionally-firing-an-effect\"><a class=\"anchor\" href=\"/react/hooks-reference#conditionally-firing-an-effect\"></a>Disparar un efecto condicionalmente. </h4>\n<p>El comportamiento predeterminado para los efectos es ejecutar el efecto despu\u00e9s de cada renderizado que se completa. De esa manera, siempre se recrea un efecto si cambia una de sus dependencias.</p>\n<p>Sin embargo, esto puede ser excesivo en algunos casos, como el ejemplo de suscripci\u00f3n de la secci\u00f3n anterior. No necesitamos crear una nueva suscripci\u00f3n en cada actualizaci\u00f3n, solo si las propiedades de <code class=\"language-javascript\">source</code> han cambiado.</p>\n<p>Para implementar esto, pase un segundo argumento a <code class=\"language-javascript\">useEffect</code> que es el conjunto de valores de los que depende el efecto. Nuestro ejemplo actualizado se ver\u00e1 as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ahora la suscripci\u00f3n solo se volver\u00e1 a crear cuando cambie <code class=\"language-javascript\">props.source</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Si usas esta optimizaci\u00f3n, aseg\u00farate de que incluyes <strong>todos los valores del \u00e1mbito del componente (como props y estado) que cambien a lo largo del tiempo y que sean usados por el efecto</strong>. De otra forma, tu c\u00f3digo referenciar\u00e1 valores obsoletos de renderizados anteriores. Aprende m\u00e1s <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">c\u00f3mo tratar con funciones</a> y <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">qu\u00e9 hacer cuando el array cambia con mucha frecuencia</a>.</p>\n<p>Si quieres ejecutar un efecto y sanearlo solamente una vez (al montar y desmontar), puedes pasar un array vac\u00edo (<code class=\"language-javascript\">[]</code>) como segundo argumento. Esto le indica a React que el efecto no depende de <em>ning\u00fan</em> valor proviniente de las props o el estado, de modo que no necesita volver a ejecutarse. Esto no se gestiona como un caso especial, obedece directamente al modo en el que siempre funcionan los arrays. </p>\n<p>Si pasas un array vac\u00edo (<code class=\"language-javascript\">[]</code>), las props y el estado dentro del efecto siempre tendr\u00e1n sus valores iniciales. Si bien pasar <code class=\"language-javascript\">[]</code> como segundo argumento se acerca al conocido modelo mental de <code class=\"language-javascript\">componentDidMount</code> y <code class=\"language-javascript\">componentWillUnmount</code>, a menudo hay <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">mejores</a> <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">soluciones</a> para evitar volver a ejecutar los efectos con demasiada frecuencia. Adem\u00e1s, no olvides que React pospone la ejecuci\u00f3n de <code class=\"language-javascript\">useEffect</code> hasta que el navegador finaliza el trazado, de modo que hacer alg\u00fan trabajo extra no es tan problem\u00e1tico.</p>\n<p>Recomendamos usar la regla <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> que forma parte de nuestro paquete <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Esta regla advierte cuando las dependencias se especifican incorrectamente y sugiere una soluci\u00f3n.</p>\n</div>\n<p>El arreglo de entradas no se pasa como argumentos a la funci\u00f3n de efecto. Sin embargo, conceptualmente, eso es lo que representan: cada valor al que se hace referencia dentro de la funci\u00f3n de efecto tambi\u00e9n deber\u00eda aparecer en el arreglo de entradas. En el futuro, un compilador lo suficientemente avanzado podr\u00eda crear este arreglo autom\u00e1ticamente.</p>\n<h3 id=\"usecontext\"><a class=\"anchor\" href=\"/react/hooks-reference#usecontext\"></a><code class=\"language-javascript\">useContext</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MyContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Acepta un objeto de contexto (el valor devuelto de <code class=\"language-javascript\">React.createContext</code>) y devuelve el valor de contexto actual. El valor actual del contexto es determinado por la propiedad <code class=\"language-javascript\">value</code> del <code class=\"language-javascript\">&lt;MyContext.Provider&gt;</code> ascendentemente m\u00e1s cercano en el \u00e1rbol al componente que hace la llamada.</p>\n<p>Cuando el <code class=\"language-javascript\">&lt;MyContext.Provider&gt;</code> ascendentemente m\u00e1s cercano en el \u00e1rbol se actualiza, el Hook activa una renderizaci\u00f3n con el <code class=\"language-javascript\">value</code> m\u00e1s reciente del contexto pasado a ese proveedor <code class=\"language-javascript\">MyContext</code>. Incluso s\u00ed un ancestro utiliza <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a> o <a href=\"/react/react-component#shouldcomponentupdate\"><code class=\"language-javascript\">shouldComponentUpdate</code></a>, una nueva renderizaci\u00f3n a\u00fan pasar\u00e1 empezando con el componente en si mismo usando <code class=\"language-javascript\">useContext</code>.</p>\n<p>No olvides que el argumento enviado a <code class=\"language-javascript\">useContext</code> debe ser el <em>objeto del contexto en s\u00ed mismo</em>:</p>\n<ul>\n<li><strong>Correcto:</strong> <code class=\"language-javascript\">useContext(MyContext)</code></li>\n<li><strong>Incorrecto:</strong> <code class=\"language-javascript\">useContext(MyContext.Consumer)</code></li>\n<li><strong>Incorrecto:</strong> <code class=\"language-javascript\">useContext(MyContext.Provider)</code></li>\n</ul>\n<p>Un componente que llama a <code class=\"language-javascript\">useContext</code> siempre se volver\u00e1 a renderizar cuando el valor del contexto cambie. Si volver a renderizar el componente es costoso, puedes <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/15156#issuecomment-474590693\">optimizar esto usando memorizaci\u00f3n</a>.</p>\n<div class=\"blockquote\">\n<strong>Consejo</strong>\n<p>Si est\u00e1s familiarizado con el API de contexto antes de Hooks, <code class=\"language-javascript\">useContext(MyContext)</code> es el equivalente a <code class=\"language-javascript\">static contextType = MyContext</code> en una clase, o a <code class=\"language-javascript\">&lt;MyContext.Consumer&gt;</code>.</p>\n<p><code class=\"language-javascript\">useContext(MyContext)</code> solo te permite <em>leer</em> el contexto y suscribirte a sus cambios. A\u00fan necesitas un <code class=\"language-javascript\">&lt;MyContext.Provider&gt;</code> arriba en el \u00e1rbol para <em>proveer</em> el valor para este contexto.</p>\n</div>\n<p><strong>Poniendo todo junto con Context.Provider</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> themes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">light</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foreground</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#eeeeee\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dark</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foreground</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#222222\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>themes<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ThemedButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>foreground <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      I am styled by theme context!</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este ejemplo est\u00e1 modificado para Hooks a partir del ejemplo anterior en de la <a href=\"/react/context\">gu\u00eda avanzada de Context</a>, donde puedes encontrar m\u00e1s informaci\u00f3n sobre cuando y c\u00f3mo usar Context.</p>\n<h2 id=\"additional-hooks\"><a class=\"anchor\" href=\"/react/hooks-reference#additional-hooks\"></a>Hooks adicionales </h2>\n<p>Los siguientes Hooks son variantes de los b\u00e1sicos de la secci\u00f3n anterior o solo son necesarios para casos extremos espec\u00edficos. No te estreses por aprenderlos por adelantado.</p>\n<h3 id=\"usereducer\"><a class=\"anchor\" href=\"/react/hooks-reference#usereducer\"></a><code class=\"language-javascript\">useReducer</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialArg<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Una alternativa a <a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a>. Acepta un reducer de tipo <code class=\"language-javascript\">(state, action) =&gt; newState</code> y devuelve el estado actual emparejado con un m\u00e9todo <code class=\"language-javascript\">dispatch</code>. (Si est\u00e1 familiarizado con Redux, ya sabe c\u00f3mo funciona).</p>\n<p><code class=\"language-javascript\">useReducer</code> a menudo es preferible a <code class=\"language-javascript\">useState</code> cuando se tiene una l\u00f3gica compleja que involucra m\u00faltiples subvalores o cuando el pr\u00f3ximo estado depende del anterior. <code class=\"language-javascript\">useReducer</code> adem\u00e1s te permite optimizar el rendimiento para componentes que activan actualizaciones profundas, porque <a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\">puedes pasar hacia abajo <code class=\"language-javascript\">dispatch</code> en lugar de <em>callbacks</em></a>.</p>\n<p>Aqu\u00ed est\u00e1 el ejemplo del contador de la secci\u00f3n [<code class=\"language-javascript\">useState</code>], reescrito para usar un reductor:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Count: </span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>React garantiza que la identidad de la funci\u00f3n <code class=\"language-javascript\">dispatch</code> es estable y no cambiar\u00e1 en subsecuentes renderizados. Es por eso que es seguro omitirla de la lista de dependencias de <code class=\"language-javascript\">useEffect</code> o <code class=\"language-javascript\">useCallback</code>.</p>\n</div>\n<h4 id=\"specifying-the-initial-state\"><a class=\"anchor\" href=\"/react/hooks-reference#specifying-the-initial-state\"></a>Especificar el estado inicial </h4>\n<p>Hay dos formas diferentes de inicializar el estado de <code class=\"language-javascript\">useReducer</code>. Puedes elegir uno u otro dependiendo de tu caso. La forma m\u00e1s simple para pasar el estado inicial es como un segundo argumento:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>\n    reducer<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>React no utiliza la convenci\u00f3n del argumento <code class=\"language-javascript\">state = initialState</code> popularizada por Redux. El valor inicial a veces necesita tener una dependencia en las props y por lo tanto tanto se especifica en la llamada al Hook. Si te parece muy importante, puedes llamar a <code class=\"language-javascript\">useReducer(reducer, undefined, reducer)</code> para emular el comportamiento de Redux, pero no se recomienda</p>\n</div>\n<h4 id=\"lazy-initialization\"><a class=\"anchor\" href=\"/react/hooks-reference#lazy-initialization\"></a>Inicializaci\u00f3n diferida </h4>\n<p>Tambi\u00e9n puedes crear el estado inicial de manera diferida. Para hacerlo, le puedes pasar una funci\u00f3n <code class=\"language-javascript\">init</code> como tercer argumento. El estado inicial ser\u00e1 establecido como <code class=\"language-javascript\">init(initialArg)</code>.</p>\n<p>Esto te permite extraer la l\u00f3gica para calcular el estado inicial fuera del reductor. Tambi\u00e9n es \u00fatil para reiniciar el estado luego en respuesta a una acci\u00f3n:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'reset'</span><span class=\"token operator\">:</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>initialCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialCount<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      Count: </span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">        Reset</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"bailing-out-of-a-dispatch\"><a class=\"anchor\" href=\"/react/hooks-reference#bailing-out-of-a-dispatch\"></a>Evitar un <em>dispatch</em> </h4>\n<p>Si devuelves el mismo valor del estado actual desde un Hook reductor, React evitar\u00e1 renderizar los hijos y disparar efectos. (React utiliza el <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Object/is#Description\">algoritmo de comparaci\u00f3n <code class=\"language-javascript\">Object.is</code></a>).</p>\n<p>Ten en cuenta que React podr\u00eda a\u00fan necesitar renderizar nuevamente ese componente espec\u00edfico antes de evitar el renderizado. Esto no deber\u00eda ser una preocupaci\u00f3n ya que React no va \u201cm\u00e1s adentro\u201d del \u00e1rbol de forma innecesaria. Si est\u00e1s haciendo c\u00e1lculos muy costosos mientras renderizas, puedes optimizarlos con <code class=\"language-javascript\">useMemo</code>.</p>\n<h3 id=\"usecallback\"><a class=\"anchor\" href=\"/react/hooks-reference#usecallback\"></a><code class=\"language-javascript\">useCallback</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Devuelve un callback <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Memoization\">memorizado</a>.</p>\n<p>Pasa un callback en l\u00ednea y un arreglo de dependencias. <code class=\"language-javascript\">useCallback</code> devolver\u00e1 una versi\u00f3n memorizada del callback que solo cambia si una de las dependencias ha cambiado. Esto es \u00fatil cuando se transfieren callbacks a componentes hijos optimizados que dependen de la igualdad de referencia para evitar renders innecesarias (por ejemplo, <code class=\"language-javascript\">shouldComponentUpdate</code>).</p>\n<p><code class=\"language-javascript\">useCallback(fn, deps)</code> es igual a <code class=\"language-javascript\">useMemo(() =&gt; fn, deps)</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>El arreglo de dependencias no se pasa como argumentos al callback. Sin embargo, conceptualmente, eso es lo que representan: cada valor al que se hace referencia dentro del callback tambi\u00e9n debe aparecer en el arreglo de dependencias. En el futuro, un compilador lo suficientemente avanzado podr\u00eda crear este arreglo autom\u00e1ticamente.</p>\n<p>Recomendamos usar la regla <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> que forma parte de nuestro paquete <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Esta regla advierte cuando las dependencias se especifican incorrectamente y sugiere una soluci\u00f3n.</p>\n</div>\n<h3 id=\"usememo\"><a class=\"anchor\" href=\"/react/hooks-reference#usememo\"></a><code class=\"language-javascript\">useMemo</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Devuelve un valor <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Memoization\">memorizado</a>.</p>\n<p>Pasa una funci\u00f3n de \u201ccrear\u201d y un arreglo de dependencias. <code class=\"language-javascript\">useMemo</code> solo volver\u00e1 a calcular el valor memorizado cuando una de las dependencias haya cambiado. Esta optimizaci\u00f3n ayuda a evitar c\u00e1lculos costosos en cada render.</p>\n<p>Recuerde que la funci\u00f3n pasada a <code class=\"language-javascript\">useMemo</code> se ejecuta durante el renderizado. No hagas nada all\u00ed que normalmente no har\u00edas al renderizar. Por ejemplo, los efectos secundarios pertenecen a <code class=\"language-javascript\">useEffect</code>, no a<code class=\"language-javascript\">useMemo</code>.</p>\n<p>Si no se proporciona un arreglo, se calcular\u00e1 un nuevo valor en cada renderizado.</p>\n<p><strong>Puede confiar en <code class=\"language-javascript\">useMemo</code> como una optimizaci\u00f3n del rendimiento, no como una garant\u00eda sem\u00e1ntica.</strong> En el futuro, React puede elegir \u201colvidar\u201d algunos valores previamente memorizados y recalcularlos en el pr\u00f3ximo renderizado, por ejemplo para liberar memoria para componentes fuera de pantalla. Escribe tu c\u00f3digo para que a\u00fan funcione sin <code class=\"language-javascript\">useMemo</code> - y luego agr\u00e9galo para optimizar el rendimiento.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>El arreglo de dependencias no se pasa como argumentos a la funci\u00f3n. Sin embargo, conceptualmente, eso es lo que representan: cada valor al que se hace referencia dentro de la funci\u00f3n tambi\u00e9n debe aparecer en el arreglo de dependencias. En el futuro, un compilador lo suficientemente avanzado podr\u00eda crear este arreglo autom\u00e1ticamente.</p>\n<p>Recomendamos usar la regla <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> que forma parte de nuestro paquete <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Esta regla advierte cuando las dependencias se especifican incorrectamente y sugiere una soluci\u00f3n.</p>\n</div>\n<h3 id=\"useref\"><a class=\"anchor\" href=\"/react/hooks-reference#useref\"></a><code class=\"language-javascript\">useRef</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> refContainer <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">useRef</code> devuelve un objeto <em>ref</em> mutable cuya propiedad <code class=\"language-javascript\">.current</code> se inicializa con el argumento pasado (<code class=\"language-javascript\">initialValue</code>). El objeto devuelto se mantendr\u00e1 persistente durante la vida completa del componente.</p>\n<p>Un caso de uso com\u00fan es para acceder a un hijo imperativamente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TextInputWithFocusButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputEl <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// `current` apunta al elemento de entrada de texto montado</span>\n    inputEl<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputEl<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onButtonClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Focus the input</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En esencia, <code class=\"language-javascript\">useRef</code> es como una \u201ccaja\u201d que puedes mantener en una variable mutable en su propiedad <code class=\"language-javascript\">.current</code>.</p>\n<p>Puede que estes familiarizado con las referencias principalmente como un medio para <a href=\"/react/refs-and-the-dom\">acceder al DOM</a>. Si pasas un objeto de referencia a React con <code class=\"language-javascript\">&lt;div ref={myRef} /&gt;</code>, React configurar\u00e1 su propiedad <code class=\"language-javascript\">.current</code> al nodo del DOM correspondiente cuando sea que el nodo cambie.</p>\n<p>Sin embargo, <code class=\"language-javascript\">useRef()</code> es \u00fatil para m\u00e1s que el atributo <code class=\"language-javascript\">ref</code>. Es <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">conveniente para mantener cualquier valor mutable</a> que es similiar a como usar\u00edas campos de instancia en las clases.</p>\n<p>Esto funciona debido a que <code class=\"language-javascript\">useRef()</code> crea un objeto JavaScript plano. La \u00fanica diferencia entre <code class=\"language-javascript\">useRef()</code> y crear un objeto <code class=\"language-javascript\">{current: ...}</code> por ti mismo es que <code class=\"language-javascript\">useRef</code> te dar\u00e1 el mismo objeto de referencia en cada renderizado.</p>\n<p>Ten en cuenta que <code class=\"language-javascript\">useRef</code> <em>no</em> notifica cuando su contenido cambia. Mutar la propiedad <code class=\"language-javascript\">.current</code> no causa otro renderizado. Si quieres correr alg\u00fan c\u00f3digo cuando React agregue o quite una referencia de un nodo del DOM, puede que quieras utilizar en su lugar una <a href=\"/react/hooks-faq#how-can-i-measure-a-dom-node\">referencia mediante callback</a>.</p>\n<h3 id=\"useimperativehandle\"><a class=\"anchor\" href=\"/react/hooks-reference#useimperativehandle\"></a><code class=\"language-javascript\">useImperativeHandle</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> createHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>deps<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">useImperativeHandle</code> personaliza el valor de instancia que se expone a los componentes padres cuando se usa<code class=\"language-javascript\">ref</code>. Como siempre, el c\u00f3digo imperativo que usa refs debe evitarse en la mayor\u00eda de los casos. <code class=\"language-javascript\">useImperativeHandle</code> debe usarse con <a href=\"/react/react-api#reactforwardref\"><code class=\"language-javascript\">forwardRef</code></a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nFancyInput <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>FancyInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En este ejemplo, un componente padre que muestra <code class=\"language-javascript\">&lt;FancyInput ref={inputRef} /&gt;</code> podr\u00eda llamar a <code class=\"language-javascript\">inputRef.current.focus()</code>.</p>\n<h3 id=\"uselayouteffect\"><a class=\"anchor\" href=\"/react/hooks-reference#uselayouteffect\"></a><code class=\"language-javascript\">useLayoutEffect</code> </h3>\n<p>La firma es id\u00e9ntica a <code class=\"language-javascript\">useEffect</code>, pero se dispara de forma s\u00edncrona despu\u00e9s de todas las mutaciones de DOM. Use esto para leer el dise\u00f1o del DOM y volver a renderizar de forma sincr\u00f3nica. Las actualizaciones programadas dentro de <code class=\"language-javascript\">useLayoutEffect</code> se vaciar\u00e1n sincr\u00f3nicamente, antes de que el navegador tenga la oportunidad de pintar.</p>\n<p>Prefiera el <code class=\"language-javascript\">useEffect</code> est\u00e1ndar cuando sea posible para evitar el bloqueo de actualizaciones visuales.</p>\n<div class=\"blockquote\">\n<strong>Consejo</strong>\n<p>Si estas migrando c\u00f3digo de un componente de clase, recuerda que <code class=\"language-javascript\">useLayoutEffect</code> se activa en la misma fase que <code class=\"language-javascript\">componentDidMount</code> y <code class=\"language-javascript\">componentDidUpdate</code>. Sin embargo, <strong>recomendamos empezar con <code class=\"language-javascript\">useEffect</code> primero</strong> y solo intentar con <code class=\"language-javascript\">useLayoutEffect</code> si lo anterior causa problemas.</p>\n<p>Si usas renderizado en el servidor, ten en cuenta que <em>ni</em> <code class=\"language-javascript\">useLayoutEffect</code> ni <code class=\"language-javascript\">useEffect</code> pueden ejecutarse hasta que no se haya descargado el c\u00f3digo JavaScript. Por eso es que React advierte cuando un componente renderizado en el servidor contiene <code class=\"language-javascript\">useLayoutEffect</code>. Para corregirlo, puedes o bien mover la l\u00f3gica a <code class=\"language-javascript\">useEffect</code> (si no es necesaria para el primer renderizado), o retrasar el momento de mostrar el componente hasta despu\u00e9s de que se haya renderizado el cliente (si el HTML luciera roto, hasta que se ejecute <code class=\"language-javascript\">useLayoutEffect</code>). </p>\n<p>Para excluir del HTML renderizado en el servidor a un componente que necesita efectos de <em>layout</em>, render\u00edzalo condicionalmente con <code class=\"language-javascript\">showChild &amp;&amp; &lt;Child /&gt;</code> y retrasa mostrarlo con <code class=\"language-javascript\">useEffect(() =&gt; { setShowChild(true); }, [])</code>. De esta manera, la interfaz de usuario no lucir\u00e1 rota antes de la hidrataci\u00f3n.</p>\n</div>\n<h3 id=\"usedebugvalue\"><a class=\"anchor\" href=\"/react/hooks-reference#usedebugvalue\"></a><code class=\"language-javascript\">useDebugValue</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useDebugValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">useDebugValue</code> puede usarse para mostrar una etiqueta para Hooks personalizados en React DevTools.</p>\n<p>Por ejemplo, considera el Hook personalizado <code class=\"language-javascript\">useFriendStatus</code> descrito en <a href=\"/react/hooks-custom\">\u201cConstruyendo sus propios Hooks\u201d</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Mostrar una etiqueta en DevTools junto a este Hook</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// por ejemplo: \"FriendStatus: Online\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useDebugValue</span><span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">?</span> <span class=\"token string\">'Online'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Offline'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Consejo</strong>\n<p>No recomendamos agregar valores de depuraci\u00f3n a cada Hook personalizado. Es m\u00e1s valioso para los Hooks personalizados que forman parte de  bibliotecas compartidas.</p>\n</div>\n<h4 id=\"defer-formatting-debug-values\"><a class=\"anchor\" href=\"/react/hooks-reference#defer-formatting-debug-values\"></a>Aplazar el formato de los valores de depuraci\u00f3n </h4>\n<p>En algunos casos, formatear un valor para mostrar puede ser una operaci\u00f3n costosa. Tambi\u00e9n es innecesario a menos que un Hook sea realmente inspeccionado.</p>\n<p>Por esta raz\u00f3n, <code class=\"language-javascript\">useDebugValue</code> acepta una funci\u00f3n de formato como un segundo par\u00e1metro opcional. Esta funci\u00f3n solo se llama si se inspeccionan los Hooks. Recibe el valor de depuraci\u00f3n como par\u00e1metro y debe devolver un valor de visualizaci\u00f3n formateado.</p>\n<p>Por ejemplo, un Hook personalizado que devolvi\u00f3 un valor de <code class=\"language-javascript\">Date</code> podr\u00eda evitar llamar a la funci\u00f3n <code class=\"language-javascript\">toDateString</code> innecesariamente al pasar el siguiente formateador:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useDebugValue</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token parameter\">date</span> <span class=\"token operator\">=&gt;</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toDateString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"usedeferredvalue\"><a class=\"anchor\" href=\"/react/hooks-reference#usedeferredvalue\"></a><code class=\"language-javascript\">useDeferredValue</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> deferredValue <span class=\"token operator\">=</span> <span class=\"token function\">useDeferredValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">useDeferredValue</code> accepts a value and returns a new copy of the value that will defer to more urgent updates. If the current render is the result of an urgent update, like user input, React will return the previous value and then render the new value after the urgent render has completed.</p>\n<p>This hook is similar to user-space hooks which use debouncing or throttling to defer updates. The benefits to using <code class=\"language-javascript\">useDeferredValue</code> is that React will work on the update as soon as other work finishes (instead of waiting for an arbitrary amount of time), and like <a href=\"/react/react-api#starttransition\"><code class=\"language-javascript\">startTransition</code></a>, deferred values can suspend without triggering an unexpected fallback for existing content.</p>\n<h4 id=\"memoizing-deferred-children\"><a class=\"anchor\" href=\"/react/hooks-reference#memoizing-deferred-children\"></a>Memoizing deferred children </h4>\n<p><code class=\"language-javascript\">useDeferredValue</code> only defers the value that you pass to it. If you want to prevent a child component from re-rendering during an urgent update, you must also memoize that component with <a href=\"/react/react-api#reactmemo\"><code class=\"language-javascript\">React.memo</code></a> or <a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">React.useMemo</code></a>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Typeahead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token function\">useSearchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> deferredQuery <span class=\"token operator\">=</span> <span class=\"token function\">useDeferredValue</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Memoizing tells React to only re-render when deferredQuery changes,</span>\n  <span class=\"token comment\">// not when query changes.</span>\n  <span class=\"token keyword\">const</span> suggestions <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SearchSuggestions</span></span> <span class=\"token attr-name\">query</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>deferredQuery<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>deferredQuery<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SearchInput</span></span> <span class=\"token attr-name\">query</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Loading results...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>suggestions<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Memoizing the children tells React that it only needs to re-render them when <code class=\"language-javascript\">deferredQuery</code> changes and not when <code class=\"language-javascript\">query</code> changes. This caveat is not unique to <code class=\"language-javascript\">useDeferredValue</code>, and it\u2019s the same pattern you would use with similar hooks that use debouncing or throttling.</p>\n<h3 id=\"usetransition\"><a class=\"anchor\" href=\"/react/hooks-reference#usetransition\"></a><code class=\"language-javascript\">useTransition</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPending<span class=\"token punctuation\">,</span> startTransition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Returns a stateful value for the pending state of the transition, and a function to start it.</p>\n<p><code class=\"language-javascript\">startTransition</code> lets you mark updates in the provided callback as transitions:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-javascript\">isPending</code> indicates when a transition is active to show a pending state:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isPending<span class=\"token punctuation\">,</span> startTransition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=&gt;</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isPending <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Spinner</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p>Updates in a transition yield to more urgent updates such as clicks.</p>\n<p>Updates in a transition will not show a fallback for re-suspended content. This allows the user to continue interacting with the current content while rendering the update.</p>\n</div>\n<h3 id=\"useid\"><a class=\"anchor\" href=\"/react/hooks-reference#useid\"></a><code class=\"language-javascript\">useId</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">useId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">useId</code> is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches.</p>\n<div class=\"blockquote\">\n<strong>Note</strong>\n<p><code class=\"language-javascript\">useId</code> is <strong>not</strong> for generating <a href=\"/react/lists-and-keys#keys\">keys in a list</a>. Keys should be generated from your data.</p>\n</div>\n<p>For a basic example, pass the <code class=\"language-javascript\">id</code> directly to the elements that need it:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Checkbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">useId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Do you like React?</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>react<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For multiple IDs in the same component, append a suffix using the same <code class=\"language-javascript\">id</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NameFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">useId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'-firstName'</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">First Name</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'-firstName'</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'-lastName'</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Last Name</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'-lastName'</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">useId</code> generates a string that includes the <code class=\"language-javascript\">:</code> token. This helps ensure that the token is unique, but is not supported in CSS selectors or APIs like <code class=\"language-javascript\">querySelectorAll</code>.</p>\n<p><code class=\"language-javascript\">useId</code> supports an <code class=\"language-javascript\">identifierPrefix</code> to prevent collisions in multi-root apps. To configure, see the options for <a href=\"/react/react-dom-client#hydrateroot\"><code class=\"language-javascript\">hydrateRoot</code></a> and <a href=\"/react/react-dom-server\"><code class=\"language-javascript\">ReactDOMServer</code></a>.</p>\n</div>\n<h2 id=\"library-hooks\"><a class=\"anchor\" href=\"/react/hooks-reference#library-hooks\"></a>Library Hooks </h2>\n<p>The following Hooks are provided for library authors to integrate libraries deeply into the React model, and are not typically used in application code.</p>\n<h3 id=\"usesyncexternalstore\"><a class=\"anchor\" href=\"/react/hooks-reference#usesyncexternalstore\"></a><code class=\"language-javascript\">useSyncExternalStore</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useSyncExternalStore</span><span class=\"token punctuation\">(</span>subscribe<span class=\"token punctuation\">,</span> getSnapshot<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> getServerSnapshot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">useSyncExternalStore</code> is a hook recommended for reading and subscribing from external data sources in a way that\u2019s compatible with concurrent rendering features like selective hydration and time slicing.</p>\n<p>This method returns the value of the store and accepts three arguments:</p>\n<ul>\n<li><code class=\"language-javascript\">subscribe</code>: function to register a callback that is called whenever the store changes.</li>\n<li><code class=\"language-javascript\">getSnapshot</code>: function that returns the current value of the store.</li>\n<li><code class=\"language-javascript\">getServerSnapshot</code>: function that returns the snapshot used during server rendering.</li>\n</ul>\n<p>The most basic example simply subscribes to the entire store:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useSyncExternalStore</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span>getSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, you can also subscribe to a specific field:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> selectedField <span class=\"token operator\">=</span> <span class=\"token function\">useSyncExternalStore</span><span class=\"token punctuation\">(</span>\n  store<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>selectedField<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When server rendering, you must serialize the store value used on the server, and provide it to <code class=\"language-javascript\">useSyncExternalStore</code>. React will use this snapshot during hydration to prevent server mismatches:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> selectedField <span class=\"token operator\">=</span> <span class=\"token function\">useSyncExternalStore</span><span class=\"token punctuation\">(</span>\n  store<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>selectedField<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">INITIAL_SERVER_SNAPSHOT</span><span class=\"token punctuation\">.</span>selectedField<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">getSnapshot</code> must return a cached value. If getSnapshot is called multiple times in a row, it must return the same exact value unless there was a store update in between.</p>\n<p>A shim is provided for supporting multiple React versions published as <code class=\"language-javascript\">use-sync-external-store/shim</code>. This shim will prefer <code class=\"language-javascript\">useSyncExternalStore</code> when available, and fallback to a user-space implementation when it\u2019s not.</p>\n<p>As a convenience, we also provide a version of the API with automatic support for memoizing the result of getSnapshot published as <code class=\"language-javascript\">use-sync-external-store/with-selector</code>.</p>\n</div>\n<h3 id=\"useinsertioneffect\"><a class=\"anchor\" href=\"/react/hooks-reference#useinsertioneffect\"></a><code class=\"language-javascript\">useInsertionEffect</code> </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useInsertionEffect</span><span class=\"token punctuation\">(</span>didUpdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The signature is identical to <code class=\"language-javascript\">useEffect</code>, but it fires synchronously <em>before</em> all DOM mutations. Use this to inject styles into the DOM before reading layout in <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a>. Since this hook is limited in scope, this hook does not have access to refs and cannot schedule updates.</p>\n<div class=\"blockquote\">\n<strong>Note:</strong>\n<p><code class=\"language-javascript\">useInsertionEffect</code> should be limited to css-in-js library authors. Prefer <a href=\"/react/hooks-reference#useeffect\"><code class=\"language-javascript\">useEffect</code></a> or <a href=\"/react/hooks-reference#uselayouteffect\"><code class=\"language-javascript\">useLayoutEffect</code></a> instead.</p>\n</div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/hooks-reference.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-reference", "nav": ["/react/hooks-custom", "/react/hooks-faq"]}, {"key": "8. Preguntas frecuentes sobre Hooks", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Los <em>Hooks</em> son una adici\u00f3n nueva en React 16.8. Te permiten usar el estado y otras caracter\u00edsticas de React sin la necesidad de escribir una clase.</p>\n<p>Esta p\u00e1gina responde algunas de las preguntas frecuentes acerca de los <a href=\"/react/hooks-overview\">Hooks</a>.</p>\n<!--\n  if you ever need to regenerate this, this snippet in the devtools console might help:\n\n  $$('.anchor').map(a =>\n    `${' '.repeat(2 * +a.parentNode.nodeName.slice(1))}` +\n    `[${a.parentNode.textContent}](${a.getAttribute('href')})`\n  ).join('\\n')\n-->\n<ul>\n<li>\n<p><strong><a href=\"/react/hooks-faq#adoption-strategy\">Estrategia de adopci\u00f3n</a></strong></p>\n<ul>\n<li><a href=\"/react/hooks-faq#which-versions-of-react-include-hooks\">\u00bfQu\u00e9 versiones de React incluyen Hooks?</a></li>\n<li><a href=\"/react/hooks-faq#do-i-need-to-rewrite-all-my-class-components\">\u00bfNecesito reescribir todos mis componentes que ya sean clases?</a></li>\n<li><a href=\"/react/hooks-faq#what-can-i-do-with-hooks-that-i-couldnt-with-classes\">\u00bfQu\u00e9 puedo hacer con Hooks que no pueda hacer con clases?</a></li>\n<li><a href=\"/react/hooks-faq#how-much-of-my-react-knowledge-stays-relevant\">\u00bfQu\u00e9 tanto de mi conocimiento de React se mantiene relevante?</a></li>\n<li><a href=\"/react/hooks-faq#should-i-use-hooks-classes-or-a-mix-of-both\">\u00bfDeber\u00eda usar Hooks, clases, o una mezcla de ambos?</a></li>\n<li><a href=\"/react/hooks-faq#do-hooks-cover-all-use-cases-for-classes\">\u00bfCubren los Hooks todos los casos de uso de las clases?</a></li>\n<li><a href=\"/react/hooks-faq#do-hooks-replace-render-props-and-higher-order-components\">\u00bfReemplazan los hooks a los render props y los Componentes de Orden Superior (HOC)?</a></li>\n<li><a href=\"/react/hooks-faq#what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router\">\u00bfQu\u00e9 significan los Hooks para APIs populares como el connect de Redux, o React Router?</a></li>\n<li><a href=\"/react/hooks-faq#do-hooks-work-with-static-typing\">\u00bfFuncionan los Hooks con tipado est\u00e1tico?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-test-components-that-use-hooks\">\u00bfC\u00f3mo probar Componentes que usan Hooks?</a></li>\n<li><a href=\"/react/hooks-faq#what-exactly-do-the-lint-rules-enforce\">\u00bfQu\u00e9 hacen cumplir las reglas de lint?</a></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"/react/hooks-faq#from-classes-to-hooks\">De las clases a los Hooks</a></strong></p>\n<ul>\n<li><a href=\"/react/hooks-faq#how-do-lifecycle-methods-correspond-to-hooks\">\u00bfC\u00f3mo corresponden los m\u00e9todos del ciclo de vida a los Hooks?</a></li>\n<li><a href=\"/react/hooks-faq#how-can-i-do-data-fetching-with-hooks\">\u00bfC\u00f3mo puedo obtener datos con los Hooks?</a></li>\n<li><a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">\u00bfExiste algo similar a las variables de instancia?</a></li>\n<li><a href=\"/react/hooks-faq#should-i-use-one-or-many-state-variables\">\u00bfDeber\u00eda usar una o muchas variables de estado?</a></li>\n<li><a href=\"/react/hooks-faq#can-i-run-an-effect-only-on-updates\">\u00bfPuedo correr un efecto solo cuando ocurran actualizaciones?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-get-the-previous-props-or-state\">\u00bfC\u00f3mo obtengo las props o el estado previo?</a></li>\n<li><a href=\"/react/hooks-faq#why-am-i-seeing-stale-props-or-state-inside-my-function\">\u00bfPor qu\u00e9 estoy viendo props o estado obsoletos dentro de mi funci\u00f3n?</a></li>\n<li><a href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\">\u00bfC\u00f3mo implemento getDerivedStateFromProps?</a></li>\n<li><a href=\"/react/hooks-faq#is-there-something-like-forceupdate\">\u00bfHay algo similar a forceUpdate?</a></li>\n<li><a href=\"/react/hooks-faq#can-i-make-a-ref-to-a-function-component\">\u00bfPuedo crear una referencia (ref) a un Componente de funci\u00f3n?</a></li>\n<li><a href=\"/react/hooks-faq#how-can-i-measure-a-dom-node\">\u00bfC\u00f3mo puedo medir un nodo del DOM?</a></li>\n<li><a href=\"/react/hooks-faq#what-does-const-thing-setthing--usestate-mean\">\u00bfQu\u00e9 significa [thing, setThing] = useState()?</a></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"/react/hooks-faq#performance-optimizations\">Optimizaciones de desempe\u00f1o</a></strong></p>\n<ul>\n<li><a href=\"/react/hooks-faq#can-i-skip-an-effect-on-updates\">\u00bfPuedo saltarme un efecto durante las actualizaciones?</a></li>\n<li><a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">\u00bfEs seguro omitir funciones de la lista de dependencias?</a></li>\n<li><a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">\u00bfQu\u00e9 puedo hacer si las dependencias de un efecto cambian con mucha frecuencia?</a></li>\n<li><a href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\">\u00bfC\u00f3mo implemento shouldComponentUpdate?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-memoize-calculations\">\u00bfC\u00f3mo memorizar (memoize) los c\u00e1lculos?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\">\u00bfC\u00f3mo crear objetos costosos de manera diferida (lazy)?</a></li>\n<li><a href=\"/react/hooks-faq#are-hooks-slow-because-of-creating-functions-in-render\">\u00bfSon los hooks lentos debido a la creaci\u00f3n de funciones en el render?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\">\u00bfC\u00f3mo evitar pasar callbacks hacia abajo?</a></li>\n<li><a href=\"/react/hooks-faq#how-to-read-an-often-changing-value-from-usecallback\">\u00bfC\u00f3mo leer un valor que cambia frecuentemente desde useCallback?</a></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"/react/hooks-faq#under-the-hood\">Bajo el cap\u00f3</a></strong></p>\n<ul>\n<li><a href=\"/react/hooks-faq#how-does-react-associate-hook-calls-with-components\">\u00bfC\u00f3mo asocia React las llamadas a los Hooks con Componentes?</a></li>\n<li><a href=\"/react/hooks-faq#what-is-the-prior-art-for-hooks\">\u00bfCu\u00e1les son los antecedentes de los Hooks?</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"adoption-strategy\"><a class=\"anchor\" href=\"/react/hooks-faq#adoption-strategy\"></a>Estrategia de adopci\u00f3n </h2>\n<h3 id=\"which-versions-of-react-include-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#which-versions-of-react-include-hooks\"></a>\u00bfQu\u00e9 versiones de React incluyen Hooks? </h3>\n<p>Empezando con React 16.8.0, se incluye una implementaci\u00f3n estable de Hooks para:</p>\n<ul>\n<li>React DOM</li>\n<li>React Native</li>\n<li>React DOM Server</li>\n<li>React Test Renderer</li>\n<li>React Shallow Renderer</li>\n</ul>\n<p>N\u00f3tese que <strong>para habilitar los Hooks, todos los paquetes de React deben estar en la versi\u00f3n 16.8.0 o superior</strong>. Los Hooks no van a funcionar si olvidas, por ejemplo, actualizar React DOM.</p>\n<p><a class=\"external-link\" href=\"https://reactnative.dev/blog/2019/03/12/releasing-react-native-059\">React Native 0.59</a> y versiones superiores son compatibles con Hooks.</p>\n<h3 id=\"do-i-need-to-rewrite-all-my-class-components\"><a class=\"anchor\" href=\"/react/hooks-faq#do-i-need-to-rewrite-all-my-class-components\"></a>\u00bfNecesito reescribir todos mis componentes que ya sean clases? </h3>\n<p>No. <a href=\"/react/hooks-intro#gradual-adoption-strategy\">No hay planes</a> de remover las clases de React \u2014 todos debemos seguir lanzando productos y no nos podemos dar el lujo de reescribir. Recomendamos usar Hooks en tu c\u00f3digo nuevo.</p>\n<h3 id=\"what-can-i-do-with-hooks-that-i-couldnt-with-classes\"><a class=\"anchor\" href=\"/react/hooks-faq#what-can-i-do-with-hooks-that-i-couldnt-with-classes\"></a>\u00bfQu\u00e9 puedo hacer con Hooks que no pueda hacer con clases? </h3>\n<p>Los Hooks ofrecen una nueva, poderosa y expresiva forma de reusar funcionalidad entre componentes. La secci\u00f3n <a href=\"/react/hooks-custom\">\u201cConstruyendo tus Propios Hooks\u201d</a> provee un vistazo a las posibilidades. <a class=\"external-link\" href=\"https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889\">Este art\u00edculo</a> por uno de los miembros clave del equipo de React se adentra m\u00e1s en las nuevas capacidades que proveen los Hooks.</p>\n<h3 id=\"how-much-of-my-react-knowledge-stays-relevant\"><a class=\"anchor\" href=\"/react/hooks-faq#how-much-of-my-react-knowledge-stays-relevant\"></a>\u00bfQu\u00e9 tanto de mi conocimiento de React se mantiene relevante? </h3>\n<p>Los Hooks son una manera m\u00e1s directa de usar la caracter\u00edsticas de React que ya conoces \u2014 como el estado, ciclo de vida, contexto, y las referencias (refs). No cambian de manera fundamental el funcionamiento de React, y tu conocimiento de componentes, props, y el flujo de datos de arriba hacia abajo sigue siendo igual de relevante.</p>\n<p>Los Hooks tienen tambi\u00e9n su propia curva de aprendizaje. Si hay algo faltante en esta documentaci\u00f3n, <a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/issues/new\">levanta un issue</a> y trataremos de ayudar.</p>\n<h3 id=\"should-i-use-hooks-classes-or-a-mix-of-both\"><a class=\"anchor\" href=\"/react/hooks-faq#should-i-use-hooks-classes-or-a-mix-of-both\"></a>\u00bfDeber\u00eda usar Hooks, clases, o una mezcla de ambos? </h3>\n<p>Cuando est\u00e9s listo, te recomendamos empezar a usar Hooks en los nuevos componentes que escribas. Aseg\u00farate que todo tu equipo est\u00e9 de acuerdo en usarlos, y que est\u00e9n familiarizados con esta documentaci\u00f3n. No recomendamos reescribir tus clases existentes a menos de que hayas planeado reescribirlas de cualquier manera (por ejemplo para arreglar bugs).</p>\n<p>No puedes usar Hooks <em>dentro</em> de un componente de clase, pero definitivamente puedes mezclar componentes de clase y componentes de funci\u00f3n con Hooks en un mismo \u00e1rbol. Si un componente es una clase, o una funci\u00f3n que utiliza Hooks es un detalle de implementaci\u00f3n del Componente. A largo plazo, esperamos que los Hooks sean la manera m\u00e1s usada de escribir Componentes de React.</p>\n<h3 id=\"do-hooks-cover-all-use-cases-for-classes\"><a class=\"anchor\" href=\"/react/hooks-faq#do-hooks-cover-all-use-cases-for-classes\"></a>\u00bfCubren los Hooks todos los casos de uso de las clases? </h3>\n<p>Nuestra meta es que los Hooks cubran todos los casos de uso de las clases lo m\u00e1s pronto posible. En este momento no existen equivalentes de los ciclos de vida poco comunes <code class=\"language-javascript\">getSnapshotBeforeUpdate</code>, <code class=\"language-javascript\">getDerivedStateFromError</code> y <code class=\"language-javascript\">componentDidCatch</code>, pero planeamos a\u00f1adirlos pronto.</p>\n<h3 id=\"do-hooks-replace-render-props-and-higher-order-components\"><a class=\"anchor\" href=\"/react/hooks-faq#do-hooks-replace-render-props-and-higher-order-components\"></a>\u00bfReemplazan los hooks a los render props y los Componentes de Orden Superior (HOC)? </h3>\n<p>En muchas ocasiones, render props y los componentes de orden superior, renderizan un s\u00f3lo hijo. Pensamos que los Hooks son una forma m\u00e1s sencilla de soportar este caso de uso. A\u00fan hay lugar para ambos patrones (por ejemplo, un scroller virtual podr\u00eda tener un prop <code class=\"language-javascript\">renderItem</code>, o un componente que sea un contenedor visual podr\u00eda tener su propia estructura de DOM). Pero en la mayor\u00eda de los casos, los Hooks ser\u00e1n suficiente y ayudaran a reducir la anidaci\u00f3n en tu arbol.</p>\n<h3 id=\"what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router\"><a class=\"anchor\" href=\"/react/hooks-faq#what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router\"></a>\u00bfQu\u00e9 significan los Hooks para APIs populares como el connect de Redux, o React Router? </h3>\n<p>Puedes seguir usando exactamente las mismas APIs que siempre has usado, seguir\u00e1n funcionando.</p>\n<p>React Redux desde v7.1.0 <a class=\"external-link\" href=\"https://react-redux.js.org/api/hooks\">tiene una API con Hooks</a> y expone hooks como <code class=\"language-javascript\">useDispatch</code> o <code class=\"language-javascript\">useSelector</code>.</p>\n<p>React Router <a class=\"external-link\" href=\"https://reacttraining.com/react-router/web/api/Hooks\">tiene compatibilidad con hooks</a> desde v5.1.</p>\n<p>Otras bibliotecas pueden ofrecer compatibilidad con hooks en el futuro tambi\u00e9n.</p>\n<h3 id=\"do-hooks-work-with-static-typing\"><a class=\"anchor\" href=\"/react/hooks-faq#do-hooks-work-with-static-typing\"></a>\u00bfFuncionan los Hooks con tipado est\u00e1tico? </h3>\n<p>Los Hooks fueron dise\u00f1ados con el tipado est\u00e1tico en mente. Al ser funciones, son m\u00e1s f\u00e1ciles de tipar que patrones como los componentes de orden superior (HOC). Las \u00faltimas definiciones para React de TypeScript y Flow incluyen soporte para Hooks.</p>\n<p>A\u00fan m\u00e1s importante, los Hooks personalizados tienen el poder de restringir la API de React si quisieras tiparlas de una manera m\u00e1s estricta. React te da las primitivas, pero puedes combinarlas de distintas maneras de las que proveemos por defecto.</p>\n<h3 id=\"how-to-test-components-that-use-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-test-components-that-use-hooks\"></a>\u00bfC\u00f3mo probar Componentes que usan Hooks? </h3>\n<p>Desde el punto de vista de React, un componente que use Hooks, sigue siendo un componente normal. Si las herramientas de prueba que utilizas no dependen de los mecanismos internos de React, probar los componentes que usen Hooks, no deber\u00eda ser diferente de probar cualquier otro componente.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p><a href=\"/react/testing-recipes\">Recetas de pruebas</a> incluye muchos ejemplo que puedes copiar y pegar.</p>\n</div>\n<p>Por ejemplo, asumamos que tenemos este componente de conteo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Click me\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vamos a probarlo usando React DOM. Para asegurarnos de que el comportamiento concuerda con lo que sucede en el browser, envolveremos el c\u00f3digo, renderiz\u00e1ndolo y actualiz\u00e1ndolo usando llamadas a <a href=\"/react/test-utils#act\"><code class=\"language-javascript\">ReactTestUtils.act()</code></a>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/test-utils'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">'./Counter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can render and update a counter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Probamos el primer render y efecto</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 0 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 0 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Probamos el segundo render y efecto</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 1 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked 1 times'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Las llamadas a <code class=\"language-javascript\">act()</code> tambi\u00e9n resolver\u00e1n los efectos adentro de ellas.</p>\n<p>Si necesitas probar un Hook personalizado, puedes hacerlo creando un componente en tu prueba, y usando tu Hook desde el mismo. Luego puedes probar el componente que escribiste.</p>\n<p>Para reducir el <em>boilerplate</em>, recomendamos usar <a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a> que est\u00e1 dise\u00f1ada para promover pruebas que utilicen tus componentes como lo har\u00edan los usuarios finales.</p>\n<p>Para m\u00e1s informaci\u00f3n, revisa <a href=\"/react/testing-recipes\">Recetas de pruebas</a>.</p>\n<h3 id=\"what-exactly-do-the-lint-rules-enforce\"><a class=\"anchor\" href=\"/react/hooks-faq#what-exactly-do-the-lint-rules-enforce\"></a>\u00bfQu\u00e9 hacen cumplir las <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">reglas de lint</a>? </h3>\n<p>Proveemos un <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">plugin de ESLint</a> que hace cumplir las <a href=\"/react/hooks-rules\">reglas de los Hooks</a> para evitar bugs. Asume que cualquier funci\u00f3n cuyo nombre empiece con \u201d<code class=\"language-javascript\">use</code>\u201d, seguido de una letra may\u00fascula es un Hook. Reconocemos que esta heur\u00edstica no es perfecta, y podr\u00eda haber algunos falsos positivos, pero sin una convenci\u00f3n que cubra a todo el ecosistema no hay manera de hacer que los Hooks funcionen bien en este aspecto \u2014 y nombres m\u00e1s largos desalientan a las personas de usar Hooks, o la convenci\u00f3n.</p>\n<p>En particular, la regla hace cumplir que:</p>\n<ul>\n<li>Las llamadas a Hooks est\u00e1n dentro de una funci\u00f3n cuyo nombre usa <code class=\"language-javascript\">PascalCase</code> (que se asume es un Componente), u otra funci\u00f3n cuyo nombre empieza con \u201d<code class=\"language-javascript\">use</code>\u201d, seguido de una letra may\u00fascula (por ejemplo <code class=\"language-javascript\">useSomething</code>, que se asume es un Hook personalizado).</li>\n<li>Los Hooks se llaman en el mismo orden en cada llamado a render.</li>\n</ul>\n<p>Hay algunas heur\u00edsticas m\u00e1s, y podr\u00edan cambiar con el tiempo mientras ajustamos las reglas para generar un balance entre encontrar bugs y encontrar falsos positivos.</p>\n<h2 id=\"from-classes-to-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#from-classes-to-hooks\"></a>De las clases a los Hooks </h2>\n<h3 id=\"how-do-lifecycle-methods-correspond-to-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#how-do-lifecycle-methods-correspond-to-hooks\"></a>\u00bfC\u00f3mo corresponden los m\u00e9todos del ciclo de vida a los Hooks?</h3>\n<ul>\n<li><code class=\"language-javascript\">constructor</code>: Los componentes de Funci\u00f3n no requieren un constructor. Puedes inicializar el estado en la llamada a <a href=\"/react/hooks-reference#usestate\"><code class=\"language-javascript\">useState</code></a>. Si el c\u00e1lculo del estado inicial es costoso, puedes pasar una funci\u00f3n a <code class=\"language-javascript\">useState</code>.</li>\n<li><code class=\"language-javascript\">getDerivedStateFromProps</code>: Agenda una actualizaci\u00f3n <a href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\">durante el renderizado</a>.</li>\n<li><code class=\"language-javascript\">shouldComponentUpdate</code>: Ver <code class=\"language-javascript\">React.memo</code> <a href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\">abajo</a>.</li>\n<li><code class=\"language-javascript\">render</code>: Es el cuerpo del componente de funci\u00f3n en s\u00ed.</li>\n<li><code class=\"language-javascript\">componentDidMount</code>, <code class=\"language-javascript\">componentDidUpdate</code>, <code class=\"language-javascript\">componentWillUnmount</code>: El <a href=\"/react/hooks-reference#useeffect\">Hook <code class=\"language-javascript\">useEffect</code></a> puede expresar todas las combinaciones de estos (incluyendo casos <a href=\"/react/hooks-faq#can-i-skip-an-effect-on-updates\">poco</a> <a href=\"/react/hooks-faq#can-i-run-an-effect-only-on-updates\">comunes</a>).</li>\n<li><code class=\"language-javascript\">getSnapshotBeforeUpdate</code>, <code class=\"language-javascript\">componentDidCatch</code> y <code class=\"language-javascript\">getDerivedStateFromError</code>: A\u00fan no hay Hooks equivalentes a estos m\u00e9todos, pero ser\u00e1n a\u00f1adidos pronto.</li>\n</ul>\n<h3 id=\"how-can-i-do-data-fetching-with-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#how-can-i-do-data-fetching-with-hooks\"></a>\u00bfC\u00f3mo puedo obtener datos con los Hooks? </h3>\n<p>Aqu\u00ed hay un <a class=\"external-link\" href=\"https://codesandbox.io/s/jvvkoo8pq3\">peque\u00f1o demo</a> a modo introductorio. Para aprender m\u00e1s, consulta este <a class=\"external-link\" href=\"https://www.robinwieruch.de/react-hooks-fetch-data/\">art\u00edculo</a> acerca de la obtenci\u00f3n de datos con los Hooks.</p>\n<h3 id=\"is-there-something-like-instance-variables\"><a class=\"anchor\" href=\"/react/hooks-faq#is-there-something-like-instance-variables\"></a>\u00bfExiste algo similar a las variables de instancia? </h3>\n<p>Si!, el Hook <a href=\"/react/hooks-reference#useref\"><code class=\"language-javascript\">useRef()</code></a> no es solo para referencias al DOM. El objeto \u201cref\u201d es un contenedor gen\u00e9rico cuya propiedad <code class=\"language-javascript\">current</code> es mutable y puede contener cualquier valor, similar a una variable de instancia en una clase.</p>\n<p>Puedes escribir en el desde adentro de <code class=\"language-javascript\">useEffect</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> intervalRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    intervalRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si simplemente quisieramos setear un int\u00e9rvalo no necesitar\u00edamos le referencia (<code class=\"language-javascript\">id</code> podr\u00eda ser local al efecto), pero es \u00fatil si queremos limpiar el int\u00e9rvalo de un manejador de evento.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleCancelClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Conceptualmente, puedes pensar en los refs como s\u00edmiles a las variables de instancia en una clase. A menos que est\u00e9s utilizando inicializaci\u00f3n diferida (<a href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\">lazy initialization</a>), evita setear referencias durante el renderizado \u2014 esto podr\u00eda llevar a comportamiento inesperado. En cambio, generalmente querr\u00e1s modificar las referencias en manejadores de eventos y efectos.</p>\n<h3 id=\"should-i-use-one-or-many-state-variables\"><a class=\"anchor\" href=\"/react/hooks-faq#should-i-use-one-or-many-state-variables\"></a>\u00bfDeber\u00eda usar una o muchas variables de estado? </h3>\n<p>Si vienes de las clases, podr\u00edas estar tentado a siempre llamar a <code class=\"language-javascript\">useState()</code> una sola vez y poner todo tu estado dentro de un solo objeto. Lo puedes hacer si quieres. Aqu\u00ed hay un ejemplo que sigue el movimiento del mouse. mantenemos su posici\u00f3n y tama\u00f1o en el estado local:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora digamos que queremos escribir un poco de l\u00f3gica que cambie <code class=\"language-javascript\">left</code> y <code class=\"language-javascript\">top</code> cuando el usuario mueva el mouse. Nota como mezclamos estos campos en el estado previo manualmente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleWindowMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Spreading \"...state\" ensures we don't \"lose\" width and height</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Note: this implementation is a bit simplified</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> handleWindowMouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> handleWindowMouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Esto se debe a que cuando actualizamos una variable de estado, <em>reemplazamos</em> su valor. Esto es diferente de <code class=\"language-javascript\">this.setState</code> en una clase, que <em>mezcla</em> los campos actualizados en el objeto.</p>\n<p>Si extra\u00f1as esta mezcla autom\u00e1tica, podr\u00edas escribir un Hook personalizado <code class=\"language-javascript\">useLegacyState</code> que mezcle las actualizaciones al objeto de estado. Sin embargo, <strong>recomendamos dividir el estado en m\u00faltiples variables de estado, basado en los valores que tienden a cambiar juntos</strong>.</p>\n<p>Por ejemplo, podr\u00edamos dividir el estado de nuestro componente en objetos <code class=\"language-javascript\">position</code> y <code class=\"language-javascript\">size</code>, y siempre reemplazar <code class=\"language-javascript\">position</code> sin la necesidad de mezclar.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">,</span> setPosition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">,</span> setSize<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleWindowMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Separar variables de estado independientes tambi\u00e9n tiene otro beneficio. Hace f\u00e1cil extraer l\u00f3gica relacionada en un Hook personalizado, por ejemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> position <span class=\"token operator\">=</span> <span class=\"token function\">useWindowPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">,</span> setSize<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">,</span> setPosition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> position<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nota c\u00f3mo podemos mover el llamado a <code class=\"language-javascript\">useState</code> para la variable de estado <code class=\"language-javascript\">position</code> y el efecto relacionado en un Hook personalizado sin cambiar su c\u00f3digo. Si todo el estado estuviera en un solo objeto, extraerlo ser\u00eda m\u00e1s dif\u00edcil.</p>\n<p>Ambas aproximaciones, poner todo el estado en un solo llamado a <code class=\"language-javascript\">useState</code>, y usar un llamado a <code class=\"language-javascript\">useState</code> por cada campo, pueden funcionar. Los Componentes suelen ser m\u00e1s legibles cuando encuentras un balance entre ambos extremos y agrupas partes del estado relacionadas en unas cuantas variables de estado independientes. Si la l\u00f3gica del estado se vuelve muy compleja, recomendamos <a href=\"/react/hooks-reference#usereducer\">manejarla con un reductor</a>, o un Hook personalizado.</p>\n<h3 id=\"can-i-run-an-effect-only-on-updates\"><a class=\"anchor\" href=\"/react/hooks-faq#can-i-run-an-effect-only-on-updates\"></a>\u00bfPuedo correr un efecto solo cuando ocurran actualizaciones? </h3>\n<p>Este es un caso de uso poco com\u00fan. Si lo necesitas, puedes usar <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">una referencia mutable</a> para guardar manualmente una bandera booleana que corresponde a si es el primer renderizado, o renderizados subsecuentes, luego puedes verificar la bandera en tu efecto. Si te encuentras haciendo esto regularmente podr\u00edas crear un Hook Personalizado.</p>\n<h3 id=\"how-to-get-the-previous-props-or-state\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-get-the-previous-props-or-state\"></a>\u00bfC\u00f3mo obtengo las props o el estado previo? </h3>\n<p>Hay dos casos en que pudieras querer tener acceso a las props o estado anteriores.</p>\n<p>En ocasiones, necesitas las props anteriores para <strong>limpiar un efecto.</strong> Por ejemplo, podr\u00edas tener un efecto que se suscribe a un socket con base en la prop <code class=\"language-javascript\">userId</code>. Si la prop <code class=\"language-javascript\">userId</code> cambia, deber\u00edas cancelar la suscripci\u00f3n del <code class=\"language-javascript\">userId</code> <em>anterior</em> y suscribirte al <em>pr\u00f3ximo</em>. No necesitas hacer nada especial para que esto funcione:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToSocket</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromSocket</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En el ejemplo de arriba, si <code class=\"language-javascript\">userId</code> cambia de <code class=\"language-javascript\">3</code> a <code class=\"language-javascript\">4</code>, se ejecutar\u00e1 primero <code class=\"language-javascript\">ChatAPI.unsubscribeFromSocket(3)</code> y luego se ejecutar\u00e1 <code class=\"language-javascript\">ChatAPI.subscribeToSocket(4)</code>. No hay necesidad de un <code class=\"language-javascript\">userId</code> \u201canterior\u201d porque la funci\u00f3n de limpieza lo capturar\u00e1 en una clausura.</p>\n<p>En otras ocasiones, podr\u00edas necesitar <strong>ajustar estado con base a cambios en las props u en otro estado</strong>. No es muy com\u00fan que exista esa necesidad y generalmente es una se\u00f1al de que tienes alg\u00fan estado duplicado o redundante. Sin embargo, en los casos muy poco frecuentes en que necesites este patr\u00f3n, puedes <a href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\">almacenar el estado o las props anteriores y actualizarlos durante el renderizado</a>.</p>\n<p>Con anterioridad hab\u00edamos sugerido utilizar un Hook personalizado llamado <code class=\"language-javascript\">usePrevious</code> para almacenar el valor anterior. Sin embargo, hemos encontrado que la mayor\u00eda de los casos de uso se adecuan a los dos patrones descritos arriba. Si tu caso de uso es diferente, puedes <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">almacenar un valor en una ref</a> y actualizarlo manualmente cuando lo necesites. Evita leer y actualizar refs durante el renderizado porque esto hace que el comportamiento de tu componente sea dif\u00edcil de predecir y entender.</p>\n<h3 id=\"why-am-i-seeing-stale-props-or-state-inside-my-function\"><a class=\"anchor\" href=\"/react/hooks-faq#why-am-i-seeing-stale-props-or-state-inside-my-function\"></a>\u00bfPor qu\u00e9 estoy viendo props o estado obsoletos dentro de mi funci\u00f3n? </h3>\n<p>Cualquier funci\u00f3n dentro de un componente, incluidos los manejadores de eventos y los efectos, \u201cven\u201d los props y estado del renderizado en el que fueron creados. Por ejemplo, considera c\u00f3digo como este:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleAlertClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked on: '</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Click me\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleAlertClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Show alert\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si hiciste clic primero en \u201cShow alert\u201d y luego incrementas el contador, la alerta mostrar\u00e1 la variable <code class=\"language-javascript\">count</code> <strong>en el momento en que hiciste click el bot\u00f3n \u201cShow alert\u201d. Esto previene errores causados por c\u00f3digo que asume que los props y estado no cambian</strong>.</p>\n<p>Si quieres intencionalmente leer el <em>\u00faltimo</em> estado de un callback as\u00edncrono, podr\u00edas guardarla en <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">una ref</a>, mutarla y leer de ella.</p>\n<p>Finalmente, otra raz\u00f3n posible para que veas props o estado obsoletos es que hayas usado la optimizaci\u00f3n del \u201carray de dependencias\u201d pero no especificaste correctamente todas las dependencias. Por ejemplo, si un efecto especifica <code class=\"language-javascript\">[]</code> como segundo argumento pero lee <code class=\"language-javascript\">someProp</code> dentro, continuar\u00e1 \u201cviendo\u201d el valor inicial de <code class=\"language-javascript\">someProp</code>. La soluci\u00f3n pasa por o bien eliminar el array de dependencias, o arreglarlo. Aqu\u00ed se explica <a href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\">como puedes lidiar con funciones</a>, y aqu\u00ed hay <a href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\">otras estrategias comunes</a> para ejecutar efectos con menos frecuencia sin dejar de especificar dependencias incorrectamente.</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Proporcionamos una regla de ESLint llamada <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> como parte de nuestro paquete <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Esta regla advierte cuando las dependencias se especifican incorrectamente y sugiere una soluci\u00f3n.</p>\n</div>\n<h3 id=\"how-do-i-implement-getderivedstatefromprops\"><a class=\"anchor\" href=\"/react/hooks-faq#how-do-i-implement-getderivedstatefromprops\"></a>\u00bfC\u00f3mo implemento getDerivedStateFromProps? </h3>\n<p>A pesar de que probablemente <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2018/06/07/you-probably-dont-need-derived-state.html\">no lo necesites</a>, en los pocos casos en los que sea necesario (por ejemplo implementando un componente <code class=\"language-javascript\">&lt;Transition&gt;</code>), puedes actualizar el estado en medio de la renderizaci\u00f3n. React correr\u00e1 de nuevo el componente con el estado actualizado inmediatamente despu\u00e9s de correr el primer renderizado, as\u00ed que no es costoso.</p>\n<p>Aqu\u00ed, guardamos el valor anterior del prop <code class=\"language-javascript\">row</code> en una variable de estado para poder comparar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ScrollView</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>row<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isScrollingDown<span class=\"token punctuation\">,</span> setIsScrollingDown<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>prevRow<span class=\"token punctuation\">,</span> setPrevRow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">!==</span> prevRow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Row changed since last render. Update isScrollingDown.</span>\n    <span class=\"token function\">setIsScrollingDown</span><span class=\"token punctuation\">(</span>prevRow <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> row <span class=\"token operator\">&gt;</span> prevRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setPrevRow</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Scrolling down: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>isScrollingDown<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto puede parecer extra\u00f1o en un principio, pero una actualizaci\u00f3n durante el renderizado es exactamente lo que siempre ha sido <code class=\"language-javascript\">getDerivedStateFromProps</code> conceptualmente.</p>\n<h3 id=\"is-there-something-like-forceupdate\"><a class=\"anchor\" href=\"/react/hooks-faq#is-there-something-like-forceupdate\"></a>\u00bfHay algo similar a forceUpdate? </h3>\n<p>Los Hooks <code class=\"language-javascript\">useState</code> y <code class=\"language-javascript\">useReducer</code> <a href=\"/react/hooks-reference#bailing-out-of-a-state-update\">evitan las actualizaciones</a> si el siguiente valor es igual al anterior. Mutar el estado y llamar a <code class=\"language-javascript\">setState</code> no causar\u00e1n un re-renderizado.</p>\n<p>Usualmente, no deber\u00edas mutar el estado local en React. Sin embargo, como una salida de emergencia, puedes usar un contador incremental para forzar un re-renderizado incluso si el estado no ha cambiado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>ignored<span class=\"token punctuation\">,</span> forceUpdate<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Intenta evitar este patr\u00f3n de ser posible. </p>\n<h3 id=\"can-i-make-a-ref-to-a-function-component\"><a class=\"anchor\" href=\"/react/hooks-faq#can-i-make-a-ref-to-a-function-component\"></a>\u00bfPuedo crear una referencia (ref) a un Componente de funci\u00f3n? </h3>\n<p>A pesar de que no deber\u00edas necesitar esto muy seguido, podr\u00edas exponer algunos m\u00e9todos imperativos a un componente padre con con el Hook <a href=\"/react/hooks-reference#useimperativehandle\"><code class=\"language-javascript\">useImperativeHandle</code></a>.</p>\n<h3 id=\"how-can-i-measure-a-dom-node\"><a class=\"anchor\" href=\"/react/hooks-faq#how-can-i-measure-a-dom-node\"></a>\u00bfC\u00f3mo puedo medir un nodo del DOM? </h3>\n<p>Una manera rudimentaria para medir la posici\u00f3n o el tama\u00f1o de un nodo del DOM es usar una <a href=\"/react/refs-and-the-dom#callback-refs\">referencia mediante callback</a>. React llamara el callback cuando la referencia sea asocida a un nodo diferente. Aqu\u00ed hay un <a class=\"external-link\" href=\"https://codesandbox.io/s/l7m0v5x4v9\">peque\u00f1o demo</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MeasureExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">,</span> setHeight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> measuredRef <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>measuredRef<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The above header is </span><span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">px tall</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No escogimos <code class=\"language-javascript\">useRef</code> para este ejemplo porque un objeto de referencia no notifica sobre los <em>cambios</em> al valor actual de la referencia. Usando una referencia mediante callback lo aseguramos <a class=\"external-link\" href=\"https://codesandbox.io/s/818zzk8m78\">incluso si un componente hijo muestra el nodo medido despu\u00e9s</a> (por ejemplo, en respuesta a un click), aun somos notificados al respecto en el componente padre y podemos actualizar las medidas.</p>\n<p>Recuerda que pasamos <code class=\"language-javascript\">[]</code> como un arreglo de dependencias a <code class=\"language-javascript\">useCallback</code>. Esto asegura que nuestro callback por referencia no cambie entre renderizados, y de esta manera React no lo llamara innecesariamente.</p>\n<p>En este ejemplo, el callback ref ser\u00e1 llamado solo cuando el componente se monta y se desmonta, ya que el componente <code class=\"language-javascript\">&lt;h1&gt;</code> permanece presente durante cualquier renderizado. Si quieres ser notificado cada vez que un componente se redimensiona, podr\u00edas usar <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/API/ResizeObserver\"><code class=\"language-javascript\">ResizeObserver</code></a> o un Hook de terceros que ya implemente esta funci\u00f3n.</p>\n<p>Si quieres, puedes <a class=\"external-link\" href=\"https://codesandbox.io/s/m5o42082xy\">extraer esta l\u00f3gica</a> a un Hook reusable:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MeasureExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rect<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>rect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">The above header is </span><span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">px tall</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rect<span class=\"token punctuation\">,</span> setRect<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setRect</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>rect<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"what-does-const-thing-setthing--usestate-mean\"><a class=\"anchor\" href=\"/react/hooks-faq#what-does-const-thing-setthing--usestate-mean\"></a>\u00bfQu\u00e9 significa [thing, setThing] = useState()? </h3>\n<p>Si no est\u00e1s familiarizado con esta sintaxis, mira la <a href=\"/react/hooks-state#tip-what-do-square-brackets-mean\">explicaci\u00f3n</a> en la documentaci\u00f3n de los Hooks de estado.</p>\n<h2 id=\"performance-optimizations\"><a class=\"anchor\" href=\"/react/hooks-faq#performance-optimizations\"></a>Optimizaciones de desempe\u00f1o </h2>\n<h3 id=\"can-i-skip-an-effect-on-updates\"><a class=\"anchor\" href=\"/react/hooks-faq#can-i-skip-an-effect-on-updates\"></a>\u00bfPuedo saltarme un efecto durante las actualizaciones? </h3>\n<p>Si. Mira <a href=\"/react/hooks-reference#conditionally-firing-an-effect\">disparando un efecto condicionalmente</a>. Ten en cuenta que no manejar las actualizaciones frecuentemente <a href=\"/react/hooks-effect#explanation-why-effects-run-on-each-update\">introduce bugs</a>, por lo cual este no es el comportamiento por defecto.</p>\n<h3 id=\"is-it-safe-to-omit-functions-from-the-list-of-dependencies\"><a class=\"anchor\" href=\"/react/hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies\"></a>\u00bfEs seguro omitir funciones de la lista de dependencias? </h3>\n<p>De manera general, no.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \ud83d\udd34 Esto no es seguro (llama a `doSomething` que usa `someProp`)</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Es dif\u00edcil recordar cu\u00e1les props o estado son usadas por funciones fuera del efecto. Es por ello que <strong>usualmente querr\u00e1s declarar las funciones que necesita el efecto <em>dentro</em> de \u00e9l.</strong> De esta manera es f\u00e1cil ver los valores del \u00e1mbito del componente de los que depende ese efecto:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> someProp <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>someProp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Bien (nuestro efecto solo usa `someProp`)</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si luego de ello a\u00fan no usas ning\u00fan valor del \u00e1mbito del componente, es seguro especificar <code class=\"language-javascript\">[]</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Bien en este ejemplo, porque no usamos *ninguno* de los valores del \u00e1mbito del componente</span></span></code></pre></div>\n<p>En dependencia de tu caso de uso, hay otras opciones descritas debajo:</p>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Proporcionamos la regla de ESLint <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/14920\"><code class=\"language-javascript\">exhaustive-deps</code></a> como parte del paquete <a class=\"external-link\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\"><code class=\"language-javascript\">eslint-plugin-react-hooks</code></a>. Esta regla ayuda a encontrar componentes que no manejan las actualizaciones consistentemente.</p>\n</div>\n<p>Veamos por qu\u00e9 esto importa.</p>\n<p>Si especificas una <a href=\"/react/hooks-reference#conditionally-firing-an-effect\">lista de dependencias</a> como el \u00faltimo argumento de <code class=\"language-javascript\">useEffect</code>, <code class=\"language-javascript\">useLayoutEffect</code>, <code class=\"language-javascript\">useMemo</code>, <code class=\"language-javascript\">useCallback</code>, o <code class=\"language-javascript\">useImperativeHandle</code>, debe incluir todos los valores que son usados dentro de la funci\u00f3n callback y participan en el flujo de datos de React. Aqu\u00ed se incluyen props, estado y todo lo que est\u00e9 derivado de ellos.</p>\n<p><em>\u00danicamente</em> es seguro omitir una funci\u00f3n de la lista de dependencias si nada dentro (o las funciones a las que se llama) referencia props, estado, o valores de ellos. Este ejemplo tiene un error:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProductPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> productId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>product<span class=\"token punctuation\">,</span> setProduct<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://myapi/product/'</span> <span class=\"token operator\">+</span> productId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Usa la prop productId</span></span>    <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \ud83d\udd34 No v\u00e1lido, porque `fetchProduct` usa `productId`</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>La soluci\u00f3n recomendada es mover la funci\u00f3n <em>dentro</em> de tu efecto</strong>. Ello facilta ver qu\u00e9 props o estado usa tu efecto, y asegura que todos son declarados:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProductPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> productId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>product<span class=\"token punctuation\">,</span> setProduct<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Al mover esta funci\u00f3n dentro del efecto, podemos ver claramente los valores que usa.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://myapi/product/'</span> <span class=\"token operator\">+</span> productId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>productId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 V\u00e1lido, porque nuestro efecto solo usa productId</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto tambi\u00e9n te permite manejar respuestas fuera de orden con una variable local dentro del efecto:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> ignore <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://myapi/product/'</span> <span class=\"token operator\">+</span> productId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ignore<span class=\"token punctuation\">)</span> <span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> ignore <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>productId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Movimos la funci\u00f3n dentro del efecto, de manera tal que no necesite estar en su lista de dependencias.</p>\n<div class=\"blockquote\">\n<strong>Consejo</strong>\n<p>Consulta este <a class=\"external-link\" href=\"https://codesandbox.io/s/jvvkoo8pq3\">peque\u00f1o demo</a> y <a class=\"external-link\" href=\"https://www.robinwieruch.de/react-hooks-fetch-data/\">este art\u00edculo</a> para aprender m\u00e1s sobre la obtenci\u00f3n de datos con Hooks.</p>\n</div>\n<p><strong>Si por alguna raz\u00f3n <em>no puedes</em> mover una funci\u00f3n dentro de un efecto, hay otras opciones:</strong></p>\n<ul>\n<li><strong>Puedes intentar mover esa funci\u00f3n fuera de tu componente</strong>. En ese caso, se garantiza que la funci\u00f3n no referencie ning\u00fana prop o estado, y adem\u00e1s no necesita estar en la lista de dependencias.</li>\n<li>Si la funci\u00f3n que est\u00e1s llamando es un c\u00e1lculo puro y es seguro llamarla mientras se renderiza, puedes <strong>llamarla fuera del efecto,</strong> y hacer que el efecto dependa del valor devuelto.</li>\n<li>C\u00f3mo \u00faltimo recurso, puedes <strong>a\u00f1adir una funci\u00f3n a las dependencias del efecto, pero <em>envolver su definici\u00f3n</em></strong> en el Hook <a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a>. Esto asegura que no cambie en cada renderizado a menos que <em>sus propias</em> dependencias tambi\u00e9n cambien:</li>\n</ul>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProductPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> productId <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// \u2705 Envolver con useCallback para evitar que cambie en cada renderizado</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> fetchProduct <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// ... Hace algo con productId ...</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>productId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 All useCallback dependencies are specified</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProductDetails</span></span> <span class=\"token attr-name\">fetchProduct</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fetchProduct<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ProductDetails</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> fetchProduct <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>fetchProduct<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Se especifican todas las dependencias de useEffect</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nota que en el ejemplo de arriba <strong>necesitamos</strong> mantener la funci\u00f3n en la lista de dependencias. Esto asegura que un cambio en la prop <code class=\"language-javascript\">productId</code> de <code class=\"language-javascript\">ProductPage</code> autom\u00e1ticamente desencadena una nueva obtenci\u00f3n de datos en el componente <code class=\"language-javascript\">ProductDetails</code>.</p>\n<h3 id=\"what-can-i-do-if-my-effect-dependencies-change-too-often\"><a class=\"anchor\" href=\"/react/hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often\"></a>\u00bfQu\u00e9 puedo hacer si las dependencias de un efecto cambian con mucha frecuencia? </h3>\n<p>A veces, tu efecto puede estar usando un estado que cambia con demasiada frecuencia. Puedes estar tentado a omitir ese estado de una lista de dependencias, pero eso usualmente conduce a errores:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Este efecto depende del estado `count`</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \ud83d\udd34 Error: `count` no se especifica como una dependencia</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El conjunto vac\u00edo de dependencias, <code class=\"language-javascript\">[]</code>, significa que el efecto solo se ejecutar\u00e1 cuando el componente se monte, y no en cada rerenderizado. El problema es que dentro del <em>callback</em> de <code class=\"language-javascript\">setInterval</code>, el valor de <code class=\"language-javascript\">count</code> no cambia, porque hemos creado una clausura con el valor de <code class=\"language-javascript\">count</code> en <code class=\"language-javascript\">0</code> como estaba cuando la funci\u00f3n <em>callback</em> del efecto se ejecut\u00f3. Cada segundo, esta funci\u00f3n llama a <code class=\"language-javascript\">setCount(0 + 1)</code>, por lo que el contador <code class=\"language-javascript\">count</code> nunca sube de 1.</p>\n<p>Especificar <code class=\"language-javascript\">[count]</code> como una lista de dependencias solucionar\u00eda el error, pero causar\u00eda que el intervalo se reiniciara con cada cambio. Efectivamente, cada <code class=\"language-javascript\">setInterval</code> tendr\u00eda una oportunidad para ejecutarse antes de limpiarse (de forma similar a <code class=\"language-javascript\">setTimeout</code>). Esto puede no ser deseable. Para solucionarlo, podemos usar la <a href=\"/react/hooks-reference#functional-updates\">forma de actualizaci\u00f3n funcional de <code class=\"language-javascript\">setState</code></a>. Nos permite especificar <em>c\u00f3mo</em> el estado necesita cambiar sin referenciar el estado <em>actual</em>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=&gt;</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Esto no depende en la variable `count` de afuera</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \u2705 Nuestro efecto no usa ninguna variable en el \u00e1mbito del componente</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(La identidad de la funci\u00f3n <code class=\"language-javascript\">setCount</code> se garantiza que sea estable, por lo que es seguro omitirla.)</p>\n<p>Ahora, el callback de <code class=\"language-javascript\">setInterval</code> se ejecuta una vez cada segundo, pero cada vez la llamada interna a <code class=\"language-javascript\">setCount</code> puede utilizar un valor actualizado para <code class=\"language-javascript\">count</code> (llamado <code class=\"language-javascript\">c</code> en este callback).</p>\n<p>En casos m\u00e1s complejos (como en el que un estado depende de otro estado), intenta mover la l\u00f3gica de actualizaci\u00f3n del estado fuera del efecto con el Hook <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a>. <a class=\"external-link\" href=\"https://adamrackis.dev/state-and-use-reducer/\">Este art\u00edculo</a> ofrece un ejemplo de c\u00f3mo puedes hacerlo. <strong>La identidad de la funci\u00f3n <code class=\"language-javascript\">dispatch</code> de <code class=\"language-javascript\">useReducer</code> es siempre estable</strong>, incluso si la funci\u00f3n reductora se declara dentro del componente y lee sus props.</p>\n<p>Como \u00faltimo recurso, si quieres algo como <code class=\"language-javascript\">this</code> en una clase, puedes <a href=\"/react/hooks-faq#is-there-something-like-instance-variables\">usar una ref</a> para tener una variable mutable. Luego puedes escribirla y leerla. Por ejemplo:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Mantener las \u00faltimas props en una ref.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> latestProps <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    latestProps<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Leer la \u00faltimas props en cualquier momento</span></span><span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>latestProps<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Este fecto nunca se vuelve a ejectuar</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>\u00danicamente haz esto si no puedes encontrar una mejor alternativa, dado que depender en mutaciones hace que los componenentes sean menos predecibles. Si hay un patr\u00f3n espec\u00edfico que no se traduce bien, <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/new\">abre una incidencia</a> con un ejemplo de c\u00f3digo ejecutable e intentaremos ayudar.</p>\n<h3 id=\"how-do-i-implement-shouldcomponentupdate\"><a class=\"anchor\" href=\"/react/hooks-faq#how-do-i-implement-shouldcomponentupdate\"></a>\u00bfC\u00f3mo implemento shouldComponentUpdate? </h3>\n<p>Puedes envolver un componente de funci\u00f3n con <code class=\"language-javascript\">React.memo</code>, para comparar sus props superficialmente.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Tu Componente</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No es un Hook porque no se compone como lo hacen los Hooks. <code class=\"language-javascript\">React.memo</code> es equivalente a <code class=\"language-javascript\">PureComponent</code>, pero solo compara las props. Puedes a\u00f1adir un segundo argumento para especificar una funci\u00f3n de comparaci\u00f3n personalizada, que reciba las props viejas y las nuevas. Si retorna <code class=\"language-javascript\">true</code>, se obvia la actualizaci\u00f3n.</p>\n<p><code class=\"language-javascript\">React.memo</code> no compara el estado porque no existe un \u00fanico objeto de estado para comparar. Pero puedes hacer los hijos puros tambi\u00e9n, o incluso <a href=\"/react/hooks-faq#how-to-memoize-calculations\">optimizar hijos individualmente con <code class=\"language-javascript\">useMemo</code></a>.</p>\n<h3 id=\"how-to-memoize-calculations\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-memoize-calculations\"></a>\u00bfC\u00f3mo memorizar (memoize) los c\u00e1lculos? </h3>\n<p>El Hook <a href=\"/react/hooks-reference#usememo\"><code class=\"language-javascript\">useMemo</code></a> te deja cachear c\u00e1lculos entre m\u00faltiples renders \u201crecordando\u201d el c\u00e1lculo anterior.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Este c\u00f3digo llama a <code class=\"language-javascript\">computeExpensiveValue(a, b)</code>. Pero si las dependencias <code class=\"language-javascript\">[a, b]</code> no han cambiado <code class=\"language-javascript\">useMemo</code> evita llamarle de nuevo y simplemente reusa el \u00faltimo valor que hab\u00eda retornado.</p>\n<p>Recuerda que la funci\u00f3n que se pasa a <code class=\"language-javascript\">useMemo</code> corre durante el renderizado. No hagas nada all\u00ed que no har\u00edas durante el renderizado. Por ejemplo, los efectos secundarios deber\u00edan estar en <code class=\"language-javascript\">useEffect</code>, no en <code class=\"language-javascript\">useMemo</code>.</p>\n<p><strong>Puedes depender de <code class=\"language-javascript\">useMemo</code> como una mejora de desempe\u00f1o, pero no como una garant\u00eda sem\u00e1ntica.</strong> En el futuro, React podr\u00eda escoger \u201colvidar\u201d algunos valores previamente memorizados y recalcularlos en el siguiente renderizado, por ejemplo para liberar memoria para los components que no se ven en pantalla. Escribe tu c\u00f3digo de manera que pueda funcionar sin <code class=\"language-javascript\">useMemo</code> \u2014 y luego a\u00f1\u00e1delo para mejorar el desempe\u00f1o. Para casos extra\u00f1os en los que un valor <em>nunca</em> deba ser recalculado, puedes inicializar una ref <a href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\">de manera diferida</a>.</p>\n<p>Convenientemente <code class=\"language-javascript\">useMemo</code> tambi\u00e9n te deja saltar re-renderizados costosos de un hijo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Solo re-renderizado si `a` cambia:</span>\n  <span class=\"token keyword\">const</span> child1 <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child1</span></span> <span class=\"token attr-name\">a</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Solo re-renderizado si `b` cambia:</span>\n  <span class=\"token keyword\">const</span> child2 <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child2</span></span> <span class=\"token attr-name\">b</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>child1<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>child2<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ten en cuenta que este m\u00e9todo no funcionar\u00e1 en un ciclo porque las llamadas a Hooks <a href=\"/react/hooks-rules\">no pueden</a> ser puestas dentro de ciclos. Pero puedes extraer un componente separado para el item de la lista, y llamar <code class=\"language-javascript\">useMemo</code> all\u00ed.</p>\n<h3 id=\"how-to-create-expensive-objects-lazily\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-create-expensive-objects-lazily\"></a>\u00bfC\u00f3mo crear objetos costosos de manera diferida (lazy)? </h3>\n<p><code class=\"language-javascript\">useMemo</code> te permite <a href=\"/react/hooks-faq#how-to-memoize-calculations\">memorizar un c\u00e1lculo costoso</a> si las dependencias son las mismas, sin embargo, solo funciona como un indicio, y no <em>garantiza</em> que el c\u00e1lculo no se correr\u00e1 de nuevo. Pero a veces necesitas estar seguro que un objeto s\u00f3lo se cree una vez.</p>\n<p><strong>El primer caso de uso com\u00fan es cuando crear el estado inicial es costoso:</strong></p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \u26a0\ufe0f createRows() se llama en cada renderizado</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">,</span> setRows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRows</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para evadir re-crear el estado inicial ignorado, podemos pasar una <strong>funci\u00f3n</strong> a <code class=\"language-javascript\">useState</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \u2705 createRows() solo se llama una vez.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">,</span> setRows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">createRows</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React solo llama a esta funci\u00f3n durante el primer renderizado. Mira el <a href=\"/react/hooks-reference#usestate\">manual de referencia de la API de <code class=\"language-javascript\">useState</code></a>.</p>\n<p><strong>Tambi\u00e9n podr\u00edas querer ocasionalmente evitar recrear el valor inicial de <code class=\"language-javascript\">useRef</code>.</strong> Por ejemplo, tal vez quieres asegurarte de que alguna instancia de una clase imperativa solo se cree una vez:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \u26a0\ufe0f IntersectionObserver se crea en cada renderizado</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>onIntersect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-javascript\">useRef</code> <strong>no</strong> acepta una sobrecarga especial con una funci\u00f3n como <code class=\"language-javascript\">useState</code>. En cambio, puedes crear tu propia funci\u00f3n que cree e inicialize el valor de manera diferida:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// \u2705 IntersectionObserver se crea de manera diferida una vez.</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>onIntersect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Cuando lo necesites, llama a getObserver()</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto ayuda a evitar crear un objeto costoso hasta que sea realmente necesario por primera vez. Si usas Flow o TypeScript, puedes darle a <code class=\"language-javascript\">getOberver</code> un tipo no nulo por conveniencia.</p>\n<h3 id=\"are-hooks-slow-because-of-creating-functions-in-render\"><a class=\"anchor\" href=\"/react/hooks-faq#are-hooks-slow-because-of-creating-functions-in-render\"></a>\u00bfSon los hooks lentos debido a la creaci\u00f3n de funciones en el render? </h3>\n<p>No. en los navegadores modernos, el desempe\u00f1o de los closures comparado con el de las clases no difiere de manera significativa, exceptuando casos extremos.</p>\n<p>Adicionalmente, considera que el dise\u00f1o de los Hooks es m\u00e1s eficiente en un par de sentidos:</p>\n<ul>\n<li>Evitan gran parte de la complejidad (trabajo extra) que las clases requieren, como el costo de crear instancias de clase y ligar (bind) los manejadores de eventos en el constructor.</li>\n<li><strong>El c\u00f3digo idi\u00f3matico usando Hooks no requiere el anidado profundo de componentes</strong> que es prevalente en bases de c\u00f3digo que utilizan componentes de orden superior, render props, y contexto. Con \u00e1rboles de componentes m\u00e1s peque\u00f1os, React tiene menos trabajo que realizar.</li>\n</ul>\n<p>Tradicionalmente, las preocupaciones de desempe\u00f1o alrededor de funciones inline en React han estado relacionadas con como al pasar nuevos callbacks en cada renderizado rompe optimizaciones con <code class=\"language-javascript\">shouldComponentUpdate</code> en los componentes hijos. Los Hooks pueden resolver este problema desde tres \u00e1ngulos diferentes.</p>\n<ul>\n<li>\n<p>El Hook <a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a> te permite mantener la misma referencia al callback entre re-renderizados, de manera que <code class=\"language-javascript\">shouldComponentUpdate</code> no se rompe.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// No cambia a menos que `a` o `b` cambien</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>El Hook <a href=\"/react/hooks-faq#how-to-memoize-calculations\"><code class=\"language-javascript\">useMemo</code></a> hace m\u00e1s f\u00e1cil controlar cuando se deber\u00edan actualizar hijos individualmente, reduciendo la necesidad de componentes puros.</li>\n<li>Finalmente el Hook <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> reduce la necesidad de pasar callbacks profundamente, como se explica en la siguiente secci\u00f3n.</li>\n</ul>\n<h3 id=\"how-to-avoid-passing-callbacks-down\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\"></a>\u00bfC\u00f3mo evitar pasar callbacks hacia abajo? </h3>\n<p>Nos hemos dado cuenta que la mayor\u00eda de personas no disfrutan pasar callbacks manualmente a trav\u00e9s de cada nivel del \u00e1rbol de componentes. A pesar de ser m\u00e1s expl\u00edcito, se puede sentir como mucha \u201cplomer\u00eda\u201d.</p>\n<p>En \u00e1rboles de componentes muy grandes, una alternativa que recomendamos es pasar una funci\u00f3n <code class=\"language-javascript\">dispatch</code> desde <a href=\"/react/hooks-reference#usereducer\"><code class=\"language-javascript\">useReducer</code></a> a trav\u00e9s del contexto (Context):</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> TodosDispatch <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodosApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Nota: `dispatch` no cambia entre re-renderizados</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>todosReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodosDispatch.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DeepTree</span></span> <span class=\"token attr-name\">todos</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">TodosDispatch.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Todo hijo en el \u00e1rbol dentro de <code class=\"language-javascript\">TodosApp</code> puede usar la funci\u00f3n <code class=\"language-javascript\">dispatch</code> para pasar acciones hacia arriba, a  <code class=\"language-javascript\">TodosApp</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">DeepChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Si queremos realizar una acci\u00f3n, podemos obtener dispatch del contexto.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>TodosDispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Add todo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto es m\u00e1s conveniente desde la perspectiva de mantenimiento (no hay necesidad de seguir re-enviando callbacks) y resuelve el problema de los callbacks por completo. Pasar <code class=\"language-javascript\">dispatch</code> de esta manera es el patr\u00f3n recomendado para actualizaciones profundas.</p>\n<p>Ten en cuenta que a\u00fan puedes decidir si quieres pasar el <em>estado</em> de la aplicaci\u00f3n hacia abajo como props (m\u00e1s expl\u00edcito) o como contexto (m\u00e1s conveniente para actualizaciones profundas). Si usas el contexto para pasar el estado hacia abajo tambi\u00e9n, usa dos tipos diferentes de contexto \u2014 el contexto de <code class=\"language-javascript\">dispatch</code> nunca cambia, as\u00ed que los componentes que lean de el no necesitan re-renderizarse a menos que tambi\u00e9n necesiten el estado de la aplicaci\u00f3n.</p>\n<h3 id=\"how-to-read-an-often-changing-value-from-usecallback\"><a class=\"anchor\" href=\"/react/hooks-faq#how-to-read-an-often-changing-value-from-usecallback\"></a>\u00bfC\u00f3mo leer un valor que cambia frecuentemente desde useCallback? </h3>\n<div class=\"blockquote\">\n<strong>Nota</strong>\n<p>Recomendamos <a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\">pasar <code class=\"language-javascript\">dispatch</code> a trav\u00e9s del contexto</a> en vez de callbacks individuales en las props. El siguiente m\u00e9todo s\u00f3lo se menciona para efectos de completitud y como una salida de emergencia.</p>\n</div>\n<p>En algunos extra\u00f1os casos puede que necesites memorizar un callback con <a href=\"/react/hooks-reference#usecallback\"><code class=\"language-javascript\">useCallback</code></a>, pero la memorizaci\u00f3n no funciona muy bien, debido a que la funci\u00f3n interna debe ser re-creada muy seguido. Si la funci\u00f3n que est\u00e1s memorizando es un manejador de eventos y no se usa durante el renderizado, puedes utilizar <a href=\"/react/hooks-reference#usecallback\">ref como una variable de estado</a> y guardar el \u00faltimo valor manualmente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> updateText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> textRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    textRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Se escribe en la referencia</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> handleSubmit <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> currentText <span class=\"token operator\">=</span> textRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span> <span class=\"token comment\">// See lee desde la ref</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>currentText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>textRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// No se recrea handleSubmit como [text] lo har\u00eda</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">updateText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ExpensiveTree</span></span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este es un patr\u00f3n relativamente complicado, pero muestra que puedes utilizar esta salida de emergencia como optimizaci\u00f3n de ser necesario. Es m\u00e1s f\u00e1cil de llevar si lo extraes a un Hook personalizado:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> updateText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Ser\u00e1 memorizado incluso si `text` cambia:</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> handleSubmit <span class=\"token operator\">=</span> <span class=\"token function\">useEventCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">updateText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ExpensiveTree</span></span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useEventCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> dependencies</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot call an event handler while rendering.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>dependencies<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ref<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En cualquier caso, <strong>no recomendamos este patr\u00f3n</strong> y solo lo mostramos aqu\u00ed para efectos de completitud. En cambio, es preferible <a href=\"/react/hooks-faq#how-to-avoid-passing-callbacks-down\">evitar pasar callbacks profundamente</a>.</p>\n<h2 id=\"under-the-hood\"><a class=\"anchor\" href=\"/react/hooks-faq#under-the-hood\"></a>Bajo el cap\u00f3 </h2>\n<h3 id=\"how-does-react-associate-hook-calls-with-components\"><a class=\"anchor\" href=\"/react/hooks-faq#how-does-react-associate-hook-calls-with-components\"></a>\u00bfC\u00f3mo asocia React las llamadas a los Hooks con Componentes? </h3>\n<p>React est\u00e1 pendiente del componente que actualmente se est\u00e1 renderizando. Gracias a las <a href=\"/react/hooks-rules\">Reglas de los Hooks</a>, sabemos que los Hooks s\u00f3lo son llamados desde componente de React (o Hooks personalizados \u2014 los cuales tambi\u00e9n s\u00f3lo son llamados desde componentes de React).</p>\n<p>Hay una lista interna de \u201cceldas de memoria\u201d asociadas con cada componente. Son simplemente objetos de JavaScript donde podemos poner algunos datos. Cuando llamas un Hook como <code class=\"language-javascript\">useState()</code>, este lee la celda actual (o la inicializa durante el primer llamado), y luego mueve el puntero a la siguiente. As\u00ed es como llamados m\u00faltiples a <code class=\"language-javascript\">useState()</code> obtienen estados locales independientes.</p>\n<h3 id=\"what-is-the-prior-art-for-hooks\"><a class=\"anchor\" href=\"/react/hooks-faq#what-is-the-prior-art-for-hooks\"></a>\u00bfCu\u00e1les son los antecedentes de los Hooks? </h3>\n<p>Los Hook sintetizan ideas de muchas fuentes diferentes:</p>\n<ul>\n<li>Nuestros viejos experimentos con APIs funcionales en el repositorio <a class=\"external-link\" href=\"https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State\">react-future</a>.</li>\n<li>Los experimentos de la comunidad con las APIs de render props, incluyendo <a class=\"external-link\" href=\"https://github.com/reactions/component\">Reactions Component</a> de <a class=\"external-link\" href=\"https://github.com/ryanflorence\">Ryan Florence</a>.</li>\n<li><a class=\"external-link\" href=\"https://gist.github.com/trueadm/17beb64288e30192f3aa29cad0218067\">La palabra clave <code class=\"language-javascript\">adopt</code></a> de <a class=\"external-link\" href=\"https://github.com/trueadm\">Dominic Gannaway</a>, que se propuso como sintaxis azucarada para las render props.</li>\n<li>Las variables y celdas de estado en <a class=\"external-link\" href=\"http://displayscript.org/introduction.html\">DisplayScript</a>.</li>\n<li><a class=\"external-link\" href=\"https://reasonml.github.io/reason-react/docs/en/state-actions-reducer.html\">Los componentes Reductores</a> en ReasonReact.</li>\n<li><a class=\"external-link\" href=\"http://reactivex.io/rxjs/class/es6/Subscription.js~Subscription.html\">Las suscripciones</a> en Rx.</li>\n<li><a class=\"external-link\" href=\"https://github.com/ocamllabs/ocaml-effects-tutorial#2-effectful-computations-in-a-pure-setting\">Los efectos algebraicos</a> en Multicore OCaml.</li>\n</ul>\n<p><a class=\"external-link\" href=\"https://github.com/sebmarkbage\">Sebastian Markb\u00e5ge</a> propuso el dise\u00f1o original de los Hooks, luego refinado por <a class=\"external-link\" href=\"https://github.com/acdlite\">Andrew Clark</a>, <a class=\"external-link\" href=\"https://github.com/sophiebits\">Sophie Alpert</a>, <a class=\"external-link\" href=\"https://github.com/trueadm\">Dominic Gannaway</a>, y otros miembros del equipo de React.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/hooks-faq.md\">Edit this page</a></p></div></article>", "path": "/react/hooks-faq", "nav": ["/react/hooks-reference", "/react/testing"]}]}, {"key": "Pruebas", "values": [{"key": "Visi\u00f3n general de las pruebas", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Puedes probar un componente de React similar a como pruebas otro c\u00f3digo JavaScript.</p>\n<p>Hay varias formas de probar un componente React, la mayor\u00eda se agrupan en dos categor\u00edas:</p>\n<ul>\n<li><strong>Renderizado del \u00e1rbol de componentes</strong> en un entorno de prueba simplificado y comprobando sus salidas.</li>\n<li><strong>Ejecutando la aplicaci\u00f3n completa</strong> en un entorno de prueba m\u00e1s realista utilizando un navegador web (m\u00e1s conocido como pruebas \u201cend-to-end\u201d).</li>\n</ul>\n<p>Esta secci\u00f3n de la documentaci\u00f3n est\u00e1 enfocada en estrategias de prueba para el primer caso. Mientras las pruebas de tipo \u201cend-to-end\u201d pueden ser muy \u00fatiles para prever regresiones a flujos de trabajos importantes, estas pruebas no est\u00e1n relacionadas con los componentes React particularmente y est\u00e1n fuera del alcance de esta secci\u00f3n.</p>\n<h3 id=\"tradeoffs\"><a class=\"anchor\" href=\"/react/testing#tradeoffs\"></a>Concesiones </h3>\n<p>Cuando est\u00e1s eligiendo las herramientas para realizar las pruebas, vale la pena considerar algunas Concesiones:</p>\n<ul>\n<li><strong>Velocidad de iteraci\u00f3n vs Entorno realista:</strong> Algunas herramientas ofrecen un ciclo de retroalimentaci\u00f3n muy r\u00e1pido entre hacer un cambio y ver el resultado, pero no modelan el comportamiento del navegador con precisi\u00f3n. Otras herramientas pueden usar un entorno de navegador real, pero reducen la velocidad de iteraci\u00f3n y son menos confiables en un servidor de integraci\u00f3n continua.</li>\n<li><strong>Cuanto abarcar:</strong> Cuando pruebas componentes la diferencia entre Prueba Unitaria y Prueba de Integraci\u00f3n puede ser borrosa. Si est\u00e1s probando un formulario, se deben probar los botones del formulario en esta prueba? O el componente del bot\u00f3n debe tener su propia suit de pruebas? Deber\u00eda la refactorizaci\u00f3n del bot\u00f3n afectar el resultado de las pruebas del formulario?</li>\n</ul>\n<p>Diferentes respuestas pueden funcionar para diferentes equipos y diferentes productos.</p>\n<h3 id=\"tools\"><a class=\"anchor\" href=\"/react/testing#tools\"></a>Herramientas recomendadas </h3>\n<p><strong><a class=\"external-link\" href=\"https://facebook.github.io/jest/\">Jest</a></strong> Es una biblioteca de JavaScript para ejecuci\u00f3n de pruebas que permite acceder al DOM mediante <a href=\"/react/testing-environments#mocking-a-rendering-surface\"><code class=\"language-javascript\">jsdom</code></a>. Aunque jsdom solo se aproxima a como realmente los navegadores web trabajan, usualmente es suficiente para probar componentes de React. Jest brinda una gran velocidad de iteraci\u00f3n combinada con potentes funcionalidades como simular <a href=\"/react/testing-environments#mocking-modules\">m\u00f3dulos</a> y <a href=\"/react/testing-environments#mocking-timers\">temporizadores</a>, esto permite tener mayor control sobre c\u00f3mo se ejecuta el c\u00f3digo.</p>\n<p><strong><a class=\"external-link\" href=\"https://testing-library.com/react\">Biblioteca de Pruebas para React</a></strong> es una biblioteca de utilidades que te ayudan a probar componentes React sin depender de los detalles de su implementaci\u00f3n. Este enfoque simplifica la refactorizaci\u00f3n y tambi\u00e9n lo empuja hacia las mejores pr\u00e1cticas de accesibilidad, aunque no proporciona una forma de renderizar \u201csuperficialmente\u201d un componente sin sus hijos, Jest te permite hacerlo  gracias a su funcionalidad para <a href=\"/react/testing-recipes#mocking-modules\">simular</a>.</p>\n<h3 id=\"learn-more\"><a class=\"anchor\" href=\"/react/testing#learn-more\"></a>M\u00e1s Informaci\u00f3n </h3>\n<p>Esta secci\u00f3n est\u00e1 dividida en dos p\u00e1ginas:</p>\n<ul>\n<li><a href=\"/react/testing-recipes\">Recetas</a>: Patrones comunes cuando escribes pruebas para componentes React.</li>\n<li><a href=\"/react/testing-environments\">Entornos</a>: Que debes considerar cuando est\u00e9s configurando un entorno de pruebas para componentes React.</li>\n</ul></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/testing.md\">Edit this page</a></p></div></article>", "path": "/react/testing", "nav": ["/react/hooks-faq", "/react/testing-recipes"]}, {"key": "Recetas de pruebas", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Patrones comunes de pruebas para componentes de React.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Esta p\u00e1gina asume que est\u00e1s usando <a class=\"external-link\" href=\"https://jestjs.io/\">Jest</a> como programa de ejecuci\u00f3n de pruebas. Si est\u00e1s usando uno distinto, puede que necesites ajustar la API, pero la forma general de la soluci\u00f3n probablemente ser\u00e1 la misma. Lee m\u00e1s detalles sobre como configurar un entorno de pruebas en la p\u00e1gina de <a href=\"/react/testing-environments\">Entornos de prueba</a>.</p>\n</div>\n<p>En esta p\u00e1gina utilizaremos principalmente componentes de funci\u00f3n. Sin embargo, estas estrategias de prueba no dependen de detalles de implementaci\u00f3n y funcionan igualmente en componentes de clase.</p>\n<ul>\n<li><a href=\"/react/testing-recipes#setup--teardown\">Configuraci\u00f3n/limpieza</a></li>\n<li><a href=\"/react/testing-recipes#act\"><code class=\"language-javascript\">act()</code></a></li>\n<li><a href=\"/react/testing-recipes#rendering\">Renderizado</a></li>\n<li><a href=\"/react/testing-recipes#data-fetching\">Obtenci\u00f3n de datos</a></li>\n<li><a href=\"/react/testing-recipes#mocking-modules\">Simulaci\u00f3n de m\u00f3dulos</a></li>\n<li><a href=\"/react/testing-recipes#events\">Eventos</a></li>\n<li><a href=\"/react/testing-recipes#timers\">Temporizadores</a></li>\n<li><a href=\"/react/testing-recipes#snapshot-testing\">Pruebas de instant\u00e1nea</a></li>\n<li><a href=\"/react/testing-recipes#multiple-renderers\">M\u00faltiples renderizadores</a></li>\n<li><a href=\"/react/testing-recipes#something-missing\">\u00bfFalta algo?</a></li>\n</ul>\n\n<h3 id=\"setup--teardown\"><a class=\"anchor\" href=\"/react/testing-recipes#setup--teardown\"></a>Configuraci\u00f3n/limpieza </h3>\n<p>Para cada prueba, usualmente queremos renderizar nuestro \u00e1rbol de React en un elemento del DOM que est\u00e9 asociado a <code class=\"language-javascript\">document</code>. Esto es importante para poder recibir eventos del DOM. Cuando la prueba termina, queremos \u201climpiar\u201d y desmontar el \u00e1rbol de <code class=\"language-javascript\">document</code>.</p>\n<p>Una forma com\u00fan de hacerlo es usar un par de bloques <code class=\"language-javascript\">beforeEach</code> y <code class=\"language-javascript\">afterEach</code> de manera tal que siempre ejecuten y separen los efectos de la prueba misma:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar un elemento del DOM como objetivo del renderizado</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpieza al salir</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Puedes usar un patr\u00f3n diferente, pero ten en cuenta que queremos ejecutar la limpieza <em>incluso si falla una prueba</em>. De otro modo, las pruebas pueden tener \u201cfugas\u201d y una prueba puede cambiar el comportamiento de otra prueba. Eso dificulta la tarea de depurarlas.</p>\n\n<h3 id=\"act\"><a class=\"anchor\" href=\"/react/testing-recipes#act\"></a><code class=\"language-javascript\">act()</code> </h3>\n<p>Cuando se escriben pruebas de interfaz de usuario, tareas como el renderizado, los eventos de usuario, o la obtenci\u00f3n de datos pueden considerarse \u201cunidades\u201d de interacci\u00f3n con la interfaz de usuario. <code class=\"language-javascript\">react-dom/test-utils</code> proporciona una utilidad llamada <a href=\"/react/test-utils#act\"><code class=\"language-javascript\">act()</code></a> que asegura que todas las actualizaciones relacionadas con estas \u201cunidades\u201d hayan sido procesadas y aplicadas al DOM antes de que hagas cualquier afirmaci\u00f3n:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// renderizar componentes</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// hacer afirmaciones</span></code></pre></div>\n<p>Esto ayuda a que tus pruebas se ejecutan de una manera m\u00e1s cercana a la experiencia de un usuario real que usa tu aplicaci\u00f3n. El resto de estos ejemplos utilizan <code class=\"language-javascript\">act()</code> para asegurar estas garant\u00edas.</p>\n<p>Utilizar <code class=\"language-javascript\">act()</code> directamente puede parecerte demasiado verboso. Para evitar algo de este c\u00f3digo repetitivo, puedes usar una biblioteca como <a class=\"external-link\" href=\"https://testing-library.com/react\">React Testing Library</a>, cuyas utilidades est\u00e1n envueltas con <code class=\"language-javascript\">act()</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>El nombre <code class=\"language-javascript\">act</code> viene del patr\u00f3n <a class=\"external-link\" href=\"http://wiki.c2.com/?ArrangeActAssert\">Arrange-Act-Assert</a>.</p>\n</div>\n\n<h3 id=\"rendering\"><a class=\"anchor\" href=\"/react/testing-recipes#rendering\"></a>Renderizado </h3>\n<p>Com\u00fanmente, te gustar\u00eda probar si un componente se renderiza correctamente para unas props dadas. Considera un componente simple que renderiza un mensaje basado en una prop:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// hello.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hey, stranger</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Podemos escribir una prueba para este componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// hello.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">\"./hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar un elemento del DOM como objetivo del renderizado</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpieza al salir</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renderiza con o sin nombre\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hey, stranger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Jenny<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Jenny!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Margaret<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Margaret!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"data-fetching\"><a class=\"anchor\" href=\"/react/testing-recipes#data-fetching\"></a>Obtenci\u00f3n de datos </h3>\n<p>En lugar de llamar APIs reales en todas tus pruebas, puedes simular peticiones con datos falsos. Simular peticiones con datos \u201cfalsos\u201d previene pruebas con resultados impredecibles debido a un <em>backend</em> no disponible y permite ejecutarlas m\u00e1s r\u00e1pidamente. Nota: a\u00fan puedes querer ejecutar un subconjunto de pruebas usando un framework de <a href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\">\u201cextremo a extremo\u201d</a> que te diga que toda tu aplicaci\u00f3n est\u00e1 funcionando correctamente en su conjunto.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// user.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"loading...\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"> years old\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      lives in </span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Podemos escribir pruebas para este componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// user.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">\"./user\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar un elemento del DOM como objetivo del renderizado</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpieza al salir</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renderiza datos de usuario\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> fakeUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joni Baez\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token string\">\"32\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123, Charming Avenue\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span><span class=\"gatsby-highlight-code-line\">    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function-variable function\">json</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// Usa la versi\u00f3n as\u00edncrona de act para aplicar promesas resueltas</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"summary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// elimina la simulaci\u00f3n para asegurar que las pruebas est\u00e9n completamente aisladas</span></span><span class=\"gatsby-highlight-code-line\">  global<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">.</span><span class=\"token function\">mockRestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"mocking-modules\"><a class=\"anchor\" href=\"/react/testing-recipes#mocking-modules\"></a>Simulaci\u00f3n de m\u00f3dulos </h3>\n<p>Algunos m\u00f3dulos puede que no funcionen bien dentro de un entorno de pruebas, o puede que no sean esenciales para la prueba misma. Simular estos m\u00f3dulos con reemplazos \u201cde imitaci\u00f3n\u201d puede hacer m\u00e1s f\u00e1cil la escritura de pruebas para tu propio c\u00f3digo.</p>\n<p>Considera un componente <code class=\"language-javascript\">Contacto</code> que incluye un componente <code class=\"language-javascript\">GoogleMap</code> de terceros:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// map.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LoadScript<span class=\"token punctuation\">,</span> GoogleMap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-google-maps\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoadScript</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script-loader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">googleMapsApiKey</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>YOUR_API_KEY<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GoogleMap</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example-map<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LoadScript</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// contact.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Map <span class=\"token keyword\">from</span> <span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Contact</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Contact </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> via</span><span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"mailto:\"</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          email\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        or on their </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          website\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">.\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span></span> <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si no queremos cargar este componente en nuestras pruebas, podemos simular la dependencia misma como un componente simulado y correr nuestras pruebas:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// contact.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Contact <span class=\"token keyword\">from</span> <span class=\"token string\">\"./contact\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MockedMap <span class=\"token keyword\">from</span> <span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./map\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DummyMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>lat<span class=\"token punctuation\">}</span><span class=\"token plain-text\">:</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">.</span>long<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar un elemento del DOM como objetivo del renderizado</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpieza al salir</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debe renderizar informaci\u00f3n de contacto\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> center <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">lat</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">long</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Contact</span></span>\n        <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Joni Baez<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">email</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test@example.com<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">site</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://test.com<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">center</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>center<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n      container\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid='email']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mailto:test@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"site\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://test.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"map\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"0:0\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"events\"><a class=\"anchor\" href=\"/react/testing-recipes#events\"></a>Eventos </h3>\n<p>Recomendamos enviar eventos reales del DOM en elementos del DOM y luego hacer afirmaciones sobre el resultado. Considera el componente <code class=\"language-javascript\">Toggle</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// toggle.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Toggle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>previousState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Turn off\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Podr\u00edamos escribir pruebas para este componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// toggle.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Toggle <span class=\"token keyword\">from</span> <span class=\"token string\">\"./toggle\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar un elemento del DOM como objetivo del renderizado</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpiar al salir</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cambia el valor cuando se le hace clic\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onChange <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toggle</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// encuentra el elemento  del bot\u00f3n y dispara algunos clics en \u00e9l</span>\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid=toggle]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn off\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      button<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Turn on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Diferentes eventos del DOM y sus propiedades se describen en <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/API/MouseEvent\">MDN</a>. Nota que necesitas pasar <code class=\"language-javascript\">{ bubbles: true }</code> en cada evento que creas para que llegue al agente de escucha (<em>listener</em>) de React, porque React autom\u00e1ticamente delega los eventos a la ra\u00edz.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>React Testing Library ofrece una <a class=\"external-link\" href=\"https://testing-library.com/docs/dom-testing-library/api-events\">utilidad m\u00e1s concisa</a> para disparar eventos.</p>\n</div>\n\n<h3 id=\"timers\"><a class=\"anchor\" href=\"/react/testing-recipes#timers\"></a>Temporizadores </h3>\n<p>Tu c\u00f3digo puede usar funciones basadas en temporizadores como <code class=\"language-javascript\">setTimeout</code> para programar m\u00e1s trabajo en el futuro. En este ejemplo, un panel de selecci\u00f3n m\u00faltiple espera por una selecci\u00f3n y avanza, terminando si una selecci\u00f3n no se ha hecho en 5 segundos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// card.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> timeoutID <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>onSelect<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">choice</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">data-testid</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>choice<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Podemos escribir pruebas para este componente aprovechando las <a class=\"external-link\" href=\"https://jestjs.io/docs/en/timer-mocks\">simulaciones de temporizadores de Jest</a>, y probando los diferentes estados en que puede estar.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// card.test.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> Card <span class=\"token keyword\">from</span> <span class=\"token string\">\"./card\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar un elemento del DOM como objetivo del renderizado</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpiar al salir</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">useRealTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debe seleccionar null despu\u00e9s de acabarse el tiempo\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// adelantarse 100ms en el tiempo</span></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// y luego adelantarse 5 segundos</span></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debe limpiar al eliminarse\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// desmonta la aplicaci\u00f3n</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jest<span class=\"token punctuation\">.</span><span class=\"token function\">advanceTimersByTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debe aceptar selecciones\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onSelect <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">onSelect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSelect<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    container\n      <span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid='2']\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bubbles</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Puedes escribir temporizadores falsos solo para algunas pruebas. Arriba, los habilitamos llamando a <code class=\"language-javascript\">jest.useFakeTimers()</code>. La mayor ventaja que proporcionan es que tu prueba no tiene que esperar realmente cinco segundos para ejecutarse, y tampoco hay necesidad de hacer el c\u00f3digo del componente m\u00e1s complejo solo para probarlo.</p>\n\n<h3 id=\"snapshot-testing\"><a class=\"anchor\" href=\"/react/testing-recipes#snapshot-testing\"></a>Pruebas de instant\u00e1nea </h3>\n<p>Frameworks como Jest tambi\u00e9n permiten guardar \u201cinstant\u00e1neas\u201d de los datos con <a class=\"external-link\" href=\"https://jestjs.io/docs/en/snapshot-testing\"><code class=\"language-javascript\">toMatchSnapshot</code> / <code class=\"language-javascript\">toMatchInlineSnapshot</code></a>. Con estas, podemos \u201cguardar\u201d el resultado del componente renderizado y asegurarnos que un cambio a \u00e9l tiene que hacerse expl\u00edcitamente como un cambio a la instant\u00e1nea.</p>\n<p>En este ejemplo, renderizamos un componente y formateamos el HTML renderizado con el paquete <a class=\"external-link\" href=\"https://www.npmjs.com/package/pretty\"><code class=\"language-javascript\">pretty</code></a>, antes de guardarlo como una instant\u00e1nea en l\u00ednea:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token comment\">// hello.test.js, again</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> unmountComponentAtNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> pretty <span class=\"token keyword\">from</span> <span class=\"token string\">\"pretty\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">\"./hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// configurar un elemento del DOM como objetivo del renderizado</span>\n  container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// limpiar al salir</span>\n  <span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debe renderizar un saludo\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... jest lo llena autom\u00e1ticamente ... */</span></span>\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Jenny<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... jest lo llena autom\u00e1ticamente ... */</span>\n\n  <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Margaret<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">pretty</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ... jest lo llena autom\u00e1ticamente ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Generalmente es mejor hacer afirmaciones m\u00e1s espec\u00edficas que usar instant\u00e1neas. Este tipo de pruebas incluyen detalles de implementaci\u00f3n, por lo que pueden romperse con facilidad y los equipos pueden desensibilizarse ante las fallas de las instant\u00e1neas. <a href=\"/react/testing-recipes#mocking-modules\">Simular algunos componentes hijos</a> de manera selectiva puede ayudar a reducir el tama\u00f1o de las instant\u00e1neas y mantenerlas m\u00e1s legibles para las revisiones de c\u00f3digo.</p>\n\n<h3 id=\"multiple-renderers\"><a class=\"anchor\" href=\"/react/testing-recipes#multiple-renderers\"></a>M\u00faltiples renderizadores </h3>\n<p>En casos poco comunes, puedes ejecutar una prueba en un componente que utiliza m\u00faltiples renderizadores. Por ejemplo, puedes ejecutar pruebas de instant\u00e1nea en un componente con <code class=\"language-javascript\">react-test-renderer</code>, que internamente utiliza <code class=\"language-javascript\">render</code> de <code class=\"language-javascript\">react-dom</code> dentro de un componente hijo para renderizar alg\u00fan contenido. En este escenario, puedes envolver las actualizaciones con los <code class=\"language-javascript\">act()</code>s correspondientes a sus renderizadores.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token keyword\">as</span> domAct <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token keyword\">as</span> testAct<span class=\"token punctuation\">,</span> create <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-test-renderer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">let</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token function\">domAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">testAct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    root <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<h3 id=\"something-missing\"><a class=\"anchor\" href=\"/react/testing-recipes#something-missing\"></a>\u00bfFalta algo? </h3>\n<p>Si alg\u00fan escenario com\u00fan no est\u00e1 cubierto, por favor, h\u00e1znoslo saber en el <a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org/issues\">servicio de seguimiento de incidencias</a> del sitio de la documentaci\u00f3n.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/testing-recipes.md\">Edit this page</a></p></div></article>", "path": "/react/testing-recipes", "nav": ["/react/testing", "/react/testing-environments"]}, {"key": "Entornos de prueba", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><!-- This document is intended for folks who are comfortable with JavaScript, and have probably written tests with it. It acts as a reference for the differences in testing environments for React components, and how those differences affect the tests that they write. This document also assumes a slant towards web-based react-dom components, but has notes for other renderers. -->\n<p>Este documento repasa los factores que pueden afectar tu entorno y contiene recomendaciones para algunos escenarios.</p>\n<h3 id=\"test-runners\"><a class=\"anchor\" href=\"/react/testing-environments#test-runners\"></a>Bibliotecas de ejecuci\u00f3n de pruebas </h3>\n<p>Bibliotecas para ejecuci\u00f3n de pruebas como <a class=\"external-link\" href=\"https://jestjs.io/\">Jest</a>, <a class=\"external-link\" href=\"https://mochajs.org/\">mocha</a>, <a class=\"external-link\" href=\"https://github.com/avajs/ava\">ava</a> permiten escribir conjuntos de pruebas en JavasScript regular y correrlas como parte de tu proceso de desarrollo. Adicionalmente, los suits de pruebas son ejecutados como parte de integraciones continuas.</p>\n<ul>\n<li>Jest es altamente compatible con proyectos de React, soportando caracter\u00edsticas como <a href=\"/react/testing-environments#mocking-modules\">modulos simulados</a> y <a href=\"/react/testing-environments#mocking-timers\">temporizadores</a>, y soporte <a href=\"/react/testing-environments#mocking-a-rendering-surface\"><code class=\"language-javascript\">jsdom</code></a>. <strong>Si usas Create React App, <a class=\"external-link\" href=\"https://facebook.github.io/create-react-app/docs/running-tests\">Jest ya esta incluido para usar f\u00e1cilmente</a> con una configuracion por defecto \u00fatil.</strong></li>\n<li>Bibliotecas como <a class=\"external-link\" href=\"https://mochajs.org/#running-mocha-in-the-browser\">mocha</a> funcionan bien en un entorno de navegador real, y puede ayudar con pruebas que necesiten de ello expl\u00edcitamente.</li>\n<li>Las pruebas \u201cend-to-end\u201d son usadas para probar flujos m\u00e1s largos a trav\u00e9s de m\u00faltiples p\u00e1ginas y que requieren una <a href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\">configuraci\u00f3n diferente</a>.</li>\n</ul>\n<h3 id=\"mocking-a-rendering-surface\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-a-rendering-surface\"></a>Simulando una superficie de renderizado </h3>\n<p>Las pruebas usualmente son ejecutadas en un entorno sin acceso a una superficie de renderizado real como un navegador. Para estos entornos, recomendamos simular el navegador usando <a class=\"external-link\" href=\"https://github.com/jsdom/jsdom\"><code class=\"language-javascript\">jsdom</code></a>, una implementaci\u00f3n de navegador que se ejecuta sobre Node.js.</p>\n<p>En la mayor\u00eda de los casos, <code class=\"language-javascript\">jsdom</code> se comporta como lo har\u00eda un navegador normal, pero no tiene caracter\u00edsticas como <a class=\"external-link\" href=\"https://github.com/jsdom/jsdom#unimplemented-parts-of-the-web-platform\">navegaci\u00f3n y layout</a>. A\u00fan as\u00ed es \u00fatil para la mayor\u00eda de las pruebas de componentes web, al correr m\u00e1s r\u00e1pido por no tener que iniciar un navegador para cada prueba. Tambi\u00e9n se ejecuta en el mismo proceso que tus pruebas, as\u00ed que puedes escribir c\u00f3digo para examinar y comprobar resultados en el DOM renderizado.</p>\n<p>Tal como en un navegador real, jsdom nos permite simular interacciones del usuario; las pruebas pueden llamar eventos en nodos del DOM, y entonces observar y comprobar los efectos resultantes de estas acciones <a href=\"/react/testing-recipes#events\"><small>(ejemplo)</small></a>.</p>\n<p>Una gran parte de pruebas a la interfaz gr\u00e1fica pueden ser escritas con la configuraci\u00f3n descrita m\u00e1s arriba: usando Jest como biblioteca de prueba, renderizando en jsdom y con interacciones especificas del usuario como una secuencia de eventos del navegador, iniciadas por la funci\u00f3n <code class=\"language-javascript\">act()</code> <a href=\"/react/testing-recipes\"><small>(ejemplo)</small></a>. Por ejemplo, muchas de las propias pruebas de React est\u00e1n escritas con esta combinaci\u00f3n.</p>\n<p>Si estas escribiendo una biblioteca que prueba principalmente un comportamiento espec\u00edfico del navegador y requiere comportamiento nativo del navegador como el layout o inputs reales, puedes usar un framework como <a class=\"external-link\" href=\"https://mochajs.org/\">mocha.</a></p>\n<p>En un entorno donde <em>no puedes</em> simular el DOM (por ejemplo, probando componentes de React Native en Node.js), podr\u00edas usar <a href=\"/react/test-utils#simulate\">simuladores de eventos</a> para simular interacciones con elementos. De manera alternativa, tambi\u00e9n puedes usar el <em>helper</em> <code class=\"language-javascript\">fireEvent</code> de <a class=\"external-link\" href=\"https://testing-library.com/docs/react-native-testing-library/intro\"><code class=\"language-javascript\">@testing-library/react-native</code></a>.</p>\n<p>Frameworks como <a class=\"external-link\" href=\"https://www.cypress.io/\">Cypress</a>, <a class=\"external-link\" href=\"https://pptr.dev/\">Puppeteer</a> y <a class=\"external-link\" href=\"https://www.seleniumhq.org/projects/webdriver/\">webdriver</a> son \u00fatiles para ejecutar pruebas <a href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\">\u201cend-to-end\u201d</a>.</p>\n<h3 id=\"mocking-functions\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-functions\"></a>Simulando funciones </h3>\n<p>Cuando se est\u00e1n escribiendo pruebas, nos gustar\u00eda simular partes de nuestro c\u00f3digo que no tienen un equivalente en nuestro entorno de pruebas (por ejemplo revisar el estado de <code class=\"language-javascript\">navigator.onLine</code> dentro de Node.js). Las pruebas tambi\u00e9n podr\u00edan espiar algunas funciones y observar como otras partes de la prueba interact\u00faan con ellas. Es entonces \u00fatil ser capaz de simular selectivamente estas funciones con versiones m\u00e1s amigables para las pruebas.</p>\n<p>Esto es especialmente \u00fatil en los llamados para obtener datos. Es preferible usar datos \u201cfalsos\u201d para estas pruebas para evitar la lentitud y lo engorroso de llamados a endpoints API reales <a href=\"/react/testing-recipes#data-fetching\"><small>(ejemplo)</small></a>. Esto ayuda a que las pruebas sean predecibles. Bibliotecas como <a class=\"external-link\" href=\"https://jestjs.io/\">Jest</a> y <a class=\"external-link\" href=\"https://sinonjs.org/\">sinon</a>, entre otras, soportan funciones simuladas. Para pruebas \u201cend-to-end\u201d, simular una red puede ser m\u00e1s complicado, pero tambi\u00e9n podr\u00edas querer probar los endpoints API reales en ellos igualmente.</p>\n<h3 id=\"mocking-modules\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-modules\"></a>Simulando m\u00f3dulos </h3>\n<p>Algunos componentes tienen dependencias de m\u00f3dulos que quiz\u00e1s no funcionen bien en entornos de prueba, o no son necesarios para nuestras pruebas. Puede ser \u00fatil simular de manera selectiva estos m\u00f3dulos con reemplazos adecuados <a href=\"/react/testing-recipes#mocking-modules\"><small>(example)</small></a>.</p>\n<p>En Node.js, bibliotecas como Jest soportan la <a class=\"external-link\" href=\"https://jestjs.io/docs/en/manual-mocks\">simulaci\u00f3n de m\u00f3dulos</a>. Tambi\u00e9n podr\u00edas usar bibliotecas como <a class=\"external-link\" href=\"https://www.npmjs.com/package/mock-require\"><code class=\"language-javascript\">mock-require</code></a>.</p>\n<h3 id=\"mocking-timers\"><a class=\"anchor\" href=\"/react/testing-environments#mocking-timers\"></a>Simulando temporizadores </h3>\n<p>Hay componentes que pudiesen estar usando funciones basadas en el tiempo como <code class=\"language-javascript\">setTimeout</code>, <code class=\"language-javascript\">setInterval</code>, or <code class=\"language-javascript\">Date.now</code>. En entornos de prueba, puede ser de ayuda simular estas funciones con reemplazos que te permitan \u201cavanzar\u201d manualmente el tiempo. \u00a1Esto es excelente para asegurar que tus pruebas se ejecuten r\u00e1pidamente! Las pruebas que dependen de temporizadores a\u00fan podr\u00edan ser resueltas en orden, pero mas r\u00e1pido <a href=\"/react/testing-recipes#timers\"><small>(ejemplo)</small></a>. La mayor\u00eda de los frameworks, incluyendo <a class=\"external-link\" href=\"https://jestjs.io/docs/en/timer-mocks\">Jest</a>, <a class=\"external-link\" href=\"https://sinonjs.org/releases/latest/fake-timers\">sinon</a> y <a class=\"external-link\" href=\"https://github.com/sinonjs/lolex\">lolex</a>, te permiten simular temporizadores en tus pruebas.</p>\n<p>Algunas veces, podr\u00edas no querer simular los temporizadores. Por ejemplo, quiz\u00e1s est\u00e1s probando una animaci\u00f3n, o interactuando con un endpoint que es sensitivo al tiempo (como una API limitadora de peticiones). Bibliotecas con simuladores de temporizadores te permite habilitar y deshabilitarlas en base a pruebas o suits, de forma que t\u00fa puedas elegir como estas pruebas ser\u00e1n ejecutadas.</p>\n<h3 id=\"end-to-end-tests-aka-e2e-tests\"><a class=\"anchor\" href=\"/react/testing-environments#end-to-end-tests-aka-e2e-tests\"></a>Pruebas \u201cend-to-end\u201d </h3>\n<p>Las pruebas \u201cend-to-end\u201d son \u00fatiles para flujos m\u00e1s largos, especialmente si estos son cr\u00edticos para tu negocio (como los pagos o registros). Para estas pruebas, probablemente quisieras probar c\u00f3mo un navegador real renderiza toda la aplicaci\u00f3n, solicita datos de un endpoint API real, usa sesiones y cookies, navega entre diferentes enlaces. Podr\u00edas tambi\u00e9n querer hacer comprobaciones no solamente en el estado del DOM sino tambi\u00e9n en los datos que usa (por ejemplo, para verificar si las actualizaciones persisten en la base de datos).</p>\n<p>En este escenario, podr\u00edas usar un framework como <a class=\"external-link\" href=\"https://www.cypress.io/\">Cypress</a>, <a class=\"external-link\" href=\"https://playwright.dev\">Playwright</a> o una biblioteca como <a class=\"external-link\" href=\"https://pptr.dev/\">Puppeteer</a> de forma que puedas navegar entre diferentes rutas y comprobar los efectos no solo del navegador sino potencialmente del backend tambi\u00e9n.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/testing-environments.md\">Edit this page</a></p></div></article>", "path": "/react/testing-environments", "nav": ["/react/testing-recipes", "/react/how-to-contribute"]}]}, {"key": "Contribuir", "values": [{"key": "C\u00f3mo contribuir", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React es uno de los primeros proyectos de c\u00f3digo abierto de Facebook que si bien est\u00e1 siendo desarrollado muy activamente, al mismo tiempo se utiliza para crear c\u00f3digo que les llega a todos en <a class=\"external-link\" href=\"https://www.facebook.com\">facebook.com</a>. Todav\u00eda estamos trabajando en los problemas para hacer que la contribuci\u00f3n a este proyecto sea lo m\u00e1s f\u00e1cil y transparente posible, pero a\u00fan no hemos llegado a ese punto. Esperamos que este documento haga que el proceso de contribuci\u00f3n sea claro y responda algunas preguntas que pueda tener.</p>\n<h3 id=\"code-of-conduct\"><a class=\"anchor\" href=\"/react/how-to-contribute#code-of-conduct\"></a><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md\">C\u00f3digo de conducta</a> </h3>\n<p>Facebook ha adoptado el <a class=\"external-link\" href=\"https://www.contributor-covenant.org/\">Convenio del Contribuidor</a> como su C\u00f3digo de Conducta, que esperamos que los participantes del proyecto cumplan. Por favor, lee <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md\">el texto completo</a> para que puedas comprender qu\u00e9 acciones ser\u00e1n o no toleradas.</p>\n<h3 id=\"open-development\"><a class=\"anchor\" href=\"/react/how-to-contribute#open-development\"></a>Desarrollo abierto </h3>\n<p>Todo el trabajo en React sucede directamente en <a class=\"external-link\" href=\"https://github.com/facebook/react\">GitHub</a>. Tanto los miembros del equipo central como los colaboradores externos env\u00edan <em>pull requests</em> que pasan por el mismo proceso de revisi\u00f3n.</p>\n<h3 id=\"semantic-versioning\"><a class=\"anchor\" href=\"/react/how-to-contribute#semantic-versioning\"></a>Versionado sem\u00e1ntico </h3>\n<p>React utiliza <a class=\"external-link\" href=\"https://semver.org/\">versionado sem\u00e1ntico</a>. Lanzamos versiones con parches para arreglos de errores cr\u00edticos, versiones menores para nuevas funcionalidades o cambios no esenciales, y versiones mayores para cualquier cambio disruptivo. Cuando creamos cambios disruptivos, tambi\u00e9n agregamos alertas de obsolescencia para que los usuarios aprendan sobre los cambios que vienen y migren su c\u00f3digo con antelaci\u00f3n. Aprende m\u00e1s sobre nuestro compromiso con la estabilidad y la migraci\u00f3n incremental en <a href=\"/react/faq-versioning\">nuestra pol\u00edtica de versionado</a>.</p>\n<p>Cada cambio significativo es documentado en el <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/CHANGELOG.md\">archivo de cambios</a>.</p>\n<h3 id=\"branch-organization\"><a class=\"anchor\" href=\"/react/how-to-contribute#branch-organization\"></a>Organizaci\u00f3n de ramas </h3>\n<p>Env\u00eda todos los cambios directo a la <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main\">rama de main</a>. No utilizamos ramas separadas para desarrollo o para lanzamientos futuros. Hacemos nuestro mejor esfuerzo para mantener <code class=\"language-javascript\">main</code> en buena forma, con todas las pruebas pasando.</p>\n<p>El c\u00f3digo que llega a <code class=\"language-javascript\">main</code> debe ser compatible con la \u00faltima versi\u00f3n estable. Puede contener funcionalidades adicionales, pero no cambios disruptivos. Debemos ser capaces de lanzar una nueva versi\u00f3n menor desde la punta de <code class=\"language-javascript\">main</code> en cualquier momento.</p>\n<h3 id=\"feature-flags\"><a class=\"anchor\" href=\"/react/how-to-contribute#feature-flags\"></a>Banderas de funcionalidades </h3>\n<p>Para mantener la rama <code class=\"language-javascript\">main</code> en un estado de lanzamiento, los cambios disruptivos y funcionalidades experimentales deben ser puestas ante una bandera de funcionalidad.</p>\n<p>Las banderas de funcionalidad est\u00e1n definidas en <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/main/packages/shared/ReactFeatureFlags.js\"><code class=\"language-javascript\">packages/shared/ReactFeatureFlags.js</code></a>. Algunos compilados de React pueden habilitar diferentes conjuntos de banderas; por ejemplo, el compilado de React Native puede ser configurado diferente a como es configurado React DOM. Estas banderas son encontradas en <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/shared/forks\"><code class=\"language-javascript\">packages/shared/forks</code></a>. Las banderas de funcionalidad son escritas est\u00e1ticamente con Flow, por lo que puedes ejecutar <code class=\"language-javascript\">yarn flow</code> para confirmar que has actualizado los archivos necesarios.</p>\n<p>El sistema de compilado de React quitar\u00e1 las ramas de funcionalidades desactivadas antes de publicar. Un trabajo de integraci\u00f3n continua se ejecuta con cada commit para comprobar los cambios en el tama\u00f1o del paquete. Puedes usar el cambio en el tama\u00f1o como una se\u00f1al de que una funcionalidad fue puesta correctamente.</p>\n<h3 id=\"bugs\"><a class=\"anchor\" href=\"/react/how-to-contribute#bugs\"></a>Errores </h3>\n<h4 id=\"where-to-find-known-issues\"><a class=\"anchor\" href=\"/react/how-to-contribute#where-to-find-known-issues\"></a>D\u00f3nde encontrar problemas conocidos </h4>\n<p>Estamos utilizando el sistema de <a class=\"external-link\" href=\"https://github.com/facebook/react/issues\"><em>incidencias</em> de GitHub</a> para nuestros errores p\u00fablicos. Mantenemos una estrecha vigilancia sobre esto y tratamos de avisar cuando tenemos una soluci\u00f3n interna en curso. Antes de hacer un nuevo reporte, aseg\u00farate de que tu problema no exista ya.</p>\n<h4 id=\"reporting-new-issues\"><a class=\"anchor\" href=\"/react/how-to-contribute#reporting-new-issues\"></a>Reportando nuevas incidencias </h4>\n<p>La mejor manera de solucionar tu error es proporcionar un caso de prueba reducido. Esta <a class=\"external-link\" href=\"https://jsfiddle.net/Luktwrdm/\">plantilla JSFiddle</a> es un gran punto de partida.</p>\n<h4 id=\"security-bugs\"><a class=\"anchor\" href=\"/react/how-to-contribute#security-bugs\"></a>Errores de seguridad </h4>\n<p>Facebook tiene un <a class=\"external-link\" href=\"https://www.facebook.com/whitehat/\">programa de recompensas</a> para la divulgaci\u00f3n segura de errores de seguridad. Con esto en mente, por favor, no abras incidencias p\u00fablicas. Sigue el proceso descrito en esa p\u00e1gina.</p>\n<h3 id=\"how-to-get-in-touch\"><a class=\"anchor\" href=\"/react/how-to-contribute#how-to-get-in-touch\"></a>C\u00f3mo entrar en contacto </h3>\n<ul>\n<li>IRC: <a class=\"external-link\" href=\"https://webchat.freenode.net/?channels=reactjs\">#reactjs en freenode</a></li>\n<li>Foro de discusi\u00f3n: <a class=\"external-link\" href=\"https://es.reactjs.org//community/support.html#popular-discussion-forums\">discuss.reactjs.org</a></li>\n</ul>\n<p>Tambi\u00e9n hay <a class=\"external-link\" href=\"https://www.reactiflux.com/\">una comunidad activa de usuarios de React en la plataforma de chat Discord</a> en caso de que necesites ayuda con React.</p>\n<h3 id=\"proposing-a-change\"><a class=\"anchor\" href=\"/react/how-to-contribute#proposing-a-change\"></a>Proponer un cambio </h3>\n<p>Si tiene la intenci\u00f3n de cambiar la API p\u00fablica o realizar cambios no triviales en la implementaci\u00f3n, recomendamos <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/new\">abrir una incidencia</a>. Esto nos permite llegar a un acuerdo sobre tu propuesta antes que le pongas un gran esfuerzo.</p>\n<p>Si solo est\u00e1s solucionando un error, est\u00e1 bien enviar un <em>pull request</em> de inmediato, pero seguimos recomendando que abras una incidencia que detalle que es lo que est\u00e1s solucionando. Esto es \u00fatil en caso de que no aceptemos esa soluci\u00f3n en particular, pero a\u00fan queramos hacer el seguimiento del problema.</p>\n<h3 id=\"your-first-pull-request\"><a class=\"anchor\" href=\"/react/how-to-contribute#your-first-pull-request\"></a>Tu primer pull request </h3>\n<p>\u00bfTrabajando en tu primer <em>pull request</em>? Puedes aprender c\u00f3mo en esta serie de videos gratis:</p>\n<p><strong><a class=\"external-link\" href=\"https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github\">C\u00f3mo contribuir a un proyecto de c\u00f3digo abierto en GitHub</a></strong></p>\n<p>Para ayudarte a familiarizarte con nuestro proceso de contribuci\u00f3n, tenemos una lista de <strong><a class=\"external-link\" href=\"https://github.com/facebook/react/issues?q=is:open+is:issue+label:%22good+first+issue%22\">incidencias adecuadas para comenzar</a></strong> que contienen errores que tienen un alcance relativamente limitado. Este es un gran lugar para empezar.</p>\n<p>Si decides solucionar una incidencia, aseg\u00farate de revisar el hilo de comentarios en caso de que alguien ya est\u00e9 trabajando en una soluci\u00f3n. Si nadie est\u00e1 trabajando en ello en este momento, deja un comentario que indique que deseas trabajar en ella para que otras personas no dupliquen accidentalmente su esfuerzo.</p>\n<p>Si alguien reclama una incidencia pero no hace un seguimiento por m\u00e1s de dos semanas, est\u00e1 bien que te hagas cargo pero a\u00fan as\u00ed debes dejar un comentario.</p>\n<h3 id=\"sending-a-pull-request\"><a class=\"anchor\" href=\"/react/how-to-contribute#sending-a-pull-request\"></a>Enviar un pull request </h3>\n<p>El equipo principal est\u00e1 monitoreando los <em>pull requests</em>. Revisaremos tu <em>pull request</em> y haremos un <em>merge</em>, solicitaremos cambios o lo cerraremos con una explicaci\u00f3n. Para los cambios de API, es posible que tengamos que arreglar nuestros usos internos en Facebook.com, lo que podr\u00eda causar alg\u00fan retraso. Haremos nuestro mejor esfuerzo para proporcionar actualizaciones y comentarios durante todo el proceso.</p>\n<p><strong>Antes de enviar un <em>pull request</em></strong>, aseg\u00farate de que se haga lo siguiente:</p>\n<ol>\n<li>Haz un <em>fork</em> <a class=\"external-link\" href=\"https://github.com/facebook/react\">del repositorio</a> y crea tu rama a partir de <code class=\"language-javascript\">main</code>.</li>\n<li>Ejecuta <code class=\"language-javascript\">yarn</code> en la ra\u00edz del repositorio.</li>\n<li>Si has corregido un error o has agregado un c\u00f3digo que deber\u00eda probarse, \u00a1agrega pruebas!</li>\n<li>Aseg\u00farate de que el conjunto de pruebas pasa (<code class=\"language-javascript\">yarn test</code>). Consejo: <code class=\"language-javascript\">yarn test --watch TestName</code> es \u00fatil en desarrollo.</li>\n<li>Ejecuta <code class=\"language-javascript\">yarn test --prod</code> para probar en el entorno de producci\u00f3n.</li>\n<li>Si necesitas un depurador, ejecuta <code class=\"language-javascript\">yarn debug-test --watch TestName</code>, abre <code class=\"language-javascript\">chrome://inspect</code> y presiona \u201cInspeccionar\u201d.</li>\n<li>Formatea tu c\u00f3digo con <a class=\"external-link\" href=\"https://github.com/prettier/prettier\">prettier</a> (<code class=\"language-javascript\">yarn prettier</code>).</li>\n<li>Aseg\u00farate de ejecutar lint en tu c\u00f3digo (<code class=\"language-javascript\">yarn lint</code>). Consejo: <code class=\"language-javascript\">yarn linc</code> para verificar solo los archivos modificados.</li>\n<li>Ejecuta los controles de tipo de <a class=\"external-link\" href=\"https://flowtype.org/\">Flow</a> (<code class=\"language-javascript\">yarn flow</code>).</li>\n<li>Si a\u00fan no lo has hecho, completa el CLA.</li>\n</ol>\n<h3 id=\"contributor-license-agreement-cla\"><a class=\"anchor\" href=\"/react/how-to-contribute#contributor-license-agreement-cla\"></a>Acuerdo de Licencia de Contribuidor (CLA) </h3>\n<p>Para aceptar tu pull request, necesitamos que env\u00edes un CLA. Solo necesitas hacer esto una vez, as\u00ed que si lo has hecho para otro proyecto de c\u00f3digo abierto de Facebook, est\u00e1s listo. Si est\u00e1s enviando un <em>pull request</em> por primera vez, haznos saber que has completado el CLA y podemos verificarlo con tu nombre de usuario de GitHub.</p>\n<p><strong><a class=\"external-link\" href=\"https://code.facebook.com/cla\">Completa tu CLA aqu\u00ed.</a></strong></p>\n<h3 id=\"contribution-prerequisites\"><a class=\"anchor\" href=\"/react/how-to-contribute#contribution-prerequisites\"></a>Prerequisitos para contribuir </h3>\n<ul>\n<li>Tienes <a class=\"external-link\" href=\"https://nodejs.org\">Node</a> instalado con la versi\u00f3n LTS y <a class=\"external-link\" href=\"https://yarnpkg.com/en/\">Yarn</a> con v1.2.0+.</li>\n<li>Tienes <a class=\"external-link\" href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK</a> instalado.</li>\n<li>Tienes <code class=\"language-javascript\">gcc</code> instalado o te sientes c\u00f3modo instalando un compilador si es necesario. Algunas de nuestras dependencias pueden requerir un paso de compilaci\u00f3n. En OS X, las herramientas de l\u00ednea de comandos de Xcode cubrir\u00e1n esto. En Ubuntu, <code class=\"language-javascript\">apt-get install build-essential</code> instalar\u00e1 los paquetes necesarios. Comandos similares deber\u00edan funcionar en otras distribuciones de Linux. Windows requerir\u00e1 algunos pasos adicionales, consulta las <a class=\"external-link\" href=\"https://github.com/nodejs/node-gyp#installation\">instrucciones de instalaci\u00f3n de <code class=\"language-javascript\">node-gyp</code></a> para obtener m\u00e1s informaci\u00f3n.</li>\n<li>Est\u00e1s familiarizado con Git.</li>\n</ul>\n<h3 id=\"development-workflow\"><a class=\"anchor\" href=\"/react/how-to-contribute#development-workflow\"></a>Flujo de trabajo de desarrollo </h3>\n<p>Despu\u00e9s de clonar React, ejecuta <code class=\"language-javascript\">yarn</code> para obtener sus dependencias.\nA continuaci\u00f3n, puedes ejecutar varios comandos:</p>\n<ul>\n<li><code class=\"language-javascript\">yarn lint</code> comprueba el estilo del c\u00f3digo.</li>\n<li><code class=\"language-javascript\">yarn linc</code> es como<code class=\"language-javascript\">yarn lint</code> pero m\u00e1s r\u00e1pido, porque solo verifica los archivos que difieren en tu rama.</li>\n<li><code class=\"language-javascript\">yarn test</code> ejecuta el conjunto total de pruebas.</li>\n<li><code class=\"language-javascript\">yarn test --watch</code> ejecuta un observador de pruebas interactivo.</li>\n<li><code class=\"language-javascript\">yarn test --prod</code> ejecuta pruebas en el entorno de producci\u00f3n.</li>\n<li><code class=\"language-javascript\">yarn test &lt;pattern&gt;</code> ejecuta pruebas con nombres de archivos que coincidan.</li>\n<li><code class=\"language-javascript\">yarn debug-test</code> es igual que<code class=\"language-javascript\">yarn test</code> pero con un depurador. Abre <code class=\"language-javascript\">chrome://inspect</code> y presiona \u201cInspeccionar\u201d.</li>\n<li><code class=\"language-javascript\">yarn flow</code> ejecuta todas las comprobaciones de tipos de <a class=\"external-link\" href=\"https://flowtype.org/\">Flow</a>.</li>\n<li><code class=\"language-javascript\">yarn build</code> crea una carpeta<code class=\"language-javascript\">build</code> con todos los paquetes.</li>\n<li><code class=\"language-javascript\">yarn build react/index,react-dom/index --type=UMD</code> crea las compilaciones UMD solo de React y ReactDOM.</li>\n</ul>\n<p>Recomendamos ejecutar <code class=\"language-javascript\">yarn test</code> (o sus variaciones anteriores) para asegurarte de no introducir ninguna regresi\u00f3n mientras trabajas en tu cambio. Sin embargo, puede ser \u00fatil probar tu compilaci\u00f3n de React en un proyecto real.</p>\n<p>En primer lugar, ejecuta <code class=\"language-javascript\">yarn build</code>. Esto producir\u00e1 paquetes precompilados en la carpeta <code class=\"language-javascript\">build</code>, as\u00ed como tambi\u00e9n preparar\u00e1 paquetes npm dentro de <code class=\"language-javascript\">build/packages</code>.</p>\n<p>La forma m\u00e1s f\u00e1cil de probar tus cambios es ejecutar <code class=\"language-javascript\">yarn build react/index,react-dom/index --type=UMD</code> y luego abrir <code class=\"language-javascript\">fixtures/packaging/babel-standalone/dev.html</code>. Este archivo ya utiliza <code class=\"language-javascript\">react.development.js</code> de la carpeta<code class=\"language-javascript\">build</code> por lo que recoger\u00e1 tus cambios.</p>\n<p>Si deseas probar los cambios en tu proyecto React existente, puedes copiar <code class=\"language-javascript\">build/node_modules/react/umd/react.development.js</code>, <code class=\"language-javascript\">build/node_modules/react-dom/umd/react-dom.development.js</code>, o cualquier otro producto de compilaci\u00f3n en tu aplicaci\u00f3n y usarlos en lugar de la versi\u00f3n estable. </p>\n<p>Si tu proyecto usa React desde npm, puedes eliminar <code class=\"language-javascript\">react</code> y<code class=\"language-javascript\">react-dom</code> en sus dependencias y usar <code class=\"language-javascript\">yarn link</code> para apuntarlos a tu carpeta local <code class=\"language-javascript\">build</code>. Recuerda que <strong>en lugar de <code class=\"language-javascript\">--type=UMD</code> quieres pasar <code class=\"language-javascript\">--type=NODE</code> cuando compiles</strong>. Tambien necesitar\u00e1s compilar el paquete <code class=\"language-javascript\">scheduler</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-sh\"><code class=\"language-javascript\">cd ~/ruta_a_tu_clon_de_react/\nyarn build react/index,react/jsx,react-dom/index,scheduler --type=NODE\n\ncd build/node_modules/react\nyarn link\ncd build/node_modules/react-dom\nyarn link\n\ncd ~/ruta/a/tu/proyecto\nyarn link react react-dom</code></pre></div>\n<p>Cada vez que ejecutes <code class=\"language-javascript\">yarn build</code> en la carpeta React, las versiones actualizadas aparecer\u00e1n dentro de <code class=\"language-javascript\">node_modules</code> en tu proyecto. A continuaci\u00f3n, puedes reconstruir tu proyecto para probar tus cambios.</p>\n<p>Si alg\u00fan paquete a\u00fan est\u00e1 perdido (por ejemplo, puede que uses <code class=\"language-javascript\">react-dom/server</code> en tu proyecto), siempre puedes hacer un compilado completo con <code class=\"language-javascript\">yarn build</code>. Recuerda que ejecutar <code class=\"language-javascript\">yarn build</code> sin opciones tarda mas.</p>\n<p>A\u00fan requerimos que tu <em>pull request</em> contenga pruebas unitarias para cualquier funcionalidad nueva. De esta manera podemos asegurarnos de que tu c\u00f3digo no falle en el futuro.</p>\n<h3 id=\"style-guide\"><a class=\"anchor\" href=\"/react/how-to-contribute#style-guide\"></a>Gu\u00eda de estilo </h3>\n<p>Utilizamos un formateador de c\u00f3digo autom\u00e1tico llamado <a class=\"external-link\" href=\"https://prettier.io/\">Prettier</a>.\nEjecuta <code class=\"language-javascript\">yarn prettier</code> despu\u00e9s de realizar cualquier cambio en el c\u00f3digo.</p>\n<p>Luego, nuestra gu\u00eda detectar\u00e1 la mayor\u00eda de los problemas que puedan existir en tu c\u00f3digo.\nPuedes verificar el estado de tu estilo de c\u00f3digo simplemente ejecutando <code class=\"language-javascript\">yarn linc</code>.</p>\n<p>Sin embargo, todav\u00eda hay algunos estilos que el <em>linter</em> no puede recoger. Si no est\u00e1s seguro de algo, consulta la <a class=\"external-link\" href=\"https://github.com/airbnb/javascript\">Gu\u00eda de estilo de Airbnb</a> que te guiar\u00e1 en la direcci\u00f3n correcta.</p>\n<h3 id=\"request-for-comments-rfc\"><a class=\"anchor\" href=\"/react/how-to-contribute#request-for-comments-rfc\"></a>Solicitud de comentarios (RFC) </h3>\n<p>Muchos cambios, incluyendo correcciones de errores y mejoras en la documentaci\u00f3n, se pueden implementar y revisar a trav\u00e9s del flujo de trabajo normal de <em>pull request</em> de GitHub.</p>\n<p>Sin embargo, algunos cambios son \u201csustanciales\u201d, y pedimos que se sometan a un proceso de dise\u00f1o y produzcan un consenso entre el equipo central de React.</p>\n<p>El proceso \u201cRFC\u201d (solicitud de comentarios) tiene como objetivo proporcionar una ruta coherente y controlada para que las nuevas caracter\u00edsticas ingresen al proyecto. Puedes contribuir visitando el <a class=\"external-link\" href=\"https://github.com/reactjs/rfcs\">repositorio rfcs</a>.</p>\n<h3 id=\"license\"><a class=\"anchor\" href=\"/react/how-to-contribute#license\"></a>Licencia </h3>\n<p>Al contribuir a React, aceptas que tus contribuciones se otorgar\u00e1n bajo su licencia MIT.</p>\n<h3 id=\"what-next\"><a class=\"anchor\" href=\"/react/how-to-contribute#what-next\"></a>\u00bfQu\u00e9 hay luego? </h3>\n<p>Lee la <a href=\"/react/codebase-overview\">secci\u00f3n siguiente</a> para saber c\u00f3mo est\u00e1 organizada la base de c\u00f3digo.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/how-to-contribute.md\">Edit this page</a></p></div></article>", "path": "/react/how-to-contribute", "nav": ["/react/testing-environments", "/react/codebase-overview"]}, {"key": "Visi\u00f3n general de la base de c\u00f3digo", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Esta secci\u00f3n te dar\u00e1 una perspectiva general de la organizaci\u00f3n del c\u00f3digo base de React, sus convenciones, e implementaci\u00f3n.</p>\n<p>Si quieres <a href=\"/react/how-to-contribute\">contribuir a React</a> esperamos que esta gu\u00eda te ayude a sentirte m\u00e1s c\u00f3modo al hacer cambios.</p>\n<p>No recomendamos necesariamente alguna de estas convenciones en aplicaciones de React. Muchas de ellas existen por razones hist\u00f3ricas y pueden cambiar con el tiempo.</p>\n<h3 id=\"top-level-folders\"><a class=\"anchor\" href=\"/react/codebase-overview#top-level-folders\"></a>Carpetas principales </h3>\n<p>Despu\u00e9s de clonar el <a class=\"external-link\" href=\"https://github.com/facebook/react\">repositorio de React</a>, ver\u00e1s algunas carpetas principales en \u00e9l.</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages\"><code class=\"language-javascript\">packages</code></a> contiene metadatos (como el <code class=\"language-javascript\">package.json</code>) y el c\u00f3digo fuente (subdirectorio <code class=\"language-javascript\">src</code>) para todos los paquetes en el repositorio de React. <strong>Si t\u00fa cambio est\u00e1 relacionado con el c\u00f3digo, el subdirectorio <code class=\"language-javascript\">src</code> de cada paquete es donde pasar\u00e1s la mayor\u00eda del tiempo.</strong></li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/fixtures\"><code class=\"language-javascript\">fixtures</code></a> contiene algunas aplicaciones peque\u00f1as de prueba para colaboradores.</li>\n<li>[<code class=\"language-javascript\">build</code>] es el compilado de React. No est\u00e1 en el repositorio pero aparecer\u00e1 en la carpeta clonada de React despu\u00e9s de que <a href=\"/react/how-to-contribute#development-workflow\">compiles</a> por primera vez.</li>\n</ul>\n<p>La documentaci\u00f3n est\u00e1 <a class=\"external-link\" href=\"https://github.com/reactjs/reactjs.org\">en un repositorio aparte de React</a>.</p>\n<p>Hay otras carpetas principales pero son usadas como herramientas y no vas a necesitarlas al momento de contribuir.</p>\n<h3 id=\"colocated-test\"><a class=\"anchor\" href=\"/react/codebase-overview#colocated-test\"></a>Ubicaci\u00f3n de las pruebas </h3>\n<p>No tenemos un carpeta principal para las pruebas unitarias. En cambio, est\u00e1n ubicadas en un directorio llamado <code class=\"language-javascript\">__tests__</code> relativo a los archivos que prueban.</p>\n<p>Por ejemplo, una prueba para <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/87724bd87506325fcaf2648c70fc1f43411a87be/src/renderers/dom/client/utils/setInnerHTML.js\"><code class=\"language-javascript\">setInnerHTML.js</code></a> est\u00e1 ubicada junto a <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/87724bd87506325fcaf2648c70fc1f43411a87be/src/renderers/dom/client/utils/__tests__/setInnerHTML-test.js\"><code class=\"language-javascript\">__tests__/setInnerHTML-test.js</code></a>.</p>\n<h3 id=\"warnings-and-invariants\"><a class=\"anchor\" href=\"/react/codebase-overview#warnings-and-invariants\"></a>Advertencias e Invariantes </h3>\n<p>El c\u00f3digo base de React utiliza <code class=\"language-javascript\">console.error</code> para mostrar advertencias:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something is wrong.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Las advertencias solo est\u00e1n disponibles en desarrollo. En producci\u00f3n, se eliminan. Si necesitas prohibir la ejecuci\u00f3n de un c\u00f3digo, usa el m\u00f3dulo <code class=\"language-javascript\">invariant</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> invariant <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'invariant'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">invariant</span><span class=\"token punctuation\">(</span>\n  <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'You shall not pass!'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>El invariante se muestra cuando la condici\u00f3n <code class=\"language-javascript\">invariant</code> es <code class=\"language-javascript\">false</code>.</strong></p>\n<p>\u201cInvariante\u201d es una forma de decir \u201cest\u00e1 condici\u00f3n siempre es true\u201d. Puedes pensar al respecto como si hicieras una comprobaci\u00f3n.</p>\n<p>Es importante mantener similar el comportamiento del ambiente de producci\u00f3n y desarrollo, de forma que la condici\u00f3n <code class=\"language-javascript\">invariant</code> aplique para ambos. Los mensajes de error son reemplazados autom\u00e1ticamente por c\u00f3digos de error en producci\u00f3n para evitar que afecten de forma negativa el tama\u00f1o en bytes.</p>\n<h3 id=\"development-and-production\"><a class=\"anchor\" href=\"/react/codebase-overview#development-and-production\"></a>Desarrollo y Producci\u00f3n </h3>\n<p>Puedes usar la variable seudo-global <code class=\"language-javascript\">__DEV__</code> en el c\u00f3digo base para proteger bloques de c\u00f3digo \u00fanicamente en desarrollo.</p>\n<p>Esta variable es agregada durante la fase de compilaci\u00f3n, y se transforma en verificaciones de la forma <code class=\"language-javascript\">process.env.NODE_ENV !== 'production'</code> en los compilados de CommonJS.</p>\n<p>Para compilados independientes, se vuelve <code class=\"language-javascript\">true</code> en el compilado no minificado, y se remueve por completo junto con los bloques <code class=\"language-javascript\">if</code> que protege en el compilado minificado.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Este c\u00f3digo solo funcionar\u00e1 en desarrollo.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"flow\"><a class=\"anchor\" href=\"/react/codebase-overview#flow\"></a>Flow </h3>\n<p>Recientemente se introdujeron validaciones <a class=\"external-link\" href=\"https://flow.org/\">Flow</a> al c\u00f3digo base. Archivos marcados con la anotaci\u00f3n <code class=\"language-javascript\">@flow</code> en el comentario de encabezado de la licencia se est\u00e1n validando.</p>\n<p>Aceptamos pull requests <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/7600/files\">para agregar anotaciones Flow al c\u00f3digo existente</a>. Las anotaciones Flow se ven as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">ReactRef<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">detachRefs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">instance</span><span class=\"token operator\">:</span> ReactInstance<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> ReactElement <span class=\"token operator\">|</span> string <span class=\"token operator\">|</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cuando sea posible, el nuevo c\u00f3digo deber\u00eda usar anotaciones Flow.\nPuedes usar <code class=\"language-javascript\">yarn flow</code> localmente para verificar tu c\u00f3digo con Flow.</p>\n<h3 id=\"multiple-packages\"><a class=\"anchor\" href=\"/react/codebase-overview#multiple-packages\"></a>M\u00faltiples paquetes </h3>\n<p>React es un <a class=\"external-link\" href=\"https://danluu.com/monorepo/\">monorepo</a>. Su repositorio contiene m\u00faltiples paquetes separados de tal forma que sus cambios puedan coordinarse, y los issues se encuentren en un solo lugar.</p>\n<h3 id=\"react-core\"><a class=\"anchor\" href=\"/react/codebase-overview#react-core\"></a>N\u00facleo de React </h3>\n<p>El \u201cn\u00facleo\u201d de React incluye todas las <a href=\"/react/react-api#react\">APIs principales de React</a>, por ejemplo:</p>\n<ul>\n<li><code class=\"language-javascript\">React.createElement()</code></li>\n<li><code class=\"language-javascript\">React.Component</code></li>\n<li><code class=\"language-javascript\">React.Children</code></li>\n</ul>\n<p><strong>El n\u00facleo de React incluye las APIs necesarias para definir componentes.</strong> Este no incluye el algoritmo de <a href=\"/react/reconciliation\">reconciliaci\u00f3n</a> o cualquier c\u00f3digo espec\u00edfico a una plataforma. Es usado por componentes de React DOM y React Native.</p>\n<p>El c\u00f3digo del n\u00facleo de React est\u00e1 ubicado en <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react\"><code class=\"language-javascript\">packages/react</code></a> en el \u00e1rbol de fuentes. Est\u00e1 disponible en npm como el paquete <a class=\"external-link\" href=\"https://www.npmjs.com/package/react\">react</a>. La compilaci\u00f3n del navegador se llama <code class=\"language-javascript\">react.js</code>, y exporta un global llamado <code class=\"language-javascript\">React</code>.</p>\n<h3 id=\"renderers\"><a class=\"anchor\" href=\"/react/codebase-overview#renderers\"></a>Renderizadores </h3>\n<p>React fue creado originalmente para el DOM pero fue adaptado para dar soporte a plataformas nativas con <a class=\"external-link\" href=\"https://reactnative.dev/\">React Native</a>. Esto introdujo el concepto de \u201crenderizadores\u201d en React.</p>\n<p><strong>Los renderizadores gestionan c\u00f3mo un \u00e1rbol de React se convierte en llamados de la plataforma subyacente.</strong></p>\n<p>Los renderizadores tambi\u00e9n est\u00e1n ubicados en <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/\"><code class=\"language-javascript\">packages/</code></a>:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-dom\">Renderizador de React DOM</a> renderiza componentes de React en el DOM. Implementa <a href=\"/react/react-dom\">APIs principales de <code class=\"language-javascript\">ReactDOM</code></a> y est\u00e1 disponible como un paquete npm <a class=\"external-link\" href=\"https://www.npmjs.com/package/react-dom\"><code class=\"language-javascript\">react-dom</code></a>. Tambi\u00e9n puede ser usado como un bundle independiente del navegador llamado <code class=\"language-javascript\">react-dom.js</code> que exporta un global de <code class=\"language-javascript\">ReactDOM</code>.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-native-renderer\">Renderizador de React Native</a> renderiza componentes de React en vistas nativas. Es usado internamente por React Native.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-test-renderer\">Renderizador de pruebas de React</a> renderiza componentes de React en \u00e1rboles JSON. Es usada por la funcionalidad <a class=\"external-link\" href=\"https://facebook.github.io/jest/blog/2016/07/27/jest-14.html\">Snapshot Testing</a> de <a class=\"external-link\" href=\"https://facebook.github.io/jest\">Jest</a> y est\u00e1 disponible como el paquete npm <a class=\"external-link\" href=\"https://www.npmjs.com/package/react-test-renderer\">react-test-renderer</a>.</li>\n</ul>\n<p>Otro renderizador oficialmente soportado es <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-art\"><code class=\"language-javascript\">react-art</code></a>. Antes estaba en un <a class=\"external-link\" href=\"https://github.com/reactjs/react-art\">repositorio de GitHub</a> separado pero lo movimos a la estructura principal de directorios por ahora.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>T\u00e9cnicamente <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-native-renderer\"><code class=\"language-javascript\">react-native-renderer</code></a> es una capa delgada que ense\u00f1a a React a interactuar con la implementaci\u00f3n de React Native. El verdadero c\u00f3digo espic\u00edfico a la plataforma que se encarga de las vistas nativas est\u00e1 en el <a class=\"external-link\" href=\"https://github.com/facebook/react-native\">repositorio de React Native</a> junto con sus componentes.</p>\n</div>\n<h3 id=\"reconcilers\"><a class=\"anchor\" href=\"/react/codebase-overview#reconcilers\"></a>Reconciliadores </h3>\n<p>Incluso los renderizadores como React DOM y React Native necesitan compartir una gran cantidad de l\u00f3gica. En particular, el algoritmo de <a href=\"/react/reconciliation\">reconciliaci\u00f3n</a> debe ser tan similar como sea posible para que el renderizado declarativo, los componentes personalizados, el estado, los m\u00e9todos del ciclo de vida, y las referencias funcionen de forma consistente a tr\u00e1ves de las plataformas.</p>\n<p>Para resolver esto, diferentes renderizadores comparten parte del c\u00f3digo entre s\u00ed. Llamamos a esta parte de React un <code class=\"language-javascript\">reconciliador</code>. Cuando se planifica una actualizaci\u00f3n como <code class=\"language-javascript\">setState()</code>, el reconciliador llama el m\u00e9todo <code class=\"language-javascript\">render()</code> en los componentes del \u00e1rbol y los monta, actualiza, o desmonta.</p>\n<p>Los reconciliadores no est\u00e1n empaquetados por separado porque actualmente no tienen una API p\u00fablica. Por el contrario, son exclusivamente usados por los renderizadores como React DOM y React Native.</p>\n<h3 id=\"stack-reconciler\"><a class=\"anchor\" href=\"/react/codebase-overview#stack-reconciler\"></a>Reconciliador de pila </h3>\n<p>El reconciliador de \u201cpila\u201d es la implementaci\u00f3n que permite el funcionamiento de React 15 y versiones previas. Dejamos de usarlo, pero est\u00e1 documentado en detalle en la <a href=\"/react/implementation-notes\">pr\u00f3xima secci\u00f3n</a>.</p>\n<h3 id=\"fiber-reconciler\"><a class=\"anchor\" href=\"/react/codebase-overview#fiber-reconciler\"></a>Reconciliador Fiber </h3>\n<p>El reconciliador \u201cfiber\u201d es un nuevo esfuerzo dedicado a resolver los problemas inherentes al reconciliador de pila y arreglar algunos issues. Ha sido el reconciliador por defecto desde React 16.</p>\n<p>Sus objetivos principales son:</p>\n<ul>\n<li>Habilidad de dividir trabajo interrumplible en partes.</li>\n<li>Habilidad de priorizar, y reusar trabajo en progreso.</li>\n<li>Habilidad para moverse entre padres e hijos para soportar maquetaci\u00f3n en React.</li>\n<li>Habilidad para retornar m\u00faltiples elementos desde el m\u00e9todo <code class=\"language-javascript\">render()</code>.</li>\n<li>Mejor soporte a l\u00edmites de error.</li>\n</ul>\n<p>Puedes leer m\u00e1s acerca de la Arquitectura de React Fiber <a class=\"external-link\" href=\"https://github.com/acdlite/react-fiber-architecture\">aqu\u00ed</a> y <a class=\"external-link\" href=\"https://blog.ag-grid.com/inside-fiber-an-in-depth-overview-of-the-new-reconciliation-algorithm-in-react\">aqu\u00ed</a>. Como el soporte comenz\u00f3 desde React 16, las funcionalidades as\u00edncronas no se han habilitado a\u00fan.</p>\n<p>Su c\u00f3digo fuente est\u00e1 ubicado en <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-reconciler\"><code class=\"language-javascript\">packages/react-reconciler</code></a>.</p>\n<h3 id=\"event-system\"><a class=\"anchor\" href=\"/react/codebase-overview#event-system\"></a>Sistema de Eventos </h3>\n<p>React implementa una capa sobre los eventos nativos para minimizar las diferencias entre navegadores. Su c\u00f3digo fuente est\u00e1 localizado en <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-dom/src/events\"><code class=\"language-javascript\">packages/react-dom/src/events</code></a>.</p>\n<h3 id=\"what-next\"><a class=\"anchor\" href=\"/react/codebase-overview#what-next\"></a>\u00bfQu\u00e9 sigue? </h3>\n<p>Lee la <a href=\"/react/implementation-notes\">pr\u00f3xima secci\u00f3n</a> para aprender en m\u00e1s detalle acerca de la implementaci\u00f3n del reconciliador antes de React 16. No hemos documentado los aspectos internos del nuevo reconciliador a\u00fan.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/codebase-overview.md\">Edit this page</a></p></div></article>", "path": "/react/codebase-overview", "nav": ["/react/how-to-contribute", "/react/implementation-notes"]}, {"key": "Notas de implementaci\u00f3n", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Esta secci\u00f3n es una colecci\u00f3n de notas de implementaci\u00f3n para el <a href=\"/react/codebase-overview#stack-reconciler\">reconciliador de pila</a>.</p>\n<p>Es muy t\u00e9cnica y asume un gran entendimiento de la API p\u00fablica de React como tambi\u00e9n sobre la divisi\u00f3n de React en n\u00facleo, renderizadores y el reconciliador. Si no est\u00e1s muy familiarizado con la base de c\u00f3digo de React, primero lee la <a href=\"/react/codebase-overview\">visi\u00f3n general de la base de c\u00f3digo</a>.</p>\n<p>Adem\u00e1s se asume una buena comprensi\u00f3n de las <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2015/12/18/react-components-elements-and-instances.html\">diferencias entre componentes de React, sus instancias y sus elementos</a>.</p>\n<p>El reconciliador de pila se us\u00f3 en React 15 y tambi\u00e9n en versiones anteriores. Est\u00e1 ubicado en <a class=\"external-link\" href=\"https://github.com/facebook/react/tree/15-stable/src/renderers/shared/stack/reconciler\">src/renderers/shared/stack/reconciler</a>.</p>\n<h3 id=\"video-building-react-from-scratch\"><a class=\"anchor\" href=\"/react/implementation-notes#video-building-react-from-scratch\"></a>Video: Construyendo React desde 0 </h3>\n<p><a class=\"external-link\" href=\"https://twitter.com/zpao\">Paul O\u2019Shannessy</a> dio una charla sobre <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=_MAD4Oly9yg\">construir React desde 0</a> que inspir\u00f3 este documento.</p>\n<p>Tanto este documento como su charla son simplificaciones de la base de c\u00f3digo real por lo que obtendr\u00e1s un mejor entendimiento familiariz\u00e1ndote con ambos.</p>\n<h3 id=\"overview\"><a class=\"anchor\" href=\"/react/implementation-notes#overview\"></a>Visi\u00f3n general </h3>\n<p>El reconciliador por s\u00ed mismo no tiene una API p\u00fablica. Los <a href=\"/react/codebase-overview#renderers\">renderizadores</a> como React DOM y React Native lo usan para actualizar de manera eficiente la interfaz de usuario acorde a los componentes de React dise\u00f1ados por el usuario.</p>\n<h3 id=\"mounting-as-a-recursive-process\"><a class=\"anchor\" href=\"/react/implementation-notes#mounting-as-a-recursive-process\"></a>El montaje como un proceso recursivo </h3>\n<p>Consideremos la primera vez que montas un componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-javascript\">root.render</code> pasar\u00e1 <code class=\"language-javascript\">&lt;App /&gt;</code> al reconciliador. Recuerda que <code class=\"language-javascript\">&lt;App /&gt;</code> es un elemento de React, es decir, una descripci\u00f3n de <em>qu\u00e9</em> hay que renderizar. Puedes pensarlo como si fuera un objecto simple:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { type: App, props: {} }</span></code></pre></div>\n<p>El reconciliador comprobar\u00e1 si <code class=\"language-javascript\">App</code> es una clase o una funci\u00f3n.</p>\n<p>Si <code class=\"language-javascript\">App</code> es una funci\u00f3n, el reconciliador llamar\u00e1 <code class=\"language-javascript\">App(props)</code> para renderizar el elemento.</p>\n<p>Si <code class=\"language-javascript\">App</code> es una clase, el reconciliador instanciar\u00e1 una <code class=\"language-javascript\">App</code> con <code class=\"language-javascript\">new App(props)</code>, llamar\u00e1 al m\u00e9todo del ciclo de vida <code class=\"language-javascript\">componentWillMount()</code>, y por \u00faltimo llamar\u00e1 al m\u00e9todo <code class=\"language-javascript\">render()</code> para obtener el elemento renderizado.</p>\n<p>De cualquier manera, el reconciliador averiguar\u00e1 a qu\u00e9 elemento se renderiz\u00f3 <code class=\"language-javascript\">App</code>.</p>\n<p>Este proceso es recursivo. <code class=\"language-javascript\">App</code> puede ser renderizado como <code class=\"language-javascript\">&lt;Greeting /&gt;</code>, <code class=\"language-javascript\">&lt;Greeting /&gt;</code> puede ser renderizado como <code class=\"language-javascript\">&lt;Button /&gt;</code>, y as\u00ed sucesivamente. El reconciliador examinar\u00e1 a fondo a trav\u00e9s de los componentes definidos por el usuario de manera recursiva a medida que averigua a qu\u00e9 se renderiza cada componente.</p>\n<p>Puedes imaginar este proceso como pseudoc\u00f3digo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Las subclases de React.Component tienen este indicador</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Esta funci\u00f3n toma un elemento de React (Por ej. &lt;App /&gt;)</span>\n<span class=\"token comment\">// y devuelve un nodo DOM o nativo que representa el \u00e1rbol montado.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Determinaremos el elemento renderizado</span>\n  <span class=\"token comment\">// ejecutando su tipo como una funci\u00f3n</span>\n  <span class=\"token comment\">// o creando una instancia y llamando a render().</span>\n  <span class=\"token keyword\">var</span> renderedElement<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Clase componente</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Establecer las props</span>\n    publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Llamar al ciclo de vida si es necesario</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Obtener el elemento renderizado llamando a render()</span>\n    renderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Funci\u00f3n componente</span>\n    renderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Este proceso es recursivo porque un componente</span>\n  <span class=\"token comment\">// puede devolver un elemento con un tipo de otro componente.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Nota: \u00a1esta implementaci\u00f3n est\u00e1 incompleta y se repite indefinidamente!</span>\n  <span class=\"token comment\">// Solo acepta elementos como &lt;App /&gt; o &lt;Button /&gt;.</span>\n  <span class=\"token comment\">// Todav\u00eda no acepta elementos como &lt;div /&gt; o &lt;p /&gt;.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrootEl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Esto realmente <em>es</em> pseudoc\u00f3digo. No es similar a la implementaci\u00f3n real. Adem\u00e1s causar\u00e1 un desbordamiento de pila porque no hemos analizado cuando parar la recursividad.</p>\n</div>\n<p>Hagamos un repaso de algunas ideas clave con el ejemplo anterior:</p>\n<ul>\n<li>Los elementos de React son objetos simples que representan el tipo de un componente (Por ej. <code class=\"language-javascript\">App</code>) y las props.</li>\n<li>Los componentes definidos por el usuario (Por ej. <code class=\"language-javascript\">App</code>) pueden ser clases o funciones pero todos \u201cse renderizan\u201d como elementos.</li>\n<li>El \u201cmontaje\u201d es un proceso recursivo que crea un \u00e1rbol DOM o nativo dado el elemento de React de nivel superior (Por ej. <code class=\"language-javascript\">&lt;App /&gt;</code>).</li>\n</ul>\n<h3 id=\"mounting-host-elements\"><a class=\"anchor\" href=\"/react/implementation-notes#mounting-host-elements\"></a>Montaje de elementos anfitriones </h3>\n<p>Este proceso ser\u00eda inservible si no renderiz\u00e1ramos algo en la pantalla como resultado.</p>\n<p>Sumados a los componentes definidos por el usuario o (\u201ccompuestos\u201d), los elementos de React tambi\u00e9n pueden representar componentes espec\u00edficos a la plataforma o (\u201canfitriones\u201d). Por ejemplo, <code class=\"language-javascript\">Button</code> puede devolver un <code class=\"language-javascript\">&lt;div /&gt;</code> desde su m\u00e9todo render.</p>\n<p>Si la propiedad <code class=\"language-javascript\">type</code> de un elemento es una <em>string</em>, sabemos que estamos trabajando con un elemento anfitri\u00f3n:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { type: 'div', props: {} }</span></code></pre></div>\n<p>No hay c\u00f3digo definido por el usuario asociado con elementos anfitriones.</p>\n<p>Cuando el reconciliador encuentra un elemento anfitri\u00f3n, deja que el renderizador se encargue de montarlo. Por ejemplo, React DOM podr\u00eda crear un nodo del DOM.</p>\n<p>Si el elemento anfitri\u00f3n tiene hijos, el reconciliador los monta de manera recursiva siguiendo el mismo algoritmo como en el caso anterior. No importa si los hijos son anfitriones (como <code class=\"language-javascript\">&lt;div&gt;&lt;hr /&gt;&lt;/div&gt;</code>), compuestos (como <code class=\"language-javascript\">&lt;div&gt;&lt;Button /&gt;&lt;/div&gt;</code>), o ambos.</p>\n<p>Los nodos del DOM producidos por componentes hijos ser\u00e1n anexados al nodo padre del DOM, y recursivamente, la estructura completa del DOM ser\u00e1 ensamblada.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>El reconciliador mismo no est\u00e1 ligado al DOM. El resultado exacto del montaje (a veces llamado \u201cmount image\u201d en el c\u00f3digo fuente) depende del renderizador, y puede ser un nodo del DOM (React DOM), una <em>string</em> (React DOM Server), o un n\u00famero representando una vista nativa (React Native).</p>\n</div>\n<p>Si fueramos a extender el c\u00f3digo para aceptar elementos anfitriones, se ver\u00eda as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Las subclases de React.Component tienen este indicador</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Esta funci\u00f3n s\u00f3lo acepta elementos de tipo compuesto.</span>\n<span class=\"token comment\">// Por ejemplo, acepta &lt;App /&gt; y &lt;Button /&gt;, pero no &lt;div /&gt;.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mountComposite</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> renderedElement<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Clase componente</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Establecer las props</span>\n    publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Llamar al ciclo de vida si es necesario</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    renderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Funci\u00f3n Componente</span>\n    renderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Esto es recursivo pero eventualmente alcanzaremos el final de la recursi\u00f3n</span>\n  <span class=\"token comment\">// cuando el elemento sea anfitri\u00f3n (Por ej. &lt;div /&gt; en vez de compuesto (Por ej. &lt;App /&gt;):</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Esta funci\u00f3n solo acepta elementos de tipo anfitri\u00f3n.</span>\n<span class=\"token comment\">// Por ejemplo, acepta &lt;div /&gt; y &lt;p /&gt; pero no &lt;App /&gt;.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mountHost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Este bloque de c\u00f3digo no deber\u00eda estar en el reconciliador.</span>\n  <span class=\"token comment\">// Diferentes renderizadores podr\u00edan inicializar nodos de manera diferente.</span>\n  <span class=\"token comment\">// Por ejemplo, React Native crear\u00eda vistas para iOS o Android.</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Montaje de los hijos</span>\n  children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childElement</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Los hijos pueden ser anfitriones (Por ej. &lt;div /&gt;) o compuestos (Por ej. &lt;Button /&gt;)</span>\n    <span class=\"token comment\">// Tambi\u00e9n los montaremos de manera recursiva:</span>\n    <span class=\"token keyword\">var</span> childNode <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>childElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Esta l\u00ednea de c\u00f3digo tambi\u00e9n es espec\u00edfica a cada renderizador.</span>\n    <span class=\"token comment\">// Ser\u00eda diferente dependiendo del renderizador:</span>\n    node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Devolver el nodo del DOM como resultado del montaje.</span>\n  <span class=\"token comment\">// Aqu\u00ed es donde la recursi\u00f3n finaliza.</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componentes definidos por el usuario</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">mountComposite</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componentes espec\u00edficos a la plataforma</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">mountHost</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrootEl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esto funciona pero todav\u00eda est\u00e1 lejos de ser la implementaci\u00f3n real del reconciliador. El ingrediente faltante clave es el soporte para actualizaciones.</p>\n<h3 id=\"introducing-internal-instances\"><a class=\"anchor\" href=\"/react/implementation-notes#introducing-internal-instances\"></a>Introducci\u00f3n de instancias internas </h3>\n<p>La caracter\u00edstica clave de React es que puedes re-renderizar todo, y no recrear\u00e1 el DOM or reiniciar\u00e1 el estado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Deber\u00eda reutilizar el DOM existente:</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sin embargo, nuestra implementaci\u00f3n anterior solo sabe c\u00f3mo montar el \u00e1rbol inicial. No puede realizar actualizaciones sobre \u00e9l porque no guarda toda la informaci\u00f3n necesaria, como todas las <code class=\"language-javascript\">publicInstance</code>s, o qu\u00e9 DOM <code class=\"language-javascript\">node</code>s corresponden a qu\u00e9 componentes.</p>\n<p>La base de c\u00f3digo del reconciliador de pila resuelve esto convirtiendo la funci\u00f3n <code class=\"language-javascript\">mount()</code> en un m\u00e9todo y poni\u00e9ndolo en una clase. Hay inconvenientes con este enfoque, y estamos yendo en la direcci\u00f3n opuesta con la <a href=\"/react/codebase-overview#fiber-reconciler\">reescritura en curso del reconciliador</a>. A pesar de eso as\u00ed es como funciona ahora.</p>\n<p>En vez de funciones <code class=\"language-javascript\">mountHost</code> y <code class=\"language-javascript\">mountComposite</code> separadas, crearemos dos clases: <code class=\"language-javascript\">DOMComponent</code> y <code class=\"language-javascript\">CompositeComponent</code>.</p>\n<p>Ambas clases tienen un constructor que acepta <code class=\"language-javascript\">element</code>, como tambi\u00e9n un m\u00e9todo <code class=\"language-javascript\">mount()</code> que devuelve el nodo montado. Vamos a reemplazar la funci\u00f3n <code class=\"language-javascript\">mount()</code> de nivel superior por una <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)\">f\u00e1brica</a> que instanciar\u00e1 la clase correcta:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componentes definidos por el usuario</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompositeComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Componentes espec\u00edficos a la plataforma</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Primero, consideremos la implementaci\u00f3n de <code class=\"language-javascript\">CompositeComponent</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Para elementos compuestos, exponer la instancia de la clase.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> publicInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> renderedElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Clase componente</span>\n      publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Establecer las props</span>\n      publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Llamar al ciclo de vida si es necesario</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillMount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      renderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Funci\u00f3n componente</span>\n      publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      renderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Guardar la instancia p\u00fablica</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Instanciar la instancia interna hija acorde al elemento.</span>\n    <span class=\"token comment\">// Ser\u00eda un DOMComponent para &lt;div /&gt; o &lt;p /&gt;,</span>\n    <span class=\"token comment\">// y un CompositeComponent para &lt;App /&gt; o &lt;Button /&gt;:</span>\n    <span class=\"token keyword\">var</span> renderedComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>renderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent <span class=\"token operator\">=</span> renderedComponent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Montar el resultado renderizado</span>\n    <span class=\"token keyword\">return</span> renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto no es muy diferente de nuestra implementaci\u00f3n previa de <code class=\"language-javascript\">mountComposite()</code>, pero ahora podemos guardar alguna informaci\u00f3n, como <code class=\"language-javascript\">this.currentElement</code>, <code class=\"language-javascript\">this.renderedComponent</code>, y <code class=\"language-javascript\">this.publicInstance</code>, para usar durante las actualizaciones.</p>\n<p>Ten en cuenta que una instancia de <code class=\"language-javascript\">CompositeComponent</code> no es lo mismo que una instancia del <code class=\"language-javascript\">element.type</code> proporcionado por el usuario. <code class=\"language-javascript\">CompositeComponent</code> es un detalle de la implementaci\u00f3n de nuestro reconciliador, y nunca es expuesto al usuario. La clase definida por el usuario es la que leemos en <code class=\"language-javascript\">element.type</code>, y <code class=\"language-javascript\">CompositeComponent</code> crea una instancia de esa clase.</p>\n<p>Para evitar la confusi\u00f3n, llamaremos a las instancias de <code class=\"language-javascript\">CompositeComponent</code> y <code class=\"language-javascript\">DOMComponent</code> \u201cinstancias internas\u201d. Estas existen para que podamos asociar datos antiguos a ellas. Solo el renderizador y el reconciliador est\u00e1n al tanto de que existen.</p>\n<p>En contraste, llamamos \u201cinstancia p\u00fablica\u201d a una instancia de una clase definida por el usuario. La instancia p\u00fablica es lo que ves como <code class=\"language-javascript\">this</code> en <code class=\"language-javascript\">render()</code> y en otros m\u00e9todos de tus componentes personalizados.</p>\n<p>La funci\u00f3n <code class=\"language-javascript\">mountHost()</code>, refactorizada para ser el m\u00e9todo <code class=\"language-javascript\">mount()</code> en la clase <code class=\"language-javascript\">DOMComponent</code>, tambi\u00e9n resulta familiar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Para componentes del DOM, s\u00f3lo exponer el nodo del DOM.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Crear y guardar el nodo</span>\n    <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Establecer los atributos</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Crear y guardar los hijos incluidos.</span>\n    <span class=\"token comment\">// Cada uno de ellos puede ser un DOMComponent o un CompositeComponent,</span>\n    <span class=\"token comment\">// dependiendo de si el tipo del elemento es un string o una funci\u00f3n.</span>\n    <span class=\"token keyword\">var</span> renderedChildren <span class=\"token operator\">=</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>instantiateComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren <span class=\"token operator\">=</span> renderedChildren<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Juntar los nodos del DOM que los hijos devuelven en el montaje</span>\n    <span class=\"token keyword\">var</span> childNodes <span class=\"token operator\">=</span> renderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=&gt;</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    childNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childNode</span> <span class=\"token operator\">=&gt;</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Devolver el nodo del DOM como resultado del montaje</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La principal diferencia despu\u00e9s de refactorizar <code class=\"language-javascript\">mountHost()</code> es que ahora podemos mantener <code class=\"language-javascript\">this.node</code> y <code class=\"language-javascript\">this.renderedChildren</code> asociados con la instancia interna del componente del DOM. Tambi\u00e9n los usaremos para aplicar actualizaciones no destructivas en el futuro.</p>\n<p>Como resultado, cada instancia interna, compuesta o anfitri\u00f3n, ahora apunta a sus instancias internas hijas. Para ayudar a visualizar esto, si el componente <code class=\"language-javascript\">&lt;App&gt;</code> de una funci\u00f3n renderiza un componente de clase <code class=\"language-javascript\">&lt;Button&gt;</code>, y la clase <code class=\"language-javascript\">Button</code> renderiza un <code class=\"language-javascript\">&lt;div&gt;</code>, el \u00e1rbol de la instancia interna se ver\u00eda as\u00ed:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>object CompositeComponent<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">currentElement</span><span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">publicInstance</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">renderedComponent</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object CompositeComponent<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">currentElement</span><span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">publicInstance</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object Button<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">renderedComponent</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object DOMComponent<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">currentElement</span><span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>object HTMLDivElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">renderedChildren</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En el DOM s\u00f3lo ver\u00edas el <code class=\"language-javascript\">&lt;div&gt;</code>. Sin embargo el \u00e1rbol de la instancia interna contiene las instancias internas tanto compuestas como anfitriones.</p>\n<p>Las instancias internas compuestas necesitan almacenar:</p>\n<ul>\n<li>El elemento actual.</li>\n<li>La instancia p\u00fablica si el tipo del elemento es una clase.</li>\n<li>La \u00fanica instancia interna renderizada. Puede ser un <code class=\"language-javascript\">DOMComponent</code> o un <code class=\"language-javascript\">CompositeComponent</code>.</li>\n</ul>\n<p>Las instancias internas anfitriones necesitan almacenar:</p>\n<ul>\n<li>El elemento actual.</li>\n<li>El nodo del DOM.</li>\n<li>Todas las instancias internas hijas. Cada una de ellas puede ser un <code class=\"language-javascript\">DOMComponent</code> o un <code class=\"language-javascript\">CompositeComponent</code>.</li>\n</ul>\n<p>Si se te dificulta imaginar como est\u00e1 estructurado un \u00e1rbol de instancias internas en aplicaciones m\u00e1s complejas, las <a class=\"external-link\" href=\"https://github.com/facebook/react-devtools\">React DevTools</a> pueden darte una aproximaci\u00f3n, ya que resaltan las instancias anfitriones con gris, y las instancias compuestas con lila:</p>\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/d96fec10d250eace9756f09543bf5d58/00d43/implementation-notes-tree.png\">\n<span class=\"gatsby-resp-image-wrapper\">\n<span class=\"gatsby-resp-image-background-image\">\n<a class=\"external-link\" href=\"https://es.reactjs.org//static/d96fec10d250eace9756f09543bf5d58/1e088/implementation-notes-tree.png\">Image link</a>\n</span>\n</span>\n</a>\n<p>Para completar esta refactorizaci\u00f3n, introduciremos una funci\u00f3n que monta el \u00e1rbol completo a un nodo contenedor y una instancia p\u00fablica:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Crear la instancia interna de nivel superior</span>\n  <span class=\"token keyword\">var</span> rootComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Montar el componente de nivel superior al contenedor</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  containerNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Devolver la instancia p\u00fablica que provee</span>\n  <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> publicInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"unmounting\"><a class=\"anchor\" href=\"/react/implementation-notes#unmounting\"></a>Desmontaje </h3>\n<p>Ahora que tenemos instancias internas que se aferran a sus hijos y a los nodos del DOM, podemos implementar el desmontaje. Para un elemento compuesto, el desmontaje llama a un m\u00e9todo de ciclo de vida y entra en recursi\u00f3n.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Llamar al m\u00e9todo del ciclo de vida si es necesario</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillUnmount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Desmontar el \u00fanico componente renderizado</span>\n    <span class=\"token keyword\">var</span> renderedComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent<span class=\"token punctuation\">;</span>\n    renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para <code class=\"language-javascript\">DomComponent</code>, el desmontaje le avisa a cada hijo que se debe desmontar:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Desmontar todos los hijos</span>\n    <span class=\"token keyword\">var</span> renderedChildren <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren<span class=\"token punctuation\">;</span>\n    renderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=&gt;</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En la pr\u00e1ctica, desmontar componentes del DOM tambi\u00e9n remueve los manejadores de eventos y limpia algunas cach\u00e9s, pero nos saltearemos esos detalles.</p>\n<p>Ahora podemos agregar una nueva funci\u00f3n de nivel superior llamada <code class=\"language-javascript\">unmountTree(containerNode)</code> que es similar a <code class=\"language-javascript\">ReactDOM.unmountComponentAtNode()</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">unmountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Leer esta instancia interna desde un nodo del DOM:</span>\n  <span class=\"token comment\">// (Esto no funciona todav\u00eda, necesitaremos cambiar mountTree() para guardarlo.)</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> rootComponent <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>_internalInstance<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Desmontar el \u00e1rbol y limpiar el contenedor</span>\n  rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  containerNode<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para que esto funcione, necesitamos leer una instancia interna ra\u00edz de un nodo del DOM. Modificaremos <code class=\"language-javascript\">mountTree()</code> para agregar la propiedad <code class=\"language-javascript\">_internalInstance</code> al nodo ra\u00edz del DOM. Tambi\u00e9n le ense\u00f1aremos a <code class=\"language-javascript\">mountTree()</code> a destruir cualquier \u00e1rbol existente as\u00ed puede ser llamado m\u00faltiples veces:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Destruir cualquier \u00e1rbol existente</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unmountTree</span><span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Creaer la instancia interna de nivel superior</span>\n  <span class=\"token keyword\">var</span> rootComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Montar el componente de nivel superior al contenedor</span>\n  <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  containerNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Guardar una referencia a la instancia interna</span>\n  node<span class=\"token punctuation\">.</span>_internalInstance <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Devolver la instancia p\u00fablica que provee</span>\n  <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> publicInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora, ejecutando <code class=\"language-javascript\">unmountTree()</code>, o ejecutando <code class=\"language-javascript\">mountTree()</code> repetidamente, remueve el \u00e1rbol viejo y ejecuta el m\u00e9todo de ciclo de vida <code class=\"language-javascript\">componentWillUnmount()</code> en los componentes.</p>\n<h3 id=\"updating\"><a class=\"anchor\" href=\"/react/implementation-notes#updating\"></a>Actualizaci\u00f3n </h3>\n<p>En la secci\u00f3n anterior, implementamos el desmontaje. Sin embargo React no ser\u00eda muy \u00fatil si cada cambio en una prop desmontara y montara el \u00e1rbol entero. El objetivo del reconciliador es el de reutilizar instancias existentes donde sea posible para preservar el DOM y el estado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Deber\u00eda reutilizar el DOM existente:</span>\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Extenderemos el contrato de nuestra instancia interna con un m\u00e9todo m\u00e1s. Sumado a <code class=\"language-javascript\">mount()</code> y <code class=\"language-javascript\">unmount()</code>, tanto <code class=\"language-javascript\">DOMComponent</code> como <code class=\"language-javascript\">CompositeComponent</code> implementar\u00e1n un nuevo m\u00e9todo llamado <code class=\"language-javascript\">receive(nextElement)</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Su trabajo es hacer lo necesario para mantener el componente (y a cualquiera de sus hijos) actualizados con la descripci\u00f3n provista por <code class=\"language-javascript\">nextElement</code>.</p>\n<p>Esta es la parte frecuentemente descripta como \u201cdiferenciaci\u00f3n del virtual DOM\u201d aunque lo que realmente sucede es que recorremos el \u00e1rbol interno recursivamente y dejamos que cada instancia interna reciba una actualizaci\u00f3n.</p>\n<h3 id=\"updating-composite-components\"><a class=\"anchor\" href=\"/react/implementation-notes#updating-composite-components\"></a>Actualizaci\u00f3n de componentes compuestos </h3>\n<p>Cuando un componente compuesto recibe un nuevo elemento, ejecutamos el m\u00e9todo de ciclo de vida <code class=\"language-javascript\">componentWillUpdate()</code>.</p>\n<p>Luego re-renderizamos el componente con las nuevas props, y obtenemos el siguiente elemento renderizado:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> prevProps <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> publicInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevRenderedComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevRenderedElement <span class=\"token operator\">=</span> prevRenderedComponent<span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Actualizar *el propio* elemento</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextProps <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Averiguar cual es el resultado del siguiente render()</span>\n    <span class=\"token keyword\">var</span> nextRenderedElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClass</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Clase componente</span>\n      <span class=\"token comment\">// Llamar al ciclo de vida si es necesario</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">.</span>componentWillUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Actualizar las props</span>\n      publicInstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> nextProps<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Re-renderizar</span>\n      nextRenderedElement <span class=\"token operator\">=</span> publicInstance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Funci\u00f3n componente</span>\n      nextRenderedElement <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Despu\u00e9s, podemos mirar el <code class=\"language-javascript\">type</code> del elemento renderizado. Si el <code class=\"language-javascript\">type</code> no cambi\u00f3 desde el \u00faltimo renderizado, el siguiente componente puede ser actualizado en su lugar.</p>\n<p>Por ejemplo, si devuelve <code class=\"language-javascript\">&lt;Button color=\"red\" /&gt;</code> la primera vez, y <code class=\"language-javascript\">&lt;Button color=\"blue\" /&gt;</code> la segunda vez, podemos simplemente decirle a la instancia interna correspondiente que ejecute <code class=\"language-javascript\">receive()</code> al siguiente elemento:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Si el tipo del elemento renderizado no cambi\u00f3,</span>\n    <span class=\"token comment\">// reutilizar la instancia existente del componente y salir.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevRenderedElement<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> nextRenderedElement<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prevRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>nextRenderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Sin embargo, si el siguiente elemento renderizado tiene un <code class=\"language-javascript\">type</code> diferente al del anterior elemento renderizado, no podemos actualizar la instancia interna. Un <code class=\"language-javascript\">&lt;button&gt;</code> no puede \u201cconvertirse\u201d en un <code class=\"language-javascript\">&lt;input&gt;</code>.</p>\n<p>En cambio, tenemos que desmontar la instancia interna existene y montar la nueva correspondiente al tipo del elemento renderizado. Por ejemplo, esto es lo que pasa cuando un componente que anteriormente renderizaba un <code class=\"language-javascript\">&lt;button /&gt;</code> ahora renderiza un <code class=\"language-javascript\">&lt;input /&gt;</code>.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Si llegamos hasta este punto, necesitamos desmontar el componente</span>\n    <span class=\"token comment\">// montado anteriormente, montar el nuevo, y cambiar sus nodos.</span>\n\n    <span class=\"token comment\">// Encontrar el nodo viejo porque ser\u00e1 necesario reemplazarlo</span>\n    <span class=\"token keyword\">var</span> prevNode <span class=\"token operator\">=</span> prevRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Desmontar el hijo viejo y montar el nuevo</span>\n    prevRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextRenderedComponent <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>nextRenderedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextNode <span class=\"token operator\">=</span> nextRenderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Reemplazar la referencia al hijo</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent <span class=\"token operator\">=</span> nextRenderedComponent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Reemplazar el nodo viejo por el nuevo</span>\n    <span class=\"token comment\">// Nota: este c\u00f3digo es espec\u00edfico a cada renderizador</span>\n    <span class=\"token comment\">// e idealmente deber\u00eda estar fuera de CompositeComponent:</span>\n    prevNode<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">,</span> prevNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para resumir, cuando un componente compuesto recibe un nuevo elemento, puede delegar la actualizaci\u00f3n a sus instancias internas renderizadas, o desmontarlo y montar uno nuevo en su lugar.</p>\n<p>Hay otra condici\u00f3n por la que un componente elegir\u00e1 volver a montar en vez de recibir un elemento, y es cuando la <code class=\"language-javascript\">key</code> del elemento ha cambiado. No hablamos sobre el manejo de <code class=\"language-javascript\">key</code> en este documento porque agrega m\u00e1s complejidad a un tutorial complejo en s\u00ed.</p>\n<p>N\u00f3tese que necesitamos agregar un m\u00e9todo llamado <code class=\"language-javascript\">getHostNode()</code> al contrato de la instancia interna para que sea posible localizar el nodo espec\u00edfico a la plataforma y reemplazarlo durante la actualizaci\u00f3n. Su implementaci\u00f3n para ambas clases es simple:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Consultar al componente renderizado para que lo provea.</span>\n    <span class=\"token comment\">// Esto examinar\u00e1 de manera recursiva cualquier compuesto.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedComponent<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"updating-host-components\"><a class=\"anchor\" href=\"/react/implementation-notes#updating-host-components\"></a>Actualizaci\u00f3n de componentes anfitriones </h3>\n<p>Las implementaciones de componentes anfitriones, como <code class=\"language-javascript\">DOMComponent</code>, se actualizan de manera diferente. Cuando reciben un elemento, necesitan actualizar la vista subyacente espec\u00edfica a la plataforma.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DOMComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevElement <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevProps <span class=\"token operator\">=</span> prevElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextProps <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentElement <span class=\"token operator\">=</span> nextElement<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Remover atributos viejos.</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>nextProps<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Establecer los siguientes atributos</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propName</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Luego, los componentes anfitriones necesitan actualizar sus hijos. A diferencia de los componentes compuestos, pueden contener m\u00e1s de un hijo.</p>\n<p>En este ejemplo simplificado, usamos un <em>array</em> de instancias internas e iteramos sobre \u00e9l, ya sea actualiz\u00e1ndolo o reemplazando las instancias internas dependiendo de si el <code class=\"language-javascript\">type</code> recibido coincide con el <code class=\"language-javascript\">type</code> anterior. El reconciliador real adem\u00e1s tiene en cuenta la <code class=\"language-javascript\">key</code> del elemento y rastrea los movimientos adem\u00e1s de las inserciones y las supresiones, pero omitiremos esta l\u00f3gica por ahora.</p>\n<p>Recogemos las operaciones del DOM sobre hijos en una lista para poder ejecutarlas en lote:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Estos son arrays de elementos de React:</span>\n    <span class=\"token keyword\">var</span> prevChildren <span class=\"token operator\">=</span> prevProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>prevChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prevChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>prevChildren<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> nextChildren <span class=\"token operator\">=</span> nextProps<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nextChildren<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Estos son arrays de instancias internas:</span>\n    <span class=\"token keyword\">var</span> prevRenderedChildren <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> nextRenderedChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// A medida que iteramos sobre los hijos, a\u00f1adiremos operaciones al array.</span>\n    <span class=\"token keyword\">var</span> operationQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Nota: \u00a1la siguiente secci\u00f3n est\u00e1 extremadamente simplificada!</span>\n    <span class=\"token comment\">// No acepta reordenamientos, hijos con vac\u00edos, o keys.</span>\n    <span class=\"token comment\">// S\u00f3lo existe para ilustrar el flujo en general, sin especificaciones.</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nextChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Tratar de obtener una instancia interna existente para este hijo</span>\n      <span class=\"token keyword\">var</span> prevChild <span class=\"token operator\">=</span> prevRenderedChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Si no hay una instancia interna en este \u00edndice,</span>\n      <span class=\"token comment\">// un hijo ha sido anexado al final. Crear una nueva</span>\n      <span class=\"token comment\">// instancia interna, montarla, y usar su nodo.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prevChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> nextChild <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> nextChild<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Registrar que necesitamos a\u00f1adir un nodo</span>\n        operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextRenderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nextChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Podemos actualizar la instancia solo si el type de su elemento coincide.</span>\n      <span class=\"token comment\">// Por ejemplo, &lt;Button size=\"small\" /&gt; puede ser actualizado a</span>\n      <span class=\"token comment\">// &lt;Button size=\"large\" /&gt; pero no a &lt;App /&gt;.</span>\n      <span class=\"token keyword\">var</span> canUpdate <span class=\"token operator\">=</span> prevChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Si no podemos actualizar una instancia existente, tenemos que</span>\n      <span class=\"token comment\">// desmontarla y montar una nueva en su lugar.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>canUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> prevNode <span class=\"token operator\">=</span> prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> nextChild <span class=\"token operator\">=</span> <span class=\"token function\">instantiateComponent</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> nextNode <span class=\"token operator\">=</span> nextChild<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Registar que necesitamos intercambiar los nodos</span>\n        operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'REPLACE'</span><span class=\"token punctuation\">,</span> prevNode<span class=\"token punctuation\">,</span> nextNode<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextRenderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nextChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Si podemos actualizar una instancia interna existente,</span>\n      <span class=\"token comment\">// permitirle recibir el siguiente elemento y manejar so propia actualizaci\u00f3n.</span>\n      prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>nextChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nextRenderedChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prevChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Finalmente, desmontar cualquier hijo que no exista:</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> nextChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> prevChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> prevChild <span class=\"token operator\">=</span> prevRenderedChildren<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">getHostNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      prevChild<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Registar que necesitamos remover el nodo</span>\n      operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'REMOVE'</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Marcar la lista de hijos renderizados como la versi\u00f3n actualizada.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderedChildren <span class=\"token operator\">=</span> nextRenderedChildren<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Como \u00faltimo paso, ejecutamos las operaciones del DOM. Nuevamente, el c\u00f3digo del reconciliador real es m\u00e1s complejos porque tambi\u00e9n maneja movimientos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">// Procesar la cola de operaciones.</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>operationQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> operation <span class=\"token operator\">=</span> operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'ADD'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'REPLACE'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>nextNode<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">.</span>prevNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'REMOVE'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Y eso es todo para actualizar los componentes anfitriones.</p>\n<h3 id=\"top-level-updates\"><a class=\"anchor\" href=\"/react/implementation-notes#top-level-updates\"></a>Actualizaciones de nivel superior </h3>\n<p>Ahora que tanto <code class=\"language-javascript\">CompositeComponent</code> como <code class=\"language-javascript\">DOMComponent</code> implementan el m\u00e9todo <code class=\"language-javascript\">receive(nextElement)</code>, podemos cambiar la funci\u00f3n de nivel superior <code class=\"language-javascript\">mountTree()</code> para usarla cuando el <code class=\"language-javascript\">type</code> del elemento sea el mismo que la \u00faltima vez:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> containerNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Verificar por un \u00e1rbol existente</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> prevNode <span class=\"token operator\">=</span> containerNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevRootComponent <span class=\"token operator\">=</span> prevNode<span class=\"token punctuation\">.</span>_internalInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> prevElement <span class=\"token operator\">=</span> prevRootComponent<span class=\"token punctuation\">.</span>currentElement<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Si podemos, reutilizar el componente ra\u00edz existente</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevElement<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prevRootComponent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// En el otro caso, desmontar el \u00e1rbol existente</span>\n    <span class=\"token function\">unmountTree</span><span class=\"token punctuation\">(</span>containerNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora llamar a <code class=\"language-javascript\">mountTree()</code> dos veces con el mismo tipo no es destructivo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> rootEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Reutiliza el DOM existente:</span>\n<span class=\"token function\">mountTree</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">,</span> rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esto es lo b\u00e1sico sobre c\u00f3mo funciona React internamente.</p>\n<h3 id=\"what-we-left-out\"><a class=\"anchor\" href=\"/react/implementation-notes#what-we-left-out\"></a>Lo que dejamos fuera </h3>\n<p>Este documento est\u00e1 simplificado en comparaci\u00f3n a la base de c\u00f3digo real. Hay algunos aspectos importantes que no abordamos:</p>\n<ul>\n<li>Los componentes pueden renderizar <code class=\"language-javascript\">null</code>, y el reconciliador puede aceptar \u201cespacios vac\u00edos\u201d en <em>arrays</em> y resultados renderizados.</li>\n<li>El reconciliador tambi\u00e9n lee la <code class=\"language-javascript\">key</code> de los elementos, y la usa para establecer a qu\u00e9 instancia interna corresponde cada elemento en un <em>array</em>. Una gran parte de la complejidad en la implementaci\u00f3n actual de React tiene que ver con eso.</li>\n<li>Adem\u00e1s de clases de instancias internas anfitriones y compuestas, tambi\u00e9n existen clases para componentes de \u201ctexto\u201d y \u201cvac\u00edos\u201d. Representan nodos de texto y los \u201cespacios vac\u00edos\u201d que se obtienen al renderizar <code class=\"language-javascript\">null</code>.</li>\n<li>Los renderizadores usan <a href=\"/react/codebase-overview#dynamic-injection\">inyecci\u00f3n</a> para pasar la clase interna anfitri\u00f3n al reconciliador. Por ejemplo, React DOM le dice al reconciliador que use <code class=\"language-javascript\">ReactDOMComponent</code> como la implementaci\u00f3n de una instancia interna anfitri\u00f3n.</li>\n<li>La l\u00f3gica para actualizar la lista de hijos se extrae en un mixin llamado <code class=\"language-javascript\">ReactMultiChild</code> que es utilizado por las implementaciones de clases de instancias internas anfitriones tanto para React DOM como para React Native.</li>\n<li>La implementaci\u00f3n del reconciliador tambi\u00e9n permite el funcionamiento de <code class=\"language-javascript\">setState()</code> en componentes compuestos. M\u00faltiples actualizaciones dentro de manejadores de eventos son procesadas por lote en una sola actualizaci\u00f3n.</li>\n<li>El reconciliador tambi\u00e9n se encarga de adjuntar y desconectar las referencias a componentes compuestos y nodos anfitriones.</li>\n<li>Los m\u00e9todos de ciclo de vida que son llamados despu\u00e9s de que el DOM est\u00e1 listo, como <code class=\"language-javascript\">componentDidMount()</code> and <code class=\"language-javascript\">componentDidUpdate()</code>, son recogidos en \u201ccolas de callbacks\u201d y son ejecutados en un solo lote.</li>\n<li>React pone informaci\u00f3n sobre la actualizaci\u00f3n en curso dentro de un objeto interno llamado \u201ctransacci\u00f3n\u201d. Las transacciones son \u00fatiles para hacer un seguimiento de la cola de m\u00e9todos de ciclo de vida pendientes, la anidaci\u00f3n actual del DOM para las alertas, y todo lo dem\u00e1s que sea \u201cglobal\u201d a una actualizaci\u00f3n espec\u00edfica. Las transacciones tambi\u00e9n aseguran que React \u201climpie todo\u201d luego de las actualizaciones. Por ejemplo, la clase transacci\u00f3n provista por React DOM restaura la selecci\u00f3n del <em>input</em> despu\u00e9s de cada actualizaci\u00f3n.</li>\n</ul>\n<h3 id=\"jumping-into-the-code\"><a class=\"anchor\" href=\"/react/implementation-notes#jumping-into-the-code\"></a>Meti\u00e9ndose al c\u00f3digo </h3>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/dom/client/ReactMount.js\"><code class=\"language-javascript\">ReactMount</code></a> es donde est\u00e1 el c\u00f3digo de <code class=\"language-javascript\">mountTree()</code> y <code class=\"language-javascript\">unmountTree()</code> de este tutorial. Se encarga de montar y desmontar componentes de nivel superior. <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/native/ReactNativeMount.js\"><code class=\"language-javascript\">ReactNativeMount</code></a> es su an\u00e1logo en React Native.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/dom/shared/ReactDOMComponent.js\"><code class=\"language-javascript\">ReactDOMComponent</code></a> es el equivalente a <code class=\"language-javascript\">DOMComponent</code> en este tutorial. Implementa la clase de los componentes anfitriones para el renderizador React DOM. <a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/native/ReactNativeBaseComponent.js\"><code class=\"language-javascript\">ReactNativeBaseComponent</code></a> es su an\u00e1logo en React Native.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js\"><code class=\"language-javascript\">ReactCompositeComponent</code></a> es el equivalente a <code class=\"language-javascript\">CompositeComponent</code> es este tutorial. Maneja las llamadas a componentes definidos por el usuario y el mantenimiento de su estado.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/instantiateReactComponent.js\"><code class=\"language-javascript\">instantiateReactComponent</code></a> contiene el interruptor que elige la clase correcta de una instancia interna a construir para un elemento. Es equivalente a <code class=\"language-javascript\">instantiateComponent()</code> en este tutorial.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactReconciler.js\"><code class=\"language-javascript\">ReactReconciler</code></a> es un <em>wrapper</em> que contiene los m\u00e9todos <code class=\"language-javascript\">mountComponent()</code>, <code class=\"language-javascript\">receiveComponent()</code> y <code class=\"language-javascript\">unmountComponent()</code>. Llama a las implementaciones subyacentes en las instancias internas, pero tambi\u00e9n incluye c\u00f3digo sobre ellas que es compartido por todas las implementaciones de instancias internas.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactChildReconciler.js\"><code class=\"language-javascript\">ReactChildReconciler</code></a> implementa la l\u00f3gica para montar, actualizar, y desmontar hijos de acuerdo a la <code class=\"language-javascript\">key</code> de sus elementos.</li>\n<li><a class=\"external-link\" href=\"https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactMultiChild.js\"><code class=\"language-javascript\">ReactMultiChild</code></a> implementa el procesamiento de la cola de operaciones para inserciones de hijos, supresiones, y movimientos independientemente del renderizador.</li>\n<li><code class=\"language-javascript\">mount()</code>, <code class=\"language-javascript\">receive()</code>, y <code class=\"language-javascript\">unmount()</code> son en realidad llamados <code class=\"language-javascript\">mountComponent()</code>, <code class=\"language-javascript\">receiveComponent()</code>, y <code class=\"language-javascript\">unmountComponent()</code> en la base de c\u00f3digo de React por razones de herencia, pero reciben elementos.</li>\n<li>Las propiedades en las instancias internas comienzan con un gui\u00f3n bajo, por ej. <code class=\"language-javascript\">_currentElement</code>. Son considerados campos p\u00fablicos de solo lectura a trav\u00e9s de la base de c\u00f3digo.</li>\n</ul>\n<h3 id=\"future-directions\"><a class=\"anchor\" href=\"/react/implementation-notes#future-directions\"></a>Futuras direcciones </h3>\n<p>El reconciliador de pila tiene limitaciones inherentes como ser sincr\u00f3nico y no permitir interrumpir el trabajo o dividirlo en fragmentos. Hay trabajo en progreso en el <a href=\"/react/codebase-overview#fiber-reconciler\">nuevo reconciliador Fiber</a> con una <a class=\"external-link\" href=\"https://github.com/acdlite/react-fiber-architecture\">arquitectura completamente diferente</a>. En el futuro, pretendemos reemplazar el reconciliador de pila con Fiber, pero por el momento est\u00e1 lejos de igualar sus caracter\u00edsticas.</p>\n<h3 id=\"next-steps\"><a class=\"anchor\" href=\"/react/implementation-notes#next-steps\"></a>Siguientes pasos </h3>\n<p>Lee la <a href=\"/react/design-principles\">siguiente secci\u00f3n</a> para aprender sobre los principios que nos gu\u00edan en el desarrollo de React.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/implementation-notes.md\">Edit this page</a></p></div></article>", "path": "/react/implementation-notes", "nav": ["/react/codebase-overview", "/react/design-principles"]}, {"key": "Principios de dise\u00f1o", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>Escribimos este documento para que tengas una mejor idea de como decidimos lo que hace y lo que no hace React, y como es nuestra filosof\u00eda de desarrollo. Si bien estamos entusiasmados por ver contribuciones de la comunidad, es poco probable que elijamos una ruta que viole uno o m\u00e1s de estos principios.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Este documento asume un fuerte entendimiento de React. Describe los principios de dise\u00f1o de <em>React en s\u00ed mismo</em>, no de componentes o aplicaciones de React.</p>\n<p>Para una introducci\u00f3n a React, chequea en su lugar <a href=\"/react/thinking-in-react\">Pensando en React</a>.</p>\n</div>\n<h3 id=\"composition\"><a class=\"anchor\" href=\"/react/design-principles#composition\"></a>Composici\u00f3n </h3>\n<p>La caracter\u00edstica clave de React es la composici\u00f3n de componentes. Los componentes escritos por distintas personas deben trabajar bien en conjunto. Es importante para nosotros que puedas a\u00f1adir funcionalidad a un componente sin causar una ola de cambios a lo largo de la base de c\u00f3digo.</p>\n<p>Por ejemplo, deber\u00eda ser posible introducir alg\u00fan estado local en un componente sin cambiar ninguno de los componentes que lo usen. Igualmente, deber\u00eda ser posible a\u00f1adir c\u00f3digo de inicializaci\u00f3n y destrucci\u00f3n a cualquier componente cuando sea necesario.</p>\n<p>No hay nada \u201cmalo\u201d en usar estado o m\u00e9todos del ciclo de vida en componentes. Como cualquier funcionalidad poderosa, deben ser usados con moderaci\u00f3n, pero no tenemos intenci\u00f3n de eliminarlos. Por el contrario, pensamos que son parte integral de lo que hace \u00fatil a React. Podr\u00edamos habilitar <a class=\"external-link\" href=\"https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State\">patrones m\u00e1s funcionales</a> en el futuro, pero tanto el estado local como los m\u00e9todos del ciclo de vida ser\u00e1n parte de ese modelo.</p>\n<p>Los componentes son a menudo descritos como \u201csolo funciones\u201d, pero desde nuestro punto de vista necesitan ser m\u00e1s que eso para ser \u00fatiles. En React, los componentes describen cualquier comportamiento componible, y esto incluye el renderizado, el ciclo de vida y el estado. Algunas bibliotecas externas como <a class=\"external-link\" href=\"https://facebook.github.io/relay/\">Relay</a> aumentan los componentes con otras responsabilidades tales como describir las dependencias de datos. Es posible que esas ideas tambi\u00e9n sean integradas en React de alguna manera.</p>\n<h3 id=\"common-abstraction\"><a class=\"anchor\" href=\"/react/design-principles#common-abstraction\"></a>Abstracciones comunes </h3>\n<p>En general <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=4anAwXYqLG8\">evitamos a\u00f1adir funcionalidades</a> que puedan ser implementadas en espacio de usuario. No queremos sobrecargar tus aplicaciones con c\u00f3digo de biblioteca que sea in\u00fatil. Sin embargo, existen excepciones.</p>\n<p>Por ejemplo, si React no proveyera soporte para el estado local o m\u00e9todos del ciclo de vida, las personas crear\u00edan abstracciones propias para eso. Cuando existen m\u00faltiples abstracciones compitiendo, React no puede imponer o aprovechar las propiedades de ninguna de ellas. Tendr\u00eda que trabajar con el m\u00ednimo com\u00fan denominador.</p>\n<p>Es por eso que algunas veces a\u00f1adimos funcionalidades a React. Si notamos que muchos componentes implementan una funcionalidad en espec\u00edfico de manera ineficiente o incompatible, podr\u00edamos preferir incluirla en React. No lo hacemos a la ligera. Cuando lo hacemos, es porque estamos confiados de que elevar el nivel de la abstracci\u00f3n beneficia al ecosistema en su conjunto. El estado, los m\u00e9todos del ciclo de vida, y la normalizaci\u00f3n de eventos entre navegadores son ejemplos claros de esto.</p>\n<p>Siempre discutimos estas propuestas de mejora con la comunidad. Puedes encontrar algunas de estas discusiones con la etiqueta <a class=\"external-link\" href=\"https://github.com/facebook/react/issues?q=is:open+is:issue+label:%22Type:+Big+Picture%22\">\u201cbig picture\u201d</a> en el gestor de incidencias de React.</p>\n<h3 id=\"escape-hatches\"><a class=\"anchor\" href=\"/react/design-principles#escape-hatches\"></a>V\u00e1lvulas de escape </h3>\n<p>React es pragm\u00e1tico. Esta guiado por la necesidad de los productos escritos en Facebook. Si bien es influenciado por algunos paradigmas que a\u00fan no son totalmente convencionales, tales como la programaci\u00f3n funcional, mantenerlo accesible a un amplio rango de programadores con distintos niveles de experiencia y habilidades es uno de los objetivos expl\u00edcitos del proyecto.</p>\n<p>Si queremos descontinuar un patr\u00f3n que no nos gusta, es nuestra responsabilidad considerar todos los casos de uso existentes para \u00e9l, y antes de descontinuarlo <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">educar a la comunidad respecto a las alternativas</a>. Si alg\u00fan patr\u00f3n es \u00fatil para construir aplicaciones, pero es dif\u00edcil de expresar de una manera declarativa, <a href=\"/react/more-about-refs\">proveeremos una API imperativa</a>. Si no podemos encontrar una API perfecta para algo que consideramos necesario en m\u00faltiples aplicaciones, <a href=\"/react/legacy-context\">temporalmente proporcionaremos una API funcional</a> siempre y cuando sea posible librarnos de ella posteriormente, y se deje la puerta abierta a mejoras futuras.</p>\n<h3 id=\"stability\"><a class=\"anchor\" href=\"/react/design-principles#stability\"></a>Estabilidad </h3>\n<p>Valoramos la estabilidad de la API. En Facebook tenemos m\u00e1s de 50 mil componentes usando React. Muchas otras compa\u00f1\u00edas, incluyendo <a class=\"external-link\" href=\"https://twitter.com/\">Twitter</a> y <a class=\"external-link\" href=\"https://www.airbnb.com/\">Airbnb</a>, tambi\u00e9n usan React extensamente. Es por eso que usualmente somos reacios a cambiar APIs o comportamientos p\u00fablicos.</p>\n<p>Sin embargo, creemos que la estabilidad en el sentido de \u201cnada cambia\u201d est\u00e1 sobrevalorada. Se transforma r\u00e1pidamente en estancamiento. En su lugar, preferimos la estabilidad en el sentido de \u201ces ampliamente usado en producci\u00f3n, y cuando algo cambia, hay una ruta clara (y preferiblemente automatizada) de migraci\u00f3n.\u201d</p>\n<p>Cuando descontinuamos un patr\u00f3n, estudiamos su uso interno en Facebook y a\u00f1adimos advertencias de descontinuaci\u00f3n. Esto nos permite evaluar el impacto del cambio. A veces nos retractamos si vemos que es muy temprano, y que necesitamos pensar de una manera m\u00e1s estrat\u00e9gica como llevar las bases de c\u00f3digo al punto en el cual est\u00e9n listas para este cambio.</p>\n<p>Si confiamos que el cambio no es muy disruptivo y que la estrategia de migraci\u00f3n es viable para todos los casos de uso, liberamos las notificaciones de descontinuaci\u00f3n a la comunidad de c\u00f3digo abierto. Estamos en contacto cercano con muchos usuarios de React por fuera de Facebook, y monitoreamos proyectos de c\u00f3digo abierto populares, y los guiamos en la resoluci\u00f3n de estas descontinuaciones.</p>\n<p>Dado el inmenso tama\u00f1o de la base de c\u00f3digo en React de Facebook, una migraci\u00f3n interna exitosa es a menudo un buen indicador de que otras compa\u00f1\u00edas tampoco tendr\u00e1n problemas. Sin embargo, a veces las personas nos indican casos de usos adicionales que no hab\u00edamos pensado, y a\u00f1adimos v\u00e1lvulas de escape para ellos o repensamos nuestro enfoque.</p>\n<p>No descontinuamos nada sin una buena raz\u00f3n. Reconocemos que a veces las advertencias de descontinuaci\u00f3n causan frustraci\u00f3n, pero las a\u00f1adimos porque las descontinuaciones limpian el camino para las mejoras y nuevas funcionalidades que nosotros y muchos en la comunidad consideran valiosas.</p>\n<p>Por ejemplo, en React 15.2.0 a\u00f1adimos <a class=\"external-link\" href=\"https://es.reactjs.org//warnings/unknown-prop.html\">una advertencia acerca de props desconocidos en el DOM</a>. Muchos proyectos fueron afectados por esto. Sin embargo arreglar esta advertencia es importante para poder introducir en React soporte para <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/140\">atributos personalizados</a>. Hay una raz\u00f3n como esta detr\u00e1s de cada advertencia de descontinuaci\u00f3n que a\u00f1adimos.</p>\n<p>Cuando a\u00f1adimos una advertencia de descontinuaci\u00f3n, la mantenemos por el resto de la versi\u00f3n mayor actual, y <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2016/02/19/new-versioning-scheme.html\">cambiamos el comportamiento en la siguiente versi\u00f3n mayor</a>. Si hay un mont\u00f3n de trabajo manual involucrado, liberamos un script de <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=d0pOgY8__JM\">codemod</a> que automatiza la mayor parte del cambio. Los <em>Codemods</em> nos permiten avanzar sin estancamiento en una base de c\u00f3digo masivo, y te alentamos a que tambi\u00e9n los uses.</p>\n<p>Puedes encontrar los <em>codemods</em> que hemos liberado en el repositorio <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod\">react-codemod</a>.</p>\n<h3 id=\"interoperability\"><a class=\"anchor\" href=\"/react/design-principles#interoperability\"></a>Interoperabilidad </h3>\n<p>Valoramos altamente la interoperabilidad con sistemas existentes y la adopci\u00f3n gradual. Facebook tiene una base de c\u00f3digo masiva que no es React. Sus sitios web usan una mezcla de un sistema de componentes del lado de servidor llamado XHP, bibliotecas internas de interfaz de usuario previas a React, y React. Para nosotros es importante que cualquier equipo de producto pueda <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=BF58ZJ1ZQxY\">comenzar usando React para una funcionalidad peque\u00f1a</a> en vez de reescribir su c\u00f3digo para apostar por \u00e9l.</p>\n<p>Es por eso que React provee v\u00e1lvulas de escape para trabajar con modelos mutables, y trata de trabajar bien con otras bibliotecas de interfaz de usuario. Puedes envolver una interfaz de usuario imperativa en un componente declarativo, y viceversa. Esto es crucial para la adopci\u00f3n gradual.</p>\n<h3 id=\"scheduling\"><a class=\"anchor\" href=\"/react/design-principles#scheduling\"></a>Planificaci\u00f3n </h3>\n<p>Incluso cuando tus componentes son descritos como funciones, al usar React no los llamas directamente. Cada componente retorna una <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2015/12/18/react-components-elements-and-instances.html#elements-describe-the-tree\">descripci\u00f3n de lo que necesita ser renderizado</a>, y dicha descripci\u00f3n puede incluir componentes escritos por el usuario como <code class=\"language-javascript\">&lt;LikeButton&gt;</code> y componentes espec\u00edficos de la plataforma como <code class=\"language-javascript\">&lt;div&gt;</code>. Corresponde a React \u201cdesenrollar\u201d <code class=\"language-javascript\">&lt;LikeButton&gt;</code> en alg\u00fan momento en el futuro y aplicar recursivamente los cambios al \u00e1rbol de interfaz de usuario de acuerdo a los resultados de renderizar los componentes.</p>\n<p>Esta es una distinci\u00f3n sutil pero poderosa. Dado que no llamas la funci\u00f3n del componente, pero dejas que React la llame, esto significa que React tiene el poder de retrasar esta llamada si es necesario. En su implementaci\u00f3n actual React recorre el \u00e1rbol recursivamente y llama a las funciones de renderizado del \u00e1rbol completamente actualizado en un \u00fanico <code class=\"language-javascript\">tick</code>. Sin embargo, en el futuro podr\u00eda empezar a <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/6170\">retrasar algunas actualizaciones para evitar la eliminaci\u00f3n de cuadros</a>.</p>\n<p>Este es un tema com\u00fan en el dise\u00f1o de React. Algunas bibliotecas populares implementan el enfoque <em>\u201cpush\u201d</em> en el cual la computaci\u00f3n se realiza cuando nuevos datos est\u00e1n disponibles. React, sin embargo, se apega al enfoque <em>\u201cpull\u201d</em> en el cual las computaciones pueden ser retrasadas hasta que sean necesarias.</p>\n<p>React no es una biblioteca gen\u00e9rica de procesamiento de datos. Es una biblioteca para construir interfaces de usuario. Creemos que est\u00e1 posicionada de forma \u00fanica en una aplicaci\u00f3n para conocer cuales computaciones son relevantes inmediatamente y cuales no.</p>\n<p>Si algo se encuentra fuera de la pantalla, podemos retrasar cualquier l\u00f3gica relacionada. Si los datos est\u00e1n llegando m\u00e1s r\u00e1pido que la tasa de cuadros por segundos, podemos fusionar y agrupar por lotes las actualizaciones. Podemos priorizar el trabajo proveniente de las interacciones del usuario (tales como las animaciones causadas por presionar un bot\u00f3n) por encima de trabajo en segundo plano menos importante (tal como renderizar nuevo contenido descargado recientemente de la red) para evitar la perdida de cuadros.</p>\n<p>Para estar claros, no estamos aprovechando esto en este momento. Sin embargo la libertad de poder hacerlo es la raz\u00f3n por la que preferimos tener el control sobre la planificaci\u00f3n, y por la que <code class=\"language-javascript\">setState()</code> es as\u00edncrono. Conceptualmente, pensamos acerca de esto como \u201cplanificar una actualizaci\u00f3n\u201d.</p>\n<p>El control sobre la planificaci\u00f3n nos ser\u00eda m\u00e1s dif\u00edcil de obtener si dejamos que el usuario componga vistas directamente con un paradigma basado en <em>\u201cpush\u201d</em> com\u00fan en algunas variantes de la <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Functional_reactive_programming\">Programaci\u00f3n Funcional Reactiva</a>. Queremos tener la propiedad sobre el c\u00f3digo \u201cpega\u201d.</p>\n<p>Es un objetivo clave para React que la cantidad del c\u00f3digo de usuario que se ejecute antes de regresar a React sea m\u00ednimo. Esto asegura que React retenga la capacidad de planificar y dividir el trabajo en trozos de acuerdo a lo que conoce acerca de la interfaz de usuario.</p>\n<p>Tenemos un chiste interno en el equipo de React acerca de que deber\u00eda haberse llamado <em>\u201cSchedule\u201d</em> (el ingl\u00e9s para Plan), ya que React no quiere ser completamente \u201creactivo\u201d.</p>\n<h3 id=\"developer-experience\"><a class=\"anchor\" href=\"/react/design-principles#developer-experience\"></a>Experiencia de desarrollador </h3>\n<p>Proveer una buena experiencia de desarrollador es importante para nosotros.</p>\n<p>Por ejemplo, mantenemos las herramientas de desarrollo de React (<a class=\"external-link\" href=\"https://github.com/facebook/react/tree/main/packages/react-devtools\">React DevTools</a>) las cuales te permiten inspeccionar el \u00e1rbol de componentes de React en Chrome y Firefox. Hemos o\u00eddo que proveen un gran incremento de productividad a los ingenieros de Facebook y a la comunidad.</p>\n<p>Tambi\u00e9n tratamos de dar un extra para proveer advertencias \u00fatiles a los desarrolladores. Por ejemplo, React te advierte en desarrollo si anidas etiquetas de una forma que el navegador no las entiende, o si cometes un error de transcripci\u00f3n en la API. Las advertencias a desarrolladores y los chequeos relacionados son la raz\u00f3n principal por la que la versi\u00f3n de desarrollo de React es m\u00e1s lenta que la versi\u00f3n de producci\u00f3n.</p>\n<p>Los patrones de uso que observamos internamente en Facebook nos permiten entender cuales son los errores comunes, y prevenirlos de manera temprana. Cuando a\u00f1adimos nuevas funcionalidades, tratamos de anticipar los errores comunes y advertir acerca de ellos.</p>\n<p>Siempre estamos buscando formas de mejorar la experiencia de desarrollo. Nos encantar\u00eda oir tus sugerencias y aceptar contribuciones para mejorarla a\u00fan m\u00e1s.</p>\n<h3 id=\"debugging\"><a class=\"anchor\" href=\"/react/design-principles#debugging\"></a>Depuraci\u00f3n </h3>\n<p>Cuando algo sale mal, es importante contar con las migajas de pan que te permitan rastrear el error a su origen en la base de c\u00f3digo. En React, los <em>props</em> y el estado son esas migajas de pan.</p>\n<p>Si ves algo malo en la pantalla, puedes abrir la herramientas de desarrollo de React, encontrar el componente responsable del renderizado, y ver si los <em>props</em> y el estado son correctos. Si lo son, sabes que el problema est\u00e1 en la funci\u00f3n <code class=\"language-javascript\">render()</code> del componente, o en alguna funci\u00f3n llamada por <code class=\"language-javascript\">render()</code>. El problema est\u00e1 aislado.</p>\n<p>Si el estado es incorrecto, sabes que el problema es causado por alguna de las llamadas a <code class=\"language-javascript\">setState()</code> en este archivo. Esto tambi\u00e9n es relativamente simple de ubicar y arreglar, porque usualmente hay solo unas pocas llamadas a <code class=\"language-javascript\">setState()</code> en un solo archivo.</p>\n<p>Si los <em>props</em> son incorrectos, puedes recorrer el \u00e1rbol hacia arriba en el inspector, buscando el componente que haya sido el primero en \u201cenvenenar el pozo\u201d al pasar <em>props</em> incorrectas.</p>\n<p>Esta capacidad de rastrear cualquier interfaz de usuario hasta los datos que la produjeron en la forma de <em>props</em> y estado actual es muy importante para React. Es un objetivo expl\u00edcito del dise\u00f1o que el estado no est\u00e9 \u201catrapado\u201d en combinadores y clausuras, y que est\u00e9 disponible a React directamente.</p>\n<p>Si bien la interfaz de usuario es din\u00e1mica, creemos que funciones <code class=\"language-javascript\">render()</code> s\u00edncronas en funci\u00f3n de los <em>props</em> y el estado convierten la depuraci\u00f3n de un trabajo adivinatorio en un procedimiento aburrido pero finito. Nos gustar\u00eda preservar esta restricci\u00f3n aunque haga algunos casos de uso, tales como animaciones complejas, m\u00e1s dif\u00edciles. </p>\n<h3 id=\"configuration\"><a class=\"anchor\" href=\"/react/design-principles#configuration\"></a>Configuraci\u00f3n </h3>\n<p>Encontramos que las opciones de configuraci\u00f3n globales en tiempo de ejecuci\u00f3n son problem\u00e1ticas.</p>\n<p>Por ejemplo, ocasionalmente se nos solicita que implementemos una funci\u00f3n como <code class=\"language-javascript\">React.configure(options)</code> o <code class=\"language-javascript\">React.register(component)</code>. Sin embargo, esto plantea m\u00faltiples problemas, y no conocemos buenas soluciones para ellos.</p>\n<p>\u00bfQu\u00e9 pasar\u00eda si alguien llama dicha funci\u00f3n desde una biblioteca de componentes de terceros? \u00bfY qu\u00e9 si una aplicaci\u00f3n React contiene embebida otra aplicaci\u00f3n React, y sus configuraciones son incompatibles? \u00bfC\u00f3mo podr\u00eda un componente de terceros especificar que requiere una configuraci\u00f3n en particular? Creemos que una configuraci\u00f3n global no funciona bien con la composici\u00f3n. Dado que la composici\u00f3n es central en React, no proveemos configuraci\u00f3n global en el c\u00f3digo.</p>\n<p>Sin embargo, s\u00ed proveemos alguna configuraci\u00f3n global a nivel de compilaci\u00f3n. Por ejemplo, proveemos procesos de compilaci\u00f3n separados para desarrollo y producci\u00f3n. Podr\u00edamos tambi\u00e9n  <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/6627\">incluir una compilaci\u00f3n para an\u00e1lisis de rendimiento</a> en el futuro, y estamos abiertos a considerar otras opciones de compilaci\u00f3n.</p>\n<h3 id=\"beyond-the-dom\"><a class=\"anchor\" href=\"/react/design-principles#beyond-the-dom\"></a>M\u00e1s all\u00e1 del DOM </h3>\n<p>Vemos el valor de React en la forma en que nos permite escribir componentes con menos fallas y componerlos mejor. El DOM es la plataforma original de renderizado para React, pero <a class=\"external-link\" href=\"https://reactnative.dev/\">React Native</a> es igual de importante tanto para Facebook como para la comunidad.</p>\n<p>Ser agn\u00f3stico al renderizador es una restricci\u00f3n de dise\u00f1o importante para React. A\u00f1ade una sobrecarga en la representaci\u00f3n interna. Por otra parte, cualquier mejora en el n\u00facleo se traduce en una mejora a lo largo de todas las plataformas.</p>\n<p>Tener un modelo de programaci\u00f3n \u00fanico nos permite formar equipos de ingenier\u00eda alrededor de productos, en lugar de plataformas. Hasta ahora este sacrificio ha valido la pena.</p>\n<h3 id=\"implementation\"><a class=\"anchor\" href=\"/react/design-principles#implementation\"></a>Implementaci\u00f3n </h3>\n<p>Tratamos de proveer APIs elegantes donde sea posible. Estamos mucho menos preocupados con que la implementaci\u00f3n sea elegante. El mundo real est\u00e1 muy lejos de ser perfecto, y en una medida razonable preferimos poner el c\u00f3digo feo en la biblioteca si eso significa que el usuario no tiene que escribirlo. Cuando evaluamos nuevo c\u00f3digo, buscamos una implementaci\u00f3n correcta, con buen rendimiento y que permita una buena experiencia de desarrollo. La elegancia es secundaria.</p>\n<p>Preferimos c\u00f3digo aburrido a c\u00f3digo inteligente. El c\u00f3digo es descartable y cambia a menudo. As\u00ed que es importante que <a class=\"external-link\" href=\"https://youtu.be/4anAwXYqLG8?t=13m9s\">no introduzca nuevas abstracciones internas al menos que sea absolutamente necesario</a>. C\u00f3digo detallado que sea f\u00e1cil de mover, cambiar y eliminar es preferido sobre c\u00f3digo elegante que est\u00e9 abstra\u00eddo de manera prematura y que sea dif\u00edcil de cambiar. </p>\n<h3 id=\"optimized-for-tooling\"><a class=\"anchor\" href=\"/react/design-principles#optimized-for-tooling\"></a>Optimizado para instrumentaci\u00f3n </h3>\n<p>Algunas APIs com\u00fanmente usadas tienen nombres detallados. Por ejemplo, usamos <code class=\"language-javascript\">componentDidMount()</code> en lugar de <code class=\"language-javascript\">didMount()</code> o <code class=\"language-javascript\">onMount()</code>. Esto es <a class=\"external-link\" href=\"https://github.com/reactjs/react-future/issues/40#issuecomment-142442124\">intencional</a>. El objetivo es hacer los puntos de interacci\u00f3n con la biblioteca ampliamente visibles.</p>\n<p>En una base de c\u00f3digo masiva como la de Facebook, ser capaz de buscar los usos de una API espec\u00edfica es muy importante. Valoramos nombres distintivos y detallados, especialmente para las funcionalidades que deber\u00edan ser poco usadas. Por ejemplo, <code class=\"language-javascript\">dangerouslySetInnerHTML</code> es muy dif\u00edcil de no ver en una revisi\u00f3n de c\u00f3digo.</p>\n<p>Optimizar para la b\u00fasqueda tambi\u00e9n es importante  por nuestra dependencia de <a class=\"external-link\" href=\"https://www.youtube.com/watch?v=d0pOgY8__JM\">codemods</a> para realizar cambios incompatibles. Queremos que sea f\u00e1cil y seguro aplicar gran cantidad de cambios automatizados a lo largo de la base de c\u00f3digo, y los nombres distintivos detallados nos ayudan a lograr esto. De igual manera, los nombres distintivos facilitan escribir <a class=\"external-link\" href=\"https://github.com/yannickcr/eslint-plugin-react\">reglas de validaci\u00f3n</a> personalizadas para usar React sin preocuparse por falsos positivos.</p>\n<p><a href=\"/react/introducing-jsx\">JSX</a> juega un papel similar. Si bien no es requerido con React, lo utilizamos ampliamente en Facebook por razones est\u00e9ticas y pragm\u00e1ticas.</p>\n<p>En nuestra base de c\u00f3digo, JSX provee una pista inequ\u00edvoca a las herramientas de que est\u00e1n tratando con un \u00e1rbol de elementos de React. Esto hace posible a\u00f1adir optimizaciones en tiempo de compilaci\u00f3n tales como <a class=\"external-link\" href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-constant-elements/\">elevar elementos constantes</a>, y de forma segura validar y aplicar <em>codemods</em> al uso interno de componentes, e <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/6771\">incluir la ubicaci\u00f3n del c\u00f3digo fuente JSX</a>  en las advertencias.</p>\n<h3 id=\"dogfooding\"><a class=\"anchor\" href=\"/react/design-principles#dogfooding\"></a><em>Dogfooding</em> </h3>\n<p>Hacemos todo lo posible para abordar los problemas planteados por la comunidad. Sin embargo, es probable que prioricemos los problemas que las personas <em>tambi\u00e9n</em> experimentan internamente en Facebook. Quiz\u00e1s de manera contraria a la intuici\u00f3n, creemos que esta es la raz\u00f3n principal por la que la comunidad puede apostar por React.</p>\n<p>El amplio uso interno nos da la confianza de que React no desaparecer\u00e1 ma\u00f1ana. Le a\u00f1ade un valor de negocio tangible a la compa\u00f1\u00eda y es usado en muchos de sus productos. Usar nuestro propio producto, una pr\u00e1ctica conocida como <a class=\"external-link\" href=\"https://en.wikipedia.org/wiki/Eating_your_own_dog_food\"><em>Dogfooding</em></a> en ingl\u00e9s, significa que nuestra visi\u00f3n permanece n\u00edtida y que tenemos una direcci\u00f3n enfocada hacia el futuro.</p>\n<p>Esto no quiere decir que ignoramos los problemas identificados por la comunidad. Por ejemplo, a\u00f1adimos soporte a los <a href=\"/react/webcomponents\">componentes web</a> y a <a class=\"external-link\" href=\"https://github.com/facebook/react/pull/6243\">SVG</a> en React a pesar de que no dependemos de ninguno de ellos internamente. Estamos <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/2686\">escuchando activamente tus puntos de dolor</a> y <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2016/07/11/introducing-reacts-error-code-system.html\">los abordamos</a> de la mejor manera posible. La comunidad es lo que hace que React sea especial para nosotros, y nos sentimos honrados de contribuir.</p>\n<p>Despu\u00e9s de haber liberado muchos proyectos de c\u00f3digo abierto en Facebook, hemos aprendido que tratar de hacer a todo el mundo feliz al mismo tiempo produc\u00eda proyectos mal enfocados que no escalaban bien. En su lugar, descubrimos que elegir a una peque\u00f1a audiencia y enfocarnos en hacerlos felices produce un efecto neto positivo. Eso es exactamente lo que hicimos con React, y hasta ahora resolver los problemas encontrados por los equipos de producto en Facebook se ha traducido bien a la comunidad de c\u00f3digo abierto.</p>\n<p>La desventaja de este enfoque es que a veces fallamos en dar suficiente foco a los aspectos con los que los equipos de Facebook no tienen que lidiar, tales como la experiencia de \u201ccomenzar\u201d. Estamos muy conscientes de esto, y estamos buscando como mejorarlo de una forma que beneficie a todos en la comunidad sin cometer los mismos errores que tuvimos anteriormente con proyectos de c\u00f3digo abierto.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/design-principles.md\">Edit this page</a></p></div></article>", "path": "/react/design-principles", "nav": ["/react/implementation-notes", "/react/faq-ajax"]}]}, {"key": "Preguntas frecuentes", "values": [{"key": "AJAX y APIs", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"how-can-i-make-an-ajax-call\"><a class=\"anchor\" href=\"/react/faq-ajax#how-can-i-make-an-ajax-call\"></a>\u00bfC\u00f3mo puedo hacer una llamada AJAX? </h3>\n<p>Con React, puedes usar cualquier biblioteca AJAX. Algunas de las m\u00e1s populares son <a class=\"external-link\" href=\"https://github.com/axios/axios\">Axios</a>, <a class=\"external-link\" href=\"https://api.jquery.com/jQuery.ajax/\">jQuery AJAX</a>, y <a class=\"external-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">window.fetch</a>, la cual es soportada de manera nativa en la mayor\u00eda de navegadores modernos.</p>\n<h3 id=\"where-in-the-component-lifecycle-should-i-make-an-ajax-call\"><a class=\"anchor\" href=\"/react/faq-ajax#where-in-the-component-lifecycle-should-i-make-an-ajax-call\"></a>\u00bfEn qu\u00e9 ciclo de vida de un componente puedo hacer una llamada AJAX? </h3>\n<p>Deber\u00edas ejecutar tus llamadas AJAX en el ciclo de vida <a href=\"/react/react-component#mounting\"><code class=\"language-javascript\">componentDidMount</code></a>. De esta manera, podr\u00e1s llamar a <code class=\"language-javascript\">setState</code> para actualizar el componente una vez que hayas recibido tus datos.</p>\n<h3 id=\"example-using-ajax-results-to-set-local-state\"><a class=\"anchor\" href=\"/react/faq-ajax#example-using-ajax-results-to-set-local-state\"></a>Ejemplo: Utilizar el resultado de una llamada AJAX para actualizar el estado local de un componente </h3>\n<p>El siguiente ejemplo demuestra c\u00f3mo ejecutar una llamada AJAX en <code class=\"language-javascript\">componentDidMount</code> para establecer el estado local de un componente.</p>\n<p>La API de ejemplo devuelve el siguiente JSON:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">{\n  \"items\": [\n    { \"id\": 1, \"name\": \"Apples\",  \"price\": \"$2\" },\n    { \"id\": 2, \"name\": \"Peaches\", \"price\": \"$5\" }\n  ] \n}</code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">isLoaded</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.example.com/items\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">isLoaded</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>items\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Nota: es importante manejar errores aqu\u00ed y no en </span>\n        <span class=\"token comment\">// un bloque catch() para que no interceptemos errores</span>\n        <span class=\"token comment\">// de errores reales en los componentes.</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">isLoaded</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            error\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> isLoaded<span class=\"token punctuation\">,</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Error: </span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aqu\u00ed est\u00e1 el equivalente con <a class=\"external-link\" href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a>: </p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoaded<span class=\"token punctuation\">,</span> setIsLoaded<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">,</span> setItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Note: the empty deps array [] means</span>\n  <span class=\"token comment\">// this useEffect will run once</span>\n  <span class=\"token comment\">// similar to componentDidMount()</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.example.com/items\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setIsLoaded</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Nota: es importante manejar errores aqu\u00ed y no en </span>\n        <span class=\"token comment\">// un bloque catch() para que no interceptemos errores</span>\n        <span class=\"token comment\">// de errores reales en los componentes.</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setIsLoaded</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Error: </span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/faq-ajax.md\">Edit this page</a></p></div></article>", "path": "/react/faq-ajax", "nav": ["/react/design-principles", "/react/faq-build"]}, {"key": "Babel, JSX y pasos de compilaci\u00f3n", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"do-i-need-to-use-jsx-with-react\"><a class=\"anchor\" href=\"/react/faq-build#do-i-need-to-use-jsx-with-react\"></a>\u00bfNecesito usar JSX con React? </h3>\n<p>\u00a1No! Revisa <a href=\"/react/react-without-jsx\">\u201cReact sin JSX\u201d</a> para aprender m\u00e1s.</p>\n<h3 id=\"do-i-need-to-use-es6--with-react\"><a class=\"anchor\" href=\"/react/faq-build#do-i-need-to-use-es6--with-react\"></a>\u00bfNecesito usar ES6 (+) con React? </h3>\n<p>\u00a1No! Revisa <a href=\"/react/react-without-es6\">\u201cReact sin ES6\u201d</a> para aprender m\u00e1s.</p>\n<h3 id=\"how-can-i-write-comments-in-jsx\"><a class=\"anchor\" href=\"/react/faq-build#how-can-i-write-comments-in-jsx\"></a>\u00bfComo puedo escribir comentarios en JSX? </h3>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* El comentario va aqu\u00ed */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* \u00a1Tambi\u00e9n funciona\n  para comentarios multil\u00ednea! */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">! \n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/faq-build.md\">Edit this page</a></p></div></article>", "path": "/react/faq-build", "nav": ["/react/faq-ajax", "/react/faq-functions"]}, {"key": "Pasando funciones a componentes", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"how-do-i-pass-an-event-handler-like-onclick-to-a-component\"><a class=\"anchor\" href=\"/react/faq-functions#how-do-i-pass-an-event-handler-like-onclick-to-a-component\"></a>\u00bfC\u00f3mo puedo pasar un controlador de eventos (como onClick) a un componente? </h3>\n<p>Pasa controladores de eventos y otras funciones como props a componentes hijos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n<p>Si necesitas tener acceso al componente padre dentro del evento, tambi\u00e9n debes enlazar la funciones a la instancia del componente (ver abajo).</p>\n<h3 id=\"how-do-i-bind-a-function-to-a-component-instance\"><a class=\"anchor\" href=\"/react/faq-functions#how-do-i-bind-a-function-to-a-component-instance\"></a>\u00bfC\u00f3mo enlazo una funci\u00f3n a la instancia de un componente? </h3>\n<p>Hay varias maneras de asegurarte que las funciones tengan acceso a los atributos del componente como <code class=\"language-javascript\">this.props</code> y <code class=\"language-javascript\">this.state</code>, dependiendo de qu\u00e9 tipo de sintaxis o </p>\n<h4 id=\"bind-in-constructor-es2015\"><a class=\"anchor\" href=\"/react/faq-functions#bind-in-constructor-es2015\"></a>Enlazar dentro del constructor (ES2015) </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Se hizo click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click\u00e9ame</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"class-properties-es2022\"><a class=\"anchor\" href=\"/react/faq-functions#class-properties-es2022\"></a>Propiedades de clases (ES2022) </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Se hizo click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click\u00e9ame</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"bind-in-render\"><a class=\"anchor\" href=\"/react/faq-functions#bind-in-render\"></a>Enlazar en la renderizaci\u00f3n </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Se hizo click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click\u00e9ame</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Al usar <code class=\"language-javascript\">Function.prototype.bind</code> dentro de la renderizaci\u00f3n se crea una nueva funci\u00f3n cada vez que el componente se renderiza, lo cual podr\u00eda implicar problemas de rendimiento (ver abajo).</p>\n</div>\n<h4 id=\"arrow-function-in-render\"><a class=\"anchor\" href=\"/react/faq-functions#arrow-function-in-render\"></a>Funciones flecha en renderizaci\u00f3n </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Se hizo click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click\u00e9ame</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Usar una funci\u00f3n flecha en el renderizado crea una nueva funci\u00f3n cada vez que se renderiza el componente, lo cual podr\u00eda arruinar optimizaciones basadas en comparaci\u00f3n estricta de identidad.</p>\n</div>\n<h3 id=\"is-it-ok-to-use-arrow-functions-in-render-methods\"><a class=\"anchor\" href=\"/react/faq-functions#is-it-ok-to-use-arrow-functions-in-render-methods\"></a>\u00bfEst\u00e1 bien utilizar funciones flecha en los m\u00e9todos de renderizado? </h3>\n<p>Generalmente hablando, si est\u00e1 bien y normalmente es la forma m\u00e1s f\u00e1cil de pasar par\u00e1metros a funciones.</p>\n<p>Si tienes problemas de rendimiento, \u00a1no dudes en optimizar!</p>\n<h3 id=\"why-is-binding-necessary-at-all\"><a class=\"anchor\" href=\"/react/faq-functions#why-is-binding-necessary-at-all\"></a>\u00bfPor qu\u00e9 tiene que ser necesario enlazar? </h3>\n<p>En JavaScript, estos dos fragmentos de c\u00f3digo <strong>no</strong> son equivalentes.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n<span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Los m\u00e9todos de enlace nos aseguran que el segundo fragmento funcione de la misma manera que el primero.</p>\n<p>Con React, normalmente solo necesitamos enlazar los m\u00e9todos que <em>pasamos</em> a otros componentes. Por ejemplo: <code class=\"language-javascript\">&lt;button onClick={this.handleClick}&gt;</code> pasa <code class=\"language-javascript\">this.handleClick</code> por ende, se deber\u00eda enlazar. Sin embargo, es innecesario enlazar el m\u00e9todo <code class=\"language-javascript\">render</code> o los m\u00e9todos de ciclo de vida: no los pasamos a otros componentes.</p>\n<p><a class=\"external-link\" href=\"https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/\">Este art\u00edculo creado por Yehuda Katz</a> explica a detalle qu\u00e9 es enlazar, y c\u00f3mo funcionan las funciones en JavaScript.</p>\n<h3 id=\"why-is-my-function-being-called-every-time-the-component-renders\"><a class=\"anchor\" href=\"/react/faq-functions#why-is-my-function-being-called-every-time-the-component-renders\"></a>\u00bfPor qu\u00e9 mi funci\u00f3n est\u00e1 siendo llamada cada vez que mi componente renderiza? </h3>\n<p>Aseg\u00farate que no est\u00e9s <em>llamando la funci\u00f3n</em> cuando la pases al componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Incorrecto: \u00a1Se llama a handleClick en vez de ser pasado como una referencia!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click\u00e9ame!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En lugar de eso, <em>pasa la funci\u00f3n como tal</em> (sin los par\u00e9ntesis)</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Correcto: handleClick se pasa como una referencia!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Click\u00e9ame</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"how-do-i-pass-a-parameter-to-an-event-handler-or-callback\"><a class=\"anchor\" href=\"/react/faq-functions#how-do-i-pass-a-parameter-to-an-event-handler-or-callback\"></a>\u00bfC\u00f3mo paso un par\u00e1metro a un controlador de eventos o callback? </h3>\n<p>Puedes utilizar funciones flecha para envolver un controlador de eventos y pasar par\u00e1metros:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<p>Esto es lo equivalente de llamar <code class=\"language-javascript\">.bind</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span></code></pre></div>\n<h4 id=\"example-passing-params-using-arrow-functions\"><a class=\"anchor\" href=\"/react/faq-functions#example-passing-params-using-arrow-functions\"></a>Ejemplo: Pasar par\u00e1metros utilizando funci\u00f3n flecha </h4>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span> <span class=\"token comment\">// c\u00f3digo ASCII del car\u00e1cter.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alphabet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">justClicked</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">letters</span><span class=\"token operator\">:</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">justClicked</span><span class=\"token operator\">:</span> letter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Just clicked: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>justClicked<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>letters<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span> <span class=\"token operator\">=&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"example-passing-params-using-data-attributes\"><a class=\"anchor\" href=\"/react/faq-functions#example-passing-params-using-data-attributes\"></a>Ejemplo: Pasando par\u00e1metros usando data-attributes </h4>\n<p>Alternativamente, puedes utilizar APIs del DOM para guardar los datos que necesitan los controladores de eventos. Considera esta propuesta si necesitas optimizar una gran cantidad de elementos o tu \u00e1rbol de renderizado depende de las verificaciones de igualdad de React.PureComponent.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span> <span class=\"token comment\">// c\u00f3digo ASCII del car\u00e1cter</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alphabet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">justClicked</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">letters</span><span class=\"token operator\">:</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">justClicked</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>letter\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Just clicked: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>justClicked<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>letters<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span> <span class=\"token operator\">=&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">data-letter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span>letter<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row\"><a class=\"anchor\" href=\"/react/faq-functions#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row\"></a>\u00bfC\u00f3mo puede prevenir que una funci\u00f3n sea llamada muy r\u00e1pidamente o muchas veces seguidas? </h3>\n<p>Si tienes un controlador de eventos como <code class=\"language-javascript\">onClick</code> o <code class=\"language-javascript\">onScroll</code> y quieres prevenir que un <em>callback</em> sea disparado antes de tiempo, puedes limitar la tasa en la cual este <em>callback</em> es ejecutado. Se puede lograr usando:</p>\n<ul>\n<li><strong>throttle</strong>: regula los cambios siguiendo una frecuencia basada en el tiempo (ej. <a class=\"external-link\" href=\"https://lodash.com/docs#throttle\"><code class=\"language-javascript\">_.throttle</code></a>)</li>\n<li><strong>debounce</strong>: publica cambios despu\u00e9s de un periodo de inactividad (ej. <a class=\"external-link\" href=\"https://lodash.com/docs#debounce\"><code class=\"language-javascript\">_.debounce</code></a>)</li>\n<li><strong>throttle con <code class=\"language-javascript\">requestAnimationFrame</code></strong>: regula los cambios en base a <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/API/Window/requestAnimationFrame\"><code class=\"language-javascript\">requestAnimationFrame</code></a> (ej <a class=\"external-link\" href=\"https://github.com/alexreardon/raf-schd\"><code class=\"language-javascript\">raf-schd</code></a>)</li>\n</ul>\n<p>Mira <a class=\"external-link\" href=\"http://demo.nimius.net/debounce_throttle/\">esta visualizaci\u00f3n</a> para ver la comparaci\u00f3n entre las funciones <code class=\"language-javascript\">throttle</code> y <code class=\"language-javascript\">debounce</code>.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p><code class=\"language-javascript\">_.debounce</code>, <code class=\"language-javascript\">_.throttle</code> y <code class=\"language-javascript\">raf-schd</code> proporcionan el m\u00e9todo <code class=\"language-javascript\">cancel</code> para cancelar <em>callbacks</em> retrasados. Puedes llamar este m\u00e9todo dentro de <code class=\"language-javascript\">componentWillUnmount</code> <em>o</em> corrobora que el componente sigue montado dentro de la funci\u00f3n retrasada.</p>\n</div>\n<h4 id=\"throttle\"><a class=\"anchor\" href=\"/react/faq-functions#throttle\"></a>Throttle </h4>\n<p><em>Throttle</em> previene que una funci\u00f3n sea llamada m\u00e1s de una vez seg\u00fan el tiempo determinado. El ejemplo que se encuentra debajo regula un controlador de evento tipo click para prevenir que se llame m\u00e1s de una vez por segundo.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> throttle <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash.throttle'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadMoreButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClickThrottled <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClickThrottled<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClickThrottled<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Load More</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">loadMore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"debounce\"><a class=\"anchor\" href=\"/react/faq-functions#debounce\"></a>Debounce </h4>\n<p><em>Debounce</em> asegura que una funci\u00f3n no va a ser ejecutada hasta que cierta cantidad de tiempo haya pasado desde la \u00faltima vez que fue llamada. Esto puede ser muy \u00fatil cuando tienes que realizar operaciones demandantes como respuesta de un evento que puede ejecutarse muy r\u00e1pido (ejemplo eventos de scroll o teclado). El siguiente ejemplo hace <em>debounce</em> de una entrada de texto con un demora de 250ms.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> debounce <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash.debounce'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Searchbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitChangeDebounced <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitChange<span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitChangeDebounced<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Search...<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">defaultValue</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emitChangeDebounced</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">emitChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"requestanimationframe-throttling\"><a class=\"anchor\" href=\"/react/faq-functions#requestanimationframe-throttling\"></a><code class=\"language-javascript\">requestAnimationFrame</code> throttling </h4>\n<p><a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/API/Window/requestAnimationFrame\"><code class=\"language-javascript\">requestAnimationFrame</code></a> es una forma de poner una funci\u00f3n en cola para ser ejecutada por el navegador en un tiempo \u00f3ptimo para el rendimiento del renderizado. Una funci\u00f3n en cola con <code class=\"language-javascript\">requestAnimationFrame</code> va a dispararse en el siguiente cuadro. El navegador se va a encargar de que hayan 60 cuadros por segundo (60fps). Sin embargo, si el navegador no puede, el mismo navegador naturalmente va a limitar la cantidad de cuadros por segundo. Por ejemplo, un dispositivo podr\u00eda solo manejar 30 fps, por ende, solo tendr\u00e1s 30 cuadros por segundo. Usando <code class=\"language-javascript\">requestAnimationFrame</code> para throttle es una t\u00e9cnica muy \u00fatil ya que previene que t\u00fa mismo generes m\u00e1s de 60 actualizaciones por segundo. Si est\u00e1s generando 100 actualizaciones por segundo, puedes crear esfuerzo adicional para el navegador que el usuario de todas formas no va a poder apreciar.</p>\n<div class=\"blockquote\">\n<strong>Nota:</strong>\n<p>Usando esta t\u00e9cnica podemos capturar el \u00faltimo valor capturado en un cuadro. Puedes ver a un ejemplo de c\u00f3mo funciona este tipo de optimizaci\u00f3n en <a class=\"external-link\" href=\"https://developer.mozilla.org/es/docs/Web/Events/scroll\"><code class=\"language-javascript\">MDN</code></a></p>\n</div>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> rafSchedule <span class=\"token keyword\">from</span> <span class=\"token string\">'raf-schd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ScrollListener</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleScroll <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleScroll</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Crea una nueva funci\u00f3n para agendar actualizaciones</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scheduleUpdate <span class=\"token operator\">=</span> <span class=\"token function\">rafSchedule</span><span class=\"token punctuation\">(</span>\n      <span class=\"token parameter\">point</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onScroll</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Cuando recibimos un evento tipo scroll, agenda una actualizaci\u00f3n.</span>\n    <span class=\"token comment\">// Si recibimos muchas actualizaciones dentro de un cuadro, solo vamos a publicar el \u00faltimo valor</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Cancela cualquier actualizaci\u00f3n pendiente ya que estamos 'unmounting'.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scheduleUpdate<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">overflow</span><span class=\"token operator\">:</span> <span class=\"token string\">'scroll'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onScroll</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleScroll<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/my-huge-image.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"testing-your-rate-limiting\"><a class=\"anchor\" href=\"/react/faq-functions#testing-your-rate-limiting\"></a>Probando tu l\u00edmite de cuadros </h4>\n<p>Cuando probamos l\u00edmites de cuadros de forma correcta, es muy \u00fatil tener la habilidad de adelantar el tiempo. Si est\u00e1s utilizando <a class=\"external-link\" href=\"https://facebook.github.io/jest/\"><code class=\"language-javascript\">jest</code></a> puedes usar <a class=\"external-link\" href=\"https://facebook.github.io/jest/docs/en/timer-mocks.html\"><code class=\"language-javascript\">mock timers</code></a> para adelantar el tiempo. Si est\u00e1s utilizando <em>throttle</em> con <code class=\"language-javascript\">requestAnimationFrame</code> podr\u00edas encontrar \u00fatil <a class=\"external-link\" href=\"https://github.com/alexreardon/raf-stub\"><code class=\"language-javascript\">raf-stub</code></a> para controlar la frecuencia de los cuadros de animaci\u00f3n.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/faq-functions.md\">Edit this page</a></p></div></article>", "path": "/react/faq-functions", "nav": ["/react/faq-build", "/react/faq-state"]}, {"key": "Estado del componente", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"what-does-setstate-do\"><a class=\"anchor\" href=\"/react/faq-state#what-does-setstate-do\"></a>\u00bfQu\u00e9 hace <code class=\"language-javascript\">setState</code>? </h3>\n<p><code class=\"language-javascript\">setState()</code> programa una actualizaci\u00f3n al objeto <code class=\"language-javascript\">estado</code> de un componente. Cuando el estado cambia, el componente responde volviendo a renderizar.</p>\n<h3 id=\"what-is-the-difference-between-state-and-props\"><a class=\"anchor\" href=\"/react/faq-state#what-is-the-difference-between-state-and-props\"></a>\u00bfCu\u00e1l es la diferencia entre <code class=\"language-javascript\">state</code> y <code class=\"language-javascript\">props</code>? </h3>\n<p><a href=\"/react/components-and-props\"><code class=\"language-javascript\">props</code></a> (abreviatura de \u201d<em>properties</em>\u201d) y <a href=\"/react/state-and-lifecycle\"><code class=\"language-javascript\">state</code></a> son objetos planos de JavaScript. Mientras ambos contienen informaci\u00f3n que influye en el resultado del render, son diferentes debido a una importante raz\u00f3n: <code class=\"language-javascript\">props</code> se pasa <em>al</em> componente (similar a los par\u00e1metros de una funci\u00f3n) mientras que <code class=\"language-javascript\">state</code> se administra <em>dentro</em> del componente (similar a las variables declaradas dentro de una funci\u00f3n).</p>\n<p>Aqu\u00ed hay algunos buenos recursos para leer m\u00e1s sobre cu\u00e1ndo usar <code class=\"language-javascript\">props</code> vs. <code class=\"language-javascript\">estado</code>:</p>\n<ul>\n<li><a class=\"external-link\" href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\">Props vs State</a></li>\n<li><a class=\"external-link\" href=\"https://lucybain.com/blog/2016/react-state-vs-pros/\">ReactJS: Props vs. State</a></li>\n</ul>\n<h3 id=\"why-is-setstate-giving-me-the-wrong-value\"><a class=\"anchor\" href=\"/react/faq-state#why-is-setstate-giving-me-the-wrong-value\"></a>\u00bfPor qu\u00e9 <code class=\"language-javascript\">setState</code> me est\u00e1 dando el valor incorrecto? </h3>\n<p>En React, tanto <code class=\"language-javascript\">this.props</code> como <code class=\"language-javascript\">this.state</code> representan los valores <em>renderizados</em>, es decir, lo que hay actualmente en la pantalla.</p>\n<p>Las llamadas a <code class=\"language-javascript\">setState</code> son as\u00edncronas; no te f\u00edes de que <code class=\"language-javascript\">this.state</code> refleje el nuevo valor inmediatamente despu\u00e9s de llamar a <code class=\"language-javascript\">setState</code>. Pasa una funci\u00f3n de actualizaci\u00f3n en lugar de un objeto si necesitas calcular valores en funci\u00f3n del estado actual (revisa a continuaci\u00f3n para m\u00e1s detalles).</p>\n<p>Ejemplo de c\u00f3digo que <em>no</em> se comportar\u00e1 como se espera:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Nota: esto *no* funcionar\u00e1 como se espera.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">handleSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Digamos que `this.state.count` se inicia en 0.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Cuando React rerenderiza el componente, `this.state.count` ser\u00e1 1, pero tu esperabas 3.</span>\n\n  <span class=\"token comment\">// Esto es porque la funci\u00f3n anterior `incrementCount()` lee de `this.state.count`,</span>\n  <span class=\"token comment\">// pero React no actualiza `this.state.count` hasta que el componente se vuelve a renderizar.</span>\n  <span class=\"token comment\">// Entonces `incrementCount()` termina leyendo `this.state.count` como 0 cada vez, y lo establece a 1.</span>\n\n  <span class=\"token comment\">// \u00a1La soluci\u00f3n se describe a continuaci\u00f3n!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ve a continuaci\u00f3n c\u00f3mo solucionar este problema.</p>\n<h3 id=\"how-do-i-update-state-with-values-that-depend-on-the-current-state\"><a class=\"anchor\" href=\"/react/faq-state#how-do-i-update-state-with-values-that-depend-on-the-current-state\"></a>\u00bfC\u00f3mo actualizo el estado con valores que dependen del estado actual? </h3>\n<p>Pasa una funci\u00f3n en lugar de un objeto a <code class=\"language-javascript\">setState</code> para asegurarte de que la llamada siempre use la versi\u00f3n m\u00e1s actualizada del estado (ver m\u00e1s abajo).</p>\n<h3 id=\"what-is-the-difference-between-passing-an-object-or-a-function-in-setstate\"><a class=\"anchor\" href=\"/react/faq-state#what-is-the-difference-between-passing-an-object-or-a-function-in-setstate\"></a>\u00bfCu\u00e1l es la diferencia entre pasar un objeto o una funci\u00f3n en <code class=\"language-javascript\">setState</code>? </h3>\n<p>Pasar una funci\u00f3n de actualizaci\u00f3n te permite acceder al valor del estado actual dentro del actualizador. Dado que las llamadas a <code class=\"language-javascript\">setState</code> son por lotes, esto te permite encadenar actualizaciones y asegurarte de que se construyan una encima de otra en lugar de generar conflictos:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Importante: lee `state` en vez de `this.state` al actualizar.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">handleSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Digamos que `this.state.count` inicia en 0.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Si lees `this.state.count` ahora, a\u00fan ser\u00eda 0.</span>\n  <span class=\"token comment\">// Pero cuando React vuelva a renderizar el componente, ser\u00e1 3.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/react/react-component#setstate\">Aprende m\u00e1s sobre setState</a></p>\n<h3 id=\"when-is-setstate-asynchronous\"><a class=\"anchor\" href=\"/react/faq-state#when-is-setstate-asynchronous\"></a>\u00bfCu\u00e1ndo <code class=\"language-javascript\">setState</code> es as\u00edncrono? </h3>\n<p>Actualmente, <code class=\"language-javascript\">setState</code> es as\u00edncrono dentro de los controladores de eventos.</p>\n<p>Esto garantiza, por ejemplo, que si <code class=\"language-javascript\">Parent</code> y <code class=\"language-javascript\">Child</code> llaman a <code class=\"language-javascript\">setState</code> durante un evento de click, <code class=\"language-javascript\">Child</code> no se renderiza dos veces. En su lugar, React \u201cvac\u00eda\u201d las actualizaciones del estado al final del evento del navegador. Esto se traduce en mejoras significativas de rendimiento en aplicaciones m\u00e1s grandes.</p>\n<p>Este es un detalle de implementaci\u00f3n, as\u00ed que evita confiar en \u00e9l directamente. En las versiones futuras, React realizar\u00e1 actualizaciones por lotes por defecto en m\u00e1s casos.</p>\n<h3 id=\"why-doesnt-react-update-thisstate-synchronously\"><a class=\"anchor\" href=\"/react/faq-state#why-doesnt-react-update-thisstate-synchronously\"></a>\u00bfPor qu\u00e9 React no actualiza <code class=\"language-javascript\">this.state</code> de forma sincr\u00f3nica? </h3>\n<p>Como se explic\u00f3 en la secci\u00f3n anterior, React intencionalmente \u201cespera\u201d hasta que todos los componentes llamen a <code class=\"language-javascript\">setState()</code> en sus controladores de eventos antes de comenzar a rerenderizar. Esto aumenta el rendimiento al evitar rerenderizados innecesarios.</p>\n<p>Sin embargo, es posible que a\u00fan te est\u00e9s preguntando por qu\u00e9 React no solo actualiza \u2018this.state\u2019 inmediatamente sin volver a renderizar.</p>\n<p>Hay dos razones principales:</p>\n<ul>\n<li>Esto romper\u00eda la consistencia entre <code class=\"language-javascript\">props</code> y <code class=\"language-javascript\">state</code>, causando problemas que son muy dif\u00edciles de depurar.</li>\n<li>Esto har\u00eda que algunas de las nuevas funcionalidades en las que estamos trabajando sean imposibles de implementar.</li>\n</ul>\n<p>Este <a class=\"external-link\" href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">comentario de GitHub</a> profundiza en los ejemplos espec\u00edficos.</p>\n<h3 id=\"should-i-use-a-state-management-library-like-redux-or-mobx\"><a class=\"anchor\" href=\"/react/faq-state#should-i-use-a-state-management-library-like-redux-or-mobx\"></a>\u00bfDebo usar una biblioteca de manejo de estado como Redux o MobX? </h3>\n<p><a class=\"external-link\" href=\"https://redux.js.org/faq/general#when-should-i-use-redux\">Tal vez.</a></p>\n<p>Es una buena idea conocer primero React, antes de agregar bibliotecas adicionales. Puedes construir aplicaciones bastante complejas usando solo React.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/faq-state.md\">Edit this page</a></p></div></article>", "path": "/react/faq-state", "nav": ["/react/faq-functions", "/react/faq-styling"]}, {"key": "Estilo y CSS", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"how-do-i-add-css-classes-to-components\"><a class=\"anchor\" href=\"/react/faq-styling#how-do-i-add-css-classes-to-components\"></a>\u00bfC\u00f3mo agrego clases CSS a los componentes? </h3>\n<p>Pasa una string como la prop <code class=\"language-javascript\">className</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>menu navigation-menu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Menu</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Es com\u00fan que las clases CSS dependan de las props o del estado del componente:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-jsx\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> className <span class=\"token operator\">=</span> <span class=\"token string\">'menu'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    className <span class=\"token operator\">+=</span> <span class=\"token string\">' menu-active'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Menu</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"blockquote\">\n<strong>Tip</strong>\n<p>Si a menudo escribes c\u00f3digo como este, el paquete <a class=\"external-link\" href=\"https://www.npmjs.com/package/classnames#usage-with-reactjs\">classnames</a> puede hacerlo m\u00e1s simple.</p>\n</div>\n<h3 id=\"can-i-use-inline-styles\"><a class=\"anchor\" href=\"/react/faq-styling#can-i-use-inline-styles\"></a>\u00bfPuedo usar estilos en l\u00ednea? </h3>\n<p>S\u00ed, ve la documentaci\u00f3n sobre estilo <a href=\"/react/dom-elements#style\">aqu\u00ed</a>.</p>\n<h3 id=\"are-inline-styles-bad\"><a class=\"anchor\" href=\"/react/faq-styling#are-inline-styles-bad\"></a>\u00bfLos estilos en l\u00ednea son malos? </h3>\n<p>Las clases CSS son generalmente mejores para el rendimiento que los estilos en l\u00ednea.</p>\n<h3 id=\"what-is-css-in-js\"><a class=\"anchor\" href=\"/react/faq-styling#what-is-css-in-js\"></a>\u00bfQu\u00e9 es CSS-in-JS? </h3>\n<p>\u201cCSS-in-JS\u201d se refiere a un patr\u00f3n donde el CSS se compone usando JavaScript en lugar de definirlo en archivos externos.</p>\n<p><em>Ten en cuenta que esta funcionalidad no es parte de React, sino que es proporcionada por bibliotecas de terceros.</em> React no tiene una opini\u00f3n sobre c\u00f3mo se definen los estilos; en caso de dudas, un buen punto de partida es definir tus estilos en un archivo <code class=\"language-javascript\">*.css</code> separado como de costumbre y referirse a ellos usando <a href=\"/react/dom-elements#classname\"><code class=\"language-javascript\">className</code></a>.</p>\n<h3 id=\"can-i-do-animations-in-react\"><a class=\"anchor\" href=\"/react/faq-styling#can-i-do-animations-in-react\"></a>\u00bfPuedo hacer animaciones en React? </h3>\n<p>React puede usarse para potenciar animaciones. Revisa <a class=\"external-link\" href=\"https://reactcommunity.org/react-transition-group/\">React Transition Group</a>, <a class=\"external-link\" href=\"https://github.com/chenglou/react-motion\">React Motion</a>, <a class=\"external-link\" href=\"https://github.com/react-spring/react-spring\">React Spring</a> o <a class=\"external-link\" href=\"https://framer.com/motion\">Framer Motion</a>, por ejemplo.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/faq-styling.md\">Edit this page</a></p></div></article>", "path": "/react/faq-styling", "nav": ["/react/faq-state", "/react/faq-structure"]}, {"key": "Estructura de archivos", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"is-there-a-recommended-way-to-structure-react-projects\"><a class=\"anchor\" href=\"/react/faq-structure#is-there-a-recommended-way-to-structure-react-projects\"></a>\u00bfHay una forma recomendada de estructurar los proyectos React? </h3>\n<p>React no tiene opiniones sobre c\u00f3mo poner los archivos en carpetas. Dicho esto, hay algunos enfoques comunes que son populares en el ecosistema que podr\u00edas considerar.</p>\n<h4 id=\"grouping-by-features-or-routes\"><a class=\"anchor\" href=\"/react/faq-structure#grouping-by-features-or-routes\"></a>Agrupaci\u00f3n por funcionalidades o rutas </h4>\n<p>Una forma com\u00fan de estructurar proyectos es ubicar CSS, JS y tests juntos dentro de carpetas agrupadas por funcionalidad o ruta.</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">common/\n  Avatar.js\n  Avatar.css\n  APIUtils.js\n  APIUtils.test.js\nfeed/\n  index.js\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  FeedAPI.js\nprofile/\n  index.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n  ProfileAPI.js</code></pre></div>\n<p>La definici\u00f3n de una \u201cfuncionalidad\u201d no es universal, y depende de ti elegir la granularidad. Si no puedes pensar en una lista de carpetas de nivel superior, puede preguntarle a los usuarios de tu producto cu\u00e1les son las partes principales y usar su modelo mental como estructura.</p>\n<h4 id=\"grouping-by-file-type\"><a class=\"anchor\" href=\"/react/faq-structure#grouping-by-file-type\"></a>Agrupando por tipo de archivo </h4>\n<p>Otra forma popular de estructurar proyectos es agrupar archivos similares, por ejemplo:</p>\n<div class=\"gatsby-highlight\"><pre class=\"gatsby-code-text\"><code class=\"language-javascript\">api/\n  APIUtils.js\n  APIUtils.test.js\n  ProfileAPI.js\n  UserAPI.js\ncomponents/\n  Avatar.js\n  Avatar.css\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css</code></pre></div>\n<p>Algunas personas tambi\u00e9n prefieren ir m\u00e1s lejos y separar los componentes en diferentes carpetas dependiendo de su funci\u00f3n en la aplicaci\u00f3n. Por ejemplo, <a class=\"external-link\" href=\"http://bradfrost.com/blog/post/atomic-web-design/\">Atomic Design</a> es una metodolog\u00eda de dise\u00f1o basada en este principio. Recuerda que a menudo es m\u00e1s productivo tratar estas metodolog\u00edas como ejemplos \u00fatiles en lugar de reglas estrictas a seguir.</p>\n<h4 id=\"avoid-too-much-nesting\"><a class=\"anchor\" href=\"/react/faq-structure#avoid-too-much-nesting\"></a>Evita el exceso de anidaci\u00f3n </h4>\n<p>Hay muchos puntos d\u00e9biles asociados con el anidamiento profundo de directorios en proyectos JavaScript. Se vuelve m\u00e1s dif\u00edcil escribir importaciones relativas entre ellas o actualizar esas importaciones cuando se mueven los archivos. A menos que tengas una raz\u00f3n muy convincente para usar una estructura de carpetas profunda, considera limitarte a un m\u00e1ximo de tres o cuatro carpetas anidadas dentro de un solo proyecto. Por supuesto, esto es solo una recomendaci\u00f3n y puede que no sea relevante para tu proyecto.</p>\n<h4 id=\"avoid-too-much-nesting\"><a class=\"anchor\" href=\"/react/faq-structure#avoid-too-much-nesting\"></a>No lo pienses demasiado </h4>\n<p>Si est\u00e1s comenzando un proyecto, <a class=\"external-link\" href=\"https://es.wikipedia.org/wiki/Par%C3%A1lisis_del_an%C3%A1lisis\">no gastes m\u00e1s de cinco minutos</a> en elegir una estructura de archivos. \u00a1Elige cualquiera de los enfoques anteriores (o crea uno propio) y comienza a escribir c\u00f3digo! Probablemente querr\u00e1s volver a pensarlo de todos modos despu\u00e9s de haber escrito c\u00f3digo real.</p>\n<p>Si te sientes completamente atascado, comienza por mantener todos los archivos en una sola carpeta. Eventualmente crecer\u00e1 lo suficiente como para que quieras separar algunos archivos del resto. Para ese momento, tendr\u00e1s suficiente conocimientos para saber qu\u00e9 archivos editas juntos con mayor frecuencia. En general, es una buena idea mantener los archivos que a menudo cambian juntos cerca unos de otros. Este principio se llama \u201ccolocaci\u00f3n\u201d.</p>\n<p>A medida que los proyectos crecen, frecuentemente utilizan una combinaci\u00f3n de los dos enfoques anteriores en la pr\u00e1ctica. As\u00ed que elegir el \u201ccorrecto\u201d al principio no es muy importante.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/faq-structure.md\">Edit this page</a></p></div></article>", "path": "/react/faq-structure", "nav": ["/react/faq-styling", "/react/faq-versioning"]}, {"key": "Pol\u00edtica de versiones", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><p>React sigue los principios de <a class=\"external-link\" href=\"https://semver.org/lang/es/\">versionado sem\u00e1ntico (semver)</a>.</p>\n<p>Esto significa que lo hace con un n\u00famero de versi\u00f3n <strong>x.y.z</strong>:</p>\n<ul>\n<li>Al lanzar <strong>correcciones de errores cr\u00edticos</strong>, publicamos un <strong>parche</strong> cambiando el n\u00famero <strong>z</strong> (ej: 15.6.2 a 15.6.3).</li>\n<li>Al lanzar una <strong>nueva funcionalidad</strong> o <strong>correciones de errores no cr\u00edticos</strong>, publicamos una <strong>versi\u00f3n menor</strong> cambiando el n\u00famero <strong>y</strong> (ej: 15.6.2 a 15.7.0).</li>\n<li>Al lanzar <strong>cambios con rupturas</strong>, publicamos una <strong>versi\u00f3n mayor</strong> cambiando el n\u00famero <strong>x</strong> (ej: 15.6.2 a 16.0.0).</li>\n</ul>\n<p>Las versiones mayores tambi\u00e9n pueden contener nuevas funcionalidades, y cualquier versi\u00f3n puede incluir correcciones de errores.</p>\n<p>Las versiones menores son el tipo de versiones m\u00e1s com\u00fan.</p>\n<div class=\"blockquote\">\n<strong>Esta pol\u00edtica de versiones no aplica a compilados de pre-lanzamientos en los canales de \u201cNext\u201d o \u201cExperimental\u201d. Aprende m\u00e1s sobre pre-lanzamientos.</strong>\n</div>\n<h3 id=\"breaking-changes\"><a class=\"anchor\" href=\"/react/faq-versioning#breaking-changes\"></a>Cambios con rupturas </h3>\n<p>Los cambios con rupturas son inconvenientes para todos, por lo que intentamos minimizar el n\u00famero de versiones mayores \u2013 por ejemplo, React 15 fue lanzado en Abril de 2016, React 16 fue lanzado en septiembre de 2017 y React 17 en octubre de 2020.</p>\n<p>En cambio, lanzamos nuevas funcionalidades en versiones menores. Esto significa que las versiones menores son a menudo m\u00e1s interesantes que las versiones mayores, a pesar de su modesto nombre.</p>\n<h3 id=\"commitment-to-stability\"><a class=\"anchor\" href=\"/react/faq-versioning#commitment-to-stability\"></a>Compromiso a la estabilidad </h3>\n<p>A medida que actualizamos React, intentamos minimizar el esfuerzo necesario para aprovechar nuevas funcionalidades. Cuando sea posible, mantendremos una API antigua funcionando, incluso si eso significa ponerla en un paquete separado. Por ejemplo, <a class=\"external-link\" href=\"https://es.reactjs.org//blog/2016/07/13/mixins-considered-harmful.html\">el uso de <em>mixins</em> no ha sido recomendado durante a\u00f1os</a> pero a\u00fan son aceptados hasta hoy en d\u00eda <a href=\"/react/react-without-es6#mixins\">mediante el uso de create-react-class</a> y muchas bases de c\u00f3digo a\u00fan siguen utiliz\u00e1ndolos en c\u00f3digo estable pero antiguo.</p>\n<p>M\u00e1s de un mill\u00f3n de desarrolladores utilizan React, manteniendo colectivamente millones de componentes. Solamente la base de c\u00f3digo de Facebook tiene m\u00e1s de 50.000 componentes de React. Esto significa que tenemos que hacer lo m\u00e1s f\u00e1cil posible actualizar a nuevas versiones de React; si hacemos grandes cambios sin una gu\u00eda de actualizaci\u00f3n, la gente se quedar\u00e1 atascada en versiones antiguas. Probamos estas gu\u00edas de actualizaci\u00f3n en Facebook \u2013 si nuestro equipo de menos de 10 personas puede actualizar 50.000 componentes por si mismos, esperamos que la actualizaci\u00f3n sea manejable para cualquiera que utilice React. En muchos casos, escribimos <a class=\"external-link\" href=\"https://github.com/reactjs/react-codemod\"><em>scripts</em> automatizados</a> para actualizar la sintaxis de componentes, que luego incluimos en la versi\u00f3n de c\u00f3digo abierto para que todo el mundo los utilice.</p>\n<h3 id=\"gradual-upgrades-via-warnings\"><a class=\"anchor\" href=\"/react/faq-versioning#gradual-upgrades-via-warnings\"></a>Mejoras graduales a trav\u00e9s de advertencias </h3>\n<p>Las versiones de desarrollo de React incluyen muchas advertencias \u00fatiles. Siempre que es posible, a\u00f1adimos advertencias en preparaci\u00f3n a futuros cambios con rupturas. De esta manera, si tu aplicaci\u00f3n no tiene advertencias en el \u00faltimo lanzamiento, esta ser\u00e1 compatible con la pr\u00f3xima versi\u00f3n mayor. Esto te permite actualizar tu aplicaci\u00f3n un componente a la vez.</p>\n<p>Las advertencias de desarrollo no afectar\u00e1n el comportamiento en tiempo de ejecuci\u00f3n de tu aplicaci\u00f3n. De esa forma, puedes estar seguro de que tu aplicaci\u00f3n se comportar\u00e1 de la misma manera entre la versi\u00f3n de desarrollo y la versi\u00f3n de producci\u00f3n \u2014 las \u00fanicas diferencias son que la versi\u00f3n de producci\u00f3n no registrar\u00e1 las advertencias y es m\u00e1s eficiente. (Si alguna vez observas lo contrario, por favor abre un <em>issue</em>).</p>\n<h3 id=\"what-counts-as-a-breaking-change\"><a class=\"anchor\" href=\"/react/faq-versioning#what-counts-as-a-breaking-change\"></a>\u00bfQu\u00e9 cuenta como un cambio con rupturas? </h3>\n<p>En general, <em>no publicamos</em> una versi\u00f3n mayor por cambios a:</p>\n<ul>\n<li><strong>Advertencias de desarrollo.</strong> Dado que no afectan el comportamiento en producci\u00f3n, podemos a\u00f1adir nuevas advertencias o modificar advertencias existentes entre versiones mayores. De hecho, esto es lo que nos permite advertir de forma fiable sobre los pr\u00f3ximos cambios con rupturas.</li>\n<li><strong>APIs que comienzan con <code class=\"language-javascript\">unstable_</code>.</strong> Estas ofrecen funcionalidades experimentales sobre cuyas APIs todav\u00eda no estamos seguros. Al publicar esto con un prefijo <code class=\"language-javascript\">unstable_</code>, podemos iterar m\u00e1s r\u00e1pido y llegar a un API estable lo antes posible.</li>\n<li><strong>Versiones alfa y <em>canary</em> de React.</strong>  Proporcionamos versiones alfa de React como una manera de probar nuevas caracter\u00edsticas con antelaci\u00f3n, pero necesitamos la flexibilidad para hacer cambios basados en lo que aprendemos en el per\u00edodo alfa. Si utilizas estas versiones, ten en cuenta que las APIs pueden cambiar antes de la versi\u00f3n estable sea publicada.</li>\n<li><strong>APIs no documentadas y estructuras de datos internas.</strong> Si accedes a nombres de propiedades internas como <code class=\"language-javascript\">__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED</code> o <code class=\"language-javascript\">__reactInternalInstance$uk43rzhitjg</code>, no podemos garantizar nada. Est\u00e1s por tu cuenta.</li>\n</ul>\n<p>Esta pol\u00edtica est\u00e1 dise\u00f1ada para ser pragm\u00e1tica: desde luego, no queremos causarte dolores de cabeza. Si public\u00e1ramos una nueva versi\u00f3n mayor por cada uno de estos cambios, acabar\u00edamos lanzando m\u00e1s versiones mayores y causar\u00edamos m\u00e1s inconvenientes con el versionado a la comunidad. Tambi\u00e9n significar\u00eda que no podr\u00edamos mejorar React tan r\u00e1pido como nos gustar\u00eda.</p>\n<p>Dicho esto, si creemos que alg\u00fan cambio en esta lista va a provocar grandes problemas en la comunidad, haremos todo lo posible para proporcionar una gu\u00eda de actualizaci\u00f3n gradual.</p>\n<h3 id=\"minors-versus-patches\"><a class=\"anchor\" href=\"/react/faq-versioning#minors-versus-patches\"></a>Si un lanzamiento menor no incluye nuevas funcionalidades, por qu\u00e9 no es un parche? </h3>\n<p>Es posible que un lanzamiento menor no incluya nuevas funcionalidades. <a class=\"external-link\" href=\"https://semver.org/#spec-item-7\">Esto es permitido por semver</a>, que dice <strong>\u201d[un lanzamiento menor] PUEDE incrementarse si una funcionalidad substancial o mejoras son introducidas en el c\u00f3digo privado. PUEDE incluir cambios a nivel de parche.\u201d</strong></p>\n<p>Sin embargo, sale a flote la pregunta de por qu\u00e9 estos lanzamientos no son versionados como parches.</p>\n<p>La respuesta es que cualquier cambio a React (o cualquier otro software) lleva cierto riesgo de romperse de maneras inesperadas. Imagina un escenario en el que el lanzamiento del parche que arregla un error accidentalmente crea un nuevo error. Esto no solo ser\u00eda disruptivo para los desarrolladores, sino que tambi\u00e9n da\u00f1ar\u00eda la confianza en futuros lanzamientos de parches. Es especialmente lamentable si el arreglo original es para un error que es raramente encontrado en la pr\u00e1ctica.</p>\n<p>Tenemos un buen record de mantener los lanzamientos de React libres de errores, pero los lanzamientos de parches tienen un nivel mayor de confiabilidad ya que la mayor\u00eda de los desarrolladores asumen que pueden adoptarlos sin consecuencias adversas.</p>\n<p>Por estas razones, reservamos los lanzamientos de parches exclusivamente para los errores m\u00e1s cr\u00edticos y vulnerabilidades de seguridad.</p>\n<p>Si el lanzamiento incluye cambios no esenciales - como por ejemplo refactorizados internos, cambios a los detalles de implementaci\u00f3n, mejoras de rendimiento, o arreglos a errores menores - lanzaremos la versi\u00f3n menor incluso cuando no hay nuevas funcionalidades.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/faq-versioning.md\">Edit this page</a></p></div></article>", "path": "/react/faq-versioning", "nav": ["/react/faq-structure", "/react/faq-internals"]}, {"key": "DOM virtual y detalles de implementaci\u00f3n", "value": "<article class=\"css-174qq1k\"><div class=\"css-124oy3v\"><div class=\"css-6nf64v\"><h3 id=\"what-is-the-virtual-dom\"><a class=\"anchor\" href=\"/react/faq-internals#what-is-the-virtual-dom\"></a>\u00bfQu\u00e9 es el DOM virtual? </h3>\n<p>El DOM virtual (VDOM) es un concepto de programaci\u00f3n donde una representaci\u00f3n ideal o \u201cvirtual\u201d de la IU se mantiene en memoria y en sincron\u00eda con el DOM \u201creal\u201d, mediante una biblioteca como ReactDOM. Este proceso se conoce como <a href=\"/react/reconciliation\">reconciliaci\u00f3n</a>.</p>\n<p>Este enfoque hace posible la API declarativa de React: le dices a React en qu\u00e9 estado quieres que est\u00e9 la IU, y se har\u00e1 cargo de llevar el DOM a ese estado. Esto abstrae la manipulaci\u00f3n de atributos, manejo de eventos y actualizaci\u00f3n manual del DOM que de otra manera tendr\u00edas que usar para construir tu aplicaci\u00f3n.</p>\n<p>Ya que \u201cDOM virtual\u201d es m\u00e1s un patr\u00f3n que una tecnolog\u00eda espec\u00edfica, las personas a veces le dan significados diferentes. En el mundo de React, el t\u00e9rmino \u201cDOM virtual\u201d es normalmente asociado con <a href=\"/react/rendering-elements\">elementos de React</a> ya que son objetos representando la interfaz de usuario. Sin embargo, React tambi\u00e9n usa objetos internos llamados \u201cfibers\u201d para mantener informaci\u00f3n adicional acerca del \u00e1rbol de componentes. \u00c9stos pueden ser tambi\u00e9n considerados como parte de la implementaci\u00f3n de \u201cDOM virtual\u201d de React.</p>\n<h3 id=\"is-the-shadow-dom-the-same-as-the-virtual-dom\"><a class=\"anchor\" href=\"/react/faq-internals#is-the-shadow-dom-the-same-as-the-virtual-dom\"></a>\u00bfEs el Shadow DOM lo mismo que el DOM virtual? </h3>\n<p>No, son diferentes. El Shadow DOM es una tecnolog\u00eda de los navegadores dise\u00f1ada principalmente para limitar el alcance de variables y CSS en componentes web. El DOM virtual es un concepto que implementan bibliotecas en JavaScript por encima de las APIs de los navegadores.</p>\n<h3 id=\"what-is-react-fiber\"><a class=\"anchor\" href=\"/react/faq-internals#what-is-react-fiber\"></a>\u00bfQu\u00e9 es \u201cReact Fiber\u201d? </h3>\n<p>Fiber es el nuevo motor de reconciliaci\u00f3n en React 16. Su principal objetivo es permitir el renderizado incremental del DOM virtual. <a class=\"external-link\" href=\"https://github.com/acdlite/react-fiber-architecture\">Leer m\u00e1s</a>.</p></div><p><a class=\"external-link\" href=\"https://github.com/reactjs/es.reactjs.org/blob/main/content/docs/faq-internals.md\">Edit this page</a></p></div></article>", "path": "/react/faq-internals", "nav": ["/react/faq-versioning"]}]}]